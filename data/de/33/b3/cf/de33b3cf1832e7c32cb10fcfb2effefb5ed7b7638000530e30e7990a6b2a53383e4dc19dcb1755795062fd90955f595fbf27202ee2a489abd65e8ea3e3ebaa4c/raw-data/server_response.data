<!DOCTYPE html>
<html lang='en'>
<head>
<title>gstreamer/gst-plugins-good - 'Good' GStreamer plugins  (mirrored from https://gitlab.freedesktop.org/gstreamer/gst-plugins-good)</title>
<meta name='generator' content='cgit v1.2.1'/>
<meta name='robots' content='index, nofollow'/>
<link rel='stylesheet' type='text/css' href='https://cgit.freedesktop.org/cgit.css'/>
<link rel='shortcut icon' href='/favicon.ico'/>
<link rel='alternate' title='Atom feed' href='https://cgit.freedesktop.org/gstreamer/gst-plugins-good/atom/?h=master' type='application/atom+xml'/>
<link rel='vcs-git' href='https://gitlab.freedesktop.org/gstreamer/gst-plugins-good' title='gstreamer/gst-plugins-good Git repository'/>
</head>
<body>
<div id='cgit'><table id='header'>
<tr>
<td class='logo' rowspan='2'><a href='/'><img src='https://cgit.freedesktop.org/logo.png' alt='cgit logo'/></a></td>
<td class='main'><a href='/'>index</a> : <a title='gstreamer/gst-plugins-good' href='/gstreamer/gst-plugins-good/'>gstreamer/gst-plugins-good</a></td><td class='form'><form method='get'>
<input type='hidden' name='id' value='153a8ae752c90d07190ef45803422a4f71ea8bff'/><select name='h' onchange='this.form.submit();'>
<option value='0.10'>0.10</option>
<option value='0.11'>0.11</option>
<option value='1.0'>1.0</option>
<option value='1.10'>1.10</option>
<option value='1.12'>1.12</option>
<option value='1.14'>1.14</option>
<option value='1.16'>1.16</option>
<option value='1.18'>1.18</option>
<option value='1.2'>1.2</option>
<option value='1.4'>1.4</option>
<option value='1.6'>1.6</option>
<option value='1.8'>1.8</option>
<option value='BRANCH-ERROR'>BRANCH-ERROR</option>
<option value='BRANCH-EVENTS2'>BRANCH-EVENTS2</option>
<option value='BRANCH-GSTREAMER-0_6'>BRANCH-GSTREAMER-0_6</option>
<option value='BRANCH-GSTREAMER-0_8'>BRANCH-GSTREAMER-0_8</option>
<option value='BRANCH-RELEASE-0_3_3'>BRANCH-RELEASE-0_3_3</option>
<option value='BRANCH-RELEASE-0_3_4'>BRANCH-RELEASE-0_3_4</option>
<option value='BRANCH-RELEASE-0_4_0'>BRANCH-RELEASE-0_4_0</option>
<option value='BRANCH-RELEASE-0_4_1'>BRANCH-RELEASE-0_4_1</option>
<option value='BRANCH-RELEASE-0_4_2'>BRANCH-RELEASE-0_4_2</option>
<option value='BRANCH-RELEASE-0_5_0'>BRANCH-RELEASE-0_5_0</option>
<option value='BRANCH-RELEASE-0_5_1'>BRANCH-RELEASE-0_5_1</option>
<option value='BRANCH-RELEASE-0_5_2'>BRANCH-RELEASE-0_5_2</option>
<option value='BRANCH-RELEASE-0_7_4'>BRANCH-RELEASE-0_7_4</option>
<option value='BRANCH-RELEASE-0_7_5'>BRANCH-RELEASE-0_7_5</option>
<option value='BRANCH-RELEASE-0_8_2'>BRANCH-RELEASE-0_8_2</option>
<option value='BRANCH-THREADED'>BRANCH-THREADED</option>
<option value='BRANCH_RELEASE-0_7_2'>BRANCH_RELEASE-0_7_2</option>
<option value='CAPS'>CAPS</option>
<option value='TYPEFIND'>TYPEFIND</option>
<option value='master' selected='selected'>master</option>
<option value='master-UNNAMED-BRANCH'>master-UNNAMED-BRANCH</option>
</select> <input type='submit' value='switch'/></form></td></tr>
<tr><td class='sub'>'Good' GStreamer plugins  (mirrored from https://gitlab.freedesktop.org/gstreamer/gst-plugins-good)</td><td class='sub right'>bilboed</td></tr></table>
<table class='tabs'><tr><td>
<a href='/gstreamer/gst-plugins-good/'>summary</a><a href='/gstreamer/gst-plugins-good/refs/?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>refs</a><a href='/gstreamer/gst-plugins-good/log/'>log</a><a href='/gstreamer/gst-plugins-good/tree/?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>tree</a><a class='active' href='/gstreamer/gst-plugins-good/commit/?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>commit</a><a href='/gstreamer/gst-plugins-good/diff/?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>diff</a></td><td class='form'><form class='right' method='get' action='/gstreamer/gst-plugins-good/log/'>
<input type='hidden' name='id' value='153a8ae752c90d07190ef45803422a4f71ea8bff'/><select name='qt'>
<option value='grep'>log msg</option>
<option value='author'>author</option>
<option value='committer'>committer</option>
<option value='range'>range</option>
</select>
<input class='txt' type='search' size='10' name='q' value=''/>
<input type='submit' value='search'/>
</form>
</td></tr></table>
<div class='content'><div class='cgit-panel'><b>diff options</b><form method='get'><input type='hidden' name='id' value='153a8ae752c90d07190ef45803422a4f71ea8bff'/><table><tr><td colspan='2'/></tr><tr><td class='label'>context:</td><td class='ctrl'><select name='context' onchange='this.form.submit();'><option value='1'>1</option><option value='2'>2</option><option value='3' selected='selected'>3</option><option value='4'>4</option><option value='5'>5</option><option value='6'>6</option><option value='7'>7</option><option value='8'>8</option><option value='9'>9</option><option value='10'>10</option><option value='15'>15</option><option value='20'>20</option><option value='25'>25</option><option value='30'>30</option><option value='35'>35</option><option value='40'>40</option></select></td></tr><tr><td class='label'>space:</td><td class='ctrl'><select name='ignorews' onchange='this.form.submit();'><option value='0' selected='selected'>include</option><option value='1'>ignore</option></select></td></tr><tr><td class='label'>mode:</td><td class='ctrl'><select name='dt' onchange='this.form.submit();'><option value='0' selected='selected'>unified</option><option value='1'>ssdiff</option><option value='2'>stat only</option></select></td></tr><tr><td/><td class='ctrl'><noscript><input type='submit' value='reload'/></noscript></td></tr></table></form></div><table summary='commit info' class='commit-info'>
<tr><th>author</th><td>Matthew Waters &lt;matthew@centricular.com&gt;</td><td class='right'>2016-11-23 07:09:06 +1100</td></tr>
<tr><th>committer</th><td>Matthew Waters &lt;matthew@centricular.com&gt;</td><td class='right'>2016-11-23 21:14:35 +1100</td></tr>
<tr><th>commit</th><td colspan='2' class='sha1'><a href='/gstreamer/gst-plugins-good/commit/?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>153a8ae752c90d07190ef45803422a4f71ea8bff</a> (<a href='/gstreamer/gst-plugins-good/patch/?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>patch</a>)</td></tr>
<tr><th>tree</th><td colspan='2' class='sha1'><a href='/gstreamer/gst-plugins-good/tree/?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>87c888efabe532977537552817f9db5ab1e9c92e</a></td></tr>
<tr><th>parent</th><td colspan='2' class='sha1'><a href='/gstreamer/gst-plugins-good/commit/?id=45dcd0b9ccf33ed85cdafeb871a3781f5be57fd9'>45dcd0b9ccf33ed85cdafeb871a3781f5be57fd9</a> (<a href='/gstreamer/gst-plugins-good/diff/?id=153a8ae752c90d07190ef45803422a4f71ea8bff&amp;id2=45dcd0b9ccf33ed85cdafeb871a3781f5be57fd9'>diff</a>)</td></tr></table>
<div class='commit-subject'>flxdec: rewrite logic based on GstByteReader/Writer</div><div class='commit-msg'>Solves overreading/writing the given arrays and will error out if the
streams asks to do that.

Also does more error checking that the stream is valid and won't
overrun any allocated arrays.  Also mitigate integer overflow errors
calculating allocation sizes.

https://bugzilla.gnome.org/show_bug.cgi?id=774859
</div><div class='diffstat-header'><a href='/gstreamer/gst-plugins-good/diff/?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>Diffstat</a></div><table summary='diffstat' class='diffstat'><tr><td class='mode'>-rw-r--r--</td><td class='upd'><a href='/gstreamer/gst-plugins-good/diff/gst/flx/flx_color.c?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>gst/flx/flx_color.c</a></td><td class='right'>1</td><td class='graph'><table summary='file diffstat' width='100%'><tr><td class='add' style='width: 0.0%;'/><td class='rem' style='width: 0.2%;'/><td class='none' style='width: 99.8%;'/></tr></table></td></tr>
<tr><td class='mode'>-rw-r--r--</td><td class='upd'><a href='/gstreamer/gst-plugins-good/diff/gst/flx/flx_fmt.h?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>gst/flx/flx_fmt.h</a></td><td class='right'>72</td><td class='graph'><table summary='file diffstat' width='100%'><tr><td class='add' style='width: 0.0%;'/><td class='rem' style='width: 11.8%;'/><td class='none' style='width: 88.2%;'/></tr></table></td></tr>
<tr><td class='mode'>-rw-r--r--</td><td class='upd'><a href='/gstreamer/gst-plugins-good/diff/gst/flx/gstflxdec.c?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>gst/flx/gstflxdec.c</a></td><td class='right'>610</td><td class='graph'><table summary='file diffstat' width='100%'><tr><td class='add' style='width: 69.5%;'/><td class='rem' style='width: 30.5%;'/><td class='none' style='width: 0.0%;'/></tr></table></td></tr>
<tr><td class='mode'>-rw-r--r--</td><td class='upd'><a href='/gstreamer/gst-plugins-good/diff/gst/flx/gstflxdec.h?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>gst/flx/gstflxdec.h</a></td><td class='right'>4</td><td class='graph'><table summary='file diffstat' width='100%'><tr><td class='add' style='width: 0.5%;'/><td class='rem' style='width: 0.2%;'/><td class='none' style='width: 99.3%;'/></tr></table></td></tr>
</table><div class='diffstat-summary'>4 files changed, 427 insertions, 260 deletions</div><table summary='diff' class='diff'><tr><td><div class='head'>diff --git a/gst/flx/flx_color.c b/gst/flx/flx_color.c<br/>index 047bfdf6d..3a581356a 100644<br/>--- a/<a href='/gstreamer/gst-plugins-good/tree/gst/flx/flx_color.c?id=45dcd0b9ccf33ed85cdafeb871a3781f5be57fd9'>gst/flx/flx_color.c</a><br/>+++ b/<a href='/gstreamer/gst-plugins-good/tree/gst/flx/flx_color.c?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>gst/flx/flx_color.c</a></div><div class='hunk'>@@ -101,7 +101,6 @@ flx_set_palette_vector (FlxColorSpaceConverter * flxpal, guint start, guint num,</div><div class='ctx'>   } else {</div><div class='ctx'>     memcpy (&amp;flxpal-&gt;palvec[start * 3], newpal, grab * 3);</div><div class='ctx'>   }</div><div class='del'>-</div><div class='ctx'> }</div><div class='ctx'> </div><div class='ctx'> void</div><div class='head'>diff --git a/gst/flx/flx_fmt.h b/gst/flx/flx_fmt.h<br/>index 9ab31ba48..abff200d4 100644<br/>--- a/<a href='/gstreamer/gst-plugins-good/tree/gst/flx/flx_fmt.h?id=45dcd0b9ccf33ed85cdafeb871a3781f5be57fd9'>gst/flx/flx_fmt.h</a><br/>+++ b/<a href='/gstreamer/gst-plugins-good/tree/gst/flx/flx_fmt.h?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>gst/flx/flx_fmt.h</a></div><div class='hunk'>@@ -123,78 +123,6 @@ typedef struct _FlxFrameType</div><div class='ctx'> } FlxFrameType;</div><div class='ctx'> #define FlxFrameTypeSize 10</div><div class='ctx'> </div><div class='del'>-#if G_BYTE_ORDER == G_BIG_ENDIAN </div><div class='del'>-#define LE_TO_BE_16(i16) ((guint16) (((i16) &lt;&lt; 8) | ((i16) &gt;&gt; 8)))</div><div class='del'>-#define LE_TO_BE_32(i32) \</div><div class='del'>-    (((guint32) (LE_TO_BE_16((guint16) (i32))) &lt;&lt; 16) | (LE_TO_BE_16((i32) &gt;&gt; 16)))</div><div class='del'>-</div><div class='del'>-#define FLX_FRAME_TYPE_FIX_ENDIANNESS(frm_type_p) \</div><div class='del'>-    do { \</div><div class='del'>-     (frm_type_p)-&gt;chunks = LE_TO_BE_16((frm_type_p)-&gt;chunks); \</div><div class='del'>-     (frm_type_p)-&gt;delay = LE_TO_BE_16((frm_type_p)-&gt;delay); \</div><div class='del'>-    } while(0)</div><div class='del'>-</div><div class='del'>-#define FLX_HUFFMAN_TABLE_FIX_ENDIANNESS(hffmn_table_p) \</div><div class='del'>-    do { \</div><div class='del'>-     (hffmn_table_p)-&gt;codelength = \</div><div class='del'>-	LE_TO_BE_16((hffmn_table_p)-&gt;codelength); \</div><div class='del'>-     (hffmn_table_p)-&gt;numcodes = LE_TO_BE_16((hffmn_table_p)-&gt;numcodes); \</div><div class='del'>-    } while(0)</div><div class='del'>-</div><div class='del'>-#define FLX_SEGMENT_TABLE_FIX_ENDIANNESS(sgmnt_table_p) \</div><div class='del'>-     ((sgmnt_table_p)-&gt;segments = LE_TO_BE_16((sgmnt_table_p)-&gt;segments))</div><div class='del'>-</div><div class='del'>-#define FLX_PREFIX_CHUNK_FIX_ENDIANNESS(prfx_chnk_p) \</div><div class='del'>-    do { \</div><div class='del'>-     (prfx_chnk_p)-&gt;chunks = LE_TO_BE_16((prfx_chnk_p)-&gt;chunks); \</div><div class='del'>-    } while(0)</div><div class='del'>-</div><div class='del'>-#define FLX_FRAME_CHUNK_FIX_ENDIANNESS(frm_chnk_p) \</div><div class='del'>-    do { \</div><div class='del'>-     (frm_chnk_p)-&gt;size = LE_TO_BE_32((frm_chnk_p)-&gt;size); \</div><div class='del'>-     (frm_chnk_p)-&gt;id = LE_TO_BE_16((frm_chnk_p)-&gt;id); \</div><div class='del'>-    } while(0)</div><div class='del'>-</div><div class='del'>-#define FLX_HDR_FIX_ENDIANNESS(hdr_p) \</div><div class='del'>-    do { \</div><div class='del'>-     (hdr_p)-&gt;size = LE_TO_BE_32((hdr_p)-&gt;size); \</div><div class='del'>-     (hdr_p)-&gt;type = LE_TO_BE_16((hdr_p)-&gt;type); \</div><div class='del'>-     (hdr_p)-&gt;frames = LE_TO_BE_16((hdr_p)-&gt;frames); \</div><div class='del'>-     (hdr_p)-&gt;width = LE_TO_BE_16((hdr_p)-&gt;width); \</div><div class='del'>-     (hdr_p)-&gt;height = LE_TO_BE_16((hdr_p)-&gt;height); \</div><div class='del'>-     (hdr_p)-&gt;depth = LE_TO_BE_16((hdr_p)-&gt;depth); \</div><div class='del'>-     (hdr_p)-&gt;flags = LE_TO_BE_16((hdr_p)-&gt;flags); \</div><div class='del'>-     (hdr_p)-&gt;speed = LE_TO_BE_32((hdr_p)-&gt;speed); \</div><div class='del'>-     (hdr_p)-&gt;reserved1 = LE_TO_BE_16((hdr_p)-&gt;reserved1); \</div><div class='del'>-     (hdr_p)-&gt;created = LE_TO_BE_32((hdr_p)-&gt;created); \</div><div class='del'>-     (hdr_p)-&gt;creator = LE_TO_BE_32((hdr_p)-&gt;creator); \</div><div class='del'>-     (hdr_p)-&gt;updated = LE_TO_BE_32((hdr_p)-&gt;updated); \</div><div class='del'>-     (hdr_p)-&gt;updater = LE_TO_BE_32((hdr_p)-&gt;updater); \</div><div class='del'>-     (hdr_p)-&gt;aspect_dx = LE_TO_BE_16((hdr_p)-&gt;aspect_dx); \</div><div class='del'>-     (hdr_p)-&gt;aspect_dy = LE_TO_BE_16((hdr_p)-&gt;aspect_dy); \</div><div class='del'>-     (hdr_p)-&gt;ext_flags = LE_TO_BE_16((hdr_p)-&gt;ext_flags); \</div><div class='del'>-     (hdr_p)-&gt;keyframes = LE_TO_BE_16((hdr_p)-&gt;keyframes); \</div><div class='del'>-     (hdr_p)-&gt;totalframes = LE_TO_BE_16((hdr_p)-&gt;totalframes); \</div><div class='del'>-     (hdr_p)-&gt;req_memory = LE_TO_BE_32((hdr_p)-&gt;req_memory); \</div><div class='del'>-     (hdr_p)-&gt;max_regions = LE_TO_BE_16((hdr_p)-&gt;max_regions); \</div><div class='del'>-     (hdr_p)-&gt;transp_num = LE_TO_BE_16((hdr_p)-&gt;transp_num); \</div><div class='del'>-     (hdr_p)-&gt;oframe1 = LE_TO_BE_32((hdr_p)-&gt;oframe1); \</div><div class='del'>-     (hdr_p)-&gt;oframe2 = LE_TO_BE_32((hdr_p)-&gt;oframe2); \</div><div class='del'>-    } while(0)</div><div class='del'>-#else</div><div class='del'>-</div><div class='del'>-#define LE_TO_BE_16(i16) ((i16))</div><div class='del'>-#define LE_TO_BE_32(i32) ((i32))</div><div class='del'>-</div><div class='del'>-#define FLX_FRAME_TYPE_FIX_ENDIANNESS(frm_type_p)</div><div class='del'>-#define FLX_HUFFMAN_TABLE_FIX_ENDIANNESS(hffmn_table_p)</div><div class='del'>-#define FLX_SEGMENT_TABLE_FIX_ENDIANNESS(sgmnt_table_p)</div><div class='del'>-#define FLX_PREFIX_CHUNK_FIX_ENDIANNESS(prfx_chnk_p)</div><div class='del'>-#define FLX_FRAME_CHUNK_FIX_ENDIANNESS(frm_chnk_p)</div><div class='del'>-#define FLX_HDR_FIX_ENDIANNESS(hdr_p)</div><div class='del'>-</div><div class='del'>-#endif /* G_BYTE_ORDER == G_BIG_ENDIAN */</div><div class='del'>-</div><div class='ctx'> G_END_DECLS</div><div class='ctx'> </div><div class='ctx'> #endif /* __GST_FLX_FMT_H__ */</div><div class='head'>diff --git a/gst/flx/gstflxdec.c b/gst/flx/gstflxdec.c<br/>index a23797600..aa1bed502 100644<br/>--- a/<a href='/gstreamer/gst-plugins-good/tree/gst/flx/gstflxdec.c?id=45dcd0b9ccf33ed85cdafeb871a3781f5be57fd9'>gst/flx/gstflxdec.c</a><br/>+++ b/<a href='/gstreamer/gst-plugins-good/tree/gst/flx/gstflxdec.c?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>gst/flx/gstflxdec.c</a></div><div class='hunk'>@@ -1,5 +1,6 @@</div><div class='ctx'> /* GStreamer</div><div class='ctx'>  * Copyright (C) &lt;1999&gt; Erik Walthinsen &lt;omega@temple-baptist.com&gt;</div><div class='add'>+ * Copyright (C) &lt;2016&gt; Matthew Waters &lt;matthew@centricular.com&gt;</div><div class='ctx'>  *</div><div class='ctx'>  * This library is free software; you can redistribute it and/or</div><div class='ctx'>  * modify it under the terms of the GNU Library General Public</div><div class='hunk'>@@ -24,6 +25,7 @@</div><div class='ctx'> /*</div><div class='ctx'>  * http://www.coolutils.com/Formats/FLI</div><div class='ctx'>  * http://woodshole.er.usgs.gov/operations/modeling/flc.html</div><div class='add'>+ * http://www.compuphase.com/flic.htm</div><div class='ctx'>  */</div><div class='ctx'> </div><div class='ctx'> #ifdef HAVE_CONFIG_H</div><div class='hunk'>@@ -73,10 +75,14 @@ static GstStateChangeReturn gst_flxdec_change_state (GstElement * element,</div><div class='ctx'> static gboolean gst_flxdec_src_query_handler (GstPad * pad, GstObject * parent,</div><div class='ctx'>     GstQuery * query);</div><div class='ctx'> </div><div class='del'>-static void flx_decode_color (GstFlxDec *, guchar *, guchar *, gint);</div><div class='del'>-static gboolean flx_decode_brun (GstFlxDec *, guchar *, guchar *);</div><div class='del'>-static gboolean flx_decode_delta_fli (GstFlxDec *, guchar *, guchar *);</div><div class='del'>-static gboolean flx_decode_delta_flc (GstFlxDec *, guchar *, guchar *);</div><div class='add'>+static gboolean flx_decode_color (GstFlxDec * flxdec, GstByteReader * reader,</div><div class='add'>+    GstByteWriter * writer, gint scale);</div><div class='add'>+static gboolean flx_decode_brun (GstFlxDec * flxdec,</div><div class='add'>+    GstByteReader * reader, GstByteWriter * writer);</div><div class='add'>+static gboolean flx_decode_delta_fli (GstFlxDec * flxdec,</div><div class='add'>+    GstByteReader * reader, GstByteWriter * writer);</div><div class='add'>+static gboolean flx_decode_delta_flc (GstFlxDec * flxdec,</div><div class='add'>+    GstByteReader * reader, GstByteWriter * writer);</div><div class='ctx'> </div><div class='ctx'> #define rndalign(off) ((off) + ((off) &amp; 1))</div><div class='ctx'> </div><div class='hunk'>@@ -204,57 +210,59 @@ gst_flxdec_sink_event_handler (GstPad * pad, GstObject * parent,</div><div class='ctx'> }</div><div class='ctx'> </div><div class='ctx'> static gboolean</div><div class='del'>-flx_decode_chunks (GstFlxDec * flxdec, gulong count, guchar * data,</div><div class='del'>-    guchar * dest)</div><div class='add'>+flx_decode_chunks (GstFlxDec * flxdec, gulong n_chunks, GstByteReader * reader,</div><div class='add'>+    GstByteWriter * writer)</div><div class='ctx'> {</div><div class='del'>-  FlxFrameChunk *hdr;</div><div class='ctx'>   gboolean ret = TRUE;</div><div class='ctx'> </div><div class='del'>-  g_return_val_if_fail (data != NULL, FALSE);</div><div class='del'>-</div><div class='del'>-  while (count--) {</div><div class='del'>-    hdr = (FlxFrameChunk *) data;</div><div class='del'>-    FLX_FRAME_CHUNK_FIX_ENDIANNESS (hdr);</div><div class='del'>-    data += FlxFrameChunkSize;</div><div class='add'>+  while (n_chunks--) {</div><div class='add'>+    GstByteReader chunk;</div><div class='add'>+    guint32 size;</div><div class='add'>+    guint16 type;</div><div class='add'>+</div><div class='add'>+    if (!gst_byte_reader_get_uint32_le (reader, &amp;size))</div><div class='add'>+      goto parse_error;</div><div class='add'>+    if (!gst_byte_reader_get_uint16_le (reader, &amp;type))</div><div class='add'>+      goto parse_error;</div><div class='add'>+    GST_LOG_OBJECT (flxdec, "chunk has type 0x%02x size %d", type, size);</div><div class='add'>+</div><div class='add'>+    if (!gst_byte_reader_get_sub_reader (reader, &amp;chunk,</div><div class='add'>+            size - FlxFrameChunkSize)) {</div><div class='add'>+      GST_ERROR_OBJECT (flxdec, "Incorrect size in the chunk header");</div><div class='add'>+      goto error;</div><div class='add'>+    }</div><div class='ctx'> </div><div class='del'>-    switch (hdr-&gt;id) {</div><div class='add'>+    switch (type) {</div><div class='ctx'>       case FLX_COLOR64:</div><div class='del'>-        flx_decode_color (flxdec, data, dest, 2);</div><div class='del'>-        data += rndalign (hdr-&gt;size) - FlxFrameChunkSize;</div><div class='add'>+        ret = flx_decode_color (flxdec, &amp;chunk, writer, 2);</div><div class='ctx'>         break;</div><div class='ctx'> </div><div class='ctx'>       case FLX_COLOR256:</div><div class='del'>-        flx_decode_color (flxdec, data, dest, 0);</div><div class='del'>-        data += rndalign (hdr-&gt;size) - FlxFrameChunkSize;</div><div class='add'>+        ret = flx_decode_color (flxdec, &amp;chunk, writer, 0);</div><div class='ctx'>         break;</div><div class='ctx'> </div><div class='ctx'>       case FLX_BRUN:</div><div class='del'>-        ret = flx_decode_brun (flxdec, data, dest);</div><div class='del'>-        data += rndalign (hdr-&gt;size) - FlxFrameChunkSize;</div><div class='add'>+        ret = flx_decode_brun (flxdec, &amp;chunk, writer);</div><div class='ctx'>         break;</div><div class='ctx'> </div><div class='ctx'>       case FLX_LC:</div><div class='del'>-        ret = flx_decode_delta_fli (flxdec, data, dest);</div><div class='del'>-        data += rndalign (hdr-&gt;size) - FlxFrameChunkSize;</div><div class='add'>+        ret = flx_decode_delta_fli (flxdec, &amp;chunk, writer);</div><div class='ctx'>         break;</div><div class='ctx'> </div><div class='ctx'>       case FLX_SS2:</div><div class='del'>-        ret = flx_decode_delta_flc (flxdec, data, dest);</div><div class='del'>-        data += rndalign (hdr-&gt;size) - FlxFrameChunkSize;</div><div class='add'>+        ret = flx_decode_delta_flc (flxdec, &amp;chunk, writer);</div><div class='ctx'>         break;</div><div class='ctx'> </div><div class='ctx'>       case FLX_BLACK:</div><div class='del'>-        memset (dest, 0, flxdec-&gt;size);</div><div class='add'>+        ret = gst_byte_writer_fill (writer, 0, flxdec-&gt;size);</div><div class='ctx'>         break;</div><div class='ctx'> </div><div class='ctx'>       case FLX_MINI:</div><div class='del'>-        data += rndalign (hdr-&gt;size) - FlxFrameChunkSize;</div><div class='ctx'>         break;</div><div class='ctx'> </div><div class='ctx'>       default:</div><div class='del'>-        GST_WARNING ("Unimplented chunk type: 0x%02x size: %d - skipping",</div><div class='del'>-            hdr-&gt;id, hdr-&gt;size);</div><div class='del'>-        data += rndalign (hdr-&gt;size) - FlxFrameChunkSize;</div><div class='add'>+        GST_WARNING ("Unimplemented chunk type: 0x%02x size: %d - skipping",</div><div class='add'>+            type, size);</div><div class='ctx'>         break;</div><div class='ctx'>     }</div><div class='ctx'> </div><div class='hunk'>@@ -263,43 +271,60 @@ flx_decode_chunks (GstFlxDec * flxdec, gulong count, guchar * data,</div><div class='ctx'>   }</div><div class='ctx'> </div><div class='ctx'>   return ret;</div><div class='add'>+</div><div class='add'>+parse_error:</div><div class='add'>+  GST_ERROR_OBJECT (flxdec, "Failed to decode chunk");</div><div class='add'>+error:</div><div class='add'>+  return FALSE;</div><div class='ctx'> }</div><div class='ctx'> </div><div class='ctx'> </div><div class='del'>-static void</div><div class='del'>-flx_decode_color (GstFlxDec * flxdec, guchar * data, guchar * dest, gint scale)</div><div class='add'>+static gboolean</div><div class='add'>+flx_decode_color (GstFlxDec * flxdec, GstByteReader * reader,</div><div class='add'>+    GstByteWriter * writer, gint scale)</div><div class='ctx'> {</div><div class='del'>-  guint packs, count, indx;</div><div class='add'>+  guint8 count, indx;</div><div class='add'>+  guint16 packs;</div><div class='ctx'> </div><div class='del'>-  g_return_if_fail (flxdec != NULL);</div><div class='del'>-</div><div class='del'>-  packs = (data[0] + (data[1] &lt;&lt; 8));</div><div class='del'>-</div><div class='del'>-  data += 2;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;packs))</div><div class='add'>+    goto error;</div><div class='ctx'>   indx = 0;</div><div class='ctx'> </div><div class='del'>-  GST_LOG ("GstFlxDec: cmap packs: %d", packs);</div><div class='add'>+  GST_LOG ("GstFlxDec: cmap packs: %d", (guint) packs);</div><div class='ctx'>   while (packs--) {</div><div class='add'>+    const guint8 *data;</div><div class='add'>+    guint16 actual_count;</div><div class='add'>+</div><div class='ctx'>     /* color map index + skip count */</div><div class='del'>-    indx += *data++;</div><div class='add'>+    if (!gst_byte_reader_get_uint8 (reader, &amp;indx))</div><div class='add'>+      goto error;</div><div class='ctx'> </div><div class='ctx'>     /* number of rgb triplets */</div><div class='del'>-    count = *data++ &amp; 0xff;</div><div class='del'>-    if (count == 0)</div><div class='del'>-      count = 256;</div><div class='add'>+    if (!gst_byte_reader_get_uint8 (reader, &amp;count))</div><div class='add'>+      goto error;</div><div class='ctx'> </div><div class='del'>-    GST_LOG ("GstFlxDec: cmap count: %d (indx: %d)", count, indx);</div><div class='del'>-    flx_set_palette_vector (flxdec-&gt;converter, indx, count, data, scale);</div><div class='add'>+    actual_count = count == 0 ? 256 : count;</div><div class='ctx'> </div><div class='del'>-    data += (count * 3);</div><div class='add'>+    if (!gst_byte_reader_get_data (reader, count * 3, &amp;data))</div><div class='add'>+      goto error;</div><div class='add'>+</div><div class='add'>+    GST_LOG_OBJECT (flxdec, "cmap count: %d (indx: %d)", actual_count, indx);</div><div class='add'>+    flx_set_palette_vector (flxdec-&gt;converter, indx, actual_count,</div><div class='add'>+        (guchar *) data, scale);</div><div class='ctx'>   }</div><div class='add'>+</div><div class='add'>+  return TRUE;</div><div class='add'>+</div><div class='add'>+error:</div><div class='add'>+  GST_ERROR_OBJECT (flxdec, "Error decoding color palette");</div><div class='add'>+  return FALSE;</div><div class='ctx'> }</div><div class='ctx'> </div><div class='ctx'> static gboolean</div><div class='del'>-flx_decode_brun (GstFlxDec * flxdec, guchar * data, guchar * dest)</div><div class='add'>+flx_decode_brun (GstFlxDec * flxdec, GstByteReader * reader,</div><div class='add'>+    GstByteWriter * writer)</div><div class='ctx'> {</div><div class='del'>-  gulong count, lines, row;</div><div class='del'>-  guchar x;</div><div class='add'>+  gulong lines, row;</div><div class='ctx'> </div><div class='ctx'>   g_return_val_if_fail (flxdec != NULL, FALSE);</div><div class='ctx'> </div><div class='hunk'>@@ -310,82 +335,125 @@ flx_decode_brun (GstFlxDec * flxdec, guchar * data, guchar * dest)</div><div class='ctx'>      * contain more then 255 RLE packets. we use the frame </div><div class='ctx'>      * width instead. </div><div class='ctx'>      */</div><div class='del'>-    data++;</div><div class='add'>+    if (!gst_byte_reader_skip (reader, 1))</div><div class='add'>+      goto error;</div><div class='ctx'> </div><div class='ctx'>     row = flxdec-&gt;hdr.width;</div><div class='ctx'>     while (row) {</div><div class='del'>-      count = *data++;</div><div class='add'>+      gint8 count;</div><div class='add'>+</div><div class='add'>+      if (!gst_byte_reader_get_int8 (reader, &amp;count))</div><div class='add'>+        goto error;</div><div class='add'>+</div><div class='add'>+      if (count &lt;= 0) {</div><div class='add'>+        const guint8 *data;</div><div class='ctx'> </div><div class='del'>-      if (count &gt; 0x7f) {</div><div class='ctx'>         /* literal run */</div><div class='del'>-        count = 0x100 - count;</div><div class='del'>-        if ((glong) row - (glong) count &lt; 0) {</div><div class='del'>-          GST_ERROR_OBJECT (flxdec, "Invalid BRUN packet detected.");</div><div class='add'>+        count = ABS (count);</div><div class='add'>+</div><div class='add'>+        GST_LOG_OBJECT (flxdec, "have literal run of size %d", count);</div><div class='add'>+</div><div class='add'>+        if (count &gt; row) {</div><div class='add'>+          GST_ERROR_OBJECT (flxdec, "Invalid BRUN line detected. "</div><div class='add'>+              "bytes to write exceeds the end of the row");</div><div class='ctx'>           return FALSE;</div><div class='ctx'>         }</div><div class='ctx'>         row -= count;</div><div class='ctx'> </div><div class='del'>-        while (count--)</div><div class='del'>-          *dest++ = *data++;</div><div class='del'>-</div><div class='add'>+        if (!gst_byte_reader_get_data (reader, count, &amp;data))</div><div class='add'>+          goto error;</div><div class='add'>+        if (!gst_byte_writer_put_data (writer, data, count))</div><div class='add'>+          goto error;</div><div class='ctx'>       } else {</div><div class='del'>-        if ((glong) row - (glong) count &lt; 0) {</div><div class='del'>-          GST_ERROR_OBJECT (flxdec, "Invalid BRUN packet detected.");</div><div class='add'>+        guint8 x;</div><div class='add'>+</div><div class='add'>+        GST_LOG_OBJECT (flxdec, "have replicate run of size %d", count);</div><div class='add'>+</div><div class='add'>+        if (count &gt; row) {</div><div class='add'>+          GST_ERROR_OBJECT (flxdec, "Invalid BRUN packet detected."</div><div class='add'>+              "bytes to write exceeds the end of the row");</div><div class='ctx'>           return FALSE;</div><div class='ctx'>         }</div><div class='ctx'> </div><div class='ctx'>         /* replicate run */</div><div class='ctx'>         row -= count;</div><div class='del'>-        x = *data++;</div><div class='ctx'> </div><div class='del'>-        while (count--)</div><div class='del'>-          *dest++ = x;</div><div class='add'>+        if (!gst_byte_reader_get_uint8 (reader, &amp;x))</div><div class='add'>+          goto error;</div><div class='add'>+        if (!gst_byte_writer_fill (writer, x, count))</div><div class='add'>+          goto error;</div><div class='ctx'>       }</div><div class='ctx'>     }</div><div class='ctx'>   }</div><div class='ctx'> </div><div class='ctx'>   return TRUE;</div><div class='add'>+</div><div class='add'>+error:</div><div class='add'>+  GST_ERROR_OBJECT (flxdec, "Failed to decode BRUN packet");</div><div class='add'>+  return FALSE;</div><div class='ctx'> }</div><div class='ctx'> </div><div class='ctx'> static gboolean</div><div class='del'>-flx_decode_delta_fli (GstFlxDec * flxdec, guchar * data, guchar * dest)</div><div class='add'>+flx_decode_delta_fli (GstFlxDec * flxdec, GstByteReader * reader,</div><div class='add'>+    GstByteWriter * writer)</div><div class='ctx'> {</div><div class='del'>-  gulong count, packets, lines, start_line;</div><div class='del'>-  guchar *start_p, x;</div><div class='add'>+  guint16 start_line, lines;</div><div class='add'>+  guint line_start_i;</div><div class='ctx'> </div><div class='ctx'>   g_return_val_if_fail (flxdec != NULL, FALSE);</div><div class='ctx'>   g_return_val_if_fail (flxdec-&gt;delta_data != NULL, FALSE);</div><div class='ctx'> </div><div class='ctx'>   /* use last frame for delta */</div><div class='del'>-  memcpy (dest, flxdec-&gt;delta_data, flxdec-&gt;size);</div><div class='add'>+  if (!gst_byte_writer_put_data (writer, flxdec-&gt;delta_data, flxdec-&gt;size))</div><div class='add'>+    goto error;</div><div class='add'>+</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;start_line))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;lines))</div><div class='add'>+    goto error;</div><div class='add'>+  GST_LOG_OBJECT (flxdec, "height %d start line %d line count %d",</div><div class='add'>+      flxdec-&gt;hdr.height, start_line, lines);</div><div class='ctx'> </div><div class='del'>-  start_line = (data[0] + (data[1] &lt;&lt; 8));</div><div class='del'>-  lines = (data[2] + (data[3] &lt;&lt; 8));</div><div class='ctx'>   if (start_line + lines &gt; flxdec-&gt;hdr.height) {</div><div class='ctx'>     GST_ERROR_OBJECT (flxdec, "Invalid FLI packet detected. too many lines.");</div><div class='ctx'>     return FALSE;</div><div class='ctx'>   }</div><div class='del'>-  data += 4;</div><div class='ctx'> </div><div class='del'>-  /* start position of delta */</div><div class='del'>-  dest += (flxdec-&gt;hdr.width * start_line);</div><div class='del'>-  start_p = dest;</div><div class='add'>+  line_start_i = flxdec-&gt;hdr.width * start_line;</div><div class='add'>+  if (!gst_byte_writer_set_pos (writer, line_start_i))</div><div class='add'>+    goto error;</div><div class='ctx'> </div><div class='ctx'>   while (lines--) {</div><div class='add'>+    guint8 packets;</div><div class='add'>+</div><div class='ctx'>     /* packet count */</div><div class='del'>-    packets = *data++;</div><div class='add'>+    if (!gst_byte_reader_get_uint8 (reader, &amp;packets))</div><div class='add'>+      goto error;</div><div class='add'>+    GST_LOG_OBJECT (flxdec, "have %d packets", packets);</div><div class='ctx'> </div><div class='ctx'>     while (packets--) {</div><div class='ctx'>       /* skip count */</div><div class='del'>-      guchar skip = *data++;</div><div class='del'>-      dest += skip;</div><div class='add'>+      guint8 skip;</div><div class='add'>+      gint8 count;</div><div class='add'>+      if (!gst_byte_reader_get_uint8 (reader, &amp;skip))</div><div class='add'>+        goto error;</div><div class='add'>+</div><div class='add'>+      /* skip bytes */</div><div class='add'>+      if (!gst_byte_writer_set_pos (writer,</div><div class='add'>+              gst_byte_writer_get_pos (writer) + skip))</div><div class='add'>+        goto error;</div><div class='ctx'> </div><div class='ctx'>       /* RLE count */</div><div class='del'>-      count = *data++;</div><div class='add'>+      if (!gst_byte_reader_get_int8 (reader, &amp;count))</div><div class='add'>+        goto error;</div><div class='add'>+</div><div class='add'>+      if (count &lt; 0) {</div><div class='add'>+        guint8 x;</div><div class='ctx'> </div><div class='del'>-      if (count &gt; 0x7f) {</div><div class='ctx'>         /* literal run */</div><div class='del'>-        count = 0x100 - count;</div><div class='add'>+        count = ABS (count);</div><div class='add'>+        GST_LOG_OBJECT (flxdec, "have literal run of size %d at offset %d",</div><div class='add'>+            count, skip);</div><div class='ctx'> </div><div class='ctx'>         if (skip + count &gt; flxdec-&gt;hdr.width) {</div><div class='ctx'>           GST_ERROR_OBJECT (flxdec, "Invalid FLI packet detected. "</div><div class='hunk'>@@ -393,11 +461,16 @@ flx_decode_delta_fli (GstFlxDec * flxdec, guchar * data, guchar * dest)</div><div class='ctx'>           return FALSE;</div><div class='ctx'>         }</div><div class='ctx'> </div><div class='del'>-        x = *data++;</div><div class='del'>-        while (count--)</div><div class='del'>-          *dest++ = x;</div><div class='del'>-</div><div class='add'>+        if (!gst_byte_reader_get_uint8 (reader, &amp;x))</div><div class='add'>+          goto error;</div><div class='add'>+        if (!gst_byte_writer_fill (writer, x, count))</div><div class='add'>+          goto error;</div><div class='ctx'>       } else {</div><div class='add'>+        const guint8 *data;</div><div class='add'>+</div><div class='add'>+        GST_LOG_OBJECT (flxdec, "have replicate run of size %d at offset %d",</div><div class='add'>+            count, skip);</div><div class='add'>+</div><div class='ctx'>         if (skip + count &gt; flxdec-&gt;hdr.width) {</div><div class='ctx'>           GST_ERROR_OBJECT (flxdec, "Invalid FLI packet detected. "</div><div class='ctx'>               "line too long.");</div><div class='hunk'>@@ -405,45 +478,60 @@ flx_decode_delta_fli (GstFlxDec * flxdec, guchar * data, guchar * dest)</div><div class='ctx'>         }</div><div class='ctx'> </div><div class='ctx'>         /* replicate run */</div><div class='del'>-        while (count--)</div><div class='del'>-          *dest++ = *data++;</div><div class='add'>+        if (!gst_byte_reader_get_data (reader, count, &amp;data))</div><div class='add'>+          goto error;</div><div class='add'>+        if (!gst_byte_writer_put_data (writer, data, count))</div><div class='add'>+          goto error;</div><div class='ctx'>       }</div><div class='ctx'>     }</div><div class='del'>-    start_p += flxdec-&gt;hdr.width;</div><div class='del'>-    dest = start_p;</div><div class='add'>+    line_start_i += flxdec-&gt;hdr.width;</div><div class='add'>+    if (!gst_byte_writer_set_pos (writer, line_start_i))</div><div class='add'>+      goto error;</div><div class='ctx'>   }</div><div class='ctx'> </div><div class='ctx'>   return TRUE;</div><div class='add'>+</div><div class='add'>+error:</div><div class='add'>+  GST_ERROR_OBJECT (flxdec, "Failed to decode FLI packet");</div><div class='add'>+  return FALSE;</div><div class='ctx'> }</div><div class='ctx'> </div><div class='ctx'> static gboolean</div><div class='del'>-flx_decode_delta_flc (GstFlxDec * flxdec, guchar * data, guchar * dest)</div><div class='add'>+flx_decode_delta_flc (GstFlxDec * flxdec, GstByteReader * reader,</div><div class='add'>+    GstByteWriter * writer)</div><div class='ctx'> {</div><div class='del'>-  gulong count, lines, start_l, opcode;</div><div class='del'>-  guchar *start_p;</div><div class='add'>+  guint16 lines, start_l;</div><div class='ctx'> </div><div class='ctx'>   g_return_val_if_fail (flxdec != NULL, FALSE);</div><div class='ctx'>   g_return_val_if_fail (flxdec-&gt;delta_data != NULL, FALSE);</div><div class='ctx'> </div><div class='ctx'>   /* use last frame for delta */</div><div class='del'>-  memcpy (dest, flxdec-&gt;delta_data, flxdec-&gt;size);</div><div class='add'>+  if (!gst_byte_writer_put_data (writer, flxdec-&gt;delta_data, flxdec-&gt;size))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;lines))</div><div class='add'>+    goto error;</div><div class='ctx'> </div><div class='del'>-  lines = (data[0] + (data[1] &lt;&lt; 8));</div><div class='ctx'>   if (lines &gt; flxdec-&gt;hdr.height) {</div><div class='ctx'>     GST_ERROR_OBJECT (flxdec, "Invalid FLC packet detected. too many lines.");</div><div class='ctx'>     return FALSE;</div><div class='ctx'>   }</div><div class='del'>-  data += 2;</div><div class='ctx'> </div><div class='del'>-  start_p = dest;</div><div class='ctx'>   start_l = lines;</div><div class='ctx'> </div><div class='ctx'>   while (lines) {</div><div class='del'>-    dest = start_p + (flxdec-&gt;hdr.width * (start_l - lines));</div><div class='add'>+    guint16 opcode;</div><div class='add'>+</div><div class='add'>+    if (!gst_byte_writer_set_pos (writer,</div><div class='add'>+            flxdec-&gt;hdr.width * (start_l - lines)))</div><div class='add'>+      goto error;</div><div class='ctx'> </div><div class='ctx'>     /* process opcode(s) */</div><div class='del'>-    while ((opcode = (data[0] + (data[1] &lt;&lt; 8))) &amp; 0xc000) {</div><div class='del'>-      data += 2;</div><div class='add'>+    while (TRUE) {</div><div class='add'>+      if (!gst_byte_reader_get_uint16_le (reader, &amp;opcode))</div><div class='add'>+        goto error;</div><div class='add'>+      if ((opcode &amp; 0xc000) == 0)</div><div class='add'>+        break;</div><div class='add'>+</div><div class='ctx'>       if ((opcode &amp; 0xc000) == 0xc000) {</div><div class='ctx'>         /* line skip count */</div><div class='ctx'>         gulong skip = (0x10000 - opcode);</div><div class='hunk'>@@ -453,27 +541,44 @@ flx_decode_delta_flc (GstFlxDec * flxdec, guchar * data, guchar * dest)</div><div class='ctx'>           return FALSE;</div><div class='ctx'>         }</div><div class='ctx'>         start_l += skip;</div><div class='del'>-        dest += flxdec-&gt;hdr.width * skip;</div><div class='add'>+        if (!gst_byte_writer_set_pos (writer,</div><div class='add'>+                gst_byte_writer_get_pos (writer) + flxdec-&gt;hdr.width * skip))</div><div class='add'>+          goto error;</div><div class='ctx'>       } else {</div><div class='ctx'>         /* last pixel */</div><div class='del'>-        dest += flxdec-&gt;hdr.width;</div><div class='del'>-        *dest++ = (opcode &amp; 0xff);</div><div class='add'>+        if (!gst_byte_writer_set_pos (writer,</div><div class='add'>+                gst_byte_writer_get_pos (writer) + flxdec-&gt;hdr.width))</div><div class='add'>+          goto error;</div><div class='add'>+        if (!gst_byte_writer_put_uint8 (writer, opcode &amp; 0xff))</div><div class='add'>+          goto error;</div><div class='ctx'>       }</div><div class='ctx'>     }</div><div class='del'>-    data += 2;</div><div class='ctx'> </div><div class='ctx'>     /* last opcode is the packet count */</div><div class='add'>+    GST_LOG_OBJECT (flxdec, "have %d packets", opcode);</div><div class='ctx'>     while (opcode--) {</div><div class='ctx'>       /* skip count */</div><div class='del'>-      guchar skip = *data++;</div><div class='del'>-      dest += skip;</div><div class='add'>+      guint8 skip;</div><div class='add'>+      gint8 count;</div><div class='add'>+</div><div class='add'>+      if (!gst_byte_reader_get_uint8 (reader, &amp;skip))</div><div class='add'>+        goto error;</div><div class='add'>+      if (!gst_byte_writer_set_pos (writer,</div><div class='add'>+              gst_byte_writer_get_pos (writer) + skip))</div><div class='add'>+        goto error;</div><div class='ctx'> </div><div class='ctx'>       /* RLE count */</div><div class='del'>-      count = *data++;</div><div class='add'>+      if (!gst_byte_reader_get_int8 (reader, &amp;count))</div><div class='add'>+        goto error;</div><div class='add'>+</div><div class='add'>+      if (count &lt; 0) {</div><div class='add'>+        guint16 x;</div><div class='ctx'> </div><div class='del'>-      if (count &gt; 0x7f) {</div><div class='ctx'>         /* replicate word run */</div><div class='del'>-        count = 0x100 - count;</div><div class='add'>+        count = ABS (count);</div><div class='add'>+</div><div class='add'>+        GST_LOG_OBJECT (flxdec, "have replicate run of size %d at offset %d",</div><div class='add'>+            count, skip);</div><div class='ctx'> </div><div class='ctx'>         if (skip + count &gt; flxdec-&gt;hdr.width) {</div><div class='ctx'>           GST_ERROR_OBJECT (flxdec, "Invalid FLC packet detected. "</div><div class='hunk'>@@ -481,22 +586,31 @@ flx_decode_delta_flc (GstFlxDec * flxdec, guchar * data, guchar * dest)</div><div class='ctx'>           return FALSE;</div><div class='ctx'>         }</div><div class='ctx'> </div><div class='add'>+        if (!gst_byte_reader_get_uint16_le (reader, &amp;x))</div><div class='add'>+          goto error;</div><div class='add'>+</div><div class='ctx'>         while (count--) {</div><div class='del'>-          *dest++ = data[0];</div><div class='del'>-          *dest++ = data[1];</div><div class='add'>+          if (!gst_byte_writer_put_uint16_le (writer, x)) {</div><div class='add'>+            goto error;</div><div class='add'>+          }</div><div class='ctx'>         }</div><div class='del'>-        data += 2;</div><div class='ctx'>       } else {</div><div class='add'>+        GST_LOG_OBJECT (flxdec, "have literal run of size %d at offset %d",</div><div class='add'>+            count, skip);</div><div class='add'>+</div><div class='ctx'>         if (skip + count &gt; flxdec-&gt;hdr.width) {</div><div class='ctx'>           GST_ERROR_OBJECT (flxdec, "Invalid FLC packet detected. "</div><div class='ctx'>               "line too long.");</div><div class='ctx'>           return FALSE;</div><div class='ctx'>         }</div><div class='ctx'> </div><div class='del'>-        /* literal word run */</div><div class='ctx'>         while (count--) {</div><div class='del'>-          *dest++ = *data++;</div><div class='del'>-          *dest++ = *data++;</div><div class='add'>+          guint16 x;</div><div class='add'>+</div><div class='add'>+          if (!gst_byte_reader_get_uint16_le (reader, &amp;x))</div><div class='add'>+            goto error;</div><div class='add'>+          if (!gst_byte_writer_put_uint16_le (writer, x))</div><div class='add'>+            goto error;</div><div class='ctx'>         }</div><div class='ctx'>       }</div><div class='ctx'>     }</div><div class='hunk'>@@ -504,13 +618,91 @@ flx_decode_delta_flc (GstFlxDec * flxdec, guchar * data, guchar * dest)</div><div class='ctx'>   }</div><div class='ctx'> </div><div class='ctx'>   return TRUE;</div><div class='add'>+</div><div class='add'>+error:</div><div class='add'>+  GST_ERROR_OBJECT (flxdec, "Failed to decode FLI packet");</div><div class='add'>+  return FALSE;</div><div class='add'>+}</div><div class='add'>+</div><div class='add'>+static gboolean</div><div class='add'>+_read_flx_header (GstFlxDec * flxdec, GstByteReader * reader, FlxHeader * flxh)</div><div class='add'>+{</div><div class='add'>+  memset (flxh, 0, sizeof (*flxh));</div><div class='add'>+</div><div class='add'>+  if (!gst_byte_reader_get_uint32_le (reader, &amp;flxh-&gt;size))</div><div class='add'>+    goto error;</div><div class='add'>+  if (flxh-&gt;size &lt; FlxHeaderSize) {</div><div class='add'>+    GST_ERROR_OBJECT (flxdec, "Invalid file size in the header");</div><div class='add'>+    return FALSE;</div><div class='add'>+  }</div><div class='add'>+</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;flxh-&gt;type))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;flxh-&gt;frames))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;flxh-&gt;width))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;flxh-&gt;height))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;flxh-&gt;depth))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;flxh-&gt;flags))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint32_le (reader, &amp;flxh-&gt;speed))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_skip (reader, 2))        /* reserved */</div><div class='add'>+    goto error;</div><div class='add'>+  /* FLC */</div><div class='add'>+  if (!gst_byte_reader_get_uint32_le (reader, &amp;flxh-&gt;created))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint32_le (reader, &amp;flxh-&gt;creator))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint32_le (reader, &amp;flxh-&gt;updated))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint32_le (reader, &amp;flxh-&gt;updater))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;flxh-&gt;aspect_dx))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;flxh-&gt;aspect_dy))</div><div class='add'>+    goto error;</div><div class='add'>+  /* EGI */</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;flxh-&gt;ext_flags))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;flxh-&gt;keyframes))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;flxh-&gt;totalframes))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint32_le (reader, &amp;flxh-&gt;req_memory))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;flxh-&gt;max_regions))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint16_le (reader, &amp;flxh-&gt;transp_num))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_skip (reader, 24))       /* reserved */</div><div class='add'>+    goto error;</div><div class='add'>+  /* FLC */</div><div class='add'>+  if (!gst_byte_reader_get_uint32_le (reader, &amp;flxh-&gt;oframe1))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_get_uint32_le (reader, &amp;flxh-&gt;oframe2))</div><div class='add'>+    goto error;</div><div class='add'>+  if (!gst_byte_reader_skip (reader, 40))       /* reserved */</div><div class='add'>+    goto error;</div><div class='add'>+</div><div class='add'>+  return TRUE;</div><div class='add'>+</div><div class='add'>+error:</div><div class='add'>+  GST_ERROR_OBJECT (flxdec, "Error reading file header");</div><div class='add'>+  return FALSE;</div><div class='ctx'> }</div><div class='ctx'> </div><div class='ctx'> static GstFlowReturn</div><div class='ctx'> gst_flxdec_chain (GstPad * pad, GstObject * parent, GstBuffer * buf)</div><div class='ctx'> {</div><div class='add'>+  GstByteReader reader;</div><div class='add'>+  GstBuffer *input;</div><div class='add'>+  GstMapInfo map_info;</div><div class='ctx'>   GstCaps *caps;</div><div class='del'>-  guint avail;</div><div class='add'>+  guint available;</div><div class='ctx'>   GstFlowReturn res = GST_FLOW_OK;</div><div class='ctx'> </div><div class='ctx'>   GstFlxDec *flxdec;</div><div class='hunk'>@@ -521,31 +713,50 @@ gst_flxdec_chain (GstPad * pad, GstObject * parent, GstBuffer * buf)</div><div class='ctx'>   g_return_val_if_fail (flxdec != NULL, GST_FLOW_ERROR);</div><div class='ctx'> </div><div class='ctx'>   gst_adapter_push (flxdec-&gt;adapter, buf);</div><div class='del'>-  avail = gst_adapter_available (flxdec-&gt;adapter);</div><div class='add'>+  available = gst_adapter_available (flxdec-&gt;adapter);</div><div class='add'>+  input = gst_adapter_get_buffer (flxdec-&gt;adapter, available);</div><div class='add'>+  if (!gst_buffer_map (input, &amp;map_info, GST_MAP_READ)) {</div><div class='add'>+    GST_ELEMENT_ERROR (flxdec, STREAM, DECODE,</div><div class='add'>+        ("%s", "Failed to map buffer"), (NULL));</div><div class='add'>+    goto error;</div><div class='add'>+  }</div><div class='add'>+  gst_byte_reader_init (&amp;reader, map_info.data, map_info.size);</div><div class='ctx'> </div><div class='ctx'>   if (flxdec-&gt;state == GST_FLXDEC_READ_HEADER) {</div><div class='del'>-    if (avail &gt;= FlxHeaderSize) {</div><div class='del'>-      const guint8 *data = gst_adapter_map (flxdec-&gt;adapter, FlxHeaderSize);</div><div class='add'>+    if (available &gt;= FlxHeaderSize) {</div><div class='add'>+      GstByteReader header;</div><div class='ctx'>       GstCaps *templ;</div><div class='ctx'> </div><div class='del'>-      memcpy ((gchar *) &amp; flxdec-&gt;hdr, data, FlxHeaderSize);</div><div class='del'>-      FLX_HDR_FIX_ENDIANNESS (&amp;(flxdec-&gt;hdr));</div><div class='del'>-      gst_adapter_unmap (flxdec-&gt;adapter);</div><div class='add'>+      if (!gst_byte_reader_get_sub_reader (&amp;reader, &amp;header, FlxHeaderSize)) {</div><div class='add'>+        GST_ELEMENT_ERROR (flxdec, STREAM, DECODE,</div><div class='add'>+            ("%s", "Could not read header"), (NULL));</div><div class='add'>+        goto unmap_input_error;</div><div class='add'>+      }</div><div class='ctx'>       gst_adapter_flush (flxdec-&gt;adapter, FlxHeaderSize);</div><div class='add'>+      available -= FlxHeaderSize;</div><div class='add'>+</div><div class='add'>+      if (!_read_flx_header (flxdec, &amp;header, &amp;flxdec-&gt;hdr)) {</div><div class='add'>+        GST_ELEMENT_ERROR (flxdec, STREAM, DECODE,</div><div class='add'>+            ("%s", "Failed to parse header"), (NULL));</div><div class='add'>+        goto unmap_input_error;</div><div class='add'>+      }</div><div class='ctx'> </div><div class='ctx'>       flxh = &amp;flxdec-&gt;hdr;</div><div class='ctx'> </div><div class='ctx'>       /* check header */</div><div class='ctx'>       if (flxh-&gt;type != FLX_MAGICHDR_FLI &amp;&amp;</div><div class='del'>-          flxh-&gt;type != FLX_MAGICHDR_FLC &amp;&amp; flxh-&gt;type != FLX_MAGICHDR_FLX)</div><div class='del'>-        goto wrong_type;</div><div class='add'>+          flxh-&gt;type != FLX_MAGICHDR_FLC &amp;&amp; flxh-&gt;type != FLX_MAGICHDR_FLX) {</div><div class='add'>+        GST_ELEMENT_ERROR (flxdec, STREAM, WRONG_TYPE, (NULL),</div><div class='add'>+            ("not a flx file (type %x)", flxh-&gt;type));</div><div class='add'>+        goto unmap_input_error;</div><div class='add'>+      }</div><div class='ctx'> </div><div class='del'>-      GST_LOG ("size      :  %d", flxh-&gt;size);</div><div class='del'>-      GST_LOG ("frames    :  %d", flxh-&gt;frames);</div><div class='del'>-      GST_LOG ("width     :  %d", flxh-&gt;width);</div><div class='del'>-      GST_LOG ("height    :  %d", flxh-&gt;height);</div><div class='del'>-      GST_LOG ("depth     :  %d", flxh-&gt;depth);</div><div class='del'>-      GST_LOG ("speed     :  %d", flxh-&gt;speed);</div><div class='add'>+      GST_INFO_OBJECT (flxdec, "size      :  %d", flxh-&gt;size);</div><div class='add'>+      GST_INFO_OBJECT (flxdec, "frames    :  %d", flxh-&gt;frames);</div><div class='add'>+      GST_INFO_OBJECT (flxdec, "width     :  %d", flxh-&gt;width);</div><div class='add'>+      GST_INFO_OBJECT (flxdec, "height    :  %d", flxh-&gt;height);</div><div class='add'>+      GST_INFO_OBJECT (flxdec, "depth     :  %d", flxh-&gt;depth);</div><div class='add'>+      GST_INFO_OBJECT (flxdec, "speed     :  %d", flxh-&gt;speed);</div><div class='ctx'> </div><div class='ctx'>       flxdec-&gt;next_time = 0;</div><div class='ctx'> </div><div class='hunk'>@@ -573,18 +784,32 @@ gst_flxdec_chain (GstPad * pad, GstObject * parent, GstBuffer * buf)</div><div class='ctx'>       gst_pad_set_caps (flxdec-&gt;srcpad, caps);</div><div class='ctx'>       gst_caps_unref (caps);</div><div class='ctx'> </div><div class='del'>-      if (flxh-&gt;depth &lt;= 8)</div><div class='del'>-        flxdec-&gt;converter =</div><div class='del'>-            flx_colorspace_converter_new (flxh-&gt;width, flxh-&gt;height);</div><div class='add'>+      /* zero means 8 */</div><div class='add'>+      if (flxh-&gt;depth == 0)</div><div class='add'>+        flxh-&gt;depth = 8;</div><div class='add'>+</div><div class='add'>+      if (flxh-&gt;depth != 8) {</div><div class='add'>+        GST_ELEMENT_ERROR (flxdec, STREAM, WRONG_TYPE,</div><div class='add'>+            ("%s", "Don't know how to decode non 8 bit depth streams"), (NULL));</div><div class='add'>+        goto unmap_input_error;</div><div class='add'>+      }</div><div class='add'>+</div><div class='add'>+      flxdec-&gt;converter =</div><div class='add'>+          flx_colorspace_converter_new (flxh-&gt;width, flxh-&gt;height);</div><div class='ctx'> </div><div class='ctx'>       if (flxh-&gt;type == FLX_MAGICHDR_FLC || flxh-&gt;type == FLX_MAGICHDR_FLX) {</div><div class='del'>-        GST_LOG ("(FLC) aspect_dx :  %d", flxh-&gt;aspect_dx);</div><div class='del'>-        GST_LOG ("(FLC) aspect_dy :  %d", flxh-&gt;aspect_dy);</div><div class='del'>-        GST_LOG ("(FLC) oframe1   :  0x%08x", flxh-&gt;oframe1);</div><div class='del'>-        GST_LOG ("(FLC) oframe2   :  0x%08x", flxh-&gt;oframe2);</div><div class='add'>+        GST_INFO_OBJECT (flxdec, "(FLC) aspect_dx :  %d", flxh-&gt;aspect_dx);</div><div class='add'>+        GST_INFO_OBJECT (flxdec, "(FLC) aspect_dy :  %d", flxh-&gt;aspect_dy);</div><div class='add'>+        GST_INFO_OBJECT (flxdec, "(FLC) oframe1   :  0x%08x", flxh-&gt;oframe1);</div><div class='add'>+        GST_INFO_OBJECT (flxdec, "(FLC) oframe2   :  0x%08x", flxh-&gt;oframe2);</div><div class='ctx'>       }</div><div class='ctx'> </div><div class='ctx'>       flxdec-&gt;size = ((guint) flxh-&gt;width * (guint) flxh-&gt;height);</div><div class='add'>+      if (flxdec-&gt;size &gt;= G_MAXSIZE / 4) {</div><div class='add'>+        GST_ELEMENT_ERROR (flxdec, STREAM, DECODE,</div><div class='add'>+            ("%s", "Cannot allocate required memory"), (NULL));</div><div class='add'>+        goto unmap_input_error;</div><div class='add'>+      }</div><div class='ctx'> </div><div class='ctx'>       /* create delta and output frame */</div><div class='ctx'>       flxdec-&gt;frame_data = g_malloc (flxdec-&gt;size);</div><div class='hunk'>@@ -596,55 +821,66 @@ gst_flxdec_chain (GstPad * pad, GstObject * parent, GstBuffer * buf)</div><div class='ctx'>     GstBuffer *out;</div><div class='ctx'> </div><div class='ctx'>     /* while we have enough data in the adapter */</div><div class='del'>-    while (avail &gt;= FlxFrameChunkSize &amp;&amp; res == GST_FLOW_OK) {</div><div class='del'>-      FlxFrameChunk flxfh;</div><div class='del'>-      guchar *chunk;</div><div class='del'>-      const guint8 *data;</div><div class='del'>-      GstMapInfo map;</div><div class='del'>-</div><div class='del'>-      chunk = NULL;</div><div class='del'>-      data = gst_adapter_map (flxdec-&gt;adapter, FlxFrameChunkSize);</div><div class='del'>-      memcpy (&amp;flxfh, data, FlxFrameChunkSize);</div><div class='del'>-      FLX_FRAME_CHUNK_FIX_ENDIANNESS (&amp;flxfh);</div><div class='del'>-      gst_adapter_unmap (flxdec-&gt;adapter);</div><div class='del'>-</div><div class='del'>-      switch (flxfh.id) {</div><div class='del'>-        case FLX_FRAME_TYPE:</div><div class='del'>-          /* check if we have the complete frame */</div><div class='del'>-          if (avail &lt; flxfh.size)</div><div class='del'>-            goto need_more_data;</div><div class='del'>-</div><div class='del'>-          /* flush header */</div><div class='del'>-          gst_adapter_flush (flxdec-&gt;adapter, FlxFrameChunkSize);</div><div class='del'>-</div><div class='del'>-          chunk = gst_adapter_take (flxdec-&gt;adapter,</div><div class='del'>-              flxfh.size - FlxFrameChunkSize);</div><div class='del'>-          FLX_FRAME_TYPE_FIX_ENDIANNESS ((FlxFrameType *) chunk);</div><div class='del'>-          if (((FlxFrameType *) chunk)-&gt;chunks == 0)</div><div class='del'>-            break;</div><div class='add'>+    while (available &gt;= FlxFrameChunkSize &amp;&amp; res == GST_FLOW_OK) {</div><div class='add'>+      guint32 size;</div><div class='add'>+      guint16 type;</div><div class='ctx'> </div><div class='del'>-          /* create 32 bits output frame */</div><div class='del'>-//          res = gst_pad_alloc_buffer_and_set_caps (flxdec-&gt;srcpad,</div><div class='del'>-//              GST_BUFFER_OFFSET_NONE,</div><div class='del'>-//              flxdec-&gt;size * 4, GST_PAD_CAPS (flxdec-&gt;srcpad), &amp;out);</div><div class='del'>-//          if (res != GST_FLOW_OK)</div><div class='del'>-//            break;</div><div class='add'>+      if (!gst_byte_reader_get_uint32_le (&amp;reader, &amp;size))</div><div class='add'>+        goto parse_error;</div><div class='add'>+      if (available &lt; size)</div><div class='add'>+        goto need_more_data;</div><div class='ctx'> </div><div class='del'>-          out = gst_buffer_new_and_alloc (flxdec-&gt;size * 4);</div><div class='add'>+      available -= size;</div><div class='add'>+      gst_adapter_flush (flxdec-&gt;adapter, size);</div><div class='add'>+</div><div class='add'>+      if (!gst_byte_reader_get_uint16_le (&amp;reader, &amp;type))</div><div class='add'>+        goto parse_error;</div><div class='add'>+</div><div class='add'>+      switch (type) {</div><div class='add'>+        case FLX_FRAME_TYPE:{</div><div class='add'>+          GstByteReader chunks;</div><div class='add'>+          GstByteWriter writer;</div><div class='add'>+          guint16 n_chunks;</div><div class='add'>+          GstMapInfo map;</div><div class='add'>+</div><div class='add'>+          GST_LOG_OBJECT (flxdec, "Have frame type 0x%02x of size %d", type,</div><div class='add'>+              size);</div><div class='add'>+</div><div class='add'>+          if (!gst_byte_reader_get_sub_reader (&amp;reader, &amp;chunks,</div><div class='add'>+                  size - FlxFrameChunkSize))</div><div class='add'>+            goto parse_error;</div><div class='add'>+</div><div class='add'>+          if (!gst_byte_reader_get_uint16_le (&amp;chunks, &amp;n_chunks))</div><div class='add'>+            goto parse_error;</div><div class='add'>+          GST_LOG_OBJECT (flxdec, "Have %d chunks", n_chunks);</div><div class='add'>+</div><div class='add'>+          if (n_chunks == 0)</div><div class='add'>+            break;</div><div class='add'>+          if (!gst_byte_reader_skip (&amp;chunks, 8))       /* reserved */</div><div class='add'>+            goto parse_error;</div><div class='add'>+</div><div class='add'>+          gst_byte_writer_init_with_data (&amp;writer, flxdec-&gt;frame_data,</div><div class='add'>+              flxdec-&gt;size, TRUE);</div><div class='ctx'> </div><div class='ctx'>           /* decode chunks */</div><div class='del'>-          if (!flx_decode_chunks (flxdec,</div><div class='del'>-                  ((FlxFrameType *) chunk)-&gt;chunks,</div><div class='del'>-                  chunk + FlxFrameTypeSize, flxdec-&gt;frame_data)) {</div><div class='add'>+          if (!flx_decode_chunks (flxdec, n_chunks, &amp;chunks, &amp;writer)) {</div><div class='ctx'>             GST_ELEMENT_ERROR (flxdec, STREAM, DECODE,</div><div class='ctx'>                 ("%s", "Could not decode chunk"), NULL);</div><div class='del'>-            return GST_FLOW_ERROR;</div><div class='add'>+            goto unmap_input_error;</div><div class='ctx'>           }</div><div class='add'>+          gst_byte_writer_reset (&amp;writer);</div><div class='ctx'> </div><div class='ctx'>           /* save copy of the current frame for possible delta. */</div><div class='ctx'>           memcpy (flxdec-&gt;delta_data, flxdec-&gt;frame_data, flxdec-&gt;size);</div><div class='ctx'> </div><div class='del'>-          gst_buffer_map (out, &amp;map, GST_MAP_WRITE);</div><div class='add'>+          out = gst_buffer_new_and_alloc (flxdec-&gt;size * 4);</div><div class='add'>+          if (!gst_buffer_map (out, &amp;map, GST_MAP_WRITE)) {</div><div class='add'>+            GST_ELEMENT_ERROR (flxdec, STREAM, DECODE,</div><div class='add'>+                ("%s", "Could not map output buffer"), NULL);</div><div class='add'>+            gst_buffer_unref (out);</div><div class='add'>+            goto unmap_input_error;</div><div class='add'>+          }</div><div class='add'>+</div><div class='ctx'>           /* convert current frame. */</div><div class='ctx'>           flx_colorspace_convert (flxdec-&gt;converter, flxdec-&gt;frame_data,</div><div class='ctx'>               map.data);</div><div class='hunk'>@@ -655,30 +891,32 @@ gst_flxdec_chain (GstPad * pad, GstObject * parent, GstBuffer * buf)</div><div class='ctx'> </div><div class='ctx'>           res = gst_pad_push (flxdec-&gt;srcpad, out);</div><div class='ctx'>           break;</div><div class='add'>+        }</div><div class='ctx'>         default:</div><div class='del'>-          /* check if we have the complete frame */</div><div class='del'>-          if (avail &lt; flxfh.size)</div><div class='del'>-            goto need_more_data;</div><div class='del'>-</div><div class='del'>-          gst_adapter_flush (flxdec-&gt;adapter, flxfh.size);</div><div class='add'>+          GST_DEBUG_OBJECT (flxdec, "Unknown frame type 0x%02x, skipping %d",</div><div class='add'>+              type, size);</div><div class='add'>+          if (!gst_byte_reader_skip (&amp;reader, size - FlxFrameChunkSize))</div><div class='add'>+            goto parse_error;</div><div class='ctx'>           break;</div><div class='ctx'>       }</div><div class='del'>-</div><div class='del'>-      g_free (chunk);</div><div class='del'>-</div><div class='del'>-      avail = gst_adapter_available (flxdec-&gt;adapter);</div><div class='ctx'>     }</div><div class='ctx'>   }</div><div class='add'>+</div><div class='add'>+  gst_buffer_unmap (input, &amp;map_info);</div><div class='add'>+  gst_buffer_unref (input);</div><div class='add'>+</div><div class='ctx'> need_more_data:</div><div class='ctx'>   return res;</div><div class='ctx'> </div><div class='ctx'>   /* ERRORS */</div><div class='del'>-wrong_type:</div><div class='del'>-  {</div><div class='del'>-    GST_ELEMENT_ERROR (flxdec, STREAM, WRONG_TYPE, (NULL),</div><div class='del'>-        ("not a flx file (type %x)", flxh-&gt;type));</div><div class='del'>-    return GST_FLOW_ERROR;</div><div class='del'>-  }</div><div class='add'>+parse_error:</div><div class='add'>+  GST_ELEMENT_ERROR (flxdec, STREAM, DECODE,</div><div class='add'>+      ("%s", "Failed to parse stream"), (NULL));</div><div class='add'>+unmap_input_error:</div><div class='add'>+  gst_buffer_unmap (input, &amp;map_info);</div><div class='add'>+  gst_buffer_unref (input);</div><div class='add'>+error:</div><div class='add'>+  return GST_FLOW_ERROR;</div><div class='ctx'> }</div><div class='ctx'> </div><div class='ctx'> static GstStateChangeReturn</div><div class='head'>diff --git a/gst/flx/gstflxdec.h b/gst/flx/gstflxdec.h<br/>index 3f9a0aabe..4fd8dfd0b 100644<br/>--- a/<a href='/gstreamer/gst-plugins-good/tree/gst/flx/gstflxdec.h?id=45dcd0b9ccf33ed85cdafeb871a3781f5be57fd9'>gst/flx/gstflxdec.h</a><br/>+++ b/<a href='/gstreamer/gst-plugins-good/tree/gst/flx/gstflxdec.h?id=153a8ae752c90d07190ef45803422a4f71ea8bff'>gst/flx/gstflxdec.h</a></div><div class='hunk'>@@ -23,6 +23,8 @@</div><div class='ctx'> #include &lt;gst/gst.h&gt;</div><div class='ctx'> </div><div class='ctx'> #include &lt;gst/base/gstadapter.h&gt;</div><div class='add'>+#include &lt;gst/base/gstbytereader.h&gt;</div><div class='add'>+#include &lt;gst/base/gstbytewriter.h&gt;</div><div class='ctx'> #include "flx_color.h"</div><div class='ctx'> </div><div class='ctx'> G_BEGIN_DECLS</div><div class='hunk'>@@ -45,7 +47,7 @@ struct _GstFlxDec {</div><div class='ctx'> </div><div class='ctx'>   guint8 *delta_data, *frame_data;</div><div class='ctx'>   GstAdapter *adapter;</div><div class='del'>-  gulong size;</div><div class='add'>+  gsize size;</div><div class='ctx'>   GstFlxDecState state;</div><div class='ctx'>   gint64 frame_time;</div><div class='ctx'>   gint64 next_time;</div></td></tr></table></div> <!-- class=content -->
<div class='footer'>generated by <a href='https://git.zx2c4.com/cgit/about/'>cgit v1.2.1</a> (<a href='https://git-scm.com/'>git 2.18.0</a>) at 2021-10-30 22:00:08 +0000</div>
</div> <!-- id=cgit -->
</body>
</html>
