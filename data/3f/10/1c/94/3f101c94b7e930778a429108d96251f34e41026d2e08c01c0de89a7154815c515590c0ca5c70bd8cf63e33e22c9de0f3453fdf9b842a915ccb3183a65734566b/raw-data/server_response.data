<!DOCTYPE html>
<html>

<head>
	<!-- Meta -->
	<meta charset="UTF-8"/>
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1">
	<meta name="generator" content="Jekyll">

	<title>CVE: 2021-3311 October CMS Token Reactivation</title>

	<!-- CSS & fonts -->
	<link rel="stylesheet" href="/css/main.css">
	<link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,900,400italic%7CSignika:700,300,400,600' rel='stylesheet' type='text/css'>
	<link rel="shortcut icon" type="image/png" href="/img/chips.png">

	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

	<!-- RSS -->
	<link href="/atom.xml" type="application/atom+xml" rel="alternate" title="ATOM Feed" />

	<!-- Google Analytics -->
	<script async src="https://www.googletagmanager.com/gtag/js?id=G-QT5863WVEB"></script>
	<script>
	window.dataLayer = window.dataLayer || [];
	function gtag(){dataLayer.push(arguments);}
	gtag('js', new Date());

	gtag('config', 'G-QT5863WVEB');
	</script>

</head>


<body>
	<div id="wrap">
	  	
	  	<!-- Navigation -->
	  	<!--
<nav id="nav">
	<div id="nav-list">
		<a href="">Home</a>

		<!-- Nav pages --
	  
	    
	  
	    
	      <a href="/about" title="About Emerald">About Emerald</a>
	    
	  
	    
	  
	    
	  
	    
	  
	    
	  
    
    <!-- Nav links --
	  <a href="https://github.com/KingFelix/emerald/archive/master.zip">Download</a>
<a href="https://github.com/KingFelix/emerald">Project on Github</a>

	</div>
  
  <!-- Nav footer --
	
	  <footer>
	
	<span>version 1.1.0</span>

</footer>
	

</nav>
-->
    
    <!-- Icon menu 
	  <a id="nav-menu">
	  	<div id="menu"></div>
	  </a>

      <!-- Header -->
      
        <header id="header">
	<a href="/">
		<img src="/img/chips.png" alt="Anisio Santos Logo">
	  <h1>Anísio Santos</h1>
	</a>
</header>

      

    <!-- Main content -->
	  <div id="container">
		  
		<main>

			<article id="post-page">
	<h2>CVE: 2021-3311 October CMS Token Reactivation</h2>		
	<time datetime="2021-02-23T00:00:00+00:00" class="by-line">23 Feb 2021</time>
	<div class="content">

		<p><img src="/img/october.jpg" alt="" /></p>

<p>Don’t get me wrong, but I believe that ‘luck’ many times is really a thing in the cybersecurity field. I’m not talking just about the normal luck, that makes you hit a jackpot on a slot machine, I’m talking about another kind of luck, an ‘experience luck’, that comes just with knowledge. Many bounties and many pieces of researches emerge just by looking at the right amount of code at the right path number and them BOOM! Been able o have that feeling and timing is something that I believe comes with experience, time and familiarity.</p>

<p>I think I have much more to learn about knowledge and experience to get the ‘experience luck’ feeling, but sometimes I come across many normal luck moments, and the bug that I will talk about today is one of those moments. That’s not a deep technical knowledge bug, but it gave me this lucky feeling of being at the right place at the right time.</p>

<h1 id="the-bug">The Bug</h1>

<p>The bug here is simple. I was lost on a rabbit hole, trying to explore an upload field on an <a href="https://octobercms.com">October CMS</a> based site on a pentest, besides some teammates here at <a href="https://www.convisoappsec.com/">Conviso</a>, and I ended up logging out now and then. I noticed that my Burp repeater tabs with the upload post request stopped work when I log out, but since I log in again the same old session token will be reactivated.</p>

<p>So the flux is basically:</p>
<ol>
  <li>Victim logs in</li>
  <li>Attacker captures victim’s session cookie</li>
  <li>Victim logs out</li>
  <li>Session cookie no longer works</li>
  <li>Victim logs in a second time</li>
  <li>ORIGINAL session cookie works (Attacker is also signed in)</li>
</ol>

<p>That’s really strange behavior, the victim receives a different session token but the old disabled one becomes available again.
It’s important to say that, to do this attack, the attacker has to find some way to get the session token of the victim, and the token last use must be on the time gap of the October CMS framework (the default is 2 hours), so the scenario is really strict, but the simple fact that this can happen makes it a vulnerability.</p>

<h1 id="why-this-happens">Why This Happens?</h1>

<p>Since October is an open-source platform, my teammates and I started to look for some explication about this behavior on the source code. Let’s take a look at <a href="https://github.com/octobercms/library/blob/4066b84b45f8daebf97b452a7e24ff09f87fac61/src/Auth/Manager.php#L669-L691">October CMS Logout function</a>:</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">function</span> <span class="n">logout</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Initialize the current auth session before trying to remove it</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">is_null</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">user</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">check</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">isImpersonator</span><span class="p">())</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">user</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getImpersonator</span><span class="p">();</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">stopImpersonate</span><span class="p">();</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">user</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">user</span><span class="o">-&gt;</span><span class="nf">setRememberToken</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">user</span><span class="o">-&gt;</span><span class="nf">forceSave</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">user</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

    <span class="nc">Session</span><span class="o">::</span><span class="nb">flush</span><span class="p">();</span>
    <span class="nc">Cookie</span><span class="o">::</span><span class="nf">queue</span><span class="p">(</span><span class="nc">Cookie</span><span class="o">::</span><span class="nf">forget</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="n">sessionKey</span><span class="p">));</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The part that caught our attention was that <em>Session::flush();</em> part. October is based on Laravel, and if you look <a href="https://github.com/laravel/framework/blob/c62385a23c639742b3b74a4a78640da25e6b782b/src/Illuminate/Session/Store.php#L450-L435">how Laravel implements this flush function</a> you can see why just flush the session can cause bad behavior.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">function</span> <span class="n">flush</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">attributes</span> <span class="o">=</span> <span class="p">[];</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This function call basically just cleans the attributes of the session, without invalidating it.</p>

<h1 id="the-correction">The Correction</h1>

<p>My suggestion for the October CMS team was to remove the flush and call <em>Session:invalidate</em>, as we can see on the <a href="https://github.com/laravel/framework/blob/c62385a23c639742b3b74a4a78640da25e6b782b/src/Illuminate/Session/Store.php#L460-L465">same Laravel file</a>, the invalidate method calls a method named migrate passing true as an argument.</p>

<figure class="highlight"><pre><code class="language-php" data-lang="php"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="k">public</span> <span class="k">function</span> <span class="n">migrate</span><span class="p">(</span><span class="nv">$destroy</span> <span class="o">=</span> <span class="kc">false</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$destroy</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="n">handler</span><span class="o">-&gt;</span><span class="nf">destroy</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">getId</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">setExists</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>

    <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">setId</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">generateSessionId</span><span class="p">());</span>

    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Since the invalidate function passes true, the old token will be destroyed and this bug will no longer work.
That’s exactly what was changed on this <a href="https://github.com/octobercms/library/commit/642f597489e6f644d4bd9a0c267e864cabead024">October commit</a>.</p>

<p>That’s basically it, A huge thanks to the October team and my Conviso teammates, hope that sharing this story with you brings any kind of luck to your journey! Thanks for the reading!</p>

<h3 id="referencies">Referencies</h3>
<ul>
  <li><strong>CVE 2021-3311</strong> - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-3311</li>
  <li><strong>Conviso Application Security</strong> - https://www.convisoappsec.com/</li>
  <li><strong>October correction commit</strong> - https://github.com/octobercms/library/commit/642f597489e6f644d4bd9a0c267e864cabead024</li>
  <li><strong>Owasp Broken Authentication</strong> - https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication</li>
</ul>

		
	</div>
</article>



	  </main>
		
		  <!-- Pagination links -->
      

	  </div>
	    
	    <!-- Footer -->
	    <footer class="footer"><span>
    <ul class="menu">
        <li style="display: inline;margin-right: 20px;"><a href="https://twitter.com/anisiosts" style="color: white;" class="fa fa-twitter"></a></li>
        <li style="display: inline;"><a href="https://www.linkedin.com/in/anisio-santos/" style="color: white;" class="fa fa-linkedin"></a></li>
    </ul>
</span></footer>


	    <!-- Script -->
      <script src="/js/main.js"></script>	


	</div>
</body>
</html>
