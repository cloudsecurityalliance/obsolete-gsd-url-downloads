<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    
        <link rel='alternate' type='application/rss+xml' title='Scripting Engine problem Bug #74603 - RDF' href='rss/bug.php?id=74603'>
        <link rel='alternate' type='application/rss+xml' title='Scripting Engine problem Bug #74603 - RSS 2.0' href='rss/bug.php?id=74603&format=rss2'>
        <base href="https://bugs.php.net/">
    <title>PHP :: Bug #74603 :: PHP INI Parsing Stack Buffer Overflow Vulnerability</title>
    <link rel="shortcut icon" href="https://bugs.php.net/images/favicon.ico">
    <link rel="stylesheet" href="https://bugs.php.net/css/style.css">
</head>

<body>

<table id="top" class="head" cellspacing="0" cellpadding="0">
    <tr>
        <td class="head-logo">
            <a href="/"><img src="images/logo.png" alt="Bugs" vspace="2" hspace="2"></a>
        </td>

        <td class="head-menu">
            <a href="https://php.net/">php.net</a>&nbsp;|&nbsp;
            <a href="https://php.net/support.php">support</a>&nbsp;|&nbsp;
            <a href="https://php.net/docs.php">documentation</a>&nbsp;|&nbsp;
            <a href="report.php">report a bug</a>&nbsp;|&nbsp;
            <a href="search.php">advanced search</a>&nbsp;|&nbsp;
            <a href="search-howto.php">search howto</a>&nbsp;|&nbsp;
            <a href="stats.php">statistics</a>&nbsp;|&nbsp;
            <a href="random">random bug</a>&nbsp;|&nbsp;
            <a href="login.php">login</a>
        </td>
    </tr>

    <tr>
        <td class="head-search" colspan="2">
            <form method="get" action="search.php">
                <p class="head-search">
                    <input type="hidden" name="cmd" value="display">
                    <small>go to bug id or search bugs for</small>
                    <input class="small" type="text" name="search_for" value="" size="30">
                    <input type="image" src="images/small_submit_white.gif" alt="search" style="vertical-align: middle;">
                </p>
            </form>
        </td>
    </tr>
</table>

<table class="middle" cellspacing="0" cellpadding="0">
    <tr>
        <td class="content">
<div id="bugheader">
    <table id="details">
        <tr id="title">
            <th class="details" id="number"><a href="bug.php?id=74603">Bug</a>&nbsp;#74603</th>
            <td id="summary" colspan="5">PHP INI Parsing Stack Buffer Overflow Vulnerability</td>
        </tr>
        <tr id="submission">
            <th class="details">Submitted:</th>
            <td style="white-space: nowrap;">2017-05-17 02:29 UTC</td>
            <th class="details">Modified:</th>
            <td style="white-space: nowrap;">2017-08-17 15:41 UTC</td>
            <td rowspan="6">


            </td>
        </tr>

        <tr id="submitter">
            <th class="details">From:</th>
            <td>l &#x64;&#111;&#x74; wei &#x61;&#116; ntu &#x64;&#111;&#x74; edu &#x64;&#111;&#x74; sg</td>
            <th class="details">Assigned:</th>
            <td><a href="search.php?cmd=display&amp;assign=stas">stas</a> (<a href="https://people.php.net/stas">profile</a>)</td>
        </tr>

        <tr id="categorization">
            <th class="details">Status:</th>
            <td>Closed</td>
            <th class="details">Package:</th>
            <td><a href="search.php?cmd=display&amp;package_name[]=Scripting+Engine+problem">Scripting Engine problem</a></td>
        </tr>

        <tr id="situation">
            <th class="details">PHP Version:</th>
            <td>5.6.30</td>
            <th class="details">OS:</th>
            <td>*</td>
        </tr>

        <tr id="private">
            <th class="details">Private report:</th>
            <td>No</td>
            <th class="details">CVE-ID:</th>
            <td><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11628" target="_blank">2017-11628</a></td>
        </tr>
    </table>
</div>

<div class="controls">
<span id='control_0' class='control active'>View</span>
<span id='control_3' class='control'><a href='bug.php?id=74603&amp;edit=3'>Add Comment</a></span>
<span id='control_1' class='control'><a href='bug.php?id=74603&amp;edit=1'>Developer</a></span>
<span id='control_2' class='control'><a href='bug.php?id=74603&amp;edit=2'>Edit</a></span>
</div>
<div class="clear"></div>



<div class='comment type_comment' ><a name="1494988186">&nbsp;</a><strong>[2017-05-17 02:29 UTC] l &#x64;&#111;&#x74; wei &#x61;&#116; ntu &#x64;&#111;&#x74; edu &#x64;&#111;&#x74; sg</strong>
<pre class='note'>Description:
------------
A stack buffer overflow exists in the latest stable release of PHP-7.1.5 and PHP-5.6.30 in PHP INI parsing API, which may accept network / local filesystem input. On malformed inputs, a stack buffer overflow in zend_ini_do_op() could write 1-byte off a fixed size stack buffer. On installations with the stack smashing mitigation, this would cause an immediate DoS; upto optimization levels, build options and stack buffer overflow mitigations, this vulnerability may allow corrupting other local variables or the frame pointer, potentially allows remotely executing code.

In php-7.1.5/Zend/zend_long.h:

110 #if SIZEOF_ZEND_LONG == 4
111 # define MAX_LENGTH_OF_LONG 11
112 # define LONG_MIN_DIGITS &quot;2147483648&quot;
113 #elif SIZEOF_ZEND_LONG == 8
114 # define MAX_LENGTH_OF_LONG 20
115 # define LONG_MIN_DIGITS &quot;9223372036854775808&quot;
116 #else
117 # error &quot;Unknown SIZEOF_ZEND_LONG&quot;
118 #endif

In php-7.1.5/Zend/zend_ini_parser.c:

 123 /* {{{ zend_ini_do_op()
 124 */
 125 static void zend_ini_do_op(char type, zval *result, zval *op1, zval *op2)
 126 {
 127         int i_result;
 128         int i_op1, i_op2;
 129         int str_len;
 130         char str_result[MAX_LENGTH_OF_LONG];
 131 
 132         i_op1 = atoi(Z_STRVAL_P(op1));
 133         zend_string_free(Z_STR_P(op1));
 134         if (op2) {
 135                 i_op2 = atoi(Z_STRVAL_P(op2));
 136                 zend_string_free(Z_STR_P(op2));
 137         } else {
 138                 i_op2 = 0;
 139         }
 140 
 141         switch (type) {
 142                 case '|':
 143                         i_result = i_op1 | i_op2;
 144                         break;
 145                 case '&amp;':
 146                         i_result = i_op1 &amp; i_op2;
 147                         break;
 148                 case '^':
 149                         i_result = i_op1 ^ i_op2;
 150                         break;
 151                 case '~':
 152                         i_result = ~i_op1;
 153                         break;
 154                 case '!':
 155                         i_result = !i_op1;
 156                         break;
 157                 default:
 158                         i_result = 0;
 159                         break;
 160         }
 161 
 162         str_len = zend_sprintf(str_result, &quot;%d&quot;, i_result);
 163         ZVAL_NEW_STR(result, zend_string_init(str_result, str_len, ZEND_SYSTEM_INI));
 164 }
 165 /* }}} */

The minimums, &quot;-2147483648&quot; and &quot;-9223372036854775808&quot; are of length 11 and 20 respectively, 
the proper definition of str_result[] array would be: str_result[MAX_LENGTH_OF_LONG + 1]. A
crafted ini entry would cause an overflow.

Credit: Wei Lei and Liu Yang of Nanyang Technological University.

Test script:
---------------
$ cat input.ini
0=0&amp;~2000000000

$ cat input.php
&lt;?php 

$argc = $_SERVER['argc'];
$argv = $_SERVER['argv'];

$file_loc = dirname(__FILE__).&quot;/&quot;.$argv[1];

var_dump(parse_ini_file($file_loc, true, INI_SCANNER_NORMAL));

?&gt;

Expected result:
----------------
No crash.

Actual result:
--------------
$ bin/php input.php input.ini

*** buffer overflow detected ***: bin/php terminated
======= Backtrace: =========
/lib/i386-linux-gnu/libc.so.6(+0x68e4e)[0xb7527e4e]
/lib/i386-linux-gnu/libc.so.6(__fortify_fail+0x6b)[0xb75ba85b]
/lib/i386-linux-gnu/libc.so.6(+0xfa6ea)[0xb75b96ea]
/lib/i386-linux-gnu/libc.so.6(+0xf9e48)[0xb75b8e48]
/lib/i386-linux-gnu/libc.so.6(_IO_default_xsputn+0x8e)[0xb752fc0e]
/lib/i386-linux-gnu/libc.so.6(_IO_vfprintf+0x89b)[0xb7502f3b]
/lib/i386-linux-gnu/libc.so.6(__vsprintf_chk+0xb1)[0xb75b8f01]
/lib/i386-linux-gnu/libc.so.6(__sprintf_chk+0x2f)[0xb75b8e2f]
bin/php[0x82e7aa0]
bin/php[0x82e87d3]
bin/php(zend_parse_ini_file+0x47)[0x82e8b07]
bin/php[0x8255788]
bin/php[0x83631f6]
bin/php(execute_ex+0x22)[0x8353c52]
bin/php(zend_execute+0x13b)[0x83a341b]
bin/php(zend_execute_scripts+0x30)[0x8313010]
bin/php(php_execute_script+0x286)[0x82b3f26]
bin/php[0x83a57de]
bin/php[0x80683b9]
/lib/i386-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0xb74d8a83]
bin/php[0x8068444]
======= Memory map: ========
08048000-0888d000 r-xp 00000000 08:01 704181     /home/weilei/php7_gdb/bin/php
0888d000-0888e000 r--p 00844000 08:01 704181     /home/weilei/php7_gdb/bin/php
0888e000-08899000 rw-p 00845000 08:01 704181     /home/weilei/php7_gdb/bin/php
08899000-088b2000 rw-p 00000000 00:00 0 
09ae7000-09b9a000 rw-p 00000000 00:00 0          [heap]
b7000000-b7200000 r--p 00000000 08:01 271314     /usr/lib/locale/locale-archive
b7200000-b7400000 rw-p 00000000 00:00 0 
b7464000-b7480000 r-xp 00000000 08:01 787579     /lib/i386-linux-gnu/libgcc_s.so.1
b7480000-b7481000 rw-p 0001b000 08:01 787579     /lib/i386-linux-gnu/libgcc_s.so.1
b7496000-b74bf000 rw-p 00000000 00:00 0 
b74bf000-b7667000 r-xp 00000000 08:01 787552     /lib/i386-linux-gnu/libc-2.19.so
b7667000-b7669000 r--p 001a8000 08:01 787552     /lib/i386-linux-gnu/libc-2.19.so
b7669000-b766a000 rw-p 001aa000 08:01 787552     /lib/i386-linux-gnu/libc-2.19.so
b766a000-b766d000 rw-p 00000000 00:00 0 
b766d000-b7670000 r-xp 00000000 08:01 787569     /lib/i386-linux-gnu/libdl-2.19.so
b7670000-b7671000 r--p 00002000 08:01 787569     /lib/i386-linux-gnu/libdl-2.19.so
b7671000-b7672000 rw-p 00003000 08:01 787569     /lib/i386-linux-gnu/libdl-2.19.so
b7672000-b7673000 rw-p 00000000 00:00 0 
b7673000-b76b7000 r-xp 00000000 08:01 787602     /lib/i386-linux-gnu/libm-2.19.so
b76b7000-b76b8000 r--p 00043000 08:01 787602     /lib/i386-linux-gnu/libm-2.19.so
b76b8000-b76b9000 rw-p 00044000 08:01 787602     /lib/i386-linux-gnu/libm-2.19.so
b76b9000-b76cc000 r-xp 00000000 08:01 787678     /lib/i386-linux-gnu/libresolv-2.19.so
b76cc000-b76cd000 ---p 00013000 08:01 787678     /lib/i386-linux-gnu/libresolv-2.19.so
b76cd000-b76ce000 r--p 00013000 08:01 787678     /lib/i386-linux-gnu/libresolv-2.19.so
b76ce000-b76cf000 rw-p 00014000 08:01 787678     /lib/i386-linux-gnu/libresolv-2.19.so
b76cf000-b76e4000 rw-p 00000000 00:00 0 
b76e4000-b76e5000 r--s 00000000 08:01 554280     /home/weilei/php7_gdb/input.ini
b76e5000-b76e6000 r--p 00855000 08:01 271314     /usr/lib/locale/locale-archive
b76e6000-b76e8000 rw-p 00000000 00:00 0 
b76e8000-b76ea000 r--p 00000000 00:00 0          [vvar]
b76ea000-b76ec000 r-xp 00000000 00:00 0          [vdso]
b76ec000-b770c000 r-xp 00000000 08:01 787528     /lib/i386-linux-gnu/ld-2.19.so
b770c000-b770d000 r--p 0001f000 08:01 787528     /lib/i386-linux-gnu/ld-2.19.so
b770d000-b770e000 rw-p 00020000 08:01 787528     /lib/i386-linux-gnu/ld-2.19.so
bff25000-bff47000 rw-p 00000000 00:00 0          [stack]
Aborted



</pre>
</div><h2>Patches</h2>
<p><a href='patch-add.php?bug_id=74603'>Add a Patch</a></p><h2>Pull Requests</h2>
<p><a href='gh-pull-add.php?bug_id=74603'>Add a Pull Request</a></p><h2 style="border-bottom:2px solid #666;margin-bottom:0;padding:5px 0;">History</h2><div id='comment_filter' class='controls comments'><span id='type_all' class='control active' onclick='do_comment(this);'>All</span><span id='type_comment' class='control ' onclick='do_comment(this);'>Comments</span><span id='type_log' class='control ' onclick='do_comment(this);'>Changes</span><span id='type_svn' class='control ' onclick='do_comment(this);'>Git/SVN commits</span><span id='type_related' class='control ' onclick='do_comment(this);'>Related reports</span>            </div>
            <div id='comments_view' style='clear:both;'>
<div class='comment type_log' ><a name="1495961083">&nbsp;</a><strong>[2017-05-28 08:44 UTC] l &#x64;&#111;&#x74; wei &#x61;&#116; ntu &#x64;&#111;&#x74; edu &#x64;&#111;&#x74; sg</strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Package: Reproducible crash</span>
<span class="added">+Package: Scripting Engine problem</span>
</div></div></div><div class='comment type_comment' ><a name="1495961085">&nbsp;</a><strong>[2017-05-28 08:44 UTC] l &#x64;&#111;&#x74; wei &#x61;&#116; ntu &#x64;&#111;&#x74; edu &#x64;&#111;&#x74; sg</strong>
<pre class='note'>Affecting Zend, changed package to Scripting Engine. Can also be triggered via ini string (e.g., in cmdline argument, use -d foor=[bar] with the crasher above).
</pre>
</div><div class='comment type_log' ><a name="1497915599">&nbsp;</a><strong>[2017-06-19 23:39 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Type: Security</span>
<span class="added">+Type: Bug</span>
</div></div></div><div class='comment type_comment' ><a name="1497915599">&nbsp;</a><strong>[2017-06-19 23:39 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Since .ini files are inherently admin functions, not a security issue.
</pre>
</div><div class='comment type_comment' ><a name="1497933598">&nbsp;</a><strong>[2017-06-20 04:39 UTC] l &#x64;&#111;&#x74; wei &#x61;&#116; ntu &#x64;&#111;&#x74; edu &#x64;&#111;&#x74; sg</strong>
<pre class='note'>Hi stas, thanks for the reply.

It is true that php.ini should be protected from tampering, if modified, other issues could arise too.

However it seems to me that parse_ini_file() and parse_ini_string() are not limited to protected ini files, as there is no inherent restriction whatsoever that stops these functions from being called on untrusted external inputs, especially for parse_ini_string(), as a handy PHP API.

So I think maybe this should qualify a security bug ? The implementation bears some assumptions that ini files/strings should always be protected to the same level as the PHP module, however such implicit requirements cannot be guaranteed.
</pre>
</div><div class='comment type_comment' ><a name="1497935274">&nbsp;</a><strong>[2017-06-20 05:07 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Seems to be reproducible only on 32-bit PHP, since i_op* are ints, so it is required that sizeof(int) == sizeof(long) to reproduce the issue.
</pre>
</div><div class='comment type_log' ><a name="1497937815">&nbsp;</a><strong>[2017-06-20 05:50 UTC] l &#x64;&#111;&#x74; wei &#x61;&#116; ntu &#x64;&#111;&#x74; edu &#x64;&#111;&#x74; sg</strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Type:           Bug</span>
<span class="added">+Type:           Security</span>
<span class="removed">-PHP Version:    7.1.5</span>
<span class="added">+PHP Version:    7.1.6</span>
<span class="removed">-Private report: No</span>
<span class="added">+Private report: Yes</span>
</div></div></div><div class='comment type_comment' ><a name="1497937815">&nbsp;</a><strong>[2017-06-20 05:50 UTC] l &#x64;&#111;&#x74; wei &#x61;&#116; ntu &#x64;&#111;&#x74; edu &#x64;&#111;&#x74; sg</strong>
<pre class='note'>Was tested only on 32-bit, seems not reproducing for 64-bit. So affecting both 5 and 7 on 32-bit builds.
</pre>
</div><div class='comment type_log' ><a name="1497942787">&nbsp;</a><strong>[2017-06-20 07:13 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-PHP Version: 7.1.6</span>
<span class="added">+PHP Version: 5.6.30</span>
<span class="removed">-Assigned To:</span>
<span class="added">+Assigned To: stas</span>
</div></div></div><div class='comment type_comment' ><a name="1497942787">&nbsp;</a><strong>[2017-06-20 07:13 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>The fix is in security repo as fec9a2e1b599b870c22733047d16cb1fa18ca711 and in <a href="https://gist.github.com/5187488335eff73b816f0d4ed0d4290f" rel="nofollow">https://gist.github.com/5187488335eff73b816f0d4ed0d4290f</a>

Please verify
</pre>
</div><div class='comment type_comment' ><a name="1497947232">&nbsp;</a><strong>[2017-06-20 08:27 UTC] l &#x64;&#111;&#x74; wei &#x61;&#116; ntu &#x64;&#111;&#x74; edu &#x64;&#111;&#x74; sg</strong>
<pre class='note'>Hi stas, the fix looks good, thanks!
</pre>
</div><div class='comment type_svn' ><a name="1499228016">&nbsp;</a><strong>[2017-07-05 04:13 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=5f8380d33e648964d2d5140f329cf2d4c443033c" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=5f8380d33e648964d2d5140f329cf2d4c443033c</a>
Log: Fix <a href='bug.php?id=74603'>bug #74603</a> - use correct buffer size
</pre>
</div><div class='comment type_log' ><a name="1499228016">&nbsp;</a><strong>[2017-07-05 04:13 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Status: Assigned</span>
<span class="added">+Status: Closed</span>
</div></div></div><div class='comment type_svn' ><a name="1499228615">&nbsp;</a><strong>[2017-07-05 04:23 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=05255749139b3686c8a6a58ee01131ac0047465e" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=05255749139b3686c8a6a58ee01131ac0047465e</a>
Log: Fix <a href='bug.php?id=74603'>bug #74603</a> - use correct buffer size
</pre>
</div><div class='comment type_svn' ><a name="1499228621">&nbsp;</a><strong>[2017-07-05 04:23 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=5f8380d33e648964d2d5140f329cf2d4c443033c" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=5f8380d33e648964d2d5140f329cf2d4c443033c</a>
Log: Fix <a href='bug.php?id=74603'>bug #74603</a> - use correct buffer size
</pre>
</div><div class='comment type_comment' ><a name="1499232059">&nbsp;</a><strong>[2017-07-05 05:20 UTC] l &#x64;&#111;&#x74; wei &#x61;&#116; ntu &#x64;&#111;&#x74; edu &#x64;&#111;&#x74; sg</strong>
<pre class='note'>Hi, does this issue get a CVE id ?
</pre>
</div><div class='comment type_comment' ><a name="1499235214">&nbsp;</a><strong>[2017-07-05 06:13 UTC] <a href="//people.php.net/remi">remi@php.net</a></strong>
<pre class='note'>This bug requires some specially crafted ini file, so IMHO is not even a security issue.
</pre>
</div><div class='comment type_comment' ><a name="1499237625">&nbsp;</a><strong>[2017-07-05 06:53 UTC] l &#x64;&#111;&#x74; wei &#x61;&#116; ntu &#x64;&#111;&#x74; edu &#x64;&#111;&#x74; sg</strong>
<pre class='note'>Not all ini files receive the same protection as php.ini (if properly configured). That allows a security boundary cross. It is provided by PHP as an API, together with parse_ini_string() - which means there is no restriction on what to be passed into.
</pre>
</div><div class='comment type_log' ><a name="1499271909">&nbsp;</a><strong>[2017-07-05 16:25 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-CVE-ID:</span>
<span class="added">+CVE-ID: needed</span>
</div></div></div><div class='comment type_svn' ><a name="1499323449">&nbsp;</a><strong>[2017-07-06 06:44 UTC] <a href="//people.php.net/krakjoe">krakjoe@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=88c521d659521f695e0b9e7fcdded0fc1ee1c53b" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=88c521d659521f695e0b9e7fcdded0fc1ee1c53b</a>
Log: Fix <a href='bug.php?id=74603'>bug #74603</a> - use correct buffer size
</pre>
</div><div class='comment type_comment' ><a name="1500972638">&nbsp;</a><strong>[2017-07-25 08:50 UTC] chiuado &#x61;&#116; gmail &#x64;&#111;&#x74; com</strong>
<pre class='note'>Sorry for bothering, is this issue reproducible on windows platform?
I'm using &quot;php-5.6.30-Win32-VC11-x86&quot;, but I can not reproduce it, is there any precondition?
</pre>
</div><div class='comment type_comment' ><a name="1500981668">&nbsp;</a><strong>[2017-07-25 11:21 UTC] l &#x64;&#111;&#x74; wei &#x61;&#116; ntu &#x64;&#111;&#x74; edu &#x64;&#111;&#x74; sg</strong>
<pre class='note'>static void zend_ini_do_op(char type, zval *result, zval *op1, zval *op2)
{
	int i_result;
	int i_op1, i_op2;
	char str_result[MAX_LENGTH_OF_LONG];

On the mentioned Windows build, checking the following two:

bp !php5ts+436f0     // ini_parse() 
bp !php5ts+375d20    // zend_ini_do_op()

Stack cookie protection is on, with canary store in [ebp-4]. The mitigation re-ordered the 4-byte aligned char array str_result to be next to the canary, starting at [ebp-10h]. When the overflow occurred, the 1-byte '\0' just occupied the 1-byte padding. Therefore it does not affect this build.

When mitigation is not in place, or the string is not aligned to 4-byte, it may cause an immediate DoS (cookie corruption); or 1-byte of ebp (no stack smash protection).
</pre>
</div><div class='comment type_comment' ><a name="1501032993">&nbsp;</a><strong>[2017-07-26 01:36 UTC] l &#x64;&#111;&#x74; wei &#x61;&#116; ntu &#x64;&#111;&#x74; edu &#x64;&#111;&#x74; sg</strong>
<pre class='note'>CVE-2017-11628 is assigned for this issue.
</pre>
</div><div class='comment type_comment' ><a name="1501033498">&nbsp;</a><strong>[2017-07-26 01:44 UTC] chiuado &#x61;&#116; gmail &#x64;&#111;&#x74; com</strong>
<pre class='note'>Understood, thanks for the clearly explanation!
</pre>
</div><div class='comment type_log' ><a name="1501448368">&nbsp;</a><strong>[2017-07-30 20:59 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-CVE-ID: needed</span>
<span class="added">+CVE-ID: 2017-11628</span>
</div></div></div><div class='comment type_log' ><a name="1502961483">&nbsp;</a><strong>[2017-08-17 09:18 UTC] <a href="//people.php.net/zeev">zeev@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Type: Security</span>
<span class="added">+Type: Bug</span>
</div></div></div><div class='comment type_comment' ><a name="1502961483">&nbsp;</a><strong>[2017-08-17 09:18 UTC] <a href="//people.php.net/zeev">zeev@php.net</a></strong>
<pre class='note'>I'm changing this back to 'Bug'.

When coming to determine whether something is a security issue or not, we have to consider the likelihood of a real world attack vector.  In here, it's low to non-existent - since even in apps that use parse_ini_file() - they do that for their own configuration.  If you're an app admin trying to 'attack' your own deployment, be our guest and succeed.  And if you're a user that installs an app from an untrusted source (that may come bundled with a malicious .ini file) - you have bigger issues than this buffer overflow - as an app from an untrusted source could already do pretty much everything the user credentials allow.  Loading your configuration from a remote untrusted source?  I just don't see that happening.

The only scenario I can think of this can be a security issue, is an app that manages or analyzes uploaded/remote .ini files.  That is such a narrow/theoretical use case I don't think we should pay attention to it.

Perhaps we should add a new 'Security (very minor)' category, or something of the sort - but these sorts of bugs can't be in the same category as, say, a remote vulnerability.
</pre>
</div><div class='comment type_comment' ><a name="1502984498">&nbsp;</a><strong>[2017-08-17 15:41 UTC] l &#x64;&#111;&#x74; wei &#x61;&#116; ntu &#x64;&#111;&#x74; edu &#x64;&#111;&#x74; sg</strong>
<pre class='note'>Normally we audit functions that take external input, as they involve assumptions that could be challenged under certain settings, or the specification. As we see it, this issue does open additional possibilities than just accepting an ini setting or rejecting it. An unprotected ini vector, if requiring lower privilege, could be used to chain with other issues and cross the boundary. You are right this is just theoretical. 

At least I don't see how this is more theoretical than those full bunch of integer overflows triggered by scripting arguments. Blame the inconsistency of your policy handling such issues. We work for free too.
</pre>
</div></div>
        </td>
    </tr>
</table>

<script src='js/util.js'></script>
<script src='https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js'></script>
<script src="js/jquery.cookie.js"></script>
<script>
function do_comment(nd)
{
    $('#comment_filter > .control.active').removeClass("active");
    $(nd).addClass("active");

    $.cookie('history_tab', nd.id, { expires: 365 });

    if (nd.id == 'type_all') {
        $('#comments_view > .comment:hidden').show('slow');
    } else {
        $('#comments_view > .comment').each(function(i) {
            if ($(this).hasClass(nd.id)) {
                $(this).show('slow');
            } else {
                $(this).hide('slow');
            }
        });
    }
    return false;
}
</script>
<table class="foot" cellspacing="0" cellpadding="0">
    <tr>
        <td class="foot-bar" colspan="2">&nbsp;</td>
    </tr>

    <tr>
        <td class="foot-copy">
            <small>
                <a href="https://php.net/"><img src="images/logo-small.gif" align="left" valign="middle" hspace="3" alt="PHP"></a>
                <a href="https://php.net/copyright.php">Copyright &copy; 2001-2021 The PHP Group</a><br>
                All rights reserved.
            </small>
        </td>
        <td class="foot-source">
            <small>Last updated: Sat Oct 30 19:03:34 2021 UTC</small>
        </td>
    </tr>
</table>
</body>
</html>
