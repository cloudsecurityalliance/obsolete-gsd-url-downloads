
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>Waitress &#8212; waitress 2.0.0 documentation</title>
    <link rel="stylesheet" href="_static/pylons.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" type="text/css" href="https://assets.readthedocs.org/static/css/badge_only.css" />
    <script type="text/javascript" id="documentation_options" data-url_root="./" src="_static/documentation_options.js"></script>
    <script type="text/javascript" src="_static/jquery.js"></script>
    <script type="text/javascript" src="_static/underscore.js"></script>
    <script type="text/javascript" src="_static/doctools.js"></script>
    <script type="text/javascript" src="_static/language_data.js"></script>
    <script async="async" type="text/javascript" src="https://assets.readthedocs.org/static/javascript/readthedocs-doc-embed.js"></script>
    <link rel="canonical" href="https://docs.pylonsproject.org/projects/waitress/en/stable/index.html" />
    <link rel="index" title="Index" href="genindex.html" />
    <link rel="search" title="Search" href="search.html" />
    <link rel="next" title="Usage" href="usage.html" />
<link rel="stylesheet" href="//static.pylonsproject.org/fonts/nobile/stylesheet.css" type="text/css" media="screen" charset="utf-8" />
<link rel="stylesheet" href="//static.pylonsproject.org/fonts/neuton/stylesheet.css" type="text/css" media="screen" charset="utf-8" />
<!--[if lte IE 6]>
<link rel="stylesheet" href="_static/ie6.css" type="text/css" media="screen" charset="utf-8" />
<![endif]-->
<link rel="shortcut icon" href="_static/pylons.ico"/>

  
<!-- RTD Extra Head -->

<link rel="stylesheet" href="https://assets.readthedocs.org/static/css/readthedocs-doc-embed.css" type="text/css" />

<script type="application/json" id="READTHEDOCS_DATA">{"ad_free": false, "api_host": "https://readthedocs.org", "build_date": "2021-09-09T02:28:40Z", "builder": "sphinx", "canonical_url": null, "commit": "f41e5982", "docroot": "/docs/", "features": {"docsearch_disabled": false}, "global_analytics_code": "UA-17997319-1", "language": "en", "page": "index", "programming_language": "py", "project": "waitress", "proxied_api_host": "/_", "source_suffix": ".rst", "subprojects": {}, "theme": "pylons", "user_analytics_code": "UA-21146943-2", "version": "latest"}</script>

<!--
Using this variable directly instead of using `JSON.parse` is deprecated.
The READTHEDOCS_DATA global variable will be removed in the future.
-->
<script type="text/javascript">
READTHEDOCS_DATA = JSON.parse(document.getElementById('READTHEDOCS_DATA').innerHTML);
</script>

<script type="text/javascript" src="https://assets.readthedocs.org/static/javascript/readthedocs-analytics.js" async="async"></script>

<!-- end RTD <extrahead> -->
</head><body>






<a href="https://github.com/Pylons/waitress/blob/master/docs/index.rst"><img style="position: absolute; top: 0; right: 0; border: 0;" src="_static/edit-me-on-github.png" alt="Edit me on GitHub"></a>


<div class="header-small">
	
	<div class="logo-small">
		<a href="#">
      		<img class="logo" src="_static/pylons-small.png" alt="Logo"/>
		</a>
  	</div>
</div>

    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             accesskey="I">index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="usage.html" title="Usage"
             accesskey="N">next</a> |</li>
    	<li><a href="#">waitress 2.0.0 documentation</a> &#187;</li> 
      </ul>
    </div>  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body" role="main">
            
  <div class="section" id="waitress">
<span id="index"></span><h1>Waitress<a class="headerlink" href="#waitress" title="Permalink to this headline">¶</a></h1>
<p>Waitress is meant to be a production-quality pure-Python WSGI server with very
acceptable performance. It has no dependencies except ones which live in the
Python standard library. It runs on CPython on Unix and Windows under Python
3.6+. It is also known to run on PyPy 7.3.2 (PyPy3) on UNIX.  It supports
HTTP/1.0 and HTTP/1.1.</p>
<div class="section" id="extended-documentation">
<h2>Extended Documentation<a class="headerlink" href="#extended-documentation" title="Permalink to this headline">¶</a></h2>
<div class="toctree-wrapper compound">
<ul>
<li class="toctree-l1"><a class="reference internal" href="usage.html">Usage</a></li>
<li class="toctree-l1"><a class="reference internal" href="logging.html">Access Logging</a></li>
<li class="toctree-l1"><a class="reference internal" href="reverse-proxy.html">Using Behind a Reverse Proxy</a></li>
<li class="toctree-l1"><a class="reference internal" href="design.html">Design</a></li>
<li class="toctree-l1"><a class="reference internal" href="differences.html">Differences from <code class="docutils literal notranslate"><span class="pre">zope.server</span></code></a></li>
<li class="toctree-l1"><a class="reference internal" href="api.html"><code class="docutils literal notranslate"><span class="pre">waitress</span></code> API</a></li>
<li class="toctree-l1"><a class="reference internal" href="arguments.html">Arguments to <code class="docutils literal notranslate"><span class="pre">waitress.serve</span></code></a></li>
<li class="toctree-l1"><a class="reference internal" href="filewrapper.html">Support for <code class="docutils literal notranslate"><span class="pre">wsgi.file_wrapper</span></code></a></li>
<li class="toctree-l1"><a class="reference internal" href="runner.html">waitress-serve</a></li>
<li class="toctree-l1"><a class="reference internal" href="socket-activation.html">Socket Activation</a></li>
<li class="toctree-l1"><a class="reference internal" href="glossary.html">Glossary</a></li>
</ul>
</div>
</div>
<div class="section" id="change-history">
<h2>Change History<a class="headerlink" href="#change-history" title="Permalink to this headline">¶</a></h2>
</div>
<div class="section" id="next-release">
<h2>Next Release<a class="headerlink" href="#next-release" title="Permalink to this headline">¶</a></h2>
<ul>
<li><p class="first">Add REQUEST_URI to the WSGI environment.</p>
<p>REQUEST_URI is similar to <code class="docutils literal notranslate"><span class="pre">request_uri</span></code> in nginx. It is a string that
contains the request path before separating the query string and
decoding <code class="docutils literal notranslate"><span class="pre">%</span></code>-escaped characters.</p>
</li>
</ul>
</div>
<div class="section" id="id1">
<h2>2.0.0 (2021-03-07)<a class="headerlink" href="#id1" title="Permalink to this headline">¶</a></h2>
<div class="section" id="friendly-reminder">
<h3>Friendly Reminder<a class="headerlink" href="#friendly-reminder" title="Permalink to this headline">¶</a></h3>
<p>This release still contains a variety of deprecation notices about defaults
that can be set for a variety of options.</p>
<p>Please note that this is your last warning, and you should update your
configuration if you do NOT want to use the new defaults.</p>
<p>See the arguments documentation page for all supported options, and pay
attention to the warnings:</p>
<p><a class="reference external" href="https://docs.pylonsproject.org/projects/waitress/en/stable/arguments.html">https://docs.pylonsproject.org/projects/waitress/en/stable/arguments.html</a></p>
<p>Without further ado, here's a short list of great changes thanks to our
contributors!</p>
</div>
<div class="section" id="bugfixes-features">
<h3>Bugfixes/Features<a class="headerlink" href="#bugfixes-features" title="Permalink to this headline">¶</a></h3>
<ul>
<li><p class="first">Fix a crash on startup when listening to multiple interfaces.
See <a class="reference external" href="https://github.com/Pylons/waitress/pull/332">https://github.com/Pylons/waitress/pull/332</a></p>
</li>
<li><p class="first">Waitress no longer attempts to guess at what the <code class="docutils literal notranslate"><span class="pre">server_name</span></code> should be for
a listen socket, instead it always use a new adjustment/argument named
<code class="docutils literal notranslate"><span class="pre">server_name</span></code>.</p>
<p>Please see the documentation for <code class="docutils literal notranslate"><span class="pre">server_name</span></code> in
<a class="reference external" href="https://docs.pylonsproject.org/projects/waitress/en/latest/arguments.html">https://docs.pylonsproject.org/projects/waitress/en/latest/arguments.html</a> and
see <a class="reference external" href="https://github.com/Pylons/waitress/pull/329">https://github.com/Pylons/waitress/pull/329</a></p>
</li>
<li><p class="first">Allow tasks to notice if the client disconnected.</p>
<p>This inserts a callable <code class="docutils literal notranslate"><span class="pre">waitress.client_disconnected</span></code> into the environment
that allows the task to check if the client disconnected while waiting for
the response at strategic points in the execution and to cancel the
operation.</p>
<p>It requires setting the new adjustment <code class="docutils literal notranslate"><span class="pre">channel_request_lookahead</span></code> to a value
larger than 0, which continues to read requests from a channel even if a
request is already being processed on that channel, up to the given count,
since a client disconnect is detected by reading from a readable socket and
receiving an empty result.</p>
<p>See <a class="reference external" href="https://github.com/Pylons/waitress/pull/310">https://github.com/Pylons/waitress/pull/310</a></p>
</li>
<li><p class="first">Drop Python 2.7 and 3.5 support</p>
</li>
<li><p class="first">The server now issues warning output when it there are enough open
connections (controlled by &quot;connection_limit&quot;), that it is no longer
accepting new connections. This situation was previously difficult to
diagnose.
See <a class="reference external" href="https://github.com/Pylons/waitress/pull/322">https://github.com/Pylons/waitress/pull/322</a></p>
</li>
</ul>
</div>
</div>
<div class="section" id="id2">
<h2>1.4.4 (2020-06-01)<a class="headerlink" href="#id2" title="Permalink to this headline">¶</a></h2>
<ul>
<li><p class="first">Fix an issue with keep-alive connections in which memory usage was higher
than expected because output buffers were being reused across requests on
a long-lived connection and each buffer would not be freed until it was full
or the connection was closed. Buffers are now rotated per-request to
stabilize their behavior.</p>
<p>See <a class="reference external" href="https://github.com/Pylons/waitress/pull/300">https://github.com/Pylons/waitress/pull/300</a></p>
</li>
<li><p class="first">Waitress threads have been updated to contain their thread number. This will
allow loggers that use that information to print the thread that the log is
coming from.</p>
<p>See <a class="reference external" href="https://github.com/Pylons/waitress/pull/302">https://github.com/Pylons/waitress/pull/302</a></p>
</li>
</ul>
</div>
<div class="section" id="id3">
<h2>1.4.3 (2020-02-02)<a class="headerlink" href="#id3" title="Permalink to this headline">¶</a></h2>
<div class="section" id="security-fixes">
<h3>Security Fixes<a class="headerlink" href="#security-fixes" title="Permalink to this headline">¶</a></h3>
<ul>
<li><p class="first">In Waitress version 1.4.2 a new regular expression was added to validate the
headers that Waitress receives to make sure that it matches RFC7230.
Unfortunately the regular expression was written in a way that with invalid
input it leads to catastrophic backtracking which allows for a Denial of
Service and CPU usage going to a 100%.</p>
<p>This was reported by Fil Zembowicz to the Pylons Project. Please see
<a class="reference external" href="https://github.com/Pylons/waitress/security/advisories/GHSA-73m2-3pwg-5fgc">https://github.com/Pylons/waitress/security/advisories/GHSA-73m2-3pwg-5fgc</a>
for more information.</p>
</li>
</ul>
</div>
</div>
<div class="section" id="id4">
<h2>1.4.2 (2020-01-02)<a class="headerlink" href="#id4" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id5">
<h3>Security Fixes<a class="headerlink" href="#id5" title="Permalink to this headline">¶</a></h3>
<ul>
<li><p class="first">This is a follow-up to the fix introduced in 1.4.1 to tighten up the way
Waitress strips whitespace from header values. This makes sure Waitress won't
accidentally treat non-printable characters as whitespace and lead to a
potental HTTP request smuggling/splitting security issue.</p>
<p>Thanks to ZeddYu Lu for the extra test cases.</p>
<p>Please see the security advisory for more information:
<a class="reference external" href="https://github.com/Pylons/waitress/security/advisories/GHSA-m5ff-3wj3-8ph4">https://github.com/Pylons/waitress/security/advisories/GHSA-m5ff-3wj3-8ph4</a></p>
<p>CVE-ID: CVE-2019-16789</p>
</li>
</ul>
</div>
<div class="section" id="bugfixes">
<h3>Bugfixes<a class="headerlink" href="#bugfixes" title="Permalink to this headline">¶</a></h3>
<ul>
<li><p class="first">Updated the regex used to validate header-field content to match the errata
that was published for RFC7230.</p>
<p>See: <a class="reference external" href="https://www.rfc-editor.org/errata_search.php?rfc=7230&amp;eid=4189">https://www.rfc-editor.org/errata_search.php?rfc=7230&amp;eid=4189</a></p>
</li>
</ul>
</div>
</div>
<div class="section" id="id6">
<h2>1.4.1 (2019-12-24)<a class="headerlink" href="#id6" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id7">
<h3>Security Fixes<a class="headerlink" href="#id7" title="Permalink to this headline">¶</a></h3>
<ul>
<li><p class="first">Waitress did not properly validate that the HTTP headers it received were
properly formed, thereby potentially allowing a front-end server to treat a
request different from Waitress. This could lead to HTTP request
smuggling/splitting.</p>
<p>Please see the security advisory for more information:
<a class="reference external" href="https://github.com/Pylons/waitress/security/advisories/GHSA-m5ff-3wj3-8ph4">https://github.com/Pylons/waitress/security/advisories/GHSA-m5ff-3wj3-8ph4</a></p>
<p>CVE-ID: CVE-2019-16789</p>
</li>
</ul>
</div>
</div>
<div class="section" id="id8">
<h2>1.4.0 (2019-12-20)<a class="headerlink" href="#id8" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id9">
<h3>Bugfixes<a class="headerlink" href="#id9" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Waitress used to slam the door shut on HTTP pipelined requests without
setting the <code class="docutils literal notranslate"><span class="pre">Connection:</span> <span class="pre">close</span></code> header as appropriate in the response. This
is of course not very friendly. Waitress now explicitly sets the header when
responding with an internally generated error such as 400 Bad Request or 500
Internal Server Error to notify the remote client that it will be closing the
connection after the response is sent.</li>
<li>Waitress no longer allows any spaces to exist between the header field-name
and the colon. While waitress did not strip the space and thereby was not
vulnerable to any potential header field-name confusion, it should have sent
back a 400 Bad Request. See <a class="reference external" href="https://github.com/Pylons/waitress/issues/273">https://github.com/Pylons/waitress/issues/273</a></li>
</ul>
</div>
<div class="section" id="id10">
<h3>Security Fixes<a class="headerlink" href="#id10" title="Permalink to this headline">¶</a></h3>
<ul>
<li><p class="first">Waitress implemented a &quot;MAY&quot; part of the RFC7230
(<a class="reference external" href="https://tools.ietf.org/html/rfc7230#section-3.5">https://tools.ietf.org/html/rfc7230#section-3.5</a>) which states:</p>
<blockquote>
<div><p>Although the line terminator for the start-line and header fields is
the sequence CRLF, a recipient MAY recognize a single LF as a line
terminator and ignore any preceding CR.</p>
</div></blockquote>
<p>Unfortunately if a front-end server does not parse header fields with an LF
the same way as it does those with a CRLF it can lead to the front-end and
the back-end server parsing the same HTTP message in two different ways. This
can lead to a potential for HTTP request smuggling/splitting whereby Waitress
may see two requests while the front-end server only sees a single HTTP
message.</p>
<p>For more information I can highly recommend the blog post by ZeddYu Lu
<a class="reference external" href="https://blog.zeddyu.info/2019/12/08/HTTP-Smuggling-en/">https://blog.zeddyu.info/2019/12/08/HTTP-Smuggling-en/</a></p>
<p>Please see the security advisory for more information:
<a class="reference external" href="https://github.com/Pylons/waitress/security/advisories/GHSA-pg36-wpm5-g57p">https://github.com/Pylons/waitress/security/advisories/GHSA-pg36-wpm5-g57p</a></p>
<p>CVE-ID: CVE-2019-16785</p>
</li>
<li><p class="first">Waitress used to treat LF the same as CRLF in <code class="docutils literal notranslate"><span class="pre">Transfer-Encoding:</span> <span class="pre">chunked</span></code>
requests, while the maintainer doesn't believe this could lead to a security
issue, this is no longer supported and all chunks are now validated to be
properly framed with CRLF as required by RFC7230.</p>
</li>
<li><p class="first">Waitress now validates that the <code class="docutils literal notranslate"><span class="pre">Transfer-Encoding</span></code> header contains only
transfer codes that it is able to decode. At the moment that includes the
only valid header value being <code class="docutils literal notranslate"><span class="pre">chunked</span></code>.</p>
<p>That means that if the following header is sent:</p>
<p><code class="docutils literal notranslate"><span class="pre">Transfer-Encoding:</span> <span class="pre">gzip,</span> <span class="pre">chunked</span></code></p>
<p>Waitress will send back a 501 Not Implemented with an error message stating
as such, as while Waitress supports <code class="docutils literal notranslate"><span class="pre">chunked</span></code> encoding it does not support
<code class="docutils literal notranslate"><span class="pre">gzip</span></code> and it is unable to pass that to the underlying WSGI environment
correctly.</p>
<p>Waitress DOES NOT implement support for <code class="docutils literal notranslate"><span class="pre">Transfer-Encoding:</span> <span class="pre">identity</span></code>
eventhough <code class="docutils literal notranslate"><span class="pre">identity</span></code> was valid in RFC2616, it was removed in RFC7230.
Please update your clients to remove the <code class="docutils literal notranslate"><span class="pre">Transfer-Encoding</span></code> header if the
only transfer coding is <code class="docutils literal notranslate"><span class="pre">identity</span></code> or update your client to use
<code class="docutils literal notranslate"><span class="pre">Transfer-Encoding:</span> <span class="pre">chunked</span></code> instead of <code class="docutils literal notranslate"><span class="pre">Transfer-Encoding:</span> <span class="pre">identity,</span>
<span class="pre">chunked</span></code>.</p>
<p>Please see the security advisory for more information:
<a class="reference external" href="https://github.com/Pylons/waitress/security/advisories/GHSA-g2xc-35jw-c63p">https://github.com/Pylons/waitress/security/advisories/GHSA-g2xc-35jw-c63p</a></p>
<p>CVE-ID: CVE-2019-16786</p>
</li>
<li><p class="first">While validating the <code class="docutils literal notranslate"><span class="pre">Transfer-Encoding</span></code> header, Waitress now properly
handles line-folded <code class="docutils literal notranslate"><span class="pre">Transfer-Encoding</span></code> headers or those that contain
multiple comma seperated values. This closes a potential issue where a
front-end server may treat the request as being a chunked request (and thus
ignoring the Content-Length) and Waitress using the Content-Length as it was
looking for the single value <code class="docutils literal notranslate"><span class="pre">chunked</span></code> and did not support comma seperated
values.</p>
</li>
<li><p class="first">Waitress used to explicitly set the Content-Length header to 0 if it was
unable to parse it as an integer (for example if the Content-Length header
was sent twice (and thus folded together), or was invalid) thereby allowing
for a potential request to be split and treated as two requests by HTTP
pipelining support in Waitress. If Waitress is now unable to parse the
Content-Length header, a 400 Bad Request is sent back to the client.</p>
<p>Please see the security advisory for more information:
<a class="reference external" href="https://github.com/Pylons/waitress/security/advisories/GHSA-4ppp-gpcr-7qf6">https://github.com/Pylons/waitress/security/advisories/GHSA-4ppp-gpcr-7qf6</a></p>
</li>
</ul>
</div>
</div>
<div class="section" id="id11">
<h2>1.3.1 (2019-08-27)<a class="headerlink" href="#id11" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id12">
<h3>Bugfixes<a class="headerlink" href="#id12" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Waitress won't accidentally throw away part of the path if it starts with a
double slash (<code class="docutils literal notranslate"><span class="pre">GET</span> <span class="pre">//testing/whatever</span> <span class="pre">HTTP/1.0</span></code>). WSGI applications will
now receive a <code class="docutils literal notranslate"><span class="pre">PATH_INFO</span></code> in the environment that contains
<code class="docutils literal notranslate"><span class="pre">//testing/whatever</span></code> as required. See
<a class="reference external" href="https://github.com/Pylons/waitress/issues/260">https://github.com/Pylons/waitress/issues/260</a> and
<a class="reference external" href="https://github.com/Pylons/waitress/pull/261">https://github.com/Pylons/waitress/pull/261</a></li>
</ul>
</div>
</div>
<div class="section" id="id13">
<h2>1.3.0 (2019-04-22)<a class="headerlink" href="#id13" title="Permalink to this headline">¶</a></h2>
<div class="section" id="deprecations">
<h3>Deprecations<a class="headerlink" href="#deprecations" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>The <code class="docutils literal notranslate"><span class="pre">send_bytes</span></code> adjustment now defaults to <code class="docutils literal notranslate"><span class="pre">1</span></code> and is deprecated
pending removal in a future release.
and <a class="reference external" href="https://github.com/Pylons/waitress/pull/246">https://github.com/Pylons/waitress/pull/246</a></li>
</ul>
</div>
<div class="section" id="features">
<h3>Features<a class="headerlink" href="#features" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Add a new <code class="docutils literal notranslate"><span class="pre">outbuf_high_watermark</span></code> adjustment which is used to apply
backpressure on the <code class="docutils literal notranslate"><span class="pre">app_iter</span></code> to avoid letting it spin faster than data
can be written to the socket. This stabilizes responses that iterate quickly
with a lot of data.
See <a class="reference external" href="https://github.com/Pylons/waitress/pull/242">https://github.com/Pylons/waitress/pull/242</a></li>
<li>Stop early and close the <code class="docutils literal notranslate"><span class="pre">app_iter</span></code> when attempting to write to a closed
socket due to a client disconnect. This should notify a long-lived streaming
response when a client hangs up.
See <a class="reference external" href="https://github.com/Pylons/waitress/pull/238">https://github.com/Pylons/waitress/pull/238</a>
and <a class="reference external" href="https://github.com/Pylons/waitress/pull/240">https://github.com/Pylons/waitress/pull/240</a>
and <a class="reference external" href="https://github.com/Pylons/waitress/pull/241">https://github.com/Pylons/waitress/pull/241</a></li>
<li>Adjust the flush to output <code class="docutils literal notranslate"><span class="pre">SO_SNDBUF</span></code> bytes instead of whatever was
set in the <code class="docutils literal notranslate"><span class="pre">send_bytes</span></code> adjustment. <code class="docutils literal notranslate"><span class="pre">send_bytes</span></code> now only controls how
much waitress will buffer internally before flushing to the kernel, whereas
previously it used to also throttle how much data was sent to the kernel.
This change enables a streaming <code class="docutils literal notranslate"><span class="pre">app_iter</span></code> containing small chunks to
still be flushed efficiently.
See <a class="reference external" href="https://github.com/Pylons/waitress/pull/246">https://github.com/Pylons/waitress/pull/246</a></li>
</ul>
</div>
<div class="section" id="id14">
<h3>Bugfixes<a class="headerlink" href="#id14" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Upon receiving a request that does not include HTTP/1.0 or HTTP/1.1 we will
no longer set the version to the string value &quot;None&quot;. See
<a class="reference external" href="https://github.com/Pylons/waitress/pull/252">https://github.com/Pylons/waitress/pull/252</a> and
<a class="reference external" href="https://github.com/Pylons/waitress/issues/110">https://github.com/Pylons/waitress/issues/110</a></li>
<li>When a client closes a socket unexpectedly there was potential for memory
leaks in which data was written to the buffers after they were closed,
causing them to reopen.
See <a class="reference external" href="https://github.com/Pylons/waitress/pull/239">https://github.com/Pylons/waitress/pull/239</a></li>
<li>Fix the queue depth warnings to only show when all threads are busy.
See <a class="reference external" href="https://github.com/Pylons/waitress/pull/243">https://github.com/Pylons/waitress/pull/243</a>
and <a class="reference external" href="https://github.com/Pylons/waitress/pull/247">https://github.com/Pylons/waitress/pull/247</a></li>
<li>Trigger the <code class="docutils literal notranslate"><span class="pre">app_iter</span></code> to close as part of shutdown. This will only be
noticeable for users of the internal server api. In more typical operations
the server will die before benefiting from these changes.
See <a class="reference external" href="https://github.com/Pylons/waitress/pull/245">https://github.com/Pylons/waitress/pull/245</a></li>
<li>Fix a bug in which a streaming <code class="docutils literal notranslate"><span class="pre">app_iter</span></code> may never cleanup data that has
already been sent. This would cause buffers in waitress to grow without
bounds. These buffers now properly rotate and release their data.
See <a class="reference external" href="https://github.com/Pylons/waitress/pull/242">https://github.com/Pylons/waitress/pull/242</a></li>
<li>Fix a bug in which non-seekable subclasses of <code class="docutils literal notranslate"><span class="pre">io.IOBase</span></code> would trigger
an exception when passed to the <code class="docutils literal notranslate"><span class="pre">wsgi.file_wrapper</span></code> callback.
See <a class="reference external" href="https://github.com/Pylons/waitress/pull/249">https://github.com/Pylons/waitress/pull/249</a></li>
</ul>
</div>
</div>
<div class="section" id="id15">
<h2>1.2.1 (2019-01-25)<a class="headerlink" href="#id15" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id16">
<h3>Bugfixes<a class="headerlink" href="#id16" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>When given an IPv6 address in <code class="docutils literal notranslate"><span class="pre">X-Forwarded-For</span></code> or <code class="docutils literal notranslate"><span class="pre">Forwarded</span> <span class="pre">for=</span></code>
waitress was placing the IP address in <code class="docutils literal notranslate"><span class="pre">REMOTE_ADDR</span></code> with brackets:
<code class="docutils literal notranslate"><span class="pre">[2001:db8::0]</span></code>, this does not match the requirements in the CGI spec which
<code class="docutils literal notranslate"><span class="pre">REMOTE_ADDR</span></code> was lifted from. Waitress will now place the bare IPv6
address in <code class="docutils literal notranslate"><span class="pre">REMOTE_ADDR</span></code>: <code class="docutils literal notranslate"><span class="pre">2001:db8::0</span></code>. See
<a class="reference external" href="https://github.com/Pylons/waitress/pull/232">https://github.com/Pylons/waitress/pull/232</a> and
<a class="reference external" href="https://github.com/Pylons/waitress/issues/230">https://github.com/Pylons/waitress/issues/230</a></li>
</ul>
</div>
</div>
<div class="section" id="id17">
<h2>1.2.0 (2019-01-15)<a class="headerlink" href="#id17" title="Permalink to this headline">¶</a></h2>
<p>No changes since the last beta release. Enjoy Waitress!</p>
</div>
<div class="section" id="b3-2019-01-07">
<h2>1.2.0b3 (2019-01-07)<a class="headerlink" href="#b3-2019-01-07" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id18">
<h3>Bugfixes<a class="headerlink" href="#id18" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Modified <code class="docutils literal notranslate"><span class="pre">clear_untrusted_proxy_headers</span></code> to be usable without a
<code class="docutils literal notranslate"><span class="pre">trusted_proxy</span></code>.
<a class="reference external" href="https://github.com/Pylons/waitress/pull/228">https://github.com/Pylons/waitress/pull/228</a></li>
<li>Modified <code class="docutils literal notranslate"><span class="pre">trusted_proxy_count</span></code> to error when used without a
<code class="docutils literal notranslate"><span class="pre">trusted_proxy</span></code>.
<a class="reference external" href="https://github.com/Pylons/waitress/pull/228">https://github.com/Pylons/waitress/pull/228</a></li>
</ul>
</div>
</div>
<div class="section" id="b2-2019-02-02">
<h2>1.2.0b2 (2019-02-02)<a class="headerlink" href="#b2-2019-02-02" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id19">
<h3>Bugfixes<a class="headerlink" href="#id19" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Fixed logic to no longer warn on writes where the output is required to have
a body but there may not be any data to be written. Solves issue posted on
the Pylons Project mailing list with 1.2.0b1.</li>
</ul>
</div>
</div>
<div class="section" id="b1-2018-12-31">
<h2>1.2.0b1 (2018-12-31)<a class="headerlink" href="#b1-2018-12-31" title="Permalink to this headline">¶</a></h2>
<p>Happy New Year!</p>
<div class="section" id="id20">
<h3>Features<a class="headerlink" href="#id20" title="Permalink to this headline">¶</a></h3>
<ul>
<li><p class="first">Setting the <code class="docutils literal notranslate"><span class="pre">trusted_proxy</span></code> setting to <code class="docutils literal notranslate"><span class="pre">'*'</span></code> (wildcard) will allow all
upstreams to be considered trusted proxies, thereby allowing services behind
Cloudflare/ELBs to function correctly whereby there may not be a singular IP
address that requests are received from.</p>
<p>Using this setting is potentially dangerous if your server is also available
from anywhere on the internet, and further protections should be used to lock
down access to Waitress. See <a class="reference external" href="https://github.com/Pylons/waitress/pull/224">https://github.com/Pylons/waitress/pull/224</a></p>
</li>
<li><p class="first">Waitress has increased its support of the X-Forwarded-* headers and includes
Forwarded (RFC7239) support. This may be used to allow proxy servers to
influence the WSGI environment. See
<a class="reference external" href="https://github.com/Pylons/waitress/pull/209">https://github.com/Pylons/waitress/pull/209</a></p>
<p>This also provides a new security feature when using Waitress behind a proxy
in that it is possible to remove untrusted proxy headers thereby making sure
that downstream WSGI applications don't accidentally use those proxy headers
to make security decisions.</p>
<p>The documentation has more information, see the following new arguments:</p>
<ul class="simple">
<li>trusted_proxy_count</li>
<li>trusted_proxy_headers</li>
<li>clear_untrusted_proxy_headers</li>
<li>log_untrusted_proxy_headers (useful for debugging)</li>
</ul>
<p>Be aware that the defaults for these are currently backwards compatible with
older versions of Waitress, this will change in a future release of waitress.
If you expect to need this behaviour please explicitly set these variables in
your configuration, or pin this version of waitress.</p>
<p>Documentation:
<a class="reference external" href="https://docs.pylonsproject.org/projects/waitress/en/latest/reverse-proxy.html">https://docs.pylonsproject.org/projects/waitress/en/latest/reverse-proxy.html</a></p>
</li>
<li><p class="first">Waitress can now accept a list of sockets that are already pre-bound rather
than creating its own to allow for socket activation. Support for init
systems/other systems that create said activated sockets is not included. See
<a class="reference external" href="https://github.com/Pylons/waitress/pull/215">https://github.com/Pylons/waitress/pull/215</a></p>
</li>
<li><p class="first">Server header can be omitted by specifying <code class="docutils literal notranslate"><span class="pre">ident=None</span></code> or <code class="docutils literal notranslate"><span class="pre">ident=''</span></code>.
See <a class="reference external" href="https://github.com/Pylons/waitress/pull/187">https://github.com/Pylons/waitress/pull/187</a></p>
</li>
</ul>
</div>
<div class="section" id="id21">
<h3>Bugfixes<a class="headerlink" href="#id21" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Waitress will no longer send Transfer-Encoding or Content-Length for 1xx,
204, or 304 responses, and will completely ignore any message body sent by
the WSGI application, making sure to follow the HTTP standard. See
<a class="reference external" href="https://github.com/Pylons/waitress/pull/166">https://github.com/Pylons/waitress/pull/166</a>,
<a class="reference external" href="https://github.com/Pylons/waitress/issues/165">https://github.com/Pylons/waitress/issues/165</a>,
<a class="reference external" href="https://github.com/Pylons/waitress/issues/152">https://github.com/Pylons/waitress/issues/152</a>, and
<a class="reference external" href="https://github.com/Pylons/waitress/pull/202">https://github.com/Pylons/waitress/pull/202</a></li>
</ul>
</div>
<div class="section" id="compatibility">
<h3>Compatibility<a class="headerlink" href="#compatibility" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Waitress has now &quot;vendored&quot; asyncore into itself as <code class="docutils literal notranslate"><span class="pre">waitress.wasyncore</span></code>.
This is to cope with the eventuality that asyncore will be removed from
the Python standard library in 3.8 or so.</li>
</ul>
</div>
<div class="section" id="documentation">
<h3>Documentation<a class="headerlink" href="#documentation" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Bring in documentation of paste.translogger from Pyramid. Reorganize and
clean up documentation. See
<a class="reference external" href="https://github.com/Pylons/waitress/pull/205">https://github.com/Pylons/waitress/pull/205</a>
<a class="reference external" href="https://github.com/Pylons/waitress/pull/70">https://github.com/Pylons/waitress/pull/70</a>
<a class="reference external" href="https://github.com/Pylons/waitress/pull/206">https://github.com/Pylons/waitress/pull/206</a></li>
</ul>
</div>
</div>
<div class="section" id="id22">
<h2>1.1.0 (2017-10-10)<a class="headerlink" href="#id22" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id23">
<h3>Features<a class="headerlink" href="#id23" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Waitress now has a __main__ and thus may be called with <code class="docutils literal notranslate"><span class="pre">python</span> <span class="pre">-mwaitress</span></code></li>
</ul>
</div>
<div class="section" id="id24">
<h3>Bugfixes<a class="headerlink" href="#id24" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Waitress no longer allows lowercase HTTP verbs. This change was made to fall
in line with most HTTP servers. See <a class="reference external" href="https://github.com/Pylons/waitress/pull/170">https://github.com/Pylons/waitress/pull/170</a></li>
<li>When receiving non-ascii bytes in the request URL, waitress will no longer
abruptly close the connection, instead returning a 400 Bad Request. See
<a class="reference external" href="https://github.com/Pylons/waitress/pull/162">https://github.com/Pylons/waitress/pull/162</a> and
<a class="reference external" href="https://github.com/Pylons/waitress/issues/64">https://github.com/Pylons/waitress/issues/64</a></li>
</ul>
</div>
</div>
<div class="section" id="id25">
<h2>1.0.2 (2017-02-04)<a class="headerlink" href="#id25" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id26">
<h3>Features<a class="headerlink" href="#id26" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Python 3.6 is now officially supported in Waitress</li>
</ul>
</div>
<div class="section" id="id27">
<h3>Bugfixes<a class="headerlink" href="#id27" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Add a work-around for libc issue on Linux not following the documented
standards. If getnameinfo() fails because of DNS not being available it
should return the IP address instead of the reverse DNS entry, however
instead getnameinfo() raises. We catch this, and ask getnameinfo()
for the same information again, explicitly asking for IP address instead of
reverse DNS hostname. See <a class="reference external" href="https://github.com/Pylons/waitress/issues/149">https://github.com/Pylons/waitress/issues/149</a> and
<a class="reference external" href="https://github.com/Pylons/waitress/pull/153">https://github.com/Pylons/waitress/pull/153</a></li>
</ul>
</div>
</div>
<div class="section" id="id28">
<h2>1.0.1 (2016-10-22)<a class="headerlink" href="#id28" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id29">
<h3>Bugfixes<a class="headerlink" href="#id29" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>IPv6 support on Windows was broken due to missing constants in the socket
module. This has been resolved by setting the constants on Windows if they
are missing. See <a class="reference external" href="https://github.com/Pylons/waitress/issues/138">https://github.com/Pylons/waitress/issues/138</a></li>
<li>A ValueError was raised on Windows when passing a string for the port, on
Windows in Python 2 using service names instead of port numbers doesn't work
with <cite>getaddrinfo</cite>. This has been resolved by attempting to convert the port
number to an integer, if that fails a ValueError will be raised. See
<a class="reference external" href="https://github.com/Pylons/waitress/issues/139">https://github.com/Pylons/waitress/issues/139</a></li>
</ul>
</div>
</div>
<div class="section" id="id30">
<h2>1.0.0 (2016-08-31)<a class="headerlink" href="#id30" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id31">
<h3>Bugfixes<a class="headerlink" href="#id31" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Removed <cite>AI_ADDRCONFIG</cite> from the call to <cite>getaddrinfo</cite>, this resolves an
issue whereby <cite>getaddrinfo</cite> wouldn't return any addresses to <cite>bind</cite> to on
hosts where there is no internet connection but localhost is requested to be
bound to. See <a class="reference external" href="https://github.com/Pylons/waitress/issues/131">https://github.com/Pylons/waitress/issues/131</a> for more
information.</li>
</ul>
</div>
<div class="section" id="id32">
<h3>Deprecations<a class="headerlink" href="#id32" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Python 2.6 is no longer supported.</li>
</ul>
</div>
<div class="section" id="id33">
<h3>Features<a class="headerlink" href="#id33" title="Permalink to this headline">¶</a></h3>
<ul>
<li><p class="first">IPv6 support</p>
</li>
<li><p class="first">Waitress is now able to listen on multiple sockets, including IPv4 and IPv6.
Instead of passing in a host/port combination you now provide waitress with a
space delineated list, and it will create as many sockets as required.</p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">waitress</span> <span class="kn">import</span> <span class="n">serve</span>
<span class="n">serve</span><span class="p">(</span><span class="n">wsgiapp</span><span class="p">,</span> <span class="n">listen</span><span class="o">=</span><span class="s1">&#39;0.0.0.0:8080 [::]:9090 *:6543&#39;</span><span class="p">)</span>
</pre></div>
</div>
</li>
</ul>
</div>
<div class="section" id="security">
<h3>Security<a class="headerlink" href="#security" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Waitress will now drop HTTP headers that contain an underscore in the key
when received from a client. This is to stop any possible underscore/dash
conflation that may lead to security issues. See
<a class="reference external" href="https://github.com/Pylons/waitress/pull/80">https://github.com/Pylons/waitress/pull/80</a> and
<a class="reference external" href="https://www.djangoproject.com/weblog/2015/jan/13/security/">https://www.djangoproject.com/weblog/2015/jan/13/security/</a></li>
</ul>
</div>
</div>
<div class="section" id="id34">
<h2>0.9.0 (2016-04-15)<a class="headerlink" href="#id34" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id35">
<h3>Deprecations<a class="headerlink" href="#id35" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Python 3.2 is no longer supported by Waitress.</li>
<li>Python 2.6 will no longer be supported by Waitress in future releases.</li>
</ul>
</div>
<div class="section" id="security-protections">
<h3>Security/Protections<a class="headerlink" href="#security-protections" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Building on the changes made in pull request 117, add in checking for line
feed/carriage return HTTP Response Splitting in the status line, as well as
the key of a header. See <a class="reference external" href="https://github.com/Pylons/waitress/pull/124">https://github.com/Pylons/waitress/pull/124</a> and
<a class="reference external" href="https://github.com/Pylons/waitress/issues/122">https://github.com/Pylons/waitress/issues/122</a>.</li>
<li>Waitress will no longer accept headers or status lines with
newline/carriage returns in them, thereby disallowing HTTP Response
Splitting. See <a class="reference external" href="https://github.com/Pylons/waitress/issues/117">https://github.com/Pylons/waitress/issues/117</a> for
more information, as well as
<a class="reference external" href="https://www.owasp.org/index.php/HTTP_Response_Splitting">https://www.owasp.org/index.php/HTTP_Response_Splitting</a>.</li>
</ul>
</div>
<div class="section" id="id36">
<h3>Bugfixes<a class="headerlink" href="#id36" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>FileBasedBuffer and more important ReadOnlyFileBasedBuffer no longer report
False when tested with bool(), instead always returning True, and becoming
more iterator like.
See: <a class="reference external" href="https://github.com/Pylons/waitress/pull/82">https://github.com/Pylons/waitress/pull/82</a> and
<a class="reference external" href="https://github.com/Pylons/waitress/issues/76">https://github.com/Pylons/waitress/issues/76</a></li>
<li>Call prune() on the output buffer at the end of a request so that it doesn't
continue to grow without bounds. See
<a class="reference external" href="https://github.com/Pylons/waitress/issues/111">https://github.com/Pylons/waitress/issues/111</a> for more information.</li>
</ul>
</div>
</div>
<div class="section" id="id37">
<h2>0.8.10 (2015-09-02)<a class="headerlink" href="#id37" title="Permalink to this headline">¶</a></h2>
<ul class="simple">
<li>Add support for Python 3.4, 3.5b2, and PyPy3.</li>
<li>Use a nonglobal asyncore socket map by default, trying to prevent conflicts
with apps and libs that use the asyncore global socket map ala
<a class="reference external" href="https://github.com/Pylons/waitress/issues/63">https://github.com/Pylons/waitress/issues/63</a>.  You can get the old
use-global-socket-map behavior back by passing <code class="docutils literal notranslate"><span class="pre">asyncore.socket_map</span></code> to the
<code class="docutils literal notranslate"><span class="pre">create_server</span></code> function as the <code class="docutils literal notranslate"><span class="pre">map</span></code> argument.</li>
<li>Waitress violated PEP 3333 with respect to reraising an exception when
<code class="docutils literal notranslate"><span class="pre">start_response</span></code> was called with an <code class="docutils literal notranslate"><span class="pre">exc_info</span></code> argument.  It would
reraise the exception even if no data had been sent to the client.  It now
only reraises the exception if data has actually been sent to the client.
See <a class="reference external" href="https://github.com/Pylons/waitress/pull/52">https://github.com/Pylons/waitress/pull/52</a> and
<a class="reference external" href="https://github.com/Pylons/waitress/issues/51">https://github.com/Pylons/waitress/issues/51</a></li>
<li>Add a <code class="docutils literal notranslate"><span class="pre">docs</span></code> section to tox.ini that, when run, ensures docs can be built.</li>
<li>If an <code class="docutils literal notranslate"><span class="pre">application</span></code> value of <code class="docutils literal notranslate"><span class="pre">None</span></code> is supplied to the <code class="docutils literal notranslate"><span class="pre">create_server</span></code>
constructor function, a ValueError is now raised eagerly instead of an error
occuring during runtime.  See <a class="reference external" href="https://github.com/Pylons/waitress/pull/60">https://github.com/Pylons/waitress/pull/60</a></li>
<li>Fix parsing of multi-line (folded) headers.
See <a class="reference external" href="https://github.com/Pylons/waitress/issues/53">https://github.com/Pylons/waitress/issues/53</a> and
<a class="reference external" href="https://github.com/Pylons/waitress/pull/90">https://github.com/Pylons/waitress/pull/90</a></li>
<li>Switch from the low level Python thread/_thread module to the threading
module.</li>
<li>Improved exception information should module import go awry.</li>
</ul>
</div>
<div class="section" id="id38">
<h2>0.8.9 (2014-05-16)<a class="headerlink" href="#id38" title="Permalink to this headline">¶</a></h2>
<ul class="simple">
<li>Fix tests under Windows.  NB: to run tests under Windows, you cannot run
&quot;setup.py test&quot; or &quot;setup.py nosetests&quot;.  Instead you must run <code class="docutils literal notranslate"><span class="pre">python.exe</span>
<span class="pre">-c</span> <span class="pre">&quot;import</span> <span class="pre">nose;</span> <span class="pre">nose.main()&quot;</span></code>.  If you try to run the tests using the
normal method under Windows, each subprocess created by the test suite will
attempt to run the test suite again.  See
<a class="reference external" href="https://github.com/nose-devs/nose/issues/407">https://github.com/nose-devs/nose/issues/407</a> for more information.</li>
<li>Give the WSGI app_iter generated when <code class="docutils literal notranslate"><span class="pre">wsgi.file_wrapper</span></code> is used
(ReadOnlyFileBasedBuffer) a <code class="docutils literal notranslate"><span class="pre">close</span></code> method.  Do not call <code class="docutils literal notranslate"><span class="pre">close</span></code> on an
instance of such a class when it's used as a WSGI app_iter, however.  This is
part of a fix which prevents a leakage of file descriptors; the other part of
the fix was in WebOb
(<a class="reference external" href="https://github.com/Pylons/webob/commit/951a41ce57bd853947f842028bccb500bd5237da">https://github.com/Pylons/webob/commit/951a41ce57bd853947f842028bccb500bd5237da</a>).</li>
<li>Allow trusted proxies to override <code class="docutils literal notranslate"><span class="pre">wsgi.url_scheme</span></code> via a request header,
<code class="docutils literal notranslate"><span class="pre">X_FORWARDED_PROTO</span></code>.  Allows proxies which serve mixed HTTP / HTTPS
requests to control signal which are served as HTTPS.  See
<a class="reference external" href="https://github.com/Pylons/waitress/pull/42">https://github.com/Pylons/waitress/pull/42</a>.</li>
</ul>
</div>
<div class="section" id="id39">
<h2>0.8.8 (2013-11-30)<a class="headerlink" href="#id39" title="Permalink to this headline">¶</a></h2>
<ul class="simple">
<li>Fix some cases where the creation of extremely large output buffers (greater
than 2GB, suspected to be buffers added via <code class="docutils literal notranslate"><span class="pre">wsgi.file_wrapper</span></code>) might
cause an OverflowError on Python 2.  See
<a class="reference external" href="https://github.com/Pylons/waitress/issues/47">https://github.com/Pylons/waitress/issues/47</a>.</li>
<li>When the <code class="docutils literal notranslate"><span class="pre">url_prefix</span></code> adjustment starts with more than one slash, all
slashes except one will be stripped from its beginning.  This differs from
older behavior where more than one leading slash would be preserved in
<code class="docutils literal notranslate"><span class="pre">url_prefix</span></code>.</li>
<li>If a client somehow manages to send an empty path, we no longer convert the
empty path to a single slash in <code class="docutils literal notranslate"><span class="pre">PATH_INFO</span></code>.  Instead, the path remains
empty.  According to RFC 2616 section &quot;5.1.2 Request-URI&quot;, the scenario of a
client sending an empty path is actually not possible because the request URI
portion cannot be empty.</li>
<li>If the <code class="docutils literal notranslate"><span class="pre">url_prefix</span></code> adjustment matches the request path exactly, we now
compute <code class="docutils literal notranslate"><span class="pre">SCRIPT_NAME</span></code> and <code class="docutils literal notranslate"><span class="pre">PATH_INFO</span></code> properly.  Previously, if the
<code class="docutils literal notranslate"><span class="pre">url_prefix</span></code> was <code class="docutils literal notranslate"><span class="pre">/foo</span></code> and the path received from a client was <code class="docutils literal notranslate"><span class="pre">/foo</span></code>,
we would set <em>both</em> <code class="docutils literal notranslate"><span class="pre">SCRIPT_NAME</span></code> and <code class="docutils literal notranslate"><span class="pre">PATH_INFO</span></code> to <code class="docutils literal notranslate"><span class="pre">/foo</span></code>.  This was
incorrect.  Now in such a case we set <code class="docutils literal notranslate"><span class="pre">PATH_INFO</span></code> to the empty string and
we set <code class="docutils literal notranslate"><span class="pre">SCRIPT_NAME</span></code> to <code class="docutils literal notranslate"><span class="pre">/foo</span></code>.  Note that the change we made has no
effect on paths that do not match the <code class="docutils literal notranslate"><span class="pre">url_prefix</span></code> exactly (such as
<code class="docutils literal notranslate"><span class="pre">/foo/bar</span></code>); these continue to operate as they did.  See
<a class="reference external" href="https://github.com/Pylons/waitress/issues/46">https://github.com/Pylons/waitress/issues/46</a></li>
<li>Preserve header ordering of headers with the same name as per RFC 2616.  See
<a class="reference external" href="https://github.com/Pylons/waitress/pull/44">https://github.com/Pylons/waitress/pull/44</a></li>
<li>When waitress receives a <code class="docutils literal notranslate"><span class="pre">Transfer-Encoding:</span> <span class="pre">chunked</span></code> request, we no longer
send the <code class="docutils literal notranslate"><span class="pre">TRANSFER_ENCODING</span></code> nor the <code class="docutils literal notranslate"><span class="pre">HTTP_TRANSFER_ENCODING</span></code> value to
the application in the environment.  Instead, we pop this header.  Since we
cope with chunked requests by buffering the data in the server, we also know
when a chunked request has ended, and therefore we know the content length.
We set the content-length header in the environment, such that applications
effectively never know the original request was a T-E: chunked request; it
will appear to them as if the request is a non-chunked request with an
accurate content-length.</li>
<li>Cope with the fact that the <code class="docutils literal notranslate"><span class="pre">Transfer-Encoding</span></code> value is case-insensitive.</li>
<li>When the <code class="docutils literal notranslate"><span class="pre">--unix-socket-perms</span></code> option was used as an argument to
<code class="docutils literal notranslate"><span class="pre">waitress-serve</span></code>, a <code class="docutils literal notranslate"><span class="pre">TypeError</span></code> would be raised.  See
<a class="reference external" href="https://github.com/Pylons/waitress/issues/50">https://github.com/Pylons/waitress/issues/50</a>.</li>
</ul>
</div>
<div class="section" id="id40">
<h2>0.8.7 (2013-08-29)<a class="headerlink" href="#id40" title="Permalink to this headline">¶</a></h2>
<ul class="simple">
<li>The HTTP version of the response returned by waitress when it catches an
exception will now match the HTTP request version.</li>
<li>Fix: CONNECTION header will be HTTP_CONNECTION and not CONNECTION_TYPE
(see <a class="reference external" href="https://github.com/Pylons/waitress/issues/13">https://github.com/Pylons/waitress/issues/13</a>)</li>
</ul>
</div>
<div class="section" id="id41">
<h2>0.8.6 (2013-08-12)<a class="headerlink" href="#id41" title="Permalink to this headline">¶</a></h2>
<ul class="simple">
<li>Do alternate type of checking for UNIX socket support, instead of checking
for platform == windows.</li>
<li>Functional tests now use multiprocessing module instead of subprocess module,
speeding up test suite and making concurrent execution more reliable.</li>
<li>Runner now appends the current working directory to <code class="docutils literal notranslate"><span class="pre">sys.path</span></code> to support
running WSGI applications from a directory (i.e., not installed in a
virtualenv).</li>
<li>Add a <code class="docutils literal notranslate"><span class="pre">url_prefix</span></code> adjustment setting.  You can use it by passing
<code class="docutils literal notranslate"><span class="pre">script_name='/foo'</span></code> to <code class="docutils literal notranslate"><span class="pre">waitress.serve</span></code> or you can use it in a
<code class="docutils literal notranslate"><span class="pre">PasteDeploy</span></code> ini file as <code class="docutils literal notranslate"><span class="pre">script_name</span> <span class="pre">=</span> <span class="pre">/foo</span></code>.  This will cause the WSGI
<code class="docutils literal notranslate"><span class="pre">SCRIPT_NAME</span></code> value to be the value passed minus any trailing slashes you
add, and it will cause the <code class="docutils literal notranslate"><span class="pre">PATH_INFO</span></code> of any request which is prefixed
with this value to be stripped of the prefix.  You can use this instead of
PasteDeploy's <code class="docutils literal notranslate"><span class="pre">prefixmiddleware</span></code> to always prefix the path.</li>
</ul>
</div>
<div class="section" id="id42">
<h2>0.8.5 (2013-05-27)<a class="headerlink" href="#id42" title="Permalink to this headline">¶</a></h2>
<ul class="simple">
<li>Fix runner multisegment imports in some Python 2 revisions (see
<a class="reference external" href="https://github.com/Pylons/waitress/pull/34">https://github.com/Pylons/waitress/pull/34</a>).</li>
<li>For compatibility, WSGIServer is now an alias of TcpWSGIServer. The
signature of BaseWSGIServer is now compatible with WSGIServer pre-0.8.4.</li>
</ul>
</div>
<div class="section" id="id43">
<h2>0.8.4 (2013-05-24)<a class="headerlink" href="#id43" title="Permalink to this headline">¶</a></h2>
<ul class="simple">
<li>Add a command-line runner called <code class="docutils literal notranslate"><span class="pre">waitress-serve</span></code> to allow Waitress
to run WSGI applications without any addional machinery. This is
essentially a thin wrapper around the <code class="docutils literal notranslate"><span class="pre">waitress.serve()</span></code> function.</li>
<li>Allow parallel testing (e.g., under <code class="docutils literal notranslate"><span class="pre">detox</span></code> or <code class="docutils literal notranslate"><span class="pre">nosetests</span> <span class="pre">--processes</span></code>)
using PID-dependent port / socket for functest servers.</li>
<li>Fix integer overflow errors on large buffers. Thanks to Marcin Kuzminski
for the patch.  See: <a class="reference external" href="https://github.com/Pylons/waitress/issues/22">https://github.com/Pylons/waitress/issues/22</a></li>
<li>Add support for listening on Unix domain sockets.</li>
</ul>
</div>
<div class="section" id="id44">
<h2>0.8.3 (2013-04-28)<a class="headerlink" href="#id44" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id45">
<h3>Features<a class="headerlink" href="#id45" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Add an <code class="docutils literal notranslate"><span class="pre">asyncore_loop_timeout</span></code> adjustment value, which controls the
<code class="docutils literal notranslate"><span class="pre">timeout</span></code> value passed to <code class="docutils literal notranslate"><span class="pre">asyncore.loop</span></code>; defaults to 1.</li>
</ul>
</div>
<div class="section" id="bug-fixes">
<h3>Bug Fixes<a class="headerlink" href="#bug-fixes" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>The default asyncore loop timeout is now 1 second.  This prevents slow
shutdown on Windows.  See <a class="reference external" href="https://github.com/Pylons/waitress/issues/6">https://github.com/Pylons/waitress/issues/6</a> .  This
shouldn't matter to anyone in particular, but it can be changed via the
<code class="docutils literal notranslate"><span class="pre">asyncore_loop_timeout</span></code> adjustment (it used to previously default to 30
seconds).</li>
<li>Don't complain if there's a response to a HEAD request that contains a
Content-Length &gt; 0.  See <a class="reference external" href="https://github.com/Pylons/waitress/pull/7">https://github.com/Pylons/waitress/pull/7</a>.</li>
<li>Fix bug in HTTP Expect/Continue support.  See
<a class="reference external" href="https://github.com/Pylons/waitress/issues/9">https://github.com/Pylons/waitress/issues/9</a> .</li>
</ul>
</div>
</div>
<div class="section" id="id46">
<h2>0.8.2 (2012-11-14)<a class="headerlink" href="#id46" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id47">
<h3>Bug Fixes<a class="headerlink" href="#id47" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li><a class="reference external" href="https://corte.si/posts/code/pathod/pythonservers/index.html">https://corte.si/posts/code/pathod/pythonservers/index.html</a> pointed out that
sending a bad header resulted in an exception leading to a 500 response
instead of the more proper 400 response without an exception.</li>
<li>Fix a race condition in the test suite.</li>
<li>Allow &quot;ident&quot; to be used as a keyword to <code class="docutils literal notranslate"><span class="pre">serve()</span></code> as per docs.</li>
<li>Add py33 to tox.ini.</li>
</ul>
</div>
</div>
<div class="section" id="id48">
<h2>0.8.1 (2012-02-13)<a class="headerlink" href="#id48" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id49">
<h3>Bug Fixes<a class="headerlink" href="#id49" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>A brown-bag bug prevented request concurrency.  A slow request would block
subsequent the responses of subsequent requests until the slow request's
response was fully generated.  This was due to a &quot;task lock&quot; being declared
as a class attribute rather than as an instance attribute on HTTPChannel.
Also took the opportunity to move another lock named &quot;outbuf lock&quot; to the
channel instance rather than the class.  See
<a class="reference external" href="https://github.com/Pylons/waitress/pull/1">https://github.com/Pylons/waitress/pull/1</a> .</li>
</ul>
</div>
</div>
<div class="section" id="id50">
<h2>0.8 (2012-01-31)<a class="headerlink" href="#id50" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id51">
<h3>Features<a class="headerlink" href="#id51" title="Permalink to this headline">¶</a></h3>
<ul>
<li><p class="first">Support the WSGI <code class="docutils literal notranslate"><span class="pre">wsgi.file_wrapper</span></code> protocol as per
<a class="reference external" href="https://www.python.org/dev/peps/pep-0333/#optional-platform-specific-file-handling">https://www.python.org/dev/peps/pep-0333/#optional-platform-specific-file-handling</a>.
Here's a usage example:</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">os</span>

<span class="n">here</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">abspath</span><span class="p">(</span><span class="vm">__file__</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">myapp</span><span class="p">(</span><span class="n">environ</span><span class="p">,</span> <span class="n">start_response</span><span class="p">):</span>
    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">here</span><span class="p">,</span> <span class="s1">&#39;myphoto.jpg&#39;</span><span class="p">),</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span>
    <span class="n">headers</span> <span class="o">=</span> <span class="p">[(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;image/jpeg&#39;</span><span class="p">)]</span>
    <span class="n">start_response</span><span class="p">(</span>
        <span class="s1">&#39;200 OK&#39;</span><span class="p">,</span>
        <span class="n">headers</span>
        <span class="p">)</span>
    <span class="k">return</span> <span class="n">environ</span><span class="p">[</span><span class="s1">&#39;wsgi.file_wrapper&#39;</span><span class="p">](</span><span class="n">f</span><span class="p">,</span> <span class="mi">32768</span><span class="p">)</span>
</pre></div>
</div>
<p>The signature of the file wrapper constructor is <code class="docutils literal notranslate"><span class="pre">(filelike_object,</span>
<span class="pre">block_size)</span></code>.  Both arguments must be passed as positional (not keyword)
arguments.  The result of creating a file wrapper should be <strong>returned</strong> as
the <code class="docutils literal notranslate"><span class="pre">app_iter</span></code> from a WSGI application.</p>
<p>The object passed as <code class="docutils literal notranslate"><span class="pre">filelike_object</span></code> to the wrapper must be a file-like
object which supports <em>at least</em> the <code class="docutils literal notranslate"><span class="pre">read()</span></code> method, and the <code class="docutils literal notranslate"><span class="pre">read()</span></code>
method must support an optional size hint argument.  It <em>should</em> support
the <code class="docutils literal notranslate"><span class="pre">seek()</span></code> and <code class="docutils literal notranslate"><span class="pre">tell()</span></code> methods.  If it does not, normal iteration
over the filelike object using the provided block_size is used (and copying
is done, negating any benefit of the file wrapper).  It <em>should</em> support a
<code class="docutils literal notranslate"><span class="pre">close()</span></code> method.</p>
<p>The specified <code class="docutils literal notranslate"><span class="pre">block_size</span></code> argument to the file wrapper constructor will
be used only when the <code class="docutils literal notranslate"><span class="pre">filelike_object</span></code> doesn't support <code class="docutils literal notranslate"><span class="pre">seek</span></code> and/or
<code class="docutils literal notranslate"><span class="pre">tell</span></code> methods.  Waitress needs to use normal iteration to serve the file
in this degenerate case (as per the WSGI spec), and this block size will be
used as the iteration chunk size.  The <code class="docutils literal notranslate"><span class="pre">block_size</span></code> argument is optional;
if it is not passed, a default value``32768`` is used.</p>
<p>Waitress will set a <code class="docutils literal notranslate"><span class="pre">Content-Length</span></code> header on the behalf of an
application when a file wrapper with a sufficiently filelike object is used
if the application hasn't already set one.</p>
<p>The machinery which handles a file wrapper currently doesn't do anything
particularly special using fancy system calls (it doesn't use <code class="docutils literal notranslate"><span class="pre">sendfile</span></code>
for example); using it currently just prevents the system from needing to
copy data to a temporary buffer in order to send it to the client.  No
copying of data is done when a WSGI app returns a file wrapper that wraps a
sufficiently filelike object.  It may do something fancier in the future.</p>
</li>
</ul>
</div>
</div>
<div class="section" id="id52">
<h2>0.7 (2012-01-11)<a class="headerlink" href="#id52" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id53">
<h3>Features<a class="headerlink" href="#id53" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Default <code class="docutils literal notranslate"><span class="pre">send_bytes</span></code> value is now 18000 instead of 9000.  The larger
default value prevents asyncore from needing to execute select so many
times to serve large files, speeding up file serving by about 15%-20% or
so.  This is probably only an optimization for LAN communications, and
could slow things down across a WAN (due to higher TCP overhead), but we're
likely to be behind a reverse proxy on a LAN anyway if in production.</li>
<li>Added an (undocumented) profiling feature to the <code class="docutils literal notranslate"><span class="pre">serve()</span></code> command.</li>
</ul>
</div>
</div>
<div class="section" id="id54">
<h2>0.6.1 (2012-01-08)<a class="headerlink" href="#id54" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id55">
<h3>Bug Fixes<a class="headerlink" href="#id55" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Remove performance-sapping call to <code class="docutils literal notranslate"><span class="pre">pull_trigger</span></code> in the channel's
<code class="docutils literal notranslate"><span class="pre">write_soon</span></code> method added mistakenly in 0.6.</li>
</ul>
</div>
</div>
<div class="section" id="id56">
<h2>0.6 (2012-01-07)<a class="headerlink" href="#id56" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id57">
<h3>Bug Fixes<a class="headerlink" href="#id57" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>A logic error prevented the internal outbuf buffer of a channel from being
flushed when the client could not accept the entire contents of the output
buffer in a single succession of socket.send calls when the channel was in
a &quot;pending close&quot; state.  The socket in such a case would be closed
prematurely, sometimes resulting in partially delivered content.  This was
discovered by a user using waitress behind an Nginx reverse proxy, which
apparently is not always ready to receive data.  The symptom was that he
received &quot;half&quot; of a large CSS file (110K) while serving content via
waitress behind the proxy.</li>
</ul>
</div>
</div>
<div class="section" id="id58">
<h2>0.5 (2012-01-03)<a class="headerlink" href="#id58" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id59">
<h3>Bug Fixes<a class="headerlink" href="#id59" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Fix PATH_INFO encoding/decoding on Python 3 (as per PEP 3333, tunnel
bytes-in-unicode-as-latin-1-after-unquoting).</li>
</ul>
</div>
</div>
<div class="section" id="id60">
<h2>0.4 (2012-01-02)<a class="headerlink" href="#id60" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id61">
<h3>Features<a class="headerlink" href="#id61" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Added &quot;design&quot; document to docs.</li>
</ul>
</div>
<div class="section" id="id62">
<h3>Bug Fixes<a class="headerlink" href="#id62" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Set default <code class="docutils literal notranslate"><span class="pre">connection_limit</span></code> back to 100 for benefit of maximal
platform compatibility.</li>
<li>Normalize setting of <code class="docutils literal notranslate"><span class="pre">last_activity</span></code> during send.</li>
<li>Minor resource cleanups during tests.</li>
<li>Channel timeout cleanup was broken.</li>
</ul>
</div>
</div>
<div class="section" id="id63">
<h2>0.3 (2012-01-02)<a class="headerlink" href="#id63" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id64">
<h3>Features<a class="headerlink" href="#id64" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Dont hang a thread up trying to send data to slow clients.</li>
<li>Use self.logger to log socket errors instead of self.log_info (normalize).</li>
<li>Remove pointless handle_error method from channel.</li>
<li>Queue requests instead of tasks in a channel.</li>
</ul>
</div>
<div class="section" id="id65">
<h3>Bug Fixes<a class="headerlink" href="#id65" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Expect: 100-continue responses were broken.</li>
</ul>
</div>
</div>
<div class="section" id="id66">
<h2>0.2 (2011-12-31)<a class="headerlink" href="#id66" title="Permalink to this headline">¶</a></h2>
<div class="section" id="id67">
<h3>Bug Fixes<a class="headerlink" href="#id67" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Set up logging by calling logging.basicConfig() when <code class="docutils literal notranslate"><span class="pre">serve</span></code> is called
(show tracebacks and other warnings to console by default).</li>
<li>Disallow WSGI applications to set &quot;hop-by-hop&quot; headers (Connection,
Transfer-Encoding, etc).</li>
<li>Don't treat 304 status responses specially in HTTP/1.1 mode.</li>
<li>Remove out of date <code class="docutils literal notranslate"><span class="pre">interfaces.py</span></code> file.</li>
<li>Normalize logging (all output is now sent to the <code class="docutils literal notranslate"><span class="pre">waitress</span></code> logger rather
than in degenerate cases some output being sent directly to stderr).</li>
</ul>
</div>
<div class="section" id="id68">
<h3>Features<a class="headerlink" href="#id68" title="Permalink to this headline">¶</a></h3>
<ul class="simple">
<li>Support HTTP/1.1 <code class="docutils literal notranslate"><span class="pre">Transfer-Encoding:</span> <span class="pre">chunked</span></code> responses.</li>
<li>Slightly better docs about logging.</li>
</ul>
</div>
</div>
<div class="section" id="id69">
<h2>0.1 (2011-12-30)<a class="headerlink" href="#id69" title="Permalink to this headline">¶</a></h2>
<ul class="simple">
<li>Initial release.</li>
</ul>
</div>
<div class="section" id="known-issues">
<h2>Known Issues<a class="headerlink" href="#known-issues" title="Permalink to this headline">¶</a></h2>
<ul class="simple">
<li>Does not support TLS natively. See <a class="reference internal" href="reverse-proxy.html#using-behind-a-reverse-proxy"><span class="std std-ref">Using Behind a Reverse Proxy</span></a> for more information.</li>
</ul>
</div>
<div class="section" id="support-and-development">
<h2>Support and Development<a class="headerlink" href="#support-and-development" title="Permalink to this headline">¶</a></h2>
<p>The <a class="reference external" href="https://pylonsproject.org/">Pylons Project web site</a> is the main online
source of Waitress support and development information.</p>
<p>To report bugs, use the <a class="reference external" href="https://github.com/Pylons/waitress/issues">issue tracker</a>.</p>
<p>If you've got questions that aren't answered by this documentation,
contact the <a class="reference external" href="https://groups.google.com/forum/#!forum/pylons-discuss">Pylons-discuss maillist</a> or join the <a class="reference external" href="https://webchat.freenode.net/?channels=pyramid">#pyramid
IRC channel</a>.</p>
<p>Browse and check out tagged and trunk versions of Waitress via
the <a class="reference external" href="https://github.com/Pylons/waitress/">Waitress GitHub repository</a>.
To check out the trunk via <code class="docutils literal notranslate"><span class="pre">git</span></code>, use this command:</p>
<div class="highlight-text notranslate"><div class="highlight"><pre><span></span>git clone git@github.com:Pylons/waitress.git
</pre></div>
</div>
<p>To find out how to become a contributor to Waitress, please see the guidelines in <a class="reference external" href="https://github.com/Pylons/waitress/blob/master/contributing.md">contributing.md</a> and <a class="reference external" href="https://pylonsproject.org/community-how-to-contribute.html">How to Contribute Source Code and Documentation</a>.</p>
</div>
<div class="section" id="why">
<h2>Why?<a class="headerlink" href="#why" title="Permalink to this headline">¶</a></h2>
<p>At the time of the release of Waitress, there are already many pure-Python
WSGI servers.  Why would we need another?</p>
<p>Waitress is meant to be useful to web framework authors who require broad
platform support.  It's neither the fastest nor the fanciest WSGI server
available but using it helps eliminate the N-by-M documentation burden
(e.g. production vs. deployment, Windows vs. Unix, Python 3 vs. Python 2,
PyPy vs. CPython) and resulting user confusion imposed by spotty platform
support of the current (2012-ish) crop of WSGI servers.  For example,
<code class="docutils literal notranslate"><span class="pre">gunicorn</span></code> is great, but doesn't run on Windows.  <code class="docutils literal notranslate"><span class="pre">paste.httpserver</span></code> is
perfectly serviceable, but doesn't run under Python 3 and has no dedicated
tests suite that would allow someone who did a Python 3 port to know it
worked after a port was completed.  <code class="docutils literal notranslate"><span class="pre">wsgiref</span></code> works fine under most any
Python, but it's a little slow and it's not recommended for production use as
it's single-threaded and has not been audited for security issues.</p>
<p>At the time of this writing, some existing WSGI servers already claim wide
platform support and have serviceable test suites.  The CherryPy WSGI server,
for example, targets Python 2 and Python 3 and it can run on UNIX or Windows.
However, it is not distributed separately from its eponymous web framework,
and requiring a non-CherryPy web framework to depend on the CherryPy web
framework distribution simply for its server component is awkward.  The test
suite of the CherryPy server also depends on the CherryPy web framework, so
even if we forked its server component into a separate distribution, we would
have still needed to backfill for all of its tests.  The CherryPy team has
started work on <a class="reference external" href="https://bitbucket.org/cherrypy/cheroot/src/default/">Cheroot</a>, which
should solve this problem, however.</p>
<p>Waitress is a fork of the WSGI-related components which existed in
<code class="docutils literal notranslate"><span class="pre">zope.server</span></code>.  <code class="docutils literal notranslate"><span class="pre">zope.server</span></code> had passable framework-independent test
coverage out of the box, and a good bit more coverage was added during the
fork.  <code class="docutils literal notranslate"><span class="pre">zope.server</span></code> has existed in one form or another since about 2001,
and has seen production usage since then, so Waitress is not exactly
&quot;another&quot; server, it's more a repackaging of an old one that was already
known to work fairly well.</p>
</div>
</div>


          </div>
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
  <h3><a href="#">Table of Contents</a></h3>
  <ul>
<li><a class="reference internal" href="#">Waitress</a><ul>
<li><a class="reference internal" href="#extended-documentation">Extended Documentation</a></li>
<li><a class="reference internal" href="#change-history">Change History</a></li>
<li><a class="reference internal" href="#next-release">Next Release</a></li>
<li><a class="reference internal" href="#id1">2.0.0 (2021-03-07)</a><ul>
<li><a class="reference internal" href="#friendly-reminder">Friendly Reminder</a></li>
<li><a class="reference internal" href="#bugfixes-features">Bugfixes/Features</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id2">1.4.4 (2020-06-01)</a></li>
<li><a class="reference internal" href="#id3">1.4.3 (2020-02-02)</a><ul>
<li><a class="reference internal" href="#security-fixes">Security Fixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id4">1.4.2 (2020-01-02)</a><ul>
<li><a class="reference internal" href="#id5">Security Fixes</a></li>
<li><a class="reference internal" href="#bugfixes">Bugfixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id6">1.4.1 (2019-12-24)</a><ul>
<li><a class="reference internal" href="#id7">Security Fixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id8">1.4.0 (2019-12-20)</a><ul>
<li><a class="reference internal" href="#id9">Bugfixes</a></li>
<li><a class="reference internal" href="#id10">Security Fixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id11">1.3.1 (2019-08-27)</a><ul>
<li><a class="reference internal" href="#id12">Bugfixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id13">1.3.0 (2019-04-22)</a><ul>
<li><a class="reference internal" href="#deprecations">Deprecations</a></li>
<li><a class="reference internal" href="#features">Features</a></li>
<li><a class="reference internal" href="#id14">Bugfixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id15">1.2.1 (2019-01-25)</a><ul>
<li><a class="reference internal" href="#id16">Bugfixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id17">1.2.0 (2019-01-15)</a></li>
<li><a class="reference internal" href="#b3-2019-01-07">1.2.0b3 (2019-01-07)</a><ul>
<li><a class="reference internal" href="#id18">Bugfixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#b2-2019-02-02">1.2.0b2 (2019-02-02)</a><ul>
<li><a class="reference internal" href="#id19">Bugfixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#b1-2018-12-31">1.2.0b1 (2018-12-31)</a><ul>
<li><a class="reference internal" href="#id20">Features</a></li>
<li><a class="reference internal" href="#id21">Bugfixes</a></li>
<li><a class="reference internal" href="#compatibility">Compatibility</a></li>
<li><a class="reference internal" href="#documentation">Documentation</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id22">1.1.0 (2017-10-10)</a><ul>
<li><a class="reference internal" href="#id23">Features</a></li>
<li><a class="reference internal" href="#id24">Bugfixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id25">1.0.2 (2017-02-04)</a><ul>
<li><a class="reference internal" href="#id26">Features</a></li>
<li><a class="reference internal" href="#id27">Bugfixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id28">1.0.1 (2016-10-22)</a><ul>
<li><a class="reference internal" href="#id29">Bugfixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id30">1.0.0 (2016-08-31)</a><ul>
<li><a class="reference internal" href="#id31">Bugfixes</a></li>
<li><a class="reference internal" href="#id32">Deprecations</a></li>
<li><a class="reference internal" href="#id33">Features</a></li>
<li><a class="reference internal" href="#security">Security</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id34">0.9.0 (2016-04-15)</a><ul>
<li><a class="reference internal" href="#id35">Deprecations</a></li>
<li><a class="reference internal" href="#security-protections">Security/Protections</a></li>
<li><a class="reference internal" href="#id36">Bugfixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id37">0.8.10 (2015-09-02)</a></li>
<li><a class="reference internal" href="#id38">0.8.9 (2014-05-16)</a></li>
<li><a class="reference internal" href="#id39">0.8.8 (2013-11-30)</a></li>
<li><a class="reference internal" href="#id40">0.8.7 (2013-08-29)</a></li>
<li><a class="reference internal" href="#id41">0.8.6 (2013-08-12)</a></li>
<li><a class="reference internal" href="#id42">0.8.5 (2013-05-27)</a></li>
<li><a class="reference internal" href="#id43">0.8.4 (2013-05-24)</a></li>
<li><a class="reference internal" href="#id44">0.8.3 (2013-04-28)</a><ul>
<li><a class="reference internal" href="#id45">Features</a></li>
<li><a class="reference internal" href="#bug-fixes">Bug Fixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id46">0.8.2 (2012-11-14)</a><ul>
<li><a class="reference internal" href="#id47">Bug Fixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id48">0.8.1 (2012-02-13)</a><ul>
<li><a class="reference internal" href="#id49">Bug Fixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id50">0.8 (2012-01-31)</a><ul>
<li><a class="reference internal" href="#id51">Features</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id52">0.7 (2012-01-11)</a><ul>
<li><a class="reference internal" href="#id53">Features</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id54">0.6.1 (2012-01-08)</a><ul>
<li><a class="reference internal" href="#id55">Bug Fixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id56">0.6 (2012-01-07)</a><ul>
<li><a class="reference internal" href="#id57">Bug Fixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id58">0.5 (2012-01-03)</a><ul>
<li><a class="reference internal" href="#id59">Bug Fixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id60">0.4 (2012-01-02)</a><ul>
<li><a class="reference internal" href="#id61">Features</a></li>
<li><a class="reference internal" href="#id62">Bug Fixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id63">0.3 (2012-01-02)</a><ul>
<li><a class="reference internal" href="#id64">Features</a></li>
<li><a class="reference internal" href="#id65">Bug Fixes</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id66">0.2 (2011-12-31)</a><ul>
<li><a class="reference internal" href="#id67">Bug Fixes</a></li>
<li><a class="reference internal" href="#id68">Features</a></li>
</ul>
</li>
<li><a class="reference internal" href="#id69">0.1 (2011-12-30)</a></li>
<li><a class="reference internal" href="#known-issues">Known Issues</a></li>
<li><a class="reference internal" href="#support-and-development">Support and Development</a></li>
<li><a class="reference internal" href="#why">Why?</a></li>
</ul>
</li>
</ul>
<!-- Ethical ad insertion -->
<div id="ethical-ad-placement"></div>
  <h4>Next topic</h4>
  <p class="topless"><a href="usage.html"
                        title="next chapter">Usage</a></p>
  <div role="note" aria-label="source link">
    <h3>This Page</h3>
    <ul class="this-page-menu">
      <li><a href="_sources/index.rst.txt"
            rel="nofollow">Show Source</a></li>
    </ul>
   </div>
<div id="searchbox" style="display: none" role="search">
  <h3>Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="search.html" method="get">
      <input type="text" name="q" />
      <input type="submit" value="Go" />
      <input type="hidden" name="check_keywords" value="yes" />
      <input type="hidden" name="area" value="default" />
    </form>
    </div>
</div>
<script type="text/javascript">$('#searchbox').show(0);</script>
        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Navigation</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.html" title="General Index"
             >index</a></li>
        <li class="right" >
          <a href="py-modindex.html" title="Python Module Index"
             >modules</a> |</li>
        <li class="right" >
          <a href="usage.html" title="Usage"
             >next</a> |</li>
    	<li><a href="#">waitress 2.0.0 documentation</a> &#187;</li> 
      </ul>
    </div>
    <div class="footer" role="contentinfo">
        &#169; Copyright 2012-2021, Agendaless Consulting &lt;chrism@plope.com&gt;.
      Last updated on Sep 09, 2021.
      Created using <a href="http://sphinx-doc.org/">Sphinx</a> 1.8.5.
    </div>
  </body>
</html>