<!DOCTYPE html>
<html lang="en">
  <head>
      <meta charset="UTF-8">

      <meta name="referrer" content="origin">
<script type="text/javascript" src="page.cgi?1635595731&amp;id=bayotbase/fielddefs.js"></script>




<script type="text/javascript">var BB_CONFIG = ({"defaults":{"severity":"Unspecified","op_sys":"Unspecified","platform":"Unspecified","priority":"Unspecified","bugentry_fields":["summary","product","component","rh_sub_components","severity","priority","comment"]},"user":{"groups":[],"logged_in":false,"enterable_products":[]}});</script><script type="text/javascript">
var classifications = '[ { "name": "Red Hat", "description": "Red Hat Products"},{ "name": "Workflows", "description": "User driven workflows"},{ "name": "JBoss", "description": "JBoss Products"},{ "name": "CentOS", "description": "CentOS Projects"},{ "name": "Fedora", "description": "Fedora Products"},{ "name": "Community", "description": "Community Projects"},{ "name": "oVirt", "description": "oVirt Virtualization Management Projects"},{ "name": "Internal", "description": "Internal Projects."},{ "name": "Other", "description": "Other Miscellaneous Products"},{ "name": "Unclassified", "description": "Not assigned to any classification"},{ "name": "Retired", "description": "Products that have reached end of life, or were never released."} ]';
var c_optgroups = JSON.parse(classifications);
</script>
    <title>
  Attachment 487006 Details for Bug 689931
  &ndash; Resolution of the security issue (nsPluginInstance, getters and setters)</title>

      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<link href="skins/standard/global.css" rel="stylesheet" type="text/css"><link href="extensions/BayotBase/web/css/base.css" rel="stylesheet" type="text/css"><link href="extensions/BayotBase/web/jquery-ui-1.12.1.custom/jquery-ui.min.css" rel="stylesheet" type="text/css"><link href="skins/standard/bug.css" rel="stylesheet" type="text/css"><link href="skins/standard/diff2html/diff2html.min.css" rel="stylesheet" type="text/css"><link href="extensions/ExternalBugs/web/css/global.css" rel="stylesheet" type="text/css"><link href="extensions/FontAwesome/web/css/all.min.css" rel="stylesheet" type="text/css"><link href="extensions/RedHat/web/css/redhat.css" rel="stylesheet" type="text/css"><link href="extensions/RedHat/web/DataTables/datatables.min.css" rel="stylesheet" type="text/css"><link href="extensions/RedHat/web/alertify/css/alertify.min.css" rel="stylesheet" type="text/css"><link href="extensions/RedHat/web/alertify/css/themes/bootstrap.min.css" rel="stylesheet" type="text/css"><link href="extensions/SelectizeJS/web/css/selectize.bootstrap3.css" rel="stylesheet" type="text/css"><link href="extensions/SelectizeJS/web/css/SelectizeJS.css" rel="stylesheet" type="text/css">



    
<script type="text/javascript" src="js/yui/yahoo-dom-event/yahoo-dom-event.js"></script><script type="text/javascript" src="js/yui/cookie/cookie-min.js"></script><script type="text/javascript" src="extensions/BayotBase/web/js/jquery-3.6.0.min.js"></script><script type="text/javascript" src="extensions/BayotBase/web/jquery-ui-1.12.1.custom/jquery-ui.min.js"></script><script type="text/javascript" src="extensions/BayotBase/web/js/jquery.cookie.js"></script><script type="text/javascript" src="extensions/BayotBase/web/js/jquery.jsonrpc.js"></script><script type="text/javascript" src="extensions/BayotBase/web/js/Base.js"></script><script type="text/javascript" src="extensions/BayotBase/web/js/bayot.util.js"></script><script type="text/javascript" src="js/global.js"></script>

    <script type="text/javascript">
    <!--
        YAHOO.namespace('bugzilla');
        YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
               if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
               var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
               return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
         };
        if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
            YAHOO.util.Event._simpleRemove(window, "unload", 
                                           YAHOO.util.Event._unload);
        }
        
        function unhide_language_selector() { 
            YAHOO.util.Dom.removeClass(
                'lang_links_container', 'bz_default_hidden'
            ); 
        } 
        YAHOO.util.Event.onDOMReady(unhide_language_selector);

        
        var BUGZILLA = {
            param: {
                cookiepath: '\/',
                maxusermatches: 5,
                maxattachmentsize: 20000
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    "You must enter a Description for this attachment.",
                component_required:
                    "You must select a Component for this bug.",
                description_required:
                    "You must enter a Description for this bug.",
                short_desc_required:
                    "You must enter a Summary for this bug.",
                version_required:
                    "You must select a Version for this bug.",
                group_required:
                    "You must select at least one group for bugs in this product."
            }
            
              , api_token: ''
            
        };

    // -->
    </script>
<script type="text/javascript" src="js/diff2html/diff2html-ui.min.js"></script><script type="text/javascript" src="extensions/ExternalBugs/web/js/external_bugs.js"></script><script type="text/javascript" src="extensions/RedHat/web/DataTables/datatables.min.js"></script><script type="text/javascript" src="extensions/RedHat/web/alertify/alertify.min.js"></script><script type="text/javascript" src="extensions/RedHat/web/colResize/dataTables.colResize.js"></script><script type="text/javascript" src="extensions/RedHat/web/js/redhat.js"></script><script type="text/javascript" src="extensions/SelectizeJS/web/js/standalone/selectize.min.js"></script><script type="text/javascript" src="extensions/SelectizeJS/web/js/SelectizeJS.js"></script>

    

    
    <link rel="search" type="application/opensearchdescription+xml"
                       title="Red Hat Bugzilla" href="./search_plugin.cgi">
    <link rel="shortcut icon" href="/extensions/RedHat/web/css/favicons/production.ico?v=0">
  </head>

  <body  onload="showDiff();"
        class="bugzilla-redhat-com status_colours_pastel
                 no_javascript yui-skin-sam">

  <div id="header"><div id="banner">
   <ul id="loginin_launcher"><a href="#" onclick="$('#loginin_launcher').addClass('bz_default_hidden');$('#login_container').removeClass('bz_default_hidden');"><i class="fa fa-user" aria-hidden="true"></i>&nbsp;&nbsp;Login</a></ul>
   <ul id="login_container" class="bz_default_hidden">
    <a href="#" id="hide_mini_login" onclick="$('#login_container').addClass('bz_default_hidden');$('#loginin_launcher').removeClass('bz_default_hidden');">[x]</a>
     
    <li id="mini_login_container"><div id="saml2_container">
    Log in using an account from:
  <div id="saml2auth_login_Fedora Account System">
    <a href="saml2_login.cgi?idp=Fedora%20Account%20System&amp;target=attachment.cgi%3Fid%3D487006%26amp%3D%26amp%3D%26action%3Ddiff"><i class="fa fa-cogs" aria-hidden="true"></i>&nbsp;&nbsp;Fedora Account System</a>
  </div>
  <div id="saml2auth_login_Red Hat Associate">
    <a href="saml2_login.cgi?idp=Red%20Hat%20Associate&amp;target=attachment.cgi%3Fid%3D487006%26amp%3D%26amp%3D%26action%3Ddiff"><i class="fa fa-user-secret" aria-hidden="true"></i>&nbsp;&nbsp;Red Hat Associate</a>
  </div>
  <div id="saml2auth_login_Red Hat Customer">
    <a href="saml2_login.cgi?idp=Red%20Hat%20Customer&amp;target=attachment.cgi%3Fid%3D487006%26amp%3D%26amp%3D%26action%3Ddiff"><i class="fa fa-user" aria-hidden="true"></i>&nbsp;&nbsp;Red Hat Customer</a>
  </div>
  Or login using a Red Hat Bugzilla account
  <div>

  <form action="attachment.cgi?id=487006&amp;amp=&amp;amp=&amp;action=diff" method="POST"
        class="mini_login "
        id="mini_login">
    <input id="Bugzilla_login" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in">
  </form>
</li>
<li id="forgot_container">
  <a id="forgot_link" href="#forgot"
     onclick="return show_forgot_form('')"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i>&nbsp;&nbsp;Forgot&nbsp;Password</a>
  <form action="token.cgi" method="post" id="forgot_form"
        class="mini_forgot bz_default_hidden">
    <label for="login">Login:</label>
    <input name="loginname" size="20" id="login" required
        type="email" placeholder="Your Email Address">
    <input id="forgot_button" value="Reset Password" 
           type="submit">
    <input type="hidden" name="a" value="reqpw">
    <input type="hidden" id="token" name="token"
           value="1635624147-ZUExokyWKy3bLO4oB7UJWeiUICveXOfS7z_O9uIYGrs">
    <p>
    <a href="#" onclick="return hide_forgot_form('')"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i>&nbsp;&nbsp;Hide Forgot</a>
  </form>
</li>
<li>
  <a href="createaccount.cgi"><span><i class="fas fa-plus" aria-hidden="true"></i>&nbsp;&nbsp;Create an Account</span></a>
</li>
    
   </ul>
  </div>

    <div id="titles">
      <span id="title">Red Hat Bugzilla &ndash; 
  Attachment 487006 Details for
  <a class="bz_bug_link
          
          bz_status_CLOSED  bz_closed
                              
    "
   title="CLOSED ERRATA - CVE-2011-1179 spice-xpi: unitialized pointer writes possible when getting plugin properties"
   href="show_bug.cgi?id=689931">Bug 689931</a></span>

        <span id="subtitle" class="subheader">CVE-2011-1179 spice-xpi: unitialized pointer writes possible when getting plugin properties</span>

    </div>


    <div id="common_links"><ul class="links">
  <li class="form">
    
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_top" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_top");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_top" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_top"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>
  <li><a href="./" title="Home"><i class="fas fa-home"></i></a></li>
  <li><a href="enter_bug.cgi">New</a></li>
  <li class="submenu">
    <a href="#" title="Search"><i class="fas fa-search"></i> <span class="fa fa-caret-down"></span></a>
    <div>
      <ul>
        <li><a href="query.cgi?format=specific">Simple Search</a></li>
        <li><a href="query.cgi?format=advanced">Advanced Search</a></li>
      </ul>
    </div>
  </li>
  <li class="submenu">
   <a href="#">My Links <span class="fa fa-caret-down"></span></a>
   <div>
    <ul>
      <li><a href="describecomponents.cgi">Browse</a></li>
      <li>
            <a href="request.cgi">Requests</a></li>
      <li class="submenu">
        <a  href="report.cgi">Reports <span class="fa fa-caret-right"></span></a>
        <div>
          <ul>
            </li>
            <li class="submenu">
              <a  href="#">Current State <span class="fa fa-caret-right"></span></a>
              <div>
                <ul>
                  <li id="report_search">
                    <a href="query.cgi">Search</a>
                  </li>
                  <li id="report_tabular">
                      <a href="query.cgi?format=report-table">Tabular reports</a>
                  </li>
                    <li id="report_graphical">
                        <a href="query.cgi?format=report-graph">Graphical reports</a>
                    </li>
                  <li id="report_duplicates">
                    <a href="duplicates.cgi">Duplicates</a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="submenu">
              <a  href="#">Other Reports <span class="fa fa-caret-right"></span></a>
              <div>
                <ul>
                  <li>
                      <a href="https://bugzilla.redhat.com/page.cgi?id=user_activity.html">User Changes</a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="submenu">
              <a  href="#">Plotly Reports <span class="fa fa-caret-right"></span></a>
              <div>
                <ul>
                  <li>
                      <a href="https://bugzilla.redhat.com/page.cgi?id=bug_status.html">Bug Status</a>
                  </li>
                  <li>
                      <a href="https://bugzilla.redhat.com/page.cgi?id=bug_severity.html">Bug Severity</a>
                  </li>
                  <li>
                      <a href="https://bugzilla.redhat.com/page.cgi?id=non_defaults.html">Non-Defaults</a>
                  </li>
                </ul>
              </div>
            </li>
          </ul>
        </div>
      </li><li><span class="separator"> | </span><a href="page.cgi?id=productdashboard.html">Product Dashboard</a></li>
    </ul>
   </div>
  </li>

  <li class="submenu">
   <a href="#">Help <span class="fa fa-caret-down"></span></a>
   <div>
    <ul>
      <li><a href="page.cgi?id=bug-writing.html">Bug Writing Guidelines</a></li> 
      <li><a href="page.cgi?id=whats-new.html">What's new</a></li>
      <li><a href="https://access.redhat.com/help/browsers">Browser Support Policy</a></li>
      <li><a href="page.cgi?id=release-notes.html">5.0.4.rh64 Release notes</a></li>
      <li><a href="page.cgi?id=faq.html">FAQ</a></li>
      <li><a href="docs/en/html/index.html">Guides index</a></li>
      <li><a href="docs/en/html/using/index.html">User guide</a></li>
      <li><a href="docs/en/html/integrating/api/Bugzilla/WebService/Bug.html">Web Services</a></li>
      <li><a href="page.cgi?id=redhat/contact.html" >Contact</a></li> 
      <li><a href="page.cgi?id=terms-conditions.html" >Legal</a></li> 
    </ul>
   </div>
  </li>



</ul>
    </div>
  </div>


  <div id="bugzilla-body">



<noscript>
      <div id="no-js-message">This site requires JavaScript to be enabled to function correctly, please enable it.</div>
</noscript>


<script>
var diffString = 'From 9f9d744e9ea2eb09750e0c333c6301327b373a51 Mon Sep 17 00:00:00 2001\nFrom: Peter Hatina \x3cphatina\x40redhat.com\x3e\nDate: Tue, 22 Mar 2011 09:58:23 +0100\nSubject: [PATCH] nsPluginInstance getter\/setter security issues fixed\n\n---\n SpiceXPI\/src\/plugin\/nsScriptablePeer.cpp |   85 +++----------\n SpiceXPI\/src\/plugin\/plugin.cpp           |  191 +++++++++++++++---------------\n SpiceXPI\/src\/plugin\/plugin.h             |   68 ++++++------\n 3 files changed, 150 insertions(+), 194 deletions(-)\n\ndiff --git a\/SpiceXPI\/src\/plugin\/nsScriptablePeer.cpp b\/SpiceXPI\/src\/plugin\/nsScriptablePeer.cpp\nindex c3818be..c3949f2 100644\n--- a\/SpiceXPI\/src\/plugin\/nsScriptablePeer.cpp\n+++ b\/SpiceXPI\/src\/plugin\/nsScriptablePeer.cpp\n\x40\x40 -300,15 +300,6 \x40\x40 AllocateScriptablePluginObject(NPP npp, NPClass *aClass)\n   return new ScriptablePluginObject(npp);\n }\n \n-static char * stringCopy(char *src)\n-{\n-  char* dest = (char *)NPN_MemAlloc(strlen(src) + 1);\n-  if (dest) {    \n-    strcpy(dest, src);\n-  }\n-  return dest;\n-}\n-\n bool\n ScriptablePluginObject::HasMethod(NPIdentifier name)\n {\n\x40\x40 -353,99 +344,61 \x40\x40 ScriptablePluginObject::GetProperty(NPIdentifier name, NPVariant *result)\n     return true;\n \n   if (name == hostIP_id) {\n-    char *tmp;\n-    mPlugin-\x3eGetHostIP(&tmp);\n-    STRINGZ_TO_NPVARIANT(stringCopy(tmp), *result);\n+    STRINGZ_TO_NPVARIANT(mPlugin-\x3eGetHostIP(), *result);\n   }\n   else if (name == port_id) {\n-    char *tmp;\n-    mPlugin-\x3eGetPort(&tmp);\n-    STRINGZ_TO_NPVARIANT(stringCopy(tmp), *result);\n+    STRINGZ_TO_NPVARIANT(mPlugin-\x3eGetPort(), *result);\n   }\n   else if (name == SecurePort_id) {\n-    char *tmp;\n-    mPlugin-\x3eGetSecurePort(&tmp);\n-    STRINGZ_TO_NPVARIANT(stringCopy(tmp), *result);\n+    STRINGZ_TO_NPVARIANT(mPlugin-\x3eGetSecurePort(), *result);\n   }\n   else if (name == Password_id) {\n-    char *tmp;\n-    mPlugin-\x3eGetPassword(&tmp);\n-    STRINGZ_TO_NPVARIANT(stringCopy(tmp), *result);\n+    STRINGZ_TO_NPVARIANT(mPlugin-\x3eGetPassword(), *result);\n   }\n   else if (name == CipherSuite_id) {\n-    char *tmp;\n-    mPlugin-\x3eGetCipherSuite(&tmp);\n-    STRINGZ_TO_NPVARIANT(stringCopy(tmp), *result);\n+    STRINGZ_TO_NPVARIANT(mPlugin-\x3eGetCipherSuite(), *result);\n   }\n   else if (name == SSLChannels_id) {\n-    char *tmp;\n-    mPlugin-\x3eGetSSLChannels(&tmp);\n-    STRINGZ_TO_NPVARIANT(stringCopy(tmp), *result);\n+    STRINGZ_TO_NPVARIANT(mPlugin-\x3eGetSSLChannels(), *result);\n   }\n   else if (name == TrustStore_id) {\n-      char *tmp;\n-      mPlugin-\x3eGetTrustStore(&tmp);\n-      STRINGZ_TO_NPVARIANT(stringCopy(tmp), *result);\n+      STRINGZ_TO_NPVARIANT(mPlugin-\x3eGetTrustStore(), *result);\n   }\n   else if (name == HostSubject_id) {\n-      char *tmp;\n-      mPlugin-\x3eGetHostSubject(&tmp);\n-      STRINGZ_TO_NPVARIANT(stringCopy(tmp), *result);\n+      STRINGZ_TO_NPVARIANT(mPlugin-\x3eGetHostSubject(), *result);\n   }\n   else if (name == fullScreen_id) {\n-    PRBool aFullScreen;\n-    mPlugin-\x3eGetFullScreen(&aFullScreen);\n-    BOOLEAN_TO_NPVARIANT(aFullScreen, *result);\n+    BOOLEAN_TO_NPVARIANT(mPlugin-\x3eGetFullScreen(), *result);\n   }\n   else if (name == AdminConsole_id) {\n-    PRBool aAdminConsole;\n-    mPlugin-\x3eGetAdminConsole(&aAdminConsole);\n-    BOOLEAN_TO_NPVARIANT(aAdminConsole, *result);\n+    BOOLEAN_TO_NPVARIANT(mPlugin-\x3eGetAdminConsole(), *result);\n   }\n   else if (name == Title_id) {\n-    char *tmp;\n-    mPlugin-\x3eGetTitle(&tmp);\n-    STRINGZ_TO_NPVARIANT(stringCopy(tmp), *result);\n+    STRINGZ_TO_NPVARIANT(mPlugin-\x3eGetTitle(), *result);\n   }\n   else if (name == dynamicMenu_id) {\n-    char *tmp;\n-    mPlugin-\x3eGetDynamicMenu(&tmp);\n-    STRINGZ_TO_NPVARIANT(stringCopy(tmp), *result);\n+    STRINGZ_TO_NPVARIANT(mPlugin-\x3eGetDynamicMenu(), *result);\n   }\n   else if (name == NumberOfMonitors_id) {\n-    char *tmp;\n-    mPlugin-\x3eGetNumberOfMonitors(&tmp);\n-    STRINGZ_TO_NPVARIANT(stringCopy(tmp), *result);\n+    STRINGZ_TO_NPVARIANT(mPlugin-\x3eGetNumberOfMonitors(), *result);\n   }\n   else if (name == GuestHostName_id) {\n-    char *tmp;\n-    mPlugin-\x3eGetGuestHostName(&tmp);\n-    STRINGZ_TO_NPVARIANT(stringCopy(tmp), *result);\n+    STRINGZ_TO_NPVARIANT(mPlugin-\x3eGetGuestHostName(), *result);\n   }\n   else if (name == HotKey_id) {\n-    char *tmp;\n-    mPlugin-\x3eGetHotKeys(&tmp);\n-    STRINGZ_TO_NPVARIANT(stringCopy(tmp), *result);\n+    STRINGZ_TO_NPVARIANT(mPlugin-\x3eGetHotKeys(), *result);\n   }\n   else if (name == NoTaskMgrExecution_id) {\n-    PRBool aNoTaskMgrExecution;\n-    mPlugin-\x3eGetNoTaskMgrExecution(&aNoTaskMgrExecution);\n-    BOOLEAN_TO_NPVARIANT(aNoTaskMgrExecution, *result);\n+    BOOLEAN_TO_NPVARIANT(mPlugin-\x3eGetNoTaskMgrExecution(), *result);\n   }\n   else if (name == SendCtrlAltdelete_id) {\n-    PRBool aSendCtrlAltdelete;\n-    mPlugin-\x3eGetSendCtrlAltdelete(&aSendCtrlAltdelete);  \n-    BOOLEAN_TO_NPVARIANT(aSendCtrlAltdelete, *result);\n+    BOOLEAN_TO_NPVARIANT(mPlugin-\x3eGetSendCtrlAltdelete(), *result);\n   }\n   else if (name == UsbListenPort_id) {    \n-    unsigned short port;\n-    mPlugin-\x3eGetUsbListenPort(&port);\n-    INT32_TO_NPVARIANT(port, *result);\n+    INT32_TO_NPVARIANT(mPlugin-\x3eGetUsbListenPort(), *result);\n   }\n   else if (name == UsbAutoShare_id) {\n-    PRBool tmp;\n-    mPlugin-\x3eGetUsbAutoShare(&tmp);\n-    BOOLEAN_TO_NPVARIANT(tmp, *result);\n+    BOOLEAN_TO_NPVARIANT(mPlugin-\x3eGetUsbAutoShare(), *result);\n   }\n   else {\n     return false;\ndiff --git a\/SpiceXPI\/src\/plugin\/plugin.cpp b\/SpiceXPI\/src\/plugin\/plugin.cpp\nindex 3a5b22b..660f840 100644\n--- a\/SpiceXPI\/src\/plugin\/plugin.cpp\n+++ b\/SpiceXPI\/src\/plugin\/plugin.cpp\n\x40\x40 -154,6 +154,17 \x40\x40 void NS_DestroyPluginInstance(nsPluginInstanceBase * aPlugin)\n     delete (nsPluginInstance *)aPlugin;\n }\n \n+namespace {\n+    char *stringCopy(const std::string &src)\n+    {\n+      char* dest = (char *) NPN_MemAlloc(src.length() + 1);\n+      if (dest) {\n+        strcpy(dest, src.c_str());\n+      }\n+      return dest;\n+    }\n+}\n+\n \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n \/\/\n \/\/ nsPluginInstance class implementation\n\x40\x40 -237,18 +248,18 \x40\x40 NPBool nsPluginInstance::init(NPWindow* aWindow)\n {\n     mInitialized = TRUE;\n \n-    memset (m_HostIP,0,256);\n-    memset (m_Port,0,256);\n-    memset (m_Password,0,256);\n-    memset (m_SecurePort,0,256);\n-    memset (m_CipherSuite,0,256);\n-    memset (m_SSLChannels,0,256);\n-    memset (m_TrustStore, 0 ,sizeof(m_TrustStore));\n-    memset (m_HostSubject, 0 ,sizeof(m_HostSubject));\n-    memset (m_Title,0,256);\n-    memset (m_DynamicMenu,0,256);\n-    memset (m_NumberOfMonitors,0,256);\n-    memset (m_GuestHostName,0,256);\n+    m_host_ip.clear();\n+    m_port.clear();\n+    m_password.clear();\n+    m_secure_port.clear();\n+    m_cipher_suite.clear();\n+    m_ssl_channels.clear();\n+    m_trust_store.clear();\n+    m_host_subject.clear();\n+    m_title.clear();\n+    m_dynamic_menu.clear();\n+    m_number_of_monitors.clear();\n+    m_guest_host_name.clear();\n \n     m_FullScreen = PR_FALSE;\n     m_AdminConsole = PR_FALSE;\n\x40\x40 -279,148 +290,145 \x40\x40 NPBool nsPluginInstance::isInitialized()\n }\n \n \/* attribute string strHost; *\/\n-void nsPluginInstance::GetHostIP(char * *aHostIP) {\n-    strncpy (*aHostIP, m_HostIP, sizeof (*aHostIP));\n+char *nsPluginInstance::GetHostIP() const {\n+    return stringCopy(m_host_ip);\n }\n void nsPluginInstance::SetHostIP(const char * aHostIP){\n-    strncpy(m_HostIP,aHostIP, sizeof (m_HostIP));\n+    m_host_ip = aHostIP;\n }\n \n \/* attribute string strPort; *\/\n-void nsPluginInstance::GetPort(char * *aPort) {\n-    strncpy (*aPort, m_Port, sizeof (*aPort));\n+char *nsPluginInstance::GetPort() const {\n+    return stringCopy(m_port);\n }\n void nsPluginInstance::SetPort(const char * aPort) {\n-    strncpy(m_Port,aPort, sizeof (m_Port));\n+    m_port = aPort;\n }\n \n \/* attribute ing SecurePort; *\/\n-void nsPluginInstance::GetSecurePort(char * *aSecurePort) {\n-    strncpy (*aSecurePort, m_SecurePort, sizeof (*aSecurePort));\n+char *nsPluginInstance::GetSecurePort() const {\n+    return stringCopy(m_secure_port);\n }\n void nsPluginInstance::SetSecurePort(const char * aSecurePort) {\n-    strncpy(m_SecurePort,aSecurePort, sizeof (m_SecurePort));\n+    m_secure_port = aSecurePort;\n }\n \n \n \/* attribute string strPassword; *\/\n-void nsPluginInstance::GetPassword(char * *aPassword) {\n-    strncpy (*aPassword, m_Password, sizeof (*aPassword));\n+char *nsPluginInstance::GetPassword() const {\n+    return stringCopy(m_password);\n }\n void nsPluginInstance::SetPassword(const char * aPassword) {\n-    strncpy(m_Password,aPassword, sizeof (m_Password));\n+    m_password = aPassword;\n }\n \n \/* attribute ing Port; *\/\n-void nsPluginInstance::GetCipherSuite(char * *aCipherSuite) {\n-    strncpy (*aCipherSuite, m_CipherSuite, sizeof (*aCipherSuite));\n+char *nsPluginInstance::GetCipherSuite() const {\n+    return stringCopy(m_cipher_suite);\n }\n void nsPluginInstance::SetCipherSuite(const char * aCipherSuite) {\n-    strncpy(m_CipherSuite,aCipherSuite, sizeof (m_CipherSuite));\n+    m_cipher_suite = aCipherSuite;\n }\n \n \/* attribute string strPort; *\/\n-void nsPluginInstance::GetSSLChannels(char * *aSSLChannels) {\n-    strncpy (*aSSLChannels, m_SSLChannels, sizeof (*aSSLChannels));\n+char *nsPluginInstance::GetSSLChannels() const {\n+    return stringCopy(m_ssl_channels);\n }\n void nsPluginInstance::SetSSLChannels(const char * aSSLChannels) {\n-    strncpy(m_SSLChannels,aSSLChannels, sizeof (m_SSLChannels));\n+    m_ssl_channels = aSSLChannels;\n }\n \n \/\/* attribute string TrustStore; *\/\n-void nsPluginInstance::GetTrustStore(char * *aTrustStore) {\n-    strncpy (*aTrustStore, m_TrustStore, sizeof (*aTrustStore));\n+char *nsPluginInstance::GetTrustStore() const {\n+    return stringCopy(m_trust_store);\n }\n void nsPluginInstance::SetTrustStore(const char * aTrustStore) {\n-    strncpy(m_TrustStore, aTrustStore, sizeof (m_TrustStore));\n+    m_trust_store = aTrustStore;\n }\n \n \/\/* attribute string HostSubject; *\/\n-void nsPluginInstance::GetHostSubject(char * *aHostSubject) {\n-    strncpy (*aHostSubject, m_HostSubject, sizeof (*aHostSubject));\n+char *nsPluginInstance::GetHostSubject() const {\n+    return stringCopy(m_host_subject);\n }\n void nsPluginInstance::SetHostSubject(const char * aHostSubject) {\n-    strncpy(m_HostSubject, aHostSubject, sizeof (m_HostSubject));\n+    m_host_subject = aHostSubject;\n }\n \n \/* attribute string strFullScreen; *\/\n-void nsPluginInstance::GetFullScreen(PRBool *aFullScreen) {\n-    *aFullScreen = m_FullScreen;\n+PRBool nsPluginInstance::GetFullScreen() const {\n+    return m_FullScreen;\n }\n void nsPluginInstance::SetFullScreen(PRBool aFullScreen) {\n     m_FullScreen = aFullScreen;\n }\n \n \/* attribute string strTitle; *\/\n-void nsPluginInstance::GetTitle(char * *aTitle) {\n-    strncpy (*aTitle, m_Title, sizeof (*aTitle));\n+char *nsPluginInstance::GetTitle() const {\n+    return stringCopy(m_title);\n }\n void nsPluginInstance::SetTitle(const char * aTitle) {\n-    strncpy(m_Title,aTitle, sizeof (m_Title));\n+    m_title = aTitle;\n }\n \n \/* attribute string strDynamicMenu; *\/\n-void nsPluginInstance::GetDynamicMenu(char * *aDynamicMenu) {\n-    strncpy (*aDynamicMenu, m_DynamicMenu, sizeof (*aDynamicMenu));\n+char *nsPluginInstance::GetDynamicMenu() const {\n+    return stringCopy(m_dynamic_menu);\n }\n void nsPluginInstance::SetDynamicMenu(const char * aDynamicMenu) {\n-    strncpy(m_DynamicMenu,aDynamicMenu, sizeof (m_DynamicMenu));\n+    m_dynamic_menu = aDynamicMenu;\n }\n \n \/* attribute string strNumberOfMonitors; *\/\n-void nsPluginInstance::GetNumberOfMonitors(char * *aNumberOfMonitors) {\n-    strncpy (*aNumberOfMonitors, m_NumberOfMonitors, sizeof (*aNumberOfMonitors));\n+char *nsPluginInstance::GetNumberOfMonitors() const {\n+    return stringCopy(m_number_of_monitors);\n }\n void nsPluginInstance::SetNumberOfMonitors(const char * aNumberOfMonitors) {\n-    strncpy(m_NumberOfMonitors,aNumberOfMonitors, sizeof (m_NumberOfMonitors));\n+    m_number_of_monitors = aNumberOfMonitors;\n }\n \n \/* attribute string strAdminConsole; *\/\n-void nsPluginInstance::GetAdminConsole(PRBool *aAdminConsole) {\n-    *aAdminConsole = m_AdminConsole;\n+PRBool nsPluginInstance::GetAdminConsole() const {\n+    return m_AdminConsole;\n }\n void nsPluginInstance::SetAdminConsole(PRBool aAdminConsole) {\n     m_AdminConsole = aAdminConsole;\n }\n \n \/* attribute string strGuestHostName; *\/\n-void nsPluginInstance::GetGuestHostName(char * *aGuestHostName) {\n-    strncpy (*aGuestHostName, m_GuestHostName, sizeof (*aGuestHostName));\n+char *nsPluginInstance::GetGuestHostName() const {\n+    return stringCopy(m_guest_host_name);\n }\n void nsPluginInstance::SetGuestHostName(const char * aGuestHostName) {\n-    strncpy(m_GuestHostName,aGuestHostName, sizeof (m_GuestHostName));\n+    m_guest_host_name = aGuestHostName;\n }\n \n \/* attribute string strHotKeys; *\/\n-void nsPluginInstance::GetHotKeys(char * *aHotKeys) {\n-    strncpy (*aHotKeys, m_HotKeys, sizeof (*aHotKeys));\n+char *nsPluginInstance::GetHotKeys() const {\n+    return stringCopy(m_hot_keys);\n }\n void nsPluginInstance::SetHotKeys(const char * aHotKeys) {\n-    strncpy(m_HotKeys,aHotKeys, sizeof (m_HotKeys));\n+    m_hot_keys = aHotKeys;\n }\n \n \/* attribute string strNoTaskMgrExecution; *\/\n-void nsPluginInstance::GetNoTaskMgrExecution(PRBool *aNoTaskMgrExecution) {\n-    *aNoTaskMgrExecution = m_NoTaskMgrExecution;\n+PRBool nsPluginInstance::GetNoTaskMgrExecution() const {\n+    return m_NoTaskMgrExecution;\n }\n void nsPluginInstance::SetNoTaskMgrExecution(PRBool aNoTaskMgrExecution) {\n     m_NoTaskMgrExecution = aNoTaskMgrExecution;\n-;\n }\n \n \/* attribute string strSendCtrlAltdelete; *\/\n-void nsPluginInstance::GetSendCtrlAltdelete(PRBool *aSendCtrlAltdelete) {\n-    *aSendCtrlAltdelete = m_SendCtrlAltdelete;\n+PRBool nsPluginInstance::GetSendCtrlAltdelete() const {\n+    return m_SendCtrlAltdelete;\n }\n void nsPluginInstance::SetSendCtrlAltdelete(PRBool aSendCtrlAltdelete) {\n     m_SendCtrlAltdelete = aSendCtrlAltdelete;\n }\n \n \/* attribute string UsbListenPort; *\/\n-void nsPluginInstance::GetUsbListenPort(unsigned short *aUsbPort) {\n-    if (aUsbPort != NULL) {\n-        *aUsbPort = m_UsbPort;\n-    }\n+unsigned short nsPluginInstance::GetUsbListenPort() const {\n+    return m_UsbPort;\n }\n \n void nsPluginInstance::SetUsbListenPort(unsigned short aUsbPort) {\n\x40\x40 -428,10 +436,8 \x40\x40 void nsPluginInstance::SetUsbListenPort(unsigned short aUsbPort) {\n }\n \n \/* attribute boolean UsbAutoShare; *\/\n-void nsPluginInstance::GetUsbAutoShare(PRBool *aUsbAutoShare) {\n-    if (aUsbAutoShare != NULL) {\n-        *aUsbAutoShare = m_UsbAutoShare;\n-    }\n+PRBool nsPluginInstance::GetUsbAutoShare() const {\n+    return m_UsbAutoShare;\n }\n \n void nsPluginInstance::SetUsbAutoShare(PRBool aUsbAutoShare) {\n\x40\x40 -479,7 +485,7 \x40\x40 void nsPluginInstance::send_value(uint32_t id, uint32_t value)\n     write_to_pipe(&msg, sizeof(msg));\n }\n \n-void nsPluginInstance::send_str(uint32_t id, char* str)\n+void nsPluginInstance::send_str(uint32_t id, const char* str)\n {\n     if (!strlen(str)) {\n         return;\n\x40\x40 -493,7 +499,7 \x40\x40 void nsPluginInstance::send_str(uint32_t id, char* str)\n     free(msg);\n }\n \n-void nsPluginInstance::send_wstr(uint32_t id, wchar_t* str)\n+void nsPluginInstance::send_wstr(uint32_t id, const wchar_t* str)\n {\n     size_t len = wcslen(str);\n     if (!len) {\n\x40\x40 -588,7 +594,7 \x40\x40 void nsPluginInstance::Connect() {\n         if (fd != -1) {\n             fp = fdopen (fd,\"w+\");\n             if (fp != NULL) {\n-                fputs(m_TrustStore, fp);\n+                fputs(m_trust_store.c_str(), fp);\n                 fflush(fp);\n                 fsync(fd);\n                 fclose(fp);\n\x40\x40 -605,39 +611,36 \x40\x40 void nsPluginInstance::Connect() {\n         }\n \n         send_init();\n-        send_str(CONTROLLER_HOST, m_HostIP);\n-        send_value(CONTROLLER_PORT, atoi(m_Port));\n-        send_value(CONTROLLER_SPORT, atoi(m_SecurePort));\n+        send_str(CONTROLLER_HOST, m_host_ip.c_str());\n+        send_value(CONTROLLER_PORT, atoi(m_port.c_str()));\n+        send_value(CONTROLLER_SPORT, atoi(m_secure_port.c_str()));\n         send_value(CONTROLLER_FULL_SCREEN,\n                    (m_FullScreen == PR_TRUE ? CONTROLLER_SET_FULL_SCREEN : 0) |\n                    (m_AdminConsole == PR_FALSE ? CONTROLLER_AUTO_DISPLAY_RES : 0));\n-        send_str(CONTROLLER_PASSWORD, m_Password);\n-        send_str(CONTROLLER_TLS_CIPHERS, m_CipherSuite);\n-        send_str(CONTROLLER_SET_TITLE, m_Title);\n+        send_str(CONTROLLER_PASSWORD, m_password.c_str());\n+        send_str(CONTROLLER_TLS_CIPHERS, m_cipher_suite.c_str());\n+        send_str(CONTROLLER_SET_TITLE, m_title.c_str());\n \n         \/*\n          * HACK -- remove leading s from m_SSLChannels, e.g. \"main\" not \"smain\"\n          * RHEL5 uses \'smain\' and \'sinpusts\n          * RHEL6 uses \'main\'  and \'inputs\'\n          *\/\n-        if (1) {\n-            int i;\n-            for (i=0; i\x3csizeof(m_SSLChannels); i++) {\n-                char *p = &m_SSLChannels[i];\n-                if (!*p)\n-                    break;\n-                if ((strncmp(\"smain\",   p, 5) == 0) ||\n-                    (strncmp(\"sinputs\", p, 7) == 0)) {\n-                    while ((*p = *(p+1)) != \'\\0\') \/* copy is done in condition *\/\n-                    p++;\n-                 }\n-            }\n-        } \/* HACK *\/\n+        std::size_t found = 0;\n+        while ((found = m_ssl_channels.find(\"smain\", found)) != std::string::npos) {\n+            m_ssl_channels.replace(found, 5, \"main\");\n+        }\n+\n+        found = 0;\n+        while ((found = m_ssl_channels.find(\"sinputs\", found)) != std::string::npos) {\n+            m_ssl_channels.replace(found, 7, \"inputs\");\n+        }\n+        \/* HACK *\/\n \n-        send_str(CONTROLLER_SECURE_CHANNELS, m_SSLChannels);\n+        send_str(CONTROLLER_SECURE_CHANNELS, m_ssl_channels.c_str());\n         send_str(CONTROLLER_CA_FILE, gs_TrustStoreFile);\n-        send_str(CONTROLLER_HOST_SUBJECT, m_HostSubject);\n-        send_str(CONTROLLER_HOTKEYS, m_HotKeys);\n+        send_str(CONTROLLER_HOST_SUBJECT, m_host_subject.c_str());\n+        send_str(CONTROLLER_HOTKEYS, m_hot_keys.c_str());\n         send_msg(CONTROLLER_CONNECT);\n         send_msg(CONTROLLER_SHOW);\n \n\x40\x40 -713,7 +716,7 \x40\x40 void nsPluginInstance::ExecuteUsbCtrl()\n         \/\/ TBD: Find executable path.\n         execl(\"\/usr\/bin\/usbrdrctrl\",\n             \"\/usr\/bin\/usbrdrctrl\",\n-            m_GuestHostName,\n+            m_guest_host_name.c_str(),\n             port,\n             \"-c\",\n             conn_name,\ndiff --git a\/SpiceXPI\/src\/plugin\/plugin.h b\/SpiceXPI\/src\/plugin\/plugin.h\nindex 0245c48..22c8102 100644\n--- a\/SpiceXPI\/src\/plugin\/plugin.h\n+++ b\/SpiceXPI\/src\/plugin\/plugin.h\n\x40\x40 -74,82 +74,82 \x40\x40 public:\n     void SetUsbFilter(const char * aUsbFilter);\n     \n     \/* attribute ing Host; *\/\n-    void GetHostIP(char * *aHosIPt);\n+    char *GetHostIP() const;\n     void SetHostIP(const char * aHostIP);\n     \n     \/* attribute ing Port; *\/\n-    void GetPort(char * *aPort);\n+    char *GetPort() const;\n     void SetPort(const char * aPort);\n     \n     \/* attribute ing Password; *\/\n-    void GetPassword(char * *aPassword);\n+    char *GetPassword() const;\n     void SetPassword(const char * aPassword);\n     \n     \/* attribute ing SecurePort; *\/\n-    void GetSecurePort(char * *aSecurePort);\n+    char *GetSecurePort() const;\n     void SetSecurePort(const char * aSecurePort);\n     \n     \/* attribute ing Port; *\/\n-    void GetCipherSuite(char * *aCipherSuite);\n+    char *GetCipherSuite() const;\n     void SetCipherSuite(const char * aCipherSuite);\n     \n     \/* attribute ing Port; *\/\n-    void GetSSLChannels(char * *aSSLChannels);\n+    char *GetSSLChannels() const;\n     void SetSSLChannels(const char * aSSLChannels);\n     \n     \n      \/* attribute ing TrustStore; *\/\n-    void GetTrustStore(char * *aTrustStore);\n+    char *GetTrustStore() const;\n     void SetTrustStore(const char * aTrustStore);\n     \n     \n      \/* attribute ing HostSubject; *\/\n-    void GetHostSubject(char * *aHostSubject);\n+    char *GetHostSubject() const;\n     void SetHostSubject(const char * aHostSubject);\n     \n     \n     \/* attribute ing FullScreen; *\/\n-    void GetFullScreen(PRBool *aFullScreen);\n+    PRBool GetFullScreen() const;\n     void SetFullScreen(PRBool aFullScreen);\n     \n     \/* attribute ing Port; *\/\n-    void GetTitle(char * *aTitle);\n+    char *GetTitle() const;\n     void SetTitle(const char * aTitle);\n     \n     \/* attribute ing Port; *\/\n-    void GetDynamicMenu(char * *aDynamicMenu);\n+    char *GetDynamicMenu() const;\n     void SetDynamicMenu(const char * aDynamicMenu);\n     \n     \/* attribute ing Port; *\/\n-    void GetNumberOfMonitors(char * *aNumberOfMonitors);\n+    char *GetNumberOfMonitors() const;\n     void SetNumberOfMonitors(const char * aNumberOfMonitors);\n     \n     \/* attribute ing AdminConsole; *\/\n-    void GetAdminConsole(PRBool *aAdminConsole);\n+    PRBool GetAdminConsole() const;\n     void SetAdminConsole(PRBool aAdminConsole);\n     \n     \/* attribute ing GuestHostName; *\/\n-    void GetGuestHostName(char * *aGuestHostName);\n+    char *GetGuestHostName() const;\n     void SetGuestHostName(const char * aGuestHostName);\n     \n     \/* attribute ing HotKeys; *\/\n-    void GetHotKeys(char * *aHotKeys);\n+    char *GetHotKeys() const;\n     void SetHotKeys(const char * aHotKeys);\n     \n     \/* attribute ing NoTaskMgrExecution; *\/\n-    void GetNoTaskMgrExecution(PRBool *aNoTaskMgrExecution);\n+    PRBool GetNoTaskMgrExecution() const;\n     void SetNoTaskMgrExecution(PRBool aNoTaskMgrExecution);\n     \n     \/* attribute ing SendCtrlAltdelete; *\/\n-    void GetSendCtrlAltdelete(PRBool *aSendCtrlAltdelete);\n+    PRBool GetSendCtrlAltdelete() const;\n     void SetSendCtrlAltdelete(PRBool aSendCtrlAltdelete);\n     \n     \/* attribute unsigned short UsbListenPort; *\/\n-    void GetUsbListenPort(unsigned short *aUsbPort);\n+    unsigned short GetUsbListenPort() const;\n     void SetUsbListenPort(unsigned short aUsbPort);\n     \n     \/* attribute boolean UsbAutoShare; *\/\n-    void GetUsbAutoShare(PRBool *aUsbAutoShare);\n+    PRBool GetUsbAutoShare() const;\n     void SetUsbAutoShare(PRBool aUsbAutoShare);\n     \n     NPObject* getScriptablePeer();\n\x40\x40 -165,8 +165,8 \x40\x40 private:\n     void send_init();\n     void send_msg(uint32_t id);\n     void send_value(uint32_t id, uint32_t value);\n-    void send_str(uint32_t id, char* str);\n-    void send_wstr(uint32_t id, wchar_t* str);\n+    void send_str(uint32_t id, const char* str);\n+    void send_wstr(uint32_t id, const wchar_t* str);\n   \n private:\n     \n\x40\x40 -183,21 +183,21 \x40\x40 private:\n     char m_strPort[256];\n     char m_strPassword[256];\n     PRBool m_fIPC;\n-    char m_HostIP[256];\n-    char m_Port[256];\n-    char m_Password[256];\n-    char m_SecurePort[256];\n-    char m_CipherSuite[256];\n-    char m_SSLChannels[256];\n-    char m_TrustStore[4096];\n-    char m_HostSubject[512];\n+    std::string m_host_ip;\n+    std::string m_port;\n+    std::string m_password;\n+    std::string m_secure_port;\n+    std::string m_cipher_suite;\n+    std::string m_ssl_channels;\n+    std::string m_trust_store;\n+    std::string m_host_subject;\n     PRBool m_FullScreen;\n     PRBool m_AdminConsole;\n-    char m_Title[256];\n-    char m_DynamicMenu[256];\n-    char m_NumberOfMonitors[256];\n-    char m_GuestHostName[256];\n-    char m_HotKeys[256];\n+    std::string m_title;\n+    std::string m_dynamic_menu;\n+    std::string m_number_of_monitors;\n+    std::string m_guest_host_name;\n+    std::string m_hot_keys;\n     PRBool m_NoTaskMgrExecution;\n     PRBool m_SendCtrlAltdelete;\n     unsigned short m_UsbPort;\n-- \n1.7.4\n\n';
var outputFormat = 'side-by-side'

function showDiff() {
    const targetElement = document.getElementById('diffsplay');
    const configuration = { drawFileList: true, matching: 'lines', outputFormat: outputFormat };
    const diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
    diff2htmlUi.draw();

    if(outputFormat === 'side-by-side') {
      outputFormat = 'line-by-line'
    } else {
      outputFormat = 'side-by-side'
    }
    $('#toggleview').html("Change view to " + outputFormat);
}
</script>
<div>
<a href="attachment.cgi?id=487006">View</a> |
Return to <a class="bz_bug_link
          
          bz_status_CLOSED  bz_closed
                              
    "
   title="CLOSED ERRATA - CVE-2011-1179 spice-xpi: unitialized pointer writes possible when getting plugin properties"
   href="show_bug.cgi?id=689931">bug 689931</a> |
<button id="toggleview" onclick='showDiff();'>line-by-line</button>
    | Differences between
    <form class="inline" action="attachment.cgi">
      <select name="oldid">
      <option value="---">Base</option>
        <option value="487006"
        >Resolution of the security issue (nsPluginInstance, getters and setters)</option>
        <option value="487008"
        >I also attach spec file patch for rpmbuild.</option>
      </select>
      and
      <select name="newid">
        <option value="487006" selected="selected"
        >Resolution of the security issue (nsPluginInstance, getters and setters)</option>
        <option value="487008"
        >I also attach spec file patch for rpmbuild.</option>
      </select>
      <input type="submit" id="diff" value="Diff">
      <input type="hidden" name="action" value="interdiff">
    </form>
</div>
<p id="diffsplay">
</p>
</div>

    <div id="footer">
      <div class="intro"></div>
<ul id="useful-links">
  <li id="links-actions"><ul class="links">
  <li class="form">
    
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_bottom" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_bottom" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_bottom"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

</ul>
  </li>

  




  
</ul>

      <div class="outro"></div>
    </div>
<script type="text/javascript">
function dt_submit() {
  var tables = $.fn.dataTable.tables( { visible: true, api: true } );
  $.each(tables.context, function() {
    var $myform = this.nTable.closest('form');

    // Checked checkboxes
    $.each(this.oInstance.$('input:checked'), function() {
      add_hidden(this.name, this.value, $myform)
    });

    // Inputs in selected rows
    $.each(this.oInstance.$('tr.selected'), function() {
      $(this).find('input').each( function() {
        add_hidden(this.name, this.value, $myform)
      });
    });

    // select boxes
    $.each(this.oInstance.$('select'), function() {
      if(($(this).val()!=="") && ($(this).val() !== 0)) {
        add_hidden(this.name, this.value, $myform);
      }
    });
  });
}

function add_hidden(nm, val, $frm) {
        $('<input />').attr('type', 'hidden')
          .attr('name', nm)
          .attr('value', val)
          .appendTo($frm);
}

$(document).ready(function() {
    $('form').submit(function( event ) {
        dt_submit();
    });
});

if (window.self !== window.top) {
    $('#header').addClass('bz_default_hidden');
    $('#footer').addClass('bz_default_hidden');
    $('.navigation').addClass('bz_default_hidden');
    $('body').css('background-image', 'none');
}
</script><script type="text/javascript">
$(document).ready(function() {
    $('select').not('.custom_search_condition select, #member_template select, #available_columns, #p2_component, #select_user_verify_class, #inclusion_to_remove, #exclusion_to_remove, #cc, #hide, #ack_col_edit #show, .noselectize, #j_top').each(function() {
        if(! $(this).hasClass('selectized')) {
            $(this).selectize({
                plugins: ['remove_button', 'minimum_search_length', 'extra_keys_control', 'related_fields', 'load_from_js'],
                selectOnTab: true,
                maxOptions: 'nolimit',
                minimum_search_length: 2,
                render: {
                    option: function(item, escape) {
                        var classes = "option";
                        var selected = this.items.indexOf(item.value) !== -1;
                        if(item.disabled) {
                            classes = classes + " bz_default_hidden" ;
                        }

                        return '<div class="' +  classes  + '" title="' + escape(item.title) + '" id="' + escape(item.id) + '" data-value="' + escape(item.value) + '">' +
                                    '<span>' + escape(item.text) + '</span>' +
                                '</div>';
                    }
                },
            });
        }
    });
});
</script>
  </body>
</html>