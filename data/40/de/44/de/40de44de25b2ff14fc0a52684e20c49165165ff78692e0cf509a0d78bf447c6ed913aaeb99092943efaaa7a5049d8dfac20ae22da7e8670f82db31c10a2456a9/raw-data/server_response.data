<!DOCTYPE html>
<html lang="en">
<head>
<meta name="ROBOTS" content="NOINDEX, NOFOLLOW" />
    <title>Xcode Release Notes</title>
    <meta http-equiv="X-UA-Compatible" content="IE=7">
    <meta charset="utf-8">
    <meta id="book-resource-type" name="book-resource-type" content="Release Note">
    <meta scheme="apple_ref" id="identifier" name="identifier" content="//apple_ref/doc/uid/TP40001051">
    <meta id="document-version" name="document-version" content="45.12.0">
    <meta id="build" name="build" content="c1e4c7a89af8f899a21cfa81fc33ba42" />
    <meta id="chapterId" name="chapterId" content="TP40001051-CH1">
    <meta id="date" name="date" content="2018-06-13">
    <meta id="description" name="description" content="Describes new features and known issues in Xcode.">
    <meta id="book-title" name="book-title" content="Xcode Release Notes">
    <meta id="book-root" name="book-root" content="../">
    <meta id="book-json" name="book-json" content="../book.json">
    <meta id="devcenter" name="devcenter" content="Mac Dev Center">
    <meta id="devcenter-url" name="devcenter-url" content="http://developer.apple.com/devcenter/mac">
    <meta id="reflib" name="reflib" content="Documentation Archive">
    <meta id="book-assignments" name="book-assignments" content="{Type/Release Note}, {Topic/Xcode/IDEs}">
    
    
    <meta id="copyright" name="copyright" content="Copyright 2018 Apple Inc. All Rights Reserved.">
    <meta id="xcode-display" name="xcode-display" content="render">
    <meta id="IndexTitle" name="IndexTitle" content="Xcode Release Notes">
    <meta id="resources-uri" name="resources-uri" content="../../../../Resources/1282">
    <link id="book-index-page" rel="Start" title="Xcode Release Notes" type="text/html" href="../index.html">
    <link id="next-page" rel="Next" type="text/html" href="RevisionHistory.html">
    <link id="previous-page" rel="Prev" type="text/html" href="">
    <link rel="stylesheet" type="text/css" href="../../../../Resources/1282/CSS/screen.css">
    
    <!-- xcode_css -->
    <link rel="stylesheet" type="text/css" href="../../../../Resources/1282/CSS/feedback.css">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	<meta id="platforms" name="platforms" content="Xcode Developer Tools">
</head>    
<body><a name="//apple_ref/doc/uid/TP40001051-CH1" title="Xcode Release Notes"></a>
    <div id="_omniture_top">
    <!-- SiteCatalyst code version: H.8. Copyright 1997-2006 Omniture, Inc. -->
    <script type="text/javascript">
    /* RSID: */
    var s_account="appleglobal,appleusdeveloper,dappdeveloperlib"
    </script>

    <script type="text/javascript" src="https://www.apple.com/metrics/scripts/s_code_h.js"></script>
    <script type="text/javascript">
    s.pageName=AC.Tracking.pageName();
    s.channel="www.us.developer"

    /************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
    var s_code=s.t();if(s_code)document.write(s_code)</script>
    <!-- End SiteCatalyst code version: H.8. -->
    </div>

    <div id="adcHeader" class="hideOnPrint hideInXcode">
        <div id='ssi_Header' class="hideInXcode unified">
            <a id="ssi_LibraryTitle" href='../../../../navigation/'>Documentation Archive</a>
            <a id="ssi_AppleDeveloperConnection" href='https://developer.apple.com/'>Developer</a>
            <div id='ssi_SearchButton' role="button" title="Search">Search</div>
        </div>
        <form id='ssi_SearchMenu' method='get' action='../../../../search/' accept-charset='utf-8'>
            <label for='adcsearch'>Search Documentation Archive</label>
            
            
    
            <input type='search' id='ssi_SearchField' name='q' accesskey='s' results='5' />
        </form>
    </div>

    <header id="header">
        <div id="title" role="banner">
            <h1>Xcode Release Notes</h1>
            <span id="file_links">
                <a id="PDF_link" role="button" tabindex='4' rel="alternate" title="Download PDF"><span id="pdf_icon"></span>PDF</a>
                <a id="Companion_link" role="button" tabindex='3' title="Download Companion File"><span id="companion_icon"></span>Companion File</a>
            </span>
        </div>
        <ul id="headerButtons" class="hideOnPrint" role="toolbar">
            <li id="toc_button" style="display:none">
                <button tabindex="5" id="table_of_contents" class="open" role="checkbox" aria-label="Show Table of Contents"><span class="disclosure"></span>Table of Contents</button>
            </li>
            <li id="jumpto_button" style="display:none" role="navigation"><select tabindex="6" id="jumpTo"><option value="top">Jump To&#133;</option></select></li>
            <li id="downloadSample_button" style="display:none">
                <a id="Sample_link"><button id="Sample_button">Download Sample Code</button></a>
            </li>
        </ul>
    </header>
    <nav id="tocContainer" tabindex="7">
        <ul id="toc" role="tree"></ul>
    </nav>

    <article id="contents" tabindex="0" role="main">
        <div id="pageNavigationLinks_top" class="pageNavigationLinks">
            <a class='nextLink' rel='next' href='RevisionHistory.html'>Next</a>
        </div>
        <a id="top" name="top"></a>
        <a id="INDEX" href="../index.html" style="display:none;"></a>
        
        <a name="//apple_ref/doc/uid/TP40001051" title="Xcode Release Notes"></a><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1" title="Xcode Release Notes"></a>
    <h1 id="pageTitle">Xcode Release Notes</h1><div class="importantbox clear"><aside><p><strong>Important:</strong>&nbsp;This document is no longer being updated. For the latest information about Apple SDKs, visit the <span class="content_text"><a href="https://developer.apple.com/documentation" class="urlLink" rel="external">documentation website</a></span>.</p><p></p></aside></div>
    <section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW3" title="Tools and Developer Resources"></a><h2 class="jump">Tools and Developer Resources</h2><p>You obtain Xcode 9.4.1 from the Mac App Store. It is a free download that installs directly into the Applications folder.</p><p>The Apple Developer Program provides everything you need to build and distribute your apps on the App Store for iPhone, iPad, Mac, and Apple Watch. Membership includes access to beta OS releases, advanced app capabilities, and tools to develop, test, and distribute apps and Safari extensions. For more information, visit <span class="content_text"><a href="https://developer.apple.com/programs/" class="urlLink" rel="external">Apple Developer Program</a></span>.</p><p>Apple provides the following resources to support development with Xcode:</p><ul class="ul"><li class="li"><p>Developer documentation is available both on the <span class="content_text"><a href="https://developer.apple.com/documentation" class="urlLink" rel="external">Apple Developer website</a></span> and from Xcode by choosing Help &gt; Developer Documentation.</p></li><li class="li"><p><span class="content_text"><a href="https://forums.developer.apple.com/" class="urlLink" rel="external">Apple Developer Forums</a></span>. Participate in discussions about developing for Apple platforms and using developer tools.</p></li><li class="li"><p><span class="content_text"><a href="http://bugreport.apple.com" class="urlLink" rel="external">Bug Reporter</a></span>. Report issues, enhancement requests, and feedback to Apple. Provide detailed information, including the system and developer tools version information, and any relevant crash logs or console messages.</p></li><li class="li"><p><span class="content_text"><a href="http://developer.apple.com" class="browserLink" >Apple Developer</a></span> website. Get the latest development information as well as technical documentation for Xcode.</p></li><li class="li"><p><span class="content_text"><a href="https://developer.apple.com/xcode/" class="urlLink" rel="external">Xcode homepage</a></span>. Get high-level information about the latest release of Xcode. Download current and beta Xcode releases.</p></li><li class="li"><p>For help with using Xcode, Simulator, or Instruments, choose Help &gt; <em>app name</em> Help.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW875" title="Bug Reporting"></a><h2 class="jump">Bug Reporting</h2><p>For issues not mentioned in <span class="content_text"><a href="#//apple_ref/doc/uid/TP40001051-CH1-SW1" data-renderer-version="1">Xcode Release Notes</a></span>, please file bugs through the Apple Developer website <span class="content_text"><a href="https://developer.apple.com/bug-reporting/" class="urlLink" rel="external">https://developer.apple.com/bug-reporting/</a></span>.</p><p>When filing a bug, please include the full version number in the bug title and in the description. To find the version number, choose Xcode &gt; About Xcode, the full version number including the part in parenthesis is in the window that appears. The full version number looks like <em>9.4.1 (9Fxxx)</em>.</p><p>Additionally, you may discuss these issues in the Apple Developer Forums: <span class="content_text"><a href="https://forums.developer.apple.com/welcome" class="urlLink" rel="external">https://forums.developer.apple.com/welcome</a></span>. To get more information about iCloud for Developers, go to <span class="content_text"><a href="https://developer.apple.com/icloud" class="urlLink" rel="external">https://developer.apple.com/icloud</a></span>.</p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW278" title="Release Notes Updates"></a><h2 class="jump">Release Notes Updates</h2><p></p><p><em>Xcode Release Notes</em> is sometimes updated after a release is distributed. Please check this document for updates.</p><p><em>Revision: XC941 - XRN1</em></p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW876" title="Xcode 9"></a><h2 class="jump">Xcode 9</h2><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW877" title="Xcode 9 Compatibility"></a><h3 class="jump">Xcode 9 Compatibility</h3><ul class="ul"><li class="li"><p>Xcode 9 requires a Mac running macOS 10.13.2 or later. </p></li><li class="li"><p>Xcode 9 includes SDKs for iOS 11.4, watchOS 4.3, macOS 10.13, and tvOS 11.4. </p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_1" title="Xcode 9.4.1"></a><h3 class="jump">Xcode 9.4.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_2" title="General"></a><h4 class="jump">General</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_3" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Updated Git to version 2.15.2 to address CVE-2018-11233 and CVE-2018-11235. (40631597)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_4" title="Xcode 9.4"></a><h3 class="jump">Xcode 9.4</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_5" title="Asset Catalog"></a><h4 class="jump">Asset Catalog</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_6" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Asset catalogs with ARKit assets can compile if the deployment version is less than 11.3. (39218934)</p></li><li class="li"><p>Resolved an issue that could cause a crash when dragging a <code>.gif</code> image into a Sticker Pack in an Asset Catalog. (38820366)</p>
</li><li class="li"><p>Resolved an issue that could cause progress to get stuck while editing AR assets in an Asset Catalog. (38393995)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_7" title="ClassKit Support"></a><h4 class="jump">ClassKit Support</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_8" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode 9.4 adds support for developing apps with ClassKit.</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_9" title="Core Data"></a><h4 class="jump">Core Data</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_10" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Adding a fetch request to a Core Data model containing a UUID or URI attribute will not crash Xcode. (39470899)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_11" title="General"></a><h4 class="jump">General</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_12" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed navigation of items with extensions in the Find navigator. (39601956)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_13" title="Instruments"></a><h4 class="jump">Instruments</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_14" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Resolved an issue where loading a saved trace could result in an empty Symbols panel. (38813311)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_15" title="Signing and Provisioning"></a><h4 class="jump">Signing and Provisioning</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_16" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed an issue where exporting an app using Ad Hoc distribution would fail with an error about missing the <code>beta-reports-active</code> entitlement. (39462609)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_17" title="Swift Compiler"></a><h4 class="jump">Swift Compiler</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_18" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>In some situations, the compiler may crash during code generation for generic enumerations with multiple payloads inside generic functions where there are redundant protocol requirements or same-type constraints. In the crash log backtrace, this will show up as a crash inside <code>MultiPayloadEnumImplStrategy::emitIndirectInitialize</code>. (39040680)</p>
<p><em>Workaround</em>: Make the affected enumeration an <code>indirect</code> enumeration.</p>
</li><li class="li"><p>Defining a private class nested inside an extension constrained with same-type constraints may lead to a runtime crash when the class is initialized. (39208961)</p><p>For example:</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>extension Optional where Wrapped == NSData {<span></span></pre></td></tr><tr><td scope="row"><pre>    private class Foo {}<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>let x = Optional&lt;NSData&gt;.Foo()<span></span></pre></td></tr></table></div><p><em>Workaround</em>: Move the class definition out of nested position, and nest a type alias to the class instead:</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>private class _Optional_NSData_Foo {}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>extension Optional where Wrapped == NSData {<span></span></pre></td></tr><tr><td scope="row"><pre>  typealias Foo = _Optional_NSData_Foo<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>let x = Optional&lt;NSData&gt;.Foo()<span></span></pre></td></tr></table></div></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_19" title="Xcode 9.3.1"></a><h3 class="jump">Xcode 9.3.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_20" title="General"></a><h4 class="jump">General</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_21" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed an issue causing the user to have to log in with their Apple ID repeatedly. (39573406)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_22" title="Playgrounds"></a><h4 class="jump">Playgrounds</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_23" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Addressed an issue that would cause Xcode to hang when using Playgrounds. (37822125)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_24" title="Xcode 9.3"></a><h3 class="jump">Xcode 9.3</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_25" title="New 64-bit testing mode"></a><h4 class="jump">New 64-bit testing mode</h4><p>Developers can use a new 64-bit testing mode in macOS 10.13.4 to test software for 64-bit compatibility.</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_106" title="Note"></a><p><strong>Note:</strong>&nbsp;It is strongly recommended that this mode is enabled only by developers or experienced IT administrators.</p><p></p></aside></div><p>To enable the 64-bit testing mode:</p><ol class="ol"><li class="li"><p>Boot to Recovery OS by restarting your machine and holding down the Command and R keys at startup.</p></li><li class="li"><p>Launch Terminal</p></li><li class="li"><p>Execute the following command: <code>nvram boot-args="-no32exec"</code></p></li><li class="li"><p>Restart the machine</p></li></ol><p>The 64-bit testing mode prevents 32-bit processes from launching. Launching an app that depends on 32-bit software results in a notification that the application can't be opened. Other types of software may fail silently, such as 32-bit versions of Dashboard and WebKit plugins, preference panes, and background processes.</p><p>Disable the test mode once the software is updated to work in 64-bit.</p><p>To disable the 64-bit testing mode:</p><ol class="ol"><li class="li"><p>Boot to Recovery OS by restarting your machine and holding down the Command and R keys at startup.</p></li><li class="li"><p>Launch Terminal</p></li><li class="li"><p>Execute the following command: <code>nvram boot-args=""</code></p></li><li class="li"><p>Restart the machine</p></li></ol><p>In future releases, the 64-bit testing mode may provide additional information for the developer to help test and qualify software.</p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_26" title="Xcode changes for deprecation of macOS 32-bit support"></a><h4 class="jump">Xcode changes for deprecation of macOS 32-bit support</h4><ul class="ul"><li class="li"><p>Removed the 32-bit option from the Architectures build settings UI. (35517385)</p></li><li class="li"><p>Building for 32-bit architecture on macOS now emits a warning. (35709244)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_27" title="Deprecation and Removal Warnings"></a><h4 class="jump">Deprecation and Removal Warnings</h4><ul class="ul"><li class="li"><p>The Core Animation instrument and template have been deprecated in Instruments.  The functionality previously under "Debug Options" has moved to Xcode, under "Debug &gt; View Debugging &gt; Rendering". (22971414)</p>
</li><li class="li"><p>The OpenGL ES Analyzer Instrument is no longer supported. It has been replaced by the GPU Frame Debugger in Xcode and will be removed in a future version of Instruments. (35104029)</p>
</li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_28" title="General"></a><h4 class="jump">General</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_29" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The new <span class="content_text"><a href="http://help.apple.com/xcode/mac/current/#/dev36a5a9141" class="urlLink" rel="external">Energy organizer</a></span> shows logs generated when your app or app extension exceeds a reasonable CPU threshold in the foreground or background causing battery drain on your user's device. (28640769)</p><p>The <span class="content_text"><a href="http://help.apple.com/xcode/mac/current/#/dev36a5a9141" class="urlLink" rel="external">Energy organizer</a></span> features include:</p><ul class="nested"><li class="nested li"><p>Energy logs are reported for your app when distributed on TestFlight or the App Store.</p></li><li class="nested li"><p>Server-side symbolication when uploading symbol information to Apple.</p></li><li class="nested li"><p>Automatic client-side symbolication when symbol information is saved locally.</p></li><li class="nested li"><p>CPU sample reports that are generated when your process is terminated for high CPU usage while the app is in the background.</p></li><li class="nested li"><p>Grouping logs with similar backtraces in energy reports.</p></li><li class="nested li"><p>Viewing the heaviest backtrace of CPU sample logs in the Debug navigator.</p></li><li class="nested li"><p>Compressing log stack frames by non-user stack frames and low sample count stack frames.</p></li></ul></li><li class="li"><p>Code coverage can now select the targets to include in a code coverage report. (27752500)</p><p>To configure the targets to include:</p><ol class="ol"><li class="li"><p>Open the Scheme editor.</p></li><li class="li"><p>Select the Test action.</p></li><li class="li"><p>Show the Options pane.</p></li><li class="li"><p>In the pane, enable Code Coverage.</p></li><li class="li"><p>In the pop-up menu, choose "some targets."</p></li><li class="li"><p>Select the targets for the code coverage report.</p></li></ol></li><li class="li"><p>Text in the Code Snippets library filter bar now includes code completion shortcuts. (8147546)</p></li><li class="li"><p>User-defined code snippets now appear at the top of the library, rather than the bottom. (8901028)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_30" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Users may have to log in with their Apple ID repeatedly. (39347493)</p><p><em>Workaround</em>: Set this user default in Terminal:</p><p><code>defaults write com.apple.dt.Xcode DVTDeveloperAccountUseKeychainService -bool NO</code></p><p>Then quit and relaunch Xcode. You may need to authenticate your Apple ID once more.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_31" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Xcode 9.3 adds a new <code>IDEWorkspaceChecks.plist</code> file to a workspace's shared data, to store the state of necessary workspace checks. Committing this file to source control will prevent unnecessary rerunning of those checks for each user opening the workspace. (37293167)</p></li><li class="li"><p>Resolved a performance issue when switching away from Issue Navigator into other Navigators, especially the Find Navigator. (35363603)</p></li><li class="li"><p>The source editor find and replace control now supports Full Keyboard Access. (33666790)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_32" title="Apple LLVM Compiler"></a><h4 class="jump">Apple LLVM Compiler</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_33" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>A class and instance method with the same selector on an Objective-C protocol are both callable on a class that implements that protocol. (34596043)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_34" title="Asset Catalog"></a><h4 class="jump">Asset Catalog</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_35" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Dragging an image from Finder to an empty sticker pack is rejected. Xcode crashes when dragging an image in the Project navigator to an empty Sticker pack. (38509180)</p><p><em>Workaround</em>: Create a new sticker in the empty sticker pack, then drag the image from Finder or Project navigator into the new sticker well.</p>
</li><li class="li"><p>App Icon set in Asset Catalog in a new watchOS template app does not include the App store icon. (37480050)</p><p><em>Workaround</em>: Select watchOS 1.0 and later in the Attributes Inspector, this will generate the App store icon, set it back to watchOS 2.0 and later if only watchOS 2.0 is supported.</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_36" title="Build System"></a><h4 class="jump">Build System</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_37" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode now runs more Swift build tasks in parallel with other commands. This may improve build times for Swift projects, but may also increase memory use during the build. This feature can be disabled from Terminal by setting a user default with <code>defaults write com.apple.dt.Xcode BuildSystemScheduleInherentlyParallelCommandsSerially -bool YES</code>. (35551983)</p></li><li class="li"><p>Added an option to optimizing by size (<code>-Osize</code>) to the Optimization Level for the Swift compiler to the Build Settings pane of the Project editor. When this mode is selected the Swift compiler minimizes the size of compiled code. (36887476)</p>
<p>The choice for compiling Swift code by file or by module moved from the Optimization Level setting to Compilation Mode, which is a new setting for the Swift compiler in the Build Settings pane of the Project editor. Previously this choice was combined with others in the Optimization Level setting. Compiling by file enables building only the files that changed, enabling faster builds. Compiling by module enables better optimization. (36887476)</p>
</li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_38" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When an .xcconfig file contains multiple assignments of the same build setting, later assignments using <code>$(inherited)</code> will inherit from earlier assignments when using the new build system. The old build system discards all except the last assignment.  This can cause the evaluated result to be different if <code>$(inherited)</code> is used in the value.  You can enable a setting to emit a warning if any of these cases are found by running <code>defaults write com.apple.dt.XCBuild EnableCompatibilityWarningsForXCBuildTransition YES</code>. (37833468)</p></li><li class="li"><p>When the new build system is enabled, changing the <code>Info.plist</code> file doesn’t cause Xcode to re-sign your app. This may cause your app to crash on launch after an incremental build. (34016924)</p><p><em>Workaround</em>: After changing the <code>Info.plist</code> file, make a change to your app’s source code to trigger recompilation and re-signing, or perform a clean rebuild.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_39" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The new build system now supports all of the Product &gt; Perform Action &gt; Compile, Analyze, Preprocess, or Assemble operations for single-files. (31072405)</p></li><li class="li"><p>Improved new build system rebuild times for configurations which have the "DWARF with dSYM File" build setting enabled by performing only the necessary work for dSYM generation during incremental rebuilds. (30668974)</p>
</li><li class="li"><p>Prevented Spotlight from indexing the module cache folder for builds, by renaming the folder to <code>ModuleCache.noindex</code> which results in an improvement in overall build performance. (35212165)</p>
</li><li class="li"><p>Fixed an issue in which the Clean Build Folder command could fail to complete. (36117298)</p>
</li><li class="li"><p>When using the new build system, navigating from a build issue to a header now correctly opens the header in the project source instead of the copy built into the product. (29060887)</p>
</li><li class="li"><p>Fixed a bug which would sometimes cause the <code>-showBuildSettings</code> option to <code>xcodebuild</code> to hang. (33881306)</p>
</li><li class="li"><p>Single file actions in the new build system use the active run destination. (23767795)</p>
</li><li class="li"><p>Fixed several issues which could cause Convert to Current Swift Syntax not to work when using the new build system. (36265451)</p>
</li><li class="li"><p>Fixed an issue in the new build system that incorrectly rebuilt files on the next build after a build error. (35319783)</p>
</li><li class="li"><p>"Build system information" errors from the new build system now appear in both the Issue Navigator and in the build logs. (34873210)</p>
</li><li class="li"><p>Fixed an issue in which using Build and Analyze with the new build system could cause Xcode to crash. (32920792)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_40" title="Code Completion"></a><h4 class="jump">Code Completion</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_41" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed a problem with code completion on a line containing emoji or non-ASCII characters. (24906321)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_42" title="Core Data"></a><h4 class="jump">Core Data</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_43" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>In the Core Data editor, property settings for <code>NSFetchRequest</code> are now included in the compiled data model. (13432055)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_44" title="Debugging"></a><h4 class="jump">Debugging</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_45" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Memory graph debugging now uses a cleaner, more compact layout for non-cycle graphs. (36987034)</p></li><li class="li"><p>Added new Core Animation debug options for iOS and tvOS devices that were previously available only in the Core Animation Instrument. Choose Debug &gt; View Debugging &gt; Rendering to access the options. (27976406)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_46" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Enhanced the performance of the <code>po</code> command when printing Objective-C objects in the console. (34197161)</p></li><li class="li"><p>NSLayoutConstraints listed for a selected view when debugging an app’s view hierarchy now show their identifier in the inspector. (34736382)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_47" title="Devices"></a><h4 class="jump">Devices</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_48" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>The Connect via Network checkbox may become unchecked when first enabling network development for a device. (36797900)</p>
<p><em>Workaround</em>: Check the checkbox again.</p>
</li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_49" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The Activity view no longer displays "Untitled" instead of the progress of a device operation, such as an app install. (35620763)</p></li><li class="li"><p>Xcode may fail to capture a screen shot from an attached device. (36632000)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_50" title="Help"></a><h4 class="jump">Help</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_51" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Documentation for the HealthKit framework is missing from the Developer Documentation window. (39005708)</p><p><em>Workaround</em>: Read <span class="content_text"><a href="https://developer.apple.com/documentation/healthkit" class="urlLink" rel="external">the HealthKit framework documentation</a></span> on the web. </p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_52" title="Instruments"></a><h4 class="jump">Instruments</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_53" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The "Import Sampler Data..." menu item has been removed from Instruments. Open the sample text output by selecting through the normal "Open..." panel. (36866911)</p>
</li><li class="li"><p>The Cocoa Layout template has been removed. The instrument is still available in the Library palette. To use the Cocoa Layout instrument, open the Library palette, create a document using the Blank template, and drag in the Cocoa Layout instrument from the library to the new document. (21963317)</p>
</li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_54" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>The "Energy Log" instrument doesn't work for iPhone X and iPhone 8. (36569629)</p>
</li><li class="li"><p>The SceneKit instrument shows a warning icon on the right of the target selection with messages “view settings could not be restored”. The SceneKit Instrument still works correctly and the warning can be safely ignored. (38081921)</p>
</li><li class="li"><p>Profiling iOS framework unit tests works only for the Release configuration. (26883826)</p>
<p><em>Workaround</em>: Modify the scheme's Test option to use the Release build configuration.</p>
<ol class="ol">
<li class="li"><p>Product -&gt; Scheme -&gt; Edit Scheme…</p></li>
<li class="li"><p>Select the Test tab.</p></li>
<li class="li"><p>Change the Build Configuration to be Release.</p></li>
<li class="li"><p>Attempt to profile the framework unit test again.</p></li>
</ol>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_55" title="Interface Builder"></a><h4 class="jump">Interface Builder</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_56" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Using a color from an asset catalog in the large title text attributes of a UINavigationBar results in a runtime exception. (35645022)</p></li><li class="li"><p>SKView from the object library does not behave correctly in Mac documents. (37127877)</p><p><em>Workaround</em>: Drag out a custom view and set its class to SKView.</p>
</li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_57" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Toolbars or multiline labels in stack views no longer result in an Auto Layout misalignment on the canvas. This issue resulted in problems such as zero width multi-line labels, or in extra tall toolbars when an iPhone X was selected in the device bar. (35377301)</p>
</li><li class="li"><p>Placeholder text for <code>UITextField</code> now appears correctly on the Interface Builder canvas. (35909580)</p>
</li><li class="li"><p>Changing a segue from "Show Detail" to "Show" no longer keeps the action selector for Show Detail. This default action will be automatically restored when compiling or saving a storyboard with Xcode 9.3 or later. (23505175)</p></li><li class="li"><p>Removed spurious warnings for using <code>NSImageNameTouchBar*</code> constants in Touch Bar. (35773248)</p>
</li><li class="li"><p>System-provided fonts are no longer archived in the <code>&lt;customFonts&gt;</code> XML element for iOS and tvOS documents. This resolves exceptions in <code>libFontParser.dylib</code> when launching apps. (35126633)</p>
</li><li class="li"><p>Fixed an issue compiling macOS storyboards that resulted in incorrectly logging: "Unknown Window class (null) in Interface Builder file, creating generic Window instead." (34994636)</p>
</li><li class="li"><p>Increased the helpfulness of the VoiceOver descriptions and tooltips for control and text alignment items in the Attributes inspector. (29782636)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_58" title="Localization"></a><h4 class="jump">Localization</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_59" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added the LOCALIZED_STRING_MACRO_NAMES build setting for adding custom localized string macros in addition to the default <code>NSLocalizedString</code> and <code>CFLocalizedString</code> families of macros. Each entry in the build setting is the base name for a set of four localization macros. For example, adding <code>MyErrorString</code> to the list enables using <code>MyErrorString()</code>, <code>MyErrorStringFromTable()</code>, <code>MyErrorStringFromTableInBundle()</code>, and <code>MyErrorStringWithDefaultValue()</code> to localize strings in your project. (14842118)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_60" title="Organizer"></a><h4 class="jump">Organizer</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_61" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Resolved a crash that could occur when selecting a log in the Crashes organizer. (34869501)</p>
</li><li class="li"><p>Resolved a crash that could occur when selecting the app version in the Crashes organizer. (35786034)</p>
</li><li class="li"><p>Resolved an issue that resulted in the incorrect error message "No accounts with iTunes Connect access have been found [...]" when uploading an app to the App Store. (18369136)</p>
</li><li class="li"><p>Improved the performance of the Organizer window when scrolling and resizing, and when loading many archives or many iTunes Connect apps. (18978906)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_62" title="Playgrounds"></a><h4 class="jump">Playgrounds</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_63" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Selecting text contained in rendered markup in the Find Navigator may not work as expected. (36382602)</p>
<p><em>Workaround</em>: Choose "Editor &gt; Show Raw Markup" before selecting the text.</p>
</li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_64" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Playgrounds with nested functions run correctly when using a custom toolchain from swift.org. (28784059)</p>
</li><li class="li"><p>tvOS playgrounds now display their live views at the correct size. (35951627)</p>
</li><li class="li"><p>Find Navigator now correctly searches all playground page content. (35751178)</p>
</li><li class="li"><p>Fixed a crash that occurred when deleting text in a playground page that is displayed in multiple tabs. (34364618)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_65" title="Project Model"></a><h4 class="jump">Project Model</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_66" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Projects created in Xcode 9.3 use a new project format that is incompatible with earlier versions of Xcode. To open projects in earlier versions, change the project format by selecting the project in the Project navigator, opening the Document inspector, and selecting the desired format from the Project Format pop-up menu. (35207662)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_67" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>When adding a framework to a target, Xcode also checks that the path of the directory containing the added framework doesn't already exist in SYSTEM_FRAMEWORK_SEARCH_PATHS before adding that path to FRAMEWORK_SEARCH_PATHS. (29851042)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_68" title="Provisioning"></a><h4 class="jump">Provisioning</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_69" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode provides a new quick look preview generator for provisioning profiles. The preview includes the app identifier, expiration date, certificates, device identifiers, and entitlements encoded within the profile. (37042581)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_70" title="Refactoring"></a><h4 class="jump">Refactoring</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_71" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed a problem where a "Rename Failed" error would occur the second time you used the Refactor &gt; Rename command. (36304316)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_72" title="Server"></a><h4 class="jump">Server</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_73" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Updated the Report navigator for Xcode Server integrations to show repository commits, logs, and sub-nodes for test and coverage results. (34493798)</p></li><li class="li"><p>The debugger on macOS now requires the entitlement <code>com.apple.security.get-task-allow</code> to attach to apps built for macOS or for iOS, tvOS or watchOS apps built for Simulator. Xcode automatically injects this entitlement to your builds. The entitlement is stripped from apps distributed using the Organizer window. (34638816)</p>
<p>To disable Xcode injecting the entitlement, set  <code>CODE_SIGN_INJECT_BASE_ENTITLEMENTS</code> to <code><!--a  -->NO<!--/a--></code> in the build settings for the target or app. (34638816)</p>
</li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_74" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When starting Xcode Server, an alert may appear asking to provide the passphrase to access the xcsd keychain. (37795722)</p>
<p><em>Workaround</em>: Enter the passphrase which is stored in /Library/Developer/XcodeServer/SharedSecrets/XCSDKeychainSharedSecret.</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_75" title="Signing and Distribution"></a><h4 class="jump">Signing and Distribution</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_76" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Resolves an issue that would cause Xcode to sign with entitlements from a different build configuration. (37324488)</p>
</li><li class="li"><p>Resolves an issue where modifying your entitlements file sometimes did not trigger code signing to occur during your next build. (36882851)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_77" title="Simulator"></a><h4 class="jump">Simulator</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_78" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>On macOS 10.13.4, booting iOS 11 and later in the Simulator may take several minutes the first time. (35628711)</p>
</li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_79" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Improved the visual quality of scaled simulated iOS devices resulting in fewer visual artifacts. To get the best results, turn off Optimize Rendering in the Debug menu. (35295090)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_80" title="Source Control"></a><h4 class="jump">Source Control</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_81" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The Comparison View of the Version Editor has been redesigned with improved scrolling and visual styling. (35254006)</p></li><li class="li"><p>Renamed user interface elements to clarify the information presented. In the Version editor "Blame View" is now "Authors View" and in the Source editor "Show Blame For Line" is now "Show Last Change For Line." (35031446)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_82" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Reverting changes in the Comparison View now restores the original whitespace even if it doesn't match the current formatting options. (35009545)</p>
</li><li class="li"><p>Git checkout operations no longer require committing changes to files that are unaffected by the operation. (35837784)</p>
</li><li class="li"><p>Tagging a branch in Git now tags the most recent available revision of that branch. (35250057)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_83" title="Source Editor"></a><h4 class="jump">Source Editor</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_84" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added Callers to the Structured Selection Action Popover. You can now command-click on functions, methods, and properties and quickly navigate to their callers. (32587508)</p>
</li><li class="li"><p>Text anti-aliasing can be disabled in the source editor by opening Terminal and running the following command:</p>
<p><code>defaults write com.apple.dt.Xcode SourceEditorDisableAntialiasing -bool YES</code></p>
<p>Set the default to <code><!--a  -->NO<!--/a--></code> to turn anti-aliasing on. (31378200)</p>
</li><li class="li"><p>Compiler notes can now be viewed in the source editor by clicking on the diagnostic icon. (35898603)</p>
</li><li class="li"><p>Enhanced Jump to Definition to show the file and line number for each result to help distinguish similar results. (32020190)</p>
</li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_85" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed a problem where Undoing would not cancel an Edit All in Scope session when undoing past changes made with Edit All in Scope. (31906590)</p>
</li><li class="li"><p>Code coverage highlighting in a group of lines in the source editor now works correctly when a group contains multiple subranges with different highlighting. (34802960)</p>
</li><li class="li"><p>Fixed a problem with Edit All in Scope where typing was not coalesced into a single undo group. (31364117)</p>
</li><li class="li"><p>Significantly improved performance editing and navigating large, multi-megabyte files. (31689732)</p>
</li><li class="li"><p>Fixed a problem where printing would cut off the right and bottom edges of each page. (35427028)</p>
</li><li class="li"><p>Fixed a problem where scrolling by a page using Option-Page Up or Option-Page Down would scroll too far. (34873829)</p>
</li><li class="li"><p>Fixed a problem where copying text would not always preserve the syntax coloring when pasted into Keynote. (32823164)</p>
</li><li class="li"><p>Live issues no longer remain in the source editor after a build succeeds. (35810806)</p>
</li><li class="li"><p>Improved the reliability of Command-Click in the source editor. (35937969)</p>
</li><li class="li"><p>The source editor page guide is now positioned correctly when line wrapping is disabled and the editor is horizontally scrolled. (32699889)</p>
</li><li class="li"><p>Improved the accessibility of breakpoints, test statuses, issues, and warnings in the source editor. (33593039)</p>
</li><li class="li"><p>Fixed a problem where the source editor did not respect the "Reduce Motion" System Preference when folding code. (35474751)</p>
</li><li class="li"><p>Code coverage highlights in the source editor are no longer shown in the incorrect columns. (33040660)</p>
</li><li class="li"><p>Resolved an issue where breakpoints may appear on the incorrect line when code is folded. (38082660)</p>
</li><li class="li"><p>Improved the scroll bar accuracy for scrolling in large files. (32473788)</p>
</li><li class="li"><p>The code coverage ribbon now shows correctly when line wrapping is disabled in the source editor. (20928769)</p>
</li><li class="li"><p>Copying and pasting the contents of entire documents no longer adds an additional trailing newline. (36042915)</p>
</li><li class="li"><p>Fixed a problem where Quick Help, Find Call Hierarchy, Reveal in Symbol Navigator, and Copy Symbol Name would give information for the wrong symbol. (31889593)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_86" title="Swift Compiler"></a><h4 class="jump">Swift Compiler</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_87" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Implicitly unwrapped optionals may be used only as a top level type for properties, function parameters, function return values, and variables. Nesting them inside other types is deprecated and results in a warning. This will change to an error in a later version of Swift. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-3023" class="urlLink" rel="external">SR-3023</a></span>, <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0054-abolish-iuo.md" class="urlLink" rel="external">SE-0054</a></span>) </p>
</li><li class="li"><p>Swift now consistently enforces that you can’t override a computed property with a stored property, even when the overridden property is marked as <code>lazy</code>. If you need to use a stored value when overriding a property, define a separate property as backing storage and make it available through your override. (35870371)</p>
</li><li class="li"><p>The type checker now resolves a function overload as ambiguous when there is an overload that returns an optional type, another overload that returns a function type, and the function is called in a context where either overload's return type could be used. For example, on the last line of the the code example below, the type checker can't resolve which version of <code>f</code> to call because  <code>result</code> has no explicit type information. (36892416)</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>struct S&lt;T&gt; {}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>func f&lt;T&gt;(_: S&lt;T&gt;) -&gt; T? { … }<span></span></pre></td></tr><tr><td scope="row"><pre>func f&lt;T&gt;(_: S&lt;T&gt;) -&gt; (T) -&gt; Int { … }<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>let s = S&lt;String&gt;()<span></span></pre></td></tr><tr><td scope="row"><pre>let result = f(s)    // now correctly reports the ambiguity as an error<span></span></pre></td></tr></table></div></li><li class="li"><p>Passing different kinds of optionals (<code>?</code> or <code>!</code>) to a function as <code>inout</code> no longer requires overriding that function. (36913150)</p>
<p>For example, the following code is now correct:</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>func takesOptional(i: inout Int?) { … }<span></span></pre></td></tr><tr><td scope="row"><pre>var x: Int! = 1<span></span></pre></td></tr><tr><td scope="row"><pre>takesOptional(&amp;x)<span></span></pre></td></tr></table></div></li><li class="li"><p>Swift now supports conditional compilation based on available modules using <code>canImport()</code> with an argument that is the name of a module that may not be present on all platforms. This condition tests whether it's possible to import the module, but doesn't actually import it. If the module is present, the platform condition returns true; otherwise, it returns false. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0075-import-test.md" class="urlLink" rel="external">SE-0075</a></span>)</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>#if canImport(UIKit)<span></span></pre></td></tr><tr><td scope="row"><pre>&lt;#module-specific code#&gt;<span></span></pre></td></tr><tr><td scope="row"><pre>#endif<span></span></pre></td></tr></table></div></li><li class="li"><p>When <code>swiftc</code> is run from the command line, the default deployment target is set to the version of the currently running OS. (29948658)</p>
</li><li class="li"><p>Use of ownership keywords <code>weak</code> and <code>unowned</code> for property declarations in protocols now result in a warning (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0186-remove-ownership-keyword-support-in-protocols.md" class="urlLink" rel="external">SE-0186</a></span>).  However, as noted in (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-7182" class="urlLink" rel="external">SR-7182</a></span>),  ownership keywords still have an effect when defining a protocol marked <code>@objc</code>, because they control the interface presented in the generated Objective-C header. No warnings will be issued if the protocol is marked <code>@objc</code>.</p>
</li><li class="li"><p>Overriding a function when the only difference in the signature is the kind of optional (<code>?</code> or <code>!</code>) for an <code>inout</code> parameter is deprecated in all versions of Swift and results in a compiler warning. This will change to an error in a future version of Swift. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-6685" class="urlLink" rel="external">SR-6685</a></span>)</p>
</li><li class="li"><p>Swift supports a new platform condition <code>targetEnvironment</code> with a single valid argument <code>simulator</code>.  Conditional compilation of the form <code>#if targetEnvironment(simulator)</code> can now be used to detect when the build target is a simulator. The Swift compiler will attempt to detect, warn, and suggest the use of <code>targetEnvironment(simulator)</code> when evaluating platform conditions that appear to be testing for simulator environments indirectly, via the existing <code>os()</code> and <code>arch()</code> platform conditions. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0190-target-environment-platform-condition.md" class="urlLink" rel="external">SE-0190</a></span>)</p>
</li><li class="li"><p>The compiler now warns for more cases of non-exclusive memory access. These are shown as warnings in the Swift 4.1 compiler and may become errors for all language modes in future versions of the compiler.</p>
<p>Examples of the new warnings include: an access to memory inside a nonescaping closure conflicting with an access that is already in progress, and a conflict in a closure with a non-generic type that is passed to a function expecting a generic closure. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-6103" class="urlLink" rel="external">SR-6103</a></span>)</p>
<p>For example, the compiler now warns about overlapping accesses to the variable <code>value</code>:</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>var value = 7<span></span></pre></td></tr><tr><td scope="row"><pre>withUnsafeMutablePointer(to: &amp;value) {<span></span></pre></td></tr><tr><td scope="row"><pre>  $0.pointee = value + 1<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>One way to avoid the warning is to make a copy of the local variable before passing it as <code>inout</code>:</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>var value = 7<span></span></pre></td></tr><tr><td scope="row"><pre>let valueCopy = value<span></span></pre></td></tr><tr><td scope="row"><pre>withUnsafeMutablePointer(to: &amp;value) {<span></span></pre></td></tr><tr><td scope="row"><pre>  $0.pointee = valueCopy + 1<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Another way is to refer to the variable using a closure parameter instead of capturing it:</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>var value = 7<span></span></pre></td></tr><tr><td scope="row"><pre>withUnsafeMutablePointer(to: &amp;value) {<span></span></pre></td></tr><tr><td scope="row"><pre>  $0.pointee = $0.pointee + 1<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="li"><p>Calls to unavailable functions are permitted if the calling context is also marked unavailable. This simplifies writing code that can be compiled with and without application extension restrictions enabled. (34949130)</p>
</li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_88" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When a class conforms to a <code>private</code> or <code>fileprivate</code> protocol in one file, and the class is subclassed in another file or target, the compiler crashes with the messages "DESERIALIZATION FAILURE" and "top-level value not found." (22672176)</p>
<p><em>Workaround</em>: Change the protocol to <code>internal</code> instead of <code>private</code> or <code>fileprivate</code>, or set the Optimization Level build setting to Whole Module Optimization (<code>-O -whole-module-optimization</code>.)</p>
</li><li class="li"><p>If a nested type in a codable type has the same name as a property of the codable type, the compiler will crash. (37570349)</p>
<p><em>Workaround</em>: Rename either the nested type or the property.</p>
</li><li class="li"><p>A crash can occur during runtime whenever there is a generic class or a subclass of a generic class with a stored protocol metatype property. (38394640)</p>
<p>Example:</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>protocol P { }<span></span></pre></td></tr><tr><td scope="row"><pre>class Generic&lt;T&gt; {<span></span></pre></td></tr><tr><td scope="row"><pre>  let protocolMetatype: P.Type<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p><em>Workaround</em>: Box the metatype in a class.</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>class BoxedType {<span></span></pre></td></tr><tr><td scope="row"><pre>  let p: P.Type<span></span></pre></td></tr><tr><td scope="row"><pre>  init(_ type: P.Type) {<span></span></pre></td></tr><tr><td scope="row"><pre>    p = type<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>class Generic&lt;T&gt; {<span></span></pre></td></tr><tr><td scope="row"><pre>  let boxedProtocolMetatype: BoxedType<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="li"><p>In circumstances where protocol methods or base class methods defined in Objective-C claim to take non-null arguments of type <code>id</code> in their headers, but get invoked with <code>nil</code> values at runtime, Swift code compiled by Xcode 9.3 that overrides those methods may crash when the Swift implementations are invoked. (38675815)</p>
<p><em>Workaround</em>: Change the Swift override to take a value of type <code>Any?</code>. For example, if you implement the <code>UIApplicationDelegate</code> protocol's <code>application(_:open:sourceApplication:annotation:)</code> method:</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>class AppDelegate: UIApplicationDelegate {<span></span></pre></td></tr><tr><td scope="row"><pre>    func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any) -&gt; Bool {<span></span></pre></td></tr><tr><td scope="row"><pre>        return true<span></span></pre></td></tr><tr><td scope="row"><pre>    }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>The program may crash when passed <code>nil</code> as the annotation argument. Avoid the crash by making the <code>annotation</code> argument have type <code>Any?</code>:</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>class AppDelegate: UIApplicationDelegate {<span></span></pre></td></tr><tr><td scope="row"><pre>      func application(_ application: UIApplication, open url: URL, sourceApplication: String?, annotation: Any?) -&gt; Bool {<span></span></pre></td></tr><tr><td scope="row"><pre>        return true<span></span></pre></td></tr><tr><td scope="row"><pre>    }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="li"><p>Conditional conformances are unsupported when performing a dynamic cast (with <code>is</code> or <code>as</code>). (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md" class="urlLink" rel="external">SE-0143</a></span>)</p>
<p>  For example:</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>print([1, 2, 3] is Codable) // Prints "false", but [Int]<span></span></pre></td></tr><tr><td scope="row"><pre>                            // instances really are Codable.<span></span></pre></td></tr><tr><td scope="row"><pre>try JSONEncoder().encode([1, 2, 3]) // Successfully encodes<span></span></pre></td></tr><tr><td scope="row"><pre>                                    // the array as JSON.<span></span></pre></td></tr></table></div><p>  Arrays only conform to <code>Codable</code> when their elements are also <code>Codable</code>, but checking for this conformance isn't supported at runtime.</p>
<p>  While performing the <code>is</code> cast, the Swift runtime warns that it can't evaluate the conditional conformance:</p>
<p>  <code>warning: Swift runtime does not yet support dynamically querying conditional conformance ('Swift.Array&lt;Swift.Int&gt;': 'Swift.Decodable')</code></p>
</li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_89" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Generated headers for Swift content can be imported when a macro named <code>any</code> is defined. (34168022)</p>
</li><li class="li"><p>Assigning a Swift closure expression into a global block variable that is declared in Objective-C now works correctly. (36843476)</p></li><li class="li"><p>In a Swift class that is exposed to Objective-C, if <code>init()</code> is not supported then the <code>+new</code> method is marked as unavailable. (32405588)</p>
</li><li class="li"><p>Objective-C methods with selectors that start with <code>add</code> or <code>remove</code> are now named consistently when imported into Swift. Previously, each occurrence of the same selector could be nondeterministically named by using or not using the portion of the name after <code>add</code> or <code>remove</code>, such as importing <code>addThing:</code> as either <code>add(_:)</code> or <code>addThing(_:)</code>. (33836975)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_90" title="Swift Language"></a><h4 class="jump">Swift Language</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_91" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>A synthesized implementation of <code>==</code> is automatically added to a structure or enumeration that declares a conformance to <code>Equatable</code>. This requires that all stored properties of a structure or all enumeration cases with associated values are <code>Equatable</code>.</p>
<p>Similarly, a synthesized implementation of <code>hashValue</code> is added when declaring a conformance to <code>Hashable</code>. This requires that all stored properties of a <code>struct</code> or all <code>enum</code> cases with associated values are <code>Hashable</code>.</p>
<p>Providing your own implementation of <code>==</code> or <code>hashValue</code> overrides the one synthesized by the compiler. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0185-synthesize-equatable-hashable.md" class="urlLink" rel="external">SE-0185</a></span>)</p>
</li><li class="li"><p>If an extension adds an initializer to a structure that was declared in another module, the new initializer can't access <code>self</code> until it calls an initializer from the defining module. Attempting to access <code>self</code> before calling such an initializer results in a warning in Swift 4 and may result in an error in Swift 5. The requirement prevents an app from accidentally depending on the implementation details of a library. It also matches the existing requirement that cross-module initializers must be convenience initializers.</p>
<p>Code that extends a struct imported from C is most likely to be impacted. However, most imported C structs are given a zeroing no-argument initializer that can be called as <code>self.init()</code> before modifying specific properties.</p>
<p>Swift library authors who wish to continue allowing initialization on a per-member basis should explicitly declare a public memberwise initializer for clients that are in other modules. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0189-restrict-cross-module-struct-initializers.md" class="urlLink" rel="external">SE-0189</a></span>)</p>
</li><li class="li"><p>New <em>recursive</em> constraints require that the associated type conform to the enclosing protocol. The standard library protocols have been updated to use recursive constraints including:</p>
<ul class="nested">
<li class="nested li"><p>The <code>Indices</code> associated type has the same traversal requirements as the enclosing protocol, for example <code>Collection.Indices</code> conforms to <code>Collection</code>.</p></li>
<li class="nested li"><p>Requiring that <code>Numeric.Magnitude</code> conform to <code>Numeric</code>.</p></li>
<li class="nested li"><p>Using more efficient <code>SubSequence</code> types for lazy filter and map.</p></li>
<li class="nested li"><p>Eliminating the <code>*Indexable</code> protocols.</p></li>
</ul>
<p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0157-recursive-protocol-constraints.md" class="urlLink" rel="external">SE-0157</a></span>)</p>
<p>For example, the <code>SubSequence</code> associated type of <code>Sequence</code> follows the enclosing protocol:</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>protocol Sequence {<span></span></pre></td></tr><tr><td scope="row"><pre>  associatedtype Element<span></span></pre></td></tr><tr><td scope="row"><pre>  associatedtype SubSequence: Sequence<span></span></pre></td></tr><tr><td scope="row"><pre>  where SubSequence.Element == Element,<span></span></pre></td></tr><tr><td scope="row"><pre>  SubSequence.SubSequence == SubSequence<span></span></pre></td></tr><tr><td scope="row"><pre>  // ...<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>protocol Collection: Sequence where Self.SubSequence: Collection {<span></span></pre></td></tr><tr><td scope="row"><pre>  // ...<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="li"><p>Access control is enforced for subclasses of generic classes. A <code>public</code> class may not subclass an <code>internal</code> class. For source compatibility, these new diagnostics are warnings in Swift 4.1. (35119972)</p>
</li><li class="li"><p>KeyPaths now support subscript, optional chaining, and optional force-unwrapping components. (31768715)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_92" title="Swift Package Manager"></a><h4 class="jump">Swift Package Manager</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_93" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Performance of the dependency resolution algorithm has been significantly improved when there are shared dependencies in a package graph. Up to a 12X improvement has been observed in certain cases (36777215).</p>
</li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_94" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>When compiling jobs in parallel, the package manager determines the number of CPUs to use instead of using a hardcoded value. (35042923)</p>
</li><li class="li"><p>In a package graph that uses different URL schemes, such as <code>ssh</code> and <code>http</code>, dependencies are now resolved correctly by the package manager. (27573226)</p>
</li><li class="li"><p>The package manager now warns if a dependency is declared but not used. (35174605)</p>
</li><li class="li"><p>The package manager now displays an error when there are two products with the same name. (34494792)</p>
</li><li class="li"><p>Compiler warnings in Package.swift no longer prevent a build from completing successfully. (36324891)</p>
</li><li class="li"><p>The <code>build</code> command in Swift package manager now  works correctly when products of type <code>automatic</code> are used with the <code>--product</code> option. (36509350)</p>
</li><li class="li"><p>The <code>edit</code> command for a package now finds a dependency correctly when the base name of the URL for the package and the name of the package in <code>Package.swift</code> don't match. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-6758" class="urlLink" rel="external">SR-6758</a></span>)</p>
</li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_95" title="Swift Standard Library"></a><h4 class="jump">Swift Standard Library</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_96" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p><code>Encodable</code> and <code>Decodable</code> are now conditional conformances of <code>Optional</code>, <code>Array</code>, <code>Dictionary</code>, and <code>Set</code> that are available only when the type parameters conform to <code>Encodable</code> or <code>Decodable</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md" class="urlLink" rel="external">SE-0143</a></span>, <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0166-swift-archival-serialization.md" class="urlLink" rel="external">SE-0166</a></span>)</p>
</li><li class="li"><p><code>Optional</code>, <code>Array</code>, and <code>Dictionary</code> now conform to the <code>Equatable</code> protocol if their element types conform to <code>Equatable</code> enabling the comparison of two values of composed types, such as <code>[Int: [Int?]?]</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0143-conditional-conformances.md" class="urlLink" rel="external">SE-0143</a></span>)</p>
</li><li class="li"><p>Index types for most standard library collections now conform to <code>Hashable</code> enabling the indices to be used in key-path subscripts and in hashed collections. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0188-stdlib-index-types-hashable.md" class="urlLink" rel="external">SE-0188</a></span>)</p>
<p>For example:</p>
<div class="codesample clear"><table><tr><td scope="row"><pre>let s = "Hashable"<span></span></pre></td></tr><tr><td scope="row"><pre>let p = \String.[s.startIndex]<span></span></pre></td></tr><tr><td scope="row"><pre>s[keyPath: p] // "H"<span></span></pre></td></tr></table></div></li><li class="li"><p>The variant of <code>Sequence.flatMap(_:)</code> that accepts a closure returning an <code>Optional</code> value has been deprecated. Other variants of <code>flatMap(_:)</code> on both <code>Sequence</code> and <code>Optional</code> remain as is. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0187-introduce-filtermap.md" class="urlLink" rel="external">SE-0187</a></span>)</p>
</li><li class="li"><p>Instances of <code>IndexDistance</code> associated type in the Swift standard library have been replaced by the concrete type <code>Int</code>.  Algorithms that currently constrain <code>IndexDistance</code> to <code>Int</code> in their <code>where</code> clause, and algorithms that use <code>IndexDistance</code> within the body of a method, are supported by a deprecated type alias for <code>IndexDistance</code> in an extension on <code>Collection</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0191-eliminate-indexdistance.md" class="urlLink" rel="external">SE-0191</a></span>)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_97" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Reconciled APIs between the multiple forms of unsafe pointers: <code>UnsafePointer</code>, <code>UnsafeMutablePointer</code>, <code>UnsafeRawPointer</code>, <code>UnsafeMutableRawPointer</code>, <code>UnsafeBufferPointer</code>, <code>UnsafeMutableBufferPointer</code>, <code>UnsafeRawBufferPointer</code>, and <code>UnsafeMutableRawBufferPointer</code>. Functionality previously only available in some interfaces are now available in all the relevant interfaces. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0184-unsafe-pointers-add-missing.md" class="urlLink" rel="external">SE-0184</a></span>)</p>
<p>The changes are additive with the following exceptions:</p>
<ul class="nested">
<li class="nested li"><p><p><code>deallocate(capacity:)</code> and <code>deallocate(bytes:alignedTo:)</code> are replaced by <code>deallocate()</code>. Simply removing the <code>capacity</code> argument or the <code>bytes</code> and <code>alignedTo</code> arguments preserves the behavior of the code.</p>
</p></li>
<li class="nested li"><p><p><code>UnsafeMutableRawBufferPointer.allocate(count:)</code> is replaced by <code>UnsafeMutableRawBufferPointer.allocate(byteCount:alignment:)</code>. The behavior of the code can be preserved by adding an <code>alignment</code> argument, <code>MemoryLayout&lt;UInt&gt;.alignment</code>, to specify alignment on word boundaries.</p>
</p></li>
<li class="nested li"><p><p><code>initializeMemory&lt;T&gt;(as:at:count:to:)</code>, is replaced by <code>initializeMemory&lt;T&gt;(as:repeating:count:)</code>. The <code>at</code> parameter is removed. Initializing at an offset can be achieved by multiplying the element index by <code>MemoryLayout&lt;T&gt;.stride</code> and adding to the raw pointer base.</p>
</p></li>
</ul>
</li><li class="li"><p>Some groups of collection types in the standard library, including slices and lazy collection wrappers, are now collapsed into single types using conditional conformance. The old types are available as deprecated type aliases for source compatibility. For more information on conditional conformance, see <span class="content_text"><a href="https://swift.org/blog/conditional-conformance/" class="urlLink" rel="external">https://swift.org/blog/conditional-conformance/</a></span>. (21935030)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_98" title="Testing"></a><h4 class="jump">Testing</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_99" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p><code>xccov</code> is a new command-line utility for inspecting the contents of Xcode coverage reports. It can be used to view coverage data in both human-readable and machine parseable format. To learn more, enter <code>man xccov</code> in Terminal. (37172926)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_100" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Classes that inherit from subclasses of <code>XCTestCase</code> now show inherited test methods in the Test navigator correctly. (34838443)</p>
</li><li class="li"><p>The code coverage line execution counts for block literals are now correct. (22581085)</p>
</li><li class="li"><p>Fixed an issue that could result in a code coverage report missing header files and any code in those header files. (28915357)</p>
</li><li class="li"><p>Code coverage data is now captured for applications that are the target of UI tests when tests are run with xcodebuild. (23913271)</p></li><li class="li"><p>Fixed an issue that resulted in the coverage report incorrectly displaying the "No Coverage Data" message. (36040075)</p>
</li><li class="li"><p>Fixed several performance bottlenecks with code coverage including generating coverage reports and loading coverage reports in the Reports Navigator. In addition, navigating between files in the source editor while viewing code coverage no longer results in the spinning cursor. (33353328)</p>
</li><li class="li"><p>Running tests on an iOS device with code coverage enabled no longer results in temporary freezes of the UI while downloading the code coverage profiles. (29681809)</p>
</li><li class="li"><p>An issue that could cause <code>-[XCUIApplication launch]</code> and <code>-[XCUIApplication terminate]</code> to fail if code coverage is enabled and the debugger is disabled has been resolved. (36590025)</p></li><li class="li"><p>The code coverage report now contains correct counts for static inline functions. (22520187)</p>
</li><li class="li"><p>XCTest UI interruption monitors now work correctly on devices and simulators running iOS 10. (33278282)</p>
</li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW936" title="Xcode 9.2"></a><h3 class="jump">Xcode 9.2</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW937" title="General"></a><h4 class="jump">General</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW938" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p><code>NSFileProviderExtension</code> now works on iOS 9 and iOS 10 when the minimum supported OS version of the project is iOS 8.0 or earlier. (34828118)</p></li><li class="li"><p>A workspace containing many cross-project references no longer experiences significant user interface lag shortly after opening. (14558737)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_101" title="Asset Catalog"></a><h4 class="jump">Asset Catalog</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_102" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When using Xcode 9.2 to create apps that deploy to iOS 8 and later, images in the asset catalog may be corrupted when viewed on devices running iOS 8.3 and earlier. (35379713)</p><p><em>Workaround</em>: Build the app using Xcode 9.1, or use Xcode 9.2 and set the deployment target to iOS 8.4 or later.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW942" title="Apple LLVM Compiler"></a><h4 class="jump">Apple LLVM Compiler</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW943" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Xcode now correctly compiles code that contains a <code>std::function</code> variable with an incomplete return type. (34010071)</p></li><li class="li"><p>When <code>_POSIX_C_SOURCE</code> is defined, including libc++ headers that depend on <code>__threading_support</code>, such as <code>thread</code> or <code>mutex</code> no longer results in an error. (31263056)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW948" title="Build System"></a><h4 class="jump">Build System</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW950" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>An experimental opt-in feature increases the number of concurrent build tasks that are run for Swift projects. This may improve build times for Swift projects, but may also increase memory use during the build. (35326759)</p><p>To enable this feature, open the Terminal and enter the following command:</p><p><code>defaults write com.apple.dt.Xcode BuildSystemScheduleInherentlyParallelCommandsExclusively -bool NO</code></p><p>To disable the feature, delete the preference by entering the command:</p><p><code>defaults delete com.apple.dt.Xcode BuildSystemScheduleInherentlyParallelCommandsExclusively</code></p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW952" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The build system no longer produces inconsistent header maps while indexing. This resolves an issue with debugging Swift code using lldb. (34716477)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW956" title="Core Data"></a><h4 class="jump">Core Data</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW958" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The generated Objective-C <code>@property</code> declaration for a UUID attribute now always includes the <code>nullable</code> and <code>copy</code> annotations. (35273724)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_103" title="Core ML"></a><h4 class="jump">Core ML</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_104" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added support for the <code>.mlmodel</code> specification version 2 which includes <code>float16</code> weights and custom layers in neural network models.</p></li><li class="li"><p>Updated the Model viewer to show custom layer dependencies.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW969" title="Interface Builder"></a><h4 class="jump">Interface Builder</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW970" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Specifying a section inset reference point for a <code>UICollectionView</code>, such as relative to the Safe Area, is now supported in the Size inspector. (34812768)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW971" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed a performance issue that resulted in frequent rebuilds when editing an <code>IBDesignable</code> view. (28360728)</p></li><li class="li"><p>Resolved a canvas rendering issue that sometimes occurred when switching the device configuration to iPhone X. (34424852)</p></li><li class="li"><p>Localization warnings are no longer reported for a <code>UISegmentedControl</code> containing only images and no text. (34601808)</p></li><li class="li"><p>Resolved a layout ambiguity with image-based <code>UIToolbar</code> buttons that resulted in a hang and in high CPU usage. (34057302)</p></li><li class="li"><p>Localization warnings are no longer reported for a <code>UILabel</code> with <code>numberOfLines</code> set to <code>0</code>, or for any single-character text strings. (34767956)</p></li><li class="li"><p>Resolved a canvas responsiveness issue when rendering a Storyboard containing a <code>UITextField</code>. (34808049)</p></li><li class="li"><p>A layer-backed <code>IBDesignable</code> view no longer draws upside-down on the IB canvas. (34758240)</p></li><li class="li"><p>Resolved a crash that occurred when trying to change the font for a localization comment in the Identity inspector for iOS, tvOS, and watchOS documents. (26097921)</p></li><li class="li"><p>Device Bar labels are more concise when displayed as popup buttons. In addition, VoiceOver navigation is improved for groups around related mutually-exclusive buttons. (27480768)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW972" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When the device configuration is set to an iPhone X, the height of the <code>UIToolbar</code> shown on the canvas may be too large. The iOS runtime is not affected.</p><p><em>Workaround</em>: Use a different device for editing on the canvas, or connect the scene to a navigation controller that contains a toolbar.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW973" title="Playgrounds"></a><h4 class="jump">Playgrounds</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW976" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Xcode no longer crashes when navigating between pages in a playground. (34821667)</p></li><li class="li"><p>The Render Documentation checkbox now behaves correctly. (34627634)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW977" title="Simulator"></a><h4 class="jump">Simulator</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW978" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>In Simulator, apps with the audio background capability now continue playing audio when switched to the background. (34591587)</p></li><li class="li"><p>A watchOS app using Swift now runs on a simulated watchOS 2 device. (35063043)</p></li><li class="li"><p>iCloud Drive now syncs on a simulated device running iOS 11.2 or later. (34669593)</p></li><li class="li"><p>Swiping up to unlock a simulated iPhone X now works correctly. (33390776)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW979" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When both Xcode 9.0 and 9.1 are installed, Simulator in Xcode 9.1 may not show devices for iOS 11.0, tvOS 11.0, or watchOS 4.0 in the Hardware &gt; Device menu. (34761843)</p><p><em>Workaround</em>: Use Xcode 9.0 to build and run the app in Simulator on the desired device.</p></li><li class="li"><p>Use of some 3rd party firewall tools that install kexts may cause problems launching apps in Simulator. (34829500)</p><p><em>Workaround</em>: Unload the problematic kexts using the <code>kextunload</code> command in the terminal. Disabling rules in the firewall application may not solve the problem.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW980" title="Swift Compiler"></a><h4 class="jump">Swift Compiler</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_105" title="Know Issues"></a><h5 class="jump">Know Issues</h5><ul class="ul"><li class="li"><p>A thrown Swift Error object with an assertion message greater than 255 characters that is not caught may result in Xcode crashing. (35487430)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW981" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>UTF–16 string indices now increment correctly when there is a limiting index resulting in expressions such as <code>Range(NSRange(location: 1, length: 0), in: "")</code> returning <code>nil</code> instead of crashing. (34551055)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW982" title="Swift Migration"></a><h4 class="jump">Swift Migration</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW983" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Opening the Swift Migration Assistant when a workspace or project contains a Swift Playground no longer crashes. (35175054)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW984" title="Swift SDK"></a><h4 class="jump">Swift SDK</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW985" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p><code>MTKMesh.newMeshes(asset:device:)</code> now populates the <code>MDLMesh</code> array in the return value correctly. (34624659)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW986" title="Swift Standard Library"></a><h4 class="jump">Swift Standard Library</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW987" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed a bug that resulted in some uses of key path literals with optional chaining (<code>?</code>) components that either crash with the error message "pointer with negative count", or in memory corruption at runtime. (35367114)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW988" title="Testing"></a><h4 class="jump">Testing</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW990" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The <code>XCUIElementType</code> enumeration is now imported into Swift 4 as <code>XCUIElement.ElementType</code>, allowing the type name to be referenced in code. (34772051)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW881" title="Xcode 9.1"></a><h3 class="jump">Xcode 9.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW882" title="Build System"></a><h4 class="jump">Build System</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW883" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The new build system properly respects localizations for all files when copying them into the Resources folder. (34025522)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW888" title="Debugger"></a><h4 class="jump">Debugger</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW889" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The Xcode debugger now displays improved error descriptions for most Swift fatal errors.  (33365646)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW991" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Display of Swift fatal errors in the debugger is enabled only when the main executable is using Swift. (35163654)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW890" title="Interface Builder"></a><h4 class="jump">Interface Builder</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW891" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Setting the Spring Loaded checkbox for drag and drop in the Interface Builder Attributes inspector now sets <code><a href="https://developer.apple.com/documentation/uikit/uispringloadedinteractionsupporting/2897189-springloaded" class="urlLink" target="_self">isSpringLoaded</a></code> at runtime. (34284258)</p></li><li class="li"><p>Setting the large title text attributes of <code><a href="https://developer.apple.com/documentation/uikit/uinavigationbar" class="urlLink" target="_self">UINavigationBar</a></code> now works correctly. (33979437)</p></li><li class="li"><p>When the Size simulated metric of a view controller is set to Freeform, Interface Builder now uses the freeform size for downstream view controllers with the Size metric set to Inferred. (33872052)</p></li><li class="li"><p>Setting a <code>UITableView</code> in a XIB file to Grouped style with automatic row heights no longer hangs Xcode. (33483932)</p></li><li class="li"><p>New checkbox and radio buttons added from the object library now have a default Vertical Content Hugging Priority that matches other <code>NSButton</code> objects. Priority values for existing objects remain unchanged. (21574446)</p></li><li class="li"><p>Dragging a row within the user-defined runtime attributes table no longer discards the dragged attributes. (18444777)</p></li><li class="li"><p>Clicking outside the text field when editing the key path of a user defined runtime attribute now works as expected. (12406749)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW892" title="Localization"></a><h4 class="jump">Localization</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW893" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Mirroring the user interface now works correctly when running a macOS app using a scheme that sets the Application Language to Right-to-Left Pseudolanguage With Right-to-Left Strings. (33923833)</p></li><li class="li"><p>Reduced the number of false positive Auto Layout warnings for localized projects. (33849087)</p></li><li class="li"><p>The <code>-importLocalizations</code> option of the <code>xcodebuild</code> command now adds files from the XLIFF to the project. (17305567)</p></li><li class="li"><p>The <code>Info.plist</code> keys <code>NSLocationAlwaysAndWhenInUseUsageDescription</code> and <code>NSFaceIDUsageDescription</code> are now localizable for XLIFF export and import. (34589189, 34866053)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW896" title="Provisioning"></a><h4 class="jump">Provisioning</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW897" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Uploading In-App Purchase content from the Xcode Organizer window now works correctly. (33951562)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW898" title="Server"></a><h4 class="jump">Server</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW906" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Using a networked device for testing in Xcode Server currently requires that the user account for running integrations is logged in and that Xcode Server is the frontmost app. For information on setting up Xcode Server, see Perform Continuous Integration &gt; Configure Xcode Server in <span class="content_text"><a href="https://help.apple.com/xcode/mac/current/#/dev399fc6efa" class="urlLink" rel="external">Xcode Help</a></span>. (33904987)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW908" title="Simulator"></a><h4 class="jump">Simulator</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW914" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>In Simulator, the video in an <code><a href="https://developer.apple.com/documentation/avkit/avplayerviewcontroller" class="urlLink" target="_self">AVPlayerViewController</a></code> no longer appears outside the safe area on the iPhone X. (34339660)</p></li><li class="li"><p>Improved the rendering quality of Simulator on 2016 and 2017 MacBook Pros. (33998687)</p></li><li class="li"><p>Reducing the sized of an iPhone X in Simulator by dragging no longer results in a edge swipe on the simulated device. (33974533)</p></li><li class="li"><p>Choosing Window -&gt; Scale -&gt; Actual Size in Simulator now sets an iPhone X to the correct size. (33908038)</p></li><li class="li"><p>Fixed an issue in Simulator's OpenGL that could cause SceneKit apps to run slowly and the CPU to hit 100% when attempting to pan in an MKMapView.</p></li><li class="li"><p>In Simulator, panning an <code>MKMapView</code> in a SceneKit app now works correctly. (33664759)</p></li><li class="li"><p>watchOS apps that use Swift may fail to run on a simulated device running any version of watchOS 2. (35063043)</p><p><em>Workaround</em>: Test watchOS 2 apps on a device, or test in Simulator on watchOS 3 or later.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW915" title="Source Control"></a><h4 class="jump">Source Control</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW916" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode now supports using a Git worktree as a working copy. (24745300)</p></li><li class="li"><p>The source control history editor now updates correctly when updating the local working copy. (33919644)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW917" title="Swift SDK"></a><h4 class="jump">Swift SDK</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW918" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The following ARKit and Metal symbols are now available for Swift on iOS. (34642200)</p><p>ARKit:</p><ul class="nested"><li class="nested li"><p><code>ARFaceGeometry.verticies</code></p></li><li class="nested li"><p><code>ARFaceGeometry.textureCoordinates</code></p></li><li class="nested li"><p><code>ARFaceGeometry.triangleIndices</code></p></li></ul><p>Metal:</p><ul class="nested"><li class="nested li"><p><code>MTLRenderCommandEncoder.setTileBuffers(_:offsets:range:)</code></p></li><li class="nested li"><p><code>MTLRenderCommandEncoder.setTileTextures(_:range:)</code></p></li><li class="nested li"><p><code>MTLRenderCommandEncoder.setTileSamplerStates(_:range:)</code></p></li><li class="nested li"><p><code>MTLRenderCommandEncoder.setTileSamplerStates(_:lodMinClamps:lodMaxClamps:range:)</code></p></li></ul></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW919" title="Testing"></a><h4 class="jump">Testing</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW920" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>When running a test action which involves multiple bundles, the <code>xcodebuild</code> command line tool no longer intermittently shuts down simulated devices. (33983007)</p></li><li class="li"><p>Testing no longer intermittently fails at the end of a successful test run with the error “DTXProxyChannel error 1.” (33948901)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW921" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When using Swift 4, referring to the nested enumeration type <code>XCUIElement.Type</code> by name is not possible. This can result in a compile time error in other places in your code when working with the type of an <code>XCUIElement.Type</code>. Using a value of the nested enumeration works correctly.</p><p>The issue doesn't occur in Swift 3 code because the enumeration is named <code>XCUIElementType</code>. (34772051)</p><p><em>Workaround</em>: Add a type definition to your bridging header, such as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>#import &lt;XCTest/XCTest.h&gt;<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>typedef XCUIElementType FIX_XCUIElementDotTypeWorkaround;<span></span></pre></td></tr></table></div></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW922" title="Xcode 9.0.1"></a><h3 class="jump">Xcode 9.0.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW923" title="New Features"></a><h4 class="jump">New Features</h4><ul class="ul"><li class="li"><p>Updated Simulator to use the iOS runtime used on iPhone X.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW924" title="Interface Builder"></a><h4 class="jump">Interface Builder</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW925" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>In the Editor &gt; Resolve Auto Layout Issues submenu, Add Missing Constraints and Reset to Suggested Constraints now create the correct constraints for a view that is in a view controller that is downstream of a navigation controller. (34603925)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW926" title="Project Navigator"></a><h4 class="jump">Project Navigator</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW927" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Moving localized files in the structure editor no longer causes Xcode to crash. (34551605)</p></li><li class="li"><p>Adding files to a project now adds them to the selected targets. (34551617)</p></li><li class="li"><p>Reordering items in a group in the Project navigator no longer results in Xcode consuming excess CPU. (34551671)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW928" title="Simulator"></a><h4 class="jump">Simulator</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW929" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>In Simulator, the Settings app crashes the first time it is opened. Subsequent launches work correctly. (34522196)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW930" title="Swift Runtime"></a><h4 class="jump">Swift Runtime</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW931" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Swift apps using generic casting and reflection now run correctly on macOS 10.9 and iOS 7. (34595478)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW932" title="Swift SDK"></a><h4 class="jump">Swift SDK</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW933" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The following AVFoundation symbols are now correctly marked as public:</p><ul class="nested"><li class="nested li"><p><code>AVCaptureDevice.Format.supportedColorSpaces</code></p></li><li class="nested li"><p><code>AVCapturePhotoOutput.supportedFlashModes</code></p></li><li class="nested li"><p><code>AVCapturePhotoOutput.availablePhotoPixelFormatTypes</code></p></li><li class="nested li"><p><code>AVCapturePhotoOutput.availableRawPhotoPixelFormatTypes</code></p></li><li class="nested li"><p><code>AVCapturePhotoSettings.availablePreviewPhotoPixelFormatTypes</code></p></li></ul><p>(34538928)</p><div class="importantbox clear"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_107" title="Important"></a><p><strong>Important:</strong>&nbsp;Apps that previously used a double underscore (<code>__</code>) to access these symbols must be updated to use the public symbols before submission to the App Store.</p><p></p></aside></div></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW878" title="Xcode 9.0"></a><h3 class="jump">Xcode 9.0</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW884" title="General"></a><h4 class="jump">General</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW885" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added <code>Test</code> and <code>Tests</code> as suffixes for determining file counterparts used in navigation and in the Assistant Editor. (28981734)</p></li><li class="li"><p>Added <code>-runFirstLaunch</code>, a new <code>xcodebuild</code> flag that checks the status of the license agreement and installs any packages required for launching Xcode. (23529342)</p></li><li class="li"><p>Core NFC can now be enabled via the Capabilities tab in Xcode. (32520707)</p></li><li class="li"><p>Added support for running multiple versions of the Xcode app at the same time, and of any associated tools such as Simulator. Xcode 9.0 can't be run at the same time as earlier versions. (23140937)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW886" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed an issue causing App Store uploads to fail with error code –22421. (25068558)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW887" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>On OS X 10.9 or iOS 7, running a Swift app that uses generic casting or reflection may result in an error that includes the wording <code>object_isClass symbol not found</code>. (33872748)</p></li><li class="li"><p>Uploading In-App Purchase content from Organizer window fails with the error message <code>The archive contains nothing that can be signed</code>. (33951562)</p><p><em>Workaround:</em> Use Transporter to upload In-App Purchase content. For more information, see <span class="content_text"><a href="https://help.apple.com/itc/appsspec" class="urlLink" rel="external">https://help.apple.com/itc/appsspec</a></span>.</p></li><li class="li"><p>When exporting an ad-hoc or enterprise IPA, Swift symbol stripping requires enabling app thinning or Rebuild from Bitcode. For more information, see <span class="content_text"><a href="https://help.apple.com/xcode/mac/current/#/devde46df08a" class="urlLink" rel="external">Distribution options</a></span> in Xcode Help. (31737836)</p><p><em>Workaround:</em> Enable app thinning or Rebuild from Bitcode when exporting the app.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW879" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p> Apps with a deployment target of iOS 11 no longer build a 32-bit slice. To build and include a 32-bit slice, set the deployment target to an earlier version of iOS. (32163517)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW894" title="Address Sanitizer"></a><h4 class="jump">Address Sanitizer</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW895" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added a check for using the memory for a variable that is out of scope. (32308829)</p></li><li class="li"><p>Added "Detect use of stack after return", an optional check for using the memory for a local function variable after the function has returned. Turn on the option in the Diagnostics pane of the Scheme editor. (32308829)</p></li><li class="li"><p>Address Sanitizer is now compatible with Malloc Scribble. (32359908)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW899" title="Apple LLVM Compiler and Low-Level Tools"></a><h4 class="jump">Apple LLVM Compiler and Low-Level Tools</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW900" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Increased the performance of incremental link-time optimization. (22867330)</p></li><li class="li"><p>Added a warning for calls to <code>performSelector</code> where the method referred to by the selector may return a structure, union, or vector type. (12056271)</p></li><li class="li"><p>Updated <code>-Wstrict-prototypes</code> to warn about nonprototype functions, block declarations, and types in C and in Objective-C. (15060615)</p></li><li class="li"><p>Updated how the <code>expected identifier</code> error handles C++ keywords in Objective-C++ code. Identifiers that are valid in Objective-C but invalid in Objective-C++ have a more specific error message. An example of the new error is: <code>error: expected identifier; 'new' is a keyword in Objective-C++ @protocol new ^</code>. The parser has better recovery after this error, to improve error reporting in the rest of the file. (20626062)</p></li><li class="li"><p>Added <code>-iframeworkwithsysroot</code>, a command line option that prepends the system root path (<code>-isysroot</code>) to the path of the provided framework. (21316352)</p></li><li class="li"><p>Added <code>-Wunguarded-availability</code>, a new compiler flag that warns of an unguarded use of an Objective-C API that was introduced in a version of the OS that is later than the deployment target version.</p><p>To guard the use of new APIs, use an <code>if</code> statement combined with <code>@available</code>, a new Objective-C expression that checks the system version. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>if (@available(macOS 10.13, iOS 11, *)) {<span></span></pre></td></tr><tr><td scope="row"><pre>   // The compiler will not warn about uses of APIs from macOS 10.13<span></span></pre></td></tr><tr><td scope="row"><pre>   // or iOS 11 here<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>C or C++ code can use <code>__builtin_available</code>, a new builtin whose semantics are equivalent to <code>@available</code>.</p><p>The <code>-Wunguarded-availability</code> flag is off by default to prevent unexpected warnings in existing projects. <code>-Wunguarded-availability-new</code>, a less strict version of the compiler flag that warns about unguarded uses of APIs only when they were introduced in macOS 10.13 or later, iOS 11 or later, tvOS 11 or later, or watchOS 4 or later. The <code>-Wunguarded-availability-new</code> flag is on by default. (7184689)</p></li><li class="li"><p>The placeholder for a block parameter that uses a <code>typedef</code> instead of specifying the block type directly now expands to the block declaration when using code completion for setters of block properties. (21981862)</p></li><li class="li"><p>Xcode provides code-completion results for missing C++11 constructs and keywords. The following constructs are included in the code-completion results:</p><ul class="nested"><li class="nested li"><p><code>static_assert</code></p></li><li class="nested li"><p><code>alignas</code></p></li></ul><p>The following keywords and special identifiers are included in the code-completion results:</p><ul class="nested"><li class="nested li"><p><code>constexpr</code></p></li><li class="nested li"><p><code>final</code></p></li><li class="nested li"><p><code>noexcept</code></p></li><li class="nested li"><p><code>override</code></p></li><li class="nested li"><p><code>thread_local</code></p></li></ul><p>The <code>__auto_type</code> keyword is included in code-completion results for code that uses C or Objective-C. (29219185)</p></li><li class="li"><p>Xcode provides code-completion results for members from dependent classes. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>template&lt;typename T&gt;<span></span></pre></td></tr><tr><td scope="row"><pre>void appendIfTrue(std::vector&lt;T&gt; &amp;dest, const T &amp;value) {<span></span></pre></td></tr><tr><td scope="row"><pre>   dest. // Xcode will now show relevant completion results after '.'<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Note that code-completion results won’t be provided when the member expression includes a dependent base. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>template&lt;typename T&gt;<span></span></pre></td></tr><tr><td scope="row"><pre>void appendIfTrue(std::vector&lt;std::vector&lt;T&gt;&gt; &amp;dest, const T &amp;value) {<span></span></pre></td></tr><tr><td scope="row"><pre>   dest.at(0). // Xcode *will not* have the relevant completion results<span></span></pre></td></tr><tr><td scope="row"><pre>               // for the members of std::vector here<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(29818301)</p></li><li class="li"><p>The state of the <code>#pragma pack</code> directive in an included precompiled header is now preserved. (21359084)</p></li><li class="li"><p>Warnings for incomplete umbrella headers in module maps now trigger even when the umbrella header is part of a submodule. (22623686)</p></li><li class="li"><p>A redefinition error caused by the repeated inclusion of a nonmodular header now shows the include file stack leading to the repeated include. (24116019)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW901" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>When the <code>-E</code> flag in Clang is used for preprocessing, the <code>editor placeholder in source file</code> error is no longer shown. (32718000)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW902" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Xcode fails to compile code that contains a <code>std::function</code> variable with an incomplete return type. For example, the following code below doesn't conform to the C++ standard. (34010071).</p><div class="codesample clear"><table><tr><td scope="row"><pre>class Continuation {<span></span></pre></td></tr><tr><td scope="row"><pre>   std::function&lt;Continuation ()&gt; m_next;<span></span></pre></td></tr><tr><td scope="row"><pre>};<span></span></pre></td></tr></table></div></li><li class="li"><p>When the Symbols Hidden by Default build setting is enabled (<code>-fvisibility=hidden</code>) and a symbol declaration includes an availability attribute with a macOS availability such as <code>API_AVAILABLE(macos(10.12), ios(10))</code>, then the symbol’s visibility is set to <code>default</code> instead of <code>hidden</code>. (33655115)</p><p><em>Workaround:</em> Use <code>__attribute__((visibility("hidden")))</code> in addition to <code>API_AVAILABLE</code> to hide a declarations.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW903" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p>Vector parameter return values for an Objective-C method with a target earlier than macOS 10.11 or iOS 9 are no longer valid. (21662309)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW904" title="Asset Catalog"></a><h4 class="jump">Asset Catalog</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW905" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Asset catalogs now support named colors that can be used in source files and Interface Builder. (28900538)</p></li><li class="li"><p>Asset catalogs now support high-efficiency image formats, including files with the <code>.avci</code>, <code>.heic</code>, and <code>.heif</code> file extensions. (29959599)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW907" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>WatchKit App Store icons in the asset catalog are not uploaded when using Xcode to submit an app to the App Store. (33383969)</p><p><em>Workaround:</em> Use the iTunes Connect web app to upload WatchKit App Store icons.</p></li><li class="li"><p>App store icons for tvOS include an unused slot for a 2x version of the icon. Any images in this slot are ignored. (33800909)</p></li><li class="li"><p>Apple TV 4K apps must include a 2x launch image to run at the higher resolution. (33968521)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW909" title="Building and Linking"></a><h4 class="jump">Building and Linking</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW910" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode 9 includes a new build system written from scratch in Swift. It is designed for higher reliability, and it catches project configuration problems that the standard build system does not. The performance of the build system (not including compilers, linkers, and other build tools) has been dramatically improved. This new build system is built on top of the Swift open source <span class="content_text"><a href="https://github.com/apple/swift-llbuild" class="urlLink" rel="external">llbuild project</a></span>.</p><p>In Xcode 9.0, the new build system is disabled by default. To enable the new build system, choose File &gt; Project Settings or File &gt; Workspace Settings, and then choose New Builds System for the Build System option in the menu. For a command-line build, pass the <code>-UseNewBuildSystem=YES</code> flag to <code>xcodebuild</code>. The new build system will become the default build system in a future version of Xcode. (19209225)</p><p>Although the new build system is highly compatible with existing projects, some projects may require changes due to the following:</p><ul class="nested"><li class="nested li"><p>The new build system has stricter checks for cycles between elements in the build in order to prevent unnecessary rebuilds. To resolve the issue, make sure that any generated files are produced before they are required. For example, if a target both produces an output and depends on other targets that use the output, move the production of the output into its own target and run that target earlier in the build.</p></li><li class="nested li"><p>It is an error for any individual file in the build to be produced by more than one build command. For example, if two targets each declare the same output file from a shell script phase, factor out the declaration of the output file into a single target.</p></li><li class="nested li"><p>If an output file which is generated by a shell script is used as an input elsewhere in the build (for example, to another shell script), then that output must be declared as an explicit output by the script that generates it; otherwise the build system may attempt to search for the file before it has been generated, causing the build to fail.</p></li><li class="nested li"><p>The traditional header map that was generated when the Always Search User Paths (<code>ALWAYS_SEARCH_USER_PATHS</code>) setting was <code><!--a  -->YES<!--/a--></code> is not supported by the new build system. Instead, set <code>ALWAYS_SEARCH_USER_PATHS</code> to <code><!--a  -->NO<!--/a--></code> and migrate to using modern header include syntax.</p><ul class="nested"><li class="nested li"><p>Add any needed header files that are in the project repository to the Xcode project to ensure they are available for use in <code>#include</code> (via the project wide header map).</p></li><li class="nested li"><p>Use quote-style include ("<code>foo.h</code>") for project headers, and reserve angle-bracket include (&lt;<code>foo.h</code>&gt;) for system headers.</p></li></ul></li><li class="nested li"><p>The new build system passes <code>undefined_arch</code> as the value for the <code>ARCH</code> environment variable when running shell script build phases. The value was previously not well defined. Any shell scripts depending on this value must behave correctly for all defined architectures being built, available via the <code>ARCHS</code> environment variable.</p></li><li class="nested li"><p>The new build system supports the “clean build folder” behavior. The standard “clean” behavior is not supported.</p></li></ul></li><li class="li"><p>For a target containing Swift and defining a module, the generated <code>module.modulemap</code> file now includes <code>requires objc</code> so it can be used by languages other than Objective-C (such as C++). (28650820)</p></li><li class="li"><p>The new Strip Swift Symbols (<code>STRIP_SWIFT_SYMBOLS</code>) build setting is enabled by default. It adjusts the level of symbol stripping so that when the linked product of the build is stripped, all Swift symbols are removed. This significantly reduces the size of Swift frameworks. If the lack of Swift symbols causes problems, such as when using <code>dladdr()</code>, this setting can be disabled. To view the exported symbols from file that has been stripped, use <code>xcrun dyldinfo -export</code> instead of <code>nm</code>. (31306055)</p></li><li class="li"><p>A scheme with code coverage enabled for the test action now enables code coverage for the run and analyze actions, reducing the need to build multiple versions of the application. To turn off code coverage for all actions other than test, use a separate scheme for those actions with code coverage disabled. (31848014)</p></li><li class="li"><p>Added Precompile Bridging Header (<code>SWIFT_PRECOMPILE_BRIDGING_HEADER</code>), a new build setting for the Swift compiler. This setting is enabled by default and adds a new optional step in mixed-source builds called <code>PrecompileSwiftBridgingHeader</code>, that improves overall build time. If unexpected errors occur during this step, disable this build setting to omit the optional step. (31851450)</p></li><li class="li"><p>Added Swift 3 @objc Inference (<code>SWIFT_SWIFT3_OBJC_INFERENCE</code>), a new build setting that controls how the Swift compiler infers <code>@objc</code> for declarations. By default the compiler uses the declared Swift version in the target to perform the inference. The new setting can be used to explicitly direct the Swift compiler to use either Swift 3 to Swift 4 inference rules. (32121595)</p></li><li class="li"><p>An autocreated scheme is saved to disk only if it has been edited. This helps prevent the accumulation of schemes for targets which were deleted, or are added to other schemes. (30266825)</p></li><li class="li"><p>For targets that use automatic signing, <code>xcodebuild</code> can now communicate with the Apple developer website to create and update provisioning profiles, signing certificates, and app IDs. To enable this behavior, choose Xcode &gt; Preferences and add your Apple ID in the Accounts pane, and then pass the <code>-allowProvisioningUpdates</code> flag to <code>xcodebuild</code> when building your target. (27572834)</p></li><li class="li"><p>Added <code>CODE_SIGN_STYLE</code>, a build setting used to override a target’s signing style to Automatic or Manual when using <code>xcodebuild</code>. (28077832)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW911" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>When a project is opened, Xcode may create a Recovered References group in the Project navigator. This group contains files that are referenced in a target but aren't referenced in the group tree of the project. If the group appears, move each file to the proper location in the project as appropriate. (22924751)</p></li><li class="li"><p>Changed the name of the build intermediates folder to <code>Intermediates.noindex</code>. This improves build times by preventing Spotlight from indexing the folder. (29336306)</p></li><li class="li"><p>Xcode supports static library targets which contain Swift code. Debugging applications that use Swift static libraries may require a complete set of build artifacts that are in their original location. (33297067)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW912" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When using the new build system, it is not possible to use the clean action in a project or workspace that uses the legacy or custom locations for derived data. (32296417)</p></li><li class="li"><p>Products built with code coverage enabled should not be submitted to the app store. Code coverage is disabled automatically when performing the <code>archive</code> scheme action. It is not recommended to distribute or submit apps built with the <code>run</code> action; if your workflow involves submitting a product built with the <code>run</code> action, you should switch to submitting the product of the <code>archive</code> action. The <code>run</code> action is the default action performed by <code>xcodebuild</code> when <code>-scheme</code> is passed with no explicit verb, or with the <code>build</code> verb; use the <code>archive</code> verb to build with the <code>archive</code> action. (32870905)</p></li><li class="li"><p>The new build system may not define all of the environment variables that the standard build system defines when launching shell scripts. If the new build system is not supplying an environment variable that your scripts use, please file a bug at https://bugreporter.apple.com with the name of the environment variable, the expected value in the old build system, and a brief explanation about what you are using the variable for. (24541618)</p></li><li class="li"><p>When using the new build system and using DWARF with dSYM File debugging information, the build may do unnecessary work to extract the dSYM on each build iteration, degrading build performance. (30668974)</p><p><em>Workaround:</em> Enable DWARF with dSYM File only for the Release configuration.</p></li><li class="li"><p>With the new build system, switching between building the Debug and Release configuration of a project may result in unnecessary content rebuilding. (30924058)</p></li><li class="li"><p>For single files, the new build system does not yet support the Compile, Analyze, Preprocess, or Assemble operations of the Product &gt; Perform Action submenu. (31072405)</p></li><li class="li"><p>When using the new build system, Interface Builder live views use the old build system. (31433718)</p></li><li class="li"><p>Projects using on-demand resources are not currently supported by the new build system. (31508570)</p></li><li class="li"><p>When using the new build system, the total number of build tasks reported in the activity area may not be computed correctly, and will continue to increase during the build. (31855141)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW913" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p>The build setting Separate Strip (<code>SEPARATE_STRIP</code>) is no longer supported nor is it displayed in the build settings editor. Xcode always strips binaries in a separate task and no longer instructs the linker to perform the strip. (31584192)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW934" title="Core Data"></a><h4 class="jump">Core Data</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW935" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Data models generated in projects that use Swift 4 use Swift structures when possible. Data models generated in projects using Swift 3 are unchanged. (27512827)</p></li><li class="li"><p>Updated the model editor to present a unified interface for Core Data’s fetch indexes, property index, and entity compound indexes. Older data models are translated into fetch index form, and saved to the old file format when necessary. Compiling a data model for a target lower than iOS 11, watchOS 4, macOS 10.13, or tvOS 11 continues to generate a compatible model. (30843153)</p></li><li class="li"><p>Added a flag to the model editor for marking an attribute as preserved after deletion, to support persistent history tracking. (31204966)
</p></li><li class="li"><p>Added support to the model editor for setting an entity's Core Spotlight display name expression. (31619747)</p></li><li class="li"><p>Added support to the model editor for creating fetch indexes from attributes, expressions, and relationships. (32407895)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW939" title="Crashes Organizer"></a><h4 class="jump">Crashes Organizer</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW940" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The Crashes Organizer symbolicates unsymbolicated logs, if they are selected using a local .dSYM indexed by Spotlight. (22550064)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW941" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Added a number of fixes to increase the stability, reliability, presentation, performance, of the Crashes Organizer. (29500046)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW944" title="Debugging"></a><h4 class="jump">Debugging</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW945" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added wireless debugging for iOS and AppleTV. (10968305)</p></li><li class="li"><p>Added support for SpriteKit and SceneKit to the visual hierarchy debugger. SpriteKit nodes appear as views. SceneKit views open a snapshot in the SceneKit editor. Changes made to the editor can be saved and don't change the app. (29169315)</p></li><li class="li"><p>Added allocation backtraces to saved memory graph files exported by Xcode or generated by the <code>leaks</code> command line tool. Saving backtraces requires that malloc stack logging is enabled for the target. (25399716)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW946" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The Xcode Memory Debugger, Leaks instrument, and <code>leaks</code> command line tool should no longer report false positive leaks of small malloc blocks related to the use of weak references in process that use Swift. (29780048)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW947" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>GPU performance counters are not available on devices with A7 or A8 processors. (32982421)</p></li><li class="li"><p>Removing a wireless development pairing from a device requires resetting the network settings by choosing Settings &gt; General &gt; Reset &gt; Reset Network Settings. (31626631)</p></li><li class="li"><p>In the GPU Frame Debugger, argument encoders created before the start of a frame capture result in the app crashing while capturing. (32415645)</p><p><em>Workaround:</em> Create argument encoders within the captured workload, or release them before capturing.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW949" title="Devices"></a><h4 class="jump">Devices</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW951" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>In the Devices pane of the Devices and Simulators window, the button to show the debug console for a paired Apple Watch now shows correctly when an iPhone with a paired watch is selected. (32365458)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW954" title="Instruments"></a><h4 class="jump">Instruments</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW957" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Instruments can’t wake a sleeping device over a network. (33384362)</p><p><em>Workaround:</em> Wake the device manually or by building and running the app.</p></li><li class="li"><p>After installing Xcode, the first time an app is run in Simulator the memory graph debugger and Instruments display no data. (34172871)</p><p><em>Workaround:</em> Reboot the Mac.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW959" title="Interface Builder"></a><h4 class="jump">Interface Builder</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW960" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added the Layout Margins option in the Size inspector to enable specifying custom margins. For more information, see <span class="content_text"><a href="https://developer.apple.com/documentation/uikit/uiview/positioning_content_within_layout_margins" class="urlLink" rel="external">Positioning Content Within Layout Margins</a></span>. (30086042)</p></li><li class="li"><p>Added support for the vertical baseline-to-baseline constraint added in iOS 11. (30086144)</p></li><li class="li"><p>Safe Area layout guides can be enabled for any subview and for XIB files. (32956031)</p></li><li class="li"><p>Interface Builder renders navigation bars, tab bars, and toolbars on the canvas as they appear on a device at runtime. (30983209)</p></li><li class="li"><p>To use the new <code>usesAutomaticRowHeights</code> property of <code>NSTableView</code> in Interface Builder, choose Automatic (Auto Layout) from the Size inspector, and then set a value for Row Height. This value is used by AppKit as part of the auto layout calculation. (29511510)</p></li><li class="li"><p>Added estimated row, header, and footer heights to the Size inspector in Interface Builder. These properties are used by UIKit to create self-sizing table cells by setting the estimated height to a value other than zero. (17995201)</p></li><li class="li"><p>Files created with Interface Builder files use the new safe area layout guide instead of top and bottom layout guides. Constraints that use the safe area are automatically converted to use top and bottom guides when deployed to a version of iOS or tvOS that doesn't support the new safe area guide. To enable the safe area guide in existing files, select the view controller or view, open the File inspector, and enable Use Safe Area Layout Guides. (29323293)</p></li><li class="li"><p>Interface Builder allows configuring the column sizing properties of <code>UISplitViewController</code>. (18359423)</p></li><li class="li"><p>Interface Builder supports setting <code>textContentType</code> on classes conforming to the <code>UITextInputTraits</code> protocol. On iOS 11, this improves the ability of AutoFill to populate with appropriate data including the Username and Password. (25019432)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW961" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>When landscape is chosen from the Device configuration pane, Interface Builder now shows the correct height for the status, top, and bottom bars. In addition, <code>IBDesignable</code> views receive the the correct values for the current trait collection. (6799670)</p></li><li class="li"><p>When Vary for Traits mode is active, choosing Clear Constraints and Reset to Suggested Constraints affects only the active configuration. (27407689)</p></li><li class="li"><p>Fixed drawing issues that occurred when resizing the Interface Builder document outline view. (32137309)</p></li><li class="li"><p>Connecting outlets and actions to a Swift protocol-typed class now works correctly. (17023935)</p></li><li class="li"><p>Outlets, actions, and inspectable properties declared in classes that have a Swift protocol extensions now work correctly. (22201035)</p></li><li class="li"><p>Objective-C annotations such as <code>NS_REFINED_FOR_SWIFT</code> no longer prevent using <code>IBInspectable</code> with a property. (30509152)</p></li><li class="li"><p>Compiling a macOS storyboard with an <code>NSTableView</code> that uses Cocoa Bindings, no longer results in <code>ibtool</code> hanging. (18867270)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW962" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Using a Swift image literal within <code>prepareForInterfaceBuilder()</code> causes <code>IBDesignablesAgentCocoaTouch</code> to crash because live views are compiled in a different bundle. (28676479)</p><p><em>Workaround:</em> Use <code>UIImage(named:inBundle:compatibleWithTraitCollection:)</code> for all image lookups, and use <code>Bundle(for: type(of: self))</code> to find the bundle for the live view class.</p></li><li class="li"><p>The navigation bar doesn't shrink when scrolling view content if Prefers Large Titles is set for the navigation controller's navigation bar, or is set on the storyboard. (33229609)</p><p><em>Workaround:</em> Add the following to the root view controller’s <code>awakeFromNib</code> method:</p><div class="codesample clear"><table><tr><td scope="row"><pre>self.navigationController?.navigationBar.prefersLargeTitles = false<span></span></pre></td></tr><tr><td scope="row"><pre>self.navigationController?.navigationBar.prefersLargeTitles = true<span></span></pre></td></tr></table></div><div class="codesample clear"><table><tr><td scope="row"><pre>self.navigationController.navigationBar.prefersLargeTitles = NO;<span></span></pre></td></tr><tr><td scope="row"><pre>self.navigationController.navigationBar.prefersLargeTitles = YES;<span></span></pre></td></tr></table></div></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW963" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p>Interface Builder no longer compiles for targets targeting iOS 6 or earlier. Opening an Interface Builder document with an older deployment target converts them to iOS 7 and later. (28726486)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW964" title="Localization"></a><h4 class="jump">Localization</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW965" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added support to XLIFF for exporting and importing <code>stringsdict</code> files, including support for using the correct per-language plural variants. (16785521)</p></li><li class="li"><p>Added support for XLIFF export of encodings other than UTF-8. (18944510)</p></li><li class="li"><p>Xcode no longer exports localizations for test targets that don't contain their own localized resources. (16813531)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW966" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Exporting a localization that contains a localized resource that is a duplicated in more than one target no longer results in an error. The duplicated resource is exported only once. (19059103)</p></li><li class="li"><p>Xcode now uses <code>\n</code> and <code>\t</code> to represent newline and tab characters in generated strings files. (22981479)</p></li><li class="li"><p>Strings files with line endings other than the standard linefeed character now work correctly for both import and export. (30552675)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW974" title="Main Thread Checker"></a><h4 class="jump">Main Thread Checker</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW975" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added Main Thread Checker, a new runtime tool that finds calls to APIs in AppKit, UIKit, and WebKit that must be made from the main thread, but are made on other threads. These calls are reported as runtime issues. Main Thread Checker is automatically enabled during debugging and can be disabled in the Diagnostics tab of the Scheme editor. (29951764)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW989" title="Playgrounds"></a><h4 class="jump">Playgrounds</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW992" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>macOS playground execution may hang in the Running state with no results produced. This is more prevalent when changing pages. (32429211)</p><p><em>Workaround:</em> Stop playground execution and rerun. If issue persists, close and reopen Xcode.</p></li><li class="li"><p>The <code>liveTouchBar</code> property of <code>PlaygroundSupport</code> is not supported. (31073754)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW994" title="Projects"></a><h4 class="jump">Projects</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW995" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Groups in the Project Navigator are now more closely associated with directories in the file system. (28612132)</p><ul class="nested"><li class="nested li"><p>Dragging files between groups in the Project Navigator moves the files in the filesystem and updates any associated SCM working copies.</p></li><li class="nested li"><p>When a group is connected to folder in the filesystem, creating, renaming, and deleting groups updates the corresponding files and folders in the the filesystem.</p></li><li class="nested li"><p>To remove a connection between a group and a folder in the filesystem, select the group, and then open the File inspector and click on the on the Clear path button (X).</p></li><li class="nested li"><p>To add or update an association from a file or a folder in the filesystem to a file or a group in the project, select the file or group, open the File inspector, and drag the corresponding file or folder onto the Location section in the File inspector.</p></li></ul></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW996" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Renaming files no longer results in the error alert <code>The file has been saved by another application</code>. (31968242)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW997" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Dragging a file into a project from the Finder may move or copy the file in the Finder. (31042020)
</p><p><em>Workaround:</em> Create a reference to the file by Command-Option dragging the file into the project.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW999" title="Refactoring"></a><h4 class="jump">Refactoring</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1002" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Adding protocol stubs by applying the Fix for “Do you want to add protocol stubs?” may not insert all the parts of a complex protocol such as <code>Swift.Collection</code>. (31078629)</p><p><em>Workaround:</em> Use the Fix button and then add any missing protocol stubs.</p></li><li class="li"><p>Constructors for locally defined types, such as a structure defined inside a function body, cannot be refactored. (31695776)</p></li><li class="li"><p>When extracting a code snippet that uses a locally defined type the extracted function may use that locally defined type as a parameter, resulting in code that does not compile. An example of a locally defined type, is an enumeration defined in a function body. (32288968)</p></li><li class="li"><p>Renaming does not affect symbols found inside macro expansions. (31989492)</p></li><li class="li"><p>Renaming Swift enumeration cases with associated values doesn't rename their argument labels. (32126363)</p></li><li class="li"><p>Renaming a Swift class or protocol exported to Objective-C doesn't rename any references that use a forward <code>@class</code> declaration in a source file that doesn't include the generated <code>MODULE-Swift.h</code> header. (32275117)</p><p><em>Workaround:</em> <code>#include</code> the generated <code>MODULE-Swift.h</code> header in your <code>.m</code> file.</p></li><li class="li"><p>Renaming a call or reference to a member-wise initializer does not rename the corresponding member properties. (32383812)</p><p><em>Workaround:</em> Manually rename member properties from their definition or references.</p></li><li class="li"><p>Undo does not work while renaming. (32429491)</p><p><em>Workaround:</em> Manually edit the new name, or use Cancel.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1009" title="Signing and Distribution"></a><h4 class="jump">Signing and Distribution</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1010" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Revised the distribution workflows. (29054761)</p><p>When a new distribution signing certificate is required, Xcode prompts for permission. Signing certificates can be exported for sharing with other team members. Revoking distribution signing certificates is no longer supported by the distribution workflow. Specifying a team is no longer required when the app is signed when the archive is built.</p><p>Added manual signing support to the Xcode distribution methods. You can now specify manual signing assets when exporting or uploading your app. Profiles that are created manually are not modified by Xcode or <code>xcodebuild</code>.</p><p>In Xcode, exporting an app now exports a distribution summary property list file, a packaging log, and an export options property list file. The distribution summary property list file describes the content of the exported app, including signature information, symbol and bitcode settings, and the embedded content. The package log contains all of the commands used to transform the archived application into a distributable packaged app. </p><p>The export options property list file includes all of the choices made during the distribution workflow and can be passed to <code>xcodebuild</code> using the <code>-exportOptionsPlist</code> flag. The property list file includes new properties (<code>signingStyle</code>, <code>signingCertificate</code>, and <code>provisioningProfiles</code>) for specifying manual signing. See <code>xcodebuild -help</code> for the full list of supported <code>ExportOptions</code> keys.</p><p>Added support for automatic signing to <code>xcodebuild</code> using the <code>-allowProvisioningUpdates</code> and <code>-allowProvisioningDeviceRegistration</code> flags. </p><p>Added development and distribution signing flows to continuous integration. Bots can development-sign apps to run on multiple connected devices. For automatic signing, bots can register connected devices and update Xcode-managed profiles but not create distribution certificates.</p></li><li class="li"><p>Enabling code coverage for the Test action of a scheme also enables it for the Run action. This results in saving the build intermediates and products from both actions in the location used by the Run action. (32079317)</p></li><li class="li"><p>Added a Strip Swift Symbols option that controls stripping Swift symbols from the Swift standard library. For more information, see New Features in Building and Linking and the Strip Swift symbols topic in Xcode Help. (31669406)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1014" title="Simulator"></a><h4 class="jump">Simulator</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1015" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added face-up and face-down orientations for supported devices. (11393667)</p></li><li class="li"><p>Updated Simulator to save screenshots to the system screenshot directory instead of always saving screenshots to the desktop. (26127809)</p></li><li class="li"><p>Added the ability to attach to a simulated device started from the command line and to close a simulated device window without shutting down simulator. To leave a device running, hold down the Control key when closing a window or quitting the app, and then click the Keep Running button in the dialog that appears. Select the checkbox to make this the default action when closing or quitting. (31004084)</p></li><li class="li"><p>Add a Share Extension for importing items into simulators:</p><ul class="nested"><li class="nested li"><p>Photos and videos are imported into the photo library of a device.</p></li><li class="nested li"><p>Locations or pins from Maps.app set the device’s simulated location.</p></li><li class="nested li"><p>App bundles are installed.</p></li><li class="nested li"><p>URLs are opened in Safari.</p></li></ul><p> Choose All Simulators to install the item to all open simulators. (31150602)</p></li><li class="li"><p>Added support for selecting the macOS audio input and output device for each simulated device by using the Hardware &gt; Audio Input and Hardware &gt; Audio Output menus. To use the Mac input or output device selected in System Preferences, choose System from the menu.</p><p>Selecting Bluetooth headphones may decrease the audio quality by placing the headphones in call mode. If that occurs, select a different device. (32337249)</p></li><li class="li"><p>Added support for starting multiple simultaneous devices to Simulator and remove the separate Simulator (Watch) app. (5687722)</p></li><li class="li"><p>Added a bezel to simulated devices. The buttons on the bezel send the appropriate event to the simulated device. The bezel supports moving the simulated device window and device gestures originating at the edge of the screen. Clicking and dragging away from the simulated screen moves the the window. Moving towards the simulated screen performs a gesture. (14020158, 31558767, 32061265, 32118310)</p></li><li class="li"><p>Added redirection of keyboard shortcuts to a simulated device. Choose Hardware &gt; Keyboard&gt; Send Menu Keyboard Shortcuts to toggle sending shortcuts to the frontmost device. The setting can be different for each device. For more information, choose Help &gt; Simulator Help and navigate to Interact with devices &gt; Redirect keyboard shortcuts. (31990219)</p></li><li class="li"><p>Updated Simulator runtimes for iOS 11 and later, tvOS 11 and later, and watchOS 4 and later to treat the filesystem as case sensitive to better simulate physical device behavior.  (18609452)</p></li><li class="li"><p>Updated Simulator to enforce background execution policies to more closely match physical devices. A backgrounded app is scheduled for execution only if it has appropriate <code>UIBackgroundTasks</code>, has a plist background mode, or receives a notification. (16532261)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1016" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Simulator captures the output from a Siri remote paired with your Mac when there is at least one simulated Apple TV device. When the frontmost simulated device is an Apple TV, the output from the Siri remote is directed to the device, otherwise the output is ignored. Quitting Simulator returns control of the Siri remote to the Mac. (29960775)</p></li><li class="li"><p>When launching Simulator, if an older version of Simulator is currently running, the older version hands off any running simulated devices to the newer version and then quits. (32384840)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1017" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Running several simulators simultaneously may exceed the maximum number of processes or maximum open file limits. When this happens starting a new process, opening a new simulated device, or opening a file results in an error. Closing one or more simulated devices or closing open programs may resolve the issue.</p><p>macOS 10.13 and later automatically scales these limits based on available system memory. The limits are fixed values on earlier versions of macOS. The limits can be increased by using <code>launchctl</code>. For more information, choose Help &gt; Simulator Help and navigate to Troubleshoot Simulator &gt; Insufficient resources. (31179087)</p></li><li class="li"><p>Launching many simulated devices in rapid succession may prevent new process from spawning by using all the system resources. There may be no warning when this occurs. (31723508)</p><p><em>Workaround:</em> Close Simulator windows or quit Simulator to shutdown devices for immediate recovery. Do not Force Quit Simulator as that does not shutdown the devices. For more information, choose Help &gt; Simulator Help and navigate to Troubleshoot Simulator &gt; Insufficient resources.</p></li><li class="li"><p>Reducing the size of an iPhone X simulated device by dragging the bezel may trigger an edge swipe instead of resizing the device. (33974533)</p><p><em>Workaround:</em> Start by increasing the window size, and then decreasing to the desired size.</p></li><li class="li"><p>Choosing Window -&gt; Scale -&gt; Actual Size for a simulated iPhone X doesn't set the size correctly. (33908038)</p><p><em>Workaround:</em> Manually resize the window to the correct size.</p></li><li class="li"><p>Using <code>xcrun simctl uninstall</code> to uninstall an app in Simulator results in a failure and hangs Simulator. (30586964)</p><p><em>Workaround:</em> Use <code>xcrun simctl erase</code> to reset the device to its initial state, or delete the app from the device’s home screen in Simulator.</p></li><li class="li"><p>When using <code>AVPlayerViewController</code> in an iPhone X simulated device, video may appear outside of the safe area and be obscured by the sensor housing or rounded corners. (34339660)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1019" title="Source Control"></a><h4 class="jump">Source Control</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1020" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The Source Control pane in Preferences now supports configuring Git author information, Git ignore file lists, and SVN ignore file lists. (10544339)</p></li><li class="li"><p>Updated the Accounts pane in Preferences to support integration with GitHub. As part of this update, repositories added in previous versions of Xcode are no longer available. Use Source Control &gt; Clone to access a repository. Repositories for GitHub and GitHub Enterprise accounts registered in Xcode appear in the clone window. Other repositories can be accessed by entering the repository URL. (30191709)</p></li><li class="li"><p>Added support for configuring two-factor authentication and an SSH key to GitHub accounts to the Accounts pane in preferences. The credentials are used when performing source control operations. (28775680)</p></li><li class="li"><p>Added a Clone window that integrates directly with GitHub to show you the favorite, private, personal and organizational repositories for all of your accounts. Each repository, shows the metadata, project readme, and an option to create a local clone of the repository. (30960520)</p></li><li class="li"><p>Added a new Source Control navigator for viewing the working copies in the project or workspace. The navigator lists branches, tags, and remotes as well as push and pull counts. (29054970)</p><p>The contextual menu in the navigator includes the ability to:</p><ul class="nested"><li class="nested li"><p>Create branches and tags.</p></li><li class="nested li"><p>Configure remotes.</p></li><li class="nested li"><p>Checkout a revision number.</p></li><li class="nested li"><p>Merge changes between branches.</p></li></ul></li><li class="li"><p>Added a history editor for viewing the full history of a branch or tag. Each commit includes the author, commit comments, and any branches or tags that are part of the commit. Clicking on a branch or tag in the Source Control navigator to show the history. (29054970)</p></li><li class="li"><p>Added a review files editor to show the changes made to the files in a commit. (29054970)</p></li><li class="li"><p>Added a Source Control inspector to show more details of a commit. (29054970)</p></li><li class="li"><p>Updated Xcode to fetch remote tracking branches automatically, mark updated files in the project navigator, and show push and pull counts in the Source Control navigator. (31839384)</p></li><li class="li"><p>github.com added support for one-click clone to Xcode from a repository in a web browser. (32294826)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1022" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When performing certain source control operations, such as a pull, the latest updates may not appear in the history view. (33919644)</p><p><em>Workaround:</em> With the history view open, choose the Editor &gt; Refresh History.</p></li><li class="li"><p>Removing the keychain credentials for a GitHub account added in Xcode using a tool other than Xcode prevents Xcode showing an authentication error. (33898250)</p><p><em>Workaround:</em> Delete the GitHub account in Xcode and then add it.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1023" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p>Subversion integration will be deprecated in a future release. (33041914)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1024" title="Source Editor"></a><h4 class="jump">Source Editor</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1025" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Command-plus (+) and Command-minus (-) now increase and decrease the size of the font in the source editor. (21423189)</p></li><li class="li"><p>Typing a opening delimiter in selected text adds a matching closing delimiter at the end of the selection. Auto-matched delimiters include double-quotes (<code>"</code>), parenthesis ("<code>(</code>" and "<code>)</code>"), square brackets (<code>[</code> and <code>]</code>), and braces (<code>{</code> and <code>}</code>). (29164633)</p></li><li class="li"><p>The comment and uncomment functionality now works correctly with languages that support nesting block comments, such as Swift, and with others that don't, such as C. This results in more accurate commenting and uncommenting. (32193940)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1027" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Using VoiceOver to drag a connection from Interface Builder to the source editor sometimes fails to create the connection. (33198923)</p><p><em>Workaround:</em> Declare the <code>IBAction</code> or <code>IBOutlet</code> in the source editor, and then drag the connection from the source editor to Interface Builder.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1029" title="Swift"></a><h4 class="jump">Swift</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1030" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Updated Xcode to support both Swift 4.0 and Swift 3.2. The language mode is controlled by the Swift Language Version build setting. These two language modes are implemented using the same compiler and standard library, which enables linking targets using Swift 3 with targets using Swift 4 so that, in most cases, migration from Swift 3.2 to Swift 4 can be done on a target-by-target basis.</p><p>Although Swift 3.2 and Swift 4.0 are intended to be compatible, the differences in how they access Cocoa and Cocoa Touch APIs can lead to inconsistencies, which may limit how a library built with one version can be used by a client target built with the other. The most common issue is a member being absent from a type; in certain situations the client may be forbidden from subclassing certain classes or adopting certain protocols.</p><p>Swift 3.2 and Swift 4.0 do not support linking with targets compiled with versions of Swift earlier than 3.2.</p><p>As usual, if the compiler or SourceKit crashes, please file a bug report with your project and sources attached. If you are mixing Swift 3 and Swift 4 in your project, please mention that in the description of the issue. (31104045)</p></li><li class="li"><p>It is now an error to perform a second access to a variable while it is being modified. Such accesses lead to code that is hard both for programmers and the compiler to understand. In general, you need to rearrange your code (for example, by making a local copy) to prevent conflicting accesses.</p><p>For example, the following code attempts to read from the variable array while the <code>sort()</code> method is mutating it.</p><div class="codesample clear"><table><tr><td scope="row"><pre>var array: [Int] = ...<span></span></pre></td></tr><tr><td scope="row"><pre>array.sort { $0 &lt; array[0] }  // Error<span></span></pre></td></tr></table></div><p>This rule is enforced by a combination of compile-time and run-time checks.</p><p>Static checks are used for most local variables, constants, and parameters. In Swift 4 mode, static failures are compile-time errors. In Swift 3 mode, static failures are a warning, but this will be strengthened to an error in a future release of Swift, so you should fix these warnings. </p><p>Dynamic checks are used for global variables, static type properties, class instance properties, and local variables that have been captured in an <code>@escaping</code> closure. In Swift 4 mode, failing a dynamic check causes a trap at runtime, much like integer overflow does. In Swift 3 mode, failing a dynamic check causes a warning to be printed to stderr.</p><p>The compile-time and runtime checks enforce the rule for accesses that occur within the same thread. Thread Sanitizer can catch most (but not all) violations that occur from different threads.</p><p>The common idiom of exchanging two elements of a collection using swap violates this rule. To support this pattern, there is now a <code>swapAt(_:_:)</code> method on all mutable collections. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0176-enforce-exclusive-access-to-memory.md" class="urlLink" rel="external">SE–0176</a></span>)</p><p></p></li><li class="li"><p>In Swift 4.0, extensions that are in the same file and that extend the same type share an access control scope. If the type that they extend is also in the same file, they share its access control scope. This means that private members declared in the type’s declaration can be accessed from extensions, and private members declared in one extension can be accessed from other extensions and from the type’s declaration. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0169-improve-interaction-between-private-declarations-and-extensions.md" class="urlLink" rel="external">SE–0169</a></span>)</p></li><li class="li"><p>You can now write multiline string literals. A <code>"""</code> followed by a new line starts the literal, and a <code>"""</code> on a new line ends it. Every line after the initial quote must start with the same whitespace as the closing quote, which will be stripped out on compilation. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0168-multi-line-string-literals.md" class="urlLink" rel="external">SE–0168</a></span>)</p></li><li class="li"><p>SQLite APIs can now be imported into Swift under the module name <code>SQLite3</code>. (18640410)</p></li><li class="li"><p>In Swift 4.0, if an Objective-C class has a designated initializer that can’t be imported into Swift, any Swift subclasses of that class will not inherit any convenience initializers. (31563662)</p></li><li class="li"><p>All Core Foundation types implicitly conform to the <code>Equatable</code> and <code>Hashable</code> protocols in Swift 3.2 and 4.0. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-2388" class="urlLink" rel="external">SR–2388</a></span>)</p><p>If you were previously adding these conformances in an extension, conditionalize the extension by using the following pattern:</p><div class="codesample clear"><table><tr><td scope="row"><pre>#if swift(&gt;=3.2)<span></span></pre></td></tr><tr><td scope="row"><pre>   // Equatable and Hashable are provided by Swift.<span></span></pre></td></tr><tr><td scope="row"><pre>#else<span></span></pre></td></tr><tr><td scope="row"><pre>   extension TheCFTypeICareAbout: Hashable {<span></span></pre></td></tr><tr><td scope="row"><pre>      static func ==(left: TheCFTypeICareAbout, right:<span></span></pre></td></tr><tr><td scope="row"><pre>         TheCFTypeICareAbout) -&gt; Bool {<span></span></pre></td></tr><tr><td scope="row"><pre>            return CFEqual(left, right)<span></span></pre></td></tr><tr><td scope="row"><pre>         }<span></span></pre></td></tr><tr><td scope="row"><pre>         var hashValue: Int {<span></span></pre></td></tr><tr><td scope="row"><pre>            return CFHash(self)<span></span></pre></td></tr><tr><td scope="row"><pre>         }<span></span></pre></td></tr><tr><td scope="row"><pre>      }<span></span></pre></td></tr><tr><td scope="row"><pre>#endif<span></span></pre></td></tr></table></div></li><li class="li"><p>Subscript declarations can now be defined to have generic parameter lists. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0148-generic-subscripts.md" class="urlLink" rel="external">SE–0148</a></span>)</p><div class="codesample clear"><table><tr><td scope="row"><pre>extension MyContainer {<span></span></pre></td></tr><tr><td scope="row"><pre>   subscript&lt;T: MyKeyConvertible&gt;(key: T) { ... }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="li"><p>Protocol composition types can now contain one or more class type terms, forming a class-constrained protocol composition. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0156-subclass-existentials.md" class="urlLink" rel="external">SE–0156</a></span>)</p><div class="codesample clear"><table><tr><td scope="row"><pre>protocol Paintable {<span></span></pre></td></tr><tr><td scope="row"><pre>   func paint()<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>class Canvas {<span></span></pre></td></tr><tr><td scope="row"><pre>   var origin: CGPoint<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>class Wall : Canvas, Paintable {<span></span></pre></td></tr><tr><td scope="row"><pre>   func paint() { ... }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>func render(_: Canvas &amp; Paintable) { ... }<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>render(Wall())<span></span></pre></td></tr></table></div><p>Class-constrained protocol compositions can be written and used in both Swift 3 and Swift 4 mode.</p><p>Generated headers for Swift APIs map class-constrained protocol compositions to Objective-C protocol-qualified class types in both Swift 3 and Swift 4 mode — for example, <code>NSSomeClass &amp; SomeProtocol &amp; OtherProtocol</code> in Swift becomes <code>NSSomeClass &lt;SomeProtocol, OtherProtocol&gt;</code> in Objective-C. Similarly <code>UIViewController&lt;UITableViewDataSource, UITableViewDelegate&gt;</code> in Objective-C becomes <code>UIViewController &amp; UITableViewDataSource &amp; UITableViewDelegate</code> in Swift.</p><p>Objective-C APIs that use protocol-qualified class types differ in behavior when imported by a module compiled in Swift 3 mode and Swift 4 mode. In Swift 3 mode, these APIs will continue to import as protocol compositions without a class constraint — for example <code>SomeProtocol &amp; OtherProtocol</code>. In Swift 4 mode, protocol-qualified class types import as class-constrained protocol compositions, for a more accurate mapping of APIs from Objective-C to Swift.</p><p>The current implementation of class-constrained protocol compositions lacks three features outlined in the Swift evolution proposal:</p><ul class="nested"><li class="nested li"><p>In the evolution proposal, a class-constrained protocol composition is permitted to contain two different classes as long as one is a superclass of the other. The current implementation only allows multiple classes to appear in the composition if they are identical.</p></li><li class="nested li"><p>In the evolution proposal, associated type and class inheritance clauses are generalized to allow class-constrained protocol compositions. The current implementation does not allow this.</p></li><li class="nested li"><p>In the evolution proposal, protocol inheritance clauses are allowed to contain a class, placing a requirement that all conforming types are a subclass of the given class. The current implementation does not allow this.</p></li></ul><p>These missing aspects of the proposal can be introduced in a future release without breaking source compatibility with existing code.</p></li><li class="li"><p>A new family of integer protocols enables more generic algorithms:</p><ul class="nested"><li class="nested li"><p><code>Numeric</code>, types that support arithmetic operators</p></li><li class="nested li"><p><code>BinaryInteger</code>, integer types that have a binary representation and support bitwise operations</p></li><li class="nested li"><p><code>FixedWidthInteger</code>, integer types that use a fixed size and support the concept of arithmetic operations that report overflow</p></li></ul><p>Heterogeneous comparisons are now allowed, eliminating the need for <code>numericCast(_:)</code> in comparisons. For example, <code>(42 as UInt) &gt; (0 as Int)</code> works.</p><p>With the introduction of smart shifts, it’s possible to shift a value by a negative amount, or to shift by a value of a different integer type without calling <code>numericCast(_:)</code>. The result type is the type of the shifted value.</p><p><code>toIntMax()</code> and <code>init(_:IntMax)</code> have been deprecated – <code>numericCast</code> converts directly between different integer types without going through the maximum width integer. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0104-improved-integers.md" class="urlLink" rel="external">SE–0104</a></span>)
</p></li><li class="li"><p><code>Sequence</code> has an associated type <code>Element</code> that is equivalent to <code>Iterator.Element</code>. The value of this associated type can be inferred from existing <code>Sequence</code> conformance. Code that already declares a type of <code>Element</code> may need to be altered to resolve conflicts. (32186094)</p></li><li class="li"><p>Slicing a raw buffer no longer results in the same raw buffer type. Specifically, <code>UnsafeBufferPointer.SubSequence</code> now has type <code>RandomAccessSlice&lt;UnsafeRawBufferPointer&gt;</code> with the same changes for the mutable version. Therefore, indexing into a raw buffer slice is no longer zero-based. This is required for raw buffers to fully conform to generic <code>Collection</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0138-unsaferawbufferpointer.md" class="urlLink" rel="external">SE–0138</a></span>)</p><p>Passing a region within a buffer to another function that takes a buffer can no longer be done via subscript. This now requires explicit initialization, using a <code>rebasing:</code> initializer, which converts from a slice to a zero-based <code>Unsafe[Mutable]RawBufferPointer</code>:</p><div class="codesample clear"><table><tr><td scope="row"><pre>takesRawBuffer(buffer[i..&lt;j])  // Incorrect<span></span></pre></td></tr><tr><td scope="row"><pre>takesRawBuffer(UnsafeRawBufferPointer(rebasing: buffer[i..&lt;j]))  // Correct<span></span></pre></td></tr></table></div><p>Subscript assignment can no longer be done directly from a buffer. This now requires creation of a slice from the complete source buffer:</p><div class="codesample clear"><table><tr><td scope="row"><pre>buffer[n..&lt;m] = smaller_buffer  // Incorrect<span></span></pre></td></tr><tr><td scope="row"><pre>buffer[n..&lt;m] = smaller_buffer.[0...]  // Correct<span></span></pre></td></tr></table></div><p>The slice type of <code>UnsafeRawBufferPointer</code> no longer has a nonmutating subscript setter. So assigning into a mutable <code>let</code> buffer no longer compiles. The assigned buffer slice now needs to be a <code>var</code>.</p><div class="codesample clear"><table><tr><td scope="row"><pre>// Incorrect<span></span></pre></td></tr><tr><td scope="row"><pre>let slice = buffer[n..&lt;m]<span></span></pre></td></tr><tr><td scope="row"><pre>slice[i..&lt;j] = buffer[k..&lt;l]<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// Correct<span></span></pre></td></tr><tr><td scope="row"><pre>var slice = buffer[n..&lt;m]<span></span></pre></td></tr><tr><td scope="row"><pre>slice[i..&lt;j] = buffer[k..&lt;l]<span></span></pre></td></tr></table></div></li><li class="li"><p>A dictionary can be created from a sequence of keys and values, and can merge keys and values into an existing dictionary. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md" class="urlLink" rel="external">SE–0165</a></span>)</p><div class="codesample clear"><table><tr><td scope="row"><pre>let asciiTable = Dictionary(uniqueKeysWithValues: zip("abcdefghijklmnopqrstuvwxyz", 97...))<span></span></pre></td></tr><tr><td scope="row"><pre>// ["w": 119, "n": 110, "u": 117, "v": 118, "x": 120, "q": 113, ...]<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>let vegetables = ["tomato", "carrot", "onion", "onion", "carrot", "onion"]<span></span></pre></td></tr><tr><td scope="row"><pre>var vegetableCounts = Dictionary(zip(vegetables, repeatElement(1, count: Int.max)), uniquingKeysWith: +)<span></span></pre></td></tr><tr><td scope="row"><pre>vegetableCounts.merge([("tomato", 1)], uniquingKeysWith: +)<span></span></pre></td></tr><tr><td scope="row"><pre>// ["tomato": 2, "carrot": 2, "onion": 3]<span></span></pre></td></tr></table></div></li><li class="li"><p>Filtering a set of a dictionary produces a result with the same type as the receiver. To transform the values of a dictionary, keeping the same keys, use the <code>mapValues(_:)</code> method. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md" class="urlLink" rel="external">SE–0165</a></span>)</p><div class="codesample clear"><table><tr><td scope="row"><pre>let vowels: Set&lt;Character&gt; = ["a", "e", "i", "o", "u"]<span></span></pre></td></tr><tr><td scope="row"><pre>let asciiVowels = asciiTable.filter({ vowels.contains($0.key) })<span></span></pre></td></tr><tr><td scope="row"><pre>asciiVowels["a"]  // 97<span></span></pre></td></tr><tr><td scope="row"><pre>asciiVowels["b"]  // nil<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>let asciiHexTable = asciiTable.mapValues({ "0x" + String($0, radix: 16) })<span></span></pre></td></tr><tr><td scope="row"><pre>// ["w": "0x77", "n": "0x6e", "u": "0x75", "v": "0x76",  "x": "0x78", ...]<span></span></pre></td></tr></table></div></li><li class="li"><p>When using a key as a dictionary subscript, a default value to be returned can be supplied if the key is not present in the dictionary. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md" class="urlLink" rel="external">SE–0165</a></span>)</p><div class="codesample clear"><table><tr><td scope="row"><pre>for veg in ["tomato", "cauliflower"] {<span></span></pre></td></tr><tr><td scope="row"><pre>    vegetableCounts[veg, default: 0] += 1<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>// ["tomato": 3, "carrot": 2, "onion": 3, "cauliflower": 1]<span></span></pre></td></tr></table></div></li><li class="li"><p>Added an <code>init(grouping:by:)</code> initializer to <code>Dictionary</code> that converts an array or other sequence into a dictionary, grouped by a particular trait. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md" class="urlLink" rel="external">SE–0165</a></span>)</p><div class="codesample clear"><table><tr><td scope="row"><pre>let buttons = ...  // an array of button instances<span></span></pre></td></tr><tr><td scope="row"><pre>let buttonsByStatus = Dictionary(grouping: buttons, by: { $0.isEnabled })<span></span></pre></td></tr><tr><td scope="row"><pre>// How many buttons are enabled?<span></span></pre></td></tr><tr><td scope="row"><pre>print("Enabled:", buttonsByStatus[true]?.count ?? 0)<span></span></pre></td></tr></table></div></li><li class="li"><p><code>Dictionary</code> and <code>Set</code> have a visible <code>capacity</code> property and a <code>reserveCapacity(_:)</code> method similar to <code>Array</code>, and a dictionary’s keys and values properties are represented by specialized collections. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0165-dict.md" class="urlLink" rel="external">SE–0165</a></span>)</p></li><li class="li"><p>Added a new <code>Substring</code> type to Swift 4 that is returned when slicing a <code>String</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0163-string-revision-1.md" class="urlLink" rel="external">SE-0163</a></span>)</p><p>In Swift 3.2, slicing a <code>String</code> continues to return a <code>String</code>, but you can provide type context to get a <code>Substring</code> — for example, <code>myString[i...] as Substring</code>.</p><p><code>Substring</code> presents an almost-identical API as that of <code>String</code>. A new protocol, <code>StringProtocol</code>, is available to write generic code that applies to either <code>String</code> or <code>Substring</code>. </p></li><li class="li"><p><code>String</code> now conforms to <code>BidirectionalCollection</code> and <code>RangeReplaceableCollection</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0163-string-revision-1.md" class="urlLink" rel="external">SE-0163</a></span>)</p></li><li class="li"><p>A new <code>RangeExpression</code> protocol is now used to unify all range types (such as <code>CountableRange</code> and <code>ClosedRange</code>), and new one-sided ranges (such as <code>PartialRangeUpTo</code>) have been added. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0172-one-sided-ranges.md" class="urlLink" rel="external">SE-0172</a></span>)</p><p>Any type that conforms to <code>RangeExpression</code> can now be used to slice a collection.</p><div class="codesample clear"><table><tr><td scope="row"><pre>let numbers = [10, 20, 30, 40, 50, 60]<span></span></pre></td></tr><tr><td scope="row"><pre>if let i = numbers.index(of: 40) {<span></span></pre></td></tr><tr><td scope="row"><pre>    print(numbers[..&lt;i])<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>// Prints "[10, 20, 30]"<span></span></pre></td></tr></table></div><p>Countable partial ranges can be used as sequences.</p><div class="codesample clear"><table><tr><td scope="row"><pre>let alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"<span></span></pre></td></tr><tr><td scope="row"><pre>let asciiTable = zip(65..., alphabet)<span></span></pre></td></tr><tr><td scope="row"><pre>for (code, letter) in asciiTable {<span></span></pre></td></tr><tr><td scope="row"><pre>    print(code, letter)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>// "65 A"<span></span></pre></td></tr><tr><td scope="row"><pre>// "66 B"<span></span></pre></td></tr><tr><td scope="row"><pre>// "67 C"<span></span></pre></td></tr><tr><td scope="row"><pre>// ...<span></span></pre></td></tr><tr><td scope="row"><pre>// "89 Y"<span></span></pre></td></tr><tr><td scope="row"><pre>// "90 Z"<span></span></pre></td></tr></table></div></li><li class="li"><p><code>NSNumber</code> is stricter about the result of bridging some of its values to corresponding Swift value types.</p><p>Specifically, using an <code>as?</code> cast returns <code>nil</code> if the value stored by <code>NSNumber</code> does not fit into the requested Swift value type. For example, <code>NSNumber(2) as? Bool</code> returns <code>nil</code>, but <code>NSNumber(1) as? Bool</code> returns <code>true</code>.</p><p>To ignore this behavior and force a cast, use the appropriate conversion method on <code>NSNumber</code> instead. For example, <code>myNumber.boolValue</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0170-nsnumber_bridge.md" class="urlLink" rel="external">SE–0170</a></span>)</p></li><li class="li"><p>The archival and serialization API is built in to Swift, with a focus on type-safe conversions from external formats directly into native Swift types, and interoperability with common formats like JSON and property list. The <code>Encodable</code> and <code>Decodable</code> protocols (along with <code>Codable</code>, which implies both), allow types to participate in encoding and decoding mechanisms. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0166-swift-archival-serialization.md" class="urlLink" rel="external">SE–0166</a></span>)</p><p>Many of the basic data types conform to <code>Codable</code>. Custom data types whose members all conform to <code>Codable</code> can use a compiler-generated implementation of these protocols by declaring protocol conformance.</p><div class="codesample clear"><table><tr><td scope="row"><pre>public struct Person: Codable {<span></span></pre></td></tr><tr><td scope="row"><pre>    let name: String<span></span></pre></td></tr><tr><td scope="row"><pre>    let email: String<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="li"><p>Updated <code>Encoder</code> and <code>Decoder</code> for type-safe conversion to and from the JSON and property list formats. Combined with the default <code>Codable</code> implementation, many types can natively convert to and from these formats, with no additional encoding or decoding work. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0167-swift-encoders.md" class="urlLink" rel="external">SE–0167</a></span>)</p><div class="codesample clear"><table><tr><td scope="row"><pre>import Foundation<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>let johnny = Person(name: "Johnny Appleseed", email: "johnny_appleseed@apple.com")<span></span></pre></td></tr><tr><td scope="row"><pre>let encoder = JSONEncoder()<span></span></pre></td></tr><tr><td scope="row"><pre>let data = try encoder.encode(johnny)<span></span></pre></td></tr><tr><td scope="row"><pre>// data is {"name": "Johnny Appleseed", "email": "johnny_appleseed@apple.com"}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>let decoder = JSONDecoder()<span></span></pre></td></tr><tr><td scope="row"><pre>let person = try decoder.decode(Person.self, from: data)<span></span></pre></td></tr><tr><td scope="row"><pre>print(person.name)<span></span></pre></td></tr><tr><td scope="row"><pre>// Prints "Johnny Appleseed"<span></span></pre></td></tr></table></div></li><li class="li"><p>Swift 4 adds support for type-safe key path literals. They are formed using syntax that looks like this: <code>\BaseType.propertyName</code>. The backslash is important: it disambiguates between a key path to a property, and simply accessing the property. When the base type can be inferred, it can be elided producing expressions that look like: <code>\.propertyName</code>. Key path expressions produce instances from the hierarchy of <code>KeyPath</code> types listed below, where <code>BaseType</code> is the dynamic type of the base, and <code>PropertyType</code> the type of named property:</p><ul class="nested"><li class="nested li"><p><code>KeyPath&lt;BaseType, PropertyType&gt;</code> – readonly key path</p></li><li class="nested li"><p><code>WritableKeyPath&lt;BaseType, PropertyType&gt;</code> – read/write key path that can mutate a value type directly, similar to <code>inout</code> and <code>mutating</code></p></li><li class="nested li"><p><code>ReferenceWritablePath&lt;BaseType, PropertyType&gt;</code> – read/write key path that can mutate reference types</p></li></ul><p>These new key paths exist alongside the existing string <code>#keyPath</code> expressions introduced last year. <code>#keyPath</code> remains available for use with legacy <code>String</code>-based API. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0161-key-paths.md" class="urlLink" rel="external">SE–0161</a></span>)</p></li><li class="li"><p>In Swift 4 mode, the type system properly distinguishes between functions that take one tuple argument, and functions that take multiple arguments. ([<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0110-distingish-single-tuple-arg.md" class="urlLink" rel="external">SE-0110</a></span>])</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1034" title="Swift Compiler"></a><h4 class="jump">Swift Compiler</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1035" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>In Swift 4 mode, a declaration is inferred to be <code>@objc</code> where it is required for semantic consistency of the programming model. Specifically, it is inferred in the following cases:</p><ul class="nested"><li class="nested li"><p>The declaration is an override of an <code>@objc</code> declaration</p></li><li class="nested li"><p>The declaration satisfies a requirement in an <code>@objc</code> protocol</p></li><li class="nested li"><p>The declaration has one of the following attributes: <code>@IBAction</code>, <code>@IBOutlet</code>, <code>@IBInspectable</code>, <code>@GKInspectable</code>, or <code>@NSManaged</code></p></li></ul><p>Additionally, in Swift 4 mode, dynamic declarations that don’t have <code>@objc</code> inferred based on the rules above will need to be explicitly marked <code>@objc</code>.
Swift 3.2 retains the more permissive Swift 3 rules for inference of <code>@objc</code> within subclasses of <code>NSObject</code>. However, the compiler emits warnings about places where the Objective-C entry points for these inference cases are used, such as in a <code>#selector</code> or <code>#keyPath</code> expression, via messaging through <code>AnyObject</code>, or direct uses in Objective-C code within a mixed Swift and Objective-C project. The warnings can be silenced by adding an explicit <code>@objc</code>. Uses of these entry points that are not statically visible to the compiler can be diagnosed at runtime by setting the environment variable <code>SWIFT_DEBUG_IMPLICIT_OBJC_ENTRYPOINT</code> to a value between 1 and 3, and then testing the application. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0160-objc-inference.md" class="urlLink" rel="external">SE–0160</a></span>)</p></li><li class="li"><p>The Swift compiler diagnoses attempts to use <code>NSCoding</code> with a class that doesn’t have a simple Objective-C runtime name. The names of these classes may be affected by unrelated changes. For example, the runtime name of a private class depends on the name of the containing source file. Alternatively, use the <code>@objc</code> attribute to explicitly specify a runtime name. If you archive the class under its current “mangled” name, the compiler provides a fix-it to use it. (32314195)</p></li><li class="li"><p>Protocols and associated types can now contain <code>where</code> clauses that provide additional restrictions on associated types. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0142-associated-types-constraints.md" class="urlLink" rel="external">SE–0142</a></span>)</p><div class="codesample clear"><table><tr><td scope="row"><pre>protocol StringRepresentable: RawRepresentable where RawValue == String {}<span></span></pre></td></tr><tr><td scope="row"><pre>protocol RawStringWrapper {<span></span></pre></td></tr><tr><td scope="row"><pre>    associatedtype Wrapped: RawRepresentable where Wrapper.RawValue == String<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="li"><p>The Swift compiler now lazily and implicitly imports outer modules when importing a submodule after Swift finishes parsing the bridging header. This is a behavior change from previous releases where the import happened eagerly. As a result, some bridging headers that might have relied on the eager implicit import (such as by directly using a type defined in the outer module) will no longer compile; they will need to either forward-declare such definitions or explicitly import the outer module. (30615193)</p></li><li class="li"><p>In order for default argument expressions to be inlined into the caller in a future version of Swift, they must not reference any declarations that have less access than the enclosing function. (32189807)</p><div class="codesample clear"><table><tr><td scope="row"><pre>// Before<span></span></pre></td></tr><tr><td scope="row"><pre>private func computeTheBestInteger() -&gt; Int {<span></span></pre></td></tr><tr><td scope="row"><pre>    return 4<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>public func useAnInteger(_ x: Int = computeTheBestInteger().absoluteValue) {<span></span></pre></td></tr><tr><td scope="row"><pre>    print(x)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>There are multiple ways to modify existing code to satisfy this condition:</p><ul class="nested"><li class="nested li"><p>Change the non-public reference to be public.</p><div class="codesample clear"><table><tr><td scope="row"><pre>public func computeTheBestInteger() -&gt; Int {<span></span></pre></td></tr><tr><td scope="row"><pre>    return 4<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>public func useAnInteger(_ x: Int = computeTheBestInteger().absoluteValue) {<span></span></pre></td></tr><tr><td scope="row"><pre>    print(x)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="nested li"><p>Add a helper function.</p><div class="codesample clear"><table><tr><td scope="row"><pre>private func computeTheBestInteger() -&gt; Int {<span></span></pre></td></tr><tr><td scope="row"><pre>    return 4<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>public func defaultXForUseAnInteger() -&gt; Int {<span></span></pre></td></tr><tr><td scope="row"><pre>    return computeTheBestInteger().absoluteValue<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>public func useAnInteger(_ x: Int = computeTheBestInteger().absoluteValue) {<span></span></pre></td></tr><tr><td scope="row"><pre>    print(x)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="nested li"><p>Use a sentinel value.</p><div class="codesample clear"><table><tr><td scope="row"><pre>private func computeTheBestInteger() -&gt; Int {<span></span></pre></td></tr><tr><td scope="row"><pre>    return 4<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>public func useAnInteger(_ xOrNil: Int? = nil) {<span></span></pre></td></tr><tr><td scope="row"><pre>    let x = xOrNil ?? (computeTheBestInteger().absoluteValue)<span></span></pre></td></tr><tr><td scope="row"><pre>    print(x)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li></ul></li><li class="li"><p>The compiler can now warn about individual expressions that take a long time to type check.</p><p>To enable this warning, go the Build Settings, Swift Compiler - Custom Flags, Other Swift Flags, and add the <code>-Xfrontend -warn-long-expression-type-checking=&lt;limit&gt;</code> flag, where <em>&lt;limit&gt;</em> is the lower limit of the number of milliseconds that an expression must take to type check in order for the warning to be emitted.</p><p>This allows users to identify those expressions that are contributing significantly to build times and rework them by splitting them up or adding type annotations to attempt to reduce the time spent on those expressions. (32619658)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1036" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Swift integer values can be used as an index in a bridged <code>NSDictionary</code> with <code>NSNumber</code> keys. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-3172" class="urlLink" rel="external">SR–3172</a></span>)</p></li><li class="li"><p>When assigning nil to a lazy property with an <code>ImplicitlyUnwrappedOptional</code> type, the value is correctly set to <code>nil</code>. (32778003)</p></li><li class="li"><p>Covariant method overrides in classes are now fully supported, fixing many crashes and compile-time assertions when defining or calling such methods. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-1529" class="urlLink" rel="external">SR–1529</a></span>)</p><div class="codesample clear"><table><tr><td scope="row"><pre>class Bed {}<span></span></pre></td></tr><tr><td scope="row"><pre>class Nook: Bed {}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>class Cat&lt;T&gt; {<span></span></pre></td></tr><tr><td scope="row"><pre>    func eat(snack: T) {}<span></span></pre></td></tr><tr><td scope="row"><pre>    func play(game: String) {}<span></span></pre></td></tr><tr><td scope="row"><pre>    func sleep(where: Nook) {}<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>class Dog: Cat&lt;(Int, Int)&gt; {<span></span></pre></td></tr><tr><td scope="row"><pre>    // 'T' becomes concrete<span></span></pre></td></tr><tr><td scope="row"><pre>    override func eat(snack: (Int, Int)) {}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>    // 'game' becomes optional<span></span></pre></td></tr><tr><td scope="row"><pre>    override func play(game: String?) {}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>    // 'where' becomes a superclass<span></span></pre></td></tr><tr><td scope="row"><pre>    override func sleep(where: Bed) {}<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1037" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When the Precompile Bridging Header build setting is on, some configurations of headers in Framework targets can cause the compiler to mistakenly read a header twice, both as part of a module and as an independent, non-modular header. This can lead to warnings about duplicate Objective-C definitions, and ultimately compilation failures or compiler crashes due to incorrect cross-references between Swift module files. (33837253)</p><p><em>Workaround:</em> Change the Precompile Bridging Header build setting to No for the affected target.</p></li><li class="li"><p>If a Swift class uses a type that is newer than its deployment target in a method exposed to Objective-C, the generated <code>MyApp-Swift.h</code> header will have warnings in it about the type being “partial,” due to the Swift compiler not including availability information. (33313703)</p><p><em>Workaround:</em> Turn off the <code>-Wunguarded-availability-new</code> warning whenever the generated header is included.</p><div class="codesample clear"><table><tr><td scope="row"><pre>#pragma clang diagnostic push<span></span></pre></td></tr><tr><td scope="row"><pre>#pragma clang diagnostic ignored "-Wunguarded-availability-new"<span></span></pre></td></tr><tr><td scope="row"><pre>#include "MyApp-Swift.h"<span></span></pre></td></tr><tr><td scope="row"><pre>#pragma clang diagnostic pop<span></span></pre></td></tr></table></div></li><li class="li"><p>The Swift compiler doesn't produce warnings when a method in a subclass is intended to match an optional method in a protocol adopted by the superclass. For example, if the superclass conforms to <code>UITableViewDelegate</code>, and the subclass declares a method incorrectly named <code>tableView(_:editingStyleForRowAtIndexPath:)</code> instead of <code>tableView(_:editingStyleForRowAt:)</code>, the compiler will not warn about it. Additionally, if Swift 3 style inference of <code>@objc</code> is turned off the method will not be called at run time. Make sure to check any such methods carefully. (30489065, <span class="content_text"><a href="https://bugs.swift.org/browse/SR-3943" class="urlLink" rel="external">SR–3943</a></span>)</p></li><li class="li"><p>When the Precompile Bridging Header build setting is on, the Swift compiler will no longer automatically read a module map file that is in the same directory as the bridging header. This may lead to errors of the form <code>module ‘TheModule’ not found</code>. (32810754)</p><p><em>Workaround:</em> If reading a module map from this directory is needed, add it as an explicit search path under the User Header Search Paths build setting.</p></li><li class="li"><p>Attempting to use the Accelerate framework from Swift may generate linker errors about missing simd symbols such as <code>error: Couldn't lookup symbols: __T04simd6float4VN</code> (32457742)</p><p><em>Workaround:</em> Add <code>import simd</code> to the Swift file.</p></li><li class="li"><p>Image literals result in an immediate run-time exit when used outside the main application target. (26873717)</p><p><em>Workaround:</em> Continue using <code>NSImage</code> or <code>UIImage</code> APIs to create images in non-application targets.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1039" title="Swift Package Manager"></a><h4 class="jump">Swift Package Manager</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1040" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The package manifest API used in a package's <code>Package.swift</code> file has been improved. Create a new package or use the package manager command  <code>swift package tools-version --set-current</code> to opt into the new API. Packages can still use the previous manifest format. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0158-package-manager-manifest-api-redesign.md" class="urlLink" rel="external">SE–0158</a></span>, <span class="content_text"><a href="https://bugs.swift.org/browse/SR-3949" class="urlLink" rel="external">SR-3949</a></span>)</p></li><li class="li"><p>Added support for custom directory layouts for the source files in a package. Each target in a package can specify the path of the directory that contains the source files for that target. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0162-package-manager-custom-target-layouts.md" class="urlLink" rel="external">SE–0162</a></span>, <span class="content_text"><a href="https://bugs.swift.org/browse/SR-29" class="urlLink" rel="external">SR–29</a></span>)</p></li><li class="li"><p>Changed the default linking for C targets to static linking. Linking options are controlled in the package manifest by passing the <code>.static</code> or <code>.dynamic</code> case when specifying the type of a library product. (29730882)</p></li><li class="li"><p>Added support for a package to explicitly declare the products that the package vends to clients. Previously, the products were inferred based on the targets in the package. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0146-package-manager-product-definitions.md" class="urlLink" rel="external">SE–0146</a></span>, <span class="content_text"><a href="https://bugs.swift.org/browse/SR-3606" class="urlLink" rel="external">SR–3606</a></span>)</p></li><li class="li"><p>Updated the error messages for many package manager issues to be clearer and more informative. (29772725)</p></li><li class="li"><p>Updated the <code>swift package edit</code> command to detect dependency resolution errors before making changes by resolving package dependencies before placing the package into edit mode. (29772779)</p></li><li class="li"><p>Package dependencies can now refer to a branch name instead of a tagged version. Use a named branch as a package dependency only when the package is closely coupled with all of its clients. Tagged versions of a package must not depend on any branches. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0150-package-manager-branch-support.md" class="urlLink" rel="external">SE–0150</a></span>, <span class="content_text"><a href="https://bugs.swift.org/browse/SR-666" class="urlLink" rel="external">SR–666</a></span>)</p></li><li class="li"><p>Added the <code>--path</code> option to the <code>swift package edit</code> command to support "top-of-tree" development of a related set of packages by suspending the automatic checkout management of the remote package. This enables iterating on a package and several of its dependencies without having to commit and tag those changes to see the holistic result. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0149-package-manager-top-of-tree.md" class="urlLink" rel="external">SE–0149</a></span>, <span class="content_text"><a href="https://bugs.swift.org/browse/SR-3709" class="urlLink" rel="external">SR–3709</a></span>)</p></li><li class="li"><p>Changed the <code>--branch</code> option of the <code>swift package edit</code> command to be optional. If no branch is provided, the Git repository is put into a "detached HEAD" state. (30120243)</p></li><li class="li"><p>A package can declare the required minimum version of the Swift tools needed to use the package. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0152-package-manager-tools-version.md" class="urlLink" rel="external">SE–0152</a></span>)</p></li><li class="li"><p>Building a package on macOS only requires that the Command Line Developer Tools are installed. Previously, Xcode needed to be installed. Running unit tests still requires Xcode. (30813768)</p></li><li class="li"><p>Updated Xcode projects generated by the package manager to use stable and readable object identifiers for objects such as targets, allowing Xcode schemes to continue referencing the same objects even when the project is regenerated with modified contents. (31019219)</p></li><li class="li"><p>Updated the error message for unsatisfiable package dependencies to explain the dependency requirements that are in conflict. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-4072" class="urlLink" rel="external">SR–4072</a></span>, <span class="content_text"><a href="https://bugs.swift.org/browse/SR-4237" class="urlLink" rel="external">SR–4237</a></span>)</p></li><li class="li"><p>Updated package manifest interpretation and package builds on macOS to use a sandbox, which prevents network access and file system modification. This helps mitigate the effect of maliciously crafted manifests. (31107213)</p></li><li class="li"><p>Updated newly cloned package dependencies on macOS to use read-only file permissions, reducing the risk of unintentional changes. When a package is put into edit mode, write permission is added for the files in that package. (31286403)</p></li><li class="li"><p>Updated the support of custom directory layouts on Linux by searching for <code>LinuxMain.swift</code> in all directory hierarchies contain a test target directory. The search continues to the package root directory. (31585721)</p></li><li class="li"><p>Updated dependency resolution by replacing the <code>Package.pins</code> file with the new <code>Package.resolved</code> file. The new file contains resolved dependency versions enabling dependency re-resolution to occur automatically in more cases. Commit the file with the package to use the new method of dependency resolution. In addition, the <code>resolve</code> command for <code>swift package</code> replaces the <code>fetch</code> command. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0175-package-manager-revised-dependency-resolution.md" class="urlLink" rel="external">SE–0175</a></span>)</p></li><li class="li"><p>Added a prerelease semantic versioning component to package version tags. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-1039" class="urlLink" rel="external">SR–1039</a></span>)</p></li><li class="li"><p>Package dependencies are now cloned in parallel by default. (32286386)</p></li><li class="li"><p>Added the <code>cLanguageStandard</code> and <code>cxxLanguageStandard</code> properties to packages for specifying which language standard to use when compiling C and C++ targets. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0181-package-manager-cpp-language-version.md" class="urlLink" rel="external">SE–0181</a></span>)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1041" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Code completion now works when editing the <code>Package.swift</code> manifest in an Xcode project generated from a Swift package. (33284557)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW880" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Creating static executables using the new option <code>--static-swift-stdlib</code> does not function correctly. (33861492)</p><p><em>Workaround:</em> Build the package using the following command: <code>swift build -Xswiftc -static-stdlib</code>.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1044" title="Swift SDK"></a><h4 class="jump">Swift SDK</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1045" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Changed <code>NSFastEnumerationIterator</code> from a <code>class</code> to a <code>struct</code>. Existing code that works directly with <code>NSFastEnumerationIterator</code> may have to switch to using a <code>var</code> instead of a <code>let</code>. (30905263)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1046" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Swift apps that transitively import the ModelIO framework but that do not use it will launch correctly on OS versions that do not contain the framework. (33471433)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1047" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>The following AVFoundation APIs are temporarily unavailable (34378539):</p><ul class="nested"><li class="nested li"><p><code>AVCaptureDevice.Format.supportedColorSpaces</code></p></li><li class="nested li"><p><code>AVCaptureDevice.supportedFlashModes</code></p></li><li class="nested li"><p><code>AVCapturePhotoOutput.availablePhotoPixelFormatTypes</code></p></li><li class="nested li"><p><code>AVCapturePhotoOutput.availableRawPhotoPixelFormatTypes</code></p></li><li class="nested li"><p><code>AVCapturePhotoSettings.availablePreviewPhotoPixelFormatTypes</code></p></li></ul></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1049" title="Swift Migration"></a><h4 class="jump">Swift Migration</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1052" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Some APIs have changed to accept <code>[NSAttributeKey: Any]</code> dictionaries instead of <code>[String: Any]</code>, such as <code>NSString.size(withAttributes:)</code> and <code>NSString.draw(at:withAttributes:)</code>. These changes may produce errors after migration is completed. (32431618)</p><p><em>Workaround:</em> Change the type to match the expected parameters in the variable declaration.</p></li><li class="li"><p>When a <code>Dictionary</code> that has an <code>NSAttributedStringKey</code> as key uses a <code>String</code> as an index, the compiler may return an error of the form: <code>error: ambiguous reference to member 'subscript'</code>. (32432013)</p><p><em>Workaround:</em> Wrap the key object with <code>NSAttributedStringKey(rawValue: ... )</code></p></li><li class="li"><p>The migrator does not properly handle cases where an API changes nullability and the right side of an <code>if let</code> statement becomes non-optional. This will produce errors such as: error: <code>initializer for conditional binding must have Optional type, not '&lt;TYPE&gt;'</code>. (32476453)</p><p><em>Workaround:</em> Change the <code>if let</code> statement to make it an assignment with <code>let</code> instead.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1054" title="Templates"></a><h4 class="jump">Templates</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1055" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Updated template macro expansion for new files. Improvements include:</p><ul class="nested"><li class="nested li"><p>Added <code>FILEHEADER</code>, a new macro for the content of a standard file header comment.</p></li><li class="nested li"><p>The contents of a macros can be defined using other macros. For example, the <code>FILEHEADER</code> macro is defined using other macros such as <code>FILENAME</code> and <code>COPYRIGHT</code>, and <code>COPYRIGHT</code> is defined using <code>ORGANIZATIONNAME</code> and <code>YEAR</code>.</p></li><li class="nested li"><p>Macro expansions can include modifiers.</p></li><li class="nested li"><p>It is possible override the default macros and to provide custom ones.</p></li></ul><p>For more information, choose Help &gt; Xcode Help and navigate to Appendixes &gt; Text Macros. (5775785)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1059" title="Testing"></a><h4 class="jump">Testing</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1060" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p><code>xcodebuild</code> no longer launches Simulator when running tests. (27385435)</p></li><li class="li"><p>Added a teardown block API to XCTest for cleaning up the test state after it completes. (28097197)</p></li><li class="li"><p>Added an API to XCTest to wait on for an <code>XCUIElement</code> to exist before proceeding. (28483267)</p></li><li class="li"><p>Added support to XCTest for targeting multiple applications in a single UI test. This includes monitoring application state and making a backgrounded application the frontmost application. (28948745)</p></li><li class="li"><p>XCTest types that are closely associated with a particular class such as <code>XCUIElement.Type</code> are available as nested types in Swift 4. (29000570)</p></li><li class="li"><p>Added <code>XCTActivity</code>, a new API for grouping UI test activity together in test reports and logging. (30401267)</p></li><li class="li"><p>Added <code>XCTAttachment</code>, a new API for bundling diagnostic test resources, such as rich logging, with your test results. (30478677)</p></li><li class="li"><p><code>xcodebuild</code> tests on multiple destinations simultaneously by default. Use the <code>-disable-concurrent-testing</code> command line argument to disable concurrent testing. (31964004)</p></li><li class="li"><p>Updated the save format for automatic captured screenshots to JPG. (32719585)</p></li><li class="li"><p>Added new APIs to XCTest for managing screenshots including scheme-level configuration options for disabling automatic screenshots, and for capturing screenshots of partial, individual or multiple displays. (21327915)</p></li><li class="li"><p>Updated UI testing to support targeting LSUIElements-based applications. (21344280)</p></li><li class="li"><p>Increased the performance of UI testing when the application is built and installed by Xcode. Also added <code>firstMatch</code> for restricting query execution in UI tests. (29544176, 22980005)</p></li><li class="li"><p>Added language and region specific configuration for tests the Xcode schemes. (28897796)
</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1061" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p><code>NSUInteger</code> in XCTest APIs is imported into Swift 4 as <code>Int</code> rather than <code>UInt</code>, bringing it into alignment with other system frameworks. (29589664)</p></li><li class="li"><p>A test assertion during a UI test always results in XCTest capturing a screenshot. (28853076)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1062" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Xcode does not show correct file and line information for some test failures when the tests are run in the Simulator. (33810627)</p></li><li class="li"><p><code>xcodebuild test</code> can intermittently fail with errors. (32881403, 32836473, 29122169, 32354498, 32852527).</p><p>The errors include:</p><ul class="nested"><li class="nested li"><p><code>Launch session expired before checking in</code></p></li><li class="nested li"><p><code>Early unexpected exit, operation never finished bootstrapping - no restart will be attempted</code></p></li><li class="nested li"><p><code>App accessibility isn't loaded</code></p></li><li class="nested li"><p><code>Domain=XCTestManagerErrorDomain Code=12 "Failed to get main window after 30 retries"</code></p></li><li class="nested li"><p><code>Error Domain=DTServiceHubClient Code=–11 "unable to contact local DTServiceHub to bless simulator connection"</code></p></li><li class="nested li"><p><code>Test runner failed to initialize for UI testing but did not provide any additional details</code></p></li></ul><p><em>Workaround:</em> Try running the test again.</p></li><li class="li"><p>When running a parallel test on macOS High Sierra, <code>xcodebuild test</code> can sometimes become unresponsive. (33206730)</p><p><em>Workaround:</em> Cancel the test using Control-C and retry the test. Alternatively, disable parallel testing by using the <code>-disable-concurrent-testing</code> flag.</p></li><li class="li"><p><code>testmanagerd</code> exiting unexpectedly with an error of <code>Assertion failed: (staticHeader.header_magic == DTX_MESSAGE_MAGIC)</code> results in a running <code>xcodebuild test</code> failing. (33470538)</p><p><em>Workaround:</em> Try the test again.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1064" title="Thread Sanitizer"></a><h4 class="jump">Thread Sanitizer</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1065" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Updated Thread Sanitizer to catch higher-level races on Objective-C and Swift collections, such as writing to a mutable array from different threads without using proper synchronization. (26798589)</p></li><li class="li"><p>Updated Thread Sanitizer to catch more cross-thread violations of the Swift rule that requires exclusive access to memory. For example, when multiple threads call mutating methods on the same structure without synchronization. (30455576)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1069" title="Toolchains"></a><h4 class="jump">Toolchains</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1073" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p>The new build system no longer runs a shell script build phase with the legacy <code>COMMAND_MODE</code>. This results in utility programs, such as <code>echo</code>, conforming to Version 3 of the Single UNIX Specification. (33875525)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1074" title="Undefined Behavior Sanitizer"></a><h4 class="jump">Undefined Behavior Sanitizer</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1075" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added Undefined Behavior Sanitizer, a new low overhead runtime tool that finds several types of undefined behavior in C languages, such as integer overflows, invalid casts, and alignment violations. Undefined Behavior Sanitizer is enabled in the Diagnostics tab of the Scheme editor and is compatible with all other sanitizers. (15425728)</p></li><li class="li"><p>Added optional detection of nullability annotation violations at runtime. The feature is enabled in the Undefined Behavior Sanitizer section of Build Settings by setting Enable Nullability Annotation Checks to Yes. (30619298)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1079" title="Xcode Server"></a><h4 class="jump">Xcode Server</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1080" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added support for running tests in parallel on multiple devices and simulators to Xcode Server and <code>xcodebuild</code>. Bots can be configured to enable or disable parallel testing on devices and default to parallel testing. The output produced by <code>xcodebuild</code> when running tests in parallel has been updated and any automated tooling relying on the format of the output may need to be updated. (14254639)</p></li><li class="li"><p>Added support for automatic and manual provisioning configurations. Servers can be added from the updated bot editor by an agent or admin of the developer team. A scheme that requires manually specified certificates or profiles can shared with the server from the new Signing tab in the bot editor. (15437174)</p></li><li class="li"><p>Updated Xcode Server to support configuring additional arguments that are passed to <code>xcodebuild</code> when integrations are run. (23578597)</p></li><li class="li"><p>Added two-factor authentication to Xcode server. This can be used when joining your server to your development team, and eliminates the need for an app-specific password. (27002415)</p></li><li class="li"><p>Added sending an “all clear” email notification when all issues that are tracked by a bot have been resolved. (26179348)</p></li><li class="li"><p>Xcode Server no longer requires the macOS Server app. Configure your server and bots in the Server &amp; Bots tab of Xcode Preferences. (28211693)</p></li><li class="li"><p>Updated bots to run tests in a specific language and region. (30382604)</p></li><li class="li"><p>Updated bot configuration to include an optional Export Options Plist that is to configure the export of an installable product from an archive. (31895193)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1081" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Copy, paste, and cmd+F now work as expected in the logs tab of an integration report. (14140192)</p></li><li class="li"><p>Xcode Server logs now support copy and paste. (26605066)</p></li><li class="li"><p>When an upgrade integration runs after installing a new version of Xcode, Xcode Server correctly indicates any changes in SDK versions. (30983641)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1082" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Testing on networked devices using Xcode Server doesn't work when Xcode Server is initialized with a different build service user account. (33904987)</p><p><em>Workaround:</em> Select the main user account for the build service user when initializing Xcode Server.</p></li><li class="li"><p>Removing Server.app after configuring Xcode Server with Xcode 9 will stop the Xcode Server service. (31820819)</p><p><em>Workaround:</em> Do not remove Server.app, or after removing start Xcode Server again from the Server &amp; Bots preference pane or using the <code>xcscontrol</code> command-line tool.</p></li><li class="li"><p>Attempting to edit an Xcode Server bot may incorrectly display the error <code>does not match this workspace</code> even when it does. (31957021)</p><p><em>Workaround:</em> Dismiss the dialog.</p></li><li class="li"><p>Screenshots may not always be captured during UI testing when Xcode Server is configured to perform integrations using a background user account. (34213968)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW1083" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p>Xcode Server no longer includes hosting Git repositories. To continue using repositories that were set up in macOS Server, configure a new remote Git server and push your code to that remote. After upgrading to Xcode 9, any existing repositories are archived in <code>/Library/Developer/XcodeServer/HostedRepositories</code>. (31243129)</p></li></ul></section></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW2" title="Xcode 8"></a><h2 class="jump">Xcode 8</h2><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW4" title="Xcode 8 Compatibility"></a><h3 class="jump">Xcode 8 Compatibility</h3><ul class="ul"><li class="li"><p>Xcode 8.3.3 requires a Mac running macOS 10.12 or later. </p></li><li class="li"><p>Xcode 8.3.3 includes SDKs for iOS 10.3.1, watchOS 3.2, macOS 10.12.4, and tvOS 10.2. To develop apps targeting prior OS versions, see <span class="content_text"><a href="../../../IDEs/whatsnewxcode4/00-Introduction/Introduction.html#//apple_ref/doc/uid/TP40004635-SW2" data-renderer-version="1" target="_self">About SDKs and Simulator</a></span> in What's New in Xcode, or when running Xcode, select Help &gt; What's New in Xcode.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW870" title="Xcode 8.3.3"></a><h3 class="jump">Xcode 8.3.3</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW871" title="Asset Catalog"></a><h4 class="jump">Asset Catalog</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW872" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Added a 3GB memory class for graphics configurations to Asset Catalog. (30814729)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW873" title="Xcode Server"></a><h4 class="jump">Xcode Server</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW874" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed issues with Xcode Server that caused excessive CPU usage. (31874759)</p></li><li class="li"><p>Fixed issue with Xcode Server so that a bot can switch back to a previously used branch. (31721307)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW853" title="Xcode 8.3.2"></a><h3 class="jump">Xcode 8.3.2</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW868" title="Apple LLVM Compiler"></a><h4 class="jump">Apple LLVM Compiler</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW869" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed an issue where valid C++ code involving a nested <code>struct</code>, <code>enum</code>, or <code>lambda</code> would fail to compile in C++1z mode. (31385254)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW854" title="Build System"></a><h4 class="jump">Build System</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW855" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Xcode no longer produces an Update Signing report for targets that use manual signing. (31276851)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW856" title="Debugging"></a><h4 class="jump">Debugging</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW857" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed an issue preventing output without newlines from being printed in the Xcode Debug Console until there is more output. This issue prevented interactive programs from working with the Xcode Debug console, causing prompts to appear only after a user entered text with a newline. (31465525)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW858" title="Interface Builder"></a><h4 class="jump">Interface Builder</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW859" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Interface Builder documents for iOS that contain a color based on an image pattern no longer result in a compiler error. Image pattern colors are not supported, and are now always converted to black when compiled. (31342191)</p></li><li class="li"><p>Fixed an issue that caused text to be hidden in Interface Builder documents that use a System size font. (31503323)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW860" title="Playgrounds"></a><h4 class="jump">Playgrounds</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW861" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed an issue preventing user interaction events being sent from inside the live view of an iOS playground that is running on a device with a non-Retina display, or on a device with a connected non-Retina display. (31445684)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW862" title="Signing"></a><h4 class="jump">Signing</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW863" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Resolves an issue where variables in entitlements files were always expanded using the Debug build configuration instead of the active build configuration. (31456053)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW864" title="Swift Compiler"></a><h4 class="jump">Swift Compiler</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW865" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Xcode now schedules Swift whole-module optimization jobs in parallel, enabling better utilization of multiple cores for building projects. (31478013)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW866" title="Swift Migrator"></a><h4 class="jump">Swift Migrator</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW867" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed an issue where the Swift 3 Migrator would not apply compiler fix-it items. (30984612)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW848" title="Xcode 8.3.1"></a><h3 class="jump">Xcode 8.3.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW852" title="Deprecation and Removal Notices"></a><h4 class="jump">Deprecation and Removal Notices</h4><ul class="ul"><li class="li"><p>Due to the resolved app archives issue listed below, we will soon be deprecating Xcode 8.3, at which time app archives built with Xcode 8.3 will no longer be accepted by the App Store.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW849" title="Build System"></a><h4 class="jump">Build System</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW850" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed an issue that could produce app archives that were larger than necessary. Support for app archives built in Xcode 8.3 will be deprecated. (31302382)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW160" title="Xcode 8.3"></a><h3 class="jump">Xcode 8.3</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW162" title="Deprecation and Removal Notices"></a><h4 class="jump">Deprecation and Removal Notices</h4><ul class="ul"><li class="li"><p>Xcode 8.3 no longer supports Swift 2.3. Please migrate your projects containing Swift 2.3 code to Swift 3 syntax by opening the project and choosing Edit &gt; Convert &gt; To Current Swift Syntax.</p></li><li class="li"><p>OS X 10.11 was the last major release of macOS that supported the previously deprecated garbage collection runtime. Applications or features that depend upon garbage collection may not function properly or will not launch in macOS Sierra. Developers should use Automatic Reference Counting (ARC) or manual retain/release for memory management instead. (20589595)</p></li><li class="li"><p>The Automation instrument has been removed from Instruments. Use Xcode’s UI Testing in its place. (26761665)</p></li><li class="li"><p>The "Always Search User Paths" build setting is deprecated and may not be supported by a future version of Xcode. Projects which are relying on this feature should migrate to separate user vs. system header include semantics and set this build setting to "No". (16364329)</p></li><li class="li"><p>3rd party docset support is now deprecated and will no longer be supported in a future release of Xcode. (30584489)</p></li><li class="li"><p>The <code>-exportFormat</code> parameter of the <code>-exportArchive</code> option for <code>xcodebuild</code> has been removed. To set the export format, use the <code>-exportOptionsPlist</code> parameter to specify an export plist file with the <code>method</code> key set to the desired format. For more information on the keys and values for the export plist, run <code>xcodebuild -help</code> on the command line.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW163" title="General"></a><h4 class="jump">General</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW164" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Intents Extensions are available on watchOS. (28372004)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW165" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed a problem which would cause Xcode to crash when removing certain file or framework references from certain projects. (29118448)</p></li><li class="li"><p>Fixed an issue which caused the “update to recommended settings” warning to remain after updating to the recommended settings. (28447448)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW166" title="Apple LLVM Compiler"></a><h4 class="jump">Apple LLVM Compiler</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW167" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The Apple LLVM compiler now supports nullability annotations on function and method parameters with an array type, and provides additional warnings for incomplete and suspicious nullability annotations. (25846421)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW168" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The compiler properly completes type information for forward-declared classes from C++ precompiled headers. (30173654)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW842" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When building a framework that has module maps in both the source and the install directories that define the same module, the compiler will show a redefinition message. (28638816)</p><p><em>Workaround</em>: Rename the module map file in the source directory to a non-default name (the default name is <code>module.modulemap</code> or <code>module.map</code>), and set the Module Map File build setting to the renamed module map.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW169" title="Build System"></a><h4 class="jump">Build System</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW170" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Scheme pre-action and post-action scripts now set the environment variable <code>TARGET_DEVICE_IDENTIFIER</code> to the UDID of the selected run destination device. (28078704)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW171" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Using <code>xcodebuild -exportLocalizations</code> or <code>xcodebuild -importLocalization</code> to export or import localizations from a project, no longer hangs after the operation is complete. (25857436)</p></li><li class="li"><p>When copying files the build system now preserves the extended attributes (<code>xattrs</code>) used by <code>codesign</code> for signing standalone files. (29453501)</p></li><li class="li"><p>The Mac will no longer sleep when a build is in progress. (29256278)</p></li><li class="li"><p>Xcode no longer crashes when the build system copies a file with an invalid code signature. (29656173)</p></li><li class="li"><p>Changes to <code>xcconfig</code> files no longer require restarting Xcode to take effect. (29805284)</p></li><li class="li"><p>Build issues from targets that are implicit dependencies of the active scheme are now shown in the issue navigator. (28719580)</p></li><li class="li"><p><code>xcodebuild</code> no longer hangs when invoked with a project or workspace containing no schemes. (20450296)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW851" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>After opening a project, an Update Signing report may be visible in the Reports Navigator for targets that use manual signing. No signing certificates, app IDs, or provisioning profiles are modified when this occurs. (31209546)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW173" title="Core Data"></a><h4 class="jump">Core Data</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW174" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>In the data model editor, changes to an entity’s Code Generation, Compound Indexes, and Uniqueness Constraints are now undoable and autosaved. (21205277)</p></li><li class="li"><p>When manually generating code for Core Data entities, generated Objective-C code properly uses <code>«ClassName»+CoreDataClass.h</code> rather than just <code>ClassName.h</code> in <code>#import</code> directives. (30343106)</p></li><li class="li"><p>Passing <code>-showBuildSettings</code> to <code>xcodebuild</code> for a project containing a Core Data model should no longer result in <code>xcodebuild</code> hanging. (26749142)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW175" title="Debugging"></a><h4 class="jump">Debugging</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW176" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The view debugger now shows creation backtraces for many objects in the Object inspector. To show the backtraces, enable Malloc with the option “All Allocation and Free History” logging in the Diagnostics tab of the Manage Schemes dialog. (28715704)</p></li><li class="li"><p>Autocompletion is supported in Breakpoint navigator text fields. Completions for a file breakpoint are generated using information in the referenced file. Other breakpoint completions use general indexing information and may be slower. (28268983)</p></li><li class="li"><p>The Scheme editor now contains a text field to add an Intents Extension query instead of issuing an utterance vocally. (26456789)</p></li><li class="li"><p>Added the ability to visually debug the view hierarchy of an iOS iMessage extension running on iOS 10.3 or later. (28838632)
</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW177" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>LLDB no longer hangs or prints incorrect values when evaluating Swift enumerations defined as an <code>indirect enum</code>. (29953436)</p></li><li class="li"><p>Running a watchOS Intents extension will automatically trigger Siri for a voice command. (29714417)</p></li><li class="li"><p>Activity and trace messages normally visible in LLDB thread summaries and thread detailed information are available when debugging processes running on beta versions of macOS, iOS, tvOS, or watchOS. (26370425)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW195" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When debugging a watchOS Intent extension using Watch Simulator, the session can end after about 30 seconds with the error message “Program ended with exit code: 0”. (30923914)</p><p><em>Workaround</em>: In the iPhone simulator, open Settings &gt; Siri &gt; App Support and disable Siri for app.</p></li><li class="li"><p>The first time you run a Complication from Xcode in Simulator it may continually exit when you configure that Complication. (29858029)</p><p><em>Workaround</em>: Re-run the scheme from Xcode.</p></li><li class="li"><p>Debugged processes may hang on launch if the console option for the scheme is set to “Use Terminal”. (29760580)</p><p><em>Workaround</em>: Select “Use Xcode” for the console option of the scheme.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW845" title="FileMerge"></a><h4 class="jump">FileMerge</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW846" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The FileMerge application now uses the same text infrastructure as Xcode. File navigation and syntax coloring are more consistent with Xcode. (8838481)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW179" title="Instruments"></a><h4 class="jump">Instruments</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW180" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Updated the Instruments user interface. (28503173)</p><p><em>Inspector Refresh</em></p><p>Instruments previously contained three inspector panes: Record Settings, Display Settings, and Extended Detail. There are now two inspector panes: Extended Detail and Run Info. Extended Detail remains unchanged and continues to provide additional information about selected data in the detail pane. The new Run Info inspector pane displays information about the currently selected run, including the recording device information and recording settings when the run was taken.</p><p>Record Settings are now located in a Recording Options window. To display this window, choose File &gt; Recording Options, press Option-Command-R, or click-and-hold the Record button in the toolbar and choose Recording Options from the menu that appears. The Recording Options window includes global and instrument-specific recording options.</p><p>The Display Settings inspector pane was previously used to change the graphing style of the timeline pane and to perform filtering in the detail pane. These features have been moved to new locations. If an instrument supports multiple graphing options, a down arrow now appears beside the instrument's icon when the pointer is positioned above the instrument in the timeline pane. Click the instrument's icon to open a popover containing editable graphing options. The down arrow appears only for instruments that have graphing options. Detail pane filtering options, including the text filter field previously located in the navigation bar of the detail pane, are now found at the bottom of the detail pane.</p><p><em>Visual Run Comparison</em></p><p>The ability to view graphs for multiple runs at the same time in the timeline pane has been removed. To switch between runs, choose Previous Run or Next Run from the Instruments menu, or click a navigation arrow in the activity viewer in the toolbar.</p><p>For more information, see Instruments Help. Open help by choosing Help &gt; Instruments Help.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW181" title="Interface Builder"></a><h4 class="jump">Interface Builder</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW847" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Interface Builder supports setting <code>adjustsFontForContentSizeCategory</code> to automatically adjust the size of text as the Dynamic Type setting changes. (25543597)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW183" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p><code>NSTextField</code> objects created in Interface Builder now have <code>allowsCharacterPickerTouchBarItem</code> turned off by default. (29223278)</p></li><li class="li"><p>Auto layout issue buttons in the Interface Builder document outline are no longer clipped under the right margin. (14485840)</p></li><li class="li"><p>Swift <code>@IBOutlet</code> declarations that have a nullability type annotation are now detected. (29983196)</p></li><li class="li"><p>Setting an <code>NSMenuItem</code>'s identifier in Interface Builder is supported on macOS 10.12 and higher. (23945473)</p></li><li class="li"><p>An <code>NSDatePicker</code> now uses <code>NSDate</code> instead of <code>NSCalendarDate</code> when added from the object library. (29639832)</p></li><li class="li"><p>Adding a <code>UILabel</code> to a tvOS Interface Builder document now uses the correct default font, <code>UIFontTextStyleHeadline</code>. (24172228)</p></li><li class="li"><p>Typing in the Model Key Path field for a Cocoa binding no longer hangs Xcode. (26487347)</p></li><li class="li"><p>The top of the library content no longer gets shifted under the header bar, which previously resulted in clipping. (27601428)</p></li><li class="li"><p>Connecting <code>@IBAction</code> methods from Interface Builder to Swift code now works when the sender parameter type is <code>Any</code>. (29639217)</p></li><li class="li"><p>Using <code>NSColorPickerTouchBarItem</code> in Interface Builder no longer creates a Touch Bar item that is disabled at runtime. (28670596)</p></li><li class="li"><p>Fixed a bug that prevented setting inspector checkboxes that correspond to bitmask properties, such as <code>NSWindow.styleMask</code>, <code>UIAccessibility.accessibilityTraits</code>, and <code>UIPopoverPresentationController.permittedArrowDirections</code>. (26613034)</p></li><li class="li"><p>Update frames for views with constraints now works with ambiguous views that have an unambiguous horizontal or vertical axis. (16019988)</p></li><li class="li"><p>Option for “Follow Readable Width” has been restored to the view controller Size inspector. (28246180)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW184" title="Linking"></a><h4 class="jump">Linking</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW185" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Incremental Link-Time Optimization works properly with bitcode-enabled apps. (30109087)</p></li><li class="li"><p>Improved overall incremental Link-Time Optimization performance, including fixing an issue that was creating duplicate cache files. (29526668)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW186" title="Organizer"></a><h4 class="jump">Organizer</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW187" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The Xcode Organizer now supports exporting tvOS apps for Enterprise distribution. (30000839)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW188" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Speed improvements have been made to the Organizer window. Opening the Organizer with many Archives and many iTunes Connect Products should open quickly. (28722427)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW189" title="Playgrounds"></a><h4 class="jump">Playgrounds</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW190" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Under some configurations, iOS and tvOS Playgrounds may hang with no indication of completion. (30085996)</p><p><em>Workaround</em>: If this occurs, rerun the Playground.</p></li><li class="li"><p>Xcode may crash while you are interacting with a playground's Project Navigator. (29741774)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW191" title="Projects"></a><h4 class="jump">Projects</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW192" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed an issue which caused Xcode to warn about Swift 2.3 deprecation even when the "Use Legacy Swift Language Version" setting is set to <code><!--a  -->NO<!--/a--></code>. (29655628)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW193" title="Provisioning"></a><h4 class="jump">Provisioning</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW194" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Changed the user interface for managing signing certificates and provisioning profiles. Certificates are managed from the Accounts preferences pane by selecting a team and clicking Manage Certificates. Automatically managing signing is recommended, however if your app requires manually signing provisioning profiles are managed in the General tab of the project editor. Use the Provisioning Profile dropdown to import or download profiles. In addition it displays profiles that match the current signing configuration of the target. For more information, see Xcode Help. (28641027)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW196" title="Simulator"></a><h4 class="jump">Simulator</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW197" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The <code>simctl get_app_container</code> command can now return the path of an app's data container or App Group containers. (30224453)</p></li><li class="li"><p>The <code>simctl</code> tool of the <code>xcrun</code> command line tool has two new commands that provide additional information for filing bug reports.</p><ul class="nested"><li class="nested li"><p><code>simctl logverbose</code> enables verbose logging on the specified device.</p></li><li class="nested li"><p><code>simctl diagnose</code> collects all relevant Simulator logs on the host and on the device, and then packages them into an archive that can be attached to bug reports.</p></li></ul><p>For more information, see the help for each command by running <code>xcrun simctl &lt;tool name&gt; help</code> on the command line. (21001891)</p></li><li class="li"><p>You can invoke Siri using Hardware &gt; Siri after enabling Siri in the Settings app on Simulator. (25176537)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW198" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Resolved an issue where Siri on a simulated watchOS device did not respond the first time Siri was enabled on a simulated iOS device. (29708878)</p></li><li class="li"><p>Launching an application or executing tests should no longer generate "Application &lt;bundle&gt; is installing or uninstalling, and cannot be launched" errors in Simulator. (30172453)</p></li><li class="li"><p>Videos recorded by the <code>simctl</code> tool of the <code>xcrun</code> command line tool now support scrubbing and import into video editors correctly. (29654098)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW199" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Recording a video with the <code>simctl</code> command line tool requires Metal-capable hardware. (29688949)</p></li><li class="li"><p><code>AVAssetExportSession</code> may not return any presets on the iPad Pro (12.9 inch) Simulator. (30698677)</p><p><em>Workaround</em>: Use a different Simulator.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW200" title="Source Editor"></a><h4 class="jump">Source Editor</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW201" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode Source Editor Extensions will now assert if you try to create a command with an identifier containing invalid characters (characters outside the range <code>0-9</code>, <code>A-Z</code>, <code>a-z</code>, <code>-</code>, or <code>.</code>). (26615933)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW202" title="Static Analyzer"></a><h4 class="jump">Static Analyzer</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW203" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added a check for synthesized copy properties of mutable types, such as <code>NSMutableArray</code>. Calling the setter for these properties will store an immutable copy of the value. (21022397)</p></li><li class="li"><p>Added a check for calls to <code>dispatch_once()</code> that use an Objective-C instance variable as the predicate. Using an instance variable as a predicate may result in the passed-in block being executed multiple times or not at all. These calls should be rewritten to use either a lock, or to store the predicate in a global or static variable. (23390767)</p></li><li class="li"><p>Added a check for unintended comparisons between scalar values and <code>NSNumber</code>, <code>CFNumberRef</code>, and other number objects. (10228523)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW204" title="Swift Compiler"></a><h4 class="jump">Swift Compiler</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW205" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Swift now warns when an <code>NSObject</code> subclass attempts to override the <code>initialize</code> class method, because Swift can't guarantee that the Objective-C method will be called. (28954946)</p></li><li class="li"><p>C functions that "return twice" are no longer imported into Swift and attempting to reference such a function will result in a compilation error.</p><p>Examples of functions that "return twice" include <code>vfork</code> and <code>setjmp</code>. These functions change the control flow of a program in ways that that are not supported in Swift. For example, definitive initialization of variables, a core Swift language feature, can not be guaranteed when these functions are used. Although this could be considered a source-breaking change, it's important to note that any use of these functions will most likely crash at runtime. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-2394" class="urlLink" rel="external">SR-2394</a></span>)</p></li><li class="li"><p>Indirect fields from C structures and unions are now always imported. Previously they weren't imported when they belonged to a union. This is done by naming anonymous fields, for example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>typedef struct foo_t {<span></span></pre></td></tr><tr><td scope="row"><pre>   union {<span></span></pre></td></tr><tr><td scope="row"><pre>      int a;<span></span></pre></td></tr><tr><td scope="row"><pre>      double b;<span></span></pre></td></tr><tr><td scope="row"><pre>   };<span></span></pre></td></tr><tr><td scope="row"><pre>} foo_t;<span></span></pre></td></tr></table></div><p>Is imported as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>struct foo_t {<span></span></pre></td></tr><tr><td scope="row"><pre>   struct __Unnamed_union___Anonymous_field0 {<span></span></pre></td></tr><tr><td scope="row"><pre>      var a : Int { get set }<span></span></pre></td></tr><tr><td scope="row"><pre>      var b : Double { get set }<span></span></pre></td></tr><tr><td scope="row"><pre>   }<span></span></pre></td></tr><tr><td scope="row"><pre>   var __Anonymous_field0 : foo_t.__Unnamed_union___Anonymous_field0<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>   // a and b are computed properties accessing the content of __Anonymous_field0<span></span></pre></td></tr><tr><td scope="row"><pre>   var a : Int { get set }<span></span></pre></td></tr><tr><td scope="row"><pre>   var b : Double { get set }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Since new symbols are exposed from imported structure/unions, this may conflict with existing code that extended C types in order to provide their own accessors to the indirect fields. (30221279, <span class="content_text"><a href="https://github.com/apple/swift/pull/6531" class="urlLink" rel="external">PR-6531</a></span>, <span class="content_text"><a href="https://github.com/apple/swift/pull/6816" class="urlLink" rel="external">PR-6816</a></span>)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW206" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Swift REPL and interpreted scripts correctly determine the version of the OS that they are running on. (29433205)</p></li><li class="li"><p><code>#keyPath</code> respects the original name of properties imported from Objective-C. (28543037)</p></li><li class="li"><p>The generated header for a mixed-source Swift target will now correctly reference Dispatch framework types using the usual typedefs (<code>dispatch_queue_t</code>) rather than their implementation details. (29790636)</p></li><li class="li"><p>Properties that satisfy requirements in Objective-C protocols work properly when they are declared with a <code>willSet</code> or <code>didSet</code> observing accessor. (30101703)</p></li><li class="li"><p>The LLVM and Swift compilers now emit correct diagnostics when using a custom module map that contains system headers. Examples include a module map with paths into the macOS SDK while building for iOS, or headers from <code>/usr/include</code>. (26866326)</p></li><li class="li"><p>The Swift compiler now raises an error when a let property or a variable of a protocol type is modified after initialization. Code that successfully compiled in previous releases may fail after upgrading. For example, the following code that compiled in previous versions now raises an error:</p><div class="codesample clear"><table><tr><td scope="row"><pre>protocol P {<span></span></pre></td></tr><tr><td scope="row"><pre>   mutating func f()<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>extension Int: P {<span></span></pre></td></tr><tr><td scope="row"><pre>   mutating func f() { self += 1 }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>func foo(x: Int) {<span></span></pre></td></tr><tr><td scope="row"><pre>   let y: P<span></span></pre></td></tr><tr><td scope="row"><pre>   y = x<span></span></pre></td></tr><tr><td scope="row"><pre>   y.f()<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(29716016)</p></li><li class="li"><p>Swift 3.1 includes a new warning of the form "implicit import of bridging header … via module … is deprecated and will be removed in a later version of Swift". This warning is no longer reported too frequently in contexts where it may not be easy to correct. (30202509)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW843" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Extending the <code>Sequence</code> or <code>Collection</code> protocols to add a <code>typealias</code> named <code>Element</code> can result in the Swift compiler crashing. More generally, this issue can occur when name collisions are encountered among type aliases within nested associated types. (30702721)</p><p><em>Workaround</em>: Use a different name for the <code>typealias</code>, or write the type out explicitly, such as <code>Iterator.Element</code>.</p></li><li class="li"><p>AppKit's NSView.animator() method claims to return the Self type but really returns a proxy object. When called on a Swift subclass, this may lead to runtime crashes when trying to reference animatable properties of the view that were overridden in Swift:</p><div class="codesample clear"><table><tr><td scope="row"><pre>public class MyView: NSView {<span></span></pre></td></tr><tr><td scope="row"><pre>   public override var frame: NSRect {<span></span></pre></td></tr><tr><td scope="row"><pre>      didSet {<span></span></pre></td></tr><tr><td scope="row"><pre>         Swift.print(self.frame)<span></span></pre></td></tr><tr><td scope="row"><pre>      }<span></span></pre></td></tr><tr><td scope="row"><pre>   }<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>let view = MyView()<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// The following line crashes<span></span></pre></td></tr><tr><td scope="row"><pre>view.animator().frame = NSMakeRect(0.0, 0.0, 120.0, 120.0)<span></span></pre></td></tr></table></div><p>(27655718)</p><p><em>Workaround</em>: Cast the result of view.animator() to AnyObject, then do method dispatch on the AnyObject value to ensure that the animator proxy is invoked with Objective-C messaging instead of Swift messaging.  For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>(view.animator() as AnyObject).setFrame(NSMakeRect(0.0, 0.0, 120.0, 120.0))<span></span></pre></td></tr></table></div></li><li class="li"><p>The Swift compiler may crash when an Objective-C category extends a system class, and that category adopts a protocol requiring a method matching the getter or setter of a property that is declared using <code>@property</code>.</p><p>For example, the <code>MyLengthModifying</code> protocol includes a method that matches the setter for the <code>length</code> property, and the protocol is part of the <code>MyAdditions</code> category extension to the <code>NSMutableData</code> system class:</p><div class="codesample clear"><table><tr><td scope="row"><pre>@protocol MyLengthModifying<span></span></pre></td></tr><tr><td scope="row"><pre>   - (void)setLength:(NSUInteger)length;<span></span></pre></td></tr><tr><td scope="row"><pre>@end<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>@interface NSMutableData (MyAdditions) &lt;MyLengthModifying&gt;<span></span></pre></td></tr><tr><td scope="row"><pre>@end<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://bugs.swift.org/browse/SR-4022" class="urlLink" rel="external">SR-4022</a></span>)</p><p><em>Workaround</em>: Use a <code>@property</code> in your protocol instead of a method, even if the only important requirement is the setter.</p></li><li class="li"><p><code>withoutActuallyEscaping</code> will fail to compile when given an <code>@autoclosure</code> argument. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-4188" class="urlLink" rel="external">SR-4188</a></span>)</p><p><em>Workaround</em>: Pass the autoclosure down to another function as a regular closure argument. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func allValues(in array: [Int], smallerThan: @autoclosure () -&gt; Int) -&gt; Bool {<span></span></pre></td></tr><tr><td scope="row"><pre>   func allValuesImpl(in array: [Int], smallerThan: () -&gt; Int) -&gt; Bool {<span></span></pre></td></tr><tr><td scope="row"><pre>      return withoutActuallyEscaping(smallerThan) {<span></span></pre></td></tr><tr><td scope="row"><pre>         escapableF in array.lazy.filter {$0 &gt;= escapableF() }.isEmpty<span></span></pre></td></tr><tr><td scope="row"><pre>      }<span></span></pre></td></tr><tr><td scope="row"><pre>   }<span></span></pre></td></tr><tr><td scope="row"><pre>   return allValuesImpl(in: array, smallerThan: smallerThan)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW207" title="Swift Language"></a><h4 class="jump">Swift Language</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW208" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>A new family of failable conversion initializers to all numeric types either completes successfully without loss of information, or returns <code>nil</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0080-failable-numeric-initializers.md" class="urlLink" rel="external">SE-0080</a></span>)</p></li><li class="li"><p>Extended the <code>@available</code> attribute to include varying API availability by Swift language version. An annotated API is compiled as usual and added to the library, but is made available only to a client built with a matching compiler version or a matching <code>-swift-version</code> when built for version compatibility. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0141-available-by-swift-version.md" class="urlLink" rel="external">SE-0141</a></span>, <span class="content_text"><a href="https://bugs.swift.org/browse/SR-2709" class="urlLink" rel="external">SR-2709</a></span>)</p></li><li class="li"><p>The <code>Sequence</code> protocol adds two new members, <code>prefix(while:)</code> and <code>drop(while:)</code>. <code>prefix(while:)</code> requests the longest subsequence satisfying a predicate. <code>drop(while:)</code> requests the remaining subsequence after dropping the longest subsequence satisfying a predicate. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0045-scan-takewhile-dropwhile.md" class="urlLink" rel="external">SE-0045</a></span>)</p></li><li class="li"><p>Constrained extensions allow same-type constraints between generic parameters and concrete types. For example, the following code defines an extension on <code>Array</code> with <code>Int</code> elements:</p><div class="codesample clear"><table><tr><td scope="row"><pre>extension Array where Element == Int { }<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://bugs.swift.org/browse/SR-1009" class="urlLink" rel="external">SR-1009</a></span>)</p></li><li class="li"><p>Nested types may now appear inside generic types, and nested types may have their own generic parameters:</p><div class="codesample clear"><table><tr><td scope="row"><pre>struct OuterNonGeneric {<span></span></pre></td></tr><tr><td scope="row"><pre>   struct InnerGeneric&lt;T&gt; {}<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>struct OuterGeneric&lt;T&gt; {<span></span></pre></td></tr><tr><td scope="row"><pre>   struct InnerNonGeneric {}<span></span></pre></td></tr><tr><td scope="row"><pre>   struct InnerGeneric&lt;T&gt; {}<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>extension OuterNonGeneric.InnerGeneric {}<span></span></pre></td></tr><tr><td scope="row"><pre>extension OuterGeneric.InnerNonGeneric {}<span></span></pre></td></tr><tr><td scope="row"><pre>extension OuterGeneric.InnerGeneric {}<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://bugs.swift.org/browse/SR-1446" class="urlLink" rel="external">SR-1446</a></span>)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW178" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The Swift compiler no longer incorrectly reports a version of Swift 3.0. (30081411)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW182" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>String interpolations that do not use fully qualified names when referencing members of type extensions can fail in this release. This includes cases that worked in Swift 3. (30885036)</p><p><em>Workaround</em>: Use a fully qualified name. For example, the following code worked in Swift 3, but results an error of “error: expression type 'String' is ambiguous without more context” in the current version:</p><div class="codesample clear"><table><tr><td scope="row"><pre>extension Bool {<span></span></pre></td></tr><tr><td scope="row"><pre>   static let yes = true<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>print("\(.yes)")<span></span></pre></td></tr></table></div><p>To fix the error use the fully qualified name in the <code>print</code> statement:</p><div class="codesample clear"><table><tr><td scope="row"><pre>print("\(Bool.yes)")<span></span></pre></td></tr></table></div></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW209" title="Swift Package Manager"></a><h4 class="jump">Swift Package Manager</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW210" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The package manager no longer uses the auto-linking feature of module maps for C language targets. Packages which use custom module maps for their C language targets should remove the link statement from the module map. The package manager will automatically add the link flag if required.</p><p>For example, the following custom module map:</p><div class="codesample clear"><table><tr><td scope="row"><pre>module MyCLib {<span></span></pre></td></tr><tr><td scope="row"><pre>   header "foo.h"<span></span></pre></td></tr><tr><td scope="row"><pre>   link "MyCLib"<span></span></pre></td></tr><tr><td scope="row"><pre>   export *<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Should be changed to:</p><div class="codesample clear"><table><tr><td scope="row"><pre>module MyCLib {<span></span></pre></td></tr><tr><td scope="row"><pre>   header "foo.h"<span></span></pre></td></tr><tr><td scope="row"><pre>   export *<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(30016942)</p></li><li class="li"><p>The Swift Package Manager now supports an edit mode for a package's dependencies. Putting a dependency in edit mode moves it from the managed dependency location to a local Packages directory and omits it from swift package update and related commands. This allows the user to manually manage checkout of the dependency, for example by committing fixes that are required only locally. By default, dependencies are no longer stored in the Packages directory unless they are in edit mode. A package can be put in edit mode with the <code>swift package edit</code> command, and can leave edit mode with the <code>swift package unedit</code> command. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0082-swiftpm-package-edit.md" class="urlLink" rel="external">SE-0082</a></span>)</p></li><li class="li"><p>The Swift Package Manager now supports pinning a dependency to a specific version so that in a clean build, it resolves only to the pinned version. The swift build command will automatically record the version that is used for every dependency in a <code>Package.pins</code> file, unless autopinning is disabled with <code>swift package pin --disable-autopin</code>. Commit the <code>Package.pins</code> file to source control when you expect your package to use specific dependency versions without requiring those versions in your <code>Package.swift</code> manifest. The <code>Package.pins</code> file is used during initial dependency resolution to determine which dependency versions to use; <code>swift package update</code> will update all dependency versions and repin those dependencies to the new versions. If autopinning is off, pass the <code>--repin</code> flag to swift package update to override any manually-pinned versions. Pinning can be further controlled with the <code>swift package pin</code> and <code>swift package unpin</code> commands. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0145-package-manager-version-pinning.md" class="urlLink" rel="external">SE-0145</a></span>)</p></li><li class="li"><p>Replaced the <code>swift package clean=dist</code> command with <code>swift package reset</code> which resets a package back to a clean state, with no dependencies checked out or build artifacts present. (28384606)</p></li><li class="li"><p>The <code>swift package test</code> command has a new <code>--parallel</code> option which executes tests in parallel. This mode of testing may cause problems for tests which are not written to be able to safely run in parallel. (28402178)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW211" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>When a dependency of a package is in edit mode, operations which trigger dependency resolution, such as <code>swift package update</code>, will fail. (29944464)</p></li><li class="li"><p>Rebuilding a package in Swift Package Manager now avoids performing unnecessary work. (28037508)</p></li><li class="li"><p><code>swift package update</code> incrementally updates dependencies instead of re-cloning them from the beginning. In addition, complex dependencies are resolved correctly. (26371453)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW212" title="Swift Source Code Compatibility"></a><h4 class="jump">Swift Source Code Compatibility</h4></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW844" title="Known Issues"></a><h4 class="jump">Known Issues</h4><ul class="ul"><li class="li"><p>Earlier versions of the Swift compiler would sometimes accept single-element labeled tuples as values, even though these types weren't supported by the language. The Swift 3.1 compiler now more reliably rejects these types. Code that used unsupported single-element tuples can remove the tuple label. For example, this code will now be rejected:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func foo(x: ((y: Int)) -&gt;; Int)<span></span></pre></td></tr></table></div><p>To fix, remove the tuple label such as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func foo(x: (Int) -&gt;; Int)<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://bugs.swift.org/browse/SR-3788" class="urlLink" rel="external">SR-3788</a></span>)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW213" title="Testing"></a><h4 class="jump">Testing</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW214" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added the <code>XCUISiriService</code> class to <code>XCTest</code> used for writing tests which activate Siri with a voice recognition string, and for queries for elements in the Siri UI. Use the class to write UI tests for Intents and Intents UI extensions. (29958123)</p></li><li class="li"><p>Added <code>XCUIKeyModifierCapsLock</code> as a preferred alternative for <code>XCUIKeyModifierAlphaShift</code>. This is consistent with the addition of <code>NSEventModifierFlagCapsLock</code> in macOS 10.12, as a preferred alternative for <code>NSAlphaShiftKeyMask</code>. (27375799)</p></li><li class="li"><p><code>XCTest</code> adds new APIs to simplify writing asynchronous tests. </p><ul class="nested"><li class="nested li"><p>A new class, <code>XCTWaiter</code>, is used to wait for an <code>XCTestExpectation</code> object independent of any <code>XCTestCase</code> instance, making it possible to wait inside helper functions and to test support libraries.</p></li><li class="nested li"><p>New subclasses of <code>XCTestExpectation</code> are used for tests that wait for <code>NSNotifications</code>, Key Value Observation, <code>NSPredicate</code> evaluations, and Darwin notifications.</p></li><li class="nested li"><p><code>XCTestExpectation</code> has a new writable description property to simplify failure diagnosis in asynchronous tests.</p></li><li class="nested li"><p><code>XCTestExpectation</code> adds two new behaviors. Set <code>.inverted</code> to <code>true</code> to fail if the expectation is fulfilled. Set <code>.expectedFulfillmentCount</code> to specify the required number of calls to <code>fulfill()</code>.</p></li></ul><p>See documentation in <code>XCTWaiter.h</code>, <code>XCTestExpectation.h</code>, <code>XCTNSPredicateExpectation.h</code>, <code>XCTNSNotificationExpectation.h</code>, <code>XCTKVOExpectation.h</code>, and <code>XCTDarwinNotificationExpectation.h</code> for more details. (22539853)</p></li><li class="li"><p>The Test navigator now includes test classes and methods located in static libraries that are linked into test bundles. Note that it may be necessary to activate the test navigator before test diamonds for these tests appear in the source editor. (28173131)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW215" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed a bug in the handling of <code>XCTestExpectations</code> that waited on predicates evaluated against <code>XCUIElements</code>. As a result, some tests which were previously succeeding despite ambiguous (incorrect) queries will start to fail. For instance, if your UI test now fails because of "Multiple matches found" and the element in question is the subject of a predicate expectation earlier in the test, your test is failing because of this fix and the element query will need to be updated to correct the ambiguity that is leading to multiple matches. (28139563)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW172" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Profile-Guided Optimization does not work when using the Test action. (30769613)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW157" title="Xcode 8.2.1"></a><h3 class="jump">Xcode 8.2.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW158" title="Swift"></a><h4 class="jump">Swift</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW159" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed an issue that could cause building a project to fail with the error message “"Use Legacy Swift Language Version" (SWIFT_VERSION) is required to be configured correctly for targets which use Swift” when using a supported version of Swift. (29667880)</p></li><li class="li"><p>Xcode no longer warns about using deprecated Swift 2.3 code when the active scheme does not reference targets using Swift 2.3 code. (29671741)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW161" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>"Convert to Current Swift Syntax" only converts targets referenced by the active scheme. (13997108)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW9" title="Xcode 8.2"></a><h3 class="jump">Xcode 8.2</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW5" title="General"></a><h4 class="jump">General</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW6" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode 8.2 offers more Touch Bar actions and allows customizing the Touch Bar controls of the following editors and debuggers: source editor, Playground editor, Interface Builder, view debugger, and memory graph debugger. To customize the Touch Bar, open the desired editor and then choose View &gt; Customize Touch Bar. (28462580)</p></li><li class="li"><p>Touch Bar API is available for macOS 10.12.2 or later. (28785230, 28785231)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW16" title="Asset Catalog"></a><h4 class="jump">Asset Catalog</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW19" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Builds of iOS, tvOS, and watchOS targets may hang during <code>CompileAssetCatalog</code>, <code>CompileStoryboard</code>, or <code>CompileXIB</code> when running on OS X El Capitan. (28422833)</p><p>Workaround: Rebuild the target.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW7" title="Building and Linking"></a><h4 class="jump">Building and Linking</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW8" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Using <code>.xcconfig</code> files will not cause projects to prompt about changes on disk when switching git branches. (28794807)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW28" title="Command Line Tools"></a><h4 class="jump">Command Line Tools</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW29" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Command Line Tools (OS X 10.11) for Xcode 8.2 are available and support Swift 3.0 development from the command line on OS X El Capitan. (28234439)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW13" title="Core Data"></a><h4 class="jump">Core Data</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW18" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Opening a data model with a minimum tools version earlier than Xcode 8.0 will not reset the code generation language to Objective-C. (29032095)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW17" title="Debugging"></a><h4 class="jump">Debugging</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW23" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The Memory Debugger for macOS and the iOS Simulator fixes reporting of false memory leaks for Swift classes containing either fields of type <code>enum</code>, or classes that inherit from certain Objective-C framework classes. (27932061)</p><p>False reporting can still occur for iOS, watchOS, and tvOS applications. See (29335813) in Known Issues, below.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW154" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>The Memory Debugger for iOS, watchOS, and tvOS applications can report false memory leaks when debugging Swift classes containing either fields of type <code>enum</code>, or classes that inherit from certain Objective-C framework classes. (29335813)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW14" title="Interface Builder"></a><h4 class="jump">Interface Builder</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW15" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>A <code>UITabBarController</code> correctly displays content instead of blue boxes. (27881406)</p></li><li class="li"><p>Fixed a crash on macOS 10.12 when a P3 color space other than the system default is installed. (26178719)</p></li><li class="li"><p>The <code>supportsPressAndHold</code> property works when using popover Touch Bar items from Interface Builder. (28701667)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW20" title="Simulator"></a><h4 class="jump">Simulator</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW21" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Dragging an app onto a Simulator window installs the app. (23387069)</p></li><li class="li"><p>You can take videos and screenshots of Simulator using the <code>xcrun</code> Xcode command-line utility. To take a screenshot, run the command <code>xcrun simctl io booted screenshot</code>. To take a video, run the command <code>xcrun simctl io booted recordVideo &lt;filename&gt;.&lt;file extension&gt;.</code> (9887264)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW22" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Dragging a Live Photo resource into the Simulator imports the Live Photo instead of importing a photo and a video. (27906875)</p></li><li class="li"><p>Simulator renders the screen correctly when using iOS 9.1 or earlier. (27996364)</p></li><li class="li"><p>Keychain APIs work correctly in Simulator. (28338972)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW155" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Simulator can crash when saving a screenshot when running on OS X El Capitan. (29182710)</p><p>The crash does not occur on macOS Sierra.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW10" title="Swift"></a><h4 class="jump">Swift</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW12" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Extensions which make imported Objective-C generic classes conform to protocols defined in Swift are compiled correctly. (28873860)</p></li><li class="li"><p>Objective-C generic types show as defined in generated headers with a suffix of <code>-Swift.h</code>. (28738008)</p></li><li class="li"><p>Type inference will properly unwrap optionals when used with generics and implicitly-unwrapped optionals. (28621624)</p></li><li class="li"><p>NSFileManager's <code>enumerate(at:includingPropertiesForKeys:options:errorHandler:)</code> method passes valid URLs to the error handler in code compiled with Swift 3.0.2.</p><p>There may still be some Objective-C methods in the SDKs that incorrectly annotate or assume a type to be nonnull rather than nullable. If the type is one that Swift treats as a struct, such as <code>NSURL (Foundation.URL)</code> or <code>NSDate (Foundation.Date)</code>, this can lead to a run-time crash in a method with a name like <code>bridgeFromObjectiveC</code>; in other cases, it can lead to crashes or undefined behavior in user code. If you identify such a method, please file a report at <span class="content_text"><a href="https://bugreport.apple.com" class="urlLink" rel="external">bugreport.apple.com</a></span>. For reference, the (now unnecessary) workaround for the newly-fixed NSFileManager API is shown below; it can be adapted for whichever API you want to call.</p><div class="codesample clear"><table><tr><td scope="row"><pre>static inline NSDirectoryEnumerator&lt;NSURL *&gt; * _Nullable<span></span></pre></td></tr><tr><td scope="row"><pre>fileManagerEnumeratorAtURL(NSFileManager *fileManager, NSURL * _Nonnull url,<span></span></pre></td></tr><tr><td scope="row"><pre>                           NSArray&lt;NSURLResourceKey&gt; * _Nullable keys,<span></span></pre></td></tr><tr><td scope="row"><pre>                           NSDirectoryEnumerationOptions options,<span></span></pre></td></tr><tr><td scope="row"><pre>                           BOOL (^ _Nullable errorHandler)<span></span></pre></td></tr><tr><td scope="row"><pre>                           (NSURL * _Nullable errorURL, NSError * _Nonnull error)) {<span></span></pre></td></tr><tr><td scope="row"><pre>                                return [fileManager enumeratorAtURL:url<span></span></pre></td></tr><tr><td scope="row"><pre>                                         includingPropertiesForKeys:keys<span></span></pre></td></tr><tr><td scope="row"><pre>                                                            options:options<span></span></pre></td></tr><tr><td scope="row"><pre>                           errorHandler:^(NSURL * _Nonnull errorURL, NSError * _Nonnull error) {<span></span></pre></td></tr><tr><td scope="row"><pre>                               return errorHandler(errorURL, error);<span></span></pre></td></tr><tr><td scope="row"><pre>                           }];<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>This function can be included in your bridging header (for an app or test target) or umbrella header (for a framework target). (27749845)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW156" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>The Swift compiler may crash if a nested computed get-only property is defined and accessed within a generic function, a method of a protocol extension, or a method of a generic type. (28933116)</p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>protocol Runcible {}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>extension Runcible {<span></span></pre></td></tr><tr><td scope="row"><pre>   func runce() -&gt; Int {<span></span></pre></td></tr><tr><td scope="row"><pre>      // Property definition crashes the compiler<span></span></pre></td></tr><tr><td scope="row"><pre>      var localProperty: Int {<span></span></pre></td></tr><tr><td scope="row"><pre>         print(self)<span></span></pre></td></tr><tr><td scope="row"><pre>         return 0<span></span></pre></td></tr><tr><td scope="row"><pre>      }<span></span></pre></td></tr><tr><td scope="row"><pre>      return localProperty<span></span></pre></td></tr><tr><td scope="row"><pre>   }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Workaround: Redefine the property as a nested function or provide a setter.</p></li><li class="li"><p>The Swift compiler may crash when an array of tuples is converted to add or remove element labels. (28425149)</p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>typealias Foo = (x: Int, y: Int)<span></span></pre></td></tr><tr><td scope="row"><pre>let foos = [(0, 0), (1, 1)] // has inferred type [(Int, Int)]<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>func getFoos() -&gt; [Foo] {<span></span></pre></td></tr><tr><td scope="row"><pre>   // Attempts implicit conversion from [(Int, Int)] to [(x: Int, y: Int)]<span></span></pre></td></tr><tr><td scope="row"><pre>   return foos<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Workaround: Avoid mixing array types of labeled tuples with arrays of unlabeled tuples.</p></li><li class="li"><p>The Swift compiler may crash if a method of a nested type refers to a nested function in the same scope. (28015090)</p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>do {<span></span></pre></td></tr><tr><td scope="row"><pre>   func foo() {}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>   class Bar {<span></span></pre></td></tr><tr><td scope="row"><pre>      init() {<span></span></pre></td></tr><tr><td scope="row"><pre>         //the following line crashes the compiler<span></span></pre></td></tr><tr><td scope="row"><pre>         foo()<span></span></pre></td></tr><tr><td scope="row"><pre>      }<span></span></pre></td></tr><tr><td scope="row"><pre>   }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Workaround: Move the function to the top level to avoid the crash.</p><p>For example, the following code shows the workaround for the example given above:</p><div class="codesample clear"><table><tr><td scope="row"><pre>// Move the function to the top level<span></span></pre></td></tr><tr><td scope="row"><pre>func foo() {}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>do {<span></span></pre></td></tr><tr><td scope="row"><pre>   class Bar {<span></span></pre></td></tr><tr><td scope="row"><pre>      init() {<span></span></pre></td></tr><tr><td scope="row"><pre>         foo()<span></span></pre></td></tr><tr><td scope="row"><pre>      }<span></span></pre></td></tr><tr><td scope="row"><pre>   }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="li"><p>When an <code>NSDictionary</code> is bridged into Swift as a <code>Dictionary</code> with <code>AnyHashable</code> keys, then using Swift integer values to index the dictionary may fail to find objects inside the dictionary. (29026017)</p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>NSDictionary *makeDict() {<span></span></pre></td></tr><tr><td scope="row"><pre>   return @{@(NSOrderedAscending): @"ascending"};<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><div class="codesample clear"><table><tr><td scope="row"><pre>let dict = makeDict()<span></span></pre></td></tr><tr><td scope="row"><pre>// Fails to find key in dictionary<span></span></pre></td></tr><tr><td scope="row"><pre>dict[NSComparisonResult.orderedAscending.rawValue]<span></span></pre></td></tr></table></div><p>Workaround: Explicitly construct an <code>NSNumber</code> instance for the dictionary lookup key.</p><p>For example, the following code shows the workaround for the example given above:</p><div class="codesample clear"><table><tr><td scope="row"><pre>dict[NSNumber(value: NSComparisonResult.orderedAscending.rawValue)]<span></span></pre></td></tr></table></div></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW11" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p>Xcode 8.2 is the last release that will support Swift 2.3. Please migrate your projects to Swift 2.3 code to Swift 3 syntax by opening the project and choosing Edit &gt; Convert &gt; To Current Swift Syntax.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW26" title="Testing"></a><h4 class="jump">Testing</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW27" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>The Touch Bar simulator window can interfere with mouse events during macOS UI tests.</p><p>Workaround: As a temporary workaround, set the <code>IDETestingDisableTouchBarSimulatorWindowBehavior</code> user default to a <code><!--a  -->YES<!--/a--></code> to prevent the window from appearing during testing. (28531281, 28802822)</p><ol class="ol"><li class="li"><p>Quit Xcode if it's running.</p></li><li class="li"><p>Open the Terminal and enter the following command:</p><p><code>defaults write com.apple.dt.xcode IDETestingDisableTouchBarSimulatorWindowBehavior -bool YES</code></p></li></ol></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW24" title="Xcode 8.1"></a><h3 class="jump">Xcode 8.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW25" title="General"></a><h4 class="jump">General</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW30" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode 8.1 supports Touch Bar for Macs that include it, and supports adding Touch Bar functionality to your app. (28859277)</p><p>Before using Touch Bar functionality in your app, confirm that the app is running on a macOS version that includes support for Touch Bar using a runtime check.</p><ul class="nested"><li class="nested li"><p>For example, the following Objective-C code performs a runtime check to make sure NSTouchBar is available:</p><div class="codesample clear"><table><tr><td scope="row"><pre>NSClassFromString(@"NSTouchBar") != nil<span></span></pre></td></tr></table></div></li><li class="nested li"><p>In Swift code, do an availability check for macOS 10.12.1, and a runtime check for Touch Bar class availability. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>NSClassFromString("NSTouchBar") != nil<span></span></pre></td></tr></table></div></li></ul><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW31" title="Note"></a><p><strong>Note:</strong>&nbsp;To develop apps that use Touch Bar, you must run Xcode 8.1 on macOS 10.12.1 build 16B2657 or later. If you want to develop for Touch Bar, check your macOS build number using the system's About This Mac dialog. If you do not have macOS 10.12.1 build 16B2657 or later, install the macOS Sierra 10.12.1 Update from https://support.apple.com/kb/dl1897.</p><p>If you set your deployment target as 10.12.1, weak-link AppKit. This is done automatically if you set a deployment target earlier than 10.12.1.</p><p></p></aside></div></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW32" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When an Xcode project is stored in iCloud Drive, Xcode does not automatically detect iCloud Drive sync conflicts for projects or for files involved in the build. Note that the Documents and Desktop folders can be stored in iCloud Drive on macOS 10.12. (18161353)</p></li><li class="li"><p>Opening Xcode projects and workspaces stored in iCloud Drive, or changing source control branches for an open workspace or project stored in iCloud Drive, may sometimes cause Xcode to hang. Note that in macOS 10.12, your Documents and Desktop folders may optionally be iCloud Drive locations. (28212905)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW33" title="Building and Linking"></a><h4 class="jump">Building and Linking</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW34" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p>OS X 10.11 was the last major release of macOS that supported the previously deprecated garbage collection runtime. Applications or features that depend upon garbage collection may not function properly or will not launch in macOS Sierra. Developers should use Automatic Reference Counting (ARC) or manual retain/release for memory management instead. (20589595)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW35" title="Command Line Tools"></a><h4 class="jump">Command Line Tools</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW36" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The <code>simctl</code><code>launch</code> subcommand in <code>xcrun</code> now supports directing the app’s standard out and standard error to a file or to the local terminal. (27636817)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW37" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>There is no Command Line Tools (OS X 10.11) for Xcode 8.1 beta 2 package. Xcode 8.1 beta 2 contains SDKs that are incompatible with earlier toolchains. Developers who want to make use of the Xcode 8 beta 2 SDKs from the command line must choose the SDK with <code>xcode-select</code>. Developers on OS X El Capitan who have installed versions of the Command Line Tools (OS X 10.11) for Xcode 8.1 beta 2 should install Command Line Tools (OS X 10.11) for Xcode 7.3.1. (28234439) </p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW38" title="Core Data"></a><h4 class="jump">Core Data</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW39" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Adding a new entity to an Xcode 8 or later Core Data model sets the entity name and the class name to the same value. Changing the entity name changes the class name, unless the class name is different than the entity name. (27896843)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW40" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>When using Core Data automatic code generation, changes made to a data model are now available after the model is saved or autosaved. (25789848)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW41" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>In the Core Data editor, setting the module of a Swift <code>NSManagedObject</code> subclass to Current Product Module can cause Swift code generation to use an incorrect filename for the generated code, and to generate an empty <code>import</code> statement for other <code>NSManagedObject</code> subclasses. (26898508)</p><p>As a workaround, set the contents of the Module field for the desired entity to the default value:</p><ol class="ol"><li class="li"><p>In the Core Data editor, highlight the contents of the Module field for the desired entity.</p></li><li class="li"><p>Press the Delete key.</p><p>The Module field now shows the default value, "Global namespace," in light gray.</p></li></ol></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW42" title="Debugging"></a><h4 class="jump">Debugging</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW43" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Starting with macOS Sierra 10.12.1, Xcode 8.1 is required to debug processes that call <code>exec()</code> on themselves. For earlier Xcode versions, re-attach the debugger to the target process after the <code>exec()</code>] call. (28476369)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW44" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>The Xcode debug button in the Touch Bar can sometimes remain in the Control Strip after a debug session has ended resulting in a button with no icon. The debug icon will re-appear in the button when starting a new debug session. (28776047)</p></li><li class="li"><p>Anonymous closure arguments in Swift cannot be used in LLDB expressions. For example, <code>po $0</code> is not supported.</p><p>The values can be inspected in the LLDB command frame variable in Xcode’s Variables View. For example, <code>fr va $0</code> displays the current value of the first argument. (28611943)</p></li><li class="li"><p>A Top Shelf extension is not automatically triggered when you debug a tvOS app from Xcode. As a workaround, use the remote to select a different Top Shelf item and then go back to the one you want to debug. (26131040)</p></li><li class="li"><p>Evaluating expressions in the Xcode Debug Console attached to an Apple Watch can cause the process to be suspended. This occurs when debugging a Notification before the user interface is displayed, for example, during the -init method. As a workaround, manually launch the Watch app on the device to resume the process. To avoid suspending the process, you can use logging instead of a breakpoint. (27459900)</p></li><li class="li"><p>Xcode Debugger cannot debug apps written in Objective-C only but that link against frameworks written in Swift only. (28312362)</p></li><li class="li"><p>The first time you debug a Today extension on a device, it is not offered as an extension to run. As a workaround, stop the process, then run and debug it again. (26427188)</p></li><li class="li"><p>watchOS 1 apps may fail to finish launching on Apple Watch devices. (27724931)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW45" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p><code>Debugger()</code> and <code>DebugStr()</code> are deprecated and the scheme editor no longer provides the option to enable these functions. If your project uses these functions, enable them by setting the environment variable <code>USERBREAK</code> with a value of 1. (24631170)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW46" title="Help"></a><h4 class="jump">Help</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW47" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Quick Help shows “Symbol not found” message for Objective-C user defined symbols. (28061632)</p><p>Use HeaderDoc documentation tags to add Quick Help comments to your symbols. The following comment block shows the general format for documenting a method:</p><div class="codesample clear"><table><tr><td scope="row"><pre>/**<span></span></pre></td></tr><tr><td scope="row"><pre>   @method myMethod:withTwoParameters:<span></span></pre></td></tr><tr><td scope="row"><pre>   @abstract A short description for the QuickHelp popover<span></span></pre></td></tr><tr><td scope="row"><pre>   @description A longer description for the QuickHelp pane<span></span></pre></td></tr><tr><td scope="row"><pre>   @param paramName1 A description of the parameter<span></span></pre></td></tr><tr><td scope="row"><pre>   @param paramName2 Another parameter description<span></span></pre></td></tr><tr><td scope="row"><pre>   @return Description for the return value<span></span></pre></td></tr><tr><td scope="row"><pre>*/<span></span></pre></td></tr></table></div></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW48" title="Instruments"></a><h4 class="jump">Instruments</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW49" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p>The Automation instrument has been removed from Instruments. Use Xcode’s UI Testing instead. (26761665)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW50" title="Interface Builder"></a><h4 class="jump">Interface Builder</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW51" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Added Custom Gesture Recognizer to the object library. Use it for custom subclasses of <code>UIGestureRecognizer</code> or <code>NSGestureRecognizer</code> instead of a plain <code>NSObject</code>. This resolves an issue where a combination of stock and custom gesture recognizers on a <code>UIView</code> fails to compile. (27838954) </p></li><li class="li"><p>There is a new Update Frames button at the bottom of the canvas. Click the button to update the frames of the selected objects and their children on the Interface Builder canvas. (27818991)</p></li><li class="li"><p>The Pin button at the bottom of the canvas has been renamed to Add New Constraints. (27819014)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW52" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Dragging content into static <code>UITableView</code> cell on the canvas works again. (28026179)</p></li><li class="li"><p>Fixed auto layout performance issue with <code>NSStackView</code> using Gravity Areas distribution. (27910320)</p></li><li class="li"><p>Xcode 8.0 did not always restore view frames from storyboards and xibs when layouts were ambiguous. Xcode 8.1 fixes several of these issues. If you have encountered these issues, resolve the ambiguity in the Auto Layout issues and update frames. Xcode 8.1 will persist them correctly. (28221021, 28244619)</p></li><li class="li"><p>Resolved a layout hang when selecting Landscape orientation in the Device Bar on non-Retina displays when running on OS X 10.11. (27251685)</p></li><li class="li"><p>Xcode Debug Console no longer shows extra logging from system frameworks when debugging applications in the Simulator. (26652255, 27331147)</p></li><li class="li"><p>When using Swift 2.3, creating <code>IBAction</code> connections no longer inserts <code>WithSender</code> in the selector name. (25220368)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW53" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p><code>supportsPressAndHold</code> does not work when using popover Touch Bar items from Interface Builder. (28701667)</p><p>To work around this, add an outlet to the popover item in code and call <code>popoverItem.pressAndHoldTouchBar = popoverItem.popoverTouchBar</code>.</p></li><li class="li"><p>Using <code>NSColorPickerTouchBarItem</code> in Interface Builder results in a Touch Bar item that is disabled at runtime. (28670596)</p><p>To enable the Touch Bar at runtime, add an outlet to the color picker item in code and call <code>colorPickerItem.isEnabled = true</code>.</p></li><li class="li"><p>Using <code>NSSharingServicePickerTouchBarItem</code> in Interface Builder results in a disabled Touch Bar item with a blank image. (28716331)</p><p>To set the image and enable the service picker at runtime, add an outlet to the service picker and set the image by calling <code>servicePicker.buttonImage = NSImage(named: NSImageNameTouchBarShareTemplate)</code>. Then enable the service picker by calling <code>servicePicker.isEnabled = true</code>.</p></li><li class="li"><p>Creating an <code>IBAction</code> connection by control-dragging when using Swift 2.3 incorrectly includes <code>WithSender</code> in the selector, causing the application to crash at runtime. <code>WithSender</code> is added when control-dragging from a <code>.swift</code> file to the Interface Builder canvas, or when control-dragging from the canvas to the document outline. As a workaround, create the action connection by dragging from Interface Builder to the Swift source, or use Find &gt; Find and Replace to manually remove <code>WithSender</code>. (27410040)</p></li><li class="li"><p>Interface Builder does not show correct bar heights (status bar, top bar, bottom bar) when picking landscape for a device in the device configuration bar. (6799670)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW54" title="Objective-C and C++"></a><h4 class="jump">Objective-C and C++</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW55" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Objective-C now supports ARC-style weak references in files using manual reference counting (MRC). This behavior must be manually enabled in your project settings. <code>__weak</code> was previously accepted and ignored in MRC files; to avoid silently changing the behavior of code, if weak references are not enabled, the compiler will now warn on such uses of <code>__weak</code>. (28694859)</p></li><li class="li"><p>Manual reference counting (MRC) weak references are fully supported on macOS 10.12 Sierra, iOS 10.0, watchOS 3.0, and tvOS 10.0.</p><p>MRC weak references are partially supported on macOS Lion 10.7 through macOS El Capitan 10.11, iOS 5.0 through 9.0, watchOS 1.0 and 2.0, and tvOS 9.0. These versions do not support runtime metadata for <code>__weak</code> instance variables in classes whose <code>@implementation</code> is defined in MRC. Also <code>NSCopyObject()</code> will not work, and direct access to <code>ivars</code> by Key-Value Coding and Interface Builder will not work. To work around this, use KVC and <code>IBOutlet</code> on accessor methods or properties. (9674298)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW56" title="Project Editor"></a><h4 class="jump">Project Editor</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW57" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>The “Use Asset Catalog…” button in the Project Editor’s General tab does not immediately refresh after selecting an asset catalog. To work around this, after selecting an asset catalog, navigate away from the General tab and then back. (26381374)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW58" title="Scene Kit"></a><h4 class="jump">Scene Kit</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW59" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>SceneKit views (<code>SCNView</code>) do not render in Quick Look inside the Xcode Debugger when the current camera (<code>SCNCamera</code>) uses new effects such as color grading, color fringe, or saturation and contrast. (27653505)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW60" title="Signing"></a><h4 class="jump">Signing</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW61" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>When manually signing, Xcode requires your provisioning profile to contain all entitlements used by your default build configuration’s entitlements file. (28377448)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW62" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Inspector tooltips in Interface Builder are not available. (26664452)</p></li><li class="li"><p>The Xcode automatic signing system may fail to sign your app if you add your account or change your password while your project is open. As a workaround, close and reopen the project. (25627172)</p></li><li class="li"><p>When opening a project, Xcode only migrates the deprecated <code>PROVISIONING_PROFILE</code> setting to <code>PROVISIONING_PROFILE_SPECIFIER</code> when the setting is empty. (26281413)</p></li><li class="li"><p>Downloading profiles using the Download All Profiles button intermittently skips some profiles. As a workaround, use the developer website to download any missing profiles. (26412212)</p></li><li class="li"><p>Xcode may require a watch paired to your phone to be registered on the developer website even when developing an iOS only app. As a workaround, turn off your watch while developing, or develop using a different phone. (26885780)</p></li><li class="li"><p>Free provisioning accounts may experience issues launching apps on the watch for the first time. As a workaround, launch the app manually on the device and click Trust when the security sheet appears. (26629630)</p></li><li class="li"><p>Messages extensions signed with a personal team may fail to run on a device. As a workaround, on the device, go to Settings &gt; General &gt; Profiles &amp; Device Management, tap on the profile name that authorized the app, and tap Trust. (26359174)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW63" title="Simulator"></a><h4 class="jump">Simulator</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW64" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Sticker Pack apps can be used in 32-bit simulators (iPhone 5, iPad Retina) in Xcode. (27830469)</p></li><li class="li"><p>Simulator no longer leaks memory when a simulated device is booted, rotated, or the scale is changed. (27673601)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW65" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>The GameKit framework is missing from the SDK for the watchOS simulator. To work around this issue, develop for GameKit using a watchOS device which does include the framework. (27899791)</p></li><li class="li"><p>All connected host controllers are seen as the same controller for tvOS in Simulator. As a workaround, test multiple controller functionality on an AppleTV. (27511145)</p></li><li class="li"><p>There is no way to trigger Siri from Simulator even though Siri APIs are available in Simulator runtimes. Use an Apple TV to test usage of the Siri APIs. (25957692)</p></li><li class="li"><p>Keychain APIs may fail to work in the Simulator if your entitlements file doesn’t contain a value for the application-identifier entitlement. To work around this issue, add a user-defined build setting to your target named <code>ENTITLEMENTS_REQUIRED</code> and set the value to <code><!--a  -->YES<!--/a--></code>. This will cause Xcode to automatically insert an application-identifier entitlement when building. (28338972)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW66" title="Source Editor"></a><h4 class="jump">Source Editor</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW67" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Xcode features provided via extensions now work more reliably. (28341722)</p></li><li class="li"><p>In Xcode 8.1, an <code>XCSourceTextRange</code> is half-open: It includes the character at the start position, and excludes the character at the end position. Previous versions of Xcode were inconsistent when translating from the internal format to an <code>XCSourceTextRange</code> instance. All Xcode Source Editor Extensions built against Xcode 8.0 will continue to get the previous inconsistent behavior for binary compatibility.</p><p>An Xcode Source Editor Extension built against Xcode 8.1 that also needs to run in Xcode 8.0 can check the version of Xcode by comparing <code>XCXcodeKitVersionNumber</code> against the version listed in <em>XcodeKit/XcodeKitDefines.h</em>. (28131743)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW68" title="Source Editor Extensions"></a><h4 class="jump">Source Editor Extensions</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW69" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Xcode Source Editor extensions don’t support adding Objective-C categories to XcodeKit classes. (26432410)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW70" title="Swift"></a><h4 class="jump">Swift</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW71" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>When Optional values are bridged to Objective-C objects, such as when an <code>Optional</code> is passed to an Objective-C API that takes <code>nonnull</code> id or when a <code>[T?]</code> array is bridged to an <code>NSArray</code>, the Swift runtime will now bridge the wrapped value if there is one. If a <code>nil</code> value is bridged, and the API does not accept a <code>nil</code> pointer, Swift will use <code>NSNull</code> to represent the <code>nil</code> value. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0140-bridge-optional-to-nsnull.md" class="urlLink" rel="external">SE-0140</a></span>)</p></li><li class="li"><p>All of Swift's standard number types now bridge to Objective-C as <code>NSNumber</code> instances. Structs such as <code>CGRect</code>, for which the <code>NSValue</code> class provides factory methods, now bridge to Objective-C as <code>NSValue</code> instances. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md" class="urlLink" rel="external">SE-0139</a></span>)</p></li><li class="li"><p>Two types have been added to the Swift standard library: <code>UnsafeRawBufferPointer</code> and <code>UnsafeMutableRawBufferPointer</code>. They represent a non-owning view over a fixed region of memory (a buffer). They expose the underlying buffer as a <code>Collection</code> of <code>UInt8</code> bytes, independent of the type of values held in that memory. This helps developers migrate to the UnsafePointer changes in Swift 3.0. For background, see the <span class="content_text"><a href="https://swift.org/migration-guide/se-0107-migrate.html" class="urlLink" rel="external">UnsafeRawPointer Migration Guide</a></span>. In some cases, <code>UnsafeRawBufferPointer</code> provides a safe replacement for <code>UnsafeBufferPointer&lt;UInt8&gt;</code>. This is particularly useful for code that works with binary file formats and streaming I/O.</p><p>A new <code>withUnsafeBytes(of:)</code> function exposes a value's in-memory representation as an <code>UnsafeRawBufferPointer</code>. This example copies a heterogenous struct into a homogeneous array of bytes:</p><div class="codesample clear"><table><tr><td scope="row"><pre>struct Header {<span></span></pre></td></tr><tr><td scope="row"><pre>   var x: Int<span></span></pre></td></tr><tr><td scope="row"><pre>   var y: Float<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>var header = Header(x: 0, y: 0.0)<span></span></pre></td></tr><tr><td scope="row"><pre>var byteBuffer = [UInt8]()<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>withUnsafeBytes(of: &amp;header) {<span></span></pre></td></tr><tr><td scope="row"><pre>   (bytes: UnsafeRawBufferPointer) in byteBuffer += bytes<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>A new <code>Array.withUnsafeBytes</code> method exposes an array's underlying buffer as an <code>UnsafeRawBufferPointer</code>. This example copies an array of integers into an array of bytes:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let intArray = [1, 2, 3]<span></span></pre></td></tr><tr><td scope="row"><pre>var byteBuffer = [UInt8]()<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>intArray.withUnsafeBytes {<span></span></pre></td></tr><tr><td scope="row"><pre>   (bytes: UnsafeRawBufferPointer) in byteBuffer += bytes<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0138-unsaferawbufferpointer.md" class="urlLink" rel="external">SE-0138</a></span>)</p></li><li class="li"><p>The macro <code>__swift__</code> will be defined when importing C and Objective-C code into Swift. The value of this macro will have the form <code>XYYZZ</code>, where <code>X</code> is the major version of the language, <code>YY</code> is the minor version of the language (always two digits), and <code>ZZ</code> is the “patch” version (also two digits). For example, in Swift 3.0.1, <code>__swift__</code> will have the value <code>30001</code>. Note that this macro is not defined in the legacy Swift 2.3 compiler, nor was it defined in the initial release of Swift 3. (26921435)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW72" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>An issue with <code>@NSManaged</code> properties being used to satisfy protocol requirements has been fixed. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-2673" class="urlLink" rel="external">SR-2673</a></span>)</p></li><li class="li"><p>Linking LTO files compiled with Xcode 8 to LTO files compiled with a previous Xcode release will now work even if Objective-C class properties are in use. (28017126) </p></li><li class="li"><p>The C attribute <code>swift_error(zero_result)</code> is now handled correctly. (27985744)</p></li><li class="li"><p>Access checking for overrides and for members that satisfy protocol requirements has been fixed to more closely match the Swift language proposal that introduced <code>private</code> and <code>fileprivate</code> (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md" class="urlLink" rel="external">SE-0025</a></span>.) This resolves some crashes, but can result in errors for code that was accepted in Xcode 8.0. To keep Swift 3 code compatible with Xcode 8.0, use <code>private</code> for top-level classes and structs instead of <code>fileprivate</code>. (27820665) </p></li><li class="li"><p>Swift Evolution proposal <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0137-avoiding-lock-in.md" class="urlLink" rel="external">SE-0107</a></span> states that <code>UnsafePointer.withMemoryRebound(to:capacity:)</code>
should produce a <code>const UnsafePointer</code>, but in Swift 3.0 it produces an <code>UnsafeMutablePointer</code>. As a result, Swift 3.0 incorrectly accepts code in this form:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let ptr: UnsafePointer&lt;Int&gt;<span></span></pre></td></tr><tr><td scope="row"><pre>ptr.withMemoryRebound(to: UInt.self, capacity: 1) {<span></span></pre></td></tr><tr><td scope="row"><pre>   takesUInt($0) // this implicitly converts to a mutable pointer<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>For Swift 3.0.1, change the code to:</p><div class="codesample clear"><table><tr><td scope="row"><pre>ptr.withMemoryRebound(to: UInt.self, capacity: 1) {<span></span></pre></td></tr><tr><td scope="row"><pre>   takesUInt(UnsafeMutablePointer(mutating: $0))<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(28409842)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW73" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Extensions which make imported Objective-C generic classes conform to a Swift protocol can be miscompiled. This can result in a runtime crash in <code>objc_retain</code> or <code>objc_msgSend</code> when a class method is called generically through the protocol. (28873860)</p><p>As a workaround, declare the protocol as <code>@objc</code> or wrap the class instance in a generic struct that implements the protocol.</p></li><li class="li"><p>When using generics and implicitly-unwrapped optionals, type inference can fail to unwrap the optional, leading to compiler errors for valid code. (28621624)</p><p>As a workaround, explicitly unwrap the optional. For example, in the following valid code, the compiler gives an error because <code>u</code> is implicitly-unwrapped in the <code>return</code> statement.</p><div class="codesample clear"><table><tr><td scope="row"><pre>func compare&lt;T: Comparable&gt;(v: T, u: T!) -&gt; Bool {<span></span></pre></td></tr><tr><td scope="row"><pre>   return v &lt; u<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Work around the error by explicitly unwrapping <code>u</code>:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func compare&lt;T: Comparable&gt;(v: T, u: T!) -&gt; Bool {<span></span></pre></td></tr><tr><td scope="row"><pre>   return v &lt; u!<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="li"><p>Objective-C methods with empty selector pieces (i.e. a colon with no name before it) may cause the Swift 3 compiler to crash. As a workaround, rename the methods or remove them from the bridging header includes. If neither of those alternatives are possible, guard the method declaration. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>#if !defined(__swift__) || __swift__ &gt; 30001<span></span></pre></td></tr></table></div><p>(28448188)</p></li><li class="li"><p>Lazy initialization using a constructor with defaulted parameters can fail with the message “type of expression is ambiguous without more context”. As a workaround, wrap the call to the constructor into a separate function if you want to use the defaulted parameters such as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>struct Value {<span></span></pre></td></tr><tr><td scope="row"><pre>   init(first: Int, second: Int? = 10) {}<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>class Test {<span></span></pre></td></tr><tr><td scope="row"><pre>   static func createValue(first: Int) -&gt; Value {<span></span></pre></td></tr><tr><td scope="row"><pre>      return Value(first: first)<span></span></pre></td></tr><tr><td scope="row"><pre>   }<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>   lazy var theValue = createValue(first: 5)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Calling the constructor without any of the parameters defaulted works as well. (28313602)</p></li><li class="li"><p>Some Objective-C methods in the SDKs may incorrectly annotate or assume a type to be <code>nonnull</code> rather than <code>nullable</code>. A type that Swift treats as a struct, such as <code>NSURL</code> (<code>Foundation.URL</code>) or <code>NSDate</code> (<code>Foundation.Date</code>), results in a run-time crash in a method with a name like <code>bridgeFromObjectiveC</code>; in other cases, it can lead to crashes or undefined behavior in user code. If you identify such a method, please file a report at <span class="content_text"><a href="http://bugreport.apple.com" class="urlLink" rel="external">bugreport.apple.com</a></span>.
As a workaround, add a trampoline function in Objective-C with the correct nullability annotations. For example, the following function will allow you to call <code>FileManager's</code><code>enumerator(at:includingPropertiesForKeys:options:errorHandler:)</code> method with an error handler that accepts <code>nil</code> URLs:</p><div class="codesample clear"><table><tr><td scope="row"><pre>static inline NSDirectoryEnumerator&lt;NSURL *&gt; * _Nullable<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>fileManagerEnumeratorAtURL(NSFileManager *fileManager, NSURL * _Nonnull url, NSArray&lt;NSURLResourceKey&gt; * _Nullable keys, NSDirectoryEnumerationOptions options, BOOL (^ _Nullable errorHandler)(NSURL * _Nullable errorURL, NSError * _Nonnull error)) {<span></span></pre></td></tr><tr><td scope="row"><pre>     return [fileManager enumeratorAtURL:url includingPropertiesForKeys:keys options:options errorHandler:^(NSURL * _Nonnull errorURL, NSError * _Nonnull error) {<span></span></pre></td></tr><tr><td scope="row"><pre>      return errorHandler(errorURL, error);<span></span></pre></td></tr><tr><td scope="row"><pre>   }];<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>This function can be included in your bridging header (for an app or test target) or umbrella header (for a framework target). (27749845)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW74" title="Testing"></a><h4 class="jump">Testing</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW75" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>UI Recording in the Touch Bar only records tap interactions. (28500819, 28454674)</p><p>To work around this, record the test and then change the generated code for the test to the desired type of interaction. For example, replace the call to <code>tap</code> with <code>doubleTap</code> to change from a single-tap to a double-tap. For possible interactions, see the documentation for <code><a href="https://developer.apple.com/documentation/xctest/xcuielement" class="urlLink" target="_self">XCUIElement</a></code>.</p></li><li class="li"><p>UI tests may fail to run for apps written with Swift 2.3. (26680406)</p></li><li class="li"><p>Keystroke events issued by Xcode UI tests may be dropped if <code>TextExpander</code> is enabled. (25203671)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW76" title="Xcode Server"></a><h4 class="jump">Xcode Server</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW77" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Xcode Server reports the error “Verifying that Xcode is accessible” when Xcode is installed in a non-world-readable location other than /Applications. Since the service makes use of role accounts to run various service daemons, those role accounts need to be able to read Xcode. As a workaround, place Xcode in the /Applications folder. (26920334)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW78" title="Xcode 8.0"></a><h3 class="jump">Xcode 8.0</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW79" title="General"></a><h4 class="jump">General</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW80" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The clang static analyzer now checks for improper cleanup of synthesized instance variables in <code>-dealloc</code> methods. (6927496)</p></li><li class="li"><p>The indexing component has moved out of the Xcode process to an XPC service, providing the benefit of process isolation and accurate resource usage attribution. (24330820)</p></li><li class="li"><p>A fast scanner for unit tests is now available. The scanner will populate the Test navigator shortly after opening a project for the first time, eliminating the need to wait for indexing to parse all the unit test source files. It supports both Swift and Objective-C unit tests. (25716884)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW81" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Opening Xcode projects and workspaces stored in iCloud Drive, or changing source control branches for an open workspace or project stored in iCloud Drive, may sometimes cause Xcode to hang. Note that in macOS 10.12, your Documents and Desktop folders may optionally be iCloud Drive locations. (28212905)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW82" title="Accessibility"></a><h4 class="jump">Accessibility</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW83" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>On macOS 10.12, Xcode removes its custom motion animations from the user interface when the Reduce Motion setting is selected in System Preferences &gt; Accessibility &gt; Display. (26973957)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW84" title="Address and Thread Sanitizers"></a><h4 class="jump">Address and Thread Sanitizers</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW85" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Address Sanitizer is supported in Swift and can catch memory corruption errors that get triggered by using types such as <code>UnsafeMutablePointer</code>. (21888114)</p></li><li class="li"><p>The new thread sanitizer feature combines compiler instrumentation and runtime monitoring to help find and understand data races and other concurrency bugs in Swift and Objective-C. Thread sanitizer is supported on 64-bit macOS and 64-bit simulators. (19432893)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW86" title="Apple LLVM Compiler and Low-Level Tools"></a><h4 class="jump">Apple LLVM Compiler and Low-Level Tools</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW87" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Using a custom module map that contains system headers (directly or indirectly) can result in crashes of the LLVM or Swift compiler. For example, this can occur when using a module map with paths into the macOS SDK while building for iOS, or when using headers from the system <code>/usr/include</code> while building with any Xcode SDK. </p><p>To work around this issue, make sure the system headers mentioned in the module map or included by custom headers are always found in the current target's <code>SDKROOT</code>. (26866326)</p></li><li class="li"><p>Older versions of libobjc cannot fully handle the runtime metadata provided by the compiler for class properties. Therefore, if your deployment target is older than OS X 10.11 or iOS 9, some of this metadata will be absent. It is still safe to use class properties in projects deploying to newer OS versions, and the accessor methods will still show up in the runtime metadata. If you aren't using the Objective-C runtime to get information about class properties, you don't need to worry about this issue. (25616128) </p></li><li class="li"><p>Trying to link with LTO files compiled with Xcode 8 and files compiled with a previous Xcode release may fail if Objective-C class properties are in use. (28017126)</p></li><li class="li"><p>Activity and trace messages normally visible in LLDB thread summaries and thread detailed information is absent when debugging processes running on beta versions of macOS, iOS, tvOS, or watchOS. (26370425)</p></li><li class="li"><p>If any Swift code contains a <code>private func ==</code> definition, LLDB fails to evaluate expressions in a Swift context with the error: <code>binary operator '==' cannot be applied to two 'Int' operands</code>. To work around this issue, make any <code>==</code> overloads in your program non-private. (27015195)</p></li><li class="li"><p>The new LLVM-based <code>otool(1)</code> exits non-zero on the first error it encounters for the files on the command line. This includes treating non-object files as errors. This differs from the old <code>otool(1)</code>, available as <code>otool-classic(1)</code>, which processes all files on the command line even if some have errors and does not treat non-object files as an error but as a warning. (26828015)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW88" title="Asset Catalog"></a><h4 class="jump">Asset Catalog</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW89" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Applications compiled with Xcode 8 and a deployment target of iOS 7 may crash at launch with the following assertion:</p><div class="codesample clear"><table><tr><td scope="row"><pre>Assertion failed: (maxCountIncludingZeroTerminator &gt; 0 &amp;&amp; tokenCount &lt; maxCountIncludingZeroTerminator), function CUIRenditionKeyCopy, file /SourceCache/CoreUI/CoreUI-232.4/CoreTheme/ThemeStorage/CUIThemeRendition.m, line 185.<span></span></pre></td></tr></table></div><p>To work around this issue, update the deployment target to iOS 8.0 or later, or add a single image to the asset catalog that has at least five attributes specified across the image set, such as:</p><ul class="nested"><li class="nested li"><p>scale (1x, 2x, 3x)</p></li><li class="nested li"><p>idiom (add iPad,iPhone, and a universal asset)</p></li><li class="nested li"><p>direction (left to right, right to left)</p></li><li class="nested li"><p>width/height class (any &amp; compact, and so forth)</p></li><li class="nested li"><p>memory (add a 1 GB asset)</p></li><li class="nested li"><p>graphics (add a Metal 1v2 asset)</p></li></ul><p>It is not necessary to use the image in your code or to add all of these attributes. (27852391)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW90" title="Building and Linking"></a><h4 class="jump">Building and Linking</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW91" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The PNG compression build settings <code>Compress PNG Files</code> and <code>Remove Text Metadata From PNG Files</code> are available for macOS in addition to iOS, watchOS, and tvOS. For macOS, both settings are off by default. (24638927)</p></li><li class="li"><p>The build setting <code>ENABLE_ADDRESS_SANITIZER</code> controls whether the address sanitizer is enabled across both the clang and swiftc compilers. Previously only <code>CLANG_USE_ADDRESS_SANITIZER</code> existed; that setting is now subordinate to <code>ENABLE_ADDRESS_SANITIZER</code> and should not be used by itself. If a project was previously using <code>CLANG_USE_ADDRESS_SANITIZER</code> as a build setting to enable the address sanitizer separate from the scheme option, then <code>ENABLE_ADDRESS_SANITIZER</code> should now be used instead. (24912445)</p></li><li class="li"><p>Xcode takes build settings set in xcconfig files into account when suggesting updates to your build settings. (13433596)</p></li><li class="li"><p>xcconfig files support conditional inclusion of other xcconfig files, using the syntax <code>#include?</code> instead of the usual <code>#include</code> (which still generates a warning, as before, if the file is missing). (11003005)</p></li><li class="li"><p>The static analyzer check for nullability violations now supports both aggressive and less aggressive levels of checking. The more-aggressive level checks for nullability violations in all calls and is enabled by default for new projects. The less-aggressive level checks for nullability violations in calls to project headers but not system headers. The less-aggressive level is enabled by default for existing projects. To turn on the more-aggressive level for existing projects, select "Yes (Aggressive)" for "Misuse of ‘nonnull’" in the Static Analyzer - General Issues section of the target build settings. (25120516)</p></li><li class="li"><p>The development team used for signing is now stored in a new build setting, <code>DEVELOPMENT_TEAM</code>. This allows overriding the development team using xcconfig files. As a result, the format of the new <code>PROVISIONING_PROFILE_SPECIFIER</code> build setting has changed. The old format, which included a team ID, is still supported, but it now needs to contain only a provisioning profile name. (27082795)</p></li><li class="li"><p>If your <code>CODE_SIGN_ENTITLEMENTS</code> value is conditionalized per SDK, add a setting for the appropriate simulator SDK(s) explicitly. Previous versions of Xcode fell back to the iOS SDK’s value; this is no longer the case. (26923346)</p></li><li class="li"><p>When the <code>Enable Testability</code> build setting is enabled, Xcode 8 will pass <code>-export_dynamic</code> to the linker to preserve all global symbols for testing. This effectively overrides dead code stripping, which can expose link failures from unused functions that reference undefined symbols. If necessary, disabling testability will allow the link to proceed without source changes. (27684883)</p></li><li class="li"><p>xcodebuild now supports a <code>-quiet</code> flag to suppress output other than errors and warnings. (5732994)</p></li><li class="li"><p>In macOS 10.12 and later, Xcode cleans up stale derived data, precompiled headers, and module caches. (23282174)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW92" title="Certificates and Profiles"></a><h4 class="jump">Certificates and Profiles</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW93" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>In Developer ID provisioning profiles, the value of the com.apple.developer.icloud-container-environment entitlement has changed from an array to a string. (26722546)</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW94" title="Note"></a><p><strong>Note:</strong>&nbsp;In Xcode 8, if you choose to use local signing assets when exporting a Developer ID app that uses iCloud, then you may run into an error saying that your profile doesn’t match your app’s entitlements. You can resolve the error by generating a new Developer ID provisioning profile. You can do this manually on the developer website, or let Xcode do it automatically by selecting your development team instead of using local signing assets when distributing your app.</p><p></p></aside></div></li><li class="li"><p>When exporting an app with Developer ID, Xcode will automatically generate Developer ID provisioning profiles for any bundles embedded in the app. (26827710)</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW95" title="Note"></a><p><strong>Note:</strong>&nbsp;This can fail if your app contains any embedded content for which your development team does not own the associated app ID. To prevent this failure when building your archive, don’t use a provisioning profile for any content that you don’t own. Xcode will only generate Developer ID provisioning profiles for content that was archived with a provisioning profile.</p><p></p></aside></div></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW96" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Developer ID apps using profiles will not work on versions of OS X prior to 10.10. You can work around this issue by explicitly installing the profile before running the app. (26013718)</p></li><li class="li"><p>Xcode 8 does not automatically copy the aps-environment entitlement from provisioning profiles at build time. This behavior is intentional. To use this entitlement, either enable Push Notifications in the project editor’s Capabilities pane, or manually add the entitlement to your entitlements file. (28076333)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW97" title="Code Signing"></a><h4 class="jump">Code Signing</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW98" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Xcode does not require code signing for iOS frameworks, and will skip signing a framework if a team is not specified. Frameworks should be signed when copied into the hosting product (using the Code Sign on Copy flag in a Copy Files build phase). (26892618)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW99" title="Color Management"></a><h4 class="jump">Color Management</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW100" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Fixed a crash opening documents using a pattern color with <code>NSPatternColorSpace</code>. (26964970)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW101" title="Command Line"></a><h4 class="jump">Command Line</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW102" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The Swift Package Manager tool for managing the distribution of Swift code is available on the command line. Help for the Swift Package Manager can be found by running <code>swift package --help</code> in Terminal. (25582703)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW103" title="Core Data"></a><h4 class="jump">Core Data</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW104" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode automatically generates classes or class extensions for the entities and properties in a Core Data data model. Automatic code generation is enabled and disabled on an entity by entity basis, and is enabled for all entities in new models that use the Xcode 8 file format. This feature is available for any data model that has been upgraded to the Xcode 8 format. You specify whether Xcode generates Swift or Objective-C code for a data model using the data model’s file inspector.</p><p>When automatic code generation is enabled for an entity, Xcode creates either a class or class extension for the entity as specified in the entity's inspector: the specified class name is used and the sources are placed in the project’s Derived Data. For both Swift and Objective-C, these classes are directly usable from the project’s code. For Objective-C, an additional header file is created for all generated entities in your model. The header file name conforms to the naming convention “DataModelName+CoreDataModel.h”.</p><p>The Xcode attribute inspector also allows a choice of whether to generate scalar or object properties. New attributes default to generating scalar properties where appropriate. For attributes that previously relied on filling in class information after code was manually generated (for example, transformable attributes and transient attributes with an undefined attribute type), specify the class to use in the attribute’s declaration directly in the attribute inspector. (22223273)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW105" title="Debugging"></a><h4 class="jump">Debugging</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW106" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Debugging mixed Objective-C and Swift projects has been improved by displaying Swift instance variables even when showing Objective-C references to Swift types. (24083219)</p></li><li class="li"><p>Memory graph debugging is available for WatchKit extensions. (26563396)</p></li><li class="li"><p>In addition to the Xcode console, Terminal can be used for macOS process input and output while debugging. Open the scheme editor to edit your scheme’s Run action and then select the Use Terminal option in the Options tab. (23565724)</p></li><li class="li"><p>LLDB fully supports the Swift 3 language and includes numerous quality improvements to make Swift debugging more accurate and reliable. Note that when debugging Swift 2.3 code an earlier version of LLDB will be used, and most new LLDB features will not be available. (22509661)</p></li><li class="li"><p>Stepping into a specific function in a complex line of code is much easier. Consider the following example:
</p><div class="codesample clear"><table><tr><td scope="row"><pre>Resolved Issues(bar(), baz())<span></span></pre></td></tr></table></div><p>Previously, stepping into <code>Resolved Issues()</code> required stepping into and out of <code>bar()</code> and <code>baz()</code>. Now the <code>sif</code> alias makes this easy. The command <code>sif Resolved Issues</code> will step through other functions until it reaches the named target. If the expected target isn’t reached, it provides a safeguard by stopping after returning from the current scope. (24528770)</p></li><li class="li"><p>Xcode 8 now isolates LLDB as a distinct process. This is largely transparent but has the following implications:</p><ul class="nested"><li class="nested li"><p>In the event of an unrecoverable failure while debugging, Xcode will be unaffected aside from closing the debug session.</p></li><li class="nested li"><p>Multiple debugger versions can be used simultaneously. Projects containing Swift 2.3 code will use an earlier corresponding LLDB, and when working with an open source Swift toolchain, the included LLDB will be used.</p></li></ul><p>(23418627)</p></li><li class="li"><p>LLDB now supports and correctly displays the value of thread-local variables. (7796742)</p></li><li class="li"><p>LLDB documentation has been significantly updated:</p><ul class="nested"><li class="nested li"><p>A new <em><a href="../../../../documentation/General/Conceptual/lldb-guide/chapters/Introduction.html#//apple_ref/doc/uid/TP40016717" data-renderer-version="1" target="_self">LLDB Debugging Guide</a></em> is available in Xcode help.</p></li><li class="nested li"><p>LLDB’s built-in help text has been overhauled for clarity and consistency.</p></li><li class="nested li"><p>When no help is available via <code>help &lt;topic&gt;</code> in LLDB, alternative suggestions are displayed.</p></li><li class="nested li"><p>Command aliases can now have custom help text, and several of the key built-in aliases take advantage of this facility.</p></li></ul><p>(24868841)</p></li><li class="li"><p>Expressions that can be trivially corrected using compiler fix-its are automatically fixed and executed. This ensures that LLDB doesn’t get in your way for something as simple as a missing semicolon or the wrong style of indirection in Objective-C; or the need to unwrap a value in Swift. (25351938)</p></li><li class="li"><p>Expressions in LLDB support an even wider array of scenarios. Declaring and capturing Objective-C blocks and C++ lambdas now works as expected, and declaring C and C++ functions is now possible using the new <code>--top-level</code> (or <code>-p</code>) option on the <code>expression</code> command. (22509903)</p></li><li class="li"><p>Two new command aliases make it easy to examine C-style arrays. The commands <code>parray</code> and <code>poarray</code> behave like their counterparts <code>p</code> and <code>po</code> when formatting each element of the specified array. The length of the array must be specified first, followed by a pointer to the array. The usual LLDB conveniences for specifying arguments using the result of expressions can be used for the length—for example, <code>parray `argc` argv</code> when stopped in a C, C++, or Objective-C main function. (12691162)</p></li><li class="li"><p>Processes built with thread sanitizer enabled will display relevant information when issues are detected while debugging with LLDB. (23956680)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW107" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Debugging a Notification extension works with the normal extension debugging workflow in Xcode. (23487932)</p></li><li class="li"><p>Debugging with address sanitizer does not result in a runtime error regarding dyld inserting the ASan library. (23805032)</p></li><li class="li"><p>Fixed a crash for macOS apps running with thread sanitizer when profiling from the Memory gauge. (26275485)</p></li><li class="li"><p>The view debugger shows the debug description for views in the inspector. (23976841)</p></li><li class="li"><p>The view debugger shows the frame for views in the size inspector. (24314615)</p></li><li class="li"><p>The view debugger functions normally when debugging on the iOS 8 simulator. (25802025)</p></li><li class="li"><p>Resolved an issue where view debugging could fail when not using auto layout, due to an unhandled assertion in an underlying system framework. (25311044)</p></li><li class="li"><p>Resolved stability issues with debugging extensions or watch apps in the simulator. (25338888)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW108" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p><code>Debugger()</code> and <code>DebugStr()</code> are deprecated and the scheme editor no longer provides the option to enable these functions. If your project uses these functions, enable them by setting the environment variable <code>USERBREAK</code> with a value of 1. (24631170)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW109" title="Device Management"></a><h4 class="jump">Device Management</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW110" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>You must unlock devices when first connecting them to Xcode in order to use them for development. (25771635)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW111" title="Instruments"></a><h4 class="jump">Instruments</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW112" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Instruments can't find the symbols downloaded for Apple Watch. As a workaround, find the device support folder for your Apple Watch version (it will be inside <code>~/Library/Developer/Xcode/watchOS DeviceSupport/</code>), create an empty <code>Info.plist</code> file inside this folder, and restart Instruments. (27996340)</p></li><li class="li"><p>The Instruments Leaks template fails to report data against Swift apps with a Release configuration, because this configuration enables Whole Module Optimization by default. To work around this issue: if you're targeting a Swift app, temporarily turn off Whole Module Optimization when using either the Leaks template in Instruments or the Memory Graph Debugger in Xcode. (27906876)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW113" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p>The Automation instrument has been removed from Instruments. Use Xcode’s UI Testing instead. (26761665)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW114" title="Interface Builder"></a><h4 class="jump">Interface Builder</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW115" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Interface Builder makes it easier to migrate to auto layout by no longer generating implicit constraints for views without constraints. (13728545, 24274870)</p></li><li class="li"><p>The size inspector now displays frame coordinates with greater precision, and can accept fractional point values on Retina displays for iOS. (8895377)</p></li><li class="li"><p>Storyboard and xib files support smooth zooming across iOS, tvOS, and watchOS, as well as editing at any zoom level. When using a mouse, operating the scroll wheel while holding down the option key allows you to zoom in and out. (5215027, 9635866, 11579591, 15011038, 21256576, 23379420)</p></li><li class="li"><p>A completely redesigned workflow for working with trait variations (for example, size classes), supports designing UI in terms of a real device size rather than by using intentionally abstract rectangles. Combined with a new mode for quickly introducing variations, it’s easier than ever to see what your UI looks like across multiple devices, orientations, and adaptations like Slide Over and Split View on iPad. (16901225, 23804474, 24012599)</p></li><li class="li"><p>Creating an <code>@IBAction</code> method by control-dragging from Interface Builder to a Swift 3 source file includes an underscore before the <code>sender</code> parameter, causing the corresponding Objective-C selector to match Swift 2 behavior. Converting to Swift 3 syntax modifies <code>@IBAction</code> methods by adding an underscore, preserving connections in existing IB documents. (26120871)</p></li><li class="li"><p>The Notes field in the Identity inspector now has "Comment For Localizer" placeholder text to more clearly indicate that it is included in an XLIFF export. (26802029)</p></li><li class="li"><p>Xcode 8 removes the ability to configure views without constraints with frame varying per size class. Views without constraints may look different after compiling with Xcode 8 when switching size classes at runtime. Going forward, use constraints and autoresizing masks with the device bar to achieve the desired layout. (25894544)</p></li><li class="li"><p>The canvas in Interface Builder renders visual interactions between iOS views as they appear at runtime, including accurate compositing of <code>UIVisualEffectView</code>. Designable views can now visually interact with their subviews. Rendering performance is significantly improved for tvOS documents. (21922006)</p></li><li class="li"><p>Interface Builder supports customizing UI elements for Dark interface style on tvOS and previewing in the assistant editor. This support is enabled by default for new xib and storyboard files; it can be enabled for existing documents by selecting the Uses Trait Variations option in the Identity inspector. (23343849)</p></li><li class="li"><p>Interface Builder supports colors in the Display P3 color space. In the system color panel, select RGB or HSB sliders, click the gear menu to the right of the popup button, and choose Display P3 from the list. (23612133)</p></li><li class="li"><p>The UI for customizing inspector properties for iOS size classes is improved, and defaults to the configuration that is currently active in the canvas. (26123851)</p></li><li class="li"><p>Xcode 8 provides numerous accessibility improvements, including VoiceOver enhancements to the design canvas, inspectors, document outline, and object library. (5306382)</p></li><li class="li"><p>While the canvas is varying for traits (indicated by a blue bottom bar) and has focus, the Delete key uninstalls the selected objects only for the current configuration. If the document outline has focus, or when the canvas is not in varying mode, the Delete key removes the selected objects from the document, affecting all configurations. (26153578)</p></li><li class="li"><p>Color values in Interface Builder documents correctly use color space during rendering and compilation. Earlier versions of Xcode mishandled color spaces saved in iOS and tvOS documents. Xcode 8 converts existing colors in a way that preserves their perceptual appearance on a device, and updates either the color space or component values in the source document as appropriate. (7645087)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW116" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Constraint constants with fractional (non-integer) values can now be configured in Interface Builder. (15963933)</p></li><li class="li"><p>Constraints to a view are now preserved when the view is embedded in a new view, or dragged to within a new superview. (9666331)</p></li><li class="li"><p>Storyboard and xib files can be scrolled while dragging objects or scenes, and during control-dragging to create connections. Dragging to the edge of the canvas activates autoscrolling. (25221374, 25631320)</p></li><li class="li"><p>Interface Builder's design canvas draws correctly when layer-backing is enabled in macOS xib and storyboard documents. This includes canvas decorations such as resize knobs, selection indicators, bounds rectangles, constraints, and segue arrows. (5565950)</p></li><li class="li"><p>Fixed a crash when navigating away from an Interface Builder document that uses custom fonts and designable views. (17237787)</p></li><li class="li"><p><code>NSBox</code> properties that are inapplicable for custom box and separator lines are excluded from inspectors, warnings, and saved documents. This includes a localizable title for separator lines that was unintentionally included in XLIFF output. (5081354, 9939692, 14994467, 23877301) </p></li><li class="li"><p>Using a custom font in <code>UILabel</code>, <code>UITextField</code>, or <code>UITextView</code> with size classes enabled now correctly encodes the font for use at runtime. (18535469)</p></li><li class="li"><p>Xcode records custom font names once per document, rather than once for each use in a document. (18389741)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW117" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>Inspector tooltips in Interface Builder are not available.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW118" title="Localization"></a><h4 class="jump">Localization</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW119" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>For projects with localizations in more than one language, Xcode automatically turns on the static analyzer check for missing localizability. (22807459)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW120" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>XLIFF export no longer includes <code>accessibilityIdentifier</code> strings configured in Interface Builder. (24548071)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW121" title="Logging"></a><h4 class="jump">Logging</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW122" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Logging for simulated key presses includes the glyph representations for modifier keys, as well as the glyph and symbol name for constants starting with <code>XCUIKeyboardKey</code>. (27374182)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW123" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>Unified Logging is now supported for apps uploading to TestFlight and the App Store. (27794355)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW124" title="Metal Support"></a><h4 class="jump">Metal Support</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW125" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>A new target type for Metal libraries enables creating new projects, or new targets in existing projects, for platforms that support Metal. Targets of this type only compile Metal source files and produce Metal libraries. A Metal library produced in this manner can be added to the Copy Bundle Resources build phase of another target to make the Metal content available to that target's products. (17877026)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW126" title="Objective-C and C++"></a><h4 class="jump">Objective-C and C++</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW127" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Objective-C now supports class properties, which interoperate with Swift type properties. They are declared as <code>@property (class) NSString *someStringProperty</code>;, and are never synthesized. (23891898)</p></li><li class="li"><p>C++ now supports the <code>thread_local</code> keyword, which declares thread-local storage (TLS) and supports C++ classes with non-trivial constructors and destructors. (9001553)</p></li><li class="li"><p>Incremental Link-Time Optimization (LTO) has been added and is a major redesign of the existing monolithic LTO mode. Incremental LTO addresses the three main limitations of monolithic LTO by making it parallel, memory lean, and incremental. (22252706)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW128" title="Playgrounds"></a><h4 class="jump">Playgrounds</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW129" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The playground video tag now supports remote URLs. (24886083)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW130" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The first link included in a playground markup comment does not have its hit target reduced to the beginning of the linked text. (24920637)</p></li><li class="li"><p>Live views for iOS playgrounds display retina views on Macs with retina displays. (26945081)</p></li><li class="li"><p>The editor's Add Documentation command is enabled when editing a playground. (27395238)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW131" title="Projects"></a><h4 class="jump">Projects</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW132" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode 8 contains a project template for a cross-platform SpriteKit game. When you create a project from this template, you can choose which platforms should be supported (iOS, macOS, tvOS, watchOS). The resulting project will contain a target for each selected platform and will factor out content that is appropriate to be shared between all platforms. Shared content includes the primary <code>SKScene</code> subclass, sks files, and the main asset catalog. Platform-specific content is created for each supported platform including app delegates, view controllers, and so forth. (26543360)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW133" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>The "Embed Binaries" section of the target editor correctly adds new embedded binaries. (27631378)</p></li><li class="li"><p>Xcode correctly embeds or links frameworks across projects without requiring you to set up a direct reference between the project that produces the framework and the project that embeds or links it. (27631386)</p></li><li class="li"><p>Changes made to projects from outside Xcode (for instance, from Git) do not cause Xcode to select a different active scheme. (16762297)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW134" title="Scripting Support"></a><h4 class="jump">Scripting Support</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW135" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode 8 provides completely rewritten AppleScript support. A new scripting dictionary provides the ability to automate Xcode workflows. New functionality includes, for example, the ability to perform "run" and "test" actions. Some previous functionality, such as manipulating files and groups in a workspace, has been curtailed for enhanced reliability. Open Script Editor.app and select File &gt; Open Dictionary to access the Xcode scripting library.</p><p>Xcode scripts can be used in Automator workflows with the Run Script command. (22819339)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW136" title="Signing Assets"></a><h4 class="jump">Signing Assets</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW137" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The signing system has been rewritten to include a new mode for automatically managing signing assets, in addition to a dedicated manual mode where the profiles for the target must be explicitly selected. When automatically managing signing assets, Xcode will create signing certificates, update app IDs, and create provisioning profiles. For manual mode, only custom created profiles can be selected and Xcode will not modify or create any signing assets.</p><p>Xcode now encodes profiles in the target using the <code>PROVISIONING_PROFILE_SPECIFIER</code> build setting. This setting allows specifying both the team ID and the name or identifier of the profile. (23992778)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW138" title="Simulator"></a><h4 class="jump">Simulator</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW139" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p><code>UIContentSizeCategoryDidChangeNotification</code> is delivered as expected in the iOS 10.0 Simulator runtime. (25303105)</p></li><li class="li"><p><code>SKVideoNode</code> is usable in the iOS and tvOS Simulator Runtimes. (26433285)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW140" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>The GameKit framework is missing from the SDK for the watchOS simulator. However, the framework is present for watchOS devices, so you can still do development of GameKit apps for watchOS on devices. (27899791)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW144" title="Source Control"></a><h4 class="jump">Source Control</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW145" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode now assumes that Git repositories with “core.precomposeunicode” unset or set to false are using macOS canonical decomposition normalization for Unicode filenames. This may cause repositories that have this unset or set to false to have trouble with some Unicode file names if the filename normalization in the repository was done on another platform. (26861162)</p><p>To work around this issue, make sure the configuration for Git repositories has “core.precomposeunicode” set to true. This will be the case for any repository created with the Git tools that ship with Xcode. Only leave it unset or set to false for compatibility with repositories that have Unicode filenames using macOS canonical decomposition normalization.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW141" title="Source Editor"></a><h4 class="jump">Source Editor</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW142" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode 8 adds support for Xcode source editor extensions. Application extensions provide additional commands in the Xcode Editor menu. These extensions can manipulate both text and selections. To create them, use the new Xcode Source Editor Extension target template in the macOS Application Extensions section when creating a project. (23194974)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW143" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>To use the Editor's Comment/Uncomment Selection and Add Documentation commands—as well as other installed Xcode Extensions—on OS X 10.11, launch Xcode and install additional system components, then restart your Mac. (26106213)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW146" title="Swift"></a><h4 class="jump">Swift</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW147" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>The version of Swift 2 (2.3) used in Xcode 8 is very close to the version used in Xcode 7.3.1. However, it has been updated for the newer SDKs, and therefore is not compatible with Swift frameworks compiled in Xcode 7.3.1. Distributing binary Swift frameworks remains unsupported in Xcode 8. (25680392)</p></li><li class="li"><p>For information on migrating from Swift 2 to Swift 3, see the <span class="content_text"><a href="https://swift.org/migration-guide/" class="urlLink" rel="external">Swift Migration Guide.</a></span></p></li><li class="li"><p>When a Swift program traps at runtime due to an unexpected null value, the error message reports the source location of the <code>!</code> operator or implicit unwrapping in the user's source code. (26919123)</p></li><li class="li"><p>Argument labels have been removed from Swift function types. Instead, they are part of the name of a function, subscript, or initializer. Calls to a function or initializer, or uses of a subscript, still require argument labels, as they always have:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func doSomething(x: Int, y: Int) {}<span></span></pre></td></tr><tr><td scope="row"><pre>doSomething(x: 0, y: 0) // argument labels are required<span></span></pre></td></tr></table></div><p>However, unapplied references to functions or initializers no longer carry argument labels. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre> let f = doSomething(x:y:)   // inferred type is now (Int, Int) -&gt; Void<span></span></pre></td></tr></table></div><p>Additionally, explicitly-written function types can no longer carry argument labels, although one can still provide a parameter name for documentation purposes using the <code>_</code> in the argument label position:</p><div class="codesample clear"><table><tr><td scope="row"><pre>typealias CompletionHandler =<span></span></pre></td></tr><tr><td scope="row"><pre>  (token: Token, error: Error?) -&gt; Void  // error: function types cannot have argument labels<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>typealias CompletionHandler =<span></span></pre></td></tr><tr><td scope="row"><pre>  (_ token: Token, _ error: Error?) -&gt; Void  // error: okay: names are for documentation purposes<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0111-remove-arg-label-type-significance.md" class="urlLink" rel="external">SE-0111</a></span>)</p></li><li class="li"><p>Objective-C APIs using <code>id</code> now import into Swift as <code>Any</code> instead of as <code>AnyObject</code>. Similarly, APIs using untyped <code>NSArray</code> and <code>NSDictionary</code> import as <code>[Any]</code> and <code>[AnyHashable: Any]</code>, respectively. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0116-id-as-any.md" class="urlLink" rel="external">SE-0116</a></span>) </p></li><li class="li"><p><code>Any</code> is now accepted as a valid "sender" type for <code>IBAction</code> methods. (27853737)</p></li><li class="li"><p>Since <code>id</code> now imports as <code>Any</code> rather than <code>AnyObject</code>, you may see errors where you were previously performing dynamic lookup on <code>AnyObject</code>. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>guard let fileEnumerator = FileManager.default.enumerator(atPath: path) else {<span></span></pre></td></tr><tr><td scope="row"><pre>  return<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>for fileName in fileEnumerator {<span></span></pre></td></tr><tr><td scope="row"><pre>  if fileName.hasSuffix(".txt") { // error: value of type ‘Element’ (aka ‘Any’) has no member hasSuffix<span></span></pre></td></tr><tr><td scope="row"><pre>   print(fileName)<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>The fix is to either cast to <code>AnyObject</code> explicitly before doing the dynamic lookup, or force cast to a specific object type:</p><div class="codesample clear"><table><tr><td scope="row"><pre>guard let fileEnumerator = FileManager.default.enumerator(atPath: path) else {<span></span></pre></td></tr><tr><td scope="row"><pre>  return<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>for fileName in fileEnumerator {<span></span></pre></td></tr><tr><td scope="row"><pre>  if (fileName as AnyObject).hasSuffix(".txt") {// cast to AnyObject<span></span></pre></td></tr><tr><td scope="row"><pre>   print(fileName)<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(27639935)</p></li><li class="li"><p>Closure parameters are non-escaping by default, rather than explicitly being annotated with <code>@noescape</code>. Use <code>@escaping</code> to indicate that a closure parameter may escape. <code>@autoclosure(escaping)</code> is now written as <code>@autoclosure @escaping</code>. The annotations <code>@noescape</code> and <code>@autoclosure(escaping)</code> are deprecated. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0103-make-noescape-default.md" class="urlLink" rel="external">SE-0103</a></span>) </p></li><li class="li"><p>The <code>@noreturn</code> attribute on function declarations and function types has been removed, in favor of an empty <code>Never</code> type:</p><div class="codesample clear"><table><tr><td scope="row"><pre>@noreturn func fatalError(msg: String) { ... } // old<span></span></pre></td></tr><tr><td scope="row"><pre>func fatalError(msg: String) -&gt; Never { ... }  // new<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>func performOperation&lt;T&gt;(continuation: @noreturn T -&gt; ()) { ... } // old<span></span></pre></td></tr><tr><td scope="row"><pre>func performOperation&lt;T&gt;(continuation: T -&gt; Never) { ... }     // new<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0102-noreturn-bottom-type.md" class="urlLink" rel="external">SE-0102</a></span>)</p></li><li class="li"><p>Xcode imports Objective-C protocol-qualified classes (for example <code>Class &lt;NSCoding&gt;</code>) into Swift as protocol type values (<code>NSCoding.Type</code>). (15101588)</p></li><li class="li"><p>The types <code>UnsafePointer</code>, <code>UnsafeMutablePointer</code>, <code>AutoreleasingUnsafeMutablePointer</code>, <code>OpaquePointer</code>, <code>Selector</code>, and <code>NSZone</code> now represent non-nullable pointers—that is, pointers that are never <code>nil</code>. A nullable pointer is now represented using <code>Optional</code>, for example,<code>UnsafePointer&lt;Int&gt;?</code>.</p><p>For types imported from C, non-object pointers (such as <code>int *</code>) now have their nullability taken into account:</p><ul class="nested"><li class="nested li"><p>A pointer marked as <code>_Nonnull</code>, or within an <code>NS_ASSUME_NONNULL_BEGIN</code>/<code>_END</code> block, is imported as a non-optional value. Example: NSInteger * _Nonnull is imported as <code>UnsafeMutablePointer&lt;Int&gt;</code>.</p></li><li class="nested li"><p>A pointer marked as <code>_Nullable</code> is imported as an optional value. Example: <code>NSInteger * _Nullable</code> is imported as <code>UnsafeMutablePointer&lt;Int&gt;?</code>.</p></li><li class="nested li"><p>A pointer marked as <code>_Null_unspecified</code>, or an unannotated pointer outside of any <code>NS_ASSUME_NONNULL_BEGIN</code>/<code>_END</code> block, is imported as an implicitly-unwrapped optional value. Example: <code>NSInteger * _Null_unspecified</code> is imported as <code>UnsafeMutablePointer&lt;Int&gt;!</code>.</p><p>The Swift standard library has been adjusted to match.</p><p>One possible area of difficulty is passing a nullable pointer to a function that uses C variadics. Swift will not permit this directly, so as a workaround please use the following idiom to pass it as a pointer-sized integer value instead:</p><div class="codesample clear"><table><tr><td scope="row"><pre>Int(bitPattern: nullablePointer)<span></span></pre></td></tr></table></div><p>The "pointee" types of imported pointers (for example, the <code>id</code> in <code>id *</code>) are no longer assumed to always be <code>_Nullable</code> even if annotated otherwise. However, an implicit or explicit annotation of <code>_Null_unspecified</code> on a pointee type is still imported as <code>Optional</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0055-optional-unsafe-pointers.md" class="urlLink" rel="external">SE-0055</a></span>)</p></li></ul></li><li class="li"><p>The "Ref" forms of CF type names have been removed from Swift. For example, use <code>CFString</code> instead of <code>CFStringRef</code>.</p><p>One exception is if there are types named both "Resolved Issues" and "Resolved IssuesRef," where "Resolved IssuesRef" is a Core Foundation type. In this case, both types will continue to be imported as they always have. (16888940)</p></li><li class="li"><p>Condition clauses in <code>if</code>, <code>guard</code>, and <code>while</code> statements use a more regular syntax. Prefix each pattern or optional binding with <code>case</code> or <code>let</code>, respectively, and separate all conditions with “<code>,</code>” instead of “<code>where</code>”. For example, the code previously written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>if let a = a, b = b where a == b {}<span></span></pre></td></tr></table></div><p>is now written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>if let a = a, let b = b, a == b {}<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0099-conditionclauses.md" class="urlLink" rel="external">SE-0099</a></span>) </p></li><li class="li"><p>Nested generic functions can now capture bindings from the environment. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func outer&lt;T&gt;(t: T) -&gt; T {<span></span></pre></td></tr><tr><td scope="row"><pre>  func inner&lt;U&gt;(u: U) -&gt; (T, U) {<span></span></pre></td></tr><tr><td scope="row"><pre>    return (t, u)<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>  return inner(u: (t, t)).0<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(22051279)</p></li><li class="li"><p>Function parameters now have consistent labeling across all function parameters. With this update the first parameter declarations will now match the existing behavior of the second and later parameters.</p><p>Code that was previously written as: </p><div class="codesample clear"><table><tr><td scope="row"><pre>func Resolved Issues(x: Int, y: Int) {}<span></span></pre></td></tr><tr><td scope="row"><pre>Resolved Issues(1, y: 2)<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>func bar(a a: Int, b: Int) {}<span></span></pre></td></tr><tr><td scope="row"><pre>bar(a: 3, b: 4)<span></span></pre></td></tr></table></div><p>should now be written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func Resolved Issues(_ x: Int, y: Int) {}<span></span></pre></td></tr><tr><td scope="row"><pre>Resolved Issues(1, y: 2)<span></span></pre></td></tr><tr><td scope="row"><pre>func bar(a: Int, b: Int) {}<span></span></pre></td></tr><tr><td scope="row"><pre>bar(a: 3, b: 4)<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0046-first-label.md" class="urlLink" rel="external">SE-0046</a></span>)</p></li><li class="li"><p>The Objective-C selectors for the getter or setter of a property can now be referenced with <code>#selector</code>. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let sel1 = #selector(getter: UIView.backgroundColor) // sel1 has type Selector<span></span></pre></td></tr><tr><td scope="row"><pre>let sel2 = #selector(setter: UIView.backgroundColor) // sel2 has type Selector<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0064-property-selectors.md" class="urlLink" rel="external">SE-0064</a></span>)</p></li><li class="li"><p>Collection subtype conversions and dynamic casts now work with protocol types. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>protocol P {}; extension Int: P {}<span></span></pre></td></tr><tr><td scope="row"><pre>var x: [Int] = [1, 2, 3]<span></span></pre></td></tr><tr><td scope="row"><pre>var p: [P] = x<span></span></pre></td></tr><tr><td scope="row"><pre>var x2 = p as! [Int]<span></span></pre></td></tr></table></div></li><li class="li"><p>The <code>hasPrefix</code> and <code>hasSuffix</code> functions now consider the empty string to be a prefix and suffix of all strings. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-2131" class="urlLink" rel="external">SR-2131</a></span>)</p></li><li class="li"><p>The <code>None</code> members of imported <code>NS_OPTIONS</code> option sets are marked as unavailable when they are imported. Use <code>[]</code> to make an empty option set, instead of a <code>None</code> member.</p></li><li class="li"><p>Generic typealiases are now supported. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>typealias StringDictionary&lt;T&gt; = Dictionary&lt;String, T&gt;<span></span></pre></td></tr><tr><td scope="row"><pre>typealias IntFunction&lt;T&gt; = (T) -&gt; Int<span></span></pre></td></tr><tr><td scope="row"><pre>typealias MatchingTriple&lt;T&gt; = (T, T, T)<span></span></pre></td></tr><tr><td scope="row"><pre>typealias BackwardTriple&lt;T1, T2, T3&gt; = (T3, T2, T1)<span></span></pre></td></tr></table></div></li><li class="li"><p>The <code>@noescape</code> attribute has been extended to be a more general type attribute. You can now declare values of <code>@noescape</code> function type. You can now also declare local variables of <code>@noescape</code> type, and use <code>@noescape</code> in <code>typealiases</code>. For example, the following is now valid code:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func apply&lt;T, U&gt;(@noescape f: T -&gt; U,<span></span></pre></td></tr><tr><td scope="row"><pre>           @noescape g: (@noescape T -&gt; U) -&gt; U) -&gt; U {<span></span></pre></td></tr><tr><td scope="row"><pre>  return g(f)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="li"><p>Curried function syntax has been removed, and now produces a compile-time error.</p></li><li class="li"><p>Generic signatures can now contain superclass requirements with generic parameter types. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func f&lt;Resolved Issuesd : Chunks&lt;Meat&gt;, Meat : Molerat&gt;(f: Resolved Issuesd, m: Meat) {}<span></span></pre></td></tr></table></div></li><li class="li"><p>Catch blocks in <code>rethrows</code> functions can now <code>throw</code> errors. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func process(f: () throws -&gt; Int) rethrows -&gt; Int {<span></span></pre></td></tr><tr><td scope="row"><pre>  do {<span></span></pre></td></tr><tr><td scope="row"><pre>    return try f()<span></span></pre></td></tr><tr><td scope="row"><pre>  } catch is SomeError {<span></span></pre></td></tr><tr><td scope="row"><pre>    throw OtherError()<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="li"><p>Throwing closure arguments of a rethrowing function can now be optional. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func executeClosureIfNotNil(closure: (() throws -&gt; Void)?) rethrows {<span></span></pre></td></tr><tr><td scope="row"><pre>  try closure?()<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="li"><p>The <code>FloatingPoint</code> protocol has been expanded to include most IEEE 754 required operations. A number of useful properties have been added to the protocol as well, representing quantities like the largest finite value or the smallest positive normal value (these correspond to the macros such as <code>FLT_MAX </code>defined in C).</p><p>While most of the changes are additive, there are four changes that will impact existing code:</p><ul class="nested"><li class="nested li"><p>The <code>%</code> operator is no longer available for <code>FloatingPoint</code> types. The new method <code>formTruncatingRemainder(dividingBy:)</code> provides the old semantics if they are needed.</p></li><li class="nested li"><p>The static property <code>.NaN</code> has been renamed <code>.nan</code>.</p></li><li class="nested li"><p>The static property <code>.quietNaN</code> was redundant and has been removed. Use <code>.nan</code> instead.</p></li><li class="nested li"><p>The predicate <code>isSignaling</code> has been renamed <code>isSignalingNaN</code>.</p></li></ul><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0067-floating-point-protocols.md" class="urlLink" rel="external">SE-0067</a></span>)</p></li><li class="li"><p>Most keywords are now allowed in member references. This allows the use of members after a dot without backticks. For example, "Resolved Issues.default." (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0071-member-keywords.md" class="urlLink" rel="external">SE-0071</a></span>)</p></li><li class="li"><p>A key-path can now be formed with <code>#keyPath</code>. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>person.valueForKeyPath(#keyPath(Person.bestFriend.lastName))<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0062-objc-keypaths.md" class="urlLink" rel="external">SE-0062</a></span>)</p></li><li class="li"><p>The location of the inout attribute has been moved to after the <code>:</code> and before the parameter type. For example, code previously written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func Resolved Issues(inout x: Int) {<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>should now be written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func Resolved Issues(x: inout Int) {<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0031-adjusting-inout-declarations.md" class="urlLink" rel="external">SE-0031</a></span>)</p></li><li class="li"><p>The <code>#line</code> directive (which resets the logical source location for diagnostics and debug information) has been renamed to <code>#sourceLocation</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0034-disambiguating-line.md" class="urlLink" rel="external">SE-0034</a></span>)</p></li><li class="li"><p>A declaration marked as <code>private</code> can now only be accessed within the lexical scope it is declared in (essentially the enclosing curly braces <code>{}</code>). A <code>private</code> declaration at the top level of a file can be accessed anywhere in that file, as in Swift 2. The access level formerly known as <code>private</code> is now called <code>fileprivate</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0025-scoped-access-level.md" class="urlLink" rel="external">SE-0025</a></span>)</p></li><li class="li"><p>The compiler now provides an error when enum elements are accessed as instance members in instance methods. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>enum Color {<span></span></pre></td></tr><tr><td scope="row"><pre> case red, green, blue<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre> func combine(with color: Color) -&gt; Color {<span></span></pre></td></tr><tr><td scope="row"><pre>  return red<span></span></pre></td></tr><tr><td scope="row"><pre> }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>In Swift 2.2, this is valid code. The correct way to write this in Swift 3 is:</p><div class="codesample clear"><table><tr><td scope="row"><pre>return .red<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0036-enum-dot.md" class="urlLink" rel="external">SE-0036</a></span>) </p></li><li class="li"><p>It is now possible to declare variables in multiple patterns in cases. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0043-declare-variables-in-case-labels-with-multiple-patterns.md" class="urlLink" rel="external">SE-0043</a></span>)</p></li><li class="li"><p>Initializers are now inherited even if the base class or derived class is generic:</p><div class="codesample clear"><table><tr><td scope="row"><pre>class Base&lt;T&gt; {<span></span></pre></td></tr><tr><td scope="row"><pre>  let t: T<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>  init(t: T) {<span></span></pre></td></tr><tr><td scope="row"><pre>    self.t = t<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>class Derived&lt;T&gt; : Base&lt;T&gt; {<span></span></pre></td></tr><tr><td scope="row"><pre>  // init(t: T) is now synthesized to call super.init(t: t)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(17960407)</p></li><li class="li"><p><code>where</code> clauses are now specified after the signature for a declaration but before its body. For example, before:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func anyCommonElements&lt;T : SequenceType, U : SequenceType<span></span></pre></td></tr><tr><td scope="row"><pre>  where T.Generator.Element: Equatable, T.Generator.Element == U.Generator.Element&gt;<span></span></pre></td></tr><tr><td scope="row"><pre>  (lhs: T, _ rhs: U) -&gt; Bool<span></span></pre></td></tr><tr><td scope="row"><pre>{<span></span></pre></td></tr><tr><td scope="row"><pre>  ...<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>and after:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func anyCommonElements&lt;T : SequenceType, U : SequenceType&gt;(lhs: T, _ rhs: U) -&gt; Bool<span></span></pre></td></tr><tr><td scope="row"><pre>  where T.Generator.Element: Equatable, T.Generator.Element == U.Generator.Element<span></span></pre></td></tr><tr><td scope="row"><pre>{<span></span></pre></td></tr><tr><td scope="row"><pre>  ...<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>The old form is still accepted for compatibility, but will eventually be rejected. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0081-move-where-expression.md" class="urlLink" rel="external">SE-0081</a></span>)</p></li><li class="li"><p>The <code>NSError</code> type is bridged to the Swift <code>Error</code> protocol type (formerly called <code>ErrorProtocol</code> in Swift 3 and <code>ErrorType</code> in Swift 2) in Objective-C APIs, much like other Objective-C types are bridged to Swift (for example, <code>NSString</code> being bridged to <code>String</code>). For example, the <code>UIApplicationDelegate</code> method <code>application(_:didFailToRegisterForRemoteNotificationsWithError:)</code> changes from accepting an <code>NSError</code> argument:</p><div class="codesample clear"><table><tr><td scope="row"><pre>  optional func application(_ application: UIApplication,<span></span></pre></td></tr><tr><td scope="row"><pre>  didFailToRegisterForRemoteNotificationsWithError error: NSError)<span></span></pre></td></tr></table></div><p>to accepting an <code>Error</code> argument:</p><div class="codesample clear"><table><tr><td scope="row"><pre>optional func application(_ application: UIApplication,<span></span></pre></td></tr><tr><td scope="row"><pre>  didFailToRegisterForRemoteNotificationsWithError error: Error)<span></span></pre></td></tr></table></div><p>Additionally, error types imported from Cocoa and Cocoa Touch maintain all of the information in the corresponding <code>NSError</code>, so it is no longer necessary to <code>catch let as NSError</code> to extract (for example) the user-info dictionary. Specific error types also contain typed accessors for their common user-info keys. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>  catch let error as CocoaError where error.code == .fileReadNoSuchFileError {<span></span></pre></td></tr><tr><td scope="row"><pre>    print("No such file: \(error.url)")<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr></table></div><p>Swift-defined error types can provide localized error descriptions by adopting the new <code>LocalizedError</code> protocol. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>  extension HomeworkError : LocalizedError {<span></span></pre></td></tr><tr><td scope="row"><pre>    var errorDescription: String? {<span></span></pre></td></tr><tr><td scope="row"><pre>      switch self {<span></span></pre></td></tr><tr><td scope="row"><pre>        case .forgotten: return NSLocalizedString("I forgot it")<span></span></pre></td></tr><tr><td scope="row"><pre>        case .lost: return NSLocalizedString("I lost it”)<span></span></pre></td></tr><tr><td scope="row"><pre>        case .dogAteIt: return NSLocalizedString("The dog ate it”)<span></span></pre></td></tr><tr><td scope="row"><pre>  } }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Similarly, the new <code>RecoverableError</code> and <code>CustomNSError</code> protocols allow additional control over the handling of the error. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0112-nserror-bridging.md" class="urlLink" rel="external">SE-0112</a></span>) </p></li><li class="li"><p>The <code>protocol&lt;...&gt;</code> composition construct has been removed. In its place, an infix type operator <code>&amp;</code> has been introduced.</p><div class="codesample clear"><table><tr><td scope="row"><pre>let a: Resolved Issues &amp; Bar<span></span></pre></td></tr><tr><td scope="row"><pre>let b = value as? A &amp; B &amp; C<span></span></pre></td></tr><tr><td scope="row"><pre>func Resolved Issues&lt;T : Resolved Issues &amp; Bar&gt;(x: T) { … }<span></span></pre></td></tr><tr><td scope="row"><pre>func bar(x: Resolved Issues &amp; Bar) { … }<span></span></pre></td></tr><tr><td scope="row"><pre>typealias G = GenericStruct&lt;Resolved Issues &amp; Bar&gt;<span></span></pre></td></tr></table></div><p>The empty protocol composition, the <code>Any</code> type, was previously defined as being <code>protocol&lt;&gt;</code>. This has been removed from the standard library and <code>Any</code> is now a keyword with the same behavior. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0095-any-as-existential.md" class="urlLink" rel="external">SE-0095</a></span>)</p></li><li class="li"><p>Bridging conversions are no longer implicit. The conversion from a Swift value type to its corresponding object can be forced with <code>as</code>—for example, <code>string as NSString</code>. Any Swift value can also be converted to its boxed <code>id</code> representation with <code>as AnyObject</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0072-eliminate-implicit-bridging-conversions.md" class="urlLink" rel="external">SE-0072</a></span>)</p></li><li class="li"><p>Attributes changed from using <code>=</code> in parameters lists to using <code>:</code>, aligning with function call syntax. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0040-attributecolons.md" class="urlLink" rel="external">SE-0040</a></span>)</p></li><li class="li"><p>The <code>dynamicType</code> keyword has been removed from Swift. In its place a new primitive function <code>type(of:)</code> has been added to the language. Existing code that uses the <code>.dynamicType</code> member to retrieve the type of an expression should migrate to this new primitive. Code that is using <code>.dynamicType</code> in conjunction with <code>sizeof</code> should migrate to the <code>MemoryLayout</code> structure provided by proposal <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0101-standardizing-sizeof-naming.md" class="urlLink" rel="external">SE-0101</a></span>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0096-dynamictype.md" class="urlLink" rel="external">SE-0096</a></span>) </p></li><li class="li"><p>The syntax for adding new operators has changed significantly. The new language model uses a more semantic model based on named precedence groups rather than magic numbers. This only affects declaring new operators such as <code>&gt;&gt;&gt;</code> and not adding new overloads of existing operators such as <code>==</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0077-operator-precedence.md" class="urlLink" rel="external">SE-0077</a></span>)</p></li><li class="li"><p>To clarify the role of <code>*LiteralConvertible</code> protocols, they have been renamed to <code>ExpressibleBy*Literal</code>. No requirements of these protocols have changed. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0115-literal-syntax-protocols.md" class="urlLink" rel="external">SE-0115</a></span>) </p></li><li class="li"><p>Function parameters with default arguments must now be specified in declaration order. A call site must always supply the arguments it provides to a function in their declared order:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func requiredArguments(a: Int, b: Int, c: Int) {}<span></span></pre></td></tr><tr><td scope="row"><pre>func defaultArguments(a: Int = 0, b: Int = 0, c: Int = 0) {}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>requiredArguments(a: 0, b: 1, c: 2)<span></span></pre></td></tr><tr><td scope="row"><pre>requiredArguments(b: 0, a: 1, c: 2) // error<span></span></pre></td></tr><tr><td scope="row"><pre>defaultArguments(a: 0, b: 1, c: 2)<span></span></pre></td></tr><tr><td scope="row"><pre>defaultArguments(b: 0, a: 1, c: 2) // error<span></span></pre></td></tr></table></div><p>Arbitrary labeled parameters with default arguments may still be elided, as long as the specified arguments follow declaration order:</p><div class="codesample clear"><table><tr><td scope="row"><pre>defaultArguments(a: 0) // ok<span></span></pre></td></tr><tr><td scope="row"><pre>defaultArguments(b: 1) // ok<span></span></pre></td></tr><tr><td scope="row"><pre>defaultArguments(c: 2) // ok<span></span></pre></td></tr><tr><td scope="row"><pre>defaultArguments(a: 1, c: 2) // ok<span></span></pre></td></tr><tr><td scope="row"><pre>defaultArguments(b: 1, c: 2) // ok<span></span></pre></td></tr><tr><td scope="row"><pre>defaultArguments(c: 1, b: 2) // error<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0060-defaulted-parameter-order.md" class="urlLink" rel="external">SE-0060</a></span>)</p></li><li class="li"><p><code>let</code> is no longer accepted as a parameter attribute for functions. The compiler provides a fixit to remove it from the function declaration. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0053-remove-let-from-function-parameters.md" class="urlLink" rel="external">SE-0053</a></span>)</p></li><li class="li"><p><code>var</code> is no longer accepted as a parameter attribute for functions. The compiler provides a fixit to create a shadow copy in the function body. For example, the code previously written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func Resolved Issues(var x: Int) {<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>should now be written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func Resolved Issues(x: Int) {<span></span></pre></td></tr><tr><td scope="row"><pre>  var x = x<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0003-remove-var-parameters.md" class="urlLink" rel="external">SE-0003</a></span>)</p></li><li class="li"><p>Classes declared as <code>public</code> can no longer be subclassed outside of their defining module, and methods declared as <code>public</code> can no longer be overridden outside of their defining module. To allow a class to be externally subclassed or a method to be externally overridden, declare them as <code>open</code>, which is a new access level beyond <code>public</code>.</p><p>Imported Objective-C classes and methods are now all imported as <code>open</code> rather than <code>public</code>. Unit tests that import a module using a <code>@testable</code> import will still be allowed to subclass public classes and override public methods. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0117-non-public-subclassable-by-default.md" class="urlLink" rel="external">SE-0117</a></span>) </p></li><li class="li"><p>The <code>domain</code> property of an <code>NSError</code> containing an error thrown from Swift now includes the module name of the type, matching the constant shown in the generated header. (<span class="content_text"><a href="https://bugs.swift.org/browse/SR-700" class="urlLink" rel="external">SR-700</a></span>) </p></li><li class="li"><p>Methods whose names start with <code>init</code> are no longer considered to be part of the Objective-C "init" method family. (25759260)</p></li><li class="li"><p>Slice types now have a <code>base</code> property that allows public read-only access to their base collections. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0093-slice-base.md" class="urlLink" rel="external">SE-0093</a></span>)</p></li><li class="li"><p>File literals in playgrounds have the <code>URL</code> struct type rather than <code>NSURL</code>. (26561852)</p></li><li class="li"><p>The functions <code>sizeof()</code>, <code>strideof()</code>, and <code>alignof()</code> have been removed. Instead, these memory layout properties for a type <code>T</code> are now specified as <code>MemoryLayout&lt;T&gt;.size</code>, <code>MemoryLayout&lt;T&gt;.stride</code>, and <code>MemoryLayout&lt;T&gt;.alignment</code>, respectively.</p><p>The functions <code>sizeofValue()</code>, <code>strideofValue()</code>, and <code>alignofValue()</code> have been renamed <code>MemoryLayout.size(ofValue:)</code>, <code>MemoryLayout.stride(ofValue:)</code>, and <code>MemoryLayout.alignment(ofValue:)</code>.</p><div class="codesample clear"><table><tr><td scope="row"><pre>// Swift 2.3:<span></span></pre></td></tr><tr><td scope="row"><pre>var p = Person()<span></span></pre></td></tr><tr><td scope="row"><pre>sizeofValue(p) // 40<span></span></pre></td></tr><tr><td scope="row"><pre>sizeof(Double.self) // 8<span></span></pre></td></tr><tr><td scope="row"><pre>alignof(Double.self) // 8<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// Swift 3.0:<span></span></pre></td></tr><tr><td scope="row"><pre>var p = Person()<span></span></pre></td></tr><tr><td scope="row"><pre>MemoryLayout.size(ofValue: p) // 40<span></span></pre></td></tr><tr><td scope="row"><pre>MemoryLayout&lt;Double&gt;.size // 8<span></span></pre></td></tr><tr><td scope="row"><pre>MemoryLayout&lt;Double&gt;.alignment // 8<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/725be1e95911e710add21e1ab81860a3bc51b90e/proposals/0136-memory-layout-of-values.md" class="urlLink" rel="external">SE-0136</a></span> and <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0101-standardizing-sizeof-naming.md" class="urlLink" rel="external">SE-0101</a></span>)</p></li><li class="li"><p>The repeating Character and UnicodeScalar forms of String initializers and <code>String.append</code> now must be specified using a <code>repeating</code> String argument. The code previously written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>  let s1 = String(repeating: "x" as Character, count: 10)<span></span></pre></td></tr><tr><td scope="row"><pre>  let s2 = String(repeating: "y" as UnicodeScalar, count: 10)<span></span></pre></td></tr></table></div><p>is now simplified to:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let s1 = String(repeating: "x", count: 10)<span></span></pre></td></tr><tr><td scope="row"><pre>let s2 = String(repeating: "y", count: 10)<span></span></pre></td></tr></table></div><p>The code previously written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>s1.append("x" as UnicodeScalar)<span></span></pre></td></tr></table></div><p>is now simplified to:</p><div class="codesample clear"><table><tr><td scope="row"><pre>s1.append("x")<span></span></pre></td></tr></table></div><p>or can also be written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>s1.append(String(UnicodeScalar("x")))<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0130-string-initializers-cleanup.md" class="urlLink" rel="external">SE-0130</a></span>)</p></li><li class="li"><p>The functions <code>isUniquelyReferenced()</code> and <code>isUniquelyReferencedNonObjC()</code> have been removed. The function <code>isKnownUniquelyReferenced()</code> should be called instead. The class <code>NonObjectiveCBase</code> which classes using <code>isUniquelyReferenced()</code> needed to inherit from was removed.</p><p>The method <code>ManagedBufferPointer.holdsUniqueReference</code> was renamed to <code>ManagedBufferPointer.isUniqueReference</code>.</p><p>The code previously written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>class SwiftKlazz : NonObjectiveCBase {}<span></span></pre></td></tr><tr><td scope="row"><pre>expectTrue(isUniquelyReferenced(SwiftKlazz()))<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>var managedPtr : ManagedBufferPointer = ...<span></span></pre></td></tr><tr><td scope="row"><pre>if !managedPtr.holdsUniqueReference() {<span></span></pre></td></tr><tr><td scope="row"><pre>  print("not unique")<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>should now be written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>class SwiftKlazz {}<span></span></pre></td></tr><tr><td scope="row"><pre>expectTrue(isKnownUniquelyReferenced(SwiftKlazz()))<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>var managedPtr : ManagedBufferPointer = ...<span></span></pre></td></tr><tr><td scope="row"><pre>if !managedPtr.isUniqueReference() {<span></span></pre></td></tr><tr><td scope="row"><pre>  print("not unique")<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0125-remove-nonobjectivecbase.md" class="urlLink" rel="external">SE-0125</a></span>) </p></li><li class="li"><p>An <code>Unsafe[Mutable]RawPointer</code> type has been introduced. It replaces <code>Unsafe[Mutable]Pointer&lt;Void&gt;</code>. Conversion from <code>UnsafePointer&lt;T&gt;</code> to <code>UnsafePointer&lt;U&gt;</code> has been disallowed. <code>Unsafe[Mutable]RawPointer</code> provides an API for untyped memory access, and an API for binding memory to a type. Binding memory allows for safe conversion between pointer types. See <code>bindMemory(to:capacity:)</code>, <code>assumingMemoryBound(to:)</code>, and <code>withMemoryRebound(to:capacity:)</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0107-unsaferawpointer.md" class="urlLink" rel="external">SE-0107</a></span>)</p></li><li class="li"><p>Some UnicodeScalar initializers (ones that are non-failable) changed from non-failable to failable. That is, in case a UnicodeScalar can't be constructed, <code>nil</code> is returned. </p><p>The code previously written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>var string = ""<span></span></pre></td></tr><tr><td scope="row"><pre>let codepoint: UInt32 = 55357 // this is invalid<span></span></pre></td></tr><tr><td scope="row"><pre>let ucode = UnicodeScalar(codepoint) // Program crashes at this point.<span></span></pre></td></tr><tr><td scope="row"><pre>string.append(ucode)<span></span></pre></td></tr></table></div><p>should now be written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>var string = ""<span></span></pre></td></tr><tr><td scope="row"><pre>let codepoint: UInt32 = 55357 // this is invalid<span></span></pre></td></tr><tr><td scope="row"><pre>if let ucode = UnicodeScalar(codepoint) {<span></span></pre></td></tr><tr><td scope="row"><pre>  string.append(ucode)<span></span></pre></td></tr><tr><td scope="row"><pre>} else {<span></span></pre></td></tr><tr><td scope="row"><pre>  // do something else<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0128-unicodescalar-failable-initializer.md" class="urlLink" rel="external">SE-0128</a></span>)</p></li><li class="li"><p>The <code>withUnsafePointer</code> and <code>withUnsafeMutablePointer</code> functions now include a <code>to:</code> argument label. Code using those functions need to add that label.</p><p>The <code>withUnsafePointers</code> and <code>withUnsafeMutablePointers</code> functions (with multiple pointer arguments) have been removed. Replace uses of these functions with nested calls to the single-pointer functions. (See the proposal for an example.)</p><p>The <code>unsafeAddressOf</code> function has been removed. Code using that should be updated to use <code>ObjectIdentifier(x).unsafeAddress</code>.</p><p>The class <code>ManagedProtoBuffer</code> has been removed. References to that class as an explicit type should be renamed to <code>ManagedBuffer</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0127-cleaning-up-stdlib-ptr-buffer.md" class="urlLink" rel="external">SE-0127</a></span>) </p></li><li class="li"><p>The standard library provides a new type <code>AnyHashable</code> for use in heterogenous hashed collections. Untyped <code>NSDictionary</code> and <code>NSSet</code> APIs from Objective-C now import as <code>[AnyHashable: Any]</code> and <code>Set&lt;AnyHashable&gt;</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0131-anyhashable.md" class="urlLink" rel="external">SE-0131</a></span>) </p></li><li class="li"><p><code>Int.init(ObjectIdentifier)</code> and <code>UInt.init(ObjectIdentifier)</code> were changed to require a <code>bitPattern:</code> label. The initializers on <code>Int</code> and <code>UInt</code> accepting an <code>ObjectIdentifier</code> now need to be specified with an explicit <code>bitPattern:</code> label. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let x: ObjectIdentifier = ...<span></span></pre></td></tr></table></div><p>was previously written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let u = UInt(x)<span></span></pre></td></tr><tr><td scope="row"><pre>let i = Int(x)<span></span></pre></td></tr></table></div><p>but should now be written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let u = UInt(bitPattern: x)<span></span></pre></td></tr><tr><td scope="row"><pre>let i = Int(bitPattern: x)<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0124-bitpattern-label-for-int-initializer-objectidentfier.md" class="urlLink" rel="external">SE-0124</a></span>)</p></li><li class="li"><p>The Boolean protocol has been removed. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0109-remove-boolean.md" class="urlLink" rel="external">SE-0109</a></span>) </p></li><li class="li"><p>The following two methods were added to <code>FloatingPoint</code>:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func rounded(_ rule: FloatingPointRoundingRule) -&gt; Self<span></span></pre></td></tr><tr><td scope="row"><pre>mutating func round( _ rule: FloatingPointRoundingRule)<span></span></pre></td></tr></table></div><p>These methods bind the IEEE 754 <code>roundToIntegral</code> operations. They provide the functionality of the C / C++ <code>round()</code>, <code>ceil()</code>, <code>floor()</code>, and <code>trunc()</code> functions and other rounding operations as well.</p><p>As a follow-on to the work of <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0113-rounding-functions-on-floatingpoint.md" class="urlLink" rel="external">SE-0113</a></span> and <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0067-floating-point-protocols.md" class="urlLink" rel="external">SE-0067</a></span>, the following mathematical operations in the <code>Darwin.C</code> and <code>glibc</code> modules now operate on any type conforming to <code>FloatingPoint</code>: <code>fabs</code>, <code>sqrt</code>, <code>fma</code>, <code>remainder</code>, <code>fmod</code>, <code>ceil</code>, <code>floor</code>, <code>round</code>, and <code>trunc</code>. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0113-rounding-functions-on-floatingpoint.md" class="urlLink" rel="external">SE-0113</a></span>) </p></li><li class="li"><p>Operators can now be defined within types or extensions thereof. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>struct Resolved Issues: Equatable {<span></span></pre></td></tr><tr><td scope="row"><pre>  let value: Int<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>  static func ==(lhs: Resolved Issues, rhs: Resolved Issues) -&gt; Bool {<span></span></pre></td></tr><tr><td scope="row"><pre>    return lhs.value == rhs.value<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Such operators must be declared as <code>static</code> (or, within a class, <code>class final</code>), and have the same signature as their global counterparts. As part of this change, operator requirements declared in protocols must also be explicitly declared <code>static</code>:</p><div class="codesample clear"><table><tr><td scope="row"><pre>protocol Equatable {<span></span></pre></td></tr><tr><td scope="row"><pre>  static func ==(lhs: Self, rhs: Self) -&gt; Bool<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Note that the type checker performance optimization described by <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0091-improving-operators-in-protocols.md" class="urlLink" rel="external">SE-0091</a></span> is not yet implemented. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0091-improving-operators-in-protocols.md" class="urlLink" rel="external">SE-0091</a></span>) </p></li><li class="li"><p>The <code>partition</code> method was revised. The collection methods <code>partition()</code> and <code>partition(isOrderedBefore:)</code> have been removed from Swift. They were replaced by the method <code>partition(by:)</code> which takes an unary predicate.</p><p>The code previously written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let p = c.partition()<span></span></pre></td></tr></table></div><p>should now be written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let p = c.first.flatMap({ first in<span></span></pre></td></tr><tr><td scope="row"><pre>  c.partition(by: { $0 &gt;= first })<span></span></pre></td></tr><tr><td scope="row"><pre>}) ?? c.startIndex<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0120-revise-partition-method.md" class="urlLink" rel="external">SE-0120</a></span>) </p></li><li class="li"><p>The functions <code>sizeof()</code>, <code>strideof()</code>, and <code>alignof()</code> have been removed. Instead, these memory layout properties for a type <code>T</code> are now specified as <code>MemoryLayout&lt;T&gt;.size</code>, <code>MemoryLayout&lt;T&gt;.stride</code>, and <code>MemoryLayout&lt;T&gt;.alignment</code>, respectively.</p><p>The functions <code>sizeofValue()</code>, <code>strideofValue()</code>, and <code>alignofValue()</code> have been renamed <code>MemoryLayout.size(ofValue:)</code>, <code>MemoryLayout.stride(ofValue:)</code>, and <code>MemoryLayout.alignment(ofValue:)</code>.</p><div class="codesample clear"><table><tr><td scope="row"><pre>// Swift 2.3:<span></span></pre></td></tr><tr><td scope="row"><pre>var p = Person()<span></span></pre></td></tr><tr><td scope="row"><pre>sizeofValue(p) // 40<span></span></pre></td></tr><tr><td scope="row"><pre>sizeof(Double.self) // 8<span></span></pre></td></tr><tr><td scope="row"><pre>alignof(Double.self) // 8<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// Swift 3.0:<span></span></pre></td></tr><tr><td scope="row"><pre>var p = Person()<span></span></pre></td></tr><tr><td scope="row"><pre>MemoryLayout.size(ofValue: p) // 40<span></span></pre></td></tr><tr><td scope="row"><pre>MemoryLayout&lt;Double&gt;.size // 8<span></span></pre></td></tr><tr><td scope="row"><pre>MemoryLayout&lt;Double&gt;.alignment // 8<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/725be1e95911e710add21e1ab81860a3bc51b90e/proposals/0136-memory-layout-of-values.md" class="urlLink" rel="external">SE-0136</a></span> and <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0101-standardizing-sizeof-naming.md" class="urlLink" rel="external">SE-0101</a></span>)</p></li><li class="li"><p>The <code>Sequence.flatten()</code> and <code>Collection.flatten()</code> methods were renamed to <code>Sequence.joined()</code> and <code>Collection.joined()</code>. For example in Swift 2.3, this can be written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>[[1,2],[3]].flatten()<span></span></pre></td></tr></table></div><p>In Swift 3.0, this should now be written as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>[[1,2],[3]].joined() // [1,2,3]<span></span></pre></td></tr><tr><td scope="row"><pre>[[1,2],[3]].joined(separator: []) // [1,2,3]<span></span></pre></td></tr><tr><td scope="row"><pre>[[1,2],[3]].joined(separator: [0]) // [1,2,0,3]<span></span></pre></td></tr></table></div><p>(<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0133-rename-flatten-to-joined.md" class="urlLink" rel="external">SE-0133</a></span>)</p></li><li class="li"><p><code>Active Compilation Conditions</code> is a new build setting for passing conditional compilation flags to the Swift compiler. Each element of the value of this setting passes to swiftc prefixed with <code>-D</code>, in the same way that elements of <code>Preprocessor Macros</code> pass to clang with the same prefix. (22457329)</p></li><li class="li"><p>Two new build settings have been added to enable Swift compiler options:</p><ul class="nested"><li class="nested li"><p><code>-suppress-warnings (SWIFT_SUPPRESS_WARNINGS)</code></p></li><li class="nested li"><p><code>-warnings-as-errors (SWIFT_TREAT_WARNINGS_AS_ERRORS)</code></p></li></ul><p>These settings are independent of the build settings for the corresponding clang options. (24213154)</p></li><li class="li"><p>The new build setting <code>ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES</code> replaces the <code>EMBEDDED_CONTENT_CONTAINS_SWIFT</code> setting, which has been deprecated. This new setting indicates that Xcode should always embed Swift standard libraries in a target for which it has been set, whether or not the target contains Swift code. A typical scenario for using this setting is when a target directly uses or embeds another product that contains Swift code. (26158130)</p></li><li class="li"><p>The removal of implicit bridging conversions (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0072-eliminate-implicit-bridging-conversions.md" class="urlLink" rel="external">SE-0072</a></span>) means that empty literal arrays and dictionaries no longer implicitly type-check as <code>NSArray</code> or <code>NSDictionary</code>. This behavior was often unintentional; however, when desired, it can be made explicit using <code>[] as NSArray</code> or <code>[:] as NSDictionary</code>. (20119003)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW148" title="Resolved Issues"></a><h5 class="jump">Resolved Issues</h5><ul class="ul"><li class="li"><p>An issue where macros within the OpenGL.GL3 module were not visible in Swift has been resolved. (26731529)</p></li><li class="li"><p>Protocol type values should no longer have ordering issues in generated Objective-C headers. (27746149)</p></li><li class="li"><p>Inside an extension of an Objective-C lightweight generic class, the Swift compiler will no longer print an error stating that uses of an initializer for another generic Objective-C class "access the class's generic parameters." (27796375)</p></li><li class="li"><p>Dictionary and Set literals with <code>AnyHashable</code> keys no longer require manual wrapping.</p><div class="codesample clear"><table><tr><td scope="row"><pre>func doSomething(userInfo: [AnyHashable: Any])<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// This now works<span></span></pre></td></tr><tr><td scope="row"><pre>doSomething(userInfo: ["foo": "Foo", "bar": "Bar"])<span></span></pre></td></tr></table></div><p>(27615802)</p></li><li class="li"><p>In Xcode 8 beta 6, archiving a <code>Bool</code> value converted to <code>NSNumber</code> would produce an integer rather than a Boolean value. This has been fixed. (27897683)</p></li><li class="li"><p>When previous betas of Swift 3 imported option sets, option names with the value 0 were suppressed because they are synonymous with the empty option set, <code>[]</code>. In cases where the names of these constants are significant, those zero-valued constants are now available. For example, when setting the title for the normal state, instead of writing:</p><div class="codesample clear"><table><tr><td scope="row"><pre>button.setTitle("OK", for: [])<span></span></pre></td></tr></table></div><p>You can now write the clearer alternative:</p><div class="codesample clear"><table><tr><td scope="row"><pre>button.setTitle("OK", for: .normal)<span></span></pre></td></tr></table></div><p>(26485596)</p></li><li class="li"><p>Comments are now treated as whitespace when determining whether an operator is prefix, postfix, or binary. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>if /*comment*/!foo { ... }<span></span></pre></td></tr><tr><td scope="row"><pre>1 +/*comment*/2<span></span></pre></td></tr></table></div><p>This also means that comments can no longer appear between a unary operator and its argument.</p><div class="codesample clear"><table><tr><td scope="row"><pre>foo/* comment */! // no longer works<span></span></pre></td></tr></table></div><p>Any parse errors resulting from this change can be resolved by moving the comment outside of the expression. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/545e7bea606f87a7ff4decf656954b0219e037d3/proposals/0037-clarify-comments-and-operators.md" class="urlLink" rel="external">SE-0037</a></span>)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW149" title="Known Issues"></a><h5 class="jump">Known Issues</h5><ul class="ul"><li class="li"><p>When using <code>static</code> in an extension of an Objective-C class, the compiler may produce the error "a declaration cannot be both 'final' and 'dynamic'". This error is a consequence of Swift using <code>dynamic</code> to implement members exposed to Objective-C in extensions, and <code>static</code> being equivalent to <code>class final</code> when used within a class or extension of a class. In some cases, this error will not have correct location information. </p><p>As a workaround, use <code>class</code> instead of <code>static</code> (making the method or property non-final) or add <code>@nonobjc</code> (making the method or property non-dynamic and hiding it from Objective-C). (20512544)</p></li><li class="li"><p>Objective-C lightweight generic classes are now imported as generic types in Swift. Because Objective-C generics are not represented at runtime, there are some limitations on what can be done with them in Swift:</p><ul class="nested"><li class="nested li"><p>If an ObjC generic class is used in a checked <code>as?</code>, <code>as!</code>, or <code>is</code> cast, the generic parameters are not checked at runtime. The cast succeeds if the operand is an instance of the ObjC class, regardless of parameters.</p><div class="codesample clear"><table><tr><td scope="row"><pre>let x = NSFoo&lt;NSNumber&gt;(value: NSNumber(integer: 0))<span></span></pre></td></tr><tr><td scope="row"><pre>let y: AnyObject = x<span></span></pre></td></tr><tr><td scope="row"><pre>let z = y as! NSFoo&lt;NSString&gt; // Succeeds<span></span></pre></td></tr></table></div></li><li class="nested li"><p>Swift subclasses can only inherit an ObjC generic class if its generic parameters are fully specified.</p><div class="codesample clear"><table><tr><td scope="row"><pre> // Error: Can't inherit ObjC generic class with unbound parameter T<span></span></pre></td></tr><tr><td scope="row"><pre>class SwiftFoo1&lt;T&gt;: NSFoo&lt;T&gt; {}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// OK: Can inherit ObjC generic class with specific parameters<span></span></pre></td></tr><tr><td scope="row"><pre>class SwiftFoo2&lt;T&gt;: NSFoo&lt;NSString&gt; {}<span></span></pre></td></tr></table></div></li><li class="nested li"><p>Swift can extend ObjC generic classes, but the extensions cannot be constrained, and definitions inside the extension do not have access to the class's generic parameters.</p><div class="codesample clear"><table><tr><td scope="row"><pre>extension NSFoo {<span></span></pre></td></tr><tr><td scope="row"><pre>  // Error: Can't access generic param T<span></span></pre></td></tr><tr><td scope="row"><pre>  func foo() -&gt; T {<span></span></pre></td></tr><tr><td scope="row"><pre>    return T()<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// Error: extension can't be constrained<span></span></pre></td></tr><tr><td scope="row"><pre>extension NSFoo where T: NSString {<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div></li><li class="nested li"><p>Foundation container classes <code>NS[Mutable]Array</code>, <code>NS[Mutable]Set</code>, and <code>NS[Mutable]Dictionary</code> are still imported as nongeneric classes for the time being. (<span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/7fcba970b88a5de3d302d291dc7bc9dfba0f9399/proposals/0057-importing-objc-generics.md" class="urlLink" rel="external">SE-0057</a></span>)</p></li></ul></li><li class="li"><p>The Swift compiler does not check access correctly for overrides and for members that satisfy protocol requirements. This can lead to spurious diagnostics and even compiler crashes, and can also lead to certain incorrect code being left undiagnosed. This will be fixed in a future version of Swift 3, which may lead to new diagnostics on existing Swift 3 code. </p><p>To work around this issue in the current release, use <code>private</code> for top-level classes instead of <code>fileprivate</code>. To avoid issues in later releases, always make overrides and members that satisfy protocol requirements at least as accessible as their enclosing type, or as accessible as the method being overridden or the requirement being satisfied. (In particular, such members should never be marked <code>private</code>.) (27820665)</p></li><li class="li"><p>If a target containing Swift code depends on Objective-C headers (including in frameworks), and those headers have been changed since the product was built, the LLDB server may fail to load debug info properly for that target. As a workaround, avoid using Run Without Building when headers are out of date. (26845120)</p></li><li class="li"><p>If a <code>private</code> or <code>fileprivate</code> method is declared in an extension of an Objective-C lightweight generic class, the Swift compiler will incorrectly report that a call to that method "accesses the class's generic parameters." For example: </p><div class="codesample clear"><table><tr><td scope="row"><pre>extension GenericObjCClass {<span></span></pre></td></tr><tr><td scope="row"><pre>  private func foo() {}<span></span></pre></td></tr><tr><td scope="row"><pre>  func bar() { foo() }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>As a workaround, avoid declaring methods as <code>private</code> in Objective-C lightweight generic class extensions. (27796182)</p></li><li class="li"><p>Dynamically casting an <code>NSArray</code> to <code>[Any]</code> using <code>as!</code>, <code>as?</code>, or <code>is</code> may fail at runtime with an error message "array element type is not bridged to Objective-C". As a workaround, try casting to <code>[AnyObject]</code> instead. (28033520)</p></li><li class="li"><p>The compiler will crash if an imported Objective-C lightweight generic class is made to conform to a Swift protocol with an associated type bound to one of the class's generic parameters. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>// Objective-C<span></span></pre></td></tr><tr><td scope="row"><pre>@interface Foo&lt;Bar&gt;: NSObject<span></span></pre></td></tr><tr><td scope="row"><pre>@end<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// Swift<span></span></pre></td></tr><tr><td scope="row"><pre>protocol Runcible {<span></span></pre></td></tr><tr><td scope="row"><pre>  associatedtype Spoon<span></span></pre></td></tr><tr><td scope="row"><pre>  var spoon: Spoon { get }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>extension Foo: Runcible {<span></span></pre></td></tr><tr><td scope="row"><pre>  // Bar is the generic parameter to Foo.<span></span></pre></td></tr><tr><td scope="row"><pre>  // Binding it to an associated type causes a crash.<span></span></pre></td></tr><tr><td scope="row"><pre>  typealias Spoon = Bar<span></span></pre></td></tr><tr><td scope="row"><pre>  var getSpoon: Bar { return Bar() }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>To work around this issue, try expressing the protocol conformance with the associated type as <code>AnyObject</code>, or whatever protocol the generic parameter is constrained to. For example, the above extension could be rewritten as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>extension Foo: Runcible {<span></span></pre></td></tr><tr><td scope="row"><pre>  // Use AnyObject instead of Bar as the associated type.<span></span></pre></td></tr><tr><td scope="row"><pre>  typealias Spoon = AnyObject<span></span></pre></td></tr><tr><td scope="row"><pre>  var getSpoon: AnyObject { return Bar() }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(26602097)</p></li><li class="li"><p>Throwing methods that are marked <code>@objc </code>and return a type that is not bridgeable to Objective-C will crash the compiler. To work around this issue, explicit mark the function <code>@nonobjc</code>. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>protocol Widget {<span></span></pre></td></tr><tr><td scope="row"><pre>  func getPartCount() throws -&gt; UInt32<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>class SimpleWidget : NSObject, Widget {<span></span></pre></td></tr><tr><td scope="row"><pre>  @nonobjc func getPartCount() throws -&gt; UInt32 {<span></span></pre></td></tr><tr><td scope="row"><pre>    return 1<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(28035614)</p></li><li class="li"><p>Using a <code>typealias</code> defined in Swift as the argument type for a generic Objective-C class can result in a compiler crash. As a workaround, use the underlying type instead. (27867166)</p></li><li class="li"><p>Operator methods in classes such as <code>==</code> and <code>+</code> must be marked with <code>@nonobjc</code>. (27926415)</p></li><li class="li"><p>Casting values of CF collection types (for example, <code>CFArray</code>) directly to their bridged Swift equivalents (for example, <code>[String]</code>) may fail unexpectedly. As a workaround, adding an intermediate cast to <code>AnyObject</code> or <code>Any</code> may allow the cast to succeed. (25986247)</p></li><li class="li"><p>The Swift compiler may segfault or crash on an assertion failure if a subclass overrides a method that returns an optional struct, enum, or tuple type of its base class to give it a nonoptional return. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>struct X {}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>class Foo {<span></span></pre></td></tr><tr><td scope="row"><pre>  func foo() -&gt; X? { return nil }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>class Bar: Foo {<span></span></pre></td></tr><tr><td scope="row"><pre>  override func foo() -&gt; X { return X() }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>class Bas: Bar {<span></span></pre></td></tr><tr><td scope="row"><pre>  override func foo() -&gt; X { return X() }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>let x = Bar().foo() // Causes compiler to crash<span></span></pre></td></tr></table></div><p>As a workaround, the non-optional form can be declared as a new method:</p><div class="codesample clear"><table><tr><td scope="row"><pre>class Bar: Foo {<span></span></pre></td></tr><tr><td scope="row"><pre>  override func foo() -&gt; X? { return nonOptionalFoo() }<span></span></pre></td></tr><tr><td scope="row"><pre>  func nonOptionalFoo() -&gt; X {<span></span></pre></td></tr><tr><td scope="row"><pre>    return X()<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(23472654)</p></li><li class="li"><p>The code <code>catch ... as AnyObject</code> may get miscompiled, failing to catch errors that can be converted to <code>AnyObject</code>.</p><p>As a workaround, move the <code>AnyObject</code> coercion into the code block:</p><div class="codesample clear"><table><tr><td scope="row"><pre>// Workaround<span></span></pre></td></tr><tr><td scope="row"><pre>do {<span></span></pre></td></tr><tr><td scope="row"><pre>  try something()<span></span></pre></td></tr><tr><td scope="row"><pre>} catch let error {<span></span></pre></td></tr><tr><td scope="row"><pre>  let errorObject = error as AnyObject<span></span></pre></td></tr><tr><td scope="row"><pre>  ...<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(27581060)</p></li><li class="li"><p>Using a string, array, or dictionary literal in a context where a class type is expected will give an incorrect error message and fixit suggestion. For example, the following code will generate a suggestion to write <code>string as! NSCopying</code>, which will not work.</p><div class="codesample clear"><table><tr><td scope="row"><pre>func foo(_ x: NSCopying) {}<span></span></pre></td></tr><tr><td scope="row"><pre>foo("string")<span></span></pre></td></tr></table></div><p>The correct fix is to write: <code>as NSString</code>. (27668917)</p></li><li class="li"><p>The Today extension template has an incorrect protocol method signature when using Swift. If you create a Today extension for macOS or iOS, you'll receive a warning when compiling. This warning states that one of the methods that's meant to satisfy an optional <code>NCWidgetProviding</code> protocol method does not match the protocol method's signature and will not be called. To work around this issue, replace this code:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func widgetPerformUpdate(completionHandler: ((NCUpdateResult) -&gt; Void)) {<span></span></pre></td></tr></table></div><p>with this code:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func widgetPerformUpdate(completionHandler: (@escaping (NCUpdateResult) -&gt; Void)) {<span></span></pre></td></tr></table></div></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW150" title="Toolchains"></a><h4 class="jump">Toolchains</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW151" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode 8 supports switching toolchains (such as those from <span class="content_text"><a href="https://swift.org" class="urlLink" rel="external">swift.org</a></span>), including for Playgrounds execution, without relaunching Xcode. (23135507, 26200406, 27593280, 23287417, 26704661)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW152" title="Xcode Server"></a><h4 class="jump">Xcode Server</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW153" title="New Features"></a><h5 class="jump">New Features</h5><ul class="ul"><li class="li"><p>Xcode Server includes improvements to issue tracking and blame, including more accurate author identification, the ability to track bot configuration changes over time, and the ability to attribute new issues to those changes. (22814617)</p></li><li class="li"><p>You can configure whether upgrade integrations will run when your server is upgraded. (27135245)</p></li></ul></section></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW216" title="Xcode 7"></a><h2 class="jump">Xcode 7</h2><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW217" title="Xcode 7.3.1"></a><h3 class="jump">Xcode 7.3.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW218" title="Compatibility"></a><h4 class="jump">Compatibility</h4><ul class="simple"><li><p>Xcode 7.3.1 requires a Mac running OS X 10.11 or later.</p></li><li><p>Xcode 7.3.1 includes SDKs for iOS 9.3, watchOS 2.2, OS X version 10.11.4, and tvOS 9.2.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW219" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW220" title="Provisioning"></a><h5 class="jump">Provisioning</h5><ul class="ul"><li class="li"><p>Fixed the issue where disabling a capability in the Xcode editor would leave the associated entitlement still enabled in the app. You may need to re-download provisioning profiles with the updated capabilities list after disabling a capability.</p><p>Xcode no longer copies most entitlements from the provisioning profile into the app's code signature at build time. Entitlements for Wallet, GameCenter (for OS X), Data Protection, and Push notifications are still copied from the profile. All other entitlements should be declared using the Capabilities tab in the Xcode project editor. (24771364)</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW221" title="Note"></a><p><strong>Note:</strong>&nbsp;If your app configuration is not yet compatible with the corrected entitlements behavior you can temporarily disable the new behavior using:</p><p><code>defaults write com.apple.dt.Xcode WantsExtraKeysFor25642247 -bool NO</code></p><p></p></aside></div></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW222" title="Code Completion"></a><h5 class="jump">Code Completion</h5><ul class="ul"><li class="li"><p>Code completion shows the full title in the code completion pop-over. (25530060)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW223" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>Fixed performance issue when opening storyboards or xib files with a large number of constraints. (25314053)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW224" title="Localization"></a><h5 class="jump">Localization</h5><ul class="ul"><li class="li"><p>Fixed an issue that caused Xcode to crash after importing a localization. (25395822)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW225" title="Build System"></a><h5 class="jump">Build System</h5><ul class="ul"><li class="li"><p>The Enable Clang Module Debugging build setting has been removed in this release, which may cause slower build times and larger debug information. This feature is intended to reduce the size of debug information. Temporarily removing this setting reduces Xcode crashes and problems with incomplete information in the variables view. (25535528)</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW226" title="Note"></a><p><strong>Note:</strong>&nbsp;The Enable Clang Module Debugging setting had been enabled by default. If you had previously disabled it, it now appears as a user-defined build setting named <code>CLANG_ENABLE_MODULE_DEBUGGING</code>, which can be removed. </p><p></p></aside></div></li><li class="li"><p>Fixed a bug where a Swift command-line tool target in which <code>-ObjC</code> is passed to the linker would fail to link when built. (25447991)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW227" title="Debugger"></a><h5 class="jump">Debugger</h5><ul class="ul"><li class="li"><p>Fixed an issue related to <code>NSSegmentedControls</code> that caused the view debugger to come up blank. (25388091)</p></li><li class="li"><p>A fix to the LLDB Python interpreter allows it to correctly perform I/O within Xcode, enabling the <code>script</code> command to work as expected. Printed output from Python scripts appears in the Xcode debug console. (25448007)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW228" title="Source Control Management"></a><h5 class="jump">Source Control Management</h5><ul class="ul"><li class="li"><p>Git has been updated to version 2.7.4 in order to improve security. (25181743)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW229" title="Archives Organizer"></a><h5 class="jump">Archives Organizer</h5><ul class="ul"><li class="li"><p>Clicking Download dSYMs in the Archives Organizer correctly downloads the dSYMs for application versions uploaded with bitcode. (25430147)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW230" title="Swift"></a><h5 class="jump">Swift</h5><ul class="ul"><li class="li"><p>Swift expressions evaluated in closures with a <code>weak self</code> capture no longer crash Xcode when debugging. (25448537)</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW231" title="Note"></a><p><strong>Note:</strong>&nbsp;Inside such closures, the value of <code>self</code> cannot be used in debugger expressions. Assigning <code>self</code> to another variable within the original closure source enables the value to be referenced in expressions.</p><p></p></aside></div></li><li class="li"><p>A Swift compiler leak when using <code>try?</code> has been fixed. For additional information, see <span class="content_text"><a href="https://bugs.swift.org/browse/SR-919" class="urlLink" rel="external">Swift Report: SR-919</a></span>. (25388323)</p></li><li class="li"><p>The domain of an <code>@objc</code> enum declared in Swift as an <code>ErrorType</code> is now defined consistently in Swift and Objective-C. For additional information, see <span class="content_text"><a href="https://bugs.swift.org/browse/SR-700" class="urlLink" rel="external">Swift Report: SR-700</a></span>. (25418435)</p></li><li class="li"><p>Fixed a class initialization crash that occurred when the first field of a class is a <code>struct</code> with no members or an <code>enum</code> with a single case. (25314388)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW232" title="Deprecations and Removals Notice"></a><h4 class="jump">Deprecations and Removals Notice</h4><ul class="ul"><li class="li"><p>OS X 10.11 is the last major release of OS X that supports the previously deprecated garbage collection runtime.</p><p>Applications or features that depend upon garbage collection may not function properly or may fail to launch when the runtime is removed. Developers should use Automatic Reference Counting (ARC) or manual retain/release for memory management instead.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW233" title="Xcode 7.3"></a><h3 class="jump">Xcode 7.3</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW234" title="Compatibility"></a><h4 class="jump">Compatibility</h4><ul class="simple"><li><p>Xcode 7.3 requires a Mac running OS X 10.11 or later.</p></li><li><p>Xcode 7.3 includes SDKs for iOS 9.3, watchOS 2.2, OS X version 10.11.4, and tvOS 9.2.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW235" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW236" title="Playgrounds"></a><h5 class="jump">Playgrounds</h5><ul class="ul"><li class="li"><p>Live views in iOS and OS X playgrounds support user interaction. (22418838)</p></li><li class="li"><p>Playgrounds rich comments are enhanced to support inline video display. Video tags support declaring a video file to use, as well as options enabling you to supply alternate text, a customized poster frame, and specifications for width and height. For information about using inline video, see <span class="content_text"><a href="../../../../documentation/Xcode/Reference/xcode_markup_formatting_ref/InlineVideo.html#//apple_ref/doc/uid/TP40016497-CH98" data-renderer-version="2" target="_self">Videos</a></span> in the <em><a href="../../../../documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html#//apple_ref/doc/uid/TP40016497" data-renderer-version="2" target="_self">Markup Formatting Reference</a></em>. (23114189)</p></li><li class="li"><p><code>XCPlaygroundPage.captureValue(_:withIdentifier:)</code> has been deprecated. (24293262)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW237" title="Editor"></a><h5 class="jump">Editor</h5><ul class="ul"><li class="li"><p>Code completion enhancements in the Xcode source editor help you enter symbols, methods, and property names with less typing. Code completion now provides more intelligent suggestions by using partial matches and the first letter of each word, in addition to prefix matching.</p><p></p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW238" title="Static Analyzer"></a><h5 class="jump">Static Analyzer</h5><ul class="ul"><li class="li"><p>The static analyzer checks for missing localizability. This check is off by default and can be enabled by selecting <code>Yes</code> for “Missing localizability” in the “Static Analyzer – Generic Issues” build settings. (23414217)</p></li><li class="li"><p>The static analyzer checks for misuses of nonnull type qualifiers. This check is set to <code>On</code> by default for new Xcode projects and is set to <code>Off</code> by default for existing Xcode projects. It can be enabled by selecting <code>Yes</code> for  “Misuse of ‘nonnull’” in the “Static Analyzer - General Issues” section of the target build settings. (19003620) <em>- updated</em></p></li><li class="li"><p>The static analyzer checks for common misuses of Objective-C generics. (21412472)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW239" title="Alternative Toolchain Support"></a><h5 class="jump">Alternative Toolchain Support</h5><p>Xcode supports using alternative toolchains, such as toolchains downloaded from <span class="content_text"><a href="https://swift.org" class="urlLink" rel="external">Swift.org</a></span>. When using an alternative toolchain, Xcode indexes, builds, and debugs with the alternative toolchain's tools instead of the default tools. Alternative toolchains must be manually downloaded and installed into <code>/Library/Developer/Toolchains/</code> or <code>~/Library/Developer/Toolchains/</code> to be recognized by Xcode.</p><p>New toolchain features in Xcode include:</p><ul class="ul"><li class="li"><p>The Components pane in Xcode preferences displays installed toolchains in addition to simulators and documentation.</p></li><li class="li"><p>To activate an installed toolchain, or reactivate the default toolchain, select the desired toolchain in the Toolchains pane of Components preferences. You can also choose a toolchain from the Xcode &gt; Toolchains menu.</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW240" title="Note"></a><p><strong>Note:</strong>&nbsp;The Xcode &gt; Toolchains menu, and the Toolchains pane are only available in Xcode after you have installed alternative toolchains. </p><p>Xcode must be relaunched after switching toolchains.</p><p></p></aside></div></li><li class="li"><p>An activated toolchain remains active across Xcode launches for all of your projects until you switch toolchains again.</p></li><li class="li"><p>Xcode displays an active toolchain indicator in the workspace window activity view when an alternative toolchain is active. Clicking this indicator opens the Toolchains pane in Components preferences.</p></li><li class="li"><p>Control-click on an installed toolchain in the Toolchains pane of Components preferences to verify its signature, reveal it in the Finder, or move it to the Trash.</p></li><li class="li"><p>Xcode Server bots can be configured to use toolchains installed in <code>/Library/Developer/Toolchains/</code>.</p></li></ul><p>Restrictions that apply when using downloaded toolchains:</p><ul class="ul"><li class="li"><p>The Swift code migrator only works when using the default toolchain.</p></li><li class="li"><p>Playgrounds only work when using the default toolchain.</p></li><li class="li"><p>Only apps built with the default toolchain may be submitted to the App Store.</p></li><li class="li"><p>Activating an alternative toolchain affects the Xcode IDE only. </p><p>To use an alternative toolchain with command-line tools, use <code>xcrun --toolchain swift</code> and <code>xcodebuild TOOLCHAINS=swift</code>. You can provide either the abbreviated or the full identifier for the toolchain, for example, <code>xcrun --toolchain swift</code> or <code>xcrun --toolchain org.swift.20151231a</code>.</p></li><li class="li"><p>Instruments may be unable to demangle certain Swift symbols or track memory usage using the Allocations instrument if the active toolchain includes changes to Swift’s mangling scheme or memory allocation runtime.</p></li></ul><p>(23910267)</p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW241" title="Linker"></a><h5 class="jump">Linker</h5><ul class="ul"><li class="li"><p>The Apple private frameworks have been removed from the iOS, watchOS, and tvOS SDKs. If your application fails to link,  make sure that you are not using any private frameworks. The use of private frameworks is an unsupported configuration and applications that use non-public APIs will be rejected by the App Store - see <span class="content_text"><a href="https://developer.apple.com/app-store/review/guidelines/#functionality" class="urlLink" rel="external">App Store Guideline 2.5</a></span>. (22330301)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW242" title="Simulator"></a><h5 class="jump">Simulator</h5><ul class="ul"><li class="li"><p>Simulator.app supports delivering touch pressure to iOS and watchOS by using a Force Touch trackpad.</p><p>Legacy support for setting force touch pressure in the watchOS simulator (for example, Shift-Command-2) is deprecated and will be removed in a future release. (24853602)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW243" title="Debugger"></a><h5 class="jump">Debugger</h5><ul class="ul"><li class="li"><p>Constraint badges in the view debugger present values as ratios for better readability when applicable. (22535224)</p></li><li class="li"><p>The view debugger inspector shows referenced views, attributes, and values for a selected constraint. (22266966)</p></li><li class="li"><p>The view debugger shows <code>NSWindow</code> size information in the inspector. (18284986)</p></li><li class="li"><p>The view debugger has additional options for the assistant editor. The implementation file of data sources, delegates, and the target of controls can be viewed side by side with the 3D canvas of app views. (15777861)</p></li><li class="li"><p>Improved 3D rotation behavior in the view debugger. (18313502)</p></li><li class="li"><p>When inspecting a view in the debugger, objects with properties whose values represent classes such as Target, Delegate, and Data Source show a navigational arrow in the inspector. Click the arrow to open the implementation file of that class. Pressing the Option key while clicking performs the requested navigation in the assistant editor, instead of replacing the contents of the view debugger canvas. (15884626)</p></li><li class="li"><p>GPU frame debugger supports shader profiling for OpenGL ES apps using secondary contexts for resource loading. (19538945)</p></li><li class="li"><p>Address sanitizer no longer checks for C++ container overflows by default. </p><p>To perform this check requires the entire application to be built with Address Sanitizer otherwise it may report false positives. To turn this check on, set “Enable C++ Container Overflow Checks for Address Sanitizer” in your target’s build settings to <code>Yes</code>. (24515599)</p></li><li class="li"><p>Stepping performance has been improved when connected to devices over slower communication channels. This improvement is most noticeable when debugging code running on an Apple Watch. (22509498)</p></li><li class="li"><p>When using LLDB, Objective-C expression evaluation implicitly imports all modules that were imported in the source context where execution takes place in order to provide a much higher fidelity debugging experience.</p><p>In most cases, this change eliminates the need to manually import modules while debugging. For example,  using <code>expr — @import UIKit</code>—commonly used to ensure that SDK declarations were available—is no longer necessary. (11609847)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW244" title="Debug Navigator"></a><h5 class="jump">Debug Navigator</h5><ul class="ul"><li class="li"><p>Filtering in the navigator has been enhanced, allowing it to disclose the child items of matches. (8094288)</p></li><li class="li"><p>A contextual menu for items selected in the Views mode of the debug navigator and the canvas allows you four new options:</p><ul class="simple-spaceabove"><li><p>Print the description of an object.</p></li><li><p>Focus on a view’s subtree.</p></li><li><p>View constraints on an object.</p></li><li><p>Hide views obscuring or obscured by the selected view.</p></li></ul><p>(20455506)</p></li><li class="li"><p>The Views mode of the debug navigator allows you to filter for the address, label, title, and superclass of a view. (23095363)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW245" title="Build System"></a><h5 class="jump">Build System</h5><ul class="ul"><li class="li"><p>WatchOS schemes  show new icons when the scheme is configured to run a glance, notification, or complication, making it easier to see at a glance which scheme you have selected. (24694468)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW246" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Enterprise developers can create Developer ID certificates using the Accounts preference pane in Xcode. (22550089)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW247" title="Swift"></a><h5 class="jump">Swift</h5><ul class="ul"><li class="li"><p>You can guard statements and declarations with a new <code>#if swift(&gt;=x.y)</code> build configuration: if the Swift language version is at least “<code>x.y</code>”, code in the active branch will compile. Code in the inactive branches won’t be parsed or emit syntax diagnostics, so you can mix source code for different versions of Swift in the same file.</p><p>Example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>#if swift(&gt;=2.2)<span></span></pre></td></tr><tr><td scope="row"><pre>  print(“Hello!”)<span></span></pre></td></tr><tr><td scope="row"><pre>#elseif swift(1.0)<span></span></pre></td></tr><tr><td scope="row"><pre>  println(“Hello!”)<span></span></pre></td></tr><tr><td scope="row"><pre>#else<span></span></pre></td></tr><tr><td scope="row"><pre>  This code will not parse or emit diagnostics<span></span></pre></td></tr><tr><td scope="row"><pre>#endif<span></span></pre></td></tr></table></div><p>For more information, see <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0020-if-swift-version.md" class="urlLink" rel="external">Swift Evolution proposal SE-0020</a></span>. (19823607)</p></li><li class="li"><p>All slice types have <code>removeFirst()</code> and <code>removeLast()</code> methods. Additionally, <code>ArraySlice.removeFirst()</code> preserves element indices. (22536664)</p></li><li class="li"><p>Anonymous structs from C are imported as nested struct types in Swift. (21683348)</p></li><li class="li"><p>Three new doc comment fields allow Swift users to cooperate with code completion engine to deliver more effective code completion results:</p><ul class="simple-spaceabove"><li><p><code>- keyword:</code> specifies concepts that are not fully manifested in declaration names.</p></li><li><p><code>- recommended:</code> indicates other declarations are preferred to the one decorated.</p></li><li><p><code>- recommendedover:</code> indicates the decorated declaration is preferred to those declarations whose names are specified. </p></li></ul><p>(23101030)</p></li><li class="li"><p>Inside a class, a designated initializer that is either failable (<code>init?()</code>) or throwing (<code>init() throws</code>) is allowed to exit before initializing all stored properties and calling <code>super.init()</code>. This behavior makes designated initializers more consistent with convenience initializers. Convenience initializers can also fail before performing a <code>self.init()</code> delegation. (18216578)</p></li><li class="li"><p>Curried function syntax has been deprecated, and is slated to be removed in Swift 3. (23364870)</p></li><li class="li"><p>The <code>++</code> and <code>--</code> operators have been deprecated and are slated to be removed in Swift 3.0. As a replacement, use <code>x += 1</code> on integer or floating point types and <code>x = x.successor()</code> on Index types. (23708702)</p></li><li class="li"><p>Associated types in protocols can be specified with a new <code>associatedtype</code> declaration, to replace the use of <code>typealias</code>:</p><div class="codesample clear"><table><tr><td scope="row"><pre>protocol P {<span></span></pre></td></tr><tr><td scope="row"><pre>  associatedtype Ty<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>The <code>typealias</code> keyword is still allowed in Swift 2.2, although it is deprecated and produces a warning. This warning will become an error in Swift 3.</p><p>For more information, see <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md" class="urlLink" rel="external">Swift Evolution proposal SE-0011</a></span>. (24159196)</p></li><li class="li"><p>When referencing a function or initializer, one can provide the complete name, including argument labels. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let fn1 = someView.insertSubview(_:at:)<span></span></pre></td></tr><tr><td scope="row"><pre>let fn2 = someView.insertSubview(_:aboveSubview:)<span></span></pre></td></tr><tr><td scope="row"><pre>let buttonFactory = UIButton.init(type:)<span></span></pre></td></tr></table></div><p>For more information, see <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0021-generalized-naming.md" class="urlLink" rel="external">Swift Evolution proposal SE-0021</a></span>. (24270055)</p></li><li class="li"><p>New <code>#file</code>, <code>#line</code>, <code>#column</code>, and <code>#function</code> expressions replace the existing <code>__FILE__</code>, <code>__LINE__</code>, <code>__COLUMN__</code>, and <code>__FUNCTION__</code> symbols.  The <code>__FILE__</code>-style symbols have been deprecated, and will be removed in Swift 3.  </p><p>For more information, see <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0028-modernizing-debug-identifiers.md" class="urlLink" rel="external">Swift Evolution proposal SE-0028</a></span>. (24637902)</p></li><li class="li"><p>Global <code>anyGenerator()</code> functions have been changed into initializers on <code>AnyGenerator</code>, in order to help make the API more intuitive and idiomatic. The <code>anyGenerator()</code> functions have been deprecated in Swift 2.2 and will be removed in Swift 3. (22883059)</p></li><li class="li"><p>The <code>@objc(SomeName)</code> attribute is supported on enums and enum cases to rename the generated Objective-C declaration. (21930334)</p></li><li class="li"><p>The Objective-C selector of a Swift method can be determined directly with the <code>#selector</code> expression, for example:</p><p><code>  let sel = #selector(insertSubview(_:aboveSubview:)) // sel has type Selector</code></p><p>Along with this change, the use of string literals as selectors has been deprecated, for example:</p><p><code>  let sel: Selector = "insertSubview:aboveSubview:"</code></p><p>Generally, such string literals should be replaced with uses of <code>#selector</code>, and the compiler provides fix-its that use <code>#selector</code>. In cases where this is not possible (for instance, when referring to the getter of a property), one can still directly construct selectors. For example:</p><p><code>  let sel = Selector("propertyName")</code></p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW248" title="Note"></a><p><strong>Note:</strong>&nbsp;The compiler is checking the string literals used to construct Selectors to ensure that they are well-formed Objective-C selectors and that there is an <code>@objc</code> method with that selector.</p><p></p></aside></div><p>For more information, see <span class="content_text"><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0022-objc-selectors.md" class="urlLink" rel="external">Swift Evolution proposal SE-0022</a></span>. (19954874)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW249" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW250" title="Swift"></a><h5 class="jump">Swift</h5><ul class="ul"><li class="li"><p>Swift 2.1 had an issue where targets with large numbers of files would fail to compile under whole-module optimization. This has been resolved. (23878192)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW251" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>Creating connections via control-drag between multiple displays has been fixed. (14345464)</p></li><li class="li"><p><code>UITableViewCell</code> objects that extend below the bounds of a <code>UITableView</code> draw correctly when scrolled. (23242098)</p></li><li class="li"><p>Fixed the iOS storyboard compilation failures caused by the top and bottom layout guides that were added to the top level of a scene. These layout guides are now removed when opening a document with Interface Builder. (23348852)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW252" title="Code Signing"></a><h5 class="jump">Code Signing</h5><ul class="ul"><li class="li"><p>Fixed an issue with running an app signed by a free provisioning team. (19748857)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW253" title="Build System"></a><h5 class="jump">Build System</h5><ul class="ul"><li class="li"><p>Product references in the Xcode structure navigator respect the active run destination. For example, if a simulator run destination is selected, then the resolved path for the application product reference becomes the simulator binary path. (9178537)</p></li><li class="li"><p>Resolved: Using <code>xcodebuild build -scheme -sdk</code> with a Simulator SDK builds and does not display an “Unsupported architecture” error. (22993940)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW254" title="Debugger"></a><h5 class="jump">Debugger</h5><ul class="ul"><li class="li"><p>The Swift debugger no longer crashes when stopping in code that depends on a Swift library or framework that has been distributed in binary form. (22492040)</p></li><li class="li"><p>The option to suppress view debugging has been removed from the Options pane in the Run scheme. Developers can still debug views using the "Debug View Hierarchy" button in the debug bar. (22636367)</p></li><li class="li"><p>The view debugger inspector now correctly shows all attribute values for Swift projects. (22472665)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW255" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>In FileMerge, resolved an issue that made it hard to see the modified character background color. (24076916)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW256" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW257" title="Swift"></a><h5 class="jump">Swift</h5><ul class="ul"><li class="li"><p>If a type <code>Inner</code> is declared within another type <code>Outer</code>, and then <code>Inner</code> is referred to from another file in the same module, the Swift compiler may crash during the Merging Swift Module build step.</p><p>Compile using Whole Module Optimization or avoid nesting types. (22858834)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW258" title="Playgrounds"></a><h5 class="jump">Playgrounds</h5><ul class="ul"><li class="li"><p>The hit target of the first link included in a playground markup comment is limited to the very start of the linked text; the hit target may be as small as a single character. </p><p>Subsequent links in the markup comment are not affected. (24920637)</p></li><li class="li"><p>The first line of a single-line style Swift documentation comment (a code line prefixed with “<code>///</code>”) is ignored by Quick Help if the declaration is directly preceded by a multiline-style documentation comment that is not associated with a symbol.</p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>/**<span></span></pre></td></tr><tr><td scope="row"><pre>An unattached comment<span></span></pre></td></tr><tr><td scope="row"><pre>*/<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>/// First line<span></span></pre></td></tr><tr><td scope="row"><pre>/// Second line<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>func test() { }<span></span></pre></td></tr></table></div><p>In this example, only <code>Second line</code> appears as part of the abstract for <code>test()</code>. (25134233)</p></li><li class="li"><p>Block quotes in playground markup comments, delimited by prefixing a line with “<code>&gt;</code>”, are implicitly rendered as “Note” callouts. (25011787)</p></li><li class="li"><p>Code blocks in playground markup comments, delimited by prefixing each line with a minimum of four spaces, are implicitly rendered as “Example” callouts. (25012454)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW259" title="Build System"></a><h5 class="jump">Build System</h5><ul class="ul"><li class="li"><p>The build system does not have full support for using frameworks which define modules while using the <code>ALWAYS_SEARCH_USER_PATHS = YES</code> build setting. The build system warns about this situation, and recommends disabling <code>ALWAYS_SEARCH_USER_PATHS</code>.</p><p>While <code>ALWAYS_SEARCH_USER_PATHS</code> defaults to <code><!--a  -->YES<!--/a--></code> if never defined, the default for new projects has been <code><!--a  -->NO<!--/a--></code> for several major releases, and the behavior of <code>ALWAYS_SEARCH_USER_PATHS = YES</code> is considered undesirable. Projects should attempt to migrate to using <code>ALWAYS_SEARCH_USER_PATHS = NO</code> exclusively where possible. (24248838)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW260" title="Simulator"></a><h5 class="jump">Simulator</h5><ul class="ul"><li class="li"><p>When attempting to build and run from within Xcode, you may encounter an error message that states “<code>DTAssetProviderService</code> could not start <code>DTXConnection</code> with simulator.”</p><p>Launch Simulator.app first and boot your target device before selecting build and run from within Xcode. (25311561) <em>- updated</em></p></li><li class="li"><p>Testing in the iOS 9.3, tvOS 9.2, or watchOS 2.2 simulator runtimes using <code>-[UIDevice identifierForVendor]</code> may return unreliable results. (25342936) <em>- updated</em></p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW261" title="Debugger"></a><h5 class="jump">Debugger</h5><ul class="ul"><li class="li"><p>The LLDB Python interpreter is not able to perform console I/O within Xcode. As a result, the <code>script</code> command hangs when it would normally prompt for input and printed output from Python scripts does not appear in the Xcode debug console. (24877720)</p></li><li class="li"><p>Debugging can hang on launch if an <code>.lldbinit</code> file is present that tries to call <code>quit</code> in Python code during debugger initialization. (24360903)</p></li><li class="li"><p>Simple Objective-C/C++/C expressions containing the right-shift (<code>&gt;&gt;</code>) operator can cause Xcode to crash when entered in the debugger console.</p><p>Ensure that potentially problematic expressions contain at least one function call. For example, instead of entering <code>p $0 &gt;&gt; 3</code> use <code>p printf(“”); $0 &gt;&gt; 3</code>. (24988475)</p></li><li class="li"><p>Debugging app extensions or watch apps in Simulator may cause Xcode to hang.</p><p>Keep the simulator application(s) open during your development session. If the issue occurs, restart both Xcode and the simulator application(s). (25338888) <em>- updated</em></p></li><li class="li"><p>View debugging can fail when auto layout is not used due to an unhandled assertion in an underlying system framework. (25311044) <em>- updated</em></p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW262" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Xcode may present pre-iOS 9.0 iPhones as valid run destinations for a WatchKit 2 application when the project includes both WatchKit 1 and WatchKit 2 targets. If you select this run destination and launch, the WatchKit 1 app runs instead of the WatchKit 2 app.</p><p>Ignore the destination for pre-iOS 9.0 iPhones. Use an iPhone with iOS 9.0 or greater to develop and test your WatchKit 2 application. (24900924)</p></li><li class="li"><p>SpriteKit scenes may appear distorted on OS X if the <code>SKView</code> instance doesn’t have a layer as its backing store.</p><p>Set <code>wantsLayer = true</code> on instances of <code>SKView</code> that have been created programmatically. (25554503) <em>- updated</em></p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW263" title="Deprecations and Removals Notice"></a><h4 class="jump">Deprecations and Removals Notice</h4><ul class="ul"><li class="li"><p>OS X 10.11 is the last major release of OS X that supports the previously deprecated garbage collection runtime.</p><p>Applications or features that depend upon garbage collection may not function properly or may fail to launch when the runtime is removed. Developers should use Automatic Reference Counting (ARC) or manual retain/release for memory management instead.</p></li><li class="li"><p>Apple private frameworks have been removed from the iOS, watchOS, and tvOS SDKs.</p><p>If your app fails to link, make sure that you are not using any private frameworks. The use of private frameworks is an unsupported configuration and apps that use non-public APIs will be rejected by the App Store. For details, see <span class="content_text"><a href="https://developer.apple.com/app-store/review/guidelines/#functionality" class="urlLink" rel="external">App Store Guideline 2.5</a></span>.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW264" title="Xcode 7.2.1"></a><h3 class="jump">Xcode 7.2.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW265" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW266" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>Fixed the crash occurring when documents have location-based Auto Layout constraints with a <code>nil</code> second item. (24173653)</p></li><li class="li"><p><code>UITableViewCell</code> objects that extend below the bounds of a <code>UITableView</code> draw correctly when scrolled. (24173743)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW267" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>Fixed the problem where <code>xcodebuild test</code> timed out while waiting for iOS Simulator to boot. (24173400)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW268" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>Eliminated the debugger crash that occurred when pausing code dependent on Swift libraries from a binary distribution. (24173332)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW269" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>A renewed intermediate certificate issued by Apple Worldwide Developer Relations replaces the expiring certificate in your development system. </p><p>The intermediate certificate is required for developers that provide passes for Apple Wallet, deliver Safari Push Notifications, or create Safari Extensions. For more information about the intermediate certificate, visit <span class="content_text"><a href="https://developer.apple.com/support/certificates/expiration/" class="urlLink" rel="external">developer.apple.com: Intermediate Certificate Expiration</a></span>.  (23922671)
</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW270" title="Xcode 7.2"></a><h3 class="jump">Xcode 7.2</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW271" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW272" title="Linker"></a><h5 class="jump">Linker</h5><ul class="ul"><li class="li"><p>The linker now supports order file (<code>-order_file option</code>) when bitcode is enabled (<code>ENABLE_BITCODE=YES</code>). (21392558)</p></li><li class="li"><p>The linker now supports unexported symbols (<code>-unexported_symbol[s_list]</code> option) when bitcode is enabled (<code>ENABLE_BITCODE=YES</code>). (21677850)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW273" title="Swift"></a><h5 class="jump">Swift</h5><ul class="ul"><li class="li"><p>The Swift compiler is now stricter about including non-modular header files. Debugging a Swift target requires that frameworks be properly modular, meaning all of the publicly-imported headers are either accounted for in the framework's umbrella header, imported from another modular framework, or listed explicitly in a custom module.modulemap file (advanced users only).</p><p>The compiler will run into issues if the same header file is accessible both through Header Search Paths (<code>-I</code>, <code>-isystem</code>) and Framework Search Paths (<code>-F</code>, <code>-iframework</code>), even if there are symbolic links involved. In these cases, you should prefer using Framework Search Paths alone. (23341162)</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW274" title="Note"></a><p><strong>Note:</strong>&nbsp;This invalid configuration may be generated by external systems, such as CocoaPods.</p><p></p></aside></div></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW275" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>A protocol method implementation no longer inherits the protocol method’s availability information. This may result in new warnings or errors. Since the compiler suppresses availability diagnostics in code that is itself unavailable, you may see new diagnostics in method implementations that have stopped inheriting the availability from a protocol. (22734745)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW276" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW277" title="Asset Catalogs"></a><h5 class="jump">Asset Catalogs</h5><ul class="ul"><li class="li"><p>Fixed issues with universal assets when building asset catalogs for watchOS 2.0. (22867369)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW279" title="Crash Logs"></a><h5 class="jump">Crash Logs</h5><ul class="ul"><li class="li"><p>Crash logs for app extensions are available in builds distributed via TestFlight. (22661518)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW280" title="Linker"></a><h5 class="jump">Linker</h5><ul class="ul"><li class="li"><p>Fixed the linker assertion when linking against an object file that linked with <code>ld -r</code> (single object prelink) and <code>-exported_symbol[s_list]</code> options in bitcode mode. It is recommended to regenerate static libraries that have been compiled with such options and are currently getting an assertion. (22897234)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW281" title="Simulator"></a><h5 class="jump">Simulator</h5><ul class="ul"><li class="li"><p>Resolved issues when using Apple Pay in the simulator and requesting a user's billing address. (22551685)</p></li><li class="li"><p>Fixed issues with Simulator becoming unresponsive when unpairing a Siri Remote or Game Controller. (22891830)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW282" title="Storyboards"></a><h5 class="jump">Storyboards</h5><ul class="ul"><li class="li"><p> Storyboards now support reusing the same view controller as the destination of multiple relationship segues. For example, a tab bar controller and a navigation controller may now share the same child view controller. (19060323, 20829042)</p></li><li class="li"><p>Storyboards and nibs containing UITextViews with 1-11 characters no longer hang when loaded on iOS. (22228164)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW283" title="Swift"></a><h5 class="jump">Swift</h5><ul class="ul"><li class="li"><p>In previous releases of Swift, if a type had a mutable property of protocol type, <em>chained</em> accesses to properties of that property were always treated as mutations of the property, even if the second property was only read, not written.  For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>protocol Countable {<span></span></pre></td></tr><tr><td scope="row"><pre>    var count: Int { get }<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>  class MyObject {<span></span></pre></td></tr><tr><td scope="row"><pre>    var widgets : Countable {<span></span></pre></td></tr><tr><td scope="row"><pre>      didSet { print("in didSet") }<span></span></pre></td></tr><tr><td scope="row"><pre>    }<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>  var obj : MyObject = ...<span></span></pre></td></tr><tr><td scope="row"><pre>  let count = obj.widgets.count<span></span></pre></td></tr></table></div><p>The example above would perform a spurious write back to the property <code>widgets</code>, causing <code>didSet</code> to unexpectedly fire.  The workaround was to split the access into separate expressions. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let widgets = obj.widgets<span></span></pre></td></tr><tr><td scope="row"><pre>let count = widgets.count<span></span></pre></td></tr></table></div><p>This bug has now been fixed. (22953072)</p></li><li class="li"><p>Swift data types that are imported into Swift from C struct types (such as <code>CGRect</code> and <code>CGPoint</code>) can now be inspected in the debugger. (23088739)</p></li><li class="li"><p>A bug that caused some Swift projects to crash in whole module optimization with a "program too clever" LLVM error has been fixed. (23200656)</p></li><li class="li"><p>A bug has been fixed where Swift code calling an Objective-C method that took a block returning a <code>nonnull NSString *</code> with a Swift closure would be miscompiled, causing the compiled program to crash. (23285766)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW284" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Resolved an issue where the Finder would mistakenly display a warning indicating that Xcode is damaged and should be moved to the trash. (22686310)</p></li><li class="li"><p>Resolved problems attaching to processes when the Run pane of the Scheme Editor is configured to “Wait for executable to be launched.” (22753642)</p></li><li class="li"><p>Fixed issues related to enabling Game Center and In-App Purchase in the Capabilities pane. (22964531)</p></li><li class="li"><p>Wrapping text fields lay out correctly in the running application after building OS X projects. (23052169)</p></li><li class="li"><p>A bug in the optimizer has been fixed that caused in-place sort on mutable collections to crash. (23081349)</p></li><li class="li"><p>Resolved issues related to Build and Run on devices running iOS 9.1. (23224972)</p></li><li class="li"><p>A bug that caused a program to crash when providing a parameter with a <code>@convention(block)</code> type (including <code>dispatch_block_t</code>) that was marked <code>@noescape</code> has been fixed. (23261912)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW285" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW286" title="Asset Catalog"></a><h5 class="jump">Asset Catalog</h5><ul class="ul"><li class="li"><p>Layered image file names may not be longer than 255 characters. (22974625)</p></li><li class="li"><p><code>UIKit</code> will not render image stack layers correctly when a layer contains a resized image whose aspect ratio doesn’t match the aspect ratio of the original image.</p><p>When resizing an image in a layer stack, choose a width and height that matches the original aspect ratio of the image. (23061910)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW287" title="Debugger"></a><h5 class="jump">Debugger</h5><ul class="ul"><li class="li"><p>The Swift debugger can crash when stopping in code that depends on a Swift library or framework that has been distributed in binary form.</p><p>Frameworks written in Swift should be compiled from source as part of the same project that depends on them to guarantee a single, consistent compilation environment. (22492040)</p></li><li class="li"><p>Detaching the debugger from an Apple TV app will cause the app to hang when it logs output. (22493459)</p></li><li class="li"><p>Xcode’s debugger may not automatically attach to a Today extension run on an iPad Pro when the Notification tab is selected.</p><p>Select the Today tab instead of the Notification tab. The Today extension will now launch and may be debugged. (22495840)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW288" title="Simulator"></a><h5 class="jump">Simulator</h5><ul class="ul"><li class="li"><p>Full support for the tvOS simulator runtime requires OS X 10.11 El Capitan or later. The runtime is supported on OS X Yosemite 10.10.5, but with limited capabilities. Developers running on Yosemite will be unable to pair the Apple TV Remote with the tvOS simulator runtime. (19070665</p></li><li class="li"><p>When running in an iOS simulator for iOS versions 9.1 and earlier, an app may not communicate with TCP/IP services hosted locally by the Mac using the Mac’s local IP address.</p><p>Connect via a loopback address, such as localhost or <code>127.0.0.1</code>. (22453539)</p></li><li class="li"><p>A simulated iOS 9.0 device may boot to a black screen if Xcode is in a different location than when the device first booted.</p><p>Choose Simulator &gt; Reset Content and Settings. (22697818)</p></li><li class="li"><p>To use a Siri Remote with the tvOS simulator, you may first need to unpair it from the Apple TV. To unpair a Siri Remote from an Apple TV, position the remote several meters away from the Apple TV and press and hold Menu and Volume Up (+) simultaneously for 2 seconds. If the Siri Remote immediately pairs with the Apple TV again, move further away and repeat this process. (22908351)</p></li><li class="li"><p>When you download an iOS simulator from the Downloads preference pane in Xcode, you may be prompted to authenticate as an admin at the beginning of the first download and at the end of each additional download.</p><p>All of these authentications are required to successfully install the selected iOS simulator. (22993731)</p></li><li class="li"><p>When duplicating a simulator in the Devices window, the simulator may be listed with an identifier instead of a version number in simulator Run destinations. (23094167)</p></li><li class="li"><p>Installing the iOS 9.0 Simulator Runtime from Xcode's Download Preferences can cause Interface Builder in Xcode 6 installs on the same machine to stop functioning.</p><p>Either avoid installing the iOS 9.0 Simulator Runtime or move <code>/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS\ 9.0.simruntime</code> to a backup location when switching to Xcode 6 and move it back for Xcode 7. (23230951)</p></li><li class="li"><p>iPhone + Watch simulators for WatchKit 2.0 might not be visible in Xcode.</p><p>Create an iPhone + Watch pair manually:</p><ol class="ol"><li class="li"><p>Choose Window &gt; Devices to open the Devices window.</p></li><li class="li"><p>Click the Add (+) button in the lower left corner of the Devices window.</p></li><li class="li"><p>Choose an iPhone device type, an iOS version, and a paired Apple Watch.</p></li><li class="li"><p>Click the Create button.</p></li></ol><p>(23319184)</p></li><li class="li"><p>Building and running may intermittently fail in the tvOS Simulator, producing the error “Failed to lookup process ID.”</p><p>Try running your app again, or run the app on an Apple TV device. (23486651)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW289" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>When recording UI tests for tvOS, presses on the menu button may generate duplicate code in the UI test. (22850293)</p></li><li class="li"><p>UI tests fail to launch in the tvOS simulator if run with Unit Tests.</p><p>Run your UI tests with their own scheme, separately from your unit tests. (23079718)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW290" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Running an app signed with a free provisioning team may fail to launch.</p><p>Trust the developer certificate under Settings &gt; General &gt; Profiles &amp; Device Management on the device. (19748857)</p></li><li class="li"><p>The Devices window sometimes displays paired Apple Watch details alongside an incorrect companion device. (22908731)</p></li><li class="li"><p>Watch Framework and Static Library targets do not display a General tab.</p><p>Configure general settings manually in the target's Info.plist file or in the Build Settings tab. (22932248)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW291" title="Xcode 7.1.1"></a><h3 class="jump">Xcode 7.1.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW292" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><p>The following issues have been resolved.</p><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW293" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Resolved a crash when moving or renaming Xcode, and then opening an iOS or Apple TV app in Xcode. (23264753)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW294" title="Interface"></a><h5 class="jump">Interface</h5><ul class="ul"><li class="li"><p>Wrapping text fields lay out correctly in the running application after building OS X projects. (23154165)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW295" title="Storyboards"></a><h5 class="jump">Storyboards</h5><ul class="ul"><li class="li"><p>Storyboards and nibs containing <code>UITextView</code> elements with between 1 and 11 characters no longer hang when loaded on iOS. (23264732)</p></li><li class="li"><p>Fixed a bug that caused iOS xibs/storyboards compiled with <code>ibtool --flatten NO</code> to produce output that could not be read by <code>ibtool --strip</code>. (23283113)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW296" title="Swift"></a><h5 class="jump">Swift</h5><ul class="ul"><li class="li"><p>Swift data types that are imported into Swift from C struct types (such as <code>CGRect</code> and <code>CGPoint</code>) can now be inspected in the debugger. (23148897)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW297" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p><code>xcodebuild</code> no longer hangs when running UI tests on Apple TV. (23264788)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW298" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW299" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>There’s a bug in the optimizer that causes <em>in place sort</em> on mutable collections to crash. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>// Crashing version.<span></span></pre></td></tr><tr><td scope="row"><pre>aContainer.sortInPlace { (a: Element, b: Element) -&gt; Bool in<span></span></pre></td></tr></table></div><p>Use the non-destructive version of sort and assign its result back to the original container. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>aContainer = aContainer.sort { (a: Element, b: Element) -&gt; Bool in<span></span></pre></td></tr><tr><td scope="row"><pre>   ...<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(23081349)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW300" title="Xcode 7.1"></a><h3 class="jump">Xcode 7.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW301" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW302" title="Playgrounds"></a><h5 class="jump">Playgrounds</h5><ul class="ul"><li class="li"><p>Playgrounds support dragging files, images, and colors directly into the editor to create object literals. </p><p>Object literals allow you to include visual representations of files, images, and colors within a playground, enabling a more expressive playground document. Literals behave similarly to their plain code counterparts but are rendered specially in the Xcode editor. (22099316)</p></li><li class="li"><p>The API exposed by <code>XCPlayground</code> has been revised significantly. Instead of a collection of global functions, Xcode now exposes an <code>XCPlaygroundPage</code> class with methods for interacting with Xcode and the current playground page. </p><p><code>XCPlaygroundPage</code> exposes the following functionality:</p><ul class="nested"><li class="nested li"><p>Use <code>XCPlaygroundPage.currentPage</code> to obtain a reference to the current page.</p></li><li class="nested li"><p>Use <code>XCPlaygroundPage.captureValue(_:withIdentifier:)</code> to capture values into timeline items.</p></li><li class="nested li"><p>Set <code>XCPlaygroundPage.needsIndefiniteExecution</code> to indicate to Xcode that the playground page contains asynchronous code intended to execute indefinitely.</p></li><li class="nested li"><p>Set <code>XCPlaygroundPage.liveView</code> to tell Xcode to present a live view for the playground page</p></li></ul><p><code>XCPlaygroundSharedDataDirectoryURL</code> has been defined as a new global constant; it exposes the shared playground data directory as an <code>NSURL</code>.</p><p>As part of this API change, <code>XCPCaptureValue</code>, <code>XCPShowView</code>, <code>XCPSetExecutionShouldContinueIndefinitely</code>, <code>XCPExecutionShouldContinueIndefinitely</code>, and <code>XCPSharedDataDirectoryPath</code> have been deprecated; they may be removed in a future version of Xcode. (20783204)</p></li><li class="li"><p><code>XCPlayground</code> supports presenting view controllers as the live view for a playground page. </p><p>To use this feature, set <code>XCPlaygroundPage.liveView</code> to your view controller of choice. When available, view controllers should be preferred but plain views may still be used as the live view for a playground page.</p><p>Playground authors may also make custom types that can be presented as the live view for a playground page by conforming to the <code>XCPlaygroundLiveViewable</code> protocol, which allows an object or a value to return a view or view controller that should be used as its live view representation. (20783161)</p></li><li class="li"><p>Playgrounds can programmatically stop execution by calling <code>XCPlaygroundPage.currentPage.finishExecution()</code>. </p><p>This method instructs Xcode to stop executing the current playground page; it allows Xcode to clean up for exiting properly in ways that exiting directly does not. (22463694)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW303" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>Dashed constraints can indicate a priority lower than 1000. (15990914)</p></li><li class="li"><p>Interface Builder supports enabling Peek &amp; Pop for segues. </p><p>Peek &amp; Pop segues are omitted when running on OS versions prior to iOS 9.1. (22886994)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW304" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>UI testing is available for tvOS applications.</p><p>To support the unique interaction model provided by tvOS, XCTest includes a new <code>XCUIRemote</code> class that allows interaction with an application as if an Apple Remote were used. In addition, a new <code>XCUIElement.hasFocus</code> property can be used to check an element’s focus state, and this <code>hasFocus</code> property can also be used in <code>XCUIElementQuery</code> predicates on tvOS to find the element with focus.</p><p>While recording a UI test on tvOS, swipe gestures on a Siri Remote are recorded as if equivalent buttons are being pressed on an Apple Remote.</p><p>Navigation using the keyboard in the simulator is recorded as if equivalent buttons are pressed on an Apple Remote: The arrow keys are mapped to the arrow buttons, the Return key is mapped to the Select button, the Escape key is mapped to the Menu button, and the space bar is mapped to the Play/Pause button. (21548564)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW305" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>Address Sanitizer supports watchOS apps. (22540994)</p></li><li class="li"><p>Swift error breakpoints are supported. </p><p>A Swift error breakpoint pauses execution when the error is thrown. You can edit Swift error breakpoint so that execution is paused only for a specified Swift error type. (21080569)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW306" title="Crash Reports"></a><h5 class="jump">Crash Reports</h5><ul class="ul"><li class="li"><p>Xcode can display crash reports in the Crashes Organizer that originate from WatchKit 2 extensions. (20139117)</p></li><li class="li"><p>Crash logs for OS X app extensions are displayed in the Crashes Organizer. (22224732)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW307" title="Swift"></a><h5 class="jump">Swift</h5><ul class="ul"><li class="li"><p>Enums imported from C now automatically conform to the <code>Equatable</code> protocol, including a default implementation of the <code>==</code> operator. </p><p>This conformance allows you to use C enum pattern matching in <code>switch</code> statements with no additional code. (17287720)</p></li><li class="li"><p>The <code>NSNumber</code><code>unsignedIntegerValue</code> property now has the type <code>UInt</code> instead of <code>Int</code>, as do other methods and properties that use the <code>NSUInteger</code> type in Objective-C and whose names contain <code>"unsigned.."</code>. </p><p>Most other uses of <code>NSUInteger</code> in system frameworks are imported as <code>Int</code> as they were in Xcode 7. (19134055)</p></li><li class="li"><p>Field getters and setters are now created for named unions imported from C. In addition, an initializer with a named parameter for the field is provided. </p><p>For example, given the following Objective-C <code>typdef</code>:</p><div class="codesample clear"><table><tr><td scope="row"><pre>typedef union IntOrFloat {<span></span></pre></td></tr><tr><td scope="row"><pre>  int intField;<span></span></pre></td></tr><tr><td scope="row"><pre>  float floatField;<span></span></pre></td></tr><tr><td scope="row"><pre>} IntOrFloat;<span></span></pre></td></tr></table></div><p>Importing this <code>typedef</code> into Swift generates the following interface:</p><div class="codesample clear"><table><tr><td scope="row"><pre>struct IntOrFloat {<span></span></pre></td></tr><tr><td scope="row"><pre>  var intField: Int { get set }<span></span></pre></td></tr><tr><td scope="row"><pre>  init(intField: Int)<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>  var floatField: Float { get set }<span></span></pre></td></tr><tr><td scope="row"><pre>  init(floatField: Float)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(19660119)</p></li><li class="li"><p>Bitfield members of C structs are now imported into Swift. (21702107)</p></li><li class="li"><p>The type <code>dispatch_block_t</code> now refers to the type <code>@convention(block) () -&gt; Void</code>, as it did in Swift 1.2. </p><p>This change allows programs using <code>dispatch_block_create</code> to work as expected, solving an issue that surfaced in Xcode 7.0 with Swift 2.0.</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW308" title="Note"></a><p><strong>Note:</strong>&nbsp;Converting to a Swift closure value and back is not guaranteed to preserve the identity of a <code>dispatch_block_t</code>.</p><p></p></aside></div><p>(22432170)</p></li><li class="li"><p>Editing a file does not trigger a recompile of files that depend upon it if the edits only modify declarations marked <code>private</code>. (22239821)</p></li><li class="li"><p>Expressions interpolated in strings may now contain string literals. </p><p>For example, <code>"My name is \(attributes["name"]!)"</code> is now a valid expression. (14050788)</p></li><li class="li"><p>Error messages produced when the type checker cannot solve its constraint system continue to improve in many cases. </p><p>For example, errors in the body of generic closures (for instance, the argument closure to <code>map</code>) are much more usefully diagnosed. (18835890)</p></li><li class="li"><p>Conversions between function types are supported, exhibiting covariance in function result types and contravariance in function parameter types. </p><p>For example, it is legal to assign a function of type <code>Any -&gt; Int</code> to a variable of type <code>String -&gt; Any</code>. (19517003)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW309" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><p>The following issues listed in previous Xcode release notes have been resolved.</p><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW310" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>Fixed: Editor &gt; Canvas &gt; “Show Intrinsic Size Constraints Contributing To Ambiguity” works correctly when there is ambiguity in content priority  for the selected views using Auto Layout in the Interface Builder canvas. (19689060)</p></li><li class="li"><p>Constraints show badges to indicate their relationship and ratios. (15991257)</p></li><li class="li"><p>Explicit layout margins set on <code>UIStackView</code> in Interface Builder are properly reflected at runtime. (21613035)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW311" title="Building"></a><h5 class="jump">Building</h5><ul class="ul"><li class="li"><p>Fixed: If your iOS app embedded a watchOS app and you had a framework for both iOS and watchOS embedded in each app, your project would fail to build when you performed the Archive action. (22183332)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW312" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>The visibility of selected constraints when debugging the view hierarchy is improved. (22092490)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW313" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Launching Xcode or another tool that uses Simulator no longer causes additional Apple Watch devices to be created. (22508374)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW314" title="Swift"></a><h5 class="jump">Swift</h5><ul class="ul"><li class="li"><p>Using <code>switch</code> against multiple types with <code>as</code> patterns no longer causes a memory leak. (22587077)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW315" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW316" title="Asset Catalog"></a><h5 class="jump">Asset Catalog</h5><ul class="ul"><li class="li"><p>When building asset catalogs for watchOS 2.0, some Universal assets may not appear in the compiled asset catalog.</p><p>Make sure your Universal assets for watchOS 2.0 include a “2x” or “Any” scale representation. (22867369)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW317" title="Linker"></a><h5 class="jump">Linker</h5><ul class="ul"><li class="li"><p>When using bitcode and <code>ld -r</code> (Xcode single object prelink) together with <code>-exported_symbol</code> or <code>-exported_symbols_list</code>, single object prelink succeeds but the linker then asserts when linking against the prelinked object. </p><p>If you are building a static library using bitcode and single object prelink, do not add exported symbols flags to the link command. If you are currently seeing linker assertions when linking against a 3rd party library, you can disable bitcode or ask for a new library from the library provider. (22897234)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW318" title="Simulator"></a><h5 class="jump">Simulator</h5><ul class="ul"><li class="li"><p>To use a Siri remote with the tvOS Simulator, you may need to first unpair it from the Apple TV.</p><p>To unpair a Siri remote from an Apple TV, position the remote several meters away from the Apple TV, then press and hold MENU and + simultaneously for 2 seconds. If the Siri remote immediately re-pairs with the Apple TV, move further away and try again. (22908351)</p></li><li class="li"><p>Simulator.app may become unresponsive when unpairing a Siri Remote or Game Controller.</p><p>Force-quit Simulator.app and relaunch it. (22891830)</p></li><li class="li"><p>When running in the Simulator, an app cannot communicate with TCP/IP services locally hosted by the Mac via the Mac’s local IP address. </p><p>Connect via a loopback address, such as localhost or 127.0.0.1. (22453539)</p></li><li class="li"><p>Simulated transactions using Apple Pay in Simulator do not complete if requesting a user's billing address. (22551685)</p></li><li class="li"><p>For full support, the tvOS Simulator Runtime requires the final release of OS X v10.11 El Capitan or newer versions of OS X.</p><p>The runtime is supported on OS X Yosemite 10.10.5 with limited capabilities. Running on OS X Yosemite is unable to pair the Apple TV Remote with the tvOS Simulator Runtime. (19070665)</p></li><li class="li"><p>An iOS 9.0 simulator may boot to a black screen if Xcode.app is at a different path than when the device first booted.</p><p>Reset the simulated device's contents and settings from the simulator menu. (22697818)</p></li><li class="li"><p>When you download one or more Simulators from the Xcode Downloads preference panel, you are prompted for admin authorization at the beginning of the first download. You may also be prompted for admin authorization again at the end of each download. Responding to all of these prompts is required to successfully install the selected Simulators. (22993731)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW319" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>When recording UI tests for tvOS, presses on the menu button may generate duplicate code in the UI test method. (22850293)</p></li><li class="li"><p>UI tests fail to launch in the Apple TV simulator if run with unit tests.</p><p>Run your UI tests with their own scheme, separately from your unit tests. (23079718)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW320" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>The Xcode debugger does not automatically attach to a Today extension run on an iPad Pro when the Notification tab is selected. </p><p>Select the Today tab, then launch the Today extension for debugging. (22495840)</p></li><li class="li"><p>Detaching the debugger from an Apple TV application causes the app to hang when it logs output. (22493459)</p></li><li class="li"><p>Swift data types that are imported into Swift from C struct types, such as <code>CGRect</code> and <code>CGPoint</code>, can not be inspected in the debugger. (23088739)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW321" title="Crash Reports"></a><h5 class="jump">Crash Reports</h5><ul class="ul"><li class="li"><p>Crash logs for app extensions are not available in builds distributed via TestFlight. (22661518)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW322" title="Xcode Server"></a><h5 class="jump">Xcode Server</h5><ul class="ul"><li class="li"><p>Xcode Server may not be able to join new development teams with versions of OS X Server other than version 4.1.5.</p><p>Existing team memberships will continue to work correctly. (22539804)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW323" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>When using “wait-for-launch” in the Run scheme action, Xcode shows “Running” instead of “Waiting to attach” in the Activity monitor even though it is waiting for the process to launch. If you don’t launch the process being waited for and switch to “launch automatically,” Xcode fails to attach to the app for each time this situation has occurred, after which it launches as expected. (22753642)</p></li><li class="li"><p>The Devices window sometimes displays paired watch details alongside an incorrect companion device. (22908731)</p></li><li class="li"><p>Watch Framework and Static Library targets do not have a General tab in the project editor.</p><p>Configure settings manually via the target's <code>Info.plist</code> file or the Build Settings tab, as appropriate. (22932248)</p></li><li class="li"><p>Running an app signed with a free provisioning team may fail to launch.</p><p>Trust the developer certificate in the device Settings—Settings &gt; General &gt; Profiles &amp; Device Management. (19748857)</p></li><li class="li"><p>Apps signed with a free provisioning team may not run on a tvOS device. (22636412)</p></li><li class="li"><p>The Finder may mistakenly give a warning that Xcode is damaged and should be moved to the trash.</p><p>Reboot your Mac. If warnings persist after reboot, reinstall Xcode. (22686310)</p></li><li class="li"><p>Certain capabilities, such as Game Center and In-App Purchase, cannot be enabled in the Capabilities pane of the Project Navigator.</p><p>Enable and then disable the iCloud capability to restore the ability to enable the other capabilities. (22964531)</p></li><li class="li"><p>After building an OS X project, some wrapping, multiline text fields may layout incorrectly in the running app.</p><p>Open the storyboard or XIB containing the wrapping, multiline text field, select the text field, open the size inspector, and change Preferred Width to Explicit. (23052169)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW324" title="Xcode 7.0.1"></a><h3 class="jump">Xcode 7.0.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW325" title="App Thinning"></a><h4 class="jump">App Thinning</h4><ul class="ul"><li class="li"><p>The Xcode 7.0.1 release includes several improvements to improve support for adopting bitcode and to help catch issues with app thinning prior to App Store submission. (22783146, 22783168)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW326" title="Xcode 7.0"></a><h3 class="jump">Xcode 7.0</h3><p>The Xcode 7 release incorporates new features in the IDE as well as updates to Swift and Objective-C.</p><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW327" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW328" title="Playgrounds"></a><h5 class="jump">Playgrounds</h5><ul class="ul"><li class="li"><p>Playgrounds can now be set to run manually or automatically when changes are made, as well as stopped during execution.  (18058289)</p></li><li class="li"><p>Xcode 7 adds pages to playgrounds. You can add a new page to any playground by selecting File &gt; New Playground Page. In the navigator and jump bar, you’ll see all pages in the playground. You can add navigation between pages with the new page navigation markup:</p><ul class="simple-spaceabove"><li><p>Navigation relative to the all pages in the playground:</p><ul class="simple-spaceabove"><li><p>[Go to First Page](@first)</p></li><li><p>[Go to Last Page](@last)</p></li></ul></li><li><p>Navigation relative to the current page:</p><ul class="simple-spaceabove"><li><p>[Go to Next Page](@next)</p></li><li><p>[Go to Previous Page](@previous)</p></li></ul></li><li><p>Navigation to a specific page:</p><ul class="simple-spaceabove"><li><p>[Go to Overview](Overview)</p></li><li><p>[Go to Sorting](Sorting)</p></li></ul></li></ul><p>(20192277)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW329" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>Interface Builder adds authoring support for the new <code>UIStackView</code> (iOS 9) and exposes a distribution property for <code>NSStackView</code> (OS X 10.11).  There is an Embed In Stack View button at the bottom right of the canvas.  (18420765)</p></li><li class="li"><p>Interface Builder adds support for <code>NSDateComponentsFormatter</code>, <code>NSDateIntervalFormatter</code>, <code>NSEnergyFormatter</code>, <code>NSMassFormatter</code>, and <code>NSLengthFormatter</code> in OS X apps.  (17236851)</p></li><li class="li"><p>Notes from the Interface Builder identity inspector are now included in <code>--export-strings-file</code> output and XLIFF files exported using the Export For Localization feature in the project editor.  (18023555)</p></li><li class="li"><p>Background placeholders on custom views and other containers can be hidden on the Interface Builder canvas by selecting Editor &gt; Canvas &gt; Show Background Placeholders.  (20580948)</p></li><li class="li"><p>Storyboard References may now be deployed to iOS 8, OS X 10.10, and watchOS 1. </p><p>Backwards-deployed Storyboard References may not be connected to relationship segues and may not refer to storyboards in external bundles.  (21275172)</p></li><li class="li"><p>Interface Builder now supports placeholder references for scenes in other storyboards, and segues that cross storyboard boundaries.  (9565583)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW330" title="Build System"></a><h5 class="jump">Build System</h5><ul class="ul"><li class="li"><p>The new build setting Objective-C Generated Interface Header Name (<code>SWIFT_OBJC_INTERFACE_HEADER_NAME</code>) controls the name used for the header that is generated by the Swift compiler for use in <code>#import</code> statements in Objective-C.  (18063617)</p></li><li class="li"><p>You can configure Xcode to run the <code>unifdef</code> tool on your headers during a Copy Headers build phase. This is enabled with the <code>COPY_HEADERS_RUN_UNIFDEF</code> build setting, and the flags to pass are controlled by the <code>COPY_HEADERS_UNIFDEF_FLAGS</code> build settings. Use:</p><p><code>$man unifdef</code></p><p>in a Terminal window for more information on what flags <code>unifdef</code> accepts.  (18786269)</p></li><li class="li"><p>The Xcode build system no longer automatically inherits the environment used to launch the app when running in the IDE. This prevents unnecessary rebuilds when Xcode.app is opened from the command line.</p><p>If necessary, users can opt in to the old behavior by entering this command in Terminal:</p><p><code>$defaults write com.apple.dt.Xcode UseSanitizedBuildSystemEnvironment -bool NO</code></p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW331" title="Note"></a><p><strong>Note:</strong>&nbsp;For compatibility reasons, this behavior is not the default when running builds with <code>xcodebuild</code>. However, users who wish to interchange between building Xcode and building using xcodebuild can add the following argument:</p><p><code> -UseSanitizedBuildSystemEnvironment=YES</code></p><p>on the command line to also use a sanitized environment in <code>xcodebuild</code>.</p><p></p></aside></div><p>(20668232)</p></li><li class="li"><p>The new build setting Product Bundle Identifier (<code>PRODUCT_BUNDLE_IDENTIFIER</code>) is the recommended place to set the Bundle Identifier for a target. The target’s <code>Info.plist</code> should be configured to use this build setting by referencing it as <code>$(PRODUCT_BUNDLE_IDENTIFIER)</code> in the value for the <code>CFBundleIdentifier</code> key. </p><p>Xcode offers to configure this for you when you accept the “Upgrade to recommended settings” project modernization in the issue navigator, unless your target preprocesses its <code>Info.plist</code> file. In that case you will need to configure this setting manually. This change is backwards-compatible to older versions of Xcode. </p><p>This change is required to make certain features work, such as On Demand Resources, if your target preprocesses its <code>Info.plist</code> file.  (20887827)</p></li><li class="li"><p>You can specify per-file compiler flags for derived source files in the Build Rules tab of the target editor. These flags will work in Xcode 6.3 as well, although they cannot be edited or viewed with any Xcode prior to Xcode 7.  (5924168)</p></li><li class="li"><p>During the build, Xcode populates build settings that describe the version of the SDK being built against. </p><p>These settings are:</p><ul class="nested"><li class="nested li"><p><code>SDK_VERSION</code>: x.y version of the SDK being used. For example, '10.10' for OS X 10.10, or '8.0' for iOS 8.</p></li><li class="nested li"><p><code>SDK_VERSION_ACTUAL</code>: Single integer representing the SDK version.  For example, 101000, or 80000.</p></li><li class="nested li"><p><code>SDK_VERSION_MAJOR</code>: Single integer representing the major version of the SDK.  For example, 101000 (which would be the value for 10.10.0 or 10.10.4), or 80000 (which would be the value for 8.0 or 8.3).</p></li><li class="nested li"><p><code>SDK_VERSION_MINOR</code>: Single integer representing the minor version of the SDK.  For example, 1000 or 1004 (for 10.10.0 or 10.10.4), or 0 or 300 (for 8.0 or 8.3).</p></li></ul><p>(20341285)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW332" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>UI testing in Xcode 7 is introduced as a replacement for the existing <code>UIAutomation</code> support in Instruments.  (22345571)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW333" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>While you are debugging your view hierarchy, Xcode allows you to focus on a portion of your app by double-clicking on a view. </p><p>To exit, click the “X” in the debug navigator’s Focused indicator or double-click in the white space of the editor.  (18553133)</p></li><li class="li"><p>Instruments now supports disabling the Automatic Termination feature of Transparent Application Lifecycle when launching OS X applications.</p><p>To disable Automatic Termination when Instruments launches an OS X app: </p><ol class="ol"><li class="li"><p>Select the “Edit {app name}” menu item in the process chooser after initially selecting the process.</p></li><li class="li"><p>Select the gear icon in the application settings window.</p></li><li class="li"><p>Select the “Disabled” menu item underneath the “Transparent Application Lifecycle - Automatic Termination” section.</p></li></ol><p>Once you have configured this application setting, Instruments launches the OS X app with an additional command line option that disables Automatic Termination. The setting is remembered for all future launches of that app.  (18105188)</p></li><li class="li"><p>Xcode displays crash reports in the Crashes Organizer that originated from your iOS App Extension crashes.  (19309974)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW334" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Xcode 7 lets you find symbols choosing Find &gt; “Find Selected Symbol in Project.”   (15573153)</p></li><li class="li"><p>The find navigator shows caller hierarchy. Select a function or method, and right-click to select “Find Call Hierarchy.”  (15716883)</p></li><li class="li"><p>The find navigator displays the language for <code>.strings</code> files containing matches.  (18372154)</p></li><li class="li"><p>The user defaults domain for <code>xcodebuild</code> has changed to <code>com.apple.dt.xcodebuild</code>. </p><p><code>xcodebuild</code> continues to read from the old user defaults domain (<code>xcodebuild</code>) at a lower priority than the new one.  (20181486)</p></li><li class="li"><p><code>xcodebuild</code> supports a <code>-hideShellScriptEnvironment</code> option. </p><p>This option causes Xcode to suppress listing the environment variables set for each Run Script build phase, significantly reducing build output verbosity for some projects.  (20309279)</p></li><li class="li"><p>The assistant editor can obtain a summary of the interface of your Swift classes.</p><p>When viewing a Swift file in the primary editor, setting the assistant to the Counterparts mode shows a summarized version of the class that includes declarations (but not implementation) of the methods and functions in your file along with doc comments.  (17684981)</p></li><li class="li"><p>The assistant editor set to Generated Interface mode displays the Swift interface of an Objective-C header file.  (19320817)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW335" title="Changes"></a><h4 class="jump">Changes</h4><ul class="ul"><li class="li"><p>Exporting an archive for the App Store requires an account with iTunes Connect Access.  (19940553)</p></li><li class="li"><p>Multiple components of Xcode 7 run with library validation enabled in order to prevent exploitation by malicious code. Any code that interposes system libraries or that is injected into process using <code>DYLD_INSERT_LIBRARIES</code> may cause problems when you are running Xcode 7.</p><p>You are advised to either remove software that interposes system libraries or is injected into processes using <code>DYLD_INSERT_LIBRARIES</code> from your system, or contact the vendor of such software for an update.  (22366994)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW336" title="Deprecations"></a><h4 class="jump">Deprecations</h4><ul class="ul"><li class="li"><p>OS X v10.11 is the last major release of OS X that supports the previously deprecated garbage collection runtime.</p><p>Applications or features that depend upon garbage collection may not function properly or will not launch when this runtime is removed. Developers should use Automatic Reference Counting (ARC) or manual retain/release for memory management. Xcode includes tools to aid in this migration.  (20589595)</p></li><li class="li"><p>The existing <code>UIAutomation</code> support in Instruments is deprecated. Use UI testing in Xcode 7. (22345571)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW337" title="Notes"></a><h4 class="jump">Notes</h4><ul class="ul"><li class="li"><p>The OpenSSL headers have been removed from the OS X v10.11 SDK.  (21232069)</p></li><li class="li"><p>OS X El Capitan no longer ships with <code>genstrings</code>. That utility is instead provided by Xcode 7. This means that older versions of Xcode won’t find <code>genstrings</code> in <code>/usr/bin</code> like they would on older versions of OS X. (19708961)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW338" title="Swift"></a><h4 class="jump">Swift</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW339" title="Swift Language Features"></a><h5 class="jump">Swift Language Features</h5><ul class="ul"><li class="li"><p>New defer statement. This statement runs cleanup code when the scope is exited, which is particularly useful in conjunction with the new error handling model. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func xyz() throws {<span></span></pre></td></tr><tr><td scope="row"><pre>   let f = fopen("x.txt", "r")<span></span></pre></td></tr><tr><td scope="row"><pre>   defer { fclose(f) }<span></span></pre></td></tr><tr><td scope="row"><pre>   try foo(f)                    // f is closed if an error is propagated.<span></span></pre></td></tr><tr><td scope="row"><pre>   let f2 = fopen("y.txt", "r")<span></span></pre></td></tr><tr><td scope="row"><pre>   defer { fclose(f2) }<span></span></pre></td></tr><tr><td scope="row"><pre>   try bar(f, f2)                // f2 is closed, then f is closed if an error is propagated.<span></span></pre></td></tr><tr><td scope="row"><pre>}                                // f2 is closed, then f is closed on a normal path<span></span></pre></td></tr></table></div><p>(17302850)</p></li><li class="li"><p>Printing values of certain enum types shows the enum case and payload, if any. This is not supported for <code>@objc</code> enums or certain enums with multiple payloads.  (18334936)</p></li><li class="li"><p>You can specify availability information on your own declarations with the <code>@available()</code> attribute.</p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>@available(iOS 8.0, OSX 10.10, *)<span></span></pre></td></tr><tr><td scope="row"><pre>func startUserActivity() -&gt; NSUserActivity {<span></span></pre></td></tr><tr><td scope="row"><pre>  ...<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>This code fragment indicates that the <code>startUserActivity()</code> method is available on iOS 8.0+, on OS X v10.10+, and on all versions of any other platform.  (20938565)</p></li><li class="li"><p>A new <code>@nonobjc</code> attribute is introduced to selectively suppress ObjC export for instance members that would otherwise be <code>@objc</code>.  (16763754)</p></li><li class="li"><p>Nongeneric classes may now inherit from generic classes.  (15520519)</p></li><li class="li"><p>Public extensions of generic types are now permitted.</p><p><code>public extension Array { … }</code></p><p>(16974298)</p></li><li class="li"><p>Enums now support multiple generic associated values, for example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>enum Either&lt;T, U&gt; {<span></span></pre></td></tr><tr><td scope="row"><pre>   case Left(T), Right(U)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(15666173)</p></li><li class="li"><p>Protocol extensions: Extensions can be written for protocol types. </p><p>With these extensions, methods and properties can be added to any type that conforms to a particular protocol, allowing you to reuse more of your code. This leads to more natural caller side “dot” method syntax that follows the principle of “fluent interfaces” and that makes the definition of generic code simpler (reducing “angle bracket blindness”). (11735843)</p></li><li class="li"><p>Protocol default implementations: Protocols can have default implementations for requirements specified in a protocol extension, allowing “mixin” or “trait” like patterns. </p></li><li class="li"><p>Availability checking. Swift reports an error at compile time if you call an API that was introduced in a version of the operating system newer than the currently selected deployment target. </p><p>To check whether a potentially unavailable API is available at runtime, use the new <code>#available()</code> condition in an <code>if</code> or <code>guard</code> statement. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>if #available(iOS 8.0, OSX 10.10, *) {<span></span></pre></td></tr><tr><td scope="row"><pre>  // Use Handoff APIs when available.<span></span></pre></td></tr><tr><td scope="row"><pre>  let activity =<span></span></pre></td></tr><tr><td scope="row"><pre>    NSUserActivity(activityType:"com.example.ShoppingList.view")<span></span></pre></td></tr><tr><td scope="row"><pre>  activity.becomeCurrent()<span></span></pre></td></tr><tr><td scope="row"><pre>} else {<span></span></pre></td></tr><tr><td scope="row"><pre>  // Fall back when Handoff APIs not available.<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(14586648)</p></li><li class="li"><p>Native support for C function pointers: C functions that take function pointer arguments can be called using closures or global functions, with the restriction that the closure must not capture any of its local context. </p><p>For example, the standard C <code>qsort</code> function can be invoked as follows:</p><div class="codesample clear"><table><tr><td scope="row"><pre>var array = [3, 14, 15, 9, 2, 6, 5]<span></span></pre></td></tr><tr><td scope="row"><pre>qsort(&amp;array, array.count, sizeofValue(array[0])) { a, b in<span></span></pre></td></tr><tr><td scope="row"><pre>  return Int32(UnsafePointer&lt;Int&gt;(a).memory - UnsafePointer&lt;Int&gt;(b).memory)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>print(array)<span></span></pre></td></tr></table></div><p>(16339559)</p></li><li class="li"><p>Error handling. You can create functions that throw, catch, and manage errors in Swift. </p><p>Using this capability, you can surface and deal with recoverable errors, such as “file-not-found” or network timeouts. Swift’s error handling interoperates with <code>NSError</code>.  (17158652)</p></li><li class="li"><p>Testability: Tests of Swift 2.0 frameworks and apps are written without having to make internal routines public. </p><p>Use <code>@testable import {ModuleName}</code> in your test source code to make all public and internal routines usable. The app or framework target needs to be compiled with the Enable Testability build setting set to <code>Yes</code>. The Enable Testability build setting should be used only in your Debug configuration, because it prohibits optimizations that depend on not exporting internal symbols from the app or framework.  (17732115)</p></li><li class="li"><p><code>if</code> statements can be labeled, and labeled <code>break</code> statements can be used as a jump out of the matching <code>if</code> statement.</p><p>An unlabeled <code>break</code> does not exit the <code>if</code> statement. It exits the enclosing loop or <code>switch</code> statement, or it is illegal if none exists.  (19150249)</p></li><li class="li"><p>A new <code>x?</code> pattern can be used to pattern match against optionals as a synonym for <code>.Some(x)</code>.  (19382878)</p></li><li class="li"><p>Concatenation of Swift string literals, including across multiple lines, is now a guaranteed compile-time optimization, even at <code>-Onone</code>.  (19125926)</p></li><li class="li"><p>Nested functions can now recursively reference themselves and other nested functions.  (11266246)</p></li><li class="li"><p>Improved diagnostics: </p><ul class="nested"><li class="nested li"><p>A warning has been introduced to encourage the use of <code>let</code> instead of <code>var</code> when appropriate, </p></li><li class="nested li"><p>A warning has been introduced to signal unused variables.  </p></li><li class="nested li"><p>Invalid mutation diagnostics are more precise.</p></li><li class="nested li"><p>Unreachable switch cases cause a warning.</p></li><li class="nested li"><p>The <code>switch</code> statement “exhaustiveness checker” is smarter. </p></li></ul><p>(15975935),(20130240)</p></li><li class="li"><p>Failable convenience initializers are allowed to return <code>nil</code> before calling <code>self.init</code>.  </p><p>Designated initializers still must initialize all stored properties before returning <code>nil</code>; this is a known limitation.  (20193929)</p></li><li class="li"><p>A new <code>readLine()</code> function has been added to the standard library.  (15911365)</p></li><li class="li"><p>SIMD Support: Clang extended vectors are imported and usable in Swift. </p><p>This capability enables many graphics and other low-level numeric APIs (for example, <code>simd.h</code>) to be usable in Swift. </p></li><li class="li"><p>New <code>guard</code> statement: This statement allows you to model an early exit out of a scope.  </p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>guard let z = bar() else { return }<span></span></pre></td></tr><tr><td scope="row"><pre>use(z)<span></span></pre></td></tr></table></div><p>The else block is required to exit the scope (for example, with <code>return</code>, <code>throw</code>, <code>break</code>, <code>continue</code>, and so forth) or end in a call to a <code>@noreturn</code> function. (20109722)</p></li><li class="li"><p>Improved pattern matching: <code>switch/case</code> pattern matching is available to many new conditional control flow statements, including <code>if/case</code>, <code>while/case</code>, <code>guard/case</code>, and <code>for-in/case</code>. <code>for/in</code> statements can also have <code>where</code> clauses, which combine to support many of the features of list comprehensions in other languages. </p></li><li class="li"><p>A new <code>do</code> statement allows scopes to be introduced with the <code>do</code> statement. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>do {<span></span></pre></td></tr><tr><td scope="row"><pre>    //new scope<span></span></pre></td></tr><tr><td scope="row"><pre>    do {<span></span></pre></td></tr><tr><td scope="row"><pre>        //another scope<span></span></pre></td></tr><tr><td scope="row"><pre>    }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p></p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW340" title="Swift Enhancements and Changes"></a><h5 class="jump">Swift Enhancements and Changes</h5><ul class="ul"><li class="li"><p>The OS X v10.11, iOS 9, and watchOS 2 SDKs have adopted modern Objective-C features such as nullability, typed collections, and others to provide an improved Swift experience. </p></li><li class="li"><p>A new keyword <code>try?</code> has been added to Swift. </p><p><code>try?</code> attempts to perform an operation that may throw. If the operation succeeds, the result is wrapped in an optional; if it fails (that is, if an error is thrown), the result is <code>nil</code> and the error is discarded. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func produceGizmoUsingTechnology() throws -&gt; Gizmo { … }<span></span></pre></td></tr><tr><td scope="row"><pre>func produceGizmoUsingMagic() throws -&gt; Gizmo { … }<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>if let result = try? produceGizmoUsingTechnology() { return result }<span></span></pre></td></tr><tr><td scope="row"><pre>if let result = try? produceGizmoUsingMagic() { return result }<span></span></pre></td></tr><tr><td scope="row"><pre>print("warning: failed to produce a Gizmo in any way")<span></span></pre></td></tr><tr><td scope="row"><pre>return nil<span></span></pre></td></tr></table></div><p><code>try?</code> always adds an extra level of <code>Optional</code> to the result type of the expression being evaluated. If a throwing function’s normal return type is <code>Int?</code>, the result of calling it with <code>try?</code> will be <code>Int??</code>, or <code>Optional&lt;Optional&lt;Int&gt;&gt;</code>. (21692467)</p></li><li class="li"><p>Type names and <code>enum</code> cases now <code>print</code> and convert to <code>String</code> without qualification by default. <code>debugPrint</code> or <code>String(reflecting:)</code> can still be used to get fully qualified names. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>enum Fruit { case Apple, Banana, Strawberry }<span></span></pre></td></tr><tr><td scope="row"><pre>print(Fruit.Apple)      // “Apple”<span></span></pre></td></tr><tr><td scope="row"><pre>debugPrint(Fruit.Apple) // “MyApp.Fruit.Apple”)<span></span></pre></td></tr></table></div><p>(21788604)</p></li><li class="li"><p>C typedefs of block types are imported as typealiases for Swift closures. </p><p>The primary result of this is that typedefs for blocks with a parameter of type <code>BOOL</code> are imported as closures with a parameter of type <code>Bool</code> (rather than <code>ObjCBool</code> as in the previous release). This matches the behavior of block parameters to imported Objective-C methods. (22013912)</p></li><li class="li"><p>The type <code>Boolean</code> in MacTypes.h is imported as <code>Bool</code> in contexts that allow bridging between Swift and Objective-C types. </p><p>In cases where the representation is significant, <code>Boolean</code> is imported as a distinct <code>DarwinBoolean</code> type, which is <code>BooleanLiteralConvertible</code> and can be used in conditions (much like the <code>ObjCBool</code> type). (19013551)</p></li><li class="li"><p>Fields of C structs that are marked <code>__unsafe_unretained</code> are presented in Swift using <code>Unmanaged</code>. </p><p>It is not possible for the Swift compiler to know if these references are really intended to be strong (+1) or unretained (+0). (19790608)</p></li><li class="li"><p>The <code>NS_REFINED_FOR_SWIFT</code> macro can be used to move an Objective-C declaration aside to provide a better version of the same API in Swift, while still having the original implementation available. (For example, an Objective-C API that takes a <code>Class</code> could offer a more precise parameter type in Swift.)</p><p>The <code>NS_REFINED_FOR_SWIFT</code> macro operates differently on different declarations:</p><ul class="nested"><li class="nested li"><p>Init methods will be imported with the resulting Swift initializer having “__” prepended to its first external parameter name.</p><p><code>- (instancetype)initWithClassName:(NSString *)name NS_REFINED_FOR_SWIFT;</code></p><p><code>init(__className: String)</code></p></li><li class="nested li"><p>Other methods will be imported with “__” prepended to their base name.</p><p><code>- (NSString *)displayNameForMode:(DisplayMode)mode NS_REFINED_FOR_SWIFT;</code></p><p><code>func __displayNameForMode(mode: DisplayMode) -&gt; String</code></p></li><li class="nested li"><p>Subscript methods will be treated like any other methods and will not be imported as subscripts.</p></li><li class="nested li"><p>Other declarations will have “__” prepended to their name.</p><p><code>@property DisplayMode mode NS_REFINED_FOR_SWIFT;</code></p><p><code>var __mode: DisplayMode { get set }</code></p></li></ul><p>(20070465)</p></li><li class="li"><p>Xcode provides context-sensitive code completions for enum elements and option sets when using the shorter dot syntax. (16659653)</p></li><li class="li"><p>The <code>NSManaged</code> attribute can be used with methods as well as properties, for access to Core Data’s automatically generated Key-Value-Coding-compliant to-many accessors. </p><div class="codesample clear"><table><tr><td scope="row"><pre>@NSManaged var employees: NSSet<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>@NSManaged func addEmployeesObject(employee: Employee)<span></span></pre></td></tr><tr><td scope="row"><pre>@NSManaged func removeEmployeesObject(employee: Employee)<span></span></pre></td></tr><tr><td scope="row"><pre>@NSManaged func addEmployees(employees: NSSet)<span></span></pre></td></tr><tr><td scope="row"><pre>@NSManaged func removeEmployees(employees: NSSet)<span></span></pre></td></tr></table></div><p>These can be declared in your <code>NSManagedObject</code> subclass.
(17583057)</p></li><li class="li"><p>The grammar has been adjusted so that lines beginning with ‘.’ are always parsed as method or property lookups following the previous line, allowing for code formatted like this to work:</p><div class="codesample clear"><table><tr><td scope="row"><pre>foo<span></span></pre></td></tr><tr><td scope="row"><pre>  .bar<span></span></pre></td></tr><tr><td scope="row"><pre>  .bas = 68000<span></span></pre></td></tr></table></div><p>It is no longer possible to begin a line with a contextual static member lookup (for example, to say <code>.staticVar = MyType()</code>). (20238557) </p></li><li class="li"><p>Code generation for large struct and enum types has been improved to reduce code size. (20598289)</p></li><li class="li"><p>Nonmutating methods of structs, enums, and protocols may now be partially applied to their <code>self</code> parameter:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let a: Set&lt;Int&gt; = [1, 2, 3]<span></span></pre></td></tr><tr><td scope="row"><pre>let b: [Set&lt;Int&gt;] = [[1], [4]]<span></span></pre></td></tr><tr><td scope="row"><pre>b.map(a.union) // =&gt; [[1, 2, 3], [1, 2, 3, 4]]<span></span></pre></td></tr></table></div><p>(21091944)</p></li><li class="li"><p>Swift documentation comments recognize a new top-level list item:</p><div class="codesample clear"><table><tr><td scope="row"><pre>- Throws: ...<span></span></pre></td></tr></table></div><p>This item is used to document what errors can be thrown and why. The documentation appears alongside parameters and return descriptions in Xcode QuickHelp. (21621679)</p></li><li class="li"><p>Unnamed parameters now require an explicit <code>_:</code> to indicate that they are unnamed. For example, the following is now an error:</p><p><code>func f(Int) { }</code></p><p>and must be written as:</p><p><code>func f(_: Int) { }</code></p><p>This simplifies the argument label model and also clarifies why cases like <code>func f((a: Int, b: Int))</code> do not have parameters named “<code>a</code>” and “<code>b</code>.” (16737312)</p></li><li class="li"><p>It is now possible to append a tuple to an array. (17875634)</p></li><li class="li"><p>The ability to refer to the 0 element of a scalar value (producing the scalar value itself) has been removed. (17963034)</p></li><li class="li"><p>Variadic parameters can now appear anywhere in the parameter list for a function or initializer. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func doSomethingToValues(values: Int... , options: MyOptions = [], fn: (Int) -&gt;; Void) { … }<span></span></pre></td></tr></table></div><p>(20127197)</p></li><li class="li"><p>Generic subclasses of Objective-C classes are now supported. (18505295)</p></li><li class="li"><p>If an element of an enum with string raw type does not have an explicit raw value, it will default to the text of the enum’s name. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>enum WorldLayer : String {<span></span></pre></td></tr><tr><td scope="row"><pre>    case Ground, BelowCharacter, Character<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>is equivalent to:</p><div class="codesample clear"><table><tr><td scope="row"><pre>enum WorldLayer : String {<span></span></pre></td></tr><tr><td scope="row"><pre>    case Ground = "Ground"<span></span></pre></td></tr><tr><td scope="row"><pre>    case BelowCharacter = "BelowCharacter"<span></span></pre></td></tr><tr><td scope="row"><pre>    case Character = "Character"<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(15819953)</p></li><li class="li"><p>The <code>performSelector</code> family of APIs is now available for Swift code. (17227475)</p></li><li class="li"><p>When delegating or chaining to a failable initializer (for example, with <code>self.init(…)</code> or <code>super.init(…)</code>), one can now force-unwrap the result with “<code>!</code>.” For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>extension UIImage {<span></span></pre></td></tr><tr><td scope="row"><pre>  enum AssetIdentifier: String {<span></span></pre></td></tr><tr><td scope="row"><pre>    case Isabella<span></span></pre></td></tr><tr><td scope="row"><pre>    case William<span></span></pre></td></tr><tr><td scope="row"><pre>    case Olivia<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>  convenience init(assetIdentifier: AssetIdentifier) {<span></span></pre></td></tr><tr><td scope="row"><pre>    self.init(named: assetIdentifier.rawValue)!<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(18497407)</p></li><li class="li"><p>Initializers can now be referenced like static methods by referring to <code>.init</code> on a static type reference or type object. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let x = String.init(5)<span></span></pre></td></tr><tr><td scope="row"><pre>let stringType = String.self<span></span></pre></td></tr><tr><td scope="row"><pre>let y = stringType.init(5)<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>let oneTwoThree = [1, 2, 3].map(String.init).reduce("”, combine: +)<span></span></pre></td></tr></table></div><p><code>.init</code> is still implicit when constructing using a static type, as in <code>String(5)</code>. <code>.init</code> is required when using dynamic type objects or when referring to the initializer as a function value. (21375845)</p></li><li class="li"><p>Enums and cases can now be marked <code>indirect</code>, which causes the associated value for the enum to be stored indirectly, allowing for recursive data structures to be defined. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>enum List&lt;T&gt; {<span></span></pre></td></tr><tr><td scope="row"><pre>  case Nil<span></span></pre></td></tr><tr><td scope="row"><pre>  indirect case Cons(head: T, tail: List&lt;T&gt;)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>indirect enum Tree&lt;T&gt; {<span></span></pre></td></tr><tr><td scope="row"><pre>  case Leaf(T)<span></span></pre></td></tr><tr><td scope="row"><pre>  case Branch(left: Tree&lt;T&gt;, right: Tree&lt;T&gt;)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(21643855)</p></li><li class="li"><p>Formatting for Swift expression results has changed significantly when using <code>po</code> or <code>expr -O</code>. Customization that was introduced has been refined in the following ways:</p><ul class="nested"><li class="nested li"><p>The formatted summary provided by either <code>debugDescription</code> or <code>description</code> methods will always be used for types that conform to <code>CustomDebugStringConvertible</code> or <code>CustomStringConvertible</code> respectively.  When neither conformance is present, the type name is displayed and reference types also display the referenced address to more closely mimic existing behavior for Objective-C classes.</p></li><li class="nested li"><p>Value types such as enums, tuples, and structs display all members indented below the summary by default, while reference types will not.  This behavior can be customized for all types by implementing <code>CustomReflectable</code>.</p></li></ul><p>These output customizations can be bypassed by using <code>p</code> or <code>expr</code> without the <code>-O</code> argument to provide a complete list of all fields and their values. (21463866)</p></li><li class="li"><p>Properties and methods using <code>Unmanaged</code> can now be exposed to Objective-C. (16832080)</p></li><li class="li"><p>Applying the <code>@objc</code> attribute to a class changes that class’s compile-time name in the target’s generated Objective-C header as well as changing its runtime name. This applies to protocols as well. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>// Swift<span></span></pre></td></tr><tr><td scope="row"><pre>@objc(MyAppDelegate)<span></span></pre></td></tr><tr><td scope="row"><pre>class AppDelegate : NSObject, UIApplicationDelegate {<span></span></pre></td></tr><tr><td scope="row"><pre>  // ...<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>// Objective-C<span></span></pre></td></tr><tr><td scope="row"><pre>@interface MyAppDelegate : NSObject &lt;UIApplicationDelegate&gt;<span></span></pre></td></tr><tr><td scope="row"><pre>  // ...<span></span></pre></td></tr><tr><td scope="row"><pre>@end<span></span></pre></td></tr></table></div><p>(17469485)</p></li><li class="li"><p>Collections containing types that are not Objective-C compatible are no longer considered Objective-C compatible types themselves. </p><p>For example, previously <code>Array&lt;SwiftClassType&gt;</code> was permitted as the type of a property marked <code>@objc</code>; this is no longer the case. (19787270)</p></li><li class="li"><p>Generic subclasses of Objective-C classes, as well as nongeneric classes that inherit from such a class, require runtime metadata instantiation and cannot be directly named from Objective-C code. </p><p>When support for generic subclasses of Objective-C classes was first added, the generated Objective-C bridging header erroneously listed such classes, which, when used, could lead to incorrect runtime behavior or compile-time errors. This has been fixed.</p><p>The behavior of the <code>@objc</code> attribute on a class has been clarified such that applying <code>@objc</code> to a class which cannot appear in a bridging header is now an error. </p><p>Note that this change does not result in a change of behavior with valid code because members of a class are implicitly <code>@objc</code> if any superclass of the class is an <code>@objc</code> class, and all <code>@objc</code> classes must inherit from <code>NSObject</code>. (21342574)</p></li><li class="li"><p>The performance of <code>-Onone</code> (debug) builds has been improved by using prespecialized instances of generics in the standard library. It produces significantly faster executables in debug builds in many cases, without impacting compile time.  (20486658)</p></li><li class="li"><p><code>AnyObject</code> and <code>NSObject</code> variables that refer to class objects can be cast back to class object types. For example, this code succeeds:</p><div class="codesample clear"><table><tr><td scope="row"><pre>  let x: AnyObject = NSObject.self<span></span></pre></td></tr><tr><td scope="row"><pre>  let y = x as! NSObject.Type<span></span></pre></td></tr></table></div><p>Arrays, dictionaries, and sets that contain class objects successfully bridge with <code>NSArray</code>, <code>NSDictionary</code>, and <code>NSSet</code> as well. Objective-C APIs that provide <code>NSArray&lt;Class&gt; *</code> objects, such as <code>-[NSURLSessionConfiguration protocolClasses]</code>, now work correctly when used in Swift. (16238475)</p></li><li class="li"><p><code>print()</code> and reflection via Mirrors is able to report both the current case and payload for all enums with multiple payload types. The only remaining enum types that do not support reflection are <code>@objc</code> enums and enums imported from C. (21739870)</p></li><li class="li"><p>Enum cases with payloads can be used as functions. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>enum Either&lt;T, U&gt; { case Left(T), Right(U) }<span></span></pre></td></tr><tr><td scope="row"><pre>let lefts: [Either&lt;Int, String&gt;] = [1, 2, 3].map(Either.Left)<span></span></pre></td></tr><tr><td scope="row"><pre>let rights: [Either&lt;Int, String&gt;] = [“one”, “two”, “three”].map(Either.Right)<span></span></pre></td></tr></table></div><p>(19091028)</p></li><li class="li"><p><code>ExtensibleCollectionType</code> has been folded into <code>RangeReplaceableCollectionType</code>. In addition, default implementations have been added as methods, which should be used instead of the free Swift module functions related to these protocols. (18220295)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW341" title="Swift Standard Library"></a><h5 class="jump">Swift Standard Library</h5><ul class="ul"><li class="li"><p>The standard library moved many generic global functions (such as <code>map</code>, <code>filter</code>, and <code>sort</code>) to be methods written with protocol extensions. This allows those methods to be pervasively available on all sequence and collection types and allowed the removal of the global functions. </p></li><li class="li"><p>Deprecated enum elements no longer affect the names of nondeprecated elements when an Objective-C enum is imported into Swift. This may cause the Swift names of some enum elements to change. (17686122)</p></li><li class="li"><p>All enums imported from C are <code>RawRepresentable</code>, including those not declared with <code>NS_ENUM</code> or <code>NS_OPTIONS</code>. As part of this change, the value property of such enums has been renamed <code>rawValue</code>. (18702016)</p></li><li class="li"><p>Swift documentation comments use a syntax based on the Markdown format, aligning them with rich comments in playgrounds.</p><ul class="nested"><li class="nested li"><p>Outermost list items are interpreted as special fields and are highlighted in Xcode QuickHelp.</p></li><li class="nested li"><p>There are two methods of documenting parameters: parameter outlines and separate parameter fields. You can mix and match these forms as you see fit in any order or continuity throughout the doc comment. Because these are parsed as list items, you can nest arbitrary content underneath them.</p></li><li class="nested li"><p>Parameter outline syntax:</p><div class="codesample clear"><table><tr><td scope="row"><pre>- Parameters:<span></span></pre></td></tr><tr><td scope="row"><pre>  - x: ...<span></span></pre></td></tr><tr><td scope="row"><pre>  - y: ...<span></span></pre></td></tr></table></div></li><li class="nested li"><p>Separate parameter fields:</p><div class="codesample clear"><table><tr><td scope="row"><pre>- parameter x: ...<span></span></pre></td></tr><tr><td scope="row"><pre>- parameter y: ...<span></span></pre></td></tr></table></div></li><li class="nested li"><p>Documenting return values:</p><div class="codesample clear"><table><tr><td scope="row"><pre>- returns: ...<span></span></pre></td></tr></table></div></li></ul><p>Other special fields are highlighted in QuickHelp, as well as rendering support for all of Markdown. (20180161)</p></li><li class="li"><p>The <code>CFunctionPointer&lt;T -&gt; U&gt;</code> type has been removed. C function types are specified using the new <code>@convention(c)</code> attribute. Like other function types, <code>@convention(c) T -&gt; U</code> is not <code>nullable</code> unless made optional. The <code>@objc_block</code> attribute for specifying block types has also been removed and replaced with <code>@convention(block)</code>. </p></li><li class="li"><p>Methods and functions have the same rules for parameter names. You can omit providing an external parameter name with “<code>_.</code>”  To further simplify the model, the shorthand “<code>#</code>” for specifying a parameter name has been removed, as have the special rules for default arguments.</p><div class="codesample clear"><table><tr><td scope="row"><pre>Declaration<span></span></pre></td></tr><tr><td scope="row"><pre>  func printFunction(str: String, newline: Bool)<span></span></pre></td></tr><tr><td scope="row"><pre>  func printMethod(str: String, newline: Bool)<span></span></pre></td></tr><tr><td scope="row"><pre>  func printFunctionOmitParameterName(str: String, _  newline: Bool)<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>Call<span></span></pre></td></tr><tr><td scope="row"><pre>  printFunction("hello", newline: true)<span></span></pre></td></tr><tr><td scope="row"><pre>  printMethod("hello", newline: true)<span></span></pre></td></tr><tr><td scope="row"><pre>  printFunctionOmitParameterName("hello", true)<span></span></pre></td></tr></table></div><p>(17218256)</p></li><li class="li"><p><code>NS_OPTIONS</code> types get imported as conforming to the <code>OptionSetType</code> protocol, which presents a set-like interface for options. Instead of using bitwise operations such as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>// Swift 1.2:<span></span></pre></td></tr><tr><td scope="row"><pre>object.invokeMethodWithOptions(.OptionA | .OptionB)<span></span></pre></td></tr><tr><td scope="row"><pre>object.invokeMethodWithOptions(nil)<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>if options @ .OptionC == .OptionC {<span></span></pre></td></tr><tr><td scope="row"><pre>  // .OptionC is set<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Option sets support set literal syntax, and set-like methods such as <code>contains</code>:</p><div class="codesample clear"><table><tr><td scope="row"><pre>object.invokeMethodWithOptions([.OptionA, .OptionB])<span></span></pre></td></tr><tr><td scope="row"><pre>object.invokeMethodWithOptions([])<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>if options.contains(.OptionC) {<span></span></pre></td></tr><tr><td scope="row"><pre>  // .OptionC is set<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>A new option set type can be written in Swift as a struct that conforms to the <code>OptionSetType</code> protocol. If the type specifies a <code>rawValue</code> property and option constants as static <code>let</code> constants, the standard library will provide default implementations of the rest of the option set API:</p><div class="codesample clear"><table><tr><td scope="row"><pre>struct MyOptions: OptionSetType {<span></span></pre></td></tr><tr><td scope="row"><pre>  let rawValue: Int<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>  static let TuringMachine  = MyOptions(rawValue: 1)<span></span></pre></td></tr><tr><td scope="row"><pre>  static let LambdaCalculus = MyOptions(rawValue: 2)<span></span></pre></td></tr><tr><td scope="row"><pre>  static let VonNeumann     = MyOptions(rawValue: 4)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>let churchTuring: MyOptions = [.TuringMachine, .LambdaCalculus]<span></span></pre></td></tr></table></div><p>(18069205)</p></li><li class="li"><p>Type annotations are no longer allowed in patterns and are considered part of the outlying declaration. This means that code previously written as:</p><p><code>var (a : Int, b : Float) = foo()</code></p><p>needs to be written as:</p><p><code>var (a,b) : (Int, Float) = foo()</code></p><p>if an explicit type annotation is needed. The former syntax was ambiguous with tuple element labels. (20167393)</p></li><li class="li"><p>The <code>do/while</code> loop is renamed to <code>repeat/while</code> to make it obvious whether a statement is a loop from its leading keyword.</p><p>In Swift 1.2:</p><div class="codesample clear"><table><tr><td scope="row"><pre>do {<span></span></pre></td></tr><tr><td scope="row"><pre>...<span></span></pre></td></tr><tr><td scope="row"><pre>} while &lt;condition&gt;<span></span></pre></td></tr></table></div><p>In Swift 2.0:</p><div class="codesample clear"><table><tr><td scope="row"><pre>repeat {<span></span></pre></td></tr><tr><td scope="row"><pre>...<span></span></pre></td></tr><tr><td scope="row"><pre>} while &lt;condition&gt;<span></span></pre></td></tr></table></div><p>(20336424)</p></li><li class="li"><p><code>forEach</code> has been added to <code>SequenceType</code>. This lets you iterate over elements of a sequence, calling a body closure on each. For example: </p><div class="codesample clear"><table><tr><td scope="row"><pre>(0..&lt;10).forEach {<span></span></pre></td></tr><tr><td scope="row"><pre>  print($0)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>This is very similar to the following:</p><div class="codesample clear"><table><tr><td scope="row"><pre>for x in 0..&lt;10 {<span></span></pre></td></tr><tr><td scope="row"><pre>  print(x)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>But take note of the following differences:</p><ul class="nested"><li class="nested li"><p>Unlike <code>for-in</code> loops, you can’t use <code>break</code> or <code>continue</code> to exit the current call of the body closure or skip subsequent calls.</p></li><li class="nested li"><p>Also unlike <code>for-in</code> loops, using <code>return</code> in the body closure only exits from the current call to the closure, not any outer scope, and won’t skip subsequent calls.</p></li></ul><p>(18231840)</p></li><li class="li"><p>The <code>Word</code> and <code>UWord</code> types have been removed from the standard library; use <code>Int</code> and <code>UInt</code> instead. (18693488)</p></li><li class="li"><p>Most standard library APIs that take closures or <code>@autoclosure</code> parameters now use “rethrows.” This allows the closure parameters to methods like <code>map</code> and <code>filter</code> to throw errors, and allows short-circuiting operators like <code>&amp;&amp;</code>, <code>||</code>, and <code>??</code> to work with expressions that may produce errors. (21345565)</p></li><li class="li"><p>SIMD improvements: Integer vector types in the <code>simd</code> module now only support unchecked arithmetic with wraparound semantics using the <code>&amp;+</code>, <code>&amp;-</code>, and <code>&amp;*</code> operators, in order to better support the machine model for vectors. The <code>+</code>, <code>-</code>, and <code>*</code> operators are unavailable on integer vectors, and Xcode automatically suggests replacing them with the wrapping operators.</p><p>Code generation for vector types in the <code>simd</code> module has been improved to better utilize vector hardware, leading to dramatically improved performance in many cases. (21574425)</p></li><li class="li"><p>All <code>CollectionType</code> objects are now sliceable. <code>SequenceType</code> now has a notion of <code>SubSequence</code>, which is a type that represents only some of the values but in the same order. For example, the <code>Array</code><code>SubSequence</code> type is <code>ArraySlice</code>, which is an efficient view on the <code>Array</code> type’s buffer that avoids copying as long as it uniquely references the <code>Array</code> from which it came.</p><p>The following free Swift functions for splitting/slicing sequences have been removed and replaced by method requirements on the <code>SequenceType</code> protocol with default implementations in protocol extensions. <code>CollectionType</code> has specialized implementations, where possible, to take advantage of efficient access of its elements.</p><div class="codesample clear"><table><tr><td scope="row"><pre>/// Returns the first `maxLength` elements of `self`,<span></span></pre></td></tr><tr><td scope="row"><pre>/// or all the elements if `self` has fewer than `maxLength` elements.<span></span></pre></td></tr><tr><td scope="row"><pre>prefix(maxLength: Int) -&gt; SubSequence<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>/// Returns the last `maxLength` elements of `self`,<span></span></pre></td></tr><tr><td scope="row"><pre>/// or all the elements if `self` has fewer than `maxLength` elements.<span></span></pre></td></tr><tr><td scope="row"><pre>suffix(maxLength: Int) -&gt; SubSequence<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>/// Returns all but the first `n` elements of `self`.<span></span></pre></td></tr><tr><td scope="row"><pre>dropFirst(n: Int) -&gt; SubSequence<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>/// Returns all but the last `n` elements of `self`.<span></span></pre></td></tr><tr><td scope="row"><pre>dropLast(n: Int) -&gt; SubSequence<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>/// Returns the maximal `SubSequence`s of `self`, in order, that<span></span></pre></td></tr><tr><td scope="row"><pre>/// don't contain elements satisfying the predicate `isSeparator`.<span></span></pre></td></tr><tr><td scope="row"><pre>split(maxSplits maxSplits: Int, allowEmptySlices: Bool, @noescape isSeparator: (Generator.Element) -&gt; Bool) -&gt; [SubSequence]<span></span></pre></td></tr></table></div><p>The following convenience extension is provided for <code>split</code>:</p><p><code>split(separator: Generator.Element, maxSplit: Int, allowEmptySlices: Bool) -&gt; [SubSequence]</code></p><p>Also, new protocol requirements and default implementations on <code>CollectionType</code> are now available:</p><div class="codesample clear"><table><tr><td scope="row"><pre>/// Returns `self[startIndex..&lt;end]`<span></span></pre></td></tr><tr><td scope="row"><pre>prefixUpTo(end: Index) -&gt; SubSequence<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>/// Returns `self[start..&lt;endIndex]`<span></span></pre></td></tr><tr><td scope="row"><pre>suffixFrom(start: Index) -&gt; SubSequence<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>/// Returns `prefixUpTo(position.successor())`<span></span></pre></td></tr><tr><td scope="row"><pre>prefixThrough(position: Index) -&gt; SubSequence<span></span></pre></td></tr></table></div><p>(21663830)</p></li><li class="li"><p>The <code>print</code> and <code>debugPrint</code> functions are improved:</p><ul class="nested"><li class="nested li"><p>Both functions have become variadic, and you can print any number of items with a single call.</p></li><li class="nested li"><p><code>separator: String = " "</code> was added so you can control how the items are separated. </p></li><li class="nested li"><p><code>terminator: String = "\n"</code> replaced <code>appendNewline: bool = true</code>.  With this change, </p><p><code>print(x, appendNewline: false)</code> is expressed as <code>print(x, terminator: "")</code>.</p></li><li class="nested li"><p>For the variants that take an output stream, the argument label <code>toStream</code> was added to the stream argument.</p></li></ul><p>The <code>println</code> function from Swift 1.2 has been removed. (21788540)</p></li><li class="li"><p>For consistency and better composition of generic code, <code>ArraySlice</code> indices are no longer always zero-based but map directly onto the indices of the collection they are slicing and maintain that mapping even after mutations.</p><p>Before:</p><div class="codesample clear"><table><tr><td scope="row"><pre>var a = Array(0..&lt;10)<span></span></pre></td></tr><tr><td scope="row"><pre>var s = a[5..&lt;10]<span></span></pre></td></tr><tr><td scope="row"><pre>s.indices        // 0..&lt;5<span></span></pre></td></tr><tr><td scope="row"><pre>s[0] = 111<span></span></pre></td></tr><tr><td scope="row"><pre>s                // [111, 6, 7, 8, 9]<span></span></pre></td></tr><tr><td scope="row"><pre>s.removeFirst()<span></span></pre></td></tr><tr><td scope="row"><pre>s.indices        // 1..&lt;5<span></span></pre></td></tr></table></div><p>After:</p><div class="codesample clear"><table><tr><td scope="row"><pre>var a = Array(0..&lt;10)<span></span></pre></td></tr><tr><td scope="row"><pre>var s = a[5..&lt;10]<span></span></pre></td></tr><tr><td scope="row"><pre>s.indices        // 5..&lt;10<span></span></pre></td></tr><tr><td scope="row"><pre>s[5] = 99<span></span></pre></td></tr><tr><td scope="row"><pre>s                // [99, 6, 7, 8, 9]<span></span></pre></td></tr><tr><td scope="row"><pre>s.removeFirst()<span></span></pre></td></tr><tr><td scope="row"><pre>s.indices        // 6..&lt;10<span></span></pre></td></tr></table></div><p>Rather than define variants of collection algorithms that take explicit subrange arguments, such as <code>a.sortSubrangeInPlace(3..&lt;7)</code>, the Swift standard library provides “slicing,” which composes well with algorithms. This enables you to write <code>a[3..&lt;7].sortInPlace()</code>, for example. With most collections, these algorithms compose naturally. </p><p>For example, before this change was incorporated:</p><div class="codesample clear"><table><tr><td scope="row"><pre>extension MyIntCollection {<span></span></pre></td></tr><tr><td scope="row"><pre>  func prefixThroughFirstNegativeSubrange() -&gt; SubSequence {<span></span></pre></td></tr><tr><td scope="row"><pre>    // Find the first negative element<span></span></pre></td></tr><tr><td scope="row"><pre>    let firstNegative = self.indexOf { $0 &lt; 0 } ?? endIndex<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>    // Slice off non-negative prefix<span></span></pre></td></tr><tr><td scope="row"><pre>    let startsWithNegative = self.suffixFrom(firstNegative)<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>    // Find the first non-negative position in the slice<span></span></pre></td></tr><tr><td scope="row"><pre>    let end = startsWithNegative.indexOf { $0 &gt;= 0 } ?? endIndex<span></span></pre></td></tr><tr><td scope="row"><pre>    return self[startIndex..&lt;end]<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>The above code would work for any collection of <code>Ints</code> unless the collection is an <code>Array&lt;Int&gt;</code>. Unfortunately, when array slice indices are zero-based, the last two lines of the method need to change to:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let end = startsWithNegative.indexOf { $0 &gt;= 0 }<span></span></pre></td></tr><tr><td scope="row"><pre>  ?? startsWithNegative.endIndex<span></span></pre></td></tr><tr><td scope="row"><pre>return self[startIndex..&lt;end + firstNegative]<span></span></pre></td></tr></table></div><p>These differences made working with slices awkward, error-prone, and nongeneric.</p><p>After this change, Swift collections start to provide a guarantee that, at least until there is a mutation, slice indices are valid in the collection from which they were sliced, and refer to the same elements. (21866825)</p></li><li class="li"><p>The method <code>RangeReplaceableCollectionType.extend()</code> was renamed to <code>appendContentsOf()</code>, and the <code>splice()</code> method was renamed to <code>insertContentsOf()</code>. (21972324)</p></li><li class="li"><p><code>find</code> has been renamed to <code>indexOf()</code>, <code>sort</code> has been renamed to <code>sortInPlace()</code>, and <code>sorted()</code> becomes <code>sort()</code>. </p></li><li class="li"><p><code>String.toInt()</code> has been renamed to a failable <code>Int(String)</code> initializer, since initialization syntax is the preferred style for type conversions. </p></li><li class="li"><p><code>String</code> no longer conforms to <code>SequenceType</code> in order to prevent non-Unicode correct sequence algorithms from being prominently available on <code>String</code>. To perform grapheme-cluster-based, UTF8-based, or UTF-16-based algorithms, use the <code>.characters</code>, <code>.utf8</code>, and <code>.utf16</code> projections respectively. </p></li><li class="li"><p>Generic functions that declare type parameters not used within the generic function’s type produce a compiler error. For example:</p><p><code>func foo&lt;T&gt;() { } // error: generic parameter ’T’ is not used in function signature</code></p><p></p></li><li class="li"><p>The  <code>Dictionary.removeAtIndex(_:)</code> method now returns the key-value pair being removed as a two-element tuple (rather than returning <code>Void</code>). Similarly, the   <code>Set.removeAtIndex(_:)</code> method returns the element being removed. (20299881)</p></li><li class="li"><p>Generic parameters on types in the Swift standard library have been renamed to reflect the role of the types in the API. For example, <code>Array&lt;T&gt;</code> became <code>Array&lt;Element&gt;</code>, <code>UnsafePointer&lt;T&gt;</code> became <code>UnsafePointer&lt;Memory&gt;</code>, and so forth. (21429126)</p></li><li class="li"><p>The <code>SinkType</code> protocol and <code>SinkOf</code> struct have been removed from the standard library in favor of <code>(T) -&gt; ()</code> closures. (21663799)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW342" title="Objective-C"></a><h4 class="jump">Objective-C</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW343" title="Objective-C Language Changes"></a><h5 class="jump">Objective-C Language Changes</h5><ul class="ul"><li class="li"><p>C functions that return Core Foundation objects via out-parameters can now describe whether the object is returned at +0 or +1.</p><div class="codesample clear"><table><tr><td scope="row"><pre>OSStatus MyCFGetImportantValue(CFDictionaryRef data,<span></span></pre></td></tr><tr><td scope="row"><pre>  CFStringRef __nullable * __nonnull CF_RETURNS_NOT_RETAINED outImportantValue);<span></span></pre></td></tr><tr><td scope="row"><pre>OSStatus MyCFCopyImportantValue(CFDictionaryRef data,<span></span></pre></td></tr><tr><td scope="row"><pre>  CFStringRef __nullable * __nonnull CF_RETURNS_RETAINED outImportantValue);<span></span></pre></td></tr></table></div><p>(18742441)</p></li><li class="li"><p>A <code>__kindof</code> type has been introduced. Objects declared as <code>__kindof</code> types behave like a mix of <code>id</code> and a specific object type: They specify an upper bound (for example, must be <code>UIView</code> or a subclass thereof) but allow implicit downcasting to any subtype of that upper bound. For example, if we assume that </p><p><code>-[UIView subviewWithTag:]</code></p><p>produces a <code>__kindof</code> type <code>UIView *</code>, then:</p><div class="codesample clear"><table><tr><td scope="row"><pre>UIButton *button = [view subviewWithTag:0];       // okay: UIButton is a UIView<span></span></pre></td></tr><tr><td scope="row"><pre>[[view subviewWithTag:0] setTitle:@"Bounded" forState: UIControlStateNormal];<span></span></pre></td></tr><tr><td scope="row"><pre>                                                  // okay: method found in UIButton<span></span></pre></td></tr><tr><td scope="row"><pre>UIResponder *responder = [view subviewWithTag:0]; // okay: UIView is a UIResponder<span></span></pre></td></tr><tr><td scope="row"><pre>NSString *string = [view subviewWithTag:0];       // error: UIView is unrelated to NSString<span></span></pre></td></tr></table></div><p>(19589424)</p></li><li class="li"><p>The double-underscored nullability qualifiers (<code>__nullable</code>, <code>__nonnull</code>, and <code>__null_unspecified</code>) have been renamed to use a single underscore with a capital letter:<code>_Nullable</code>, <code>_Nonnull</code>, and <code>_Null_unspecified</code>, respectively). The compiler predefines macros mapping from the old double-unspecified names to the new names for source compatibility. (21530726)</p></li><li class="li"><p>Lightweight generics now allow you to specify type information for collection classes such as <code>NSArray</code>, <code>NSSet</code>, and <code>NSDictionary</code>. The type information improves Swift access when you bridge from Objective-C, and simplifies the code you have to write.  For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>NSArray&lt;UIImage *&gt; *images;<span></span></pre></td></tr><tr><td scope="row"><pre>NSDictionary&lt;NSString *, NSURL *&gt; *resourcesByName;<span></span></pre></td></tr></table></div><p>(6294649)</p></li><li class="li"><p>The <code>NS_SWIFT_NAME</code> macro can be used to control the imports of enumerations whose constants don’t map cleanly to Swift. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>typedef NS_ENUM(NSInteger, DisplayMode) {<span></span></pre></td></tr><tr><td scope="row"><pre>  DisplayMode256Colors NS_SWIFT_NAME(With256Colors),<span></span></pre></td></tr><tr><td scope="row"><pre>  DisplayModeThousandsOfColors,<span></span></pre></td></tr><tr><td scope="row"><pre>  DisplayModeMillionsOfColors<span></span></pre></td></tr><tr><td scope="row"><pre>};<span></span></pre></td></tr></table></div><p>is imported into Swift as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>@objc enum DisplayMode : Int {<span></span></pre></td></tr><tr><td scope="row"><pre>  case With256Colors<span></span></pre></td></tr><tr><td scope="row"><pre>  case ThousandsOfColors<span></span></pre></td></tr><tr><td scope="row"><pre>  case MillionsOfColors<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>The macro can also be used to control whether factory methods are imported as initializers. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>@interface MyController : UIViewController<span></span></pre></td></tr><tr><td scope="row"><pre>+ (instancetype)standardControllerForURLKind:(URLKind)kind NS_SWIFT_NAME(init(URLKind:));<span></span></pre></td></tr><tr><td scope="row"><pre>@end<span></span></pre></td></tr></table></div><p>will be imported into Swift as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>class MyController : UIViewController {<span></span></pre></td></tr><tr><td scope="row"><pre>  init(URLKind kind: URLKind)<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>even though its name does not follow the convention for automatic factory method importing. (19240897)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW344" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><p>Issues resolved in Xcode 7.0 since Xcode 6.4</p><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW345" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>You can create multiple storyboards for WatchKit interfaces.  (19781408)</p></li><li class="li"><p>Interface Builder allows subclassing all segue types.  (19911504)</p></li><li class="li"><p>Interface Builder enables setting the <code>accessiblityIdentifier</code> property of <code>AppKit</code> and <code>UIKit</code> views, via the Identity inspector.  (8913778)</p></li><li class="li"><p><code>NSBox</code> now stores its content view in Interface Builder documents, which also enables alignment guides between the box and its subviews.  (10726996)</p></li><li class="li"><p>Interface Builder documents with a development target less than or equal to Xcode 4.6 are upgraded when opening.  (12984639)</p></li><li class="li"><p>Interface Builder allows setting an identifier for an auto layout constraint to assist in debugging unsatisfiable constraints.  (13645911)</p></li><li class="li"><p>Alignment and distribution commands in Interface Builder can be used without generating constraints.  (19223827)</p></li><li class="li"><p>Resize knobs for views on the canvas are able to be interacted with outside the canvas frame.  (15864964)</p></li><li class="li"><p>Interface Builder supports connecting actions from trigger points on the sender other than <code>action</code> (such as <code>doubleAction</code>) in OS X documents. Xcode 7 also changes how connected actions are displayed in the Connections inspector for OS X documents to match iOS, and enables showing multiple connected actions.  (2161960)</p></li><li class="li"><p>The template for Radio buttons in the Interface Builder object library is now implemented as individual <code>NSButton</code> objects, rather than the older <code>NSMatrix</code>, which is discouraged on OS X v10.8 and later. Radio buttons automatically act as a group (selecting one button will unselect all other related buttons) when they have the same superview and <code>-action</code> method.  (16965941)</p></li><li class="li"><p><code>initWithNibName:bundle:</code> is set as a designated initializer for <code>UITableViewController</code> in the iOS 9 SDK.  (19775924)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW346" title="Building"></a><h5 class="jump">Building</h5><ul class="ul"><li class="li"><p>Run Script scheme actions take the run destination into account when passing environment variables, such as <code>SDKROOT</code>, that depend on the run destination.  (19652312)</p></li><li class="li"><p>It is possible to toggle all the checkboxes in a column in the Manage Schemes sheet by holding down the option key when toggling a checkbox.  (8096575)</p></li><li class="li"><p>A Copy Files build phase on a framework target with a destination of PlugIns copies its contents to the PlugIns directory in the framework rather than the Resources directory.  (11488493)</p></li><li class="li"><p>The <code>xcodebuild install</code> command, when used with <code>-scheme</code>, builds the target specified for the Archive action of that scheme rather than the Run action.  (19391445)</p></li><li class="li"><p>The Xcode build system supports stale file removal of some types of build artifacts that were produced in a previous build, but have since been removed from the project.</p><ul class="nested"><li class="nested li"><p>Stale files are removed when the next build detects that they are no longer needed.</p></li><li class="nested li"><p>Stale files appear in the build log navigator under a “Remove stale build products” section.</p></li><li class="nested li"><p>If removal of a stale file would cause its containing directory to become empty, the directory is removed as well.</p></li><li class="nested li"><p>The kinds of build artifacts which are currently handled by stale file removal are:</p><ul class="simple-spaceabove"><li><p>- Copied resources and header files</p></li><li><p>- On-demand resources in asset packs</p></li><li><p>- Module map specifications</p></li><li><p>- Swift generated API headers</p></li></ul></li><li class="nested li"><p>Only build artifacts produced in the <code>OBJROOT</code>, <code>SYMROOT</code>, or <code>DSTROOT</code> are available for stale file removal.</p></li></ul><p>(19479602)</p></li><li class="li"><p>Archive build operations use the <code>install</code> value for the <code>ACTION</code> build setting. Ramifications:</p><ul class="simple-spaceabove"><li><p>- Shell scripts can use this behavior to detect when Xcode is archiving versus building.</p></li><li><p>- Existing shell scripts which inspect the <code>ACTION</code> environment variable should be updated according.</p></li><li><p>- External build system targets are passed the <code>install</code> action instead of <code>build</code>, when archiving, and should be updated accordingly.</p></li><li><p>- External build system targets and aggregate targets with shell script build phases have the appropriate values of <code>TARGET_BUILD_DIR</code> and <code>BUILT_PRODUCTS_DIR</code> which point to appropriate installation location (and respect the <code>SKIP_INSTALL</code> build setting).</p></li></ul><p>(20192652)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW347" title="Simulator"></a><h5 class="jump">Simulator</h5><ul class="ul"><li class="li"><p>The Simulator Background Fetch menu item in Xcode works as expected.  (20145602)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW348" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>The view debugging tool has object inspectors for <code>NSView</code> and <code>UIView</code>.  (18120189)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW349" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Xcode allows the <code>IDEBuildOperationMaxNumberOfConcurrentCompileTasks</code> user default to exceed the number of CPUs available in the machine.  (20998547)</p></li><li class="li"><p>Localization settings made in a target’s scheme (as well as other settings made on the command line) are honored on launch in the Simulator.  (19490124)</p></li><li class="li"><p>Xcode 7 fixes a crash that occurred when a document is edited while an unlocking script is running for that same document.  (21528657)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW350" title="Known Issues"></a><h4 class="jump">Known Issues</h4><p>Known issues in Xcode 7.0</p><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW351" title="Swift"></a><h5 class="jump">Swift</h5><ul class="ul"><li class="li"><p>Using <code>switch</code> against multiple types with <code>as</code> patterns may cause a memory leak. For example, avoid this kind of <code>switch</code> statement:</p><div class="codesample clear"><table><tr><td scope="row"><pre>switch x {<span></span></pre></td></tr><tr><td scope="row"><pre>  case let a as A: ...<span></span></pre></td></tr><tr><td scope="row"><pre>  case let b as B: ...<span></span></pre></td></tr><tr><td scope="row"><pre>  case let c as C: ...<span></span></pre></td></tr><tr><td scope="row"><pre>  default: ...<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Rewrite the code to use <code>if let a = x as? A</code> statements instead of <code>switch</code>. This pattern performs type checks that avoid the memory leak. (22587077)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW352" title="Playgrounds"></a><h5 class="jump">Playgrounds</h5><ul class="ul"><li class="li"><p>Playgrounds created by previous versions of Xcode may not be upgradable to Swift 2.  </p><p>Choose Editor &gt; Upgrade Playground to upgrade the playground before attempting to it convert to Swift 2.  (20902099)</p></li><li class="li"><p>Opening a playground that was previously displaying the Version editor may present an alert stating, “The file &lt;filename&gt; couldn’t be opened because you don’t have permission to view it.”</p><p>Dismiss the alert dialog and show the Standard editor.  (20623808)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW353" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>Setting the Semantic attribute of views in Interface Builder has no effect at runtime.</p><p>Create an outlet to the view for which you wish to change the Semantic attribute, then set the attribute programmatically in <code>awakeFromNib</code>. (22529786)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW354" title="Localization"></a><h5 class="jump">Localization</h5><ul class="ul"><li class="li"><p>During <code>XLIFF</code> export or import, <code>NSLocalizedString</code> macro issues or empty strings files may result in an error, “The data couldn’t be read because it isn’t in the correct format."</p><p>Remove empty strings files from your project or use the following Terminal command to find <code>NSLocalizedString</code> macro issues in your project.</p><p><code>$find &lt;project directory&gt; -name "*.m" -exec xcrun extractLocStrings {} \;</code></p><p>(21101899)</p></li><li class="li"><p>UI elements on a Watch extension may appear in English despite the app being localized to a different language.</p><p>Localize all components of your Watch app, including its extension, to the desired language.  (22065581)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW355" title="Bitcode"></a><h5 class="jump">Bitcode</h5><ul class="ul"><li class="li"><p>Apps that include incorrectly-built bitcode in frameworks and libraries are rejected by the App Store. </p><p>If you are a provider of framework and library products for iOS, watchOS, and tvOS platforms, your products must include full bitcode content. The Xcode 7 build system defaults include enabling the Enable Bitcode build setting, but standard Debug or Release builds do not include the full bitcode content in the built framework and library products.</p><p>To build framework and library products for distribution and ensure that the full bitcode content is included, framework and library providers must:</p><ul class="nested"><li class="nested li"><p>Ensure that the Enable Bitcode build setting is correct (<code>ENABLE_BITCODE=YES</code>).</p></li><li class="nested li"><p>Perform either an Archive build or an Install build to produce framework and library products for distribution.</p></li></ul><p>(22483622)</p></li><li class="li"><p>Framework and library providers need to include bitcode for Xcode 7 development, and Xcode 7 generates bitcode by default. However, bitcode-enabled framework and library products do not work well with Xcode 6. If you still need to support Xcode 6 development, you must produce an additional version of your products without bitcode.</p><p>To build a library without bitcode, either use Xcode 7 with the build setting Enable Bitcode disabled (<code>ENABLE_BITCODE=NO</code>) or use Xcode 6. (22462511)</p></li><li class="li"><p>If you use supplied framework or library products and need to support Xcode 6 development, be sure that you are using the correct products from your supplier. Frameworks and libraries include bitcode when built for Xcode 7 development, but bitcode-enabled libraries do not work well with Xcode 6. The issues and fixes differ based on whether you are using static libraries or dynamic libraries. </p><p><strong>Static libraries.</strong> An attempt to use a bitcode-enabled static library with Xcode 6 generates linker errors about duplicate symbols such as <code>_llvm.embedded.module</code> and <code>_llvm.cmdline</code>. </p><p>You need a version of the static library built without bitcode to use it with Xcode 6.</p><p><strong>Dynamic libraries.</strong> An embedded framework with a dynamic library that contains bitcode does not lead to any errors with Xcode 6, but it increases the app size unnecessarily. </p><p>To avoid this issue with an existing framework, use the <code>bitcode_strip</code> command from Xcode 7 to remove bitcode from a copy of the framework. Using a Terminal window:</p><ol class="ol"><li class="li"><p><code>cd</code> to the framework directory.</p></li><li class="li"><p>Use <code>xcode-select</code> to choose Xcode 7 if you have multiple versions of Xcode installed.</p></li><li class="li"><p>Enter the following commands, substituting the framework's name for <code>{Framework}</code>:</p><div class="codesample clear"><table><tr><td scope="row"><pre>$ xcrun bitcode_strip -r {Framework}.dylib -o tmp.dylib<span></span></pre></td></tr><tr><td scope="row"><pre>$ mv tmp.dylib {Framework}.dylib<span></span></pre></td></tr></table></div></li></ol><p>(22462511)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW356" title="Building"></a><h5 class="jump">Building</h5><ul class="ul"><li class="li"><p>If your iOS app embeds a watchOS app and you have a framework for both iOS and watchOS embedded in each app, your project fails to build when you perform the Archive action.</p><p>Use a different product name (using the <code>PRODUCT_NAME</code> build setting) for the watchOS version of your framework.  (22183332)</p></li><li class="li"><p>When you create a watchOS framework in Xcode 7.0, a Watch Application is set as the embedding destination. This fails to install on devices because watchOS frameworks must be embedded in a Watch Extension target. </p><p>Remove the embedding of the framework into the Watch Application:</p><ol class="ol"><li class="li"><p>Select your project in the project navigator to open the project editor.</p></li><li class="li"><p>Select the Watch Application target.</p></li><li class="li"><p>Select the framework in the “Linked Frameworks and Libraries” list.</p></li><li class="li"><p>Click Delete (-) to remove the framework.</p></li></ol><p>After the framework has been removed from the Watch Application, configure it to be embedded into the Watch Extension:</p><ol class="ol"><li class="li"><p>Select your project in the project navigator to open the project editor.</p></li><li class="li"><p>Select the Watch Extension target.</p></li><li class="li"><p>Click Add (+) in the “Linked Frameworks and Libraries” list. </p></li><li class="li"><p>Select the framework from the displayed list.</p></li><li class="li"><p>Click Add.</p></li></ol><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW357" title="Note"></a><p><strong>Note:</strong>&nbsp;You may have to remove the build folder to ensure a clean rebuild after you've completed this reconfiguration.</p><p><ol class="ol"><li class="li"><p>Hold down the Option key.</p></li><li class="li"><p>Choose Product &gt; Clean Build Folder</p></li></ol></p></aside></div><p>(22522811)</p></li><li class="li"><p>watchOS frameworks are not configured by default to be app extension safe.</p><p>Because watchOS frameworks are used by Watch Extensions, they must be marked as app extension safe. After creating a watchOS framework target, set the <code>Require Only App-Extension-Safe API</code> build setting for the framework target to <code>Yes</code>. (22540012)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW358" title="Simulator"></a><h5 class="jump">Simulator</h5><ul class="ul"><li class="li"><p>In the Simulator, background upload/download using <code>NSURLSession</code> completes, but notifications do not badge the app to show completion when the app is in the background.</p><p>Testing on devices works as expected.  (16532261)</p></li><li class="li"><p>The Watch simulator may stop taking input after a reset or reboot.</p><p>If the Watch simulator doesn’t respond to the Home button event, quit and restart the Watch simulator.
(21135676)</p></li><li class="li"><p>Playing video to a simulated external display does not function correctly with Simulator running as an iPad.</p><p>Use Simulator running as an iPhone.  (17979778)</p></li><li class="li"><p>Video playback to a 1080p external display in Simulator renders at a lower resolution.</p><p>Play video at a lower resolution or test 1080p playback with a device.  (18296724)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW359" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>UI testing cannot identify elements using information from their accessibility title element.  </p><p>Set an accessibility identifier instead.  (20409319)</p></li><li class="li"><p>UI testing cannot record or interact with popovers on OS X.  (21162677)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW360" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>When Runtime Sanitization is enabled for an Xcode Server bot, detailed information about any crash triggered by sanitization checks is made available in the raw build log for the integration.  (21047341)</p></li><li class="li"><p>You cannot debug a watchOS 1 app extension in a project that also has watchOS 2 app built in the same iOS app.</p><p>Xcode prefers the watchOS 2 app when both are present, you need to remove the watchOS 2 app from the iOS app bundle to enable debugging the watchOS 1 app extension. Edit the Build Phases of the iOS App to remove the watchOS 2 app as a build dependency of the iOS app and remove it from the Embed Watch Content build phase. Clean the build products, and then Run to debug the watchOS 1 app extension.  (21173814)</p></li><li class="li"><p>While debugging an app that uses on-demand resources from Xcode, the progress of tag requests may reset to zero when moving the application to or from the foreground, or when changing the <code>loadingPriority</code> of an <code>NSBundleResourceRequest</code>.  (21882271)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW361" title="Source Control"></a><h5 class="jump">Source Control</h5><ul class="ul"><li class="li"><p>The Comparison and Blame view in the Versions editor may not produce results for playgrounds.  (21879794)</p></li><li class="li"><p>Passwords for source control accounts may appear empty in Xcode 7.</p><p>Reenter the password.  (21252258)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW362" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Xcode 7 does not support two-factor authentication. </p><p>Developers should continue to authenticate with their user name and password.  (19581582)</p></li><li class="li"><p>Restoring your device while Xcode is open may cause your device to appear as unavailable or locked after the restore is complete.</p><p>Unplug and plug in your device after a restore.  (21344895)</p></li><li class="li"><p>Using the devices window while running an app on a device from an archive, crash logs may not be symbolicated or may be only partially symbolicated.</p><p>Duplicate the dSYM file inside the archive’s dSYM folder and drag it to your desktop, and then wait a few minutes for Spotlight to index the symbols for you.  (21867829)</p></li><li class="li"><p>Crash logs for app extensions are not available in builds distributed via TestFlight. (22661518)</p></li></ul></section></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW363" title="Xcode 6"></a><h2 class="jump">Xcode 6</h2><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW364" title="Xcode 6.4"></a><h3 class="jump">Xcode 6.4</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW365" title="New Features"></a><h4 class="jump">New Features</h4><ul class="ul"><li class="li"><p>Xcode 6.4 includes the iOS 8.4 SDK to support development for iOS 8.4 apps.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW366" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW367" title="Instruments"></a><h5 class="jump">Instruments</h5><ul class="ul"><li class="li"><p>Shortly after the first build and run cycle in Xcode, Instruments may disable profiling, indicate that an iOS device is offline, and offer to open Xcode to enable the device for development.</p><p>Quit Instruments, open Xcode, choose Window &gt; Devices, and select the iOS device. If any tasks are listed as in progress, wait for them to complete and close the Devices window. Build and run the app from Xcode, then click Stop. Wait approximately one minute, then press Command-I to launch Instruments. The device should no longer appear offline and profiling should be enabled. (21412937)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW368" title="Xcode 6.3.2"></a><h3 class="jump">Xcode 6.3.2</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW369" title="Swift Compiler"></a><h4 class="jump">Swift Compiler</h4><ul class="ul"><li class="li"><p>Swift projects now compile quickly, fixing a speed regression in Xcode 6.3.1.</p><p>In Xcode 6.3.1, the Swift “Merge” compile phase could appear to hang for some targets. You no longer need to enable Whole Module Optimization in order to avoid this issue. (20638611)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW370" title="Xcode 6.3.1"></a><h3 class="jump">Xcode 6.3.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW371" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW372" title="Swift"></a><h5 class="jump">Swift</h5><ul class="ul"><li class="li"><p>Using Open Quickly, symbols from SDKs are available in projects and workspaces that use Swift. (20349540)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW373" title="Playgrounds"></a><h5 class="jump">Playgrounds</h5><ul class="ul"><li class="li"><p>Playgrounds with an invalid target platform value do not crash Xcode. (20327968)</p></li><li class="li"><p>Immediately selecting Undo upon opening a Playground does not set an invalid target platform value. (20327880)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW374" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>Using custom fonts in Storyboard and xib files does not cause Xcode to hang. (20476377)</p></li><li class="li"><p>When auto-layout is disabled, <code>NSTextView</code> nib restoration works correctly. (20523924)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW375" title="Debugger"></a><h5 class="jump">Debugger</h5><ul class="ul"><li class="li"><p>The Xcode debugger variables view does not omit values for the current frame when the current function comes from a Swift framework. (20380047)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW376" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>Swift tests are automatically discovered by Xcode. (20373533)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW377" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Archiving a project or workspace that is not under source control but that contains contents under source control does not crash Xcode. (20521089)</p></li><li class="li"><p>The Command Line Tools product includes the <code>__debug</code> header. (20523314)</p></li><li class="li"><p>Localized files can be renamed. (20490808)</p></li><li class="li"><p>Devices previously listed as "ineligible for running” erroneously are listed correctly. (20121178)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW378" title="Xcode 6.3"></a><h3 class="jump">Xcode 6.3</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW379" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW380" title="Crashes Organizer for App Store and TestFlight Users"></a><h5 class="jump">Crashes Organizer for App Store and TestFlight Users</h5><p>Xcode 6.3 includes a new feature to help opted-in App Store users and TestFlight users collect and analyze crash log data for your apps.</p><p></p><p>Crash reports gathered from opted-in App Store users and TestFlight users can be displayed in the Crashes Organizer:</p><ul class="ul"><li class="li"><p>To view crash reports for your apps, first enter your developer accounts in Xcode Preferences “Accounts” pane. Crash reports for the iOS apps associated with your developer accounts are displayed in the Xcode Organizer window. </p></li><li class="li"><p>Crash reports are only available for apps that were uploaded to iTunes Connect with symbol information. </p></li><li class="li"><p>Xcode provides a list of the top crashes for each of your apps. </p></li><li class="li"><p>The crash reports are fully symbolicated and aggregated on Apple's servers. </p></li><li class="li"><p>Xcode provides workflows for managing your crash reports and viewing backtraces directly beside your project’s source code.</p></li></ul><p>For more information, see <span class="content_text"><!--a target="_self" -->Crashes Organizer Help<!--/a--></span> in the Xcode documentation. (14995491)</p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW381" title="Xcode Playground"></a><h5 class="jump">Xcode Playground</h5><p>Playgrounds have been enhanced with documentation authoring using inline marked-up comments, inline playground results, the ability to view and edit resources embedded in playgrounds, and the ability to integrate auxiliary source files into Playgrounds.  These features enable the creation of rich new experiences in playgrounds. </p><p>These enhancements are detailed in the <span class="content_text"><a href="#//apple_ref/doc/uid/TP40001051-CH1-SW397" data-renderer-version="1">Playground Enhancements</a></span> section below.</p><p></p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW382" title="Swift 1.2"></a><h5 class="jump">Swift 1.2</h5><p>Xcode 6.3 includes a new version of the Swift language, Swift 1.2, with significant changes, fixes, and enhancements. See the following sections of these release notes for details: </p><p></p><ul class="ul"><li class="li"><p><span class="content_text"><a href="#//apple_ref/doc/uid/TP40001051-CH1-SW391" data-renderer-version="1">Swift Language Changes</a></span></p></li><li class="li"><p><span class="content_text"><a href="#//apple_ref/doc/uid/TP40001051-CH1-SW392" data-renderer-version="1">Swift Language Fixes</a></span></p></li><li class="li"><p><span class="content_text"><a href="#//apple_ref/doc/uid/TP40001051-CH1-SW393" data-renderer-version="1">Swift Language Enhancements</a></span></p></li><li class="li"><p><span class="content_text"><a href="#//apple_ref/doc/uid/TP40001051-CH1-SW394" data-renderer-version="1">Swift Performance</a></span></p></li><li class="li"><p><span class="content_text"><a href="#//apple_ref/doc/uid/TP40001051-CH1-SW395" data-renderer-version="1">Swift Standard Library Enhancements and Changes</a></span></p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW383" title="Swift Migrator from Swift 1.1 to Swift 1.2"></a><h5 class="jump">Swift Migrator from Swift 1.1 to Swift 1.2</h5><p>A source migrator tool has been provided to help update your Swift source code from Swift 1.1 (Xcode 6.2) to Swift 1.2 (Xcode 6.3.) </p><p>In Xcode, select <code>Edit &gt; Convert &gt; To Latest Swift Syntax</code>.</p><p></p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW384" title="Objective-C"></a><h5 class="jump">Objective-C</h5><p>Objective-C code has been enhanced to improve interoperability between Swift and Objective-C code. For detailed information, see the <span class="content_text"><a href="#//apple_ref/doc/uid/TP40001051-CH1-SW396" data-renderer-version="1">Objective-C Language Enhancements</a></span> section in these release notes.</p><p></p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW385" title="Debugger"></a><h5 class="jump">Debugger</h5><p>LLDB has been enhanced to improve the support for modules in C-based languages as well as provide overall improvements in Swift debugging support. For more details, see the <span class="content_text"><a href="#//apple_ref/doc/uid/TP40001051-CH1-SW399" data-renderer-version="1">Debugger Enhancements</a></span> section.</p><p></p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW386" title="Apple LLVM Compiler Version 6.1"></a><h5 class="jump">Apple LLVM Compiler Version 6.1</h5><p>The Apple LLVM compiler has been updated to version 6.1.0.</p><p></p><p>This updated compiler includes full support for the C++14 language standard, a wide range of enhanced warning diagnostics, and new optimizations. Support for the arm64 architecture has been significantly revised to better align with the ARM implementation; the most visible impact is that several vector intrinsics have changed to more closely match the ARM specifications.</p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW387" title="ARM64 Intrinsics"></a><h5 class="jump">ARM64 Intrinsics</h5><p>The argument ordering for the arm64 vfma/vfms lane intrinsics has changed. This change is being introduced in stages to reduce risk.</p><p></p><div class="importantbox clear"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_108" title="Important"></a><p><strong>Important:</strong>&nbsp;See "<span class="content_text"><a href="#//apple_ref/doc/uid/TP40001051-CH1-SW387" data-renderer-version="1">ARM64 Intrinsics</a></span>" for details.</p><p></p></aside></div></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW388" title="Force Touch"></a><h5 class="jump">Force Touch</h5><p>Xcode 6.3 supports Force Touch trackpad gestures for Macs that include it, and supports configuring Force Touch trackpad functionality in Interface Builder for <code>NSButton</code> and <code>NSSegmentedControl</code>.</p><p></p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW389" title="Note"></a><p><strong>Note:</strong>&nbsp;Adopting Force Touch in Interface Builder requires running Xcode on OS X Yosemite version 10.10.3.</p><p></p></aside></div><p>(16140561, 16140600, 18660545)</p></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW390" title="Changes, Enhancements, and Notes"></a><h4 class="jump">Changes, Enhancements, and Notes</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW391" title="Swift Language Changes"></a><h5 class="jump">Swift Language Changes</h5><ul class="ul"><li class="li"><p>The notions of guaranteed conversion and “forced failable” conversion are now separated into two operators. Forced failable conversion now uses the as! operator. The ! makes it clear to readers of code that the cast may fail and produce a runtime error. The “as” operator remains for upcasts (e.g. “someDerivedValue as Base”) and type annotations (“0 as Int8”) which are guaranteed to never fail.(19031957)</p></li><li class="li"><p>Immutable (let) properties in struct and class initializers have been revised to standardize on a general “lets are singly initialized but never reassigned or mutated” model. Previously, they were completely mutable within the body of initializers. Now, they are only allowed to be assigned to once to provide their value. If the property has an initial value in its declaration, that counts as the initial value for all initializers. (19035287)</p></li><li class="li"><p>The implicit conversions from bridged Objective-C classes (NSString/NSArray/NSDictionary) to their corresponding Swift value types (String/Array/Dictionary) have been removed, making the Swift type system simpler and more predictable. </p><p>This means that the following code will no longer work:</p><div class="codesample clear"><table><tr><td scope="row"><pre>import Foundation<span></span></pre></td></tr><tr><td scope="row"><pre>func log(s: String) { println(x) }<span></span></pre></td></tr><tr><td scope="row"><pre>let ns: NSString = "some NSString" // okay: literals still work<span></span></pre></td></tr><tr><td scope="row"><pre>log(ns)     // fails with the error<span></span></pre></td></tr><tr><td scope="row"><pre>            // "'NSString' is not convertible to 'String'"<span></span></pre></td></tr></table></div><p>In order to perform such a bridging conversion, make the conversion explicit with the as keyword:</p><div class="codesample clear"><table><tr><td scope="row"><pre>log(ns as String) // succeeds<span></span></pre></td></tr></table></div><p>Implicit conversions from Swift value types to their bridged Objective-C classes are still permitted. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func nsLog(ns: NSString) { println(ns) }<span></span></pre></td></tr><tr><td scope="row"><pre>let s: String = “some String”<span></span></pre></td></tr><tr><td scope="row"><pre>nsLog(s) // okay: implicit conversion from String to NSString is permitted<span></span></pre></td></tr></table></div><p>Note that these Cocoa types in Objective-C headers are still automatically bridged to their corresponding Swift type, which means that code is only affected if it is explicitly referencing (for example) <code>NSString</code> in a Swift source file. It is recommended you use the corresponding Swift types (for example, <code>String</code>) directly unless you are doing something advanced, like implementing a subclass in the class cluster. (18311362)</p></li><li class="li"><p>The <code>@autoclosure</code> attribute is now an attribute on a parameter, not an attribute on the parameter’s type. </p><p>Where before you might have used:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func assert(predicate : @autoclosure () -&gt; Bool) {...}<span></span></pre></td></tr></table></div><p>you now write this as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func assert(@autoclosure predicate : () -&gt; Bool) {...}<span></span></pre></td></tr></table></div><p>(15217242)</p></li><li class="li"><p>The <code>@autoclosure</code> attribute on parameters now implies the new <code>@noescape</code> attribute. </p></li><li class="li"><p>Curried function parameters can now specify argument labels.</p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func curryUnnamed(a: Int)(_ b: Int) { return a + b }<span></span></pre></td></tr><tr><td scope="row"><pre>curryUnnamed(1)(2)<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>func curryNamed(first a: Int)(second b: Int) -&gt; Int { return a + b }<span></span></pre></td></tr><tr><td scope="row"><pre>curryNamed(first: 1)(second: 2)<span></span></pre></td></tr></table></div><p>(17237268)</p></li><li class="li"><p>Swift now detects discrepancies between overloading and overriding in the Swift type system and the effective behavior seen via the Objective-C runtime. </p><p>For example, the following conflict between the Objective-C setter for “property” in a class and the method “setProperty” in its extension is now diagnosed:</p><div class="codesample clear"><table><tr><td scope="row"><pre>class A : NSObject {<span></span></pre></td></tr><tr><td scope="row"><pre>var property: String = "Hello" // note: Objective-C method 'setProperty:’<span></span></pre></td></tr><tr><td scope="row"><pre>    // previously declared by setter for<span></span></pre></td></tr><tr><td scope="row"><pre>    // 'property’ here<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>extension A {<span></span></pre></td></tr><tr><td scope="row"><pre>func setProperty(str: String) { }     // error: method ‘setProperty’<span></span></pre></td></tr><tr><td scope="row"><pre>    // redeclares Objective-C method<span></span></pre></td></tr><tr><td scope="row"><pre>    //'setProperty:’<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Similar checking applies to accidental overrides in the Objective-C runtime:</p><div class="codesample clear"><table><tr><td scope="row"><pre>class B : NSObject {<span></span></pre></td></tr><tr><td scope="row"><pre>func method(arg: String) { }     // note: overridden declaration<span></span></pre></td></tr><tr><td scope="row"><pre>    // here has type ‘(String) -&gt; ()’<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>class C : B {<span></span></pre></td></tr><tr><td scope="row"><pre>func method(arg: [String]) { } // error: overriding method with<span></span></pre></td></tr><tr><td scope="row"><pre>    // selector ‘method:’ has incompatible<span></span></pre></td></tr><tr><td scope="row"><pre>    // type ‘([String]) -&gt; ()’<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>as well as protocol conformances:</p><div class="codesample clear"><table><tr><td scope="row"><pre>class MyDelegate : NSObject, NSURLSessionDelegate {<span></span></pre></td></tr><tr><td scope="row"><pre>func URLSession(session: NSURLSession, didBecomeInvalidWithError:<span></span></pre></td></tr><tr><td scope="row"><pre>    Bool){ } // error: Objective-C method 'URLSession:didBecomeInvalidWithError:'<span></span></pre></td></tr><tr><td scope="row"><pre>    // provided by method 'URLSession(_:didBecomeInvalidWithError:)'<span></span></pre></td></tr><tr><td scope="row"><pre>    // conflicts with optional requirement method<span></span></pre></td></tr><tr><td scope="row"><pre>    // 'URLSession(_:didBecomeInvalidWithError:)' in protocol<span></span></pre></td></tr><tr><td scope="row"><pre>    // 'NSURLSessionDelegate'<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(18391046, 18383574)</p></li><li class="li"><p>The precedence of the Nil Coalescing Operator (<code>??</code>) has been raised to bind tighter than short-circuiting logical and comparison operators, but looser than as conversions and range operators. This provides more useful behavior for expressions like:</p><div class="codesample clear"><table><tr><td scope="row"><pre>if allowEmpty || items?.count ?? 0 &gt; 0 {...}<span></span></pre></td></tr></table></div></li><li class="li"><p>The <code>&amp;/</code> and <code>&amp;%</code> operators were removed, to simplify the language and improve consistency. </p><p>Unlike the <code>&amp;+</code>, <code>&amp;-</code>, and <code>&amp;*</code> operators, these operators did not provide two’s-complement arithmetic behavior; they provided special case behavior for division, remainder by zero, and <code>Int.min/-1</code>.  These tests should be written explicitly in the code as comparisons if needed. (17926954).</p></li><li class="li"><p>Constructing a <code>UInt8</code> from an ASCII value now requires the <code>ascii</code> keyword parameter. Using non-ASCII unicode scalars will cause this initializer to trap. (18509195)</p></li><li class="li"><p>The C <code>size_t</code> family of types are now imported into Swift as <code>Int</code>, since Swift prefers sizes and counts to be represented as signed numbers, even if they are non-negative.</p><p>This change decreases the amount of explicit type conversion between <code>Int</code> and <code>UInt</code>, better aligns with <code>sizeof</code> returning <code>Int</code>, and provides safer arithmetic properties. (18949559)</p></li><li class="li"><p>Classes that do not inherit from <code>NSObject</code> but do adopt an <code>@objc</code> protocol will need to explicitly mark those methods, properties, and initializers used to satisfy the protocol requirements as <code>@objc</code>. </p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>   @objc protocol SomethingDelegate {<span></span></pre></td></tr><tr><td scope="row"><pre>        func didSomething()<span></span></pre></td></tr><tr><td scope="row"><pre>    }<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>    class MySomethingDelegate : SomethingDelegate {<span></span></pre></td></tr><tr><td scope="row"><pre>        @objc func didSomething() { … }<span></span></pre></td></tr><tr><td scope="row"><pre>    }<span></span></pre></td></tr></table></div></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW392" title="Swift Language Fixes"></a><h5 class="jump">Swift Language Fixes</h5><ul class="ul"><li class="li"><p>Dynamic casts (<code>as!</code>, <code>as?</code> and <code>is</code>) now work with Swift protocol types, so long as they have no associated types. (18869156) </p></li><li class="li"><p>Adding conformances within a Playground now works as expected. </p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>struct Point {<span></span></pre></td></tr><tr><td scope="row"><pre>  var x, y: Double<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>extension Point : Printable {<span></span></pre></td></tr><tr><td scope="row"><pre>  var description: String {<span></span></pre></td></tr><tr><td scope="row"><pre>    return "(\(x), \(y))"<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>var p1 = Point(x: 1.5, y: 2.5)<span></span></pre></td></tr><tr><td scope="row"><pre>println(p1) // prints "(1.5, 2.5)”<span></span></pre></td></tr></table></div></li><li class="li"><p>Imported <code>NS_ENUM</code> types with undocumented values, such as <code>UIViewAnimationCurve</code>, can now be converted from their raw integer values using the <code>init(rawValue:)</code> initializer without being reset to <code>nil</code>. Code that used <code>unsafeBitCast</code> as a workaround for this issue can be written to use the raw value initializer. </p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let animationCurve =<span></span></pre></td></tr><tr><td scope="row"><pre>  unsafeBitCast(userInfo[UIKeyboardAnimationCurveUserInfoKey].integerValue,<span></span></pre></td></tr><tr><td scope="row"><pre>  UIViewAnimationCurve.self)<span></span></pre></td></tr></table></div><p>can now be written instead as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let animationCurve = UIViewAnimationCurve(rawValue:<span></span></pre></td></tr><tr><td scope="row"><pre>  userInfo[UIKeyboardAnimationCurveUserInfoKey].integerValue)!<span></span></pre></td></tr></table></div><p>(19005771)</p></li><li class="li"><p>Negative floating-point literals are now accepted as raw values in enums. (16504472)</p></li><li class="li"><p>Unowned references to Objective-C objects, or Swift objects inheriting from Objective-C objects, no longer cause a crash if the object holding the unowned reference is deallocated after the referenced object has been released. (18091547)</p></li><li class="li"><p>Variables and properties with observing accessors no longer require an explicit type if it can be inferred from the initial value expression. (18148072)</p></li><li class="li"><p>Generic curried functions no longer produce random results when fully applied. (18988428)</p></li><li class="li"><p>Comparing the result of a failed <code>NSClassFromString</code> lookup against <code>nil</code> now behaves correctly. (19318533)</p></li><li class="li"><p>Subclasses that override base class methods with co- or contravariance in <code>Optional</code> types no longer cause crashes at runtime. </p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>class Base {<span></span></pre></td></tr><tr><td scope="row"><pre>  func foo(x: String) -&gt; String? { return x }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>class Derived: Base {<span></span></pre></td></tr><tr><td scope="row"><pre>  override func foo(x: String?) -&gt; String { return x! }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(19321484)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW393" title="Swift Language Enhancements"></a><h5 class="jump">Swift Language Enhancements</h5><ul class="ul"><li class="li"><p>Swift now supports building targets incrementally, i.e. not rebuilding every Swift source file in a target when a single file is changed. </p><p>The incremental build capability is based on a conservative dependency analysis, so you may still see more files rebuilding than absolutely necessary. If you find any cases where a file is not rebuilt when it should be, please file a bug report. Running <code>Clean</code> on your target afterwards should allow you to complete your build normally. (18248514)</p></li><li class="li"><p>A new <code>Set</code> data structure is included which provides a generic collection of unique elements with full value semantics. It bridges with <code>NSSet</code>, providing functionality analogous to <code>Array</code> and <code>Dictionary</code>. (14661754)</p></li><li class="li"><p>The <code>if–let</code> construct has been expanded to allow testing multiple optionals and guarding conditions in a single <code>if</code> (or <code>while</code>) statement using syntax similar to generic constraints:</p><div class="codesample clear"><table><tr><td scope="row"><pre>if let a = foo(), b = bar() where a &lt; b,<span></span></pre></td></tr><tr><td scope="row"><pre>   let c = baz() {<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>This allows you to test multiple optionals and include intervening boolean conditions, without introducing undesirable nesting (for instance, to avoid the <code>optional</code> unwrapping “pyramid of doom”). </p><p>Further, <code>if–let</code> now also supports a single leading boolean condition along with optional binding <code>let</code> clauses. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>if someValue &gt; 42 &amp;&amp; someOtherThing &lt; 19,          let a = getOptionalThing() where a &gt; someValue {<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(19797158), (19382942)</p></li><li class="li"><p>The <code>if–let</code> syntax has been extended to support a single leading boolean condition along with optional binding <code>let</code> clauses.  </p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>if someValue &gt; 42 &amp;&amp; someOtherThing &lt; 19,          let a = getOptionalThing() where a &gt; someValue {<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(19797158)</p></li><li class="li"><p>let constants have been generalized to no longer require immediate initialization. The new rule is that a let constant must be initialized before use (like a var), and that it may only be initialized: not reassigned or mutated after initialization. This enables patterns such as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let x: SomeThing<span></span></pre></td></tr><tr><td scope="row"><pre>if condition {<span></span></pre></td></tr><tr><td scope="row"><pre>  x = foo()<span></span></pre></td></tr><tr><td scope="row"><pre>} else {<span></span></pre></td></tr><tr><td scope="row"><pre>  x = bar()<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre>use(x)<span></span></pre></td></tr></table></div><p>which formerly required the use of a <code>var</code>, even though there is no mutation taking place. (16181314)</p></li><li class="li"><p>“<code>static</code>” methods and properties are now allowed in classes (as an alias for <code>class final</code>). You are now allowed to declare static stored properties in classes, which have global storage and are lazily initialized on first access (like global variables). Protocols now declare type requirements as <code>static</code> requirements instead of declaring them as  <code>class</code> requirements. (17198298)</p></li><li class="li"><p>Type inference for single-expression closures has been improved in several ways:</p><ul class="nested"><li class="nested li"><p>Closures that are comprised of a single return statement are now type checked as single-expression closures.</p></li><li class="nested li"><p>Unannotated single-expression closures with non-Void return types can now be used in Void contexts.</p></li><li class="nested li"><p>Situations where a multi-statement closure’s type could not be inferred because of a missing return-type annotation are now properly diagnosed.</p></li></ul></li><li class="li"><p>Swift enums can now be exported to Objective-C using the <code>@objc</code> attribute. <code>@objc</code> enums must declare an integer raw type, and cannot be generic or use associated values. Because Objective-C enums are not namespaced, enum cases are imported into Objective-C as the concatenation of the enum name and case name.</p><p>For example, this Swift declaration:</p><div class="codesample clear"><table><tr><td scope="row"><pre>@objc<span></span></pre></td></tr><tr><td scope="row"><pre>enum Bear: Int {<span></span></pre></td></tr><tr><td scope="row"><pre>   case Black, Grizzly, Polar<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>imports into Objective-C as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>typedef NS_ENUM(NSInteger, Bear) {<span></span></pre></td></tr><tr><td scope="row"><pre>   BearBlack, BearGrizzly, BearPolar<span></span></pre></td></tr><tr><td scope="row"><pre>};<span></span></pre></td></tr></table></div><p>(16967385)</p></li><li class="li"><p>Objective-C language extensions are now available to indicate the nullability of pointers and blocks in Objective-C APIs, allowing your Objective-C APIs to be imported without <code>ImplicitlyUnwrappedOptional</code>. <em>(See items below for more details.)</em> (18868820) </p></li><li class="li"><p>Swift can now partially import C aggregates containing unions, bitfields, SIMD vector types, and other C language features that are not natively supported in Swift. The unsupported fields will not be accessible from Swift, but C and Objective-C APIs that have arguments and return values of these types can be used in Swift. This includes the Foundation <code>NSDecimal</code> type and the GLKit <code>GLKVector</code> and <code>GLKMatrix</code> types, among others. (15951448)</p></li><li class="li"><p>Imported C structs now have a default initializer in Swift that initializes all of the struct's fields to zero. </p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>import Darwin<span></span></pre></td></tr><tr><td scope="row"><pre>var devNullStat = stat()<span></span></pre></td></tr><tr><td scope="row"><pre>stat("/dev/null", &amp;devNullStat)<span></span></pre></td></tr></table></div><p>If a structure contains fields that cannot be correctly zero initialized (i.e. pointer fields marked with the new <code>__nonnull</code> modifier), this default initializer will be suppressed. (18338802)</p></li><li class="li"><p>New APIs for converting among the Index types for <code>String</code>, <code>String.UnicodeScalarView</code>, <code>String.UTF16View</code>, and <code>String.UTF8View</code> are available, as well as APIs for converting each of the String views into Strings. (18018911)</p></li><li class="li"><p>Type values now print as the full demangled type name when used with <code>println</code> or string interpolation.</p><div class="codesample clear"><table><tr><td scope="row"><pre>toString(Int.self)          // prints “Swift.Int"<span></span></pre></td></tr><tr><td scope="row"><pre>println([Float].self)       // prints "Swift.Array&amp;lt;Swift.Float&gt;;”<span></span></pre></td></tr><tr><td scope="row"><pre>println((Int, String).self) // prints "(Swift.Int, Swift.String)"<span></span></pre></td></tr></table></div><p>(18947381)</p></li><li class="li"><p>A new <code>@noescape</code> attribute may be used on closure parameters to functions. This indicates that the parameter is only ever called (or passed as an <code>@noescape</code> parameter in a call), which means that it cannot outlive the lifetime of the call. This enables some minor performance optimizations, but more importantly disables the “<code>self.</code>” requirement in closure arguments. This enables control-flow-like functions to be more transparent about their behavior. In a future beta, the standard library will adopt this attribute in functions like <code>autoreleasepool()</code>. </p><div class="codesample clear"><table><tr><td scope="row"><pre>func autoreleasepool(@noescape code: () -&gt; ()) {<span></span></pre></td></tr><tr><td scope="row"><pre>   pushAutoreleasePool()<span></span></pre></td></tr><tr><td scope="row"><pre>   code()<span></span></pre></td></tr><tr><td scope="row"><pre>   popAutoreleasePool()<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>(16323038)</p></li><li class="li"><p>Performance is substantially improved over Swift 1.1 in many cases. For example, multidimensional arrays are algorithmically faster in some cases, unoptimized code is much faster in many cases, and many other improvements have been made.</p></li><li class="li"><p>The diagnostics emitted for expression type check errors are greatly improved in many cases. (18869019)</p></li><li class="li"><p>Type checker performance for many common expression kinds has been greatly improved. This can significantly improve build times and reduces the number of “expression too complex” errors. (18868985)</p></li><li class="li"><p>The <code>@autoclosure</code> attribute has a second form, @<code>autoclosure(escaping)</code>, that provides the same caller-side syntax as <code>@autoclosure</code> but allows the resulting closure to escape in the implementation.  </p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func lazyAssertion(@autoclosure(escaping) condition: () -&gt; Bool,<span></span></pre></td></tr><tr><td scope="row"><pre>                   message: String = "") {<span></span></pre></td></tr><tr><td scope="row"><pre>  lazyAssertions.append(condition) // escapes<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>lazyAssertion(1 == 2, message: "fail eventually")<span></span></pre></td></tr></table></div><p>(19499207)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW394" title="Swift Performance"></a><h5 class="jump">Swift Performance</h5><ul class="ul"><li class="li"><p>A new compilation mode has been introduced for Swift called Whole Module Optimization. This option optimizes all of the files in a target together and enables better performance (at the cost of increased compile time). The new flag can be enabled in Xcode using the “<code>Whole Module Optimization</code>” build setting or by using the <code>swiftc</code> command line tool with the flag <code>-whole-module-optimization</code>. (18603795)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW395" title="Swift Standard Library Enhancements and Changes"></a><h5 class="jump">Swift Standard Library Enhancements and Changes</h5><ul class="ul"><li class="li"><p><code>flatMap</code> was added to the standard library. <code>flatMap</code> is the function that maps a function over something and returns the result flattened one level. <code>flatMap</code> has many uses, such as to flatten an array:</p><div class="codesample clear"><table><tr><td scope="row"><pre>[[1,2],[3,4]].flatMap { $0 }<span></span></pre></td></tr></table></div><p>or to chain optionals with functions:</p><div class="codesample clear"><table><tr><td scope="row"><pre>[[1,2], [3,4]].first.flatMap { find($0, 1) }<span></span></pre></td></tr></table></div><p>(19881534)</p></li><li class="li"><p>The function <code>zip</code> was added.  It joins two sequences together into one sequence of tuples. (17292393)</p></li><li class="li"><p><code>utf16Count</code> is removed from <code>String</code>. Instead use <code>count</code> on the <code>UTF16</code> view of the <code>String</code>. </p><p>For example: </p><div class="codesample clear"><table><tr><td scope="row"><pre>count(string.utf16)<span></span></pre></td></tr></table></div><p>(17627758)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW396" title="Objective-C Language Enhancements"></a><h5 class="jump">Objective-C Language Enhancements</h5><ul class="ul"><li class="li"><p>Objective-C APIs can now express the “nullability” of parameters, return types, properties, variables, etc. For example, here is the expression of nullability for several UITableView APIs:</p><div class="codesample clear"><table><tr><td scope="row"><pre>-(void)registerNib:(nonnull UINib *)nib forCellReuseIdentifier:<span></span></pre></td></tr><tr><td scope="row"><pre>                   (nonnull NSString *)identifier;<span></span></pre></td></tr><tr><td scope="row"><pre>-(nullable UITableViewCell *)cellForRowAtIndexPath:<span></span></pre></td></tr><tr><td scope="row"><pre>                   (nonnull NSIndexPath)indexPath;<span></span></pre></td></tr><tr><td scope="row"><pre>@property (nonatomic, readwrite, retain, nullable) UIView *backgroundView;<span></span></pre></td></tr></table></div><p>The nullability qualifiers affect the optionality of the Objective-C APIs when in Swift. Instead of being imported as implicitly-unwrapped optionals (e.g., UINib!), nonnull-qualified types are imported as non-optional (e.g., UINib) and nullable-qualified types are imported as optional (e.g., UITableViewCell?), so the above APIs will be seen in Swift as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func registerNib(nib: UINib, forCellReuseIdentifier identifier: String)<span></span></pre></td></tr><tr><td scope="row"><pre>func cellForRowAtIndexPath(indexPath: NSIndexPath) -&gt; UITableViewCell?<span></span></pre></td></tr><tr><td scope="row"><pre>var backgroundView: UIView?<span></span></pre></td></tr></table></div><p>Nullability qualifiers can also be applied to arbitrary pointer types, including C pointers, block pointers, and   C++ member pointers, using double-underscored versions of the nullability qualifiers. For example, consider a C API such as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>void enumerateStrings(__nonnull CFStringRef (^ __nullable callback)(void));<span></span></pre></td></tr></table></div><p>Here, the callback itself is nullable and the result type of that callback is nonnull. This API will be usable from Swift as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func enumerateStrings(callback: (() -&gt; CFString)?)<span></span></pre></td></tr></table></div><p>In all, there are three different kinds of nullability specifiers, which can be spelled with a double-underscore (on any pointer type) or without (for Objective-C properties, method result types, and method parameter types):</p><div class="tableholder"><table class="graybox" border = "0" cellspacing="0" cellpadding="5"><tr><th scope="col" class="TableHeading_TableRow_TableCell"><p>Type qualifier spelling</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Objective-C property/method spelling</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Swift view</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Meaning</p></th></tr><tr><td  scope="row"><p><code>__nonnull</code></p></td><td ><p><code>nonnull</code></p></td><td ><p>Non-optional, e.g., <code>UINib</code></p></td><td ><p>The value is never expected to be <code>nil</code> (except perhaps due to messaging <code>nil</code> in the argument).</p></td></tr><tr><td  scope="row"><p><code>__nullable</code></p></td><td ><p><code>nullable</code></p></td><td ><p>Optional, e.g., <code>UITableViewCell?</code></p></td><td ><p>The value can be <code>nil</code>.</p></td></tr><tr><td  scope="row"><p><code>__null_unspecified</code></p></td><td ><p><code>null_unspecified</code></p></td><td ><p>Implicitly-unwrapped optional, e.g., <code>NSDate!</code></p></td><td ><p>It is unknown whether the value can be <code>nil</code> (very rare).</p></td></tr></table></div><p>Particularly in Objective-C APIs, many pointers tend to be nonnull. Therefore, Objective-C provides “audited” regions (via a new <code>#pragma</code>) that assume that unannotated pointers are nonnull. For example, the following example is equivalent to the first example, but uses audited regions to simplify the presentation:</p><div class="codesample clear"><table><tr><td scope="row"><pre>NS_ASSUME_NONNULL_BEGIN<span></span></pre></td></tr><tr><td scope="row"><pre>// …<span></span></pre></td></tr><tr><td scope="row"><pre>-(void)registerNib:(UINib *)nib forCellReuseIdentifier:(NSString *)identifier;<span></span></pre></td></tr><tr><td scope="row"><pre>-(nullable UITableViewCell *)cellForRowAtIndexPath:(NSIndexPath)indexPath;<span></span></pre></td></tr><tr><td scope="row"><pre>@property (nonatomic, readwrite, retain, nullable) UIView *backgroundView;<span></span></pre></td></tr><tr><td scope="row"><pre>// …<span></span></pre></td></tr><tr><td scope="row"><pre>NS_ASSUME_NONNULL_END<span></span></pre></td></tr></table></div><p>For consistency, we recommend using audited regions in all Objective-C headers that describe the nullability of their APIs, and to avoid <code>null_unspecified</code> except as a transitional tool while introducing nullability into existing headers.</p><p>Adding nullability annotations to Objective-C APIs does not affect backward compatibility or the way in which the compiler generates code. For example, nonnull pointers can still end up being <code>nil</code> in some cases, such as when messaging a <code>nil</code> receiver. However, nullability annotations—in addition to improving the experience in Swift—provide new warnings in Objective-C if (for example) a <code>nil</code> argument is passed to a nonnull parameter, making Objective-C APIs more expressive and easier to use correctly. (18868820)</p></li><li class="li"><p>Objective-C APIs can now express the nullability of properties whose setters allow <code>nil</code> (to “reset” the value to some default) but whose getters never produce <code>nil</code> (because they provide some default instead) using the <code>null_resettable</code> property attribute. One such property is <code>tintColor</code> in <code>UIView</code>, which substitutes a default system tint color when no tint color has been specified. </p><p>For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>@property (nonatomic, retain, null_resettable) UIColor *tintColor;<span></span></pre></td></tr></table></div><p>Such APIs are imported into Swift via implicitly-unwrapped optionals, for example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>var tintColor: UIColor!<span></span></pre></td></tr></table></div><p>(19051334)</p></li><li class="li"><p>Parameters of C pointer type or block pointer type can be annotated with the new <code>noescape</code> attribute to indicate that pointer argument won’t “escape” the function or method it is being passed to. </p><p>In such cases, it’s safe, for example, to pass the address of a local variable. <code>noescape</code> block pointer parameters will be imported into Swift as <code>@noescape</code> parameters:</p><div class="codesample clear"><table><tr><td scope="row"><pre>void executeImmediately(__attribute__((noescape)) void (^callback)(void));<span></span></pre></td></tr></table></div><p>is imported into Swift as:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func executeImmediately(@noescape callback: () -&gt; Void)<span></span></pre></td></tr></table></div><p>(19389222)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW397" title="Playground Enhancements"></a><h5 class="jump">Playground Enhancements</h5><ul class="ul"><li class="li"><p>Playgrounds now offer an easy way to create and edit rich documentation using marked-up text. Use the new <code>//:</code> or <code>/*: */</code> style comments to indicate when text should be shown as a rich comment. Change the viewing mode of a playground by using the “<code>Show Documentation as Rich Text</code>” and “<code>Show Documentation as Raw Text</code>” commands in the Editor menu. </p><p>For more information, see <em><a href="../../../../documentation/Swift/Reference/Playground_Ref/Chapters/XCPlayground.html#//apple_ref/doc/uid/TP40014789" data-renderer-version="1" target="_self">Playground Reference</a></em> in the Xcode documentation. (19265300)</p></li><li class="li"><p>Playground results are now shown inline, rather than in the timeline view. When there are multiple results on a line, you can toggle between viewing a single result and a listing of all the results. For result sets that are numbers, there is the added option of viewing as a graph. Results can be resized to show more or less information. </p><p>For more information, see <span class="content_text"><!--a target="_self" -->Playground Help<!--/a--></span> in the Xcode documentation. (19259877)</p></li><li class="li"><p>Playground scrolling and performance has been improved.</p></li><li class="li"><p>Playgrounds can now be upgraded to the new format by selecting the <code>Editor &gt; Upgrade Playground</code> menu item. </p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW398" title="Note"></a><p><strong>Note:</strong>&nbsp;The rich comments and supporting source files features are only supported in playgrounds created with Xcode 6.3 or later. </p><p></p></aside></div><p>(19938996)</p></li><li class="li"><p>Playgrounds now expose their structure in the project navigator. To show the project navigator, select <code>View &gt; Navigators &gt; Show Project Navigator</code>. This allows you to use resources (for instance, images) from within your playground: twist open the playground to see the Resources folder and drag them in. (19115173)</p></li><li class="li"><p>Playgrounds now let you provide auxiliary support source files, which are compiled into a module and automatically imported into your playground. To use the new supporting source files feature, twist open the playground in the project navigator to see the new Sources folder, which has a single file named <code>SupportCode.swift</code> by default. Add code to that file, or create new source files in this folder, which will all be automatically compiled into a module and automatically imported into your playground. (19460887)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW399" title="Debugger Enhancements"></a><h5 class="jump">Debugger Enhancements</h5><ul class="ul"><li class="li"><p>LLDB now includes a prototype for <code>printf()</code> by default when evaluating C, C++, and Objective-C expressions. </p><p>This improves the expression evaluation experience on arm64 devices, but may conflict with user-defined expression prefixes in <code>.lldbinit</code> that have a conflicting declaration of <code>printf()</code>. If you see errors during expression evaluation this may be the root cause. (19024779)</p></li><li class="li"><p>LLDB's Objective-C expression parser can now import modules.  Any subsequent expression can rely on function and method prototypes defined in the module:</p><div class="codesample clear"><table><tr><td scope="row"><pre>(lldb) p @import Foundation<span></span></pre></td></tr><tr><td scope="row"><pre>(lldb) p NSPointFromString(@"{10.0, 20.0}");<span></span></pre></td></tr><tr><td scope="row"><pre>(NSPoint) $1 = (x = 10, y = 20)<span></span></pre></td></tr></table></div><p>Before Xcode 6.3, methods and functions without debug information required explicit typecasts to specify their return type. Importing modules allows a developer to avoid the more labor-intensive process of determining and specifying this information manually:</p><div class="codesample clear"><table><tr><td scope="row"><pre>(lldb) p NSPointFromString(@"{10.0, 20.0}");<span></span></pre></td></tr><tr><td scope="row"><pre>error: 'NSPointFromString' has unknown return type; cast the call to its declared return type<span></span></pre></td></tr><tr><td scope="row"><pre>error: 1 errors parsing expression<span></span></pre></td></tr><tr><td scope="row"><pre>(lldb) p (NSPoint)NSPointFromString(@"{10.0, 20.0}”);<span></span></pre></td></tr><tr><td scope="row"><pre>(NSPoint) $0 = (x = 10, y = 20)<span></span></pre></td></tr></table></div><p>Other benefits of importing modules include better error messages, access to variadic functions when running on 64-bit devices, and eliminating potentially incorrect inferred argument types.  </p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW400" title="Note"></a><p><strong>Note:</strong>&nbsp;In several cases, not having a proper function prototype could lead to unexpected failures.</p><p></p></aside></div><p>(18782288)</p></li><li class="li"><p>Evaluating Swift expressions performance is improved especially when debugging code running on devices. </p><p>This will be most noticeable in the Swift <code>REPL</code> and when issuing LLDB commands such as <code>p</code>, <code>po</code>, and <code>expression</code>. (19213054)</p></li><li class="li"><p>Significant improvements in LLDB’s Swift support have addressed many known issues with the Swift debugging experience. (19656017)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW401" title="ARM64 Intrinsics Changes"></a><h5 class="jump">ARM64 Intrinsics Changes</h5><p>The argument ordering for the arm64 vfma/vfms lane intrinsics has changed. </p><p>The change may not trigger compile-time errors but it will break code at runtime. To reduce risk, the transition to the new ordering is being completed in stages:</p><ul class="ul"><li class="li"><p>By default, the compiler now warns about any use of the intrinsics but will retain the old behavior. </p></li><li class="li"><p>As soon as possible, adopt the new behavior and define the <code>USE_CORRECT_VFMA_INTRINSICS</code> macro with value <code>1</code>.</p></li><li class="li"><p>If you define the <code>USE_CORRECT_VFMA_INTRINSICS</code> macro value with value <code>0</code>, that silences the warnings and keeps the old behavior. However, do not leave your code in that state for long: support for the old behavior will be removed in a future release. </p></li></ul><p>(17964959)</p></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW402" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><p>These issues, previously reported in prior releases of Xcode, have been resolved in Xcode 6.3.</p><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW403" title="iOS Simulator"></a><h5 class="jump">iOS Simulator</h5><ul class="ul"><li class="li"><p>Apps containing a Watch extension may not deploy to the iOS Simulator for iOS versions earlier than 8.2. (20032374)</p></li><li class="li"><p>Audio playback using <code>AudioServicesPlaySystemSound</code> does not function as expected in the iOS 8.1 and 8.2 simulator runtimes. (17911598) </p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW404" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Xcode does not show a Watch as paired to its companion iPhone if the iPhone was rebooted and then connected to the host Mac without first being unlocked. (19864431)</p></li><li class="li"><p>Sharing a scheme in an Apple Watch app project prevents the iOS and Apple Watch App schemes from being created. (18941832)</p></li><li class="li"><p>App Store import will fail for Apple Watch apps that do not have the same version information as the containing app. (17812309)</p></li><li class="li"><p>Xcode does not show a Watch as paired to its companion iPhone if the iPhone was rebooted and then connected to the host Mac without first being unlocked. (19864431)</p></li><li class="li"><p>If the deployment target of an app containing an Apple Watch extension is configured for earlier than iOS 8.2, deployment of the app to devices running iOS 8.1.x or earlier may fail. (20032374)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW405" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW406" title="Swift"></a><h5 class="jump">Swift</h5><ul class="ul"><li class="li"><p><code>Convert to Latest Swift</code> may generate build errors when run. </p><p>These errors can be safely ignored and don’t affect the source changes that are produced. (19650497)</p></li><li class="li"><p>When subclassing <code>UITableViewController</code>, if you try to create your own initializer you will see an error telling you "Initializer does not override a designated initializer from its superclass."</p><p>To override the designated initializer <code>initWithNibName:bundle:</code> you will need to declare it as a designated initializer in a class extension in an Objective-C bridging header. The following steps will guide you through this process:</p><ol class="ol"><li class="li"><p>In your Swift project, create a new empty iOS Objective-C file. This will trigger a sheet asking you "Would you like to configure an Objective-C bridging header?"</p></li><li class="li"><p>Tap "Yes" to create a bridging header.</p></li><li class="li"><p>Inside <code>[YOURPROJECTNAME]-Bridging-Header.h</code> add the following code:</p><div class="codesample clear"><table><tr><td scope="row"><pre>@import UIKit;<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>@interface UITableViewController()<span></span></pre></td></tr><tr><td scope="row"><pre>- (instancetype)initWithNibName:(NSString *)nibNameOrNil<span></span></pre></td></tr><tr><td scope="row"><pre>   bundle:(NSBundle *)nibBundleOrNil NS_DESIGNATED_INITIALIZER;<span></span></pre></td></tr><tr><td scope="row"><pre>@end<span></span></pre></td></tr></table></div></li><li class="li"><p>Rebuild your project</p></li></ol><p>(19775924)</p></li><li class="li"><p>Swift 1.2 is strict about checking type-based overloading of <code>@objc</code> methods and initializers, something not supported by Objective-C.</p><div class="codesample clear"><table><tr><td scope="row"><pre>// Has the Objective-C selector "performOperation:".<span></span></pre></td></tr><tr><td scope="row"><pre>func performOperation(op: NSOperation) { /* do something */ }<span></span></pre></td></tr><tr><td scope="row"><pre>// Also has the selector "performOperation:".<span></span></pre></td></tr><tr><td scope="row"><pre>func performOperation(fn: () -&gt; Void) {<span></span></pre></td></tr><tr><td scope="row"><pre>    self.performOperation(NSBlockOperation(block: fn))<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>This code would work when invoked from Swift, but could easily crash if invoked from Objective-C.</p><p>To solve this problem, use a type that is not supported by Objective-C to prevent the Swift compiler from exposing the member to the Objective-C runtime:</p><ul class="nested"><li class="nested li"><p>If it makes sense, mark the member as <code>private</code> to disable inference of <code>@objc</code>.</p></li><li class="nested li"><p>Otherwise, use a placeholder parameter with a default value, for example: <code>_ nonobjc: () = ()</code>.</p></li></ul><p>(19826275)</p></li><li class="li"><p>Overrides of methods exposed to Objective-C in private subclasses are not inferred to be <code>@objc</code>, causing the Swift compiler to crash.</p><p>Explicitly add the <code>@objc</code> attribute to any such overriding methods. (19935352)</p></li><li class="li"><p>Symbols from SDKs are not available when using Open Quickly in a project or workspace that uses Swift. (20349540)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW407" title="Playgrounds"></a><h5 class="jump">Playgrounds</h5><ul class="ul"><li class="li"><p>Switching between <code>Raw Source</code> and <code>Rich Text</code> in a playground may cause the timeline to disappear.</p><p>You can show the timeline by selecting it from the Assistant editor popup menu. (20091907)</p></li><li class="li"><p>Opening a playground and immediately selecting <code>Undo</code> can set an invalid target platform.</p><p>Either redo, select a valid platform, or, if you have already closed the document, edit the playground’s <code>contents.xcplayground</code> file to ensure that either <code>osx</code> or <code>ios</code> is specified for the <code>target-platform</code> property. (20327880)</p></li><li class="li"><p>Xcode crashes if a playground has an invalid value target platform.</p><p>Edit the playground’s <code>contents.xcplayground</code> file to ensure that either <code>osx</code> or <code>ios</code> is specified for the <code>target-platform</code> property. (20327968)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW408" title="iOS Simulator"></a><h5 class="jump">iOS Simulator</h5><ul class="ul"><li class="li"><p>When launching a WatchKit app on the iOS Simulator, the Watch Simulator may not automatically launch.</p><p>Launch the Watch Simulator before launching the WatchKit app on the iOS Simulator. (19830540)</p></li><li class="li"><p>Localization settings made in a target's scheme (as well as other settings made on the command line) will not be honored on launch in the iOS Simulator with iOS 8 runtimes.</p><p>Choose the desired language in the Settings app. (19490124)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW409" title="Debugger"></a><h5 class="jump">Debugger</h5><ul class="ul"><li class="li"><p>When using the debugger, the variables view may omit values for the current frame if the current function comes from a Swift framework.</p><p>Add <code>-Xfrontend -serialize-debugging-options</code> to the <code>Other Swift Options</code> build setting for the framework. (20380047)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW410" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>Swift tests are not automatically discovered in this release of Xcode. Test annotations in the source editor sidebar will not appear, and the test navigator and the table of tests in the Test action of the scheme sheet will be empty.</p><p>You can run Swift tests by selecting <code>Product &gt; Test</code>. Once tests have been run, they appear in the test navigator and the scheme sheet. The following limitations apply:</p><ul class="simple-spaceabove"><li><p>Tests discovered through execution in this manner provide limited interaction in the test navigator. For example, Run buttons do not appear and clicking on a test in the navigator does not jump to the source code except in the case of a test error.</p></li><li><p>Run buttons and test success/fail indicators will not appear in the source editor.</p></li></ul><p>(20373533)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW411" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>iOS extensions may need to be manually enabled before you can debug them. (18603937)</p></li><li class="li"><p>The Xcode menu command <code>Simulator Background Fetch</code> does not work. </p><p>Use the menu command in iOS Simulator instead. (20145602)</p></li><li class="li"><p>Attached devices running earlier versions of iOS might show up as ineligible in the run destinations menu.</p><p>To correct this problem, reconnect the devices one at a time. (20320586)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW412" title="Xcode 6.2"></a><h3 class="jump">Xcode 6.2</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW413" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW414" title="WatchKit Framework"></a><h5 class="jump">WatchKit Framework</h5><p>Xcode 6.2 adds support for iOS 8.2, including developing Apple Watch apps with the new WatchKit framework. Tools support for WatchKit includes:</p><ul class="ul"><li class="li"><p>Design tools for building Apple Watch interfaces, glances, and notifications</p></li><li class="li"><p>Debugging and profiling support</p></li><li class="li"><p>Apple Watch support in iOS Simulator for testing apps, glances, and notifications</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW415" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW416" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>Interface Builder sometimes fails to render a subclass of a designable class on the canvas, or fails to show inspectable properties inherited from a superclass.</p><p>Add <code>IB_DESIGNABLE</code> or <code>@IBDesignable</code> to the subclass declaration. (19512849)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW417" title="Asset Catalog"></a><h5 class="jump">Asset Catalog</h5><ul class="ul"><li class="li"><p>When creating a new Apple Watch app target, the newly created asset catalog includes an "Unassigned" slot in the catalog's app icon.</p><p>Select the "Unassigned" slot and delete it using the Delete key. (19978639)</p></li><li class="li"><p>The long-look slot in an Apple Watch app asset catalog for 38mm devices is labeled incorrectly. The label reads:</p><ul class="simple-spaceabove"><li><p><code>Apple Watch - Home Screen (All) - Long Look (42 mm) - 40pt</code></p></li></ul><p>It should read:</p><ul class="simple-spaceabove"><li><p><code>Apple Watch - Home Screen - Long Look (38 mm) - 40pt</code></p></li></ul><p>This slot works correctly for 38 mm device icons. </p><p>The long-look slot for 42 mm devices is labeled: <code>Apple Watch - Long Look - 44pt</code>. (19978648)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW418" title="iOS Simulator"></a><h5 class="jump">iOS Simulator</h5><ul class="ul"><li class="li"><p>iCloud accounts requiring two factor authentication are not supported in iOS Simulator.</p><p>For development, create an account that doesn't use two factor authentication. (18522339)</p></li><li class="li"><p>Running an iOS app and an Apple Watch app concurrently in the simulator is not supported.</p><p>To debug an iOS app and an Apple Watch app:</p><ol class="ol"><li class="li"><p>Build and run the Apple Watch app.</p></li><li class="li"><p>Tap the iOS app's icon in the simulator home screen.</p></li><li class="li"><p>Use <code>Debug &gt; Attach to Process</code> to debug the iOS app in Xcode.</p></li></ol><p>(18559453)</p></li><li class="li"><p>Apps containing an Apple Watch extension may not deploy to iOS Simulator for iOS 8.1.x or earlier.</p><p>Add a <code>"MinimumOSVersion" = "8.2"</code> key pair to the <code>Info.plist</code> for the Apple Watch extension. (20032374)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW419" title="Instruments"></a><h5 class="jump">Instruments</h5><ul class="ul"><li class="li"><p>The UI Automation Instrument is not supported for WatchKit apps. (19152139)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW420" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>When stopped at a breakpoint in an Apple Watch app, tapping <code>Stop</code> doesn't stop the running app.</p><p>Tap <code>Stop</code> twice. (18991746)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW421" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Sharing a scheme in a project containing an Apple Watch app prevents iOS and Apple Watch app schemes from being created. (18941832)</p></li><li class="li"><p>Icons for Apple Watch are not displayed in the Xcode Devices window when running on OS X 10.10.2 and earlier. (19986057)</p></li><li class="li"><p>The Devices window does not show a warning when a connected iOS device requires user interaction to approve a Trust request.</p><p>Use the connected iOS device to approve the Trust alert. (19944552)</p></li><li class="li"><p>Xcode does not show an Apple Watch as paired if the companion iPhone was rebooted and then connected to the host Mac without first being unlocked. </p><p>To resolve, reboot the iPhone and unlock it with a password before connecting it to the Mac. (19864431)</p></li><li class="li"><p>The App Store import fails for Apple Watch apps that do not have the same version information as their containing app.</p><p>To prevent this import failure, ensure that the <code>CFBundleVersion</code> and <code>CFBundleShortVersionString</code> entries in the Apple Watch app and the containing app are identical. (17812309)</p></li><li class="li"><p>If the deployment target of an app containing an Apple Watch extension is configured for earlier than iOS 8.2, deployment of the app to devices running iOS 8.1.x or earlier may fail. </p><p>Manually configure the deployment target of the Apple Watch extension for iOS 8.2.  The Apple Watch extension will not run on iOS earlier than 8.2, but the app’s deployment will be allowed. (20032374)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW422" title="Notes"></a><h4 class="jump">Notes</h4><div class="importantbox clear"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_109" title="Important"></a><p><strong>Important:</strong>&nbsp;Xcode 6.2 is the last release of Xcode that supports running on OS X Mavericks. (18673392)</p><p></p></aside></div></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW423" title="Xcode 6.1.1"></a><h3 class="jump">Xcode 6.1.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW424" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW425" title="Swift Language"></a><h5 class="jump">Swift Language</h5><ul class="ul"><li class="li"><p>Many common causes of SourceKit crashes have been fixed, namely corrupted module caches and out of date derived data.</p></li><li class="li"><p>Passing class objects for pure Swift class to <code>AnyObject</code> values no longer causes a crash. (18828226)</p></li><li class="li"><p>Class methods and initializers that satisfy protocol requirements now properly invoke subclass overrides when called in generic contexts. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>  protocol P {<span></span></pre></td></tr><tr><td scope="row"><pre>    class func foo()<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>  class C: P {<span></span></pre></td></tr><tr><td scope="row"><pre>    class func foo() { println("C!") }<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>  class D: C {<span></span></pre></td></tr><tr><td scope="row"><pre>    override class func foo() { println("D!") }<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>  func foo&lt;T: P&gt;(x: T) {<span></span></pre></td></tr><tr><td scope="row"><pre>    x.dynamicType.foo()<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>  foo(C()) // Prints "C!"<span></span></pre></td></tr><tr><td scope="row"><pre>  foo(D()) // Used to incorrectly print "C!", now prints "D!"<span></span></pre></td></tr></table></div><p>(18828217) </p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW426" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>Fixed an issue where Interface Builder could not open or compile IB documents that have an image name containing a slash (‘<code>/</code>') character on Yosemite. This manifested as a range exception on <code>NSTaggedPointerString</code> when calling <code>+[NSImage imageNamed:]</code>. (18752260)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW427" title="Xcode Server"></a><h5 class="jump">Xcode Server</h5><ul class="ul"><li class="li"><p>Fixed an issue where choosing a new build of Xcode after configuring Xcode Server could cause permissions problems. (18819339)</p></li><li class="li"><p>Fixed a crash in Xcode Server when the private portal keychain is replaced with a symlink to the system keychain. (18854423)</p></li><li class="li"><p>Fixed an issue with startup when using a password policy. (18819348)</p></li><li class="li"><p>Fixed an issue checking out sources in Xcode Server when connecting over SSH. (18819357)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW428" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW429" title="Debugger"></a><h5 class="jump">Debugger</h5><ul class="ul"><li class="li"><p>Data structures containing bitfields may display incorrectly in the debugger when referenced from Swift code. (17967427)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW430" title="Asset Catalogs"></a><h5 class="jump">Asset Catalogs</h5><ul class="ul"><li class="li"><p>If your project’s only assets are in an asset catalog, the build may fail with an error similar to: '<code>.../Contents/Resources</code> does not exist.’ </p><p>Add at least one non-asset catalog resource to your project. (17848595)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW431" title="iOS Simulator"></a><h5 class="jump">iOS Simulator</h5><ul class="ul"><li class="li"><p>The iOS Simulator will sometimes loose network connectivity when the host’s network configuration changes.</p><p>Restart the simulated device to regain network connectivity. (17867038)</p></li><li class="li"><p>When playing a video to the external display in the iOS Simulator, external display may be all black.</p><p>Change the resolution of the external display while the video is playing and then change it back to the desired resolution. (17933514)</p></li><li class="li"><p>After you install iOS 7.1 Simulator using the Downloads panel in Xcode Preferences, the iOS 7.1 simulator’s devices may not be available in the run destination menu.</p><p>Log out and then log in again, or restart your computer. (19011252)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW432" title="Xcode 6.1"></a><h3 class="jump">Xcode 6.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW433" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW434" title="Swift Language"></a><h5 class="jump">Swift Language</h5><ul class="ul"><li class="li"><p>Xcode 6.1 includes Swift 1.1. (18238390)</p></li><li class="li"><p>A large number of AppKit APIs have been audited for optional conformance in addition to WebKit, Foundation, UIKit, CoreData, SceneKit, SpriteKit, and Metal APIs. As a result, a significant number of implicitly unwrapped optionals have been removed from their interfaces. These changes clarify the nullability of properties, arguments, and return values in the APIs. The audit effort is ongoing.</p><p>The API changes replace <code>T!</code> with either <code>T?</code> or <code>T</code> depending on whether or not the value can be <code>null</code>, respectively.  If you find a case that is incorrect, file a bug at <span class="content_text"><a href="http://bugreport.apple.com" class="urlLink" rel="external">http://bugreport.apple.com</a></span> and include the tag “<em>#IUO</em>” in the subject line.</p><p>If you encounter a method, property, or initializer for which the return value is incorrectly considered non-nullable, you can work around the problem by wrapping the result in an optional:</p><div class="codesample clear"><table><tr><td scope="row"><pre>var fooOpt: NSFoo? = object.reallyMightReturnNil()<span></span></pre></td></tr><tr><td scope="row"><pre>if let foo = fooOpt {...}<span></span></pre></td></tr></table></div><p>Be sure to file a bug about these cases. </p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW435" title="Note"></a><p><strong>Note:</strong>&nbsp;Do not file bugs about APIs that are still marked as <code>T!</code>; we already know about them.</p><p></p></aside></div></li><li class="li"><p>Values of type <code>Any</code> can now contain values of function type. (16406907)</p></li><li class="li"><p>Documentation for the standard library (displayed in quick help and in the synthesized header for the Swift module) is improved. (16462500)</p></li><li class="li"><p>All of the <code>*LiteralConvertible</code> protocols now use initializers for their requirements rather than static methods starting with <code>convertFrom</code>. For example, <code>IntegerLiteralConvertible</code> now has the following initializer requirement:</p><div class="codesample clear"><table><tr><td scope="row"><pre>init(integerLiteral value: IntegerLiteralType)<span></span></pre></td></tr></table></div><p>Any type that previously conformed to one of these protocols needs to replace the <code>convertFromXXX</code> static methods with the corresponding initializer. (18154091)</p></li><li class="li"><p>Xcode produces fixit hints to move code from the old-style “fromRaw()/toRaw()” enum APIs to the new style-initializer and “rawValue” property. (18216832)</p></li><li class="li"><p>Class properties don't need to be marked final to avoid O(n) mutations on value semantic types. (17416120)</p></li><li class="li"><p>Initializers can fail by returning <code>nil</code>. A failable initializer is declared with <code>init?</code> to return an explicit optional or <code>init!</code> to return an implicitly unwrapped optional.</p><p>For example, <code>String.toInt</code> could be implemented as a failable initializer of <code>Int</code>:</p><div class="codesample clear"><table><tr><td scope="row"><pre>extension Int {<span></span></pre></td></tr><tr><td scope="row"><pre>  init?(fromString: String) {<span></span></pre></td></tr><tr><td scope="row"><pre>    if let i = fromString.toInt() {<span></span></pre></td></tr><tr><td scope="row"><pre>      // Initialize<span></span></pre></td></tr><tr><td scope="row"><pre>      self = i<span></span></pre></td></tr><tr><td scope="row"><pre>    } else {<span></span></pre></td></tr><tr><td scope="row"><pre>      // Discard self and return 'nil'<span></span></pre></td></tr><tr><td scope="row"><pre>      return nil<span></span></pre></td></tr><tr><td scope="row"><pre>    }<span></span></pre></td></tr><tr><td scope="row"><pre>  }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>The result of constructing a value using a failable initializer should be checked for <code>nil</code> as in this example.</p><div class="codesample clear"><table><tr><td scope="row"><pre>if let twentytwo = Int(fromString: "22") {<span></span></pre></td></tr><tr><td scope="row"><pre>  println("the number is \(twentytwo)")<span></span></pre></td></tr><tr><td scope="row"><pre>} else {<span></span></pre></td></tr><tr><td scope="row"><pre>  println("not a number")<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>In the current implementation, structure and enumerator initializers can return <code>nil</code> at any point inside the initializer, but initializers of a class can only return <code>nil</code> after all of the stored properties of the object have been initialized and <code>self.init</code> or <code>super.init</code> has been called. If <code>self.init</code> or <code>super.init</code> is used to delegate to a failable initializer, then the <code>nil</code> return is implicitly propagated through the current initializer if the called initializer fails. (16480364)</p></li><li class="li"><p>Objective-C <code>init</code> and factory methods are imported as failable initializers when they can return <code>nil</code>. In the absence of information about a potentially <code>nil</code> result, an Objective-C <code>init</code> or factory method will be imported as <code>init!</code>.</p><p>As part of this change, factory methods that have <code>NSError**</code> parameters, such as <code>+[NSString stringWithContentsOfFile:encoding:error:]</code>, will now be imported as failable) initializers. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>init?(contentsOfFile path: String,<span></span></pre></td></tr><tr><td scope="row"><pre>      encoding: NSStringEncoding,<span></span></pre></td></tr><tr><td scope="row"><pre>      error: NSErrorPointer)<span></span></pre></td></tr></table></div><p>(18232430)</p></li><li class="li"><p>OS X apps can now apply the <code>@NSApplicationMain</code> attribute to their app delegate class in order to generate an implicit <code>main</code> for the app. </p><p>This attribute works in the same way as the <code>@UIApplicationMain</code> attribute for iOS apps. (16904667)</p></li><li class="li"><p>Casts can now be performed between CF types (such as <code>CFString</code>, <code>CGImage</code>, and <code>SecIdentity</code>) and <code>AnyObject</code>. Such casts will always succeed at run-time. For example:</p><ul class="simple-spaceabove"><li><p><code>var cfStr: CFString = ...</code></p></li><li><p><code>var obj: AnyObject = cfStr as AnyObject</code></p></li><li><p><code>var cfStr = obj as CFString</code></p></li></ul><p>(18088474)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW436" title="Playgrounds"></a><h5 class="jump">Playgrounds</h5><ul class="ul"><li class="li"><p>iOS Playgrounds now support displaying animated views with the <code>XCPShowView()</code><code>XCPlayground</code> API. This capability is disabled by default; it can be enabled by checking the "Run in Full Simulator" setting in the Playground Settings inspector. </p><p>When the capability is enabled, running the playground causes the iOS Simulator application to launch and run the playground in the full simulator. This capability is also required for other functionality that fails without the full simulator, such as <code>NSURLConnection</code> http requests. Running in the full iOS Simulator is slower than running in the default mode. (18282806)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW437" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>Dead code stripping no longer removes public declarations that are needed to run tests from Swift application targets. (18173029)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW438" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW439" title="Playgrounds"></a><h5 class="jump">Playgrounds</h5><ul class="ul"><li class="li"><p>A weakly-linked symbol in a playground no longer causes a compilation error. (18000684)</p></li><li class="li"><p>Using <code>NSView</code> subclasses in OS X playgrounds no longer results in execution failure. (18449054)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW440" title="Source Editor"></a><h5 class="jump">Source Editor</h5><ul class="ul"><li class="li"><p>Addressed an issue that could cause Xcode to become unresponsive while editing Swift code. </p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW441" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>Swift expressions like '<code>expr</code>', '<code>p</code>', and '<code>print</code>' that are evaluated from the LLDB prompt in the debugger console will now work on 32-bit iOS devices. (18249931)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW442" title="REPL"></a><h5 class="jump">REPL</h5><ul class="ul"><li class="li"><p>In the Swift REPL, attempts to inspect instances of classes defined in the REPL now produce properly formed data for stored properties. (18457336)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW443" title="Xcode Server"></a><h5 class="jump">Xcode Server</h5><ul class="ul"><li class="li"><p>Configuring Xcode Server on a system that had a pre-GM build of Xcode 6 now works. (18314522)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW444" title="iOS Simulator"></a><h5 class="jump">iOS Simulator</h5><ul class="ul"><li class="li"><p>Settings changed in the Settings app on iOS Simulator now persist as expected. (18238018)</p></li><li class="li"><p>Deleting an app from iOS Simulator now deletes user defaults as expected. (18307910)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW445" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW446" title="Templates"></a><h5 class="jump">Templates</h5><ul class="ul"><li class="li"><p>Users upgrading Xcode, iOS Simulator, and documentation downloads from Xcode 5.1.1 to Xcode 6.1 may receive the error, “The digest is missing,” when building and running a master detail app on a device.</p><p>Unplug the device and plug it back in. (18464963)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW447" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>By default, NSTableViews and NSOutlineViews have a white background, which may be incorrect when the control is shown with a dark appearance.</p><p>To dynamically support both light and dark appearances, change the background of an <code>NSTableView</code> or <code>NSOutlineView</code> from “Default” to “Control Background Color”. (18075907)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW448" title="iOS Simulator"></a><h5 class="jump">iOS Simulator</h5><ul class="ul"><li class="li"><p>Simulated devices can get stuck in a “Creating” state in some circumstances. This problem can occur either when creating new devices or when resetting existing devices after having renamed <code>Xcode.app</code>.  </p><p>If this this problem occurs, reboot your system and reset the device from the command line by running <code>xcrun simctl erase &lt;Device UDID&gt;</code>. You can obtain the UDID of the device by checking the output of <code>xcrun simctl list</code>. (17042870)</p></li><li class="li"><p>Localization and Keyboard settings, including 3rd party keyboards, are not correctly honored by Safari, Maps, and developer apps in the iOS 8.1 Simulator.  <code>[NSLocale currentLocale]</code> returns <code>en_US</code> and only the English and Emoji keyboards are available. (18418630, 18512161)</p></li><li class="li"><p>If an app is weak linked against frameworks new in iOS 8 SDK and OS X 10.10 SDK, it may fail to run if the run destination is an iOS Simulator for older iOS runtimes and the host system is running OS X Yosemite.  (17807439)</p></li><li class="li"><p>iOS Simulator does not support the use of network proxy servers that require authentication. (14889876)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW449" title="App Extensions"></a><h5 class="jump">App Extensions</h5><ul class="ul"><li class="li"><p>Debugging Today app extensions is not reliable after the first debug session.</p><p>Dismiss Notification Center before starting the next debug session. (18051136)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW450" title="Xcode 6.0.1"></a><h3 class="jump">Xcode 6.0.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW451" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW452" title="App Submission"></a><h5 class="jump">App Submission</h5><ul class="ul"><li class="li"><p>App Store submission issues encountered with the Xcode 6.0 GM seed have been resolved. (18444000)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW453" title="Xcode 6.0"></a><h3 class="jump">Xcode 6.0</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW454" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW455" title="Swift Language"></a><h5 class="jump">Swift Language</h5><p>Swift is a new object-oriented programming language for iOS development. Swift is modern, powerful, expressive, and easy to use.</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW456" title="Note"></a><p><strong>Note:</strong>&nbsp;Swift development for OS X requires the OS X version 10.10 SDK, available in beta at the time of this release. For more information, see <span class="content_text"><a href="#//apple_ref/doc/uid/TP40001051-CH1-SW472" data-renderer-version="1">Swift Support for OS X</a></span>.</p><p></p><p></p></aside></div><ul class="ul"><li class="li"><p>Access all of the Cocoa Touch frameworks with Swift.</p></li><li class="li"><p>Swift code is compiled and optimized by the advanced LLVM compiler to create high-performance apps.</p></li><li class="li"><p>Swift provides increased type safety with type inference, restricts direct access to pointers, and automatically manages memory using ARC to make it easy for you to use Swift and create secure, stable software. Other features related to language safety include mandatory variable initialization, automatic bounds checking to prevent overflows, conditionals that break by default, and elimination of pointers to direct memory by default.</p></li><li class="li"><p>Write, debug, and maintain less code, with an easy to write and read syntax and no headers to maintain.</p></li><li class="li"><p>Swift includes optionals, generics, closures, tuples, and other modern language features. Inspired by and improving upon Objective-C, Swift code feels natural to read and write.</p></li><li class="li"><p>Use Swift interactively to experiment with your ideas and see instant results.</p></li><li class="li"><p>Swift is a complete replacement for both the C and Objective-C languages. Swift provides full object-oriented features, and includes low-level language primitives such as types, flow control, and operators.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW457" title="Xcode 6 Features supporting Swift"></a><h5 class="jump">Xcode 6 Features supporting Swift</h5><ul class="ul"><li class="li"><p>Playgrounds are an interactive development environment allowing you to experiment with Swift for prototyping, testing ideas, and so forth. Some uses for playgrounds include:</p><ul class="simple-spaceabove"><li><p>Designing a new algorithm and watching its results every step of the way</p></li><li><p>Experimenting with new API or trying out new Swift syntax</p></li><li><p>Creating new tests and then verifying that they work before promoting them into your test suite</p></li></ul></li><li class="li"><p>You can open select documentation in a playground to learn from the tutorial in a graphically rich, interactive environment. </p></li><li class="li"><p>The debugging console in Xcode includes an interactive version of the Swift language called the <em>read-eval-print loop (REPL)</em> built into LLDB. Use Swift syntax to evaluate and interact with your running app, or write new code to see how it works in a script-like environment. REPL is available from within the Xcode console or by using LLDB from within Terminal when attached to a running process. </p></li><li class="li"><p>The Xcode documentation viewer shows Quick Help or reference documentation in the language of your choice—Objective-C, Swift, or both.</p></li><li class="li"><p>Xcode synthesizes a Swift view of the SDK API when using jump-to-definition for SDK content from Swift code. The synthesized interface shows how the API is imported into Swift, and it retains all the comments from the original SDK headers.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW458" title="Additional Feature Enhancements for Xcode 6 IDE"></a><h5 class="jump">Additional Feature Enhancements for Xcode 6 IDE</h5></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW459" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>The XCTest framework supports performance measurement capabilities enabling you to quantify each part of an application. Xcode runs your performance tests and allows you to define a baseline performance metric. Each subsequent test run compares performance and displays the change over time.</p></li><li class="li"><p>New APIs in the XCTest framework allow testing code that executes asynchronously. You can now create tests for network operations, file I/O, and other system interactions that execute using asynchronous calls.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW460" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>Interface Builder uses live rendering to display your custom objects at design time exactly as they appear when your app is run. When you update the code for a custom view, the Interface Builder design canvas updates automatically with the new look you just typed into the source editor, with no need to build and run.</p></li><li class="li"><p>Size classes for iOS 8 enable designing a single universal storyboard with customized layouts for both iPhone and iPad. With size classes you can define common views and constraints once, and then add variations for each supported form factor. iOS Simulator and asset catalogs fully support size classes as well.</p></li><li class="li"><p>Interface Builder renders embedded custom iOS fonts during design time, giving a more accurate preview of how the finished app will look, with correct dimensions.</p></li><li class="li"><p>Find and search is supported in <code>.xib</code> and <code>.storyboard</code> files when using Interface Builder.</p></li><li class="li"><p>The preview editor includes the ability to present multiple previews and zooming.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW461" title="Asset Catalogs"></a><h5 class="jump">Asset Catalogs</h5><ul class="ul"><li class="li"><p>Size classes, JPEG, PDF, template images, and alignment rectangles are now supported by asset catalogs. </p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW462" title="Debugger"></a><h5 class="jump">Debugger</h5><ul class="ul"><li class="li"><p>Using the view debugger, a single button click pauses your running app and “explodes” the paused UI into a 3D rendering, separating each layer of a stack of views. Using the view debugger makes it easy to see why an image may be clipped and invisible, and the order of the graphical elements becomes clear. By selecting any view, you can inspect the details by jumping to the relevant code in the assistant editor source view. The view debugger also displays Auto Layout constraints, making areas where conflicts cause problems findable.</p></li><li class="li"><p>The debug navigator queue debugger is enhanced to record and display recently executed blocks, as well as enqueued blocks. You can use it to see where your enqueued blocks are and to examine the details of what’s been set up to execute.</p></li><li class="li"><p>Debug gauges provide at-a-glance information about resource usage while debugging, calling the developer’s attention to previously unknown problems.</p><ul class="simple-spaceabove"><li><p>Two new gauges, Network Activity and File Activity, visually highlight spikes in input/output activity while your app is running.</p></li><li><p>The iCloud gauge is updated with support for the new Documents in the Cloud and CloudKit features that provide access to files outside the app-specific container.</p></li></ul></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW463" title="GPU Tools"></a><h5 class="jump">GPU Tools</h5><ul class="ul"><li class="li"><p>Metal provides a new, low-overhead GPU graphics and compute API as well as a shading language for iOS. The Metal shader compiler adds support for precompiling Metal shaders in Xcode. The GPU frame debugger and shader profiler supports debugging and profiling Metal-based games and apps.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW464" title="SpriteKit"></a><h5 class="jump">SpriteKit</h5><ul class="ul"><li class="li"><p>The SpriteKit level designer enhances SpriteKit use and provides improved display of SpriteKit variables when debugging.</p></li><li class="li"><p>SpriteKit and SceneKit are now enhanced to work together and are supported on iOS.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW465" title="Extensions and Frameworks"></a><h5 class="jump">Extensions and Frameworks</h5><ul class="ul"><li class="li"><p>You can add an extension target to any iOS or Mac app to expand your app’s functionality to other apps in the OS.</p></li><li class="li"><p>iOS developers can now create dynamic frameworks.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW466" title="iOS Simulator"></a><h5 class="jump">iOS Simulator</h5><ul class="ul"><li class="li"><p>New iOS Simulator configurations allow you to keep data and configuration settings grouped together. Run one configuration for one version of an app, with its own data, and another configuration for a different app version.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW467" title="Localization"></a><h5 class="jump">Localization</h5><ul class="ul"><li class="li"><p>Xcode can package your localizable strings into the industry-standard XLIFF format for localization.</p></li><li class="li"><p>Xcode automatically generates the base language <code>.strings</code> file directly from your source code.</p></li><li class="li"><p>While designing in Interface Builder, the preview assistant can show how the interface appears in other languages.</p></li><li class="li"><p>Xcode can use a locale to run your app in iOS Simulator or directly on devices, as it would appear to customers in other countries.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW468" title="Compiler"></a><h5 class="jump">Compiler</h5><ul class="ul"><li class="li"><p>Profile Guided Optimization (PGO) works with the LLVM optimizer and XCTest tests to profile the most actively used parts of your application. You can also exercise your app manually to generate an optimization profile. PGO uses the profile to further optimize your app, targeting the areas that most need optimization, improving performance beyond what setting optimization options alone can achieve.</p></li><li class="li"><p>Developers can define modules for their own Objective-C code, which makes sharing frameworks across all their projects easier.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW469" title="Instruments"></a><h5 class="jump">Instruments</h5><ul class="ul"><li class="li"><p>The new Instruments user interface makes configuring your performance tuning session easier and improves control. The new template chooser allows you to choose your device and target as well as the starting point for your profiling session. The track view allows direct click-and-drag to set the time filter range. The toolbar takes up less space to let you focus on the task at hand. The tracks of recorded data are given more space, and configuration for how data is collected and viewed is managed in a unified inspector area.</p></li><li class="li"><p>You can profile any test or test suite, which is useful for analyzing memory leaks in a functional test or time profiling a performance test to see why it has regressed.</p></li><li class="li"><p>Simulator configurations are now treated like devices by Instruments, making it easy to launch or attach to processes in the simulator.</p></li><li class="li"><p>Counters and Events instruments have been combined into a more powerful Counters instrument and made easier to configure. It can track individual CPU events, and you can specify formulas to measure event aggregates, ratios, and more. iOS developers on 64-bit devices can now use Counters to fine-tune apps.</p></li><li class="li"><p>Instruments supports Swift, displaying Swift symbols in stack traces and Swift types in Allocations. You can also use Instruments to profile app extensions. </p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW470" title="Xcode Server"></a><h5 class="jump">Xcode Server</h5><ul class="ul"><li class="li"><p>Triggers allow you to make more complex integration scenarios by configuring server-side rules to launch custom scripts before or after the execution of an Xcode scheme.</p></li><li class="li"><p>Xcode Server supports the new Xcode performance-testing features, making it easy for a team to share a group of devices and Macs for continual performance testing.</p></li><li class="li"><p>Issues are now tracked per integration and allow delta tracking, so that you can see when an issue appeared or when it or was fixed, and by whom.</p></li><li class="li"><p>Configuration options in Xcode Server give development teams greater control over the execution of bots. New settings for integration intervals, grouping of bots, and iOS Simulator configurations make Xcode bots more powerful. The new reports UI includes bot-level statistics, the number of successful integrations, and commit and test addition tracking.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW471" title="Notes"></a><h4 class="jump">Notes</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW472" title="Swift Support for OS X"></a><h5 class="jump">Swift Support for OS X</h5><ul class="ul"><li class="li"><p>A future version of Xcode to be released along with OS X Yosemite will add Swift support for OS X, including playgrounds and REPL. Xcode 6.0 only supports Swift for iOS projects and playgrounds. A beta release of Xcode with Swift support for both OS X and iOS is available at <span class="content_text"><a href="http://developer.apple.com/xcode/downloads/" class="browserLink" >developer.apple.com/xcode/downloads/</a></span></p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW473" title="Swift Language"></a><h5 class="jump">Swift Language</h5><ul class="ul"><li class="li"><p>If you encounter an API method for which the return value is incorrectly considered non-nullable, or a property that is incorrectly considered non-nullable, please file a radar and include the tag “#IUO” in the subject line. You can work around the problem by immediately wrapping the result in an optional:</p><div class="codesample clear"><table><tr><td scope="row"><pre>var fooOpt: NSFoo? = object.reallyMightReturnNil()<span></span></pre></td></tr><tr><td scope="row"><pre>if let foo = fooOpt { … }<span></span></pre></td></tr></table></div><p>Please be sure to file bugs about these cases. Please do not file feature requests about APIs that are still marked as T!, we know about them. </p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW474" title="Xcode Features for Swift"></a><h5 class="jump">Xcode Features for Swift</h5><ul class="ul"><li class="li"><p>Refactoring for Swift is not available.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW475" title="Compiler"></a><h5 class="jump">Compiler</h5><ul class="ul"><li class="li"><p>The <code>libc++</code> headers in Xcode 6 include a change to make <code>std::pair</code> have a trivial constructor. This fix is important for performance and compliance with the C++ standard, but it changes the ABI for C++ code using <code>std::pair</code>.</p><p>This issue does not affect the <code>libc++</code> library installed on OS X and iOS systems because that library does not expose any uses of <code>std::pair</code> in its API. It is only a concern for your own code and any third-party libraries that you link with. As long as all of the code is built with the same version of <code>libc++</code>, there will be no problem.</p><p>If you need to maintain binary compatibility with a previous version of <code>libc++</code>, you can opt into keeping the old ABI by building with the <code>_LIBCPP_TRIVIAL_PAIR_COPY_CTOR</code> macro defined to zero, that is, by adding <code>-D_LIBCPP_TRIVIAL_PAIR_COPY_CTOR=0</code> to the compiler options. (15474572)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW476" title="Build System"></a><h5 class="jump">Build System</h5><ul class="ul"><li class="li"><p>Xcode will no longer pass options in the build setting <code>OTHER_LDFLAGS</code> to <code>libtool</code> when building static libraries, nor will it pass options in <code>OTHER_LIBTOOLFLAGS</code> to the Mach-O linker when building any other kind of product. Previously all options in both settings would be passed to both tools. Make sure that options are in the correct build setting for the product type, static library, or other component being built. (4285249)</p></li><li class="li"><p>Bundles (including frameworks, applications, and other bundles) which are added to a Copy Files build phase to embed the bundle in the current target's product will have their <code>Headers</code> and <code>PrivateHeaders</code> directories removed when they are copied. This is done to help ensure that header content in embedded bundles is not accidentally shipped to end users. This does not affect such items which are already in Copy Files build phases in existing projects. This change affects any file or directory inside the item being copied which is named exactly <code>Headers</code> or <code>PrivateHeaders</code>. </p><p>To have a target opt out of this behavior, set the build setting <code>REMOVE_HEADERS_FROM_EMBEDDED_BUNDLES</code> to <code><!--a  -->YES<!--/a--></code>. To have an existing target opt in to this behavior, remove and then re-add the desired file references to the Copy Files build phase in question.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW477" title="Find Navigator"></a><h5 class="jump">Find Navigator</h5><ul class="ul"><li class="li"><p>When using a regular expression in the Find navigator, it is now possible for a match to span multiple lines. The metacharacter “.” still excludes newlines, but a character class may include every character, for example, “<code>[\D\d]</code>”. (11393323)</p></li><li class="li"><p>When using a regular expression in the Find navigator, the “<code>\1</code>” syntax is no longer supported in the replacement string. To refer to a captured group, use the syntax “<code>$123</code>”. </p><p>With this change, you can now insert a digit after the tenth captured group and beyond by escaping the digit, for example, “<code>$10\2</code>.” Likewise, when finding text using patterns, you can insert a digit after the tenth pattern. (11836632)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW478" title=" Launch Screens"></a><h5 class="jump"> Launch Screens</h5><ul class="ul"><li class="li"><p>XIBs and Storyboards can now be used as launch screens. Applications take advantage of this feature to provide a single launch screen that adapts to different screen sizes using constraints and size classes. These launch screens are supported on iOS 8.0 and later. </p><p>Applications targeting iOS 7.x or prior releases need to also supply traditional launch PNGs via an asset catalog. Without launch PNGs for iOS 7 and earlier, applications will run in the retina 3.5” compatibility mode on retina 4” displays. (18000959)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW479" title="Frameworks on iOS"></a><h5 class="jump">Frameworks on iOS</h5><ul class="ul"><li class="li"><p>Embedded frameworks and dylibs are supported only on iOS 8 and later. </p><p>If your app deploys to prior iOS releases, turn off auto-linking. Load the frameworks or dylibs using <code>dlopen()</code> after performing an OS version check. (18140501)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW480" title="Hardware IO Tools"></a><h5 class="jump">Hardware IO Tools</h5><ul class="ul"><li class="li"><p>The <em>Hardware IO Tools for Xcode</em> package, available at <span class="content_text"><a href="http://developer.apple.com" class="browserLink" >developer.apple.com</a></span>, now includes the following apps:</p><ul class="simple-spaceabove"><li><p>Printer Simulator</p></li><li><p>HomeKit Accessory Simulator</p></li></ul><p>(17014426, 17014426, 17738621)</p></li><li class="li"><p>These three apps have been removed from the <em>Hardware IO Tools for Xcode</em> package download for this release:</p><ul class="simple-spaceabove"><li><p>Apple Bluetooth Guidelines Validation</p></li><li><p>Bluetooth Explorer</p></li><li><p>PacketLogger</p></li></ul><p> (18162817)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW481" title="Xcode Server"></a><h5 class="jump">Xcode Server</h5><ul class="ul"><li class="li"><p>Xcode can now configure bots to authenticate with source control repositories using SSH keys. (16512381)</p></li><li class="li"><p>Xcode Server prunes older integration data based on available disk space. (16535845)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW482" title="Xcodebuild"></a><h5 class="jump">Xcodebuild</h5><ul class="ul"><li class="li"><p><code>xcodebuild</code> now supports the <code>id</code> option for iOS simulator destination specifiers. In Xcode 5 this option was only available for iOS device destination specifiers. (17398965)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW483" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW484" title="App Submission"></a><h5 class="jump">App Submission</h5><ul class="ul"><li class="li"><p>Xcode 6.0 GM seed may encounter issues when submitting to the App Store. These issues to be resolved in a subsequent release of Xcode. (18344000)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW485" title="Swift Language"></a><h5 class="jump">Swift Language</h5><ul class="ul"><li class="li"><p>The relational operator <code>==</code> may not work on <code>enum</code> values if the <code>enum</code> is declared in another file.</p><p>Use <code>!(x != .Value)</code> instead of <code>(x == .Value)</code>. (18073705)</p></li><li class="li"><p>Properties of values typed as AnyObject may not be directly assigned to. </p><p>Cast the value of type '<code>AnyObject</code>' to the intended type, store it in a separate value, then assign it directly to the properties of that value. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>var mc: MyClass = someAnyObject as MyClass<span></span></pre></td></tr><tr><td scope="row"><pre>mc.foo = “reassign"<span></span></pre></td></tr></table></div><p>(15233922)</p></li><li class="li"><p>Swift does not support object initializers that fail by returning null.</p><p>If there is a factory method, use it instead. Otherwise, capture the result in an optional. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>let url: NSURL? = NSURL(string: "not a url")<span></span></pre></td></tr></table></div><p>(16480364)</p></li><li class="li"><p>Private entities with the same name and same type will conflict even if defined in different files within the same module. (17632175)</p></li><li class="li"><p>Nested functions that recursively reference themselves or other functions nested in the same outer function will crash the compiler. For example:</p><div class="codesample clear"><table><tr><td scope="row"><pre>func foo() {<span></span></pre></td></tr><tr><td scope="row"><pre>   func bar() { bar() }<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>  func zim() { zang() }<span></span></pre></td></tr><tr><td scope="row"><pre>  func zang() { zim() }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>Move recursive functions to the outer type or module context. (11266246)</p></li><li class="li"><p>A generic class can define a stored property with a generic type, as long as the generic class is not made available to Objective-C—that is, the generic class is not marked as <code>@objc</code> or subclassed from an Objective-C class. For example, this is valid:</p><div class="codesample clear"><table><tr><td scope="row"><pre>class Box&lt;T&gt; {<span></span></pre></td></tr><tr><td scope="row"><pre>   // "value" is a stored property whose type is the generic type parameter T<span></span></pre></td></tr><tr><td scope="row"><pre>   let value: T<span></span></pre></td></tr><tr><td scope="row"><pre>   init(value: T) {<span></span></pre></td></tr><tr><td scope="row"><pre>     self.value = value<span></span></pre></td></tr><tr><td scope="row"><pre>   }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p>If you need to make such a class available to Objective-C, use an array for storage:</p><div class="codesample clear"><table><tr><td scope="row"><pre>@objc class ObjCBox&lt;T&gt; {<span></span></pre></td></tr><tr><td scope="row"><pre>   let _value: T[]<span></span></pre></td></tr><tr><td scope="row"><pre>   var value: T { return _value[0] }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div><p> (16737510)</p></li><li class="li"><p>Using a Swift <code>Dictionary</code> with <code>Int64</code> or <code>UInt64</code> types as keys will cause traps on 32-bit platforms when attempting to insert a key whose value is not representable by an <code>Int32</code>.</p><p>Use <code>NSNumber</code> as the key type. (18113807)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW486" title="Playgrounds"></a><h5 class="jump">Playgrounds</h5><ul class="ul"><li class="li"><p>In Playgrounds, <code>println()</code> ignores the <code>Printable</code> conformance of user-defined types. (16562388)</p></li><li class="li"><p>iOS playgrounds do not support displaying animated views with the <code>XCPShowView()</code><code>XCPlayground</code> API. (17848651)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW487" title="Compiler"></a><h5 class="jump">Compiler</h5><ul class="ul"><li class="li"><p><code>ARM</code> and <code>ARM64</code> code that uses the <code>float16_t</code> type may fail when trying to link C++ code compiled with an older compiler. In previous versions of the compiler, <code>float16_t</code> was defined as <code>uint16_t</code>. <code>float16_t</code> is now defined as <code>__fp16</code>. (15506420)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW488" title="Debugger"></a><h5 class="jump">Debugger</h5><ul class="ul"><li class="li"><p>View Memory for Swift data structures in the debugger may show memory location zero.</p><p>Pass the structure to a function expecting a reference to an <code>UnsafePointer&lt;Void&gt;</code>, and print it within the function. Enter this address as the memory location to view. (17818703)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW489" title="Interface Builder"></a><h5 class="jump">Interface Builder</h5><ul class="ul"><li class="li"><p>If you set a Swift subclass of <code>NSValueTransformer</code> as a binding’s value transformer, the XIB or storyboard will contain an invalid reference to the class and the binding will not work properly at runtime.</p><p>Either enter a mangled class name into the <code>Value Transformer</code> field, or add the <code>@objc(…)</code> attribute to the <code>NSValueTransformer</code> subclass. (17495784)</p></li><li class="li"><p>Interface Builder does not support connecting to an outlet in a Swift file when the outlet type is a protocol.</p><p>Declare the outlet type as <code>AnyObject</code> or <code>NSObject</code>, connect objects to the outlet using Interface Builder, then change the outlet type back to the protocol. (17023935)</p></li><li class="li"><p>After porting a custom class from Objective-C to Swift, any references to the class in a XIB or storyboard needs to be updated manually. </p><p>Select each reference, clear the <code>Class</code> field in the Custom Class inspector, save, and reenter the class name. (17153630)</p></li><li class="li"><p>The implementation of <code>UICollectionViewCell</code> content view sizing has changed in iOS 8. When deploying collection view cells built with Xcode 6 to iOS 7, a cell’s content view has no autoresizing mask. This can result in undesirable layouts.</p><p>You must conditionally set the autoresizing mask for proper deployment of collection views on versions of iOS prior to iOS 8. The sample code below demonstrates how to implement this workaround on a custom subclass of <code>UICollectionViewCell</code>.</p><div class="codesample clear"><table><tr><td scope="row"><pre>- (void)commonInit_MyCollectionViewCell {<span></span></pre></td></tr><tr><td scope="row"><pre>    if ([[[UIDevice currentDevice] systemVersion] compare:@"8.0" options:NSNumericSearch] == NSOrderedDescending) {<span></span></pre></td></tr><tr><td scope="row"><pre>        [[self contentView] setAutoresizingMask:UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight];<span></span></pre></td></tr><tr><td scope="row"><pre>    }<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>- (id)initWithCoder:(NSCoder *)coder {<span></span></pre></td></tr><tr><td scope="row"><pre>    if (self = [super initWithCoder:coder]) {<span></span></pre></td></tr><tr><td scope="row"><pre>        [self commonInit_MyCollectionViewCell];<span></span></pre></td></tr><tr><td scope="row"><pre>    }<span></span></pre></td></tr><tr><td scope="row"><pre>    return self;<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>- (id)initWithFrame:(CGRect)frame {<span></span></pre></td></tr><tr><td scope="row"><pre>    if (self = [super initWithFrame:frame]) {<span></span></pre></td></tr><tr><td scope="row"><pre>        [self commonInit_MyCollectionViewCell];<span></span></pre></td></tr><tr><td scope="row"><pre>    }<span></span></pre></td></tr><tr><td scope="row"><pre>    return self;<span></span></pre></td></tr><tr><td scope="row"><pre>}<span></span></pre></td></tr></table></div>	<p>(18338361)</p></li><li class="li"><p>Interface Builder only shows custom geometry overrides (for example, <code>-intrinsicContentSize</code>) in a designable subclass in iOS documents. (17024838)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW490" title="Localization"></a><h5 class="jump">Localization</h5><ul class="ul"><li class="li"><p>A storyboard or XIB will not localize correctly if all of the following three conditions are true:</p><ul class="simple-spaceabove"><li><p>The storyboard or XIB uses size classes.</p></li><li><p>The base localization and the build target are set to <code>Universal</code>.</p></li><li><p>The build targets iOS 7.0.</p></li></ul><p>You can work around this issue by adding a <code>~iphone</code> and a <code>~ipad</code> variant of each strings file used by the affected storyboards and XIBs. Automate this operation with a build phase by doing the following.</p><ol class="ol"><li class="li"><p>Select the application target in the project editor, then go to the Build Phases tab.</p></li><li class="li"><p>Add a new Run Script phase with the following contents:</p><div class="codesample clear"><table><tr><td scope="row"><pre># Go to the app bundle.<span></span></pre></td></tr><tr><td scope="row"><pre>cd "${BUILT_PRODUCTS_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}"<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre>for f in "$PWD"/*.lproj/*.strings; do<span></span></pre></td></tr><tr><td scope="row"><pre>    # If the .strings file name doesn't already specify a device...<span></span></pre></td></tr><tr><td scope="row"><pre>    name=$(basename "$f" .strings)<span></span></pre></td></tr><tr><td scope="row"><pre>    if [[ "${name%%~iphone}" == "$name" &amp;&amp; "${name%%~ipad}" == "$name" ]]; then<span></span></pre></td></tr><tr><td scope="row"><pre>        # If there is a corresponding .nib in Base.lproj...<span></span></pre></td></tr><tr><td scope="row"><pre>        if [[ -e "Base.lproj/$name~iphone.nib" ]]; then<span></span></pre></td></tr><tr><td scope="row"><pre>            # Symlink the device-qualified file name to the unqualified file.<span></span></pre></td></tr><tr><td scope="row"><pre>            ln -sf "$f" "${f/%.strings/~iphone.strings}"<span></span></pre></td></tr><tr><td scope="row"><pre>        fi<span></span></pre></td></tr><tr><td scope="row"><pre>        # Do likewise for iPad.<span></span></pre></td></tr><tr><td scope="row"><pre>        if [[ -e "Base.lproj/$name~ipad.nib" ]]; then<span></span></pre></td></tr><tr><td scope="row"><pre>            ln -sf "$f" "${f/%.strings/~ipad.strings}"<span></span></pre></td></tr><tr><td scope="row"><pre>        fi<span></span></pre></td></tr><tr><td scope="row"><pre>    fi<span></span></pre></td></tr><tr><td scope="row"><pre>done<span></span></pre></td></tr></table></div></li></ol><p>(18087788)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW491" title="App Extensions"></a><h5 class="jump">App Extensions</h5><ul class="ul"><li class="li"><p>Signed OS X App Extensions may emit <code>dyld</code> warnings and fail to launch.</p><p>Ensure that the same team ID is set for both the app extension and the containing app. (17711503)</p></li><li class="li"><p>Creating an iOS Document Picker extension with the File Provider enabled does not add the containing app to the resulting app group.</p><p>Add the containing app to the app group manually. (16871267)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW492" title="Asset Catalogs"></a><h5 class="jump">Asset Catalogs</h5><ul class="ul"><li class="li"><p>If a build target’s only asset is an asset catalog, building fails with the error “<code>.../Contents/Resources" does not exist</code>.”</p><p>Add at least one non-asset catalog resource to the build target. (17848595)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW493" title="Refactoring"></a><h5 class="jump">Refactoring</h5><ul class="ul"><li class="li"><p>The refactoring engine does not detect when an Objective-C class has a Swift subclass.</p><p>When doing Objective-C refactoring, any changes needed in Swift subclasses will need to be made by hand. (16465974)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW494" title="Building"></a><h5 class="jump">Building</h5><ul class="ul"><li class="li"><p>Incremental builds of app extensions that use Swift fail with a code signing error.</p><p>Choose Product &gt; Clean and then build again to workaround this issue. (17589793)</p></li><li class="li"><p>A mixed Swift and Objective-C project may not rebuild fully after a header is changed.</p><p>Choose Product &gt; Clean and then build again to workaround this issue. (17963128)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW495" title="Build System"></a><h5 class="jump">Build System</h5><ul class="ul"><li class="li"><p>The build step which embeds the Swift standard libraries in a bundle only runs for application product types, and only if the application itself, independent of any embedded content, contains Swift source files. </p><p>When building an application that does not contain Swift source files but embeds other content (like frameworks, XPC services, app extensions, and so on) that does contain Swift code, you must set the build setting <em>Embedded Content Contains Swift Code</em> (<code>EMBEDDED_CONTENT_CONTAINS_SWIFT</code>). That way the Swift libraries will be included in the application. (17757566)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW496" title="Xcode Server"></a><h5 class="jump">Xcode Server</h5><ul class="ul"><li class="li"><p>After upgrading to Xcode 6, users need to rejoin their ADC development team in OS X Server. (17789478)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW497" title="iOS Simulator"></a><h5 class="jump">iOS Simulator</h5><ul class="ul"><li class="li"><p>Renaming Xcode.app after running any of the Xcode tools in that bundle may cause iOS simulator to be no longer be available.</p><p>Either rename Xcode.app back to what it was when first launched or restart your Mac. (16646772)</p></li><li class="li"><p>Testing on iOS simulator may produce an error indicating that the application could not be installed or launched.</p><p>Re-run testing or start another integration. (17733855)</p></li><li class="li"><p>Settings changed in the Settings app on iOS Simulator may not persist. (18238018)</p></li><li class="li"><p>Deleting an app from iOS Simulator doesn’t delete user defaults. (18307910)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW498" title="Source Control"></a><h5 class="jump">Source Control</h5><ul class="ul"><li class="li"><p>Opening the Source Control menu in Xcode when a project references a working copy that is not checked out sometimes causes crashes. </p><p>Delete the <code>.xccheckout</code> file within the project. (17905354)</p></li><li class="li"><p>When updating a Subversion working copy with local modifications and an incoming change modifies the open project file (project.pbxproj), the status icons for the files modified before the update may not appear until Xcode is relaunched.</p><p>Restart Xcode. (18122757)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW499" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>The XCTest class file template allows creation of a test class using Swift as the implementation language for OS X projects. However, Xcode version 6.0 does not support Swift development for OS X. Attempting to build a Swift test class in an OS X test target with Xcode 6.0 results in a compiler error. (18107068)</p></li><li class="li"><p>Dead code stripping may remove public declarations needed for test class implementations from Swift application targets.</p><p>Turn off dead code stripping in configurations where you are building tests. (18173029)</p></li><li class="li"><p>XCTest test classes written in Objective-C cannot import the Swift generated interfaces header (<code>$(PRODUCT_MODULE_NAME)-Swift.h</code>) for application targets, and cannot be used to test code that requires this header.</p><p>Write test classes for Swift code with Swift. Test classes written in Objective-C for framework targets can access the Swift generated interfaces by importing the framework module using <code>@import FrameworkName;</code>. (16931027)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW500" title="Deprecations"></a><h4 class="jump">Deprecations</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW501" title="Carbon Tools"></a><h5 class="jump">Carbon Tools</h5><ul class="ul"><li class="li"><p>Tools that support Carbon development are deprecated with Xcode 6. These include: BuildStrings, GetFileInfo, SplitForks, ResMerger, UnRezWack, MergePef, RezWack, SetFile, RezDet, CpMac, DeRez, MvMac, and Rez. (10344338)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW502" title="OCUnit and SenTestingKit.framework"></a><h5 class="jump">OCUnit and SenTestingKit.framework</h5><ul class="ul"><li class="li"><p>OCUnit and the SenTestingKit framework are deprecated and will be removed from a future release of Xcode. Source code using OCUnit will generate warnings while being compiled. Developers should migrate to XCTest by using Edit &gt; Refactor &gt; Convert to XCTest. For more information, see <em><a href="../../../../documentation/DeveloperTools/Conceptual/testing_with_xcode/chapters/01-introduction.html#//apple_ref/doc/uid/TP40014132" data-renderer-version="1" target="_self">Testing with Xcode</a></em>. </p></li></ul></section></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW503" title="Xcode 5"></a><h2 class="jump">Xcode 5</h2><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW504" title="Xcode 5.1.1"></a><h3 class="jump">Xcode 5.1.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW505" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW506" title="Build System"></a><h5 class="jump">Build System</h5><ul class="ul"><li class="li"><p>Updated compiler options logic allows "Enforce Strict Aliasing" to be set to off with the <code>-Ofast</code> flag (16368909)</p></li><li class="li"><p>Errors when using <code>xcodebuild -parallelizeTargets</code> option or equivalent Xcode build setting (16420957)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW507" title="Compiler"></a><h5 class="jump">Compiler</h5><ul class="ul"><li class="li"><p>Crash in compiled code when using ARC and C++ (16368824)</p></li><li class="li"><p>Compiler error when using the <code>-fsanitize=undefined-trap</code> and <code>-fsanitize-undefined-trap-on-error</code> options (16387418)</p></li><li class="li"><p>Crash in compiled code when targeting iOS 5.1.1 (16485980)</p></li><li class="li"><p>Compiler crashes when compiling C++ initializers and other situations (16438726, 16368865)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW508" title="Linker"></a><h5 class="jump">Linker</h5><ul class="ul"><li class="li"><p>Crashes and errors in the linker related to LTO, dead stripping, and branch out of range (16368534, 16368564, 16368631)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW509" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>Xcode crash when debugging (16369101)</p></li><li class="li"><p>Issue where some objects would not display in the Quick Look display on the first try (16368930)</p></li><li class="li"><p>Inconsistent behaviors in the <code>UIView</code> Quick Look display (16368999)</p></li><li class="li"><p>Problem with Quick Look for <code>UIImageView</code> (16489265)</p></li><li class="li"><p>Xcode crash with multiple debugging sessions (16369025)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW510" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>Compiler error after converting a project from OCUnit to XCTest (16387456)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW511" title="Xcode Server"></a><h5 class="jump">Xcode Server</h5><ul class="ul"><li class="li"><p>Issue where Xcode Server sometimes incorrectly claims that the version of OS X Server is incompatible (16436893)</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW512" title="Xcode 5.1"></a><h3 class="jump">Xcode 5.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW513" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW514" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>Quick Look can be implemented for developer defined classes</p><p>When an instance of a custom class is viewed with Quick Look in the debugger variables view or a data tip, the debugger presents it using a method named <code>-debugQuickLookObject</code> defined in the class implementation. For details on how to use this capability, see <em><a href="../../../../documentation/IDEs/Conceptual/CustomClassDisplay_in_QuickLook/Introduction/Introduction.html#//apple_ref/doc/uid/TP40014001" data-renderer-version="1" target="_self">Quick Look for Custom Types in the Xcode Debugger</a></em>. (12723736)</p></li><li class="li"><p>Log breakpoint actions now print out the logical value of expressions. </p><p>For example, a log breakpoint action such as <code>"myString = @myString@"</code> now prints the value of <code>myString</code>, rather than the pointer value. (13211695)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW515" title="Editing User Interfaces"></a><h5 class="jump">Editing User Interfaces</h5><ul class="ul"><li class="li"><p>Interface Builder documents can contain specific information about new features they use and the OS versions they require, allowing previous versions of Xcode to display better warning messages when trying to open such documents. (7659982)</p></li><li class="li"><p>Building interfaces in Interface Builder using auto layout offers the full suite of possible constraint types: aspect ratios, proportional sizes and positions, cross attribute alignments, and a new constraint inspector with features for editing nearly all properties of a constraint. </p></li><li class="li"><p>The Interface Builder constraint Attributes inspector shows a constraint's items and attributes and allows editing of the attributes. This feature enables the ability to create cross-attribute constraints such as <code>view1.centerY = view2.bottom</code>. (13739009)</p></li><li class="li"><p>You can use Interface Builder to edit the relation of any type of constraint, including alignment constraints (for instance, <code>view1.leading &lt;= view2.leading</code>) and equal size constraints (for instance, <code>view1.width &gt;= view2.width</code>). (14721954)</p></li><li class="li"><p>You can create aspect ratio and proportional sizing constraints and edit the multiplier of constraints in Interface Builder. The multiplier can be a decimal number (for example, <code>0.5</code>), a fraction (for example, <code>1/2</code>), or an aspect ratio (for example, <code>1:2</code>). (11935843)</p></li><li class="li"><p>Constraints attached to ambiguous views in Interface Builder are drawn orange only in the axis with ambiguity. This makes it faster to identify a potential problem in the canvas. (15114120)</p></li><li class="li"><p>The Interface Builder canvas now displays overlay scrollers when appropriate, based on the “Show scroll bar” setting in the General pane in System Preferences. (10069033)</p></li><li class="li"><p>The Interface Builder inspector now has support for:</p><ul class="simple-spaceabove"><li><p><code>NSTableView</code> -  <code>floatsGroupRows</code> property (9617000)</p></li><li><p><code>UISegmentedControl</code> -  <code>apportionsSegmentWidthsByContent</code> property (9950528)</p></li><li><p><code>UITableView</code> -  <code>sectionIndexBackgroundColor</code> property (14776025)</p></li><li><p>Setting “Detail” button type for prototype <code>UITableViewCell</code> -  <code>editingAccessoryType</code> property (15039987)</p></li></ul></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW516" title="Instruments and Symbolication"></a><h5 class="jump">Instruments and Symbolication</h5><ul class="ul"><li class="li"><p>Instruments now finds symbols much more reliably. </p><p>If symbols aren't showing up automatically, try the following:</p><ul class="nested"><li class="nested li"><p>When Spotlight indexing is disabled for Xcode derived data, such as when using <code>/tmp</code>, add a global list of additional search paths configured in the Instruments preferences.</p></li><li class="nested li"><p>The context menu for an address now includes the option “Symbolicate with DSYM” to add a specific symbol file.</p></li><li class="nested li"><p>Use the File menu Symbols command to see a more detailed list of the state of individual executables and libraries.</p><ul class="simple-spaceabove"><li><p>Green lights indicate the presence of symbols and source information. </p></li><li><p>Yellow lights indicate libraries with some symbols but can still benefit from locating a dSYM. </p></li><li><p>Red lights indicate situations that prevented symbolication. (14269449)</p></li></ul></li></ul></li><li class="li"><p>The <code>instruments</code> command-line tool now supports specifying the simulator SDK and device type using the <code>-w</code> flag. To see a list of the supported simulator configurations as well as attached devices, execute <code>instruments -s devices</code> in a Terminal window. (14996865)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW517" title="Scripted installation"></a><h5 class="jump">Scripted installation</h5><ul class="ul"><li class="li"><p>Installing Device Support</p><p>Run from the command-line, Xcode.app takes the new command-line argument, <code>-installComponents</code>. When Xcode is run from a command-line script with this option, it installs the required device support packages and then quits. (15127411)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW518" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Emoji and other Unicode surrogate pairs are supported in scheme settings and in project files. (14837623, 13827044)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW519" title="Changes"></a><h4 class="jump">Changes</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW520" title="Building"></a><h5 class="jump">Building</h5><ul class="ul"><li class="li"><p>Arm64 is now included in  the “Standard architectures” setting.</p><p>Xcode 5.0 introduced support for building 64-bit iOS applications but it was not enabled by default. To enable the option of building 64-bit in Xcode 5.0, an architectures setting was provided: “Standard Architectures Including 64-Bit” (<code>ARCHS_STANDARD_INCLUDING_64_BIT</code>).</p><p>With the introduction of Xcode 5.1, arm64 is included in the default "Standard architecture” build setting. This results in projects using the default setting automatically building for arm64 along with the standard 32-bit architectures.</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW521" title="Note"></a><p><strong>Note:</strong>&nbsp;Be aware of the following architectures issues when opening your existing projects in Xcode 5.1:</p><p><ul class="ul"><li class="li"><p>When building for all architectures, remove any explicit architectures setting and use the default Standard Architectures setting. For projects that were previously opted-in using “Standard Architectures Including 64-Bit”, switch back to the “Standard architectures” setting.</p></li><li class="li"><p>When opening an existing project for the first time, Xcode 5.1 may display a warning about the use of the Xcode 5.0 architectures setting. Selecting the warning provides a workflow to revise the setting.</p></li><li class="li"><p>Projects not able to support 64-bit need to specifically set the architectures build setting to $(ARCHS_STANDARD_32_BIT). </p></li></ul></p></aside></div></li><li class="li"><p>Projects configured to use ”Standard Architectures Including 64-bit” will be converted to “Standard Architectures <code>$(ARCHS_STANDARD)</code>.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW522" title="Compiler"></a><h5 class="jump">Compiler</h5><ul class="ul"><li class="li"><p>As of Apple LLVM compiler version 5.1 (clang-502) and later, the optimization level <code>-O4</code> no longer implies link time optimization (LTO). In order to build with LTO explicitly use the <code>-flto</code> option in addition to the optimization level flag. (15633276)</p></li><li class="li"><p>The Apple LLVM compiler in Xcode 5.1 treats unrecognized command-line options as errors. This issue has been seen when building both Python native extensions and Ruby Gems, where some invalid compiler options are currently specified.</p><p>Projects using invalid compiler options will need to be changed to remove those options. To help ease that transition, the compiler will temporarily accept an option to downgrade the error to a warning: </p><p><code>-Wno-error=unused-command-line-argument-hard-error-in-future</code></p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW523" title="Note"></a><p><strong>Note:</strong>&nbsp;This option will not be supported in the future.</p><p></p></aside></div><p>To workaround this issue, set the <code>ARCHFLAGS</code> environment variable to downgrade the error to a warning. For example, you can install a Python native extension with:</p><p><code>$ ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future easy_install ExtensionName</code></p><p>Similarly, you can install a Ruby Gem with:</p><p><code>$ ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future gem install GemName</code> (16214764)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW524" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>The <code>gcov</code> tool for code coverage testing has been reimplemented. The new version uses the <code>llvm-cov</code> tool from the LLVM project. It is functionally equivalent to the old version for all significant features. The location of <code>gcov</code> within Xcode has also moved, use xcrun to invoke it. If you find problems, please file bug reports. For this release, you can still use the old version of <code>gcov</code> from GCC, which is available as <code>gcov-4.2</code>. (11919694)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW525" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW526" title="Editing User Interfaces"></a><h5 class="jump">Editing User Interfaces</h5><ul class="ul"><li class="li"><p>Custom views added to a stack view in Interface Builder can get stuck in a “misplaced views” (inconsistent) state.</p><p>As a workaround, set a placeholder intrinsic size for the custom view with appropriate content hugging and compression resistance priorities. (15778653)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW527" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>Automated tests run in iOS Simulator may fail with an error similar to this:</p><p><code>Test target [test name] encountered an error (Test process exited with code -1)</code></p><p>Attempt recovery by quitting and restarting the simulator. (15929053)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW528" title="Xcode Server"></a><h5 class="jump">Xcode Server</h5><ul class="ul"><li class="li"><p>Continuous integration features (bots) of Xcode 5.1 require OS X Server v3.1 (or a version of OS X Server 3.1 beta) or later. (16225068)</p></li><li class="li"><p>If there are old copies of Xcode on the server host, Xcode Server sometimes shows all the simulators. Only attempt to use simulators appropriate for use with Xcode 5.1. (15465692, 15153869) </p></li><li class="li"><p>Xcode Server will offer All Devices or All Simulators even if there are none that fit the criteria for the project. If you select an inappropriate device or simulator, you may get an error similar to:</p><p><code>xcodebuild: error: No destinations were specified with the -destination flag which were valid for the specified scheme &lt;scheme_name&gt;.</code></p><p>To prevent this from happening, specify only valid devices or simulators for your project. (15465222)</p></li><li class="li"><p>Sometimes when you’re attempting to create a new local repository on OS X Server through Xcode, Xcode may display an error message similar to: </p><p><code>xcode-select: note: no developer tools were found at '/Applications/Xcode.app', requesting install. Choose an option in the dialog to download the command line developer tools.</code></p><p>To resolve this problem, follow the prompts in the dialog displayed on the OS X Server host system. (15475078 &amp; 15486464)</p></li><li class="li"><p>Sometimes after upgrading to Xcode 5.1 and OS X Server 3.1, the first time you add a server you may see an error similar to: </p><p><code>“&lt;Server&gt; is running a version of OS X Server that cannot be used with this version of Xcode.”</code></p><p>Quit and restart Xcode one time to clear this message. (16217715)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW529" title="iOS Simulator"></a><h5 class="jump">iOS Simulator</h5><ul class="ul"><li class="li"><p>Performance issues can arise when running apps within the iOS Simulator on OS X Mavericks with a simulated OS version of iOS 6.1 or earlier.  </p><p>A workaround is to disable timer coalescing while using the iOS 6.1 or earlier simulator by executing the following command in a Terminal window:</p><p><code>sudo sysctl -w kern.timer.coalescing_enabled=0</code> (15501929)</p></li><li class="li"><p>iOS Simulator sometimes stops responding to hardware keyboard. </p><p>Quitting and relaunching the simulator usually corrects this. (14642684)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW530" title="Debugger"></a><h5 class="jump">Debugger</h5><ul class="ul"><li class="li"><p>Quick Look for <code>UIView</code> and <code>UIColor</code> variable types may not always work correctly. </p><p>You can capture variables of these types as <code>id</code> rather than <code>UIView</code> or <code>UIColor</code>. 16065049</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW531" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>When validating multiple applications in sequence using the Xcode Organizer, erroneous warnings about bundle IDs may be emitted.</p><p>If these warnings occur, quit &amp; relaunch Xcode in between validations. (15113664)</p></li><li class="li"><p>Executables created by Xcode 5.1 may crash on OS X v10.5. (15852259) </p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW532" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW533" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>The <code>XCTAssertEqual</code> macro (formerly <code>STAssertEquals</code> using OCUnit) correctly compares scalar values of different types without casting, for example, <code>int</code> and <code>NSInteger</code>. It can no longer accept nonscalar types, such as structs, for comparison. (14435933)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW534" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>OS X apps that require a provisioning profile, such as those using iCloud, now build, are code-signed correctly, and launch. (15841159)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW535" title="Deprecations"></a><h4 class="jump">Deprecations</h4><ul class="ul"><li class="li"><p>OCUnit and the SenTestingKit framework are deprecated and will be removed from a future release of Xcode. Source code using OCUnit generates warnings while being compiled in Xcode 5.1.</p><p>Migrate to XCTest by using the “Edit &gt; Refactor &gt; Convert to XCTest…” menu command. .</p></li><li class="li"><p>The ATS framework is deprecated. Source code using ATS APIs will generate warnings while being compiled. For version 10.8, there will be no loss of functionality but there could be areas where performance will suffer.</p><p>Replace all ATS code (including <code>ATSUI</code>) with <code>CoreText</code>. ATS functionality will be removed in future OS X releases.
More information about this change is available in <em><a href="../../../../documentation/StringsTextFonts/Conceptual/CoreText_Programming/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005533" data-renderer-version="1" target="_self">Core Text Programming Guide</a></em>.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW536" title="Xcode 5.0.2"></a><h3 class="jump">Xcode 5.0.2</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW537" title="Known Issues"></a><h4 class="jump">Known Issues</h4><p>The following known issues are noted for Xcode 5.0.2 in addition to what has been listed for Xcode 5.0.1.</p><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW538" title="Editing User Interfaces"></a><h5 class="jump">Editing User Interfaces</h5><ul class="ul"><li class="li"><p>In iOS 7 Interface Builder documents, when a vertical spacing constraint is created between a view that is flush with the top or bottom layout guide, a constraint between the guide’s top edge and the view’s bottom edge may be created instead of from the guide’s bottom edge to the view’s top edge.</p><p>Move the view 1pt down (if to the top layout guide) or up (if to the bottom layout guide), create the vertical spacing constraint, then change the constraint’s constant from 1 to 0. 14627548</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW539" title="Performance Measurement and Analysis"></a><h5 class="jump">Performance Measurement and Analysis</h5><ul class="ul"><li class="li"><p>The message “Could Not Start Script : Target app is not frontmost” may be displayed when attempting to capture a UI Automation script in Instruments against the iOS 7 Simulator.  </p><p>If this occurs, close the trace document and create a new one. 15387075</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW540" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><p></p><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW541" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>LLDB now correctly displays structs in simulator processes. 14496092</p></li><li class="li"><p>Debugging an application on a device running iOS 6.x caused the application to crash with EXC_BAD_ACCESS. 15310896</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW542" title="iOS Simulator"></a><h5 class="jump">iOS Simulator</h5><ul class="ul"><li class="li"><p>After installation of Xcode, the iOS 7.0.3 simulator would hang on first launch for a period of time (eventually launching). 15368009</p></li><li class="li"><p>Running UIAutomation from the Instruments GUI or from the <code>/usr/bin/instruments</code> command line would hang. 15367995</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW543" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Launching a 64-bit application on a device from Xcode multiple times caused the device to stop responding (and required a soft-reset). 15338361</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW544" title="Xcode 5.0.1"></a><h3 class="jump">Xcode 5.0.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW545" title="New Features"></a><h4 class="jump">New Features</h4><p></p><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW546" title="Accessing Help and Documentation"></a><h5 class="jump">Accessing Help and Documentation</h5><ul class="ul"><li class="li"><p>The documentation window now has a navigator area that contains a library browser and the bookmarks list. You can show the current document in the library browser using either the Editor &gt; “Reveal in Library” menu item or by selecting the contextual menu "Reveal in Library.” 12116524</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW547" title="Known Issues"></a><h4 class="jump">Known Issues</h4><p></p><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW548" title="Building"></a><h5 class="jump">Building</h5><ul class="ul"><li class="li"><p>New application targets created in Xcode 5 will crash on launch on iOS 5.</p><p>Turn off Base Localization if your app targets iOS 5. 13979280</p></li><li class="li"><p>Building a project from inside VMWare that is accessible via a VMWare shared folder can cause the compiler to crash.</p><p>Use AFP to share files instead. 14251948</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW549" title="Continuous Integration with OS X Server"></a><h5 class="jump">Continuous Integration with OS X Server</h5><ul class="ul"><li class="li"><p>Communicating with a remote SVN repository over HTTPS can fail with an error similar to “Error validating server certificate for <em>server name</em>.” </p><p>Edit the file <code>/Library/Server/Xcode/Config/xcsbuildd.plist</code> and change the <code>TrustSelfSignedSSLCertificates</code> key from <code>false</code> to <code>true</code>. </p><p>Then, from a Terminal window, run: <code>sudo killall xcsbuildd</code>. 14639890</p></li><li class="li"><p>SSH access permissions for remote repositories created from within Xcode are limited to only the user that created them, by default. The permissions for these hosted repositories cannot be changed from within Xcode.</p><p>The permissions can be changed for a hosted repository in Server.app by visiting the Xcode service—under the repositories tab, double click the repository and change the access settings. 15193716</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW550" title="Editing User Interfaces"></a><h5 class="jump">Editing User Interfaces</h5><ul class="ul"><li class="li"><p>If you open a read-only xib or storyboard file that was last saved with an older version of Xcode, you might not be able to quit Xcode.</p><p>You must first close the xib or storyboard file using control+command+W or by using the File &gt; Close <em>filename</em> menu command. 14715366</p></li><li class="li"><p>You cannot drag a placeholder object from the Interface Builder object library into the outline.</p><p>Drag the placeholder object into the canvas background. 13731313</p></li><li class="li"><p>Sometimes when editing UITableViews in Auto Layout documents set to open in Xcode 4.6, an error message is displayed which says “Failed to automatically update constraints.” </p><p>Upgrade your document to Xcode 5 format using the “Opens in” option in the file inspector. After performing the desired edits, you can downgrade back to the Xcode 4.6 format if necessary. 14680132</p></li><li class="li"><p>In some instances, number formatters created in Interface Builder with “Currency” style will not display the localized currency symbol at runtime.</p><p>In Interface Builder, switch the number formatter’s “Behavior” from <code>OS X 10.4+ Default</code> to <code>OS X 10.4+ Custom</code>, then back to <code>OS X 10.4+ Default</code>. 14378988</p></li><li class="li"><p>Xib files containing an instance of QCView from Quartz Composer fail to build, and cannot be processed by ibtool. </p><p>Replace the instance of QCView on the canvas with an instance of custom view from the library and set its custom class to “QCView” in the identity inspector. 14991302</p></li><li class="li"><p>The UIAAlert <code>defaultButton</code> and <code>cancelButton</code> functions will fail for some two-button alerts when targeting iOS 7. 14649998</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW551" title="Auto Layout: Runtime"></a><h5 class="jump">Auto Layout: Runtime</h5><ul class="ul"><li class="li"><p>In some cases the “Update Frames” command does not resize top-level views or windows.</p><p>Use the “Update All Frames” menu item. 13716892</p></li><li class="li"><p>Constraints owned by the clip view of a scroll view in Interface Builder, where the document view is a custom view, are removed at runtime. </p><p>Create outlets to each of the constraints you want to keep and re-add them to the clip view at runtime. 15115315</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW552" title="Asset Catalog"></a><h5 class="jump">Asset Catalog</h5><ul class="ul"><li class="li"><p>After importing images from a project into an image catalog, storyboards and xib files have broken image file references.</p><p>The image names in Interface Builder are listed as <code>image-name.png</code> and should be shortened to <code>image-name</code> to repair the broken reference. 14042186</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW553" title="Localization"></a><h5 class="jump">Localization</h5><ul class="ul"><li class="li"><p>Projects and targets which have only <code>strings</code> files as localized resources cannot be converted to use Base Localization. (The behavior you observe is that after checking the “Use Base Localization” checkbox in the project editor, the conversion sheet does not present any files to be converted and clicking the Finish button results in the checkbox becoming unchecked.)</p><p>To convert to using Base Localization, a project or target must contain one non-<code>strings</code> resource enabled for localization. In the project navigator, select a resource you intend to localize (for example, an Interface Builder document or an image), then open the file inspector.  In the Localization slice, click the Localize button and select the localization to add. Once complete, the conversion workflow displays the file and enables the checkbox. 15160454</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW554" title="Objective-C Runtime"></a><h5 class="jump">Objective-C Runtime</h5><ul class="ul"><li class="li"><p>In the 32-bit iOS 7.0 simulator, manually calling <code>objc_msgSend_stret()</code> with a <code>nil</code> receiver can corrupt the stack pointer. </p><p>Ensure that the receiver is non-<code>nil</code> before calling <code>objc_msgSend_stret()</code>. 14753273</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW555" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>Watchpoints set on a variable from Xcode’s UI using the contextual menu in the variables view don’t work for some variables—for example, <code>self</code>. When this is the case you’ll notice that the watchpoint is not being hit when you would expect.</p><p>To work around this issue, use the console in Xcode to create a watchpoint at the <code>lldb&gt;</code> prompt with the command <code>watchpoint set variable &lt;variable-name&gt;</code>. 12658775</p></li><li class="li"><p>When ending the debug session of an app on an iOS 5 device, the error message “Lost Connection” may be displayed.</p><p>Dismiss the error pop-up. It is spurious and does not indicate any problem debugging your app or connecting to the device. 14871460</p></li><li class="li"><p>If an application on an iOS device is paused in the debugger within the method <code>-application:didFinishLaunchingWithOptions:</code>, the debugging session must be stopped before building and relaunching the same application with a different build configuration.</p><p>If the application is not stopped first, the device can enter a state where it will no longer launch applications. If the device enters this state, it must be rebooted in order to be used for development again. 14851115</p></li><li class="li"><p>If an iOS app running in the simulator is detached, a relaunch of the same app from Xcode will result in a black screen in iOS Simulator even though the new instance of the app is launched.</p><p>Terminate the app in the simulator, or relaunch it a second time. 14648784</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW556" title="Debugging: Open GL"></a><h5 class="jump">Debugging: Open GL</h5><ul class="ul"><li class="li"><p>The OpenGL ES frame debugger fails to display texture mip-levels for textures that are not texture-complete. 14852587</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW557" title="Performance Measurement and Analysis"></a><h5 class="jump">Performance Measurement and Analysis</h5><ul class="ul"><li class="li"><p>The Allocations instrument can only attach to processes on devices running iOS 7. </p><p>Processes must be started by Instruments for earlier versions of iOS. 14065257</p></li><li class="li"><p>When attaching with the Allocations instrument to a process running on an iOS 7 device, the target process may crash and the recording in the Allocations instrument then stops immediately. When attaching with Allocations to a process on an iOS 6 or earlier device, the target process should continue to run but no data will be collected in Allocations.</p><p>Launch with Xcode and then attach with Instruments or transfer to Instruments by clicking “Profile in Instruments,” using the memory gauge in the debug navigator. 14828459</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW558" title="Testing"></a><h5 class="jump">Testing</h5><ul class="ul"><li class="li"><p>XCTest does not support iOS 6 destinations. </p><p>Xcode does not prevent you from using XCTest with iOS 6 destinations, resulting in undefined behavior. 14075515</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW559" title="Account Management"></a><h5 class="jump">Account Management</h5><ul class="ul"><li class="li"><p>Sometimes after requesting a signing identity from the Member Center, Xcode does not install the corresponding certificate in the keychain. </p><p>To work around this issue, perform the following steps:</p><ol class="ol"><li class="li"><p>View the Accounts section of Xcode’s preferences</p></li><li class="li"><p>Select the account or team that corresponds to the signing identity</p></li><li class="li"><p>Click “View Details”</p></li><li class="li"><p>Click the Refresh button at the lower-left of the details sheet 14197131</p></li></ol></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW560" title="Source Control"></a><h5 class="jump">Source Control</h5><ul class="ul"><li class="li"><p>Xcode may have trouble connecting to repositories if credential information has changed after the repository was added in the Accounts preferences. In certain cases, Xcode displays a failure when connecting to a repository while it is actually attempting to connect in the background.</p><p>If you encounter a repository connection problem, remove and re-add the repository with the updated credential information. This will restore access to the repository. 13955597</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW561" title="iOS Simulator"></a><h5 class="jump">iOS Simulator</h5><ul class="ul"><li class="li"><p>After switching the minimum deployment target of an application from iOS 7.0 to a release prior to iOS 7.0, building and running the application may fail with the message “iOS Simulator failed to install the application.”</p><p>To resolve this issue go to the iOS Simulator home screen. Remove the application by clicking and holding the application icon, and then choosing to delete the application by tapping the hovering “X” button. 13917023</p></li><li class="li"><p>The Mac hardware keyboard may not function for iOS Simulator when first launched. </p><p>Relaunch the simulator. 13315258</p></li><li class="li"><p>StoreKit (In-App purchases) will not work in the Simulator. 13962338</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW562" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>When playing video via the Quicklook framework on an iPhone simulator, the video view appears black, but audio continues to play fine. 13871109</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW563" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><p></p><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW564" title="Editing User Interfaces"></a><h5 class="jump">Editing User Interfaces</h5><ul class="ul"><li class="li"><p>Views without an autoresizing mask in Interface Builder documents did not open correctly. 14969450</p></li><li class="li"><p>When loading nibs at runtime with scroll views built with Xcode 5, constraints between the clip view and its document view were not handled properly. 14097019</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW565" title="Accounts"></a><h5 class="jump">Accounts</h5><ul class="ul"><li class="li"><p>Creating distribution signing assets caused Xcode to crash. 13956010</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW566" title="OpenGL"></a><h5 class="jump">OpenGL</h5><ul class="ul"><li class="li"><p>Launching an app using OpenGL on more than a single device failed. 14836639</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW567" title="Source Control"></a><h5 class="jump">Source Control</h5><ul class="ul"><li class="li"><p>Subversion URLs caused errors with variable username usage. 14825641</p></li><li class="li"><p>Using HTTPS and a git repository with a self-signed certificate failed. 14060992</p><p>If you are interacting with a hosted git repository on OS X Server using HTTPS and are presented with a certificate dialog, to use the git repository:</p><ol class="ol"><li class="li"><p>Click “Show Certificate” on the bottom-left of the dialog</p></li><li class="li"><p>Check the “Always Trust” checkbox</p></li><li class="li"><p>Click “Continue”</p></li></ol><p>You are now able to use the git repository in Xcode.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW568" title="Notes"></a><h4 class="jump">Notes</h4><p></p><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW569" title="Accessing Help and Documentation"></a><h5 class="jump">Accessing Help and Documentation</h5><ul class="ul"><li class="li"><p>Xcode 5 does not support downloading additional doc sets. Additional doc sets can be added manually by installing them at <code>~/Library/Developer/Shared/Documentation/DocSets/</code>.</p><p>Once installed, doc sets are found and loaded by Xcode 5. If Xcode is running while the doc set is installed, quit and relaunch Xcode. 14930443</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW570" title="Building: Deployment Compatibility"></a><h5 class="jump">Building: Deployment Compatibility</h5><ul class="ul"><li class="li"><p>iOS 64-bit compatible applications are only supported with a minimum deployment target of iOS 5.1.1 or above. 15190445</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW571" title="Account Management"></a><h5 class="jump">Account Management</h5><ul class="ul"><li class="li"><p>The provisioning profiles list in the Organizer is now located in the Accounts tab of Xcode's preferences. To view them, select the relevant Apple ID account and tap View Details. 13950944</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW572" title="Deprecations"></a><h5 class="jump">Deprecations</h5><ul class="ul"><li class="li"><p>Xcode 5 does not support use of the LLVM-GCC compiler and the GDB debugger. 14857582</p></li><li class="li"><p>Garbage collection is a deprecated technology in OS X Mountain Lion and later. Xcode 5 is scheduled to be the last release of the Xcode developer tools to support building, debugging, or profiling Mac apps that use garbage collection.</p><p>It is recommended that any projects using GC employ Xcode’s migration tool to convert to ARC (Automatic Reference Counting). For more information about transitioning to ARC, see <em><a href="../../../ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226" data-renderer-version="1" target="_self">Transitioning to ARC Release Notes</a></em>. 14406894</p></li><li class="li"><p>The CVS and RCS source control tools have been removed from Xcode 5. 11968433</p></li><li class="li"><p>The CPlusTest unit testing framework has been removed from Xcode 5. To write unit tests for C++ code, use the new XCTest framework and create Objective-C++ (.mm) test case subclasses. 8273037</p></li><li class="li"><p><code>SenTestingKit</code> and <code>OCUnit</code> are deprecated. Use the migrator to move to XCTest. 14857574</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW573" title="Continuous Integration with OS X Server"></a><h5 class="jump">Continuous Integration with OS X Server</h5><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW574" title="Installing Xcode on OS X Server"></a><h5 class="jump">Installing Xcode on OS X Server</h5><ul class="ul"><li class="li"><p> To ensure that OS X Server is configured to use Xcode 5.0.1, follow these steps to install Xcode:</p><ol class="ol"><li class="li"><p>Open the App Store and update OS X Mavericks</p></li><li class="li"><p>Download Xcode 5.0.1 and OS X Server</p></li><li class="li"><p>Quit Xcode and Server</p></li><li class="li"><p>Install Xcode 5.0.1</p></li><li class="li"><p>Install OS X Server</p></li><li class="li"><p>Open Server</p></li><li class="li"><p>Select the Xcode service, then click Choose and select Xcode 5.0.1</p></li></ol></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW575" title="Reporting Bugs"></a><h5 class="jump">Reporting Bugs</h5><ul class="ul"><li class="li"><p>When reporting a Continuous Integration bug, enter the following command in Terminal, then attach the output to the bug report.</p><p><code>sudo /Applications/Server.app/Contents/ServerRoot/usr/sbin/serverloggather</code></p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW576" title="Communication between Xcode and Server"></a><h5 class="jump">Communication between Xcode and Server</h5><p>Communication between Xcode and the Xcode service is currently over HTTP port 80.</p><ul class="ul"><li class="li"><p>For accessing local Git repositories hosted by the Xcode service:</p><ul class="simple-spaceabove"><li><p>Git+SSH: 22</p></li><li><p>HTTP: 80</p></li><li><p>HTTPS: 443</p></li></ul></li><li class="li"><p>For accessing remote SVN or Git repositories not hosted by the Xcode service:</p><ul class="simple-spaceabove"><li><p>Git: 9418</p></li><li><p>Git+SSH: 22</p></li><li><p>SVN: 3690 (anonymous access only)</p></li><li><p>SVN+SSH: 22</p></li><li><p>HTTP (Git + SVN): 80</p></li><li><p>HTTPS (Git + SVN): 443</p></li></ul></li><li class="li"><p>For joining a server to an Apple Developer Team:</p><ul class="simple-spaceabove"><li><p>HTTPS (SSL): 443</p></li></ul></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW577" title="Command Line Tools"></a><h5 class="jump">Command Line Tools</h5><ul class="ul"><li class="li"><p>Command line shims are included with OS X Mavericks. If Xcode is installed, the shims use the tools within Xcode. Otherwise, the tools delivered in the Command Line Developer Tools package are used. The Command Line Developer Tools package can be installed on demand using <code>xcode-select --install</code> or by trying to use any command line developer tool in Terminal.</p><p>On OS X Mavericks, Command Line Developer Tools are updated using Software Update. On OS X Mountain Lion, continue to use the Downloads preferences in Xcode to update the Command Line Developer Tools.</p><p>On OS X Mavericks, <code>xcode-select</code> provides the <code>--reset</code> flag to revert to using the default search paths.</p><p>The Command Line Developer tools package has been updated to include <code>xcrun</code>. <code>xcrun</code> adds support for the following:</p><ol class="ol"><li class="li"><p>The <code>--show-sdk-path</code> option queries SDK paths</p></li><li class="li"><p>Improved <code>xcrun</code> performance</p></li><li class="li"><p>More robust support for the <code>DEVELOPER_DIR</code> environment variable</p><p>Set <code>DEVELOPER_DIR</code> to either a copy of Xcode or <code>/Library/Developer CommandLineTools</code> when Command Line Tools for OS X Mavericks is installed</p></li><li class="li"><p><code>xcrun</code> passes the SDK provided to subcommands in the <code>SDKROOT</code> environment variable when used with --sdk. 15190491</p></li></ol><p></p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW578" title="Xcode 5.0"></a><h3 class="jump">Xcode 5.0</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW579" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW580" title="Compiling: LLVM"></a><h5 class="jump">Compiling: LLVM</h5><ul class="ul"><li class="li"><p>Building a project from inside VMWare that is accessible via a VMWare shared folder can cause the compiler to crash.</p><ul class="nested"><li class="nested li"><p>Use AFP to share files instead. 14251948</p></li></ul></li><li class="li"><p>In the 32-bit iOS 7.0 simulator, manually calling <code>objc_msgSend_stret()</code> with a <code>nil</code> receiver can corrupt the stack pointer.</p><ul class="nested"><li class="nested li"><p>Ensure that the receiver is non-<code>nil</code> before calling <code>objc_msgSend_stret()</code>. 14753273</p></li></ul></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW581" title="Building"></a><h5 class="jump">Building</h5><ul class="ul"><li class="li"><p>New application targets created in Xcode 5 will crash on launch on iOS 5.</p><ul class="nested"><li class="nested li"><p>Turn off base localization if your app targets iOS 5. 13979280</p></li></ul></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW582" title="Editing User Interfaces"></a><h5 class="jump">Editing User Interfaces</h5><ul class="ul"><li class="li"><p>If you open a read-only xib or storyboard that was last saved with an older version of Xcode, you might not be able to quit Xcode.</p><ul class="nested"><li class="nested li"><p>You must first close the file using ctrl+cmd+w or by going to File &gt; Close <code>&lt;filename&gt;</code>. 14715366</p></li></ul></li><li class="li"><p>In some instances, number formatters created in Interface Builder with “Currency” style will not display the localized currency symbol at runtime.</p><ul class="nested"><li class="nested li"><p>In IB, switch the number formatter's “Behavior” from “OS X 10.4+ Default” to “OS X 10.4+ Custom,” then back to “OS X 10.4+ Default.” 14378988</p></li></ul></li><li class="li"><p>When loading nibs at runtime using scroll views built with Xcode 5, constraints between the clip view and its document view will be removed. This only affects constraints between the clip view and the document view, which are usually constraints such as <code>H:|-[documentView]-|</code> and <code>V:|-[documentView]-|</code>.</p><ul class="nested"><li class="nested li"><p>Add the constraints at runtime. 14097019</p></li></ul></li><li class="li"><p>UIAAlert’s <code>defaultButton</code> and <code>cancelButton</code> functions will fail for some two button alerts when targeting iOS 7. 14649998</p></li><li class="li"><p>After importing images from a project into a image catalog, storyboards and xib files have broken image references.</p><ul class="nested"><li class="nested li"><p>The image names in Interface Builder are listed as <code>image-name.png</code> and should be shortened to <code>image-name</code> to repair the broken reference. 14042186</p></li></ul></li><li class="li"><p>You cannot drag a Placeholder object from the library into the outline.</p><ul class="nested"><li class="nested li"><p>Drag the Placeholder object into the canvas background. 13731313</p></li></ul></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW583" title="Autolayout: Runtime"></a><h5 class="jump">Autolayout: Runtime</h5><ul class="ul"><li class="li"><p>In some cases “Update Frames” will not resize top level views or windows.</p><ul class="nested"><li class="nested li"><p>Use the “Update All Frames” menu item. 13716892</p></li></ul></li><li class="li"><p>Sometimes when editing UITableViews in Auto Layout documents set to open in Xcode 4.6, you get an error message saying “Failed to automatically update constraints.”</p><ul class="nested"><li class="nested li"><p>Upgrade your document to the Xcode 5 format using the “Opens in” option in the File inspector. After performing the desired edits, you can downgrade back to the Xcode 4.6 format if necessary. 14680132</p></li></ul></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW584" title="Performance Measurement and Analysis"></a><h5 class="jump">Performance Measurement and Analysis</h5><ul class="ul"><li class="li"><p>Scripts running under the Automation instrument sometime fail to detect applications running inside the iOS 6 simulator environment.</p><ul class="nested"><li class="nested li"><p>Relaunch the simulator application and run the script again. 14447965</p></li></ul></li><li class="li"><p>The Allocations instrument can only attach to processes on devices running iOS 7. Processes must be started by Instruments on iOS versions prior to iOS 7. 14065257</p></li><li class="li"><p>When attaching to a process running on an iOS 7 device with the Allocations instrument, the process may crash and the recording in the Allocations instrument then stops immediately. When attaching to a process on an iOS 6 or earlier device with the Allocations instrument, the process continues to run but no data will be collected in Allocations.</p><ul class="nested"><li class="nested li"><p>Launch with Xcode and then attach with Instruments. Alternatively, transfer to Instruments by clicking “Profile in Instruments” in the debug memory gauge. 14828459</p></li></ul></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW585" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>When ending the debug session of an app on an iOS 5 device, the error message, "lost connection" may be displayed. </p><ul class="nested"><li class="nested li"><p>Dismiss the error pop-up: It does not indicate any problem debugging your app or connecting to the device. 14871460</p></li></ul></li><li class="li"><p>Watchpoints set from the Xcode UI using the contextual menu on a variable in the variables view don’t work for some variables , for instance <code>'self'</code>. When this is the case, the watchpoint won’t be hit when you expect.</p><ul class="nested"><li class="nested li"><p>To work around this issue, use the console in Xcode to create a watchpoint at the lldb prompt with the command <code>'watchpoint set variable &lt;variable-name&gt;'</code>. 12658775</p></li></ul></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW586" title="Debugging: OpenGL"></a><h5 class="jump">Debugging: OpenGL</h5><ul class="ul"><li class="li"><p>The OpenGL ES frame debugger does not display texture mip-levels for textures that are not texture-complete. 14852587</p></li><li class="li"><p>Simultaneously launching an iOS app which uses OpenGL from Xcode on more than a single device may not work.</p><ul class="nested"><li class="nested li"><p>Launch on one device at a time. 14836639</p></li></ul></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW587" title="Unit Testing"></a><h5 class="jump">Unit Testing</h5><ul class="ul"><li class="li"><p>XCTest does not support iOS 6 destinations. Xcode does not prevent you from using XCTest with iOS 6 destinations, resulting in undefined behavior. 14075515</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW588" title="Source Control"></a><h5 class="jump">Source Control</h5><ul class="ul"><li class="li"><p>Xcode may have trouble connecting to repositories if credential information has changed after the repository was added in Accounts preferences. In certain cases, Xcode displays a failure when connecting to a repository while it is  attempting to connect in the background.</p><ul class="nested"><li class="nested li"><p>If you encounter a repository connection problem, remove and re-add the repository with the updated credential information. This will restore access to the repository. 13955597</p></li></ul></li><li class="li"><p>Xcode 5 requires consistent usage of Subversion URLs: Either always include the (same) username or do not include one for a given repository. 14825641</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW589" title="iOS Simulator"></a><h5 class="jump">iOS Simulator</h5><ul class="ul"><li class="li"><p>If an iOS app is detached, relaunching the same app from Xcode will result in a black screen in the Simulator even though the new app is launched.</p><ul class="nested"><li class="nested li"><p>Terminate the app in the Simulator or relaunch it for the second time. 14648784</p></li></ul></li><li class="li"><p>After switching the minimum deployment target of an application from iOS 7.0 to a release prior to iOS 7.0, building and running the application may fail with the message “iOS Simulator failed to install the application.”</p><ul class="nested"><li class="nested li"><p>Go to the iOS home screen, click and hold the application icon, then tap the hovering “X” button to delete the application. 13917023</p></li></ul></li><li class="li"><p>StoreKit (In-App purchases) will not work in the Simulator. 13962338</p></li><li class="li"><p>When playing video via the Quicklook framework on an iPhone simulator, the video view appears black, but audio continues to play fine. 13871109</p></li><li class="li"><p>The Mac hardware keyboard may not work for iOS Simulator on first launch. </p><ul class="nested"><li class="nested li"><p>Relaunch the simulator. 13315258</p></li></ul></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW590" title="Account Management"></a><h5 class="jump">Account Management</h5><ul class="ul"><li class="li"><p>Xcode sometimes crashes if you request to create distribution signing assets during distribution of a Mac app.</p><ul class="nested"><li class="nested li"><p>Create the distribution signing assets using the Member Center. 13956010</p></li></ul></li><li class="li"><p>Xcode sometimes does not install the corresponding certificate in the Keychain after requesting a signing identity from the Member Center.</p><p>Workaround:</p><ol class="ol"><li class="li"><p>View the Accounts section of Xcode’s preferences.</p></li><li class="li"><p>Select the account/team that corresponds to the signing identity.</p></li><li class="li"><p>Click “View Details.”</p></li><li class="li"><p>Click the Refresh button at the lower-left of the details sheet. 14197131</p></li></ol></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW591" title="Changes"></a><h4 class="jump">Changes</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW592" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>The provisioning profiles list in the Organizer is now located in the Accounts tab of Xcode's preferences. To view them, select the relevant Apple ID account and click View Details. 13950944</p></li><li class="li"><p>64-bit compatible applications are only supported with a minimum deployment target of iOS 6 or later. 14730546</p></li><li class="li"><p>Xcode 5 does not support using the LLVM-GCC compiler or the GDB debugger. 14857582</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW593" title="Unit Testing"></a><h5 class="jump">Unit Testing</h5><ul class="ul"><li class="li"><p>The CPlusTest unit testing framework has been removed from Xcode 5. To write unit tests for C++ code, use the new XCTest framework and create Objective-C++ (.mm) test case subclasses. 8273037</p></li><li class="li"><p>SenTestingKit and OCUnit are deprecated. Use the migrator to move to XCTest. 14857574</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW594" title="Source Control"></a><h5 class="jump">Source Control</h5><ul class="ul"><li class="li"><p>The CVS and RCS source control tools have been removed from Xcode 5. 11968433</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW595" title="Notes"></a><h4 class="jump">Notes</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW596" title="Doc Sets"></a><h5 class="jump">Doc Sets</h5><ul class="ul"><li class="li"><p>Xcode 5 does not support downloading additional doc sets.</p><p>Additional doc sets can be added manually by installing them at <code>~/Library/Developer/Shared/ Documentation/DocSets/</code></p><p>Once installed, doc sets are found and loaded by Xcode 5. If Xcode is running while the doc set is installed, quit and relaunch Xcode. 14930443</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW597" title="Garbage Collection Support"></a><h5 class="jump">Garbage Collection Support</h5><ul class="ul"><li class="li"><p>Xcode 5 ending support for OS X garbage collection.</p><p>Garbage collection is a deprecated technology in OS X Mountain Lion and later. Xcode 5 is scheduled to be the last release of the Xcode developer tools to support building, debugging, or profiling Mac apps that use garbage collection. It is recommended that any projects using GC employ the Xcode migration tool to convert to ARC (Automatic Reference Counting.) More information about transitioning to ARC is available at: <em><a href="../../../ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011226" data-renderer-version="1" target="_self">Transitioning to ARC Release Notes</a></em>. 14406894</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW598" title="Continuous Integration Support"></a><h5 class="jump">Continuous Integration Support</h5><ul class="ul"><li class="li"><p>Continuous integration features (bots) require OS X Server for OS X Mavericks. Mac Developer Program members can download the latest developer preview of OS X Mavericks from the Mac Dev Center. 14949282</p></li></ul></section></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW599" title="Xcode 4"></a><h2 class="jump">Xcode 4</h2><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW600" title="Xcode 4.6.3"></a><h3 class="jump">Xcode 4.6.3</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW601" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW602" title="Debugging: LLDB"></a><h5 class="jump">Debugging: LLDB</h5><ul class="ul"><li class="li"><p>Hang when debugging in iOS Simulator on OS X 10.8.4. 13722320</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW603" title="Xcode 4.6.2"></a><h3 class="jump">Xcode 4.6.2</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW604" title="Changes"></a><h4 class="jump">Changes</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW605" title="Building: Kernel Extensions"></a><h5 class="jump">Building: Kernel Extensions</h5><ul class="ul"><li class="li"><p>Kernel extensions (kexts) built with Xcode 4.6.1 and 4.6.2 fail to load on OS X 10.6 and 10.7, and this error message appears in the console:</p><div class="codesample clear"><table><tr><td scope="row"><pre>kernel: kxld: The Mach-O file is malformed: Invalid segment type in MH_KEXT_BUNDLE kext: 42<span></span></pre></td></tr></table></div></li></ul><p>To build kexts that load on OS X 10.6 and 10.7, on the targets that build the kexts, set the OS X Deployment Target build setting to OS X 10.6. 13645170</p></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW606" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW607" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Implemented stability fixes. 13518419, 13518436, 13518436, 13518526, 13611415</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW608" title="New Issues"></a><h4 class="jump">New Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW609" title="Code Signing: Kernel Extensions"></a><h5 class="jump">Code Signing: Kernel Extensions</h5><ul class="ul"><li class="li"><p>If you build code signed kexts on OS X 10.8.3 (you turn on code signing in the target that builds the kext), that kext fails to load on OS X 10.7.x and earlier, and this error message appears in the console:</p><div class="codesample clear"><table><tr><td scope="row"><pre>kernel: kxld: The Mach-O file is malformed: Invalid segment type in MH_KEXT_BUNDLE kext: 29<span></span></pre></td></tr></table></div><p>Workarounds:</p><ul class="nested"><li class="nested li"><p>To build an unsigned kext that loads in OS X 10.7.x and earlier, in the target that builds the kext, set the Code Signing Identity build setting to Don’t Code Sign.</p><p>If you need to build signed and unsigned versions of the kext, you can have in your project separate targets that build the same kext, one configured to code sign the kext and the other configured not to sign it.</p></li><li class="nested li"><p>To build a signed kext that loads in OS X 10.7.x and earlier, code sign the kext on a Mac running OS X 10.8.2 or earlier. 13428950</p></li></ul></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW610" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW611" title="Building"></a><h5 class="jump">Building</h5><ul class="ul"><li class="li"><p>When building a product previously built with Xcode 4.6.1 or earlier, the build fails with an error similar to this one:</p><div class="codesample clear"><table><tr><td scope="row"><pre>PCH file built from a different branch ((clang-425.0.27)) than the compiler ((clang-425.0.28))<span></span></pre></td></tr></table></div><p>To address this issue, choose Product &gt; Clean before building your product. 13663167</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW612" title="Xcode 4.6.1"></a><h3 class="jump">Xcode 4.6.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW613" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW614" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>SDKs:</p><p>OS X SDK 10.8.3 (13130441)</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW615" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW616" title="Compiling"></a><h5 class="jump">Compiling</h5><ul class="ul"><li class="li"><p>Crash on launch on OS X v10.6 with apps using ARC built with Xcode 4.6. (13129783)</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW617" title="Accessing Help and Documentation"></a><h5 class="jump">Accessing Help and Documentation</h5><ul class="ul"><li class="li"><p>Documentation doc set update fails with the message:</p><div class="codesample clear"><table><tr><td scope="row"><pre>Install path &lt;path_1&gt; points to a different documentation package &lt;path_2&gt; than expected &lt;path_3&gt;<span></span></pre></td></tr></table></div><p>13292012.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW618" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW619" title="Accessing Help and Documentation"></a><h5 class="jump">Accessing Help and Documentation</h5><ul class="ul"><li class="li"><p>More than one Xcode doc set listed in the Documentation organizer. 13207501</p></li></ul><p>To address this issue delete any Xcode doc set whose version number is earlier than 509.12 from Documentation preferences:</p><ol class="ol"><li class="li"><p>Open the Xcode preferences window, and click the Downloads button to display Downloads preferences.</p></li><li class="li"><p>Click the Documentation button.</p></li><li class="li"><p>Select an Xcode doc set (titled “Xcode ...”).</p></li><li class="li"><p>Reveal the doc set info by clicking the Show Doc Set Info button (to the left of the + button).</p></li><li class="li"><p>If the version of the doc set is earlier than 509.12, delete the doc set by clicking the Remove (–) button.</p></li></ol></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW620" title="Xcode 4.6"></a><h3 class="jump">Xcode 4.6</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW621" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW622" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>SDKs:</p><ul class="nested"><li class="nested li"><p>OS X SDK 10.8</p></li><li class="nested li"><p>iOS SDK 6.1</p></li></ul></li><li class="li"><p>Device support (added):</p><ul class="nested"><li class="nested li"><p>iPad mini</p></li><li class="nested li"><p>iPad with Retina display (4th generation)</p></li></ul></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW623" title="Enhancements"></a><h4 class="jump">Enhancements</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW624" title="Compiling:"></a><h5 class="jump">Compiling:</h5><ul class="ul"><li class="li"><p>LLVM: New compiler warnings to help find subtle behavioral bugs when using automatic release counting (ARC) and weak references.</p></li><li class="li"><p>LLVM: Support for the C++11 user defined literals and unrestricted unions.</p></li><li class="li"><p>LLVM: Advanced optimization to merge disjoint stack objects and to reduce the size of allocated stack memory.</p></li><li class="li"><p>LLVM: The Type-Based Alias Analysis (TBAA) code optimization is enabled by default.</p><p>You can disable this optimization with the <code>llvm -fno-strict-aliasing</code> option.</p><p>In Xcode projects, the Enforce Strict Aliasing build setting controls this capability.</p></li><li class="li"><p>LLVM: Support for Microsoft-style inline assembly for i386 and x86_64.</p></li><li class="li"><p>LLVM: Static analyzer supports deeper cross-function analysis of C++ and Objective-C code.</p></li><li class="li"><p><code>otool</code>: Support for disassembly of Intel AVX instructions.</p></li><li class="li"><p><code>otool</code>: Precisely decodes all instructions and skips over data entries in text segments.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW625" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>Xcode UI: Inspects elements of <code><a href="../../../../documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/Foundation/Classes/NSArrayClassCluster/Description.html#//apple_ref/occ/cl/NSArray" data-renderer-version="1" target="_self">NSArray</a></code> and <code><a href="../../../../documentation/LegacyTechnologies/WebObjects/WebObjects_3.5/Reference/Frameworks/ObjC/Foundation/Classes/NSDictionaryClassClstr/Description.html#//apple_ref/occ/cl/NSDictionary" data-renderer-version="1" target="_self">NSDictionary</a></code> objects.</p></li><li class="li"><p>LLDB: Reads metadata from the Objective-C runtime.</p></li><li class="li"><p>LLDB: Improves support for stepping over inlined functions.</p></li><li class="li"><p>LLDB: Prints function argument information in backtraces by default.</p></li><li class="li"><p>LLDB: Supports “thread return,” the <code>temporary breakpoint</code> command, and a variety of aliases to add common GDB shortcuts.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW626" title="Changes"></a><h4 class="jump">Changes</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW627" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>DEPRECATED: LLVM-GCC compiler and GDB debugger.</p><p>Xcode 4.6 is the last release to include the LLVM-GCC compiler and the GDB debugger.</p><p>Use the LLVM compiler and the LLDB debugger, and file reports at <span class="content_text"><a href="https://bugreport.apple.com" class="urlLink" rel="external">https://bugreport.apple.com</a></span> for issues that require the use of LLVM-GCC or GDB.</p></li><li class="li"><p>DEPRECATED: Package Maker app.</p><p>Use the <code><!--a target="_self" -->productbuild<!--/a--></code> command to create installer packages</p></li><li class="li"><p>DEPRECATED: ATS.framework (OS X SDK 10.8).</p><p>The use of the ATS API produces compilation warnings.</p><p>In OS X v10.8 there is no loss of functionality, but there could be areas where performance degrades.</p><p>Replace ATS code (including ATSUI) with Core Text calls (see <em><a href="../../../../documentation/StringsTextFonts/Conceptual/CoreText_Programming/Introduction/Introduction.html#//apple_ref/doc/uid/TP40005533" data-renderer-version="1" target="_self">Core Text Programming Guide</a></em> for details).</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW628" title="Xcode 4.5.2"></a><h3 class="jump">Xcode 4.5.2</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW629" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW630" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Fixed Xcode app and LLDB debugger crashes reported on Xcode 4.5. 12482521, 12482518, 12481393, 12481829, 12481363, 12481302, 12481396, 12482364, 12514294, 12364375, 12481322, 12481370, 12481398, 12481373, 12489094, 12483605, 12481863, 12482083, 12482540, 12481426, 12482542, 12481390, 12482362, 12481885</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW631" title="Editing User Interfaces"></a><h5 class="jump">Editing User Interfaces</h5><ul class="ul"><li class="li"><p>Improved stability when editing storyboards and using Auto Layout. 12482514, 12482536, 12482526, 12482548</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW632" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>Fixed an LLDB memory leak. 12483722</p></li><li class="li"><p>Improved behavior when quitting iOS Simulator directly. 12481405</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW633" title="Distributing Apps"></a><h5 class="jump">Distributing Apps</h5><ul class="ul"><li class="li"><p>Fixed occasional Xcode hang when submitting an app to the iOS App Store. 12482847</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW634" title="Xcode 4.5.1"></a><h3 class="jump">Xcode 4.5.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW635" title="Enhancements"></a><h4 class="jump">Enhancements</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW636" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Improved the responsiveness of the Open Quickly dialog. 12251666</p></li><li class="li"><p>Improved performance switching between tabs in the Xcode app. 12364395</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW637" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>Improved stability and responsiveness running apps on a simulator. 12388056, 12364385, 12364295</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW638" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW639" title="Editing User Interfaces"></a><h5 class="jump">Editing User Interfaces</h5><ul class="ul"><li class="li"><p>Crashes while editing user interface documents. 12364019, 12389062, 12388854, 12389040, 10261299</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW640" title="Editing Property Lists"></a><h5 class="jump">Editing Property Lists</h5><ul class="ul"><li class="li"><p>Issues adding keys to property list files. 12377407</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW641" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>Debug console doesn’t display all input characters. 12364400</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW642" title="Source Control"></a><h5 class="jump">Source Control</h5><ul class="ul"><li class="li"><p>Issues interacting with working copies known by the Xcode app. 12364258, 12389205, 12389198</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW643" title="Xcode 4.5"></a><h3 class="jump">Xcode 4.5</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW644" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW645" title="Editing User Interfaces"></a><h5 class="jump">Editing User Interfaces</h5><ul class="ul"><li class="li"><p>The Interface Builder canvas includes a new button to toggle between iPhone screen layouts. When you click the button, Xcode resizes full-screen views to match the selected iPhone screen size. When the top level views are resized, Xcode uses the resizing rules specified by layout constraints or springs and struts in the size inspector to reflow the contained views. 12290237</p><p>Use this button to toggle between layouts and ensure that the resizing rules you define work as expected on both the new Retina 4 screen and previous screen sizes.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW646" title="Editing User Interfaces: Storyboards"></a><h5 class="jump">Editing User Interfaces: Storyboards</h5><ul class="ul"><li class="li"><p>Storyboards now support view controller containment. You can add child view controllers to a parent view controller in a storyboard. At runtime, when the <code><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621495-viewdidload" class="urlLink" target="_self">viewDidLoad</a></code> method is called on the parent controller, its view hierarchy (composed of the view hierarchies of its child controllers) is already loaded. 9630246</p><p>To add a view controller as the child of another view controller:</p><ol class="ol"><li class="li"><p>Add a container view from the Object library.</p></li><li class="li"><p>Connect the container view to the child view controller with an embed segue.</p></li></ol></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW647" title="Enhancements"></a><h4 class="jump">Enhancements</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW648" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>When Xcode autocreates schemes, it now adds the new schemes in project order (within the workspace) and target order (within each project). 7996506</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW649" title="Editing User Interfaces: Storyboards"></a><h5 class="jump">Editing User Interfaces: Storyboards</h5><ul class="ul"><li class="li"><p>You can now specify that modal segues be presented without animation. 10384049</p></li><li class="li"><p>You can now create unwind segues that allow transitioning to existing instances of scenes in a storyboard. 9211697.</p><p>With earlier releases of Xcode, you may have implemented unwind segues programmatically. See <span class="content_text"><a href="#//apple_ref/doc/uid/TP40001051-CH1-SW650" data-renderer-version="1">iOS SDK Usage</a></span> for details.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW650" title="iOS SDK Usage"></a><h5 class="jump">iOS SDK Usage</h5><ul class="ul"><li class="li"><p>When your app runs on iOS 6.0 or later, in the <code><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621502-shouldperformseguewithidentifier" class="urlLink" target="_self">shouldPerformSegueWithIdentifier:sender:</a></code> method of your <code><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller" class="urlLink" target="_self">UIViewController</a></code> subclass, you can decide whether to trigger a segue with a specific identifier, which you set in the segue’s Attributes inspector. 9447109</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW651" title="Source Control: Subversion"></a><h5 class="jump">Source Control: Subversion</h5><ul class="ul"><li class="li"><p>When you update your Subversion-managed project, Xcode now automatically applies the update if there are no conflicts. 11913482</p><p>To see changes from the repository before applying them, choose File &gt; Source Control &gt; Update while holding down the Control key.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW652" title="Changes"></a><h4 class="jump">Changes</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW653" title="General: iOS"></a><h5 class="jump">General: iOS</h5><ul class="ul"><li class="li"><p>This version of Xcode does not generate armv6 binaries. 12282156</p></li><li class="li"><p>The minimum deployment target is iOS 4.3. 12282166</p></li><li class="li"><p>In this Xcode release, Auto Layout is turned on for new user interface documents (storyboards and nib files). Because Auto Layout requires iOS 6.0, using such user interface documents on earlier iOS releases results in a crash or other undefined behavior. 12289644</p><p>For your app to run on earlier iOS releases, turn off Auto Layout in its user interface documents.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW654" title="Distributing Apps: IOS"></a><h5 class="jump">Distributing Apps: IOS</h5><ul class="ul"><li class="li"><p>This release of Xcode doesn’t allow submitting to the App Store apps with iOS Deployment Target set to iOS releases earlier than iOS 4.3. The validation process fails with the message “This bundle is invalid. The key UIRequiredDeviceCapabilities in the Info.plist may not contain values that would prevent this application from running on devices that were supported by previous versions.” 12309358</p><p>Set the app’s iOS Deployment Target to iOS 4.3 or later.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW655" title="Creating Projects"></a><h5 class="jump">Creating Projects</h5><ul class="ul"><li class="li"><p>Projects created using this Xcode release use the new libc++ implementation of the standard C++ library. The libc++ library is available only on iOS 5.0 and later and OS X 10.7 and later. 12221787</p><p>To enable deployment on earlier releases of iOS and OS X in your project, set the C++ Standard Library build setting to libstdc++ (Gnu C++ standard library).</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW656" title="Managing Devices"></a><h5 class="jump">Managing Devices</h5><ul class="ul"><li class="li"><p>Uploading app data files to an iOS device works correctly on OS X v10.7 and v10.8. 12017933</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW657" title="Source Control"></a><h5 class="jump">Source Control</h5><ul class="ul"><li class="li"><p>RCS and CVS are deprecated in this Xcode release. 12252058</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW658" title="Installing"></a><h5 class="jump">Installing</h5><ul class="ul"><li class="li"><p>Starting in Xcode 4.3, the <code>Xcode.app</code> file package contains all the Xcode developer tools. The man pages for the command-line tools Xcode uses are also placed in this package. However, these man pages are not included in the places searched by the <code><!--a target="_self" -->man<!--/a--></code> command. To access these man pages, you must add them to the index of man pages used by the <code>man</code> command. 10658081</p><p>To add the Xcode man pages to the man-page index:</p><ol class="ol"><li class="li"><p>Construct <code>MANPATH</code> for the <code>Xcode.app</code> package you’re using by executing these shell commands:</p><div class="codesample clear"><table><tr><td scope="row"><pre>#!/bin/tcsh<span></span></pre></td></tr><tr><td scope="row"><pre>set xcodeManPathsTmp=/tmp/Xcode<span></span></pre></td></tr><tr><td scope="row"><pre> <span></span></pre></td></tr><tr><td scope="row"><pre># Expect to find Xcode.app in /Applications<span></span></pre></td></tr><tr><td scope="row"><pre>find /Applications/Xcode.app -name man &gt;! $xcodeManPathsTmp<span></span></pre></td></tr><tr><td scope="row"><pre>sudo cp $xcodeManPathsTmp /etc/manpaths.d<span></span></pre></td></tr></table></div></li><li class="li"><p>Set the <code>MANPATH</code> environment variable in your command shell:</p><ul class="ul"><li class="li"><p>C-Shell</p><p>Edit <code>/etc/csh.login</code> by adding this line before the &lt;code&gt;<code>if ( -x /usr/libexec/path_helper ) then</code> line:</p><div class="codesample clear"><table><tr><td scope="row"><pre>setenv MANPATH ""<span></span></pre></td></tr></table></div></li><li class="li"><p>Bourne Shell</p><p>Edit <code>/etc/profile</code> by adding this line before the <code>if [ -x /usr/libexec/path_helper ]; then</code> line:</p><div class="codesample clear"><table><tr><td scope="row"><pre>export MANPATH=""<span></span></pre></td></tr></table></div><p>The <code>path_helper</code> command adds the paths in the <code>manpaths.d</code> file to the <code>PATH</code> and <code>MANPATH</code> environment variables.</p><div class="notebox"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-SW659" title="Alternative"></a><p><strong>Alternative:</strong>&nbsp;Edit the shell startup files in your home directory to execute this command:</p><p><div class="codesample clear"><table><tr><td scope="row"><pre>/usr/libexec/path_helper -s<span></span></pre></td></tr></table></div></p></aside></div></li></ul></li><li class="li"><p>Open a new shell window, and verify that <code>MANPATH</code> lists the paths to the <code>Xcode.app</code> package you’re using.</p></li><li class="li"><p>Index the man pages by executing this shell command:</p><div class="codesample clear"><table><tr><td scope="row"><pre>sudo /usr/libexec/makewhatis<span></span></pre></td></tr></table></div></li></ol></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW660" title="New Issues"></a><h4 class="jump">New Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW661" title="Editing User Interfaces"></a><h5 class="jump">Editing User Interfaces</h5><ul class="ul"><li class="li"><p>When you add a gesture recognizer in a storyboard, it mistakenly overrides the system-supplied gesture recognizers for the target view. For example, adding a tap gesture recognizer to a table view results in a table view that does not scroll. 12200238</p><p>Disconnect the gesture recognizer in the storyboard, and apply it in code.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW662" title="Performance Measurement and Analysis: Instruments"></a><h5 class="jump">Performance Measurement and Analysis: Instruments</h5><ul class="ul"><li class="li"><p>A UI automation script being run with a simulator target in Instruments fails if your Mac contains multiple copies of Xcode and the Xcode install path is not set up correctly. 12288632</p><p>Determine the path to the running Xcode instance by executing this shell command:</p><div class="codesample clear"><table><tr><td scope="row"><pre>$ xcode-select --print-path<span></span></pre></td></tr></table></div><p>If the returned path doesn’t point to the running Xcode instance, execute this shell command:</p><div class="codesample clear"><table><tr><td scope="row"><pre>$ xcode-select -switch &lt;path_to_the_Xcode_package&gt;<span></span></pre></td></tr></table></div><ul class="nested"><li class="nested li"><p>In the command, <code>&lt;path_to_the_Xcode_package&gt;</code> is the path to the <code>Xcode.app</code> package you’re using—for example, <code>/Applications/Xcode.app</code>.</p></li></ul></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW663" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW664" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Xcode may not show any windows when it’s launched. This happens when you download Xcode from <span class="content_text"><a href="https://developer.apple.com" class="urlLink" rel="external">https://developer.apple.com</a></span> and the “Close windows when quitting an application” preference in System Preferences is unselected. 11865559</p><p>Switch to another app and relaunch Xcode.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW665" title="Editing Core Data Models"></a><h5 class="jump">Editing Core Data Models</h5><ul class="ul"><li class="li"><p>MobileMe syncing support is deprecated. However, the <code>syncable</code> property is still set to <code><!--a  -->YES<!--/a--></code> by default in the User Info Dictionary for entities and properties, but the model editor doesn’t show this setting. 10787672</p><p>To explicitly set <code>syncable</code> to <code><!--a  -->NO<!--/a--></code> for an entity or a property, add a key-value pair in your User Info Dictionary:</p><ol class="ol"><li class="li"><p>Select the entity or property for which you want to turn off synching on a model file.</p></li><li class="li"><p>In the User Info section in the Data Model inspector, add this key-value pair:</p><div class="tableholder"><table class="graybox" border = "0" cellspacing="0" cellpadding="5"><tr><td class="rowhead"  scope="row"><p>key</p></td><td ><p><code>"com.apple.syncservices.Syncable"</code></p></td></tr><tr><td class="rowhead"  scope="row"><p>value</p></td><td ><p><code>"NO"</code></p></td></tr></table></div></li></ol></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW666" title="Editing Source Code"></a><h5 class="jump">Editing Source Code</h5><ul class="ul"><li class="li"><p>Text and font rendering on OS X v10.8 is optimized for Retina display. On a non–Retina display running OS X v10.8, some font configurations can appear blurry in Xcode. 11486875</p><p>Switch back to non–Retina display optimized text and font appearance in Xcode by entering this command in Terminal:</p><div class="codesample clear"><table><tr><td scope="row"><pre>defaults write com.apple.dt.Xcode NSFontDefaultScreenFontSubstitutionEnabled -bool YES<span></span></pre></td></tr></table></div></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW667" title="Localization"></a><h5 class="jump">Localization</h5><ul class="ul"><li class="li"><p>When you select the Use Base Internationalization option in the project editor, Xcode generates strings files for each your project’s user interface documents. 11462724</p><p>To resynchronize your strings files with new content from your user interface documents, use the <code>--generate-strings-file</code> option of the <code>ibtool</code> command to produce new strings files. Then, manually merge the new files into your existing localized strings.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW668" title="Autolayout: Runtime"></a><h5 class="jump">Autolayout: Runtime</h5><ul class="ul"><li class="li"><p>At runtime, when adding subviews to a split view while loading both views from nib files, you may see log messages about unsatisfiable constraints because of autoresizing mask constraints on the split view panes. These are benign log messages because a split view automatically fixes the problem after adding the subview. 11614767</p><p>In your code, before adding the subview to the split view, send <code>setTranslatesAutoresizingMaskIntoConstraints:NO</code> to the subview.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW669" title="Debugging: LLDB"></a><h5 class="jump">Debugging: LLDB</h5><ul class="ul"><li class="li"><p>The <code>po</code>, <code>print</code>, and <code>expression</code> commands cannot access enumerators directly. You must use the name of the enumeration. 11485295</p><p>For example, if your code contains <code>enum MyEnum { e1, e2 };</code>, LLDB emits an error if you type <code>print e1</code>. Instead, type <code>print MyEnum::e1</code>.</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW670" title="Xcode 4.4.1"></a><h3 class="jump">Xcode 4.4.1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW671" title="Changes"></a><h4 class="jump">Changes</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW672" title="Distributing Apps"></a><h5 class="jump">Distributing Apps</h5><ul class="ul"><li class="li"><p>Xcode no longer preserves an app’s designated requirements when you submit it to the App Store. 12006125</p><p>Some apps where prevented from submission because of designated requirements.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW673" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW674" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>After quitting iOS Simulator directly, Xcode continues to show the process launched on the simulator as running. 11998376</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW675" title="Editing Source Code"></a><h5 class="jump">Editing Source Code</h5><ul class="ul"><li class="li"><p>Xcode doesn’t offer code completion in Objective-C++ files. 12006547</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW676" title="Compiling: LLVM"></a><h5 class="jump">Compiling: LLVM</h5><ul class="ul"><li class="li"><p>The LLDB debugger gets the wrong address for some variables. 12006552</p></li><li class="li"><p>When compiling an Objective-C++ file in C++11 with vectors under automatic reference counting (ARC), the LLVM compiler generates incorrect code. 12006560</p></li><li class="li"><p>Objective-C code compiled under ARC and optimized for size may crash at runtime. 12006567</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW677" title="Unit Testing"></a><h5 class="jump">Unit Testing</h5><ul class="ul"><li class="li"><p>Xcode becomes unresponsive while running unit tests. 12017975</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW678" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW679" title="Managing Devices"></a><h5 class="jump">Managing Devices</h5><ul class="ul"><li class="li"><p>Uploading app data files to an iOS device may not work. 12017933</p><ul class="nested"><li class="nested li"><p>On OS X v10.8, duplicate the <code>.xcappdata</code> file, and upload the duplicate.</p></li><li class="nested li"><p>On OS X v10.7 there is no workaround to this issue.</p></li></ul></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW680" title="Xcode 4.4"></a><h3 class="jump">Xcode 4.4</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW681" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW682" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>You can drag file, directory, and group icons from the jump bar to the project navigator, a Finder window, and other apps. 7452760</p></li><li class="li"><p>The Use Base Internationalization setting in the project editor works only on Mac products for deployment on OS X v.10.8 and later. Xcode must also be running on OS X v.10.8 or later. This setting is not supported on iOS projects. 11712855</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW683" title="Editing Source Code"></a><h5 class="jump">Editing Source Code</h5><ul class="ul"><li class="li"><p>The source editor can remove trailing whitespace at the end of a line after you have edited it. You control this behavior with the “Automatically trim trailing whitespace” option in Text Editing preferences. 2535591</p></li><li class="li"><p>When the “Automatically insert closing braces” option in Text Editing preference is turned on, as you type an opening parenthesis, brace, or quotation mark, the source editor adds the corresponding closing character. When the “Enable type-over completions” option is turned on, the editor adds the closing character in a state in which you can type over the character. This feature reduces the appearance of duplicate closing characters, such as when you type both the open and close characters quickly. 3780948</p><p>Press Tab to jump over the closing character.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW684" title="Compiling: ARM"></a><h5 class="jump">Compiling: ARM</h5><ul class="ul"><li class="li"><p><strong>LLVM integrated assembler for ARM.</strong> This new assembler improves compilation times for iOS products, and provides better user level diagnostics for ARM assembly code. This assembler uses only Unified Assembly Language (UAL) assembly code; therefore, you may need to update projects that use manually generated assembly code. 9136376</p><p>Use the <code><!--a target="_self" -->clang<!--/a--></code><code>-no-integrated-as</code> command-line option in projects with substantial Divided Syntax assembly code while transitioning to UAL.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW685" title="Enhancements"></a><h4 class="jump">Enhancements</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW686" title="Editing Source Code"></a><h5 class="jump">Editing Source Code</h5><ul class="ul"><li class="li"><p>During a code completion interaction, Xcode gives higher priority to completions you have used recently. 9790948</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW687" title="Editing Property Lists"></a><h5 class="jump">Editing Property Lists</h5><ul class="ul"><li class="li"><p>You can view and modify the root object of a custom property list file. 8635494</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW688" title="Creating Projects"></a><h5 class="jump">Creating Projects</h5><ul class="ul"><li class="li"><p>When creating a project, you can choose whether to add it to a workspace or create a standalone project. 8032086</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW689" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW690" title="Editing User Interfaces"></a><h5 class="jump">Editing User Interfaces</h5><ul class="ul"><li class="li"><p>When you hold down Option and place the pointer over views in the canvas, the distance values are not obscured by other elements, such as the resizing handles. 8204499</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW691" title="File System"></a><h5 class="jump">File System</h5><ul class="ul"><li class="li"><p>You can rename a file just by changing the case of one of the letters in its filename, even on a case-insensitive file system. 7846036</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW692" title="New Issues"></a><h4 class="jump">New Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW693" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>A failure to rebuild precompiled header (PCH) files causes syntax highlighting, code completion, and Command+click navigation to behave incorrectly. 11538640</p><p>Delete the PCH index folder. </p></li><li class="li"><p>Xcode may not show any windows when it’s launched. This happens when you download Xcode from <span class="content_text"><a href="https://developer.apple.com" class="urlLink" rel="external">https://developer.apple.com</a></span> and the “Close windows when quitting an application” preference in System Preferences is unselected. 11865559</p><p>Switch to another app and relaunch Xcode.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW694" title="Editing Source Code"></a><h5 class="jump">Editing Source Code</h5><ul class="ul"><li class="li"><p>Text and font rendering on OS X v10.8 is optimized for Retina display. On a non–Retina display running OS X v.10.8, some font configurations can appear blurry in Xcode. 11486875</p><p>Switch back to non–Retina display optimized text and font appearance in Xcode by entering this command in Terminal:</p><div class="codesample clear"><table><tr><td scope="row"><pre>defaults write com.apple.dt.Xcode NSFontDefaultScreenFontSubstitutionEnabled -bool YES<span></span></pre></td></tr></table></div></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW695" title="Editing Core Data Models"></a><h5 class="jump">Editing Core Data Models</h5><ul class="ul"><li class="li"><p>MobileMe syncing support is deprecated. However, the <code>syncable</code> property is still set to <code><!--a  -->YES<!--/a--></code> by default in the User Info Dictionary for entities and properties, but the model editor doesn’t show this setting. 10787672</p><p>To explicitly set <code>syncable</code> to <code><!--a  -->NO<!--/a--></code> for an entity or a property, add a key/value pair in your User Info Dictionary:</p><ol class="ol"><li class="li"><p>Select the entity or property for which you want to turn off synching on a model file.</p></li><li class="li"><p>In the User Info section in the Data Model inspector, add this key/value pair:</p><div class="tableholder"><table class="graybox" border = "0" cellspacing="0" cellpadding="5"><tr><td class="rowhead"  scope="row"><p>key</p></td><td ><p><code>"com.apple.syncservices.Syncable"</code></p></td></tr><tr><td class="rowhead"  scope="row"><p>value</p></td><td ><p><code>"NO"</code></p></td></tr></table></div></li></ol></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW696" title="Localization"></a><h5 class="jump">Localization</h5><ul class="ul"><li class="li"><p>When you select the Use Base Internationalization option in the project editor, Xcode generates strings files for each your project’s user interface documents. 11462724</p><p>To resynchronize your strings files with new content from your user interface documents, use the <code>--generate-strings-file</code> option of the <code>ibtool</code> command to produce new strings files. Then, manually merge the new files into your existing localized strings.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW697" title="Debugging: LLDB"></a><h5 class="jump">Debugging: LLDB</h5><ul class="ul"><li class="li"><p>The <code>po</code>, <code>print</code>, and <code>expression</code> commands cannot access enumerators directly. You must use the name of the enumeration. 11485295</p><p>For example, if your code contains <code>enum MyEnum { e1, e2 };</code>, LLDB emits an error if you type <code>print e1</code>. Instead type, <code>print MyEnum::e1</code>.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW698" title="Autolayout: Runtime"></a><h5 class="jump">Autolayout: Runtime</h5><ul class="ul"><li class="li"><p>At runtime, when adding subviews to a split view while loading both views from nib files, you may see log messages about unsatisfiable constraints because of autoresizing mask constraints on the split view panes. These are benign log messages because a split view automatically fixes the problem after adding the subview. 11614767</p><p>In your code, before adding the subview to the split view, send <code>setTranslatesAutoresizingMaskIntoConstraints:NO</code> to the subview.</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW699" title="Xcode 4.3"></a><h3 class="jump">Xcode 4.3</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW700" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW701" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Xcode crashes when dragging tabs in full-screen mode. 9987358</p></li><li class="li"><p>Xcode crashes when opening multiple workspaces that contain the same folder reference (blue folder). 10079252</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW702" title="Installing"></a><h5 class="jump">Installing</h5><ul class="ul"><li class="li"><p>Installing Xcode on OS X v10.7.3 or later breaks the Xcode 4.3 Instruments app. 10619572</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW703" title="Editing User Interfaces"></a><h5 class="jump">Editing User Interfaces</h5><ul class="ul"><li class="li"><p>After enabling autolayout in a nib file, the wrong constraints are applied. 8201103</p></li><li class="li"><p>When resizing views that use autolayout, Xcode applies constraints to the descendants of the view being resized, but not to its siblings and ancestors. 9450655</p></li><li class="li"><p>Xcode doesn’t allow constraints with negative values. 9717632</p></li><li class="li"><p>When you create a user constraint, Xcode removes redundant constrains, which is not always desirable. 9794979</p></li><li class="li"><p>You cannot add width and height constraints to top-level views. 9877773</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW704" title="Building"></a><h5 class="jump">Building</h5><ul class="ul"><li class="li"><p>Xcode imports incorrect header in projects containing targets that produce different header files with the same name. 8201103</p></li><li class="li"><p> A build may hang if Xcode encounters a build error and the “Continue building after errors” option in general preferences is turned on. 10642885</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW705" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW706" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>The App Store app cannot install Xcode in the <code>/Applications</code> directory because there are beta releases of Xcode in that directory.</p><p>Do not install beta releases of Xcode in the <code>/Applications</code> directory. 10824869</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW707" title="iOS SDK Support"></a><h5 class="jump">iOS SDK Support</h5><ul class="ul"><li class="li"><p>Xcode cannot launch your app on a device for debugging after you install the iOS 3.x device debugging support component.</p><p>Unplug and plug-in your device to your Mac, and ensure that you build your app for the armv6 architecture. 10538662</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW708" title="Editing Source Code"></a><h5 class="jump">Editing Source Code</h5><ul class="ul"><li class="li"><p>Xcode doesn’t show code-completion suggestions when there are mismatched braces.</p><p>Turn on the “Automatically insert closing "}"” option in text editing preferences to reduce the number of mismatched braces. 10775381</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW709" title="Debugging"></a><h5 class="jump">Debugging</h5><ul class="ul"><li class="li"><p>Some debugger commands and log expressions in breakpoints fail when using the LLDB debugger because Xcode uses the wrong frame when executing the debugger command or evaluating the log expression.</p><p>If you know what thread the the debugger command or log expression must run relative to, add a breakpoint action that sets the current frame to the appropriate one before the breakpoint action with the problem. 10426977</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW710" title="Debugging: LLDB"></a><h5 class="jump">Debugging: LLDB</h5><ul class="ul"><li class="li"><p>The variables pane in the debug area does’t display correctly the child values of variables with dynamic types (Objective-C object pointers and virtual C++ pointers).</p><p>Use the console pane in the debug area: enter the commands <code>frame variable *self</code> or <code>frame variable *this</code> to the values.10658091</p></li><li class="li"><p>LLDB cannot be used to debug apps on devices running iOS 3.x or iOS 4.x.</p><p>Set GDB instead of LLDB as the debugger in the scheme that builds your app. 10776590</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW711" title="Performance Measurement and Analysis"></a><h5 class="jump">Performance Measurement and Analysis</h5><ul class="ul"><li class="li"><p>When there are more than one Xcode releases installed on your Mac, Xcode 4.3 may not find your app’s symbols when displaying crash reports and the trace data for instruments.</p><p>To enable Instruments to find your app’s symbols when displaying trace data:</p><ol class="ol"><li class="li"><p>In Instruments, choose File &gt; Re-symbolicate Document.</p></li><li class="li"><p>Search for you app’s name, and locate it in your app’s build directory, such as <code>~/Library/Developer/Xcode/DerivedData/&lt;MyApp&gt;</code>. 10552213</p></li></ol></li><li class="li"><p>You cannot run System Time Profile from the Instruments icon in the Dock by Control-clicking the icon and choosing System Time Profile.</p><p>Control-click the Instruments icon in the Dock, and select the Allow Tracing of Any Process option. 10755622</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW712" title="Source Control and Snapshots"></a><h5 class="jump">Source Control and Snapshots</h5><ul class="ul"><li class="li"><p>When Xcode attempts to authenticate Subversion repositories that require approval of a server certificate, one or more <code>svn</code> processes hangs.</p><p>Authenticate the server in Terminal. 10042297</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW713" title="Xcode 4.2"></a><h3 class="jump">Xcode 4.2</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW714" title="Installation"></a><h4 class="jump">Installation</h4><ul class="ul"><li class="li"><p>You can install Xcode 4.2 for OS X v10.6 Snow Leopard only if you have purchased an earlier release of Xcode.</p><p>Install or update Xcode through the Purchases or Updates panes.</p></li><li class="li"><p>If you purchased Xcode from the Mac App Store, the Install Xcode app is on the volume on which you installed Xcode.</p><p>To install Xcode 4.2 on another volume, you must delete all copies of the Install Xcode app from your file system.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW715" title="Xcode"></a><h4 class="jump">Xcode</h4><ul class="ul"><li class="li"><p>In Xcode 4.2 with iOS 5, support for running and debugging applications in the iOS 4.3 Simulator and on devices with iOS versions older than 4.2 is optional and installed only on demand. In addition, this support is no longer shipped as part of the core tools packaging, and is instead made available for download and installation through the "Downloads" pane of the Xcode Preferences panel. A valid iOS developer ADC account is required to obtain this content.</p><p>To obtain the iOS 4.3 Simulator, choose More Simulators from the Run Destinations popup in the main toolbar. This item presents the Downloads pane of the Preferences and includes UI to initiate the installation of the simulator.</p><p>To obtain iOS device support for pre-iOS 4.2 devices, connect a device and activate it for development in the Organizer. Xcode prompts you to initiate the download of the device support components.</p><p>If Xcode 4.2 in iOS 5 is installed over a previous Xcode 4.2 beta or over Xcode 4.1, the iOS 4.3 Simulator and device support from the previous install will already be present, and the additional components will display as "Installed" in the Downloads pane of the Xcode Preferences.</p><p>The installation packages for the downloaded components are stored in <code>~Library/Developer/Xcode</code>. When a new version of Xcode (beta or GM) is installed, subsequent requests to install these components use the local packages without requiring a new download.</p></li><li class="li"><p>In some cases, Xcode 4.2 Organizer does not display a device that is in restore mode. As a workaround you can use iTunes to restore.</p></li><li class="li"><p>In iOS 5, iOS Simulator is not compatible with previous releases of the iCloud Developer Seed for OS X. It is highly recommended that you update to the latest iCloud Developer Seed to ensure compatibility. </p></li><li class="li"><p>The iOS 5 SDK supports both iOS 4.3 and iOS 5.0 simulators.</p></li><li class="li"><p>Be sure to quit any running Xcode before starting the uninstall-devtools script.</p></li><li class="li"><p>The Network Link Conditioner daemon cannot be launched after installing the Networking Link Conditioner preference pane without first rebooting the system. As a result, the tool will not function without a system reboot. </p><p>If you do not want to reboot the system, you can issue the following command from Terminal instead: <code>sudo launchctl load /system/library/launchdaemons/com.apple.networklinkconditioner.plist</code></p></li><li class="li"><p>If you are using multiple tabs in Xcode 4.2, some behaviors that are dependent on the Run Generates Output and Run Completes events may not get triggered. This bug will be fixed in future versions.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW716" title="Interface Builder"></a><h4 class="jump">Interface Builder</h4><ul class="ul"><li class="li"><p>When initiating a refactoring rename operation from the declaration of a property, any Interface Builder files that refer to that property will not be updated correctly. Instead, perform the rename operation on a usage of the property, or an associated <code>@synthesize</code> statement.</p></li><li class="li"><p>In Xcode 4.2, when copying views (either a single view or multiple views), both the user defined constraints on the selected view and the user defined constraints between the views are copied to the pasteboard.</p></li><li class="li"><p>When developing Mac apps, changing the segment style of an <code>NSSegmentedControl</code> object to Automatic might crash in documents using Cocoa Auto Layout. To workaround the issue use an explicit segment style such as Round or Textured, and at runtime, change the segment style to automatic using the <code>setSegmentStyle:</code> method. </p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW717" title="Instruments"></a><h4 class="jump">Instruments</h4><ul class="ul"><li class="li"><p>There is a known issue with the Profile action from Xcode 4.2. After a build in which no source files have changed, Instruments will be unable to gather symbols for the target application. </p><p>This affects projects where both:</p><ol class="ol"><li class="li"><p>The Release configuration is selected for the Profile action. (default)</p></li><li class="li"><p>The Strip Linked Product build setting is set to "Yes”, or a custom Run Script build phase strips the product. (non-default)</p></li></ol><p>The workaround is to do any one of the following:</p><ol class="ol"><li class="li"><p>Perform a "Clean" on the product before initiating the Profile action.</p></li><li class="li"><p>Do a Clean of the product and temporarily set the Strip Linked Product build setting to "No" while Profiling. </p></li><li class="li"><p>Set the configuration of the Profile action to Debug.</p></li><li class="li"><p>Run successive profiles directly from within Instruments when you do not need to rebuild.</p></li></ol></li><li class="li"><p>When developing Mac apps, using the GC Monitor template in Instruments may cause Instruments to crash. To workaround the problem please consider migrating your application to ARC. </p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW718" title="iOS Simulator"></a><h4 class="jump">iOS Simulator</h4><ul class="ul"><li class="li"><p>When running Mac OS 10.7, Location Services are not functional in iOS simulator when simulating iOS 4.3 and earlier. This issue is not present when running Mac OS 10.6 or when simulating iOS 5.0.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW719" title="Xcode 4.1 Developer Preview 1"></a><h3 class="jump">Xcode 4.1 Developer Preview 1</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW720" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW721" title="Editing Nib Files"></a><h5 class="jump">Editing Nib Files</h5><ul class="ul"><li class="li"><p>You can create and edit view-based <code>NSTableView</code> instances.</p><p>Just drag an <code>NSView</code> subclass (usually <code>NSTableCellView</code>) from the Object library into each table column. After connecting the datasource and delegate outlets, implement at least these methods:</p><ul class="nested"><li class="nested li"><p><code>– (NSInteger)numberOfRowsInTableView:(NSTableView *)tableView</code></p></li><li class="nested li"><p><code>– (id)tableView:(NSTableView *)tableView objectValueForTableColumn:(NSTableColumn *)tableColumn row:(NSInteger)row</code></p></li></ul><p>You can bind the <code>objectValue</code> property of an <code>NSTableCellView</code> instance in Interface Builder. You can also make action connections from a cell to the cell’s owner, which is usually the table view’s delegate.</p><p>By assigning identifiers to the view cells, you can use the <code>NSTableView</code> method <code>–makeViewForIdentifier:owner:</code> in the implementation of the table-view delegate method <code>–viewForTableColumn:row:</code>. 7465869</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW722" title="Enhancements"></a><h4 class="jump">Enhancements</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW723" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>If Xcode or <code>xcodebuild</code> fail to launch:</p><ul class="nested"><li class="nested li"><p>Hold down Shift while launching Xcode</p></li><li class="nested li"><p>Use the <code>xcodebuild -clearPlugInCache</code> option. 9013457</p></li></ul></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW724" title="Editing Nib Files"></a><h5 class="jump">Editing Nib Files</h5><ul class="ul"><li class="li"><p>Building products that require Interface Builder 3 plug-ins may fail because the <code>ibtool</code> command-line tool is unable to locate the required <code>ibplugin</code> plug-in.</p><p>If you have the Xcode 3 toolset installed on your computer, load the plug-in using the Interface Builder 3 preferences window. Otherwise, use this command:</p><div class="codesample clear"><table><tr><td scope="row"><pre>defaults write com.apple.InterfaceBuilder3 "IBKnownPluginPaths.3.2.7" -dict-add "&lt;plug.in.identifier.string&gt;" "&lt;path_to_ibplugin&gt;"<span></span></pre></td></tr></table></div>	<p>8920581</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW725" title="Changes"></a><h4 class="jump">Changes</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW726" title="Building: xcodebuild"></a><h5 class="jump">Building: xcodebuild</h5><ul class="ul"><li class="li"><p>The <code>xcodebuild -activetarget</code> option is not supported. 8361726</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW727" title="Performance Measurement and Analysis"></a><h5 class="jump">Performance Measurement and Analysis</h5><ul class="ul"><li class="li"><p>MallocDebug is replaced by the Allocations and Leaks instruments, and the <code>libgmalloc</code> (GuardMalloc) and <code>leaks</code> command-line tools. 4388187</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW728" title="New Issues"></a><h4 class="jump">New Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW729" title="Performance Measurement and Analysis"></a><h5 class="jump">Performance Measurement and Analysis</h5><ul class="ul"><li class="li"><p>When using the OS X Core Data template, Instruments may hang or stop tracing. 9031942</p></li><li class="li"><p>When you profile an application running in iOS Simulator, Instruments collects no data.</p><p>To have Instruments collect data, click the Instruments icon in the Dock after it starts recording. 8909180</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW730" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW731" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Nib files with explicit Xcode 3 file types open in the source editor instead of in Interface Builder.</p><p>Set the file type of the nib file in the Identity and Type inspector to “Default,” deselect it in the project navigator, and select it again. 8028406</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW732" title="Editing Nib Files"></a><h5 class="jump">Editing Nib Files</h5><ul class="ul"><li class="li"><p>Xcode disallows dragging objects in the Interface Builder canvas to the Object library. 8656363</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW733" title="Unit Testing"></a><h5 class="jump">Unit Testing</h5><ul class="ul"><li class="li"><p>Projects that use the Xcode 3 unit-testing tools cannot use the Xcode 4 unit-testing infrastructure.</p><p>To use unit testing in your Xcode 3 projects, set the Test After Build build setting to No. 8803198</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW734" title="Xcode 4.0 GM Seed"></a><h3 class="jump">Xcode 4.0 GM Seed</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW735" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW736" title="Editing Nib Files"></a><h5 class="jump">Editing Nib Files</h5><ul class="ul"><li class="li"><p><strong>Refactoring:</strong> Xcode refactors Cocoa bindings. 8423815</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW737" title="Source Control and Snapshots"></a><h5 class="jump">Source Control and Snapshots</h5><ul class="ul"><li class="li"><p>On a project with no snapshots, new snapshots appear in the projects organizer. 8774085</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW738" title="Performance Measurement and Analysis"></a><h5 class="jump">Performance Measurement and Analysis</h5><ul class="ul"><li class="li"><p>Xcode 4.0 Developer Preview 6 installs a set of kernel extension with a version number of 9999, which hinders their upgrade.</p><p>Before installing Xcode 4.0 GM Seed, perform these actions:</p><ul class="nested"><li class="nested li"><p>In Terminal, execute these commands:</p><div class="codesample clear"><table><tr><td scope="row"><pre>sudo rm -rf /System/Library/Extensions/AppleProfileFamily.kext/Contents/PlugIns/AppleIntelPenrynProfile.kext<span></span></pre></td></tr><tr><td scope="row"><pre>sudo rm -rf /System/Library/Extensions/AppleProfileFamily.kext/Contents/PlugIns/AppleIntelNehalemProfile.kext<span></span></pre></td></tr><tr><td scope="row"><pre>sudo touch /System/Library/Extensions<span></span></pre></td></tr></table></div>	</li><li class="nested li"><p>Install Xcode.</p></li><li class="nested li"><p>Restart your computer. 8844127</p></li></ul></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW739" title="New Issues"></a><h4 class="jump">New Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW740" title="Editing Nib Files"></a><h5 class="jump">Editing Nib Files</h5><ul class="ul"><li class="li"><p>Xcode disallows dragging objects in the Interface Builder canvas to the Object library. 8656363</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW741" title="Unit Testing"></a><h5 class="jump">Unit Testing</h5><ul class="ul"><li class="li"><p>The unit-test command-line tools in <code>/Developer/Tools</code> are deprecated.</p><p>To use unit testing in your Xcode 3 projects, set the Test After Build build setting to <code><!--a  -->NO<!--/a--></code>. 8803198</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW742" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW743" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Interface Builder files with explicit Xcode 3 file types open in the source editor instead of in Interface Builder.</p><p>Set the file type of the Interface Builder file in the Identity and Type inspector to “Default,” deselect it in the project navigator, and select it again. 8028406</p></li><li class="li"><p>The task log viewer is empty when you select the last build task of a project or workspace in the log navigator and the viewer is set to show only recent operations.</p><p>Set the task log viewer to show all operations. 8350930</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW744" title="Editing Nib Files"></a><h5 class="jump">Editing Nib Files</h5><ul class="ul"><li class="li"><p>Xcode cannot edit OS X–type Interface Builder documents comprised of objects from frameworks other than AppKit.</p><p>You can compile and run these documents, however. 7470836</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW745" title="Xcode 4.0 Developer Preview 6"></a><h3 class="jump">Xcode 4.0 Developer Preview 6</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW746" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW747" title="Performance Measurement and Analysis"></a><h5 class="jump">Performance Measurement and Analysis</h5><ul class="ul"><li class="li"><p>There is new command-line tool for measuring an application’s performance without launching the Instruments application: <code>iprofiler</code>. After making the measurements, you can analyze them with Instruments. A new framework, DTPerformanceSession (located in <code>/Library/Developer/4.0/Instruments/Frameworks</code>) allows your application to create performance measurements of itself or other applications. 7773305</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW748" title="Enhancements"></a><h4 class="jump">Enhancements</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW749" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>In the Manage Schemes dialog you can specify whether to create schemes automatically with the “Autocreate schemes” option. You may want to turn off automatic scheme creation in a large workspace, where automatic scheme creation produces too many schemes. This setting is shared with all the users of the workspace.</p><p>You can have Xcode create schemes with the Autocreate Schemes Now button. 7952053</p></li><li class="li"><p>You can add an Xcode archive file (<code>.xcarchive</code>) to the archives organizer by double-clicking it in the Finder. 8791305</p></li><li class="li"><p>You can use a workspace-relative location for derived data. 8242521</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW750" title="Task Information and Alerts"></a><h5 class="jump">Task Information and Alerts</h5><ul class="ul"><li class="li"><p>Enhancements to the execution of alert scripts:</p><ul class="nested"><li class="nested li"><p>The scripts can access the Xcode user environment variables.</p></li><li class="nested li"><p>The value of the PWD environment variable is a path to the directory that contains the current project or workspace.</p></li><li class="nested li"><p>The new <code>XcodeAlertAffectedPaths</code> environment variable contains a colon-separated list of full paths to the affected files. This variable replaces the <code>IDEAlertAffectedURLs</code> environment variable. 8748528</p></li></ul></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW751" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW752" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Xcode doesn’t strip newline characters from the scripts in Run Script scheme actions. 8230045</p></li><li class="li"><p>Duplicating a scheme doesn’t result in a new scheme with broken target references. 8335950</p></li><li class="li"><p>When the active scheme is a unit-test scheme, clicking Run in the toolbar doesn’t produce an unknown error dialog. 8642393</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW753" title="Refactoring"></a><h5 class="jump">Refactoring</h5><ul class="ul"><li class="li"><p><strong>Editing nib files:</strong> The Rename transformation renames action methods in Interface Builder documents when the action’s target is the first responder or the method is declared in a category, protocol, or a superclass of the given class. 8500272</p></li><li class="li"><p><strong>Source Control and Snapshots:</strong> Xcode creates a snapshot of your workspace before performing a refactoring transformation. 7816256</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW754" title="Comparing Versions of a File"></a><h5 class="jump">Comparing Versions of a File</h5><ul class="ul"><li class="li"><p>After you create a branch and switch to it in the repositories organizer, using the commit dialog or the version editor doesn’t cause an assertion failure. 8383245</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW755" title="Source Control and Snapshots"></a><h5 class="jump">Source Control and Snapshots</h5><ul class="ul"><li class="li"><p>Xcode recognize SCP-based URLs (such as <code>git@example.com:/myrepositoryname.git</code>) for Git repositories in the repositories organizer. 8044145</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW756" title="Building"></a><h5 class="jump">Building</h5><ul class="ul"><li class="li"><p>After you change General preferences &gt; Build Location, Xcode uses the new build location. 7965261</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW757" title="New Issues"></a><h4 class="jump">New Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW758" title="Performance Measurement and Analysis"></a><h5 class="jump">Performance Measurement and Analysis</h5><ul class="ul"><li class="li"><p>Multicore and Dispatch templates are not working. 8717719</p></li><li class="li"><p>Time Profiler and System Trace don’t work after installing Xcode 4.0 Developer Preview 6.</p><p>Restart your computer. 8829655</p></li><li class="li"><p>If your computer contains more than one release of Xcode, the Dock time profiler doesn’t work correctly.</p><p>Add the Instruments application in the appropriate Xcode release to the Dock and restart your computer. 8830062</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW759" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW760" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Interface Builder files with explicit Xcode 3 file types open in the source editor instead of in Interface Builder.</p><p>Set the file type of the Interface Builder file in the Identity and Type inspector to “Default,” deselect it in the project navigator, and select it again. 8028406</p></li><li class="li"><p>The task log viewer is empty when you select the last build task of a project or workspace in the log navigator and the viewer is set to show only recent operations.</p><p>Set the task log viewer to show all operations. 8350930</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW761" title="Editing Nib Files"></a><h5 class="jump">Editing Nib Files</h5><ul class="ul"><li class="li"><p>Xcode cannot edit OS X–type Interface Builder documents comprised of objects from frameworks other than AppKit.</p><p>You can compile and run these documents, however. 7470836</p></li><li class="li"><p><strong>Refactoring:</strong> Xcode does not refactor Cocoa bindings. 8423815</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW762" title="Searching"></a><h5 class="jump">Searching</h5><ul class="ul"><li class="li"><p><strong>Search navigator:</strong> Xcode may crash in the replace preview dialog of the search navigator when all the found instances are selected and you click Replace. 8091532</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW763" title="Xcode 4.0 Developer Preview 5"></a><h3 class="jump">Xcode 4.0 Developer Preview 5</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW764" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW765" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>The build action in the scheme dialog allows you to choose which targets should be built for each scheme action. 8025069</p></li><li class="li"><p>Each scheme action specifies the build configuration to use when Xcode performs that action as part of a build. Setting up a scheme with scheme actions that use particular build configurations allows you to, for example, set up a scheme that runs the product with the Debug configuration but profiles it with the Release configuration. 8090845</p></li><li class="li"><p>The Build and Archive command archives the products of the targets selected in the active scheme for archival, including their dSYM files. You submit your products to iTunes Connect using these archives. You can also use them to symbolicate crash logs. 7696041</p></li><li class="li"><p>The post-action scripts of archive scheme actions have access to information about the just-built archive in their environment:</p><ul class="nested"><li class="nested li"><p><code>ARCHIVE_PATH</code>: The path to the archive.</p></li><li class="nested li"><p><code>ARCHIVE_PRODUCTS_PATH</code>: The installation location for the archived product.</p></li><li class="nested li"><p><code>ARCHIVE_DSYMS_PATH</code>: The path to the product’s dSYM files. 8423449</p></li></ul></li><li class="li"><p>Xcode detects and enforces implicit build dependencies between targets when you build a scheme. You can turn this off per scheme in a scheme’s build action. 7879553</p></li><li class="li"><p>When the active scheme is a unit-test scheme, clicking Run in the toolbar produces an unknown error dialog.</p><p>To run unit tests, choose Product &gt; Test. 8642393</p></li><li class="li"><p>Fix-it is not supported in iOS application projects created using the new project dialog. The iOS project templates have the compiler set to LLVM-GCC, which does not support Fix-it.</p><p>After creating an iOS project, set the compiler to LLVM 2.0. 8607314</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW766" title="Editing Core Data Models"></a><h5 class="jump">Editing Core Data Models</h5><ul class="ul"><li class="li"><p>You can create <code>NSManagedObject</code> subclasses from entities in a Core Data data model. 7484772</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW767" title="Refactoring"></a><h5 class="jump">Refactoring</h5><ul class="ul"><li class="li"><p>The Extract transformation is supported. 7711619</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW768" title="Compiling: LLVM 2.0"></a><h5 class="jump">Compiling: LLVM 2.0</h5><ul class="ul"><li class="li"><p><strong>Blocks:</strong><code>Goto</code> statements within blocks are allowed when the target is within the block. 7549164</p></li><li class="li"><p><strong>Objective-C:</strong> Fixes bugs in exception handling present in LLVM 1.5. 8160285</p></li><li class="li"><p>You can declare instance variables in class implementations and extensions (iOS and 64-bit OS X). 7538989</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW769" title="Analyzing OpenGL ES Performance"></a><h5 class="jump">Analyzing OpenGL ES Performance</h5><ul class="ul"><li class="li"><p>The OpenGL ES Performance Detective identifies graphics bottlenecks in your iOS applications. It is located in <code>&lt;Xcode&gt;/Applications/Graphics Tools</code>. 8208239</p></li><li class="li"><p>Runs of the OpenGL ES Analyzer instrument can be saved in Instruments traces. 7993423</p></li><li class="li"><p>The OpenGL ES Analyzer instrument supports extended filtering of the OpenGL ES trace. 7976717</p></li><li class="li"><p>The OpenGL ES Analyzer instrument provides single-frame navigation, which allows you to focus all instruments on a specific OpenGL frame, and to step backward and forward in the trace frame by frame. 8552970</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW770" title="Enhancements"></a><h4 class="jump">Enhancements</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW771" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>You can access the values of the build settings of the target being built through environment variables and launch arguments. When you create custom executables (by changing the value of the Executable setting in Run and Profile scheme actions), you can specify the target against which to expand the environment variables and launch arguments. 7546808</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW772" title="Editing Nib Files"></a><h5 class="jump">Editing Nib Files</h5><ul class="ul"><li class="li"><p>Xcode suggests key path completions in the bindings inspector as you type. To take advantage of this feature, specify the class of object being managed by your controller in the attributes inspector.</p><p>Xcode uses the project’s symbol index to generate the key path completions. 8176168</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW773" title="Editing Source Code"></a><h5 class="jump">Editing Source Code</h5><ul class="ul"><li class="li"><p>There’s an additional gesture to jump to a symbol definition in the source editor: holding down the Command key. When you hold down Command, Xcode represents the symbol under the pointer as a hyperlink; you can move the pointer between symbols until Xcode highlights the one you want to act on. You can then click the symbol to jump to its definition. Other modifies keys behave as expected. 8459719</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW774" title="Task Information and Alerts"></a><h5 class="jump">Task Information and Alerts</h5><ul class="ul"><li class="li"><p>The activity viewer presents more detailed information about scheme-related tasks, such as building a product. 7982481</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW775" title="Changes"></a><h4 class="jump">Changes</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW776" title="Editing Nib Files"></a><h5 class="jump">Editing Nib Files</h5><ul class="ul"><li class="li"><p>Hidden views are invisible in the Interface Builder canvas (they used to be partially visible in Interface Builder 3, part of Xcode 3).</p><p>To work with these views, select them in the jump bar or the outline view. 8059339</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW777" title="Building: xcodebuild"></a><h5 class="jump">Building: xcodebuild</h5><ul class="ul"><li class="li"><p>The <code>xcodebuild -activetarget</code> option is no longer supported. 8361726</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW778" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW779" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>In General preferences, you can specify that Xcode ask you where to open a file you click or double-click while holding down an modifier key in a navigator. 8476034</p></li><li class="li"><p>Xcode automatically creates schemes for all targets in a project when you open an Xcode 3.x–based project. It doesn’t skip targets that other targets depend on.</p><p>You can delete or hide schemes you don’t need in the manage schemes dialog. 8016676</p></li><li class="li"><p>Setting General preferences &gt; Build Location &gt; “Shared subfolder” to an absolute path doesn’t generate an assertion failure when opening projects. 8368913</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW780" title="Editing Nib Files"></a><h5 class="jump">Editing Nib Files</h5><ul class="ul"><li class="li"><p>Many performance problems with making connections are resolved. In particular, the performance of connecting to the First Responder has been drastically improved. 8280101</p></li><li class="li"><p>You can create an Interface Builder–to–source connection even the target source code is folded. 8472539</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW781" title="Editing Core Data Model Files"></a><h5 class="jump">Editing Core Data Model Files</h5><ul class="ul"><li class="li"><p>When you create <code>NSManagedObject</code> subclasses from entities in a Core Data data model, Xcode ask for confirmation before overwriting existing files. 8506607</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW782" title="Editing Source Code"></a><h5 class="jump">Editing Source Code</h5><ul class="ul"><li class="li"><p>Breakpoints and message bubbles appear in the source editor even when code is folded above them. 7192871</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW783" title="Compiling: LLVM 2.0"></a><h5 class="jump">Compiling: LLVM 2.0</h5><ul class="ul"><li class="li"><p><strong>C++:</strong> Several bugs related to using blocks are fixed. 6182276</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW784" title="Analyzing OpenGL ES Performance"></a><h5 class="jump">Analyzing OpenGL ES Performance</h5><ul class="ul"><li class="li"><p>API statistics in the OpenGL ES Analyzer instrument are computed correctly. 8549379</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW785" title="Help and Documentation Content"></a><h5 class="jump">Help and Documentation Content</h5><ul class="ul"><li class="li"><p>The list of help topics in a help book appears, as expected, when accessing help books in the documentation organizer. 8430699</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW786" title="New Issues"></a><h4 class="jump">New Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW787" title="Comparing Versions of a File"></a><h5 class="jump">Comparing Versions of a File</h5><ul class="ul"><li class="li"><p>After you create a branch and switch to it in the repositories organizer, using the commit dialog or the version editor causes an assertion failure.</p><p>Restart Xcode after creating a branch and switching to it. 8383245</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW788" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW789" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Interface Builder files with explicit Xcode 3 file types open in the source editor instead of in Interface Builder.</p><p>Set the file type of the Interface Builder file in the Identity and Type inspector to “Default,” deselect it in the project navigator, and select it again. 8028406</p></li><li class="li"><p>The task log viewer is empty when you select the last build task of a project or workspace in the log navigator and the viewer is set to show only recent operations.</p><p>Set the task log viewer to show all operations. 8350930</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW790" title="Editing Nib Files"></a><h5 class="jump">Editing Nib Files</h5><ul class="ul"><li class="li"><p>Xcode cannot edit OS X–type Interface Builder documents comprised of objects from frameworks other than AppKit.</p><p>You can compile and run these documents, however. 7470836</p></li><li class="li"><p><strong>Refactoring:</strong> Xcode does not refactor Cocoa bindings. 8423815</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW791" title="Searching"></a><h5 class="jump">Searching</h5><ul class="ul"><li class="li"><p><strong>Search navigator:</strong> Xcode may crash in the replace preview dialog of the search navigator when all the found instances are selected and you click Replace. 8091532</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW792" title="Refactoring"></a><h5 class="jump">Refactoring</h5><ul class="ul"><li class="li"><p>Xcode does not create a snapshot of your workspace before performing a refactoring transformation.</p><p>Create manual snapshots before performing refactoring transformations. 7816256</p></li><li class="li"><p><strong>Editing nib files:</strong> The Rename transformation may not work properly action methods in Interface Builder documents when the action’s target is the first responder or the method is declared in a category, protocol, or a superclass of the given class. 8500272</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW793" title="Source Control and Snapshots"></a><h5 class="jump">Source Control and Snapshots</h5><ul class="ul"><li class="li"><p>Xcode doesn’t recognize SCP-based URLs for Git repositories in the Repositories organizer.</p><p>Use the SSH-based URLs. For example, instead of <code>git@example.com:/myrepositoryname.git</code> use <code>ssh://git@example.com/myrepositoryname.git</code>. 8044145</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW794" title="Building"></a><h5 class="jump">Building</h5><ul class="ul"><li class="li"><p>Xcode doesn’t use a new build location after you change General preferences &gt; Build Location.</p><p>Close and reopen open projects and workspaces after changing the build location. 7965261</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW795" title="Help and Documentation Content"></a><h5 class="jump">Help and Documentation Content</h5><ul class="ul"><li class="li"><p>These help books are not listed on the Xcode Application Help page (Help &gt; Xcode Application Help): <em>Interface Builder Help</em>, <em>Task and Session Log Viewer Help</em>, <em>Symbol Navigator Help</em>, and <em>Xcode Concepts</em>.</p><p>Search for these titles in the Help menu or in the search navigator in the documentation organizer. 8481951,8518802</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW796" title="Xcode 4.0 Developer Preview 4"></a><h3 class="jump">Xcode 4.0 Developer Preview 4</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW797" title="New Features"></a><h4 class="jump">New Features</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW798" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>There is no distinction between “launch” schemes and “distribution” schemes. All schemes are capable of launching and archiving a product. 8429398</p></li><li class="li"><p>The project navigator identifies read-only files with a lock icon. Click the lock to unlock the file. Xcode can unlock files with no “write” permission and files locked from the Finder. You can also invoke a custom script to unlock files through the “Unlocking file” alert in Alerts preferences. 8135771</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW799" title="Source Control and Snapshots"></a><h5 class="jump">Source Control and Snapshots</h5><ul class="ul"><li class="li"><p>You can preview the files modified in a snapshot before restoring it using the version editor. 7494111</p></li><li class="li"><p>When using Git as as your source control repository, you can discard changes to project packages (<code>.xcodeproj</code> files) through the Source Control item in the project navigator’s shortcut menu. 7480525</p></li><li class="li"><p>Xcode offers to place new projects under source control in a local Git repository in the project directory. 8407608</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW800" title="Accessing Help and Documentation"></a><h5 class="jump">Accessing Help and Documentation</h5><ul class="ul"><li class="li"><p>You can access Quick Help for a suggested completion from the code completion list. To display Quick Help for the selected suggestion, click the question mark icon on the suggestion or choose Help &gt; Quick Help. 8172782</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW801" title="Compiling: LLVM2.0"></a><h5 class="jump">Compiling: LLVM2.0</h5><ul class="ul"><li class="li"><p><strong>Objective-C:</strong> Adds support for instance variables in class implementations and class extensions (iOS and 64-bit OS X).</p></li><li class="li"><p><strong>Objective-C:</strong> Adds default automatic synthesis of properties (iOS and 64-bit OS X). You don’t need the <code>@synthesize</code> directive in the implementation sections for the compiler to synthesize accessors for declared properties.</p><p>However, to access such properties in <code>dealloc</code> and <code>finalize</code> methods, you must use the dot notation; for example: <code>self.property</code>. 7885001</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW802" title="Resolved Issues"></a><h4 class="jump">Resolved Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW803" title="Editing Nib Files"></a><h5 class="jump">Editing Nib Files</h5><ul class="ul"><li class="li"><p>When inserting an outlet or action with Connect to Source Code, Xcode adds the counterparts for the connection:</p><p>For actions:</p><ul class="nested"><li class="nested li"><p>When dragging to a header file: Xcode adds the implementation and interface.</p></li><li class="nested li"><p>When dragging to an implementation file: Xcode adds the implementation.</p></li></ul><p>For outlets:</p><ul class="nested"><li class="nested li"><p>When dragging to a header file to insert a property outlet: Xcode adds the instance variable declaration, the <code>@synthesize</code> directive, and the <code>release</code> call in the <code>dealloc</code> method.</p></li><li class="nested li"><p>When dragging to a header file to insert an instance variable outlet, Xcode adds the instance variable declaration, and the <code>release</code> call in the <code>dealloc</code> method. 8082047</p></li></ul></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW804" title="Editing Source Code"></a><h5 class="jump">Editing Source Code</h5><ul class="ul"><li class="li"><p>Xcode shows a preview of the suggested completion in the code completion list. To accept the entire completion, press Return. To accept only the highlighted part of the completion (identified with a dotted underline), press Tab. 8321987</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW805" title="Refactoring"></a><h5 class="jump">Refactoring</h5><ul class="ul"><li class="li"><p>You can refactor Interface Builder and Core Data model files. 7474053</p></li><li class="li"><p>After selecting an entire word in the source editor, Xcode was not always able to perform refactoring transformations. 8349889</p></li><li class="li"><p>You can perform refactoring transformations on key-value coding and Core Data methods. 8224495</p></li><li class="li"><p>You can rename classes, protocols, and other top-level constructs only when the new name is not in use by another construct of the same type. 8313803</p></li><li class="li"><p>Xcode notifies you of refactoring errors and warnings in the workspace window. 8128957</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW806" title="Compiling"></a><h5 class="jump">Compiling</h5><ul class="ul"><li class="li"><p>Catching exceptions in optimized fragile-ABI Objective-C code no longer resets modifications to local variables. 8160285</p></li><li class="li"><p>Eliminated crash in Objective-C exception rethrow. 8144203</p></li><li class="li"><p>Fixed bugs in blocks in C++ and Objective-C++ code.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW807" title="Known Issues"></a><h4 class="jump">Known Issues</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW808" title="General"></a><h5 class="jump">General</h5><ul class="ul"><li class="li"><p>Interface Builder files with explicit Xcode 3 file types open in the source editor instead of in Interface Builder.</p><p>Set the file type of the Interface Builder file in the Identity and Type inspector to “Default,” deselect it in the project navigator, and select it again. 8028406</p></li><li class="li"><p>Absolute paths in General preferences &gt; Build Location &gt; “Shared subfolder” generate an assertion failure when opening projects.</p><p>Specify a relative path for “Shared subfolder” in General preferences, or set Build Location to the recommended value. 8368913</p></li><li class="li"><p>The task log viewer is empty when you select the last build task of a project or workspace in the log navigator and the viewer is set to show only recent operations.</p><p>Set the task log viewer to show all operations. 8350930</p></li><li class="li"><p>The Extract transformation is not supported. 7711619</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW809" title="Searching"></a><h5 class="jump">Searching</h5><ul class="ul"><li class="li"><p><strong>Search navigator:</strong> Xcode may crash in the replace preview dialog of the search navigator when all the found instances are selected and you click Replace. 8091532</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW810" title="Editing Core Data Model Files"></a><h5 class="jump">Editing Core Data Model Files</h5><ul class="ul"><li class="li"><p>When you create <code>NSManagedObject</code> subclasses from entities in a Core Data data model, Xcode overwrites existing files without a confirmation dialog. 8506607</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW811" title="Editing Nib Files"></a><h5 class="jump">Editing Nib Files</h5><ul class="ul"><li class="li"><p><strong>Refactoring:</strong> Xcode does not refactor Cocoa bindings. 8423815</p></li><li class="li"><p>Xcode cannot edit OS X–type Interface Builder documents comprised of objects from frameworks other than AppKit.</p><p>You can compile and run these documents, however. 7470836</p></li><li class="li"><p>Hidden views are invisible in the Interface Builder canvas.</p><p>To work with these views, select them in the jump bar or the outline view. 8059339</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW812" title="Refactoring"></a><h5 class="jump">Refactoring</h5><ul class="ul"><li class="li"><p>Xcode does not create a snapshot of your workspace before performing a refactoring transformation.</p><p>Create manual snapshots before performing refactoring transformations. 7816256</p></li><li class="li"><p><strong>Editing nib files:</strong> The Rename transformation may not work properly action methods in Interface Builder documents when the action’s target is the first responder or the method is declared in a category, protocol, or a superclass of the given class. 8500272</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW813" title="Building"></a><h5 class="jump">Building</h5><ul class="ul"><li class="li"><p>Xcode doesn’t use a new build location after you change General preferences &gt; Build Location.</p><p>Close and reopen open projects and workspaces after changing the build location. 7965261</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW814" title="Source Control and Snapshots"></a><h5 class="jump">Source Control and Snapshots</h5><ul class="ul"><li class="li"><p>Xcode doesn’t recognize SCP-based URLs for Git repositories in the Repositories organizer.</p><p>Use the SSH-based URLs. For example, instead of <code>git@example.com:/myrepositoryname.git</code> use <code>ssh://git@example.com/myrepositoryname.git</code>. 8044145</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW815" title="Help and Documentation Content"></a><h5 class="jump">Help and Documentation Content</h5><ul class="ul"><li class="li"><p>These help books are not listed on the Xcode Application Help page (Help &gt; Xcode Application Help): <em>Interface Builder Help</em>, <em>Task and Session Log Viewer Help</em>, <em>Symbol Navigator Help</em>, and <em>Xcode Concepts</em>.</p><p>Search for these titles in the Help menu or in the search navigator in the documentation organizer. 8481951,8518802</p></li><li class="li"><p>The list of help topics in a help book doesn’t appear when accessing help books in the documentation organizer, instead the book’s first help topic appears.</p><p>Use the jump bar to navigate to the other help topics in the book. 8430699</p></li></ul></section></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW816" title="Xcode 4.0 Developer Preview 3"></a><h3 class="jump">Xcode 4.0 Developer Preview 3</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW817" title="About Xcode 4 Developer Preview 3"></a><h4 class="jump">About Xcode 4 Developer Preview 3</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW818" title="Supported Configurations"></a><h5 class="jump">Supported Configurations</h5><p>Xcode 4 developer preview 3 requires OS X v10.6.4. It does not install or run on earlier versions of OS X. </p><p>Xcode supports universal development for iOS 4.1 and 3.2 and OS X v10.5 and later. It does not support development for iOS 3.1 or earlier or OS X v10.4 or earlier.</p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW819" title="Installation"></a><h5 class="jump">Installation</h5><p>Xcode 4 developer preview 3 is installed by default into the <code>/Xcode4</code> directory and does not conflict with an existing installation of Xcode 3.2.</p><div class="importantbox clear"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_110" title="Important"></a><p><strong>Important:</strong>&nbsp;Several features of Xcode 4, such as the Snapshot mechanism, support for the Git SCM system, and System Trace instrumentation in Instruments, require tools that are installed by the System Tools package. This package is installed by default in Xcode 4 developer preview 3.</p><p></p></aside></div><p>The installer optionally installs Unix tools into <code>/usr</code>, so conventional makefile-based and config-based builds operate correctly. Use the <code>xcode-select</code> command-line utility to set the default toolset for command-line builds. If you choose this option when installing Xcode 4, Xcode 4 Unix tools replace the Xcode 3.2 Unix tools in <code>/usr</code>. This does not effect the functionality of any Xcode 3.2 installations.</p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW820" title="Project File Format Compatibility and Versioning"></a><h5 class="jump">Project File Format Compatibility and Versioning</h5><p>Xcode 4 reads and builds projects created in Xcode 2.1 through 3.2.3. Projects created and edited with Xcode 4 can be opened and built on Xcode 3.2 through 3.2.3.</p><div class="importantbox clear"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_111" title="Important"></a><p><strong>Important:</strong>&nbsp;Once a project or workspace has been opened with Xcode 4 developer preview 3, do not use that project or workspace with previous Xcode 4 developer previews.</p><p></p></aside></div></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW821" title="Technical Support and Learning Resources"></a><h5 class="jump">Technical Support and Learning Resources</h5><p>Apple offers a number of resources where you can get Xcode development support:</p><ul class="ul"><li class="li"><p><span class="content_text"><a href="http://developer.apple.com" class="browserLink" >http://developer.apple.com</a></span>: The Apple Developer website is the best source for up-to-date technical documentation on iOS and OS X.</p></li><li class="li"><p><span class="content_text"><a href="http://developer.apple.com/technologies/tools/" class="browserLink" >http://developer.apple.com/technologies/tools/</a></span>: The Xcode home page on the Apple Developer website provides information on the developer tools.</p></li><li class="li"><p><span class="content_text"><a href="https://forums.developer.apple.com/" class="urlLink" rel="external">https://forums.developer.apple.com/</a></span>: The Apple Developer Forums feature a dedicated Developer Forum for Xcode 4 Developer Previews.</p></li></ul><p>Use <span class="content_text"><a href="http://bugreport.apple.com" class="urlLink" rel="external">http://bugreport.apple.com</a></span> to communicate issues with Apple. Include detailed information of the issue, including the system and developer tools version information, and any relevant crash logs or console messages.</p><p>To send comments or feedback on the Xcode Tools suite to Apple, use <span class="content_text"><a href="mailto:xcode-feedback@group.apple.com" class="urlLink" rel="external">xcode-feedback@group.apple.com</a></span>.</p></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW822" title="New Features"></a><h4 class="jump">New Features</h4><dl class="termdef">	<dt><strong>Viewing all Xcode 4 activity</strong> (7966729)</dt><dd><p>When using Xcode 4, there are times when multiple activities may be active. When this happens, the activity view displays the number of activities in a badge. Clicking on the badge shows the full list of activities currently active.</p></dd><dt><strong>Code completion redesign</strong> (7764985)</dt><dd><p>The user interface and interaction of code completion has been redesigned to be responsive, predictable, and less intrusive with a refreshed appearance.</p></dd><dt><strong>Using jump bar menus from the keyboard</strong> (6964063)</dt><dd><p>All the primary menus in the jump bar are accessible via control-# key combinations, where the number increases following UI elements from the left to the right.</p><div class="tableholder"><table class="graybox" border = "0" cellspacing="0" cellpadding="5"><tr><th scope="col" class="TableHeading_TableRow_TableCell"><p>Jump bar item</p></th><th scope="col" class="TableHeading_TableRow_TableCell"><p>Key combination</p></th></tr><tr><td  scope="row"><p>Related files</p></td><td ><p>Control-1</p></td></tr><tr><td  scope="row"><p>Previous history</p></td><td ><p>Control-2</p></td></tr><tr><td  scope="row"><p>Next history</p></td><td ><p>Control-3</p></td></tr><tr><td  scope="row"><p>First item of path control</p></td><td ><p>Control-4</p></td></tr><tr><td  scope="row"><p>Files item of path control</p></td><td ><p>Control-5</p></td></tr><tr><td  scope="row"><p>Symbols item of path control</p></td><td ><p>Control-6</p></td></tr><tr><td  scope="row"><p>Jump bar Issue navigator, if present</p></td><td ><p>Control-7</p></td></tr></table></div></dd><dt><strong>Key combinations for navigation between Assistant editor panes</strong> (8273438)</dt><dd><p>Xcode 4 developer preview 3 features new commands for moving keyboard focus between top level areas or the user interface:</p><ul class="termdef"><li class="termdef"><p>To move focus to the next area in the window (clockwise), use command-option-K</p></li><li class="termdef"><p>To move focus to the previous area in the window (counter-clockwise), use command-option-shift-K</p></li></ul></dd><dt><strong>Text manipulation commands available for source editor</strong> (7854915)</dt><dd><p>Two new text manipulation commands have now been added to the Editor &gt; Structure menu: Move line up/down and Comment/Uncomment lines.</p></dd><dt><strong>Running a process using a custom UI scale</strong> (8135779)</dt><dd><p>You can now set a scheme to launch its executable using a custom UI scale.</p></dd><dt><strong>Preferences for controlling build products location</strong> (8281332)</dt><dd><p>Preferences for specifying where build products should be placed by default have been added. A shared subfolder can now be specified to make all projects place their build products in the same directory. These preferences can be overridden for a project or workspace in File &gt; Project Settings/Workspace Settings.</p></dd><dt><strong>Editing IB documents that include objects from frameworks outside of App Kit</strong> (7493346)</dt><dd><p>With Xcode 4 developer preview 3, you can edit documents that contain objects from frameworks outside of App Kit. Note that editing documents containing Automator objects is not currently supported.</p></dd><dt><strong>Effects attributes of objects in IB editor</strong> (7470883)</dt><dd><p>Properties modified using the Effects inspector in Interface Builder 3 are now editable in the IB editor in Xcode 4.</p></dd><dt><strong>Preliminary support for the Rename refactoring transformation</strong> (8372774)</dt><dd><p>The Rename refactoring transformation is now available. It is invoked via the Edit menu or the contextual menu in the source editor.</p><p>Support for Refactoring operations in Xcode 4 developer preview 3 is preliminary. These issues are outstanding:</p><ul class="termdef"><li class="termdef"><p>Transformations other than Rename are not supported. (7711619)</p></li><li class="termdef"><p>Errors and warnings generated by the refactoring engine are not visible in the UI. (8128957)</p></li><li class="termdef"><p>Refactoring does not yet work with nib and Core Data model files. Changes to these files must be made manually. (7474053)</p></li><li class="termdef"><p>Xcode does not yet take a snapshot of your workspace before refactoring source files. These must be created manually, if desired. (7816256)</p></li><li class="termdef"><p>Renaming KVC/Core Data methods and related files is not yet available. Such changes must be made manually, if desired. (8224495)</p></li><li class="termdef"><p>The refactoring engine does not yet disallow renaming classes, protocols, and other top-level constructs if the requested name is already used by a construct of the same type. (8313803)</p></li><li class="termdef"><p>Selecting a file in the jump bar that is not one of the files being changed by refactoring leads to a crash. (8337919)</p></li></ul></dd></dl></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW823" title="Known issues in Xcode 4 Developer Preview 3"></a><h4 class="jump">Known issues in Xcode 4 Developer Preview 3</h4><p>Xcode 4 developer preview 3 is pre-release software. File bugs at <span class="content_text"><a href="http://bugreport.apple.com" class="urlLink" rel="external">http://bugreport.apple.com</a></span> for performance and stability issues, data loss or file corruption, missing or unimplemented features, behavioral or aesthetic issues, and feature and enhancement requests. Provide as much context as possible, especially crash logs or samples, detailed Steps to Reproduce, and projects or workspaces when possible. </p><p>These problems are already known in this release:</p><dl class="termdef">	<dt><strong>Documentation organizer requires updated documentation</strong> (8354991)</dt><dd><p>After installing Xcode 4 developer preview 3 over a previous Xcode 4 developer preview, the Documentation organizer may not show the documentation you are looking for.</p><p>Workaround: In the Documentation preferences, press the Get button next to Xcode 4.0 Developer Tools Library. This downloads the latest version of that documentation set.</p></dd><dt><strong>Connect to source code from IB documents does not insert counterparts</strong> (8082047)</dt><dd><p>When inserting an outlet or action using connect to source code in IB documents, the counterparts for the connection are not added.</p><ul class="termdef"><li class="termdef"><p>Actions: When dragging to a header file, the implementation is not inserted.</p></li><li class="termdef"><p>Outlets: When dragging to a header to insert a property outlet, the needed instance variable, @synthesize, and release call in dealloc are not added.</p></li></ul></dd><dt><strong>Warnings when building after editing a IB document</strong> (8131479)</dt><dd><p>If you edit an IB document and then build a project, false-positive warnings may appear for the IB document. </p><p>Workaround: Make sure the project has finished indexing before saving IB documents to avoid these warnings. Re-save any files that have warnings after the project has finished indexing to remove the warnings.</p></dd><dt><strong>Hidden property makes views disappear in IB editor</strong> (8059339)</dt><dd><p>Views marked as hidden are completely invisible in the Interface Builder editor. </p><p>Workaround: To work with these views, selected them in the Jump Bar or document outline view.</p></dd><dt><strong>Syntax coloring and code sense features can fail in some files</strong> (8360261)</dt><dd><p>Some source files may not get full syntax coloring, code completion, and fix-it hints. Also, Jump to Definition may not work. </p><p>Workaround: Save the file to index it.</p></dd><dt><strong>IB documents appear as source</strong> (8028406)</dt><dd><p>IB documents with explicit Xcode 3 file types open in the Source editor instead of the Interface Builder editor. </p><p>Workaround: Set the file type for the selected file in the Type and Identity inspector's File Type field to Default, then close and re-open the document.</p></dd><dt><strong>Last build log restored from previous session appears empty</strong> (8350930)</dt><dd><p>When you open a workspace or project that has been built before, the information about the last build is shown in the Log navigator. If you load this log, it may appear empty if you have the log viewer's scope bar set to show Recent log entries only. </p><p>Workaround: Switch to showing All log content.</p></dd><dt><strong>Shared build location preference requires a path relative to the derived data location</strong> (8368913)</dt><dd><p>If you choose to have all projects and workspaces build into a common subfolder using the Build Location setting in General preferences, you must specify a relative subpath within the derived data folder. Specifying an absolute path is not a valid choice, but the UI does not signal this as an error. Instead, when you open projects, Xcode shows an assertion failure. </p><p>Workaround: specify a relative path for the build location or to change back to the default settings.</p></dd><dt><strong>Editing IB documents with objects from plugins</strong> (7470836)</dt><dd><p>Xcode 4 supports iOS-type IB documents and OS X-type IB documents composed of App Kit objects. OS X-type documents composed of objects from other frameworks, such as Address Book, Automator, and 3rd party IB plugins, are not supported in the IB editor. Although these documents cannot be edited with the IB editor, they can be compiled, built, and run.</p></dd><dt><strong>SCP-style URLs for Git repositories are not supported</strong> (8044145)</dt><dd><p>The Repositories organizer does not support SCP-style URLs when configuring Git repositories. Use the ssh:// style of URL to refer to a repository you wish to clone. </p><p>For example, the URL <code>git@example.com:/myrepositoryname.git</code> should be provided as <code>ssh://git@example.com/myrepositoryname.git</code>.</p></dd><dt><strong>Crash when replacing all search results.</strong> (8091532)</dt><dd><p>In the Search Navigator's Preview sheet, replacing results when all search results are selected can cause Xcode to crash.</p></dd><dt><strong>Changes to the build products location do not take effect while a project is open.</strong> (7965261)</dt><dd><p>After changing the location where build products are placed, any open projects or workspaces must be closed and re-opened before the change takes effect.</p></dd></dl></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW824" title="Issues Resolved in Xcode 4 Developer Preview 3"></a><h4 class="jump">Issues Resolved in Xcode 4 Developer Preview 3</h4><p>These issues where present in Xcode 4 developer preview 2 or earlier and have been resolved in Xcode 4 developer preview 3.</p><dl class="termdef">	<dt><strong>iOS applications run with Instruments launch in iPad Simulator</strong> (8203761)</dt><dd><p>Running an iOS 4 application with Instruments in the iOS simulator now results in the Simulator launching in iPhone device mode.</p></dd><dt><strong>Out-of-sync selections in data model files</strong> (8289611)</dt><dd><p>Adding entities and attributes to data model files no longer leads to selection becoming out-of-sync until the document was reloaded.</p></dd><dt><strong>Data models edited in previous Xcode 4 developer preview</strong> (8320417)</dt><dd><p>Data models edited with previous Xcode 4 developer previews need to revert changes due to possible data corruption.</p></dd><dt><strong>Console output from iOS Simulator applications</strong> (8201210)</dt><dd><p>Console output to standard out from iOS applications running in the iOS simulator appear as expected.</p></dd><dt><strong>Deleting top level objects in IB documents</strong> (8114740)</dt><dd><p>Top level objects in IB documents can now be directly deleted from the canvas and dock.</p></dd><dt><strong>Changing object attributes doesn't properly resize objects to fit</strong> (7600085)</dt><dd><p>An object changes size automatically when modifying an attribute that requires the change. Using Editor &gt; Size to Fit to workaround is no longer needed.</p></dd><dt><strong>Connect to source code for IB documents now supports outlet collections</strong> (8045078)</dt><dd><p>When making connections to source code in IB documents, connecting to outlet collections is now supported.</p></dd><dt><strong>Support for editing accessibility values for iOS objects </strong> (7986412)</dt><dd><p>The IB editor now supports editing accessibility values for iOS objects. </p></dd><dt><strong>Navigator filter results don't update as the items to filter changed</strong> (7722840)</dt><dd><p>Filtering in navigators now produces live results. For example, when filtering the contents of the Project navigator by SCM status, the list of items updates as the SCM status of individual files changes. </p></dd><dt><strong>Workspace window and tab state lost if Xcode is force quit or quits unexpectedly. </strong> (7773437)</dt><dd><p>The layout of a workspace window including the open tabs, navigator and inspector positioning and visibility, selected navigator rows, current document, and editor mode are normally all saved when Xcode 4 quits or the workspace is closed. In Xcode 4 developer preview 3, state is also be saved periodically while you work and navigate between files.</p></dd><dt><strong>Projects claim to use multiple SDKs</strong> (8128405)</dt><dd><p>The project navigator no longer claims projects with multiple targets use multiple SDKs when all targets use the same SDK.</p></dd><dt><strong>Issues opening projects with cyclic references</strong> (8226072)</dt><dd><p>An issue with opening projects with cyclic references (A-&gt;B, B-&gt;A) has been resolved.</p></dd><dt><strong>Persistence of IB editor's object dock mode</strong> (8232638)</dt><dd><p>The IB editor's dock now persists its mode when switching between documents.</p></dd><dt><strong>Textual filter settings in navigators stuck</strong> (8183815)</dt><dd><p>The text for navigator filtering stays cleared.</p></dd><dt><strong>Version editor jump bar out of sync with file shown</strong> (8198690)</dt><dd><p>At times the jump bar in the Version editor was out of sync with the document shown.</p></dd><dt><strong>The source editor shows a full contextual menu</strong> (7473795)</dt><dd><p>Some items that had been missing from the source editor contextual menu have now been added.</p></dd><dt><strong>Syntax coloring of shell scripts and xcconfig files</strong> (7600899)</dt><dd><p>Shell scripts and <code>xcconfig</code> files support syntax coloring in Xcode's source code editor.</p></dd></dl></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW825" title="Issues Resolved in Xcode 4 Developer Preview 2"></a><h4 class="jump">Issues Resolved in Xcode 4 Developer Preview 2</h4><p>These issues where present in Xcode 4 developer preview and have been resolved in Xcode 4 developer preview 2.</p><dl class="termdef">	<dt><strong>Snapshots available as alert action</strong> (7945417)</dt><dd><p>Snapshot creation is available as an alert action in Alerts preferences.</p></dd><dt><strong>Default build directory for all projects and workspaces</strong> (8073463)</dt><dd><p>General preferences includes settings for the default locations to use for derived data (such as build results, logs and indices), snapshots, and archives. Settings made in the Project or Workspace Settings of individual projects or workspaces override the app-level setting.
</p></dd><dt><strong>Broken file references</strong> (8085921)</dt><dd><p>A number of issues were resolved that allow Xcode 4 to resolve references that were previously broken.</p></dd><dt><strong>Issues identifying appropriate run destinations for targets</strong> (8165363)</dt><dd><p>Issues that caused some iOS targets to appear as Mac targets with "Intel 32-bit" as its run destination and some multi-architecture Mac OS targets to only be offered as "Intel 32-bit" have been resolved.</p></dd><dt><strong>Indexing issues on case sensitive file systems</strong> (7950730)</dt><dd><p>A situation where IB documents blocked indexing in case sensitive file systems has been resolved.</p></dd></dl><dl class="termdef">	<dt><strong>IB editor crash with table view image cells</strong> (8118050)</dt><dd><p>A crash within the IB editor when loading an IB document with a table view containing a image cell column has been resolved.</p></dd><dt><strong>Filtering objects in IB document outline view</strong> (7880130)</dt><dd><p>The filter field in the IB editor's document outline view filters objects in the Objects outline view based upon their label.</p></dd><dt><strong>Speed improvements when dragging objects in IB documents</strong> (8088222)</dt><dd><p>Dragging objects in Interface Builder documents is improved and does not pause.</p></dd><dt><strong>Options when connecting to source code from IB documents</strong> (8095283)</dt><dd><p>When connecting to source code to insert an outlet or action, the configuration panel includes options for outlets and actions, such as retain/assign for property outlets.</p></dd><dt><strong>IB editor requires IBAction return type</strong></dt><dd><p>Previous releases of Interface Builder accepted many method signatures as valid actions. The IB editor in Xcode 4 strictly identifies IBActions and only accepts methods with return types explicitly tagged as <code>- (IBAction)</code>.</p></dd><dt><strong>Manually defined actions and outlets need to be defined in source</strong></dt><dd><p>Actions and outlets defined manually in previous releases of Interface Builder's inspectors and library but not redefined in source code are not recognized by Xcode 4.</p></dd></dl></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW826" title="Functionality No Longer Supported in Xcode"></a><h4 class="jump">Functionality No Longer Supported in Xcode</h4><p>The following features and functionality have been removed from Xcode. When substitute functionality is available, it is noted.</p><ul class="ul"><li class="li"><p>Layout modes</p></li><li class="li"><p>Class Browser. Use the Symbol Navigator and Class Navigation menu in the Editor.</p></li><li class="li"><p>Active Target/Configuration/Architecture/SDK/Executable toolbar items and Project menu entries. Configure a Launch Scheme for a particular combination of target/configuration/architecture/SDK/executable that is useful to you using the Scheme toolbar popup.</p></li><li class="li"><p>Bookmarks</p></li><li class="li"><p>Favorites bar</p></li><li class="li"><p>Detail views</p></li><li class="li"><p>Class model</p></li><li class="li"><p>Touch an individual file</p></li><li class="li"><p>Recent Files menu item in the File menu. The Navigation buttons have a list of recent files. Also, use the filter in the Project Navigator to show all recently-viewed files in the project or workspace.</p></li><li class="li"><p>Support for External Editors</p></li><li class="li"><p>Worksheet (Control-R) execution of shell script commands in text documents</p></li><li class="li"><p>Predictive Compilation (generally replaced by Fix-It Hints)</p></li><li class="li"><p>Fix and Continue</p></li><li class="li"><p>Breakpoint navigation menu in Navigator bar</p></li><li class="li"><p>Editing and compiling AppleScript .scpt files</p></li><li class="li"><p>Perforce and CVS source code management</p></li><li class="li"><p>Dock Icon Menu of open Xcode windows (in Snow Leopard, press and hold on the Dock tile to see all Xcode windows)</p></li><li class="li"><p>Editing Carbon nib files. Xcode 4 supports building Carbon xib and nib files; use Interface Builder 3.2 to edit them.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW827" title="Xcode 4.0 Developer Preview 2"></a><h3 class="jump">Xcode 4.0 Developer Preview 2</h3><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW828" title="About Xcode 4 Developer Preview 2"></a><h4 class="jump">About Xcode 4 Developer Preview 2</h4><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW829" title="Supported Configurations"></a><h5 class="jump">Supported Configurations</h5><p>Xcode 4 Developer Preview 2 requires OS X v10.6.4. It does not install or run on earlier versions of OS X. </p><p>Xcode supports universal development for iOS 4 and 3.2 and OS X v10.5 and later. It does not support development for iOS 3.1 or earlier or OS X v10.4 or earlier.</p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW830" title="Installation"></a><h5 class="jump">Installation</h5><p>Xcode 4 Developer Preview 2 is installed by default into the <code>/Xcode4</code> directory and does not conflict with an existing installation of Xcode 3.2.</p><div class="importantbox clear"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_112" title="Important"></a><p><strong>Important:</strong>&nbsp;Several features of Xcode 4, such as the Snapshot mechanism, support for the Git SCM system, and System Trace instrumentation in Instruments, require tools that are installed by the System Tools package. You must check the <strong>System Tools</strong> check box when installing Xcode 4 in order to use the these features. It is recommended that you restart your Mac after installing System Tools.</p><p></p></aside></div><p>The installer optionally installs Unix tools into <code>/usr</code>, so conventional makefile-based and config-based builds operate correctly. Use the <code>xcode-select</code> command-line utility to set the default toolset for command-line builds. If you choose this option when installing Xcode 4, Xcode 4 Unix tools replace the Xcode 3.2 Unix tools in <code>/usr</code>. This does not effect the functionality of any Xcode 3.2 installations.</p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW831" title="Project File Format Compatibility and Versioning"></a><h5 class="jump">Project File Format Compatibility and Versioning</h5><p>Xcode 4 reads and builds projects created in Xcode 2.1 through 3.2.3. Projects created with Xcode 4 can be opened and built on Xcode 3.2 through 3.2.3.</p><p>Opening and building a project in Xcode 4 does not upgrade or alter it. Changes you make to a project in Xcode 4 are compatible with earlier versions of Xcode.</p></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW832" title="Technical Support and Learning Resources"></a><h5 class="jump">Technical Support and Learning Resources</h5><p>Apple offers a number of resources where you can get Xcode development support:</p><ul class="ul"><li class="li"><p><span class="content_text"><a href="http://developer.apple.com" class="browserLink" >http://developer.apple.com</a></span>: The Apple Developer website is the best source for up-to-date technical documentation on iOS and OS X.</p></li><li class="li"><p><span class="content_text"><a href="http://developer.apple.com/technologies/tools/" class="browserLink" >http://developer.apple.com/technologies/tools/</a></span>: The Xcode home page on the Apple Developer website provides information on the developer tools.</p></li><li class="li"><p><span class="content_text"><a href="https://forums.developer.apple.com/" class="urlLink" rel="external">https://forums.developer.apple.com/</a></span>: The Apple Developer Forums feature a dedicated Developer Forum for Xcode 4 Developer Previews.</p></li></ul><p>Use <span class="content_text"><a href="http://bugreport.apple.com" class="urlLink" rel="external">http://bugreport.apple.com</a></span> to communicate issues with Apple. Include detailed information of the issue, including the system and developer tools version information, and any relevant crash logs or console messages.</p><p>To send comments or feedback on the Xcode Tools suite to Apple, use <span class="content_text"><a href="mailto:xcode-feedback@group.apple.com" class="urlLink" rel="external">xcode-feedback@group.apple.com</a></span>.</p></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW833" title="Known issues in Xcode 4 Developer Preview 2"></a><h4 class="jump">Known issues in Xcode 4 Developer Preview 2</h4><p>Xcode 4 Developer Preview is pre-release software. File bugs at <span class="content_text"><a href="http://bugreport.apple.com" class="urlLink" rel="external">http://bugreport.apple.com</a></span> for performance and stability issues, data loss or file corruption, missing or unimplemented features, behavioral or aesthetic issues, and feature and enhancement requests. Provide as much context as possible, especially crash logs or samples, detailed Steps to Reproduce, and projects or workspaces when possible. </p><p>These problems are already known in this release:</p><dl class="termdef">	<dt><strong>Installer packages visible on Xcode 4 Developer Preview 2 disk image</strong> (8209023)</dt><dd><p>When mounting the Xcode 4 Developer Preview 2 disk image, a <code>Packages</code> folder is visible. Installing packages from within this folder is not supported. Use the <code>Xcode and iOS SDK</code> package to install Xcode 4 Developer Preview 2.</p></dd><dt><strong>iOS applications run with Instruments launch in iPad Simulator</strong> (8203761)</dt><dd><p>Running an iOS 4 application with Instruments in the iOS simulator results in the Simulator launching in iPad device mode instead of iPhone device mode.</p></dd><dt><strong>Console output from iOS Simulator applications</strong> (8201210)</dt><dd><p>Console output to standard out from iOS applications running in the iOS simulator does not appear until each call is new-line terminated or the application is quit.</p></dd><dt><strong>SCP-style URLs for Git repositories are not supported</strong> (8044145)</dt><dd><p>The Repositories organizer does not support SCP-style URLs when configuring Git repositories. Use the ssh:// style of URL to refer to a repository you wish to clone. </p><p>For example, the URL <code>git@mycompanyname.beanstalkapp.com:/myrepositoryname.git</code> should be provided as <code>ssh://git@mycompanyname.beanstalkapp.com/myrepositoryname.git</code>.</p></dd><dt><strong>Version editor Jump Bar out of sync with file shown</strong> (8198690)</dt><dd><p>At times the Jump Bar in the Version editor is out of sync with the document shown. </p><p>Workaround: Navigate away from and back to the file in the Version editor to refresh the data.</p></dd><dt><strong>Documentation organizer requires updated documentation</strong> (8205933)</dt><dd><p>Documentation viewed in the organizer may be missing its table of contents or its contents are not navigable via the Jump Bar. </p><p>Workaround: Download the latest documentation, go to the Documentation preferences and click Check and Install Now.</p></dd><dt><strong>Crash when making connections using connections HUD</strong> (8197402)</dt><dd><p>Control-clicking an element and attempting to drag a connection crashes Xcode then next time any file is saved.</p><p>Workaround: Use the connections inspector or connect-to-code with the Assistant editor to make connections.</p></dd><dt><strong>Effects attributes of objects in IB editor</strong> (7470883)</dt><dd><p>Properties modified using the Effects inspector in Interface Builder 3 are not editable in Xcode 4.</p></dd><dt><strong>Attributes on objects in IB documents require size-to-fit</strong> (7600085)</dt><dd><p>Some changes to attributes of objects in IB files require that the object is properly sized-to-fit after making the change, but these objects do not automatically size-to-fit. </p><p>Workaround: Select the control in the design canvas and choose Editor &gt; Size to Fit.</p></dd><dt><strong>Outlet collections for connect to source code from IB documents</strong> (8045078)</dt><dd><p>When making connections to source code in Interface Builder documents, connecting to outlet collections is not supported.</p></dd><dt><strong>Connect to source code from IB documents does not insert counterparts</strong> (8082047)</dt><dd><p>When inserting an outlet or action using connect to source code in IB documents, the counterparts for the connection are not added.</p><ul class="termdef"><li class="termdef"><p>Actions: When dragging to a header file, the implementation is not inserted.</p></li><li class="termdef"><p>Outlets: When dragging to a header to insert a property outlet, the needed instance variable, <code>@synthesize</code>, and release call in dealloc are not added.</p></li></ul></dd><dt><strong>Hidden property makes views disappear in IB editor</strong> (8059339)</dt><dd><p>Views marked as hidden are completely invisible in the Interface Builder editor. </p><p>Workaround: To work with these views, selected them in the Jump Bar or document outline view.</p></dd><dt><strong>IB documents appear as source</strong> (8028406)</dt><dd><p>IB documents with explicit Xcode 3 file types open in the Source editor instead of the Interface Builder editor. </p><p>Workaround: Reset the file type for the selected file in the "Type and Identity" file inspector's "File Type" pop up button to "Default," then close and re-open the document.</p></dd><dt><strong>Editing IB documents with objects from plugins</strong> (7470836)</dt><dd><p>Xcode 4 supports iOS-type IB documents and OS X-type IB documents composed of App Kit objects. OS X-type documents composed of objects from other frameworks, such as Address Book, Automator, and 3rd party IB plugins, are not supported in the IB editor. Although these documents cannot be edited with the IB editor, they can be compiled, built, and run.</p></dd><dt><strong>Warnings when building after editing a IB document</strong> (8131479)</dt><dd><p>If you edit an IB document and then build a project, warnings may appear for the IB document. Most likely, these warnings are false-positives. </p><p>Workaround: Make sure the project has finished indexing before saving IB documents to avoid these warnings. Re-save any files that have warnings after the project has finished indexing to remove the warnings.</p></dd></dl></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW834" title="Issues Resolved in Xcode 4 Developer Preview 2"></a><h4 class="jump">Issues Resolved in Xcode 4 Developer Preview 2</h4><p>These issues where present in Xcode 4 Developer Preview and have been resolved in Xcode 4 Developer Preview 2.</p><dl class="termdef">	<dt><strong>Snapshots available as alert action</strong> (7945417)</dt><dd><p>Snapshot creation is available as an alert action in Alerts preferences.</p></dd><dt><strong>Default build directory for all projects and workspaces</strong> (8073463)</dt><dd><p>General preferences includes settings for the default locations to use for derived data (such as build results, logs and indices), snapshots, and archives. Settings made in the Project or Workspace Settings of individual projects or workspaces override the app-level setting.
</p></dd><dt><strong>Broken file references</strong> (8085921)</dt><dd><p>A number of issues were resolved that allow Xcode 4 to resolve references that were previously broken.</p></dd><dt><strong>Issues identifying appropriate run destinations for targets</strong> (8165363)</dt><dd><p>Issues that caused some iOS targets to appear as Mac targets with "Intel 32-bit" as its run destination and some multi-architecture Mac OS targets to only be offered as "Intel 32-bit" have been resolved.</p></dd><dt><strong>Indexing issues on case sensitive file systems</strong> (7950730)</dt><dd><p>A situation where IB documents blocked indexing in case sensitive file systems has been resolved.</p></dd></dl><dl class="termdef">	<dt><strong>IB editor crash with table view image cells</strong> (8118050)</dt><dd><p>A crash within the IB editor when loading an IB document with a table view containing a image cell column has been resolved.</p></dd><dt><strong>Filtering objects in IB document outline view</strong> (7880130)</dt><dd><p>The filter field in the IB editor's document outline view filters objects in the Objects outline view based upon their label.</p></dd><dt><strong>Speed improvements when dragging objects in IB documents</strong> (8088222)</dt><dd><p>Dragging objects in Interface Builder documents is improved and does not pause.</p></dd><dt><strong>Options when connecting to source code from IB documents</strong> (8095283)</dt><dd><p>When connecting to source code to insert an outlet or action, the configuration panel includes options for outlets and actions, such as retain/assign for property outlets.</p></dd><dt><strong>IB editor requires IBAction return type</strong></dt><dd><p>Previous releases of Interface Builder accepted many method signatures as valid actions. The IB editor in Xcode 4 strictly identifies IBActions and only accepts methods with return types explicitly tagged as <code>- (IBAction)</code>.</p></dd><dt><strong>Manually defined actions and outlets need to be defined in source</strong></dt><dd><p>Actions and outlets defined manually in previous releases of Interface Builder's inspectors and library but not redefined in source code are not recognized by Xcode 4.</p></dd></dl></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW835" title="Functionality No Longer Supported in Xcode"></a><h4 class="jump">Functionality No Longer Supported in Xcode</h4><p>The following features and functionality have been removed from Xcode. When substitute functionality is available, it is noted.</p><ul class="ul"><li class="li"><p>Layout modes</p></li><li class="li"><p>Class Browser. Use the Symbol Navigator and Class Navigation menu in the Editor.</p></li><li class="li"><p>Active Target/Configuration/Architecture/SDK/Executable toolbar items and Project menu entries. Configure a Launch Scheme for a particular combination of target/configuration/architecture/SDK/executable that is useful to you using the Scheme toolbar popup.</p></li><li class="li"><p>Bookmarks</p></li><li class="li"><p>Favorites bar</p></li><li class="li"><p>Detail views</p></li><li class="li"><p>Class model</p></li><li class="li"><p>Touch an individual file</p></li><li class="li"><p>Recent Files menu item in the File menu. The Navigation buttons have a list of recent files. Also, use the filter in the Project Navigator to show all recently-viewed files in the project or workspace.</p></li><li class="li"><p>Support for External Editors</p></li><li class="li"><p>Worksheet (Control-R) execution of shell script commands in text documents</p></li><li class="li"><p>Predictive Compilation (generally replaced by Fix-It Hints)</p></li><li class="li"><p>Fix and Continue</p></li><li class="li"><p>Breakpoint navigation menu in Navigator bar</p></li><li class="li"><p>Editing and compiling AppleScript .scpt files</p></li><li class="li"><p>Perforce and CVS source code management</p></li><li class="li"><p>Dock Icon Menu of open Xcode windows (in Snow Leopard, press and hold on the Dock tile to see all Xcode windows)</p></li><li class="li"><p>Editing Carbon nib files. Xcode 4 supports building Carbon xib and nib files; use Interface Builder 3.2 to edit them.</p></li></ul></section></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW836" title="Xcode 4.0 Developer Preview 1"></a><h3 class="jump">Xcode 4.0 Developer Preview 1</h3><p>Xcode 4 is a major version of the Xcode toolset. It requires OS X v10.6.3 and does not run on previous versions of OS X.</p><div class="importantbox clear"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_113" title="Important"></a><p><strong>Important:</strong>&nbsp;These Release Notes cover important information for transitioning from Xcode 3.2 to Xcode 4. To learn more about changes in the development workflow, read Xcode 4 User Guide. </p><p>The following Release Notes pertain to the WWDC 2010 Developer Preview of Xcode 4 only.</p><p></p></aside></div><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW837" title="General"></a><h4 class="jump">General</h4><ul class="ul"><li class="li"><p><em class="newTerm">Supported Configurations</em></p><p>Xcode 4 runs on OS X v10.6.3. It does not install or run on earlier versions of OS X. Xcode supports universal development for iPhone OS 4 and 3.2 and OS X v10.4 and later. It does not support development for OS X v10.3 or earlier or iPhone OS 3.1 or earlier.</p></li><li class="li"><p><em class="newTerm">Xcode Installation</em></p><p>Xcode 4 Developer Preview is installed by default into the <code>/Xcode4</code> directory and does not conflict with an existing installation of Xcode 3.2.</p><div class="importantbox clear"><aside><a name="//apple_ref/doc/uid/TP40001051-CH1-DontLinkElementID_114" title="Important"></a><p><strong>Important:</strong>&nbsp;Several features of Xcode 4, such as the Snapshot mechanism, support for the git SCM system, and System Trace instrumentation in Instruments require tools that are installed by the System Tools package. You must check the <strong>System Tools</strong> check box when installing Xcode 4 in order to use the these features. It is recommended that you restart your Mac after installing System Tools.</p><p></p></aside></div><p>The installer optionally installs Unix tools into <code>/usr</code>, so conventional makefile-based and config-based builds operate correctly. Use the <code>xcode-select</code> command-line utility to set the default toolset for command-line builds. If you choose this option when installing Xcode 4, Xcode 4 Unix tools replace the Xcode 3.2 Unix tools in <code>/usr</code>. This does not effect the functionality of any Xcode 3.2 installations.</p></li><li class="li"><p><em class="newTerm">Project File Format Compatibility and Versioning</em></p><p>Xcode 4 reads and builds projects created in Xcode 2.1 through 3.2.3. Projects created with Xcode 4 can be opened and built on Xcode 3.2 through 3.2.3.</p><p>Opening and building a project in Xcode 4 does not upgrade or alter it. Changes you make to a project in Xcode 4 are compatible with earlier versions of Xcode.</p><p>User-specific project information for Xcode 4 is stored in new files in the <code>.xcodeproj</code> project wrapper. Xcode 4 ignores and rarely alters the information in Xcode 3.2’s per-user <code>.pbxuser</code> files. </p></li><li class="li"><p><em class="newTerm">User Preferences from Xcode 3.2</em></p><p>For the most part, Xcode 4 neither migrates nor interferes with your user settings from Xcode 3.2, with some exceptions.</p><p>General, Code Sense, Building, Distributed Builds, Debugging, Key Bindings, File Types, Source Trees, and Documentation preferences from Xcode 3.3 are ignored; similar Xcode 4 functionality starts with Xcode 4 defaults. Changing settings in Xcode 4 does not affect your continued use of Xcode 3.2.</p><p>Text Editing, Fonts and Colors, Indentation, and SCM preferences are copied from Xcode 3.2 preferences. Changes made to these preferences with Xcode 4 are not copied back to Xcode 3.2.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW838" title="Major Changes in Xcode 4"></a><h4 class="jump">Major Changes in Xcode 4</h4><ul class="ul"><li class="li"><p><em class="newTerm">Workflow</em></p><p>The Default, Compact, and All-in-One layouts have been replaced by a single Xcode window layout that accommodates everything from a single source file to a multiple interrelated project workspace. Source files, Xcode projects, Interface Builder xibs &amp; nibs, data models, and other files are viewed and edited in the Editor area of the window.</p><p>The left side of the Xcode 4 window shows one of several navigators. The project aviator contains a list of files or projects, and functions like the Groups and Files tree of an Xcode 3.2 project. Other navigators show lists of project symbols; current issues, such as build errors and warnings; results of cross-file Find operations; logs from operations such as building, debugging, or SCM transactions; current breakpoints set in code; or the debug information for the current process. You select an item from the navigator to show its contents for viewing or editing in the Editor.</p><p>Most navigators have a Filter area at the bottom of the navigator that lets you narrow down the contents it displays. This resembles the function of the Filter field in Xcode 3.2’s Detail view. In the project navigator, additional scope buttons allow you to show only recently–accessed files, only currently–modified files, or only files that have interesting SCM status.</p><p>A Utility area on the right shows information about items selected in the navigator or current editor. The top portion of the Utility area features inspectors for the selected item in the navigator or editor. There may be several separate inspectors. The leftmost one usually shows the information about the selected file, while others may show information about the selection within that file. At the bottom of the Utility area is a Library with parts that can be added to a project or file, including file templates, text macros, Interface Builder objects, and media files. </p><p>The navigator and utility areas are opened with the editor in the middle or closed to allow the editor to occupy the entire window.</p><p>The Xcode window supports <em class="newTerm">window tabs</em>, which span the navigator, editor, and Utility areas. Create new tabs for editing different files, or have separate tabs for file navigation, searching, and debugging if you choose.</p><p>You can show multiple editors at the same time, stacked vertically or horizontally. The Assistant editor automatically associates the contents of two editors; for example, the Assistant editor can always show the header file when editing a source file or the source files when browsing through a build log.</p><p>The same project or workspace can be open in multiple windows simultaneously.</p></li><li class="li"><p><em class="newTerm">Workspaces</em></p><p>The main Xcode window contains a workspace. A workspace can be as simple as a single text file or as complex as several dozen interrelated projects. If you open a single project in Xcode 4, it opens as its own workspace. You can create a dedicated workspace that contains multiple files and projects and store its workspace configuration in a separate <code>.xcworkspace</code> file.</p><p>Each workspace manages editing, navigation, building and launching, indexing, snapshots, and SCM for the files and projects in it. In most cases these Xcode 4 workspace functions supersede the behavior of the same project in Xcode 3.2. In some cases, the settings of the Xcode 3.2 project are copied into the Xcode 4 workspace. Changes you make to those settings are isolated to that workspace and do not interfere when the same project is opened in another workspace or in Xcode 3.2.</p></li><li class="li"><p><em class="newTerm">Project Management and Editing</em></p><p>Projects are displayed and edited in the project navigator. The project navigator contains any number or projects, files, or folder references. Add new projects to a workspace with the + button in the Filter area at the bottom of the navigator.</p><p>Within a project, files, groups, and folder references behave just as in Xcode 3.2. Add files to a project with File &gt; New &gt; New File..., with the + button in the Filter area, or by dragging them into the project navigator from the Finder or the Library.</p><p>Project Settings that are found in the Project Inspector in Xcode 3.2 are now located in the Project editor in Xcode 4. The Info tab sets project-wide information (add or delete configurations and localizations, set Deployment Target defaults for all targets) and the Build Settings tab lets you set Project-level Build Settings.</p><p>Targets are not displayed in the project navigator, but instead are available in the project editor. Add or delete targets here, as well as edit target contents. The tabs in the Target Editor are similar to the tabs in the Target Inspector in Xcode 3.2. The Info tab lets you see and change the contents of the target’s Info.plist file visually; the Build tab edits the target’s Build Settings; and the Build Rules tab edits the Build Rules for the target. Add, rearrange, and delete Build Phases, and add or remove target members from Build Phases with drag and drop. Target Dependencies are set in the Build Dependencies build phase. Per-file Compile Flags are set in a column in the Compile Sources build phase. Header Role (project, public, private) is set by dragging header files into subdivisions of the Copy Headers build phase.</p><p>Structural commands on the Project—adding targets, configurations, build phases, localizations—are now located in the Editor menu instead of the Project menu as in Xcode 3.2.</p><p>The Build Settings tabs for both the Project and Target editors are significantly improved from Xcode 3.2. The Build Settings grid now essentially treats Configuration as a build setting condition, so you see values in all configurations simultaneously. The Levels mode also shows Default, Project, and Target settings in columns, so you see exactly where a build setting value comes from. Select multiple targets and see the settings in those targets side-by-side.</p><p>The Build Settings grid has a Basic scope, which shows only the most commonly used settings for a project or target (along with all settings defined at that level). The All scope shows all settings. The filter field filters the build setting list. Build setting names and values are returned as Find Results in the search navigator. </p><p>Changes made in the project editor are stored in the project, not in the workspace. They take effect in any workspace that has that project as a member and also take effect if the project is reopened in Xcode 3.2.</p></li><li class="li"><p><em class="newTerm">Navigation</em></p><p>The Jump Bar across the top of the Editor shows the logical path to the item in the editor. Each part of the path is a pull-down menu to navigate to any other item at that level; the rightmost part allows navigation within the Editor. For source files, for example, this replaces the function pop-up in Xcode 3.2.</p><p>The Navigation popup menu button at the left of the Navigation Arrows allows direct navigation to other files. Its submenus list Recent Files, Unsaved Files, Counterparts, class relationships including Superclass, Siblings, Subclasses, and Categories, and Includes and Included By. These take the place of the buttons in the editor Navigation Bar in Xcode 3.2.</p><p>A split-button control in the toolbar switches among Standard Editor, Assistant Editor, and Version Editor in the Editor area. The Standard Editor shows one editor. The Assistant Editor shows an editor split between two different files; change whether this is horizontal or vertically split with View &gt;Editor &gt; Change Split Orientation (command-shift-0). </p><p>Holding down the option key when navigating to a different file using the Standard Editor’s Jump Bar opens both the current and the selected file in the Assistant Editor.</p><p>The second view in the Assistant Editor tracks the file or selection in the main view. For source files, the second view shows the main counterpart (header or source file) for the file in the main view. For the Log Editor, the second view shows the source file location corresponding to the selected error or warning. For Interface Builder files, the second view shows the header file for the objects selected in the main view. </p><p>The first item in the Jump Bar for an Assistant Editor shows a list of Assistant Categories that lets you control how it tracks the main editor. Choosing Manual allows you to disengage the split editor to show any file, even a different part of the same file. </p><p>The Open Quickly command allows you to open any known file by name, or to the file that defines the given symbol. If a filename is selected, Open Quickly enters that filename so that pressing Enter jumps directly there. Typing the initial letters (or just the capital letters in) a file name or symbol lists all matches; use the arrow keys or mouse to select a file to open.</p><p>Within a file, the Navigate menu in the main menu bar provides navigation commands specific to the editor’s document type.</p></li><li class="li"><p><em class="newTerm">Editors</em></p><p>Xcode 4 includes editors for project files, source code, Interface Builder files, Property List files, Data Model files, Scripting Definitions, and Rich Text files. PDF files are viewable but not editable. HTML and XML files can be edited as text; there is no HTML viewer. All other documents are displayed as previews as in the Finder. In addition, a context menu on every file reference allows it to be opened using a Hex Editor to view and edit the raw file contents.</p><p>Editors for different document types each have custom commands in the Navigate and Editor menus to act on the information in that document type. The terminal item of the Jump Bar allows you to navigate within the document.</p></li><li class="li"><p><em class="newTerm">Editing Source Code</em></p><p>The Source Code Editor supports the major editor functionality of the Xcode 3.2 editor: automatic indenting and formatting, Code Sense code completion with text macro support, code folding, and Code Focus block highlighting. Navigation features in the Source Editor are generally unchanged from Xcode 3.2: command-double click jumps to the symbol’s definition, option-double click shows the Quick Help for a function, etc.</p><p>When your target is set to use the LLVM compiler, the source code editor scans your source text as you type. Syntax errors are marked with a wavy red underscore or a caret at the position of the error, and a symbol in the gutter. Clicking the symbol advises you on the potential syntax error and in many cases offer to repair it automatically.</p><p>Similarly, Edit All in Scope uses information from the LLVM compiler to correctly determine the scope of identifiers to mass-replace.</p></li><li class="li"><p><em class="newTerm">Editing Interface Files</em></p><p>Interface Builder xib and nib files are edited directly in the Xcode editor—the Interface Builder application has been completely integrated into Xcode. When you select an Interface Builder file, the file’s objects appear in a sidebar in the editor, and the objects themselves appear on a canvas when selected. The Interface Builder inspectors and Library are available in the Utility area to the right of the canvas. Instantiate new objects in your IB file by dragging them directly from the Library in the Utility Area onto the canvas.</p><p>Interface Builder files are automatically associated with the project that contains them, so there is no need to synchronize these files and projects between Xcode and IB. Connections are made in the usual way, by using the connections inspector or by control-dragging from one object to another. </p><p>When editing an Interface Builder file with the Assistant Editor, selecting an object opens the object’s corresponding class header in the second pane. Drag connections directly from the object to declarations in the header file.</p><p>Xib/nib-wide properties are edited in the File Inspector for the nib.</p></li><li class="li"><p><em class="newTerm">Editing Data Models</em></p><p>Data model files are edited directly in the Xcode editor. The sidebar shows the list of elements in the model. Using buttons at the bottom of the main editor, choose to display the model in graphic form (as in Xcode 3.2) or in a table view that you sort, search, and filter.</p><p>Attributes of selected data model objects are edited using the Model tab of the Inspector in the Utility Area to the right of the Editor.</p></li><li class="li"><p><em class="newTerm">Editing Property Lists</em></p><p>Property list files are edited directly in the Xcode editor, just as in Xcode 3.2. For known property list types, the Key panel shows a descriptive name of the key instead of the key’s literal text; toggle this view using the Show Raw Keys/Values item in the Editor menu. The raw key value is also available in the QuickHelp inspector.</p></li><li class="li"><p><em class="newTerm">Building</em></p><p>The separate Build and Run menus in Xcode 3.2 have been consolidated into a single Product menu. There are separate commands for Build, Analyze, and Test. The Run command builds if necessary, then executes; Run without Building runs the last built product even if there are unbuilt changes.</p><p>The Active Target, Configuration, SDK, Architecture, and Executable concepts have been consolidated and their individual menu and toolbar items removed. Xcode 4 manages building and launching with <em class="newTerm">schemes</em>. When you open a project, Xcode automatically creates schemes based on the targets, build configurations, and executables in your project. Schemes are used by Xcode 4 and are ignored by Xcode 3.2.</p><p>A <em class="newTerm">launch scheme</em> contains instructions for building one or more targets and its dependencies, then either running tests against the build products or launching an executable. This allows you to encapsulate the logic of your development cycle in a single package and invoke it simply by clicking Run, rather than having to set several different switches in the Overview menu every time you shift development modes.</p><p>All schemes are listed in the Schemes popup in the toolbar (in place of the Overview popup in Xcode 3.2). To build and run, you choose a scheme (and, optionally, a destination that specifies a particular device or architecture supported by that scheme), choose to Enable or Disable Breakpoints, and then click Run. Xcode builds the targets of the scheme in the Build Configuration designated by that scheme, optionally runs Unit Tests on the results, then launches a designated executable with or without breakpoints enabled in order to execute the build product. To build for a different SDK or device, to launch with a different set of environment variables or command-line arguments, or to build a different configuration or different set of targets requires only picking a different scheme from the same menu.</p><p>The Edit Active Scheme item in the Schemes popup allows you to set the attributes of the Build Action of the scheme (configuration and target list), the Test Action (which targets to build and execute for unit testing), and the Launch Action (what debugger to run, under which performance tool, with what runtime settings). The Manage Schemes menu item allows you to create new schemes, remove unused ones, and reorder schemes in the menu. If a scheme is not relevant to your workflow, delete it or uncheck it and it is longer shown in the menu.</p><p>All schemes are stored on a per-user basis in the project or workspace unless the Shared box is checked. Shared schemes are made available to all users of that project or workspace. Use the Container popup to determine which project or workspace the scheme is saved in.</p><p>Once Xcode has determined the targets and dependencies, the build configuration, the architecture and SDK from the choice of Launch Scheme and Destination, building proceeds normally. Xcode builds the designated targets in dependency order, using the build settings determined by the build configuration, for the architectures supported by the destination. It processes the build phases of each target to copy resources, compile sources, link binaries with frameworks, and run shell scripts as needed.</p><p>The progress of the build is shown in the Activity View in the Xcode 4 toolbar and build steps are recorded in a Build Log in the log navigator. Xcode 4 keeps a progressive record of build logs so you can see the results of previous builds. Selecting a build log in the log navigator opens the log in the Standard Editor, where you expand, search, or filter its results using the scope bar and filter buttons. Selecting a build step or issue in the log and switching to the assistant editor shows the corresponding build file in the assistant pane.</p><p>If you care only about build issues and not about the build steps, show the issue navigator. It shows a concise phrasing of each issue, and selecting it navigates the primary editor to the location of the issue. The Filter field is used to show only specific types of issues. Use the jump bar the top right of the editor pane to navigate among current issues.</p></li><li class="li"><p><em class="newTerm">Build Locations</em></p><p>Xcode 4 does not have application-level settings for build directories (that contain intermediate files and build products). Instead, each project or workspace has a Build Location that sets a common directory for all the projects it contains. By default the build location is a unique directory in <code>~/Library/Developer/Xcode/DerivedData/</code> and each project in the workspace has a separate folder in that directory. This means that when you build projects with the same name in two different workspaces (for example, a branch and trunk of the same project), its precompiled headers, indexes, and build products do not conflict with one another.</p><p>Set the Build Locations in the sheet invoked by Project Settings or Workspace Settings in the File menu. The paths set in the Settings sheet control the default values for <code>$(OBJROOT)</code> and <code>$(SYMROOT)</code> (Build Products Path and Intermediate Build Files Path, respectively) when building projects. Any build settings derived from these are affected by the workspace-wide Build Location.</p><p>The common Precompiled Headers Cache Path <code>$(CACHE_ROOT)</code> is now within the project or workspace Build Locations. When using LLVM compiler 2.0, the size of precompiled headers is significantly smaller, and the size and speed advantages of sharing them are less significant.</p></li><li class="li"><p><em class="newTerm">Build Tools</em></p><p>Xcode 4 contains an updated version of the LLVM compiler (LLVM compiler 2.0) which directly supports compilation of C++ and Objective-C++ code without falling back to llvm-gcc. New projects created in Xcode 4 are configured to use LLVM compiler 2.0.</p><p>In this Developer Preview, C++ support in the LLVM compiler 2.0 is not available for iPhone OS. </p><p>llvm-gcc4.2 is now the default system compiler in Xcode 4. Existing projects that don’t have an explicit Compiler Version set and thus build with gcc4.2 on Xcode 3.2 build with llvm-gcc4.2 on Xcode 4.</p><p>GCC 4.0 has been removed from Xcode 4. If your project has an explicit Compiler Version of gcc 4.0, you need to change it in order to build with Xcode 4.</p></li><li class="li"><p><em class="newTerm">Running and Debugging</em></p><p>The active Scheme controls what happens when you choose Run from the Products menu or click the Run button. With a Launch scheme, the Build and Launch actions of the scheme are performed; for a Distribution scheme, the Build and Archive actions are performed. Choose to Build (without Running), Run (without Building), or Build and Test with the menu items in the Product menu.</p><p>As in Xcode 3.2, Xcode always launches executable code by attaching a debugger to it. When you choose to launch with breakpoints deactivated, this adds negligible launch time and no measurable performance impact until the program is interrupted or traps into the debugger. Deactivate breakpoints with the Product menu item, with the button in the toolbar, or as a default in the Scheme Editor. </p><p>In Xcode 4, the <code>gdb</code> debugger and the new <code>lldb</code> debugger are available.</p><p>Additional tabs in the Launch step of the Launch Action allow you to designate launch arguments and environment variables to be used when launching, as well as a set of diagnostic controls for memory management and logging. For example, create a launch action that always runs your executable under Malloc Debug by checking the appropriate check box.</p><p>Launching a process reveals the Debugger Area under the Editor. Show or hide this at any time from the View menu. The Debugger Area has a Variables view and a Console view.</p><p>The Variables view has a Filter bar with a popup to choose to show all symbols, only symbols in the local scope, or an Auto mode that shows values relevant at the current program location. A filter field allows you to narrow down to specific symbols of interest.</p><p>Values are shown in outline form with the identifier, type, raw value, and formatted value in a single line, rather than a multicolumn display. During execution, updated values are displayed in blue. A contextual menu on each value allows you to control its display, print its value to the Console, or open the backing memory for it in a hex editor.</p><p>The Console shows interaction with the debugger or the program’s Standard Input and/or Standard Output. Transcripts of debug sessions are stored in the log navigator and is shown in the main editor area. Xcode 4 keeps a record of debug logs so you can see the proceedings of previous debug sessions.</p><p>The Debugger Bar at the top of the panel has the step controls for program execution, as well as a path control showing the context of the current program counter by thread and stack frame. Stack frames are identified with distinctive icons to identify user, system, framework, and kernel code.</p><p>The Breakpoints navigator shows all breakpoints set in all projects in the workspace. Breakpoints are imported from project user files in Xcode projects added to the workspace, but are stored in workspace user files in Xcode 4. Changes you make to breakpoints in Xcode 4 are not available to other users or workspaces and do not appear when the project is opened in Xcode 3.2.</p><p>Click the breakpoint symbol in the breakpoint navigator to enable or disable it; double-click it to set the breakpoint condition, action, and options.</p><p>The debug navigator shows all active threads in the process. The Stack Compression slider at the bottom reveals or hides redundant or irrelevant stack frames in all threads; the Σ button hides running threads with no frames in your code. Any Memory Viewers you have opened on locations or variables also appear in the debug navigator.</p><p>Breakpoints, the Program Counter bar, Data Tips, and In-Editor Controls appear in the source editor while debugging just as in Xcode 3.2.</p></li><li class="li"><p><em class="newTerm">Debugging Tools</em></p><p>The <code>lldb</code> debugger is new in Xcode 4 and is still under development. While it offers basic functionality in this Developer Preview, it is not fully featured. See the LLVM project page at <span class="content_text"><a href="http://lldb.llvm.org" class="urlLink" rel="external">http://lldb.llvm.org</a></span> for more information on <code>lldb</code>.</p></li><li class="li"><p><em class="newTerm">Packaging and Distribution</em></p><p>Similar to Launch Schemes, a Distribution Scheme is a plan for building one or more targets and running unit tests, but instead of executing the build product, a Distribution Scheme designates an operation for archiving and distributing it. You generally use a Distribution Scheme at milestones in product development, such as posting a nightly build, seeding a preview copy, or shipping your final release.</p><p>A Distribution Scheme has Build and Test actions just like a Launch Scheme, but also has an Archive action that packages the build products in a designated manner. Like Launch Schemes, each action has pre-action and post-action scripts to perform useful tasks at that phase of the operation.</p><p>The Archive step of a Distribution Scheme allows you to choose to archive an application alone, or to package all build products for the scheme into a single disk image (.dmg) file.</p></li><li class="li"><p><em class="newTerm">Indexing</em></p><p>Xcode 4 has an entirely new mechanism for indexing files in a workspace. An index is created for the entire workspace, so references across projects are resolved.</p><p>The indexer now uses the LLVM compiler 2.0 to parse source files. This results in improved performance and higher accuracy; most importantly, the interpretation of symbols for indexing more closely matches the interpretation of syntax at compile time.</p><p>The index is stored in the Index subdirectory of the workspace’s unique directory in <code>~/Library/Developer/Xcode/DerivedData</code>. Manage this information (including deleting the index and other derived data of an orphaned project) in the Organizer.</p><p>Indexing is done in the background; the Activity View indicates when indexing is being performed. Until the index is ready, some functions that require the index may not be available (for example, Open Quickly); others may have degraded performance (for example, syntax coloring of system symbols). When the index is complete these features become available immediately.</p></li><li class="li"><p><em class="newTerm">Snapshots</em></p><p>The Snapshots feature has been reimplemented to be faster and more reliable. Note that you must install the System Tools in the Xcode 4 installer in order to use snapshots.</p><p>Create a snapshot manually or automatically before a Find and Replace operation. The Settings sheet (File &gt; Project Settings) allows you to designate the storage location of the snapshot backing store.</p></li><li class="li"><p><em class="newTerm">SCM</em></p><p>Configuration of SCM repositories is done in the Organizer instead of a preference pane. If you open a project or workspace that was checked out of an SCM system using the command line or another tool, Xcode automatically configures the SCM repository support for that project or workspace.</p><p>Support for git has been added and support for Subversion has been enhanced to support annotations. The git tools are installed when you check the System Tools check box in the Xcode 4 installer. Perforce and CVS Source Code Management systems are no longer supported.</p><p>SCM status is shown as a badge in the project navigator, using the conventional set of mnemonics (U for updated in repository, M for locally modified, A for locally added, D for locally deleted, I for ignored, R for replaced in the Repository). Badges propagate up to the highest container so you see the SCM status of the whole workspace regardless of the disclosure level. An asterisk badge on a container means its contents have mixed status. Detailed SCM status is also available in the SCM area of the File Inspector.</p><p>Selecting any file under SCM control and clicking the Version Editor brings up that file in a side-by-side view. Clicking the Timeline icon in the center column shows a visual timeline of all repository versions; use the sliders to control which side shows which version. If one side is your working copy, you merge changes to it from any repository version using the Version Editor. In Xcode 4, the working copy of a file is on the left.</p><p>Buttons under the Version Editor allow you to show a file comparison and timeline; change logs for the file; or individual change annotations (“blame”) for each line of the file.</p><p>SCM commands are now in the Source Control submenu of the File menu, rather than in a separate SCM menu. The SCM sheet allows you to select individual files for a given SCM action, and preview the differences before you confirm the action.</p><p>Update and commit operations are recorded in the log navigator. By selecting a log you see the individual steps of that operation in the Log Editor.</p></li><li class="li"><p><em class="newTerm">Searching</em></p><p>The find navigator searches the entire workspace. It shows Find Results in text files, property lists, data models, and build settings in projects and targets.</p><p>The magnifying glass icon in the Search field reveals a list of recent searches. Choose Show Find Options to set Textual or Regular Expression search style, whether the search result must contain or match exactly the search term, whether to match or ignore case, and what subset of the workspace or project to search.</p></li><li class="li"><p><em class="newTerm">Status and Activity</em></p><p>An Activity View in the center of the toolbar shows a progress indicator for ongoing activities, and the names of background activities (indexing, checking SCM status) that are also being performed. The Activity View displays “Welcome to Xcode” when Xcode is idle.</p></li><li class="li"><p><em class="newTerm">Alerts</em></p><p>The Alerts preference pane allows you to specify actions that occur when certain operations are initiated or completed. You use this to tailor your workflow, for example, to always show the latest Build Log when you start a build. Triggers include starting and stopping building, testing, launching, searching, or restoring a device; actions include playing sounds, bouncing the dock icon, or executing a script.</p></li><li class="li"><p><em class="newTerm">Organizer</em></p><p>The Xcode Organizer is no longer an arbitrary container for files and folders; that functionality has been moved to the Workspace. It is still the window where you manage iPhone, iPod Touch, and iPad devices. In addition, SCM Repository Management has moved from the Preferences pane to the Organizer, and Developer Documentation has moved from its own window into the Organizer.</p><p>The Organizer also has a new section for Archives, which provides access to the archived applications and disk images created by Distribution Schemes.</p></li><li class="li"><p><em class="newTerm">Key Bindings</em></p><p>Because Xcode 4 has a different menu structure, many Xcode 3.2 menu commands no longer exist in Xcode 4. Some of their menu key bindings have been reassigned to new functions in Xcode 4, and the key bindings of other menu items have been changed to be consistent.</p><div class="tableholder"><table class="graybox" border = "0" cellspacing="0" cellpadding="5"><tr><td  scope="row"><p><strong>Key Binding</strong></p></td><td ><p><strong>Xcode 3.2 Meaning</strong></p></td><td ><p><strong>Xcode 4 Meaning</strong></p></td></tr><tr><td  scope="row"><p>⌘⌥B</p></td><td ><p>Show Breakpoints</p></td><td ><p>Edit and Build Scheme</p></td></tr><tr><td  scope="row"><p>⌃⌘B</p></td><td ><p>Show Model Browser</p></td><td ><p>Build and Analyze</p></td></tr><tr><td  scope="row"><p>⌘⌥C</p></td><td ><p>Copy Style</p></td><td ><p>Commit</p></td></tr><tr><td  scope="row"><p>⌘D</p></td><td ><p>Add Bookmark</p></td><td ><p>Duplicate</p></td></tr><tr><td  scope="row"><p>⌘⇧D</p></td><td ><p>Open Quickly (now ⌘⇧O)</p></td><td ><p>Jump to Definition (equivalent of ⌘-double-click)</p></td></tr><tr><td  scope="row"><p>⌘⇧⌥D</p></td><td ><p>Open This Quickly (now ⌃⌘O)</p></td><td ><p>Unassigned</p></td></tr><tr><td  scope="row"><p>⌘⇧E</p></td><td ><p>Toggle Editor</p></td><td ><p>Use Selection for Replace (was ⌃⌘E)</p></td></tr><tr><td  scope="row"><p>⌃⌘E</p></td><td ><p>Use Selection for Replace (now ⌘⇧E)</p></td><td ><p>Edit All In Scope (was ⌃⌘T)</p></td></tr><tr><td  scope="row"><p>⌘⌥F</p></td><td ><p>Find in Detail</p></td><td ><p>Find and Replace</p></td></tr><tr><td  scope="row"><p>⌘I</p></td><td ><p>Get Info/Show Inspector (now ⌘⌥1)</p></td><td ><p>Step Into (was ⌘⇧I)</p></td></tr><tr><td  scope="row"><p>⌘⇧J</p></td><td ><p>Refactor</p></td><td ><p>Jump to Line (was ⌘L)</p></td></tr><tr><td  scope="row"><p>⌘L</p></td><td ><p>Go to Line (moved to ⌘⇧J)</p></td><td ><p>Reveal in Navigator</p></td></tr><tr><td  scope="row"><p>⌃⌘N</p></td><td ><p>New Empty File</p></td><td ><p>New Workspace</p></td></tr><tr><td  scope="row"><p>⌘⇧O</p></td><td ><p>Step Over (now ⌘P)</p></td><td ><p>Open Quickly (was ⌘⇧D)</p></td></tr><tr><td  scope="row"><p>⌃⌘O</p></td><td ><p>Organizer (now ⌘⇧2) </p></td><td ><p>Open This Quickly (was ⌘⇧⌥D) </p></td></tr><tr><td  scope="row"><p>⌘P</p></td><td ><p>Print</p></td><td ><p>Step Out (was ⌘⇧T)</p></td></tr><tr><td  scope="row"><p>⌘⇧R</p></td><td ><p>Console</p></td><td ><p>Run without Building (was ⌘⌥R)</p></td></tr><tr><td  scope="row"><p>⌘⇧⌥R</p></td><td ><p>Clear Console</p></td><td ><p>Edit Scheme and Run</p></td></tr><tr><td  scope="row"><p>⌘T</p></td><td ><p>Show Fonts</p></td><td ><p>Test</p></td></tr><tr><td  scope="row"><p>⌘⇧T</p></td><td ><p>Step Out (now ⌘P)</p></td><td ><p>Test Without Building</p></td></tr><tr><td  scope="row"><p>⌘⌥U</p></td><td ><p>Ungroup</p></td><td ><p>Update</p></td></tr><tr><td  scope="row"><p>⌘⌥V</p></td><td ><p>Paste Style</p></td><td ><p>Special Paste</p></td></tr><tr><td  scope="row"><p>⌃⌘W</p></td><td ><p>Close Project</p></td><td ><p>Close Current File (was ⌘⇧W)</p></td></tr><tr><td  scope="row"><p>⌘Y</p></td><td ><p>Build and Debug – Breakpoints On</p></td><td ><p>Enable/Disable Breakpoints (was ⌃⌘\)</p></td></tr><tr><td  scope="row"><p>⌃⌘Y</p></td><td ><p>Debug – Breakpoints On</p></td><td ><p>Pause (was ⌘⌥P)</p></td></tr><tr><td  scope="row"><p>⌘0</p></td><td ><p>Project</p></td><td ><p>Hide Navigator</p></td></tr></table></div></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW839" title="Known Missing Functionality in This Release"></a><h4 class="jump">Known Missing Functionality in This Release</h4><p>This Developer Release of Xcode 4 does not implement the following features.</p><ul class="ul"><li class="li"><p>New Untitled File</p></li><li class="li"><p>Compile, Preprocess, Show Assembly Code</p></li><li class="li"><p>Distributed Builds</p></li><li class="li"><p>Refactoring</p></li><li class="li"><p>Specific functionality for Test action in Launch Schemes and Distribution Schemes</p></li><li class="li"><p>Replace in Selected Text</p></li><li class="li"><p>Duplicate for files, folders, and targets</p></li><li class="li"><p>Key binding sets for other editors</p></li><li class="li"><p>User Script menu or editor</p></li><li class="li"><p>xed</p></li><li class="li"><p>Target editing for External (makefile) targets </p></li><li class="li"><p>Editing .nib or .xib files that require custom plug-ins at build time</p></li><li class="li"><p>Target Membership inspector</p></li><li class="li"><p>Connections to custom actions and outlets in iPad interface builder files. Use the Connect to Source Code feature to make these connections.</p></li><li class="li"><p>Searching in Interface Builder files</p></li><li class="li"><p>Creating custom or placeholder objects in iPad Interface Builder documents. Copy and paste an existing placeholder from another document.</p></li><li class="li"><p>Debugging with <code>lldb</code> works with iPhone and iPad apps in the simulator, but not on the device</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW840" title="Known Problems in This Release"></a><h4 class="jump">Known Problems in This Release</h4><p>Xcode 4 Developer Preview is pre-release software. Please file bugs at <span class="content_text"><a href="http://bugreport.apple.com" class="urlLink" rel="external">http://bugreport.apple.com</a></span> for performance and stability issues, data loss or file corruption, missing or unimplemented features, behavioral or aesthetic issues, and feature and enhancement requests. Provide as much context as possible, especially crash logs or samples, detailed Steps to Reproduce, and projects or workspaces when possible. </p><p>These problems are already known in this release:</p><ul class="ul"><li class="li"><p>Duplicating a Localization in the project editor may not work if the project is under SCM control.</p></li><li class="li"><p>Following a link in the Documentation Viewer may cause a crash if the linked document is expected to be in the local documentation set but is missing. 8017277</p></li><li class="li"><p>Clicking a Find Result of a build setting opens the containing project or target, but does not scroll to and select the actual found setting. 7749874</p></li><li class="li"><p>Canceling a build may leave the spinning Progress indicator in the Build item in the log navigator. 7735752</p></li><li class="li"><p>Reveal in Navigator selects the file in the project navigator, but may not scroll it into view. 8003741</p></li><li class="li"><p>Most definitions in Xcode’s scripting dictionary are currently unimplemented. 7948823</p></li><li class="li"><p>The Editor &gt; Add Build Phase menu items are not enabled unless you select a file in a current build phase. Use the Add Build Phase button in the editor. </p></li><li class="li"><p>The Relative to Build Folder, Relative to Developer Folder, Relative to Build Products, and Relative to Path (source tree) reference styles are not shown correctly in the File Inspector and cannot be set in the File Inspector. Values set correctly in existing projects work correctly. Dragging build products between projects in a workspace may not create build product references correctly.</p></li><li class="li"><p>Locked files are generally not handled. The File Inspector usually gives an indication of file locked state, but no attempt is made to prevent or warn about operations on locked files. 7338327</p></li><li class="li"><p>Adding or moving files in a project may not add them to the correct build phase. After adding a file, you should check the target build phase to ensure the file is built by the desired target(s) correctly.</p></li><li class="li"><p>Build files in the Compile Sources phase are displayed in alphabetical order and you cannot change the order. If you add a new file, the build files are saved to the project file in alphabetical order and built in that order. If order is important to building or linking that target, this may cause the build to fail.</p></li><li class="li"><p>“Open These Results As Transcript Text File” is not working. 8041039</p></li><li class="li"><p>Disk images created by a Distribution Scheme are not showing up in the Organizer. </p></li><li class="li"><p>Deleting projects from a workspace may not correctly update schemes that rely on that project’s targets. You may wish to delete and recreate schemes after deleting projects from a workspace. 7901251</p></li><li class="li"><p>In certain circumstances, opening a workspace opens it in two independent windows. 7336838</p></li><li class="li"><p>Arguments and environment variables for a Launch action cannot be reordered. 7909498</p></li><li class="li"><p>If you see XML text instead of the Interface Builder editor for an Interface Builder file, open the Inspector area and set the File Type to “Default,” then close and re-open the document. </p></li><li class="li"><p>Interface Builder objects are not automatically resized to fit their containers after certain operations. Choose Size to Fit from the Editor menu to ensure objects are the correct size.</p></li><li class="li"><p>Views marked “hidden” in an Interface Builder document are not shown in the Interface Builder editor. Choose them from the Jump Bar or Document Outline view.</p></li></ul></section><section><a name="//apple_ref/doc/uid/TP40001051-CH1-SW841" title="Functionality No Longer Supported in Xcode"></a><h4 class="jump">Functionality No Longer Supported in Xcode</h4><p>The following features and functionality have been removed from Xcode. When substitute functionality is available, it is noted.</p><ul class="ul"><li class="li"><p>Layout modes</p></li><li class="li"><p>Class Browser. Use the symbol navigator and Class Navigation menu in the Editor.</p></li><li class="li"><p>Active Target/Configuration/Architecture/SDK/Executable toolbar items and Project menu entries. Configure a Launch Scheme for a particular combination of target/configuration/architecture/SDK/executable that is useful to you using the Scheme toolbar popup.</p></li><li class="li"><p>Bookmarks</p></li><li class="li"><p>Favorites bar</p></li><li class="li"><p>Detail views</p></li><li class="li"><p>Class model</p></li><li class="li"><p>Touch an individual file</p></li><li class="li"><p>Recent Files menu item in the File menu. The Navigation buttons have a list of recent files. Also, use the filter in the project navigator to show all recently-viewed files in the project or workspace.</p></li><li class="li"><p>Support for External Editors</p></li><li class="li"><p>Worksheet (Control-R) execution of shell script commands in text documents</p></li><li class="li"><p>Predictive Compilation (generally replaced by Fix-It Hints)</p></li><li class="li"><p>Fix and Continue</p></li><li class="li"><p>Breakpoint navigation menu in the jump bar</p></li><li class="li"><p>Editing and compiling AppleScript .scpt files</p></li><li class="li"><p>Perforce and CVS source code management</p></li><li class="li"><p>Dock Icon Menu of open Xcode windows (in Snow Leopard, press and hold on the Dock tile to see all Xcode windows)</p></li><li class="li"><p>Editing Carbon nib files. Xcode 4 supports building Carbon xib and nib files; use Interface Builder 3.2 to edit them.</p></li></ul></section></section></section>
    

        <div id="pageNavigationLinks_bottom" class="pageNavigationLinks">
            <a class='nextLink' rel='next' href='RevisionHistory.html'>Next</a>
        </div><br/>
        <div class="copyright"><br/><hr /><div align="center"><p class="content_text" lang="en" dir="ltr"> Copyright &#x00a9; 2018 Apple Inc. All Rights Reserved.  <a href="http://www.apple.com/legal/internet-services/terms/site.html" target="_blank">Terms of Use</a>   |  <a href="http://www.apple.com/privacy/" target="_blank">Privacy Policy</a>  |  Updated: 2018-06-13</p></div></div>

        <div id="pediaWindow">
            <div id="pediaHeader"></div>
            <div id="pediaBody"></div>
        </div>
    </article>

    <div id="blackout">
    <div id="preload"></div>
</div>
<div id="modal" aria-hidden="true">
    <div id="closebox" tabindex="0" aria-label="Close feedback form" role="button"></div>
    <div id="sending" class="hidden">
        <h2 tabindex="0">Sending feedback&hellip;</h2>
        <div id="sending_img"></div>
    </div>
    <div id="error" class="hidden">
        <h2 tabindex="0">We&rsquo;re sorry, an error has occurred.</h2>
        <p>Please try submitting your feedback later.</p>
        <div id="error_icon"></div>
    </div>
    <div id="success" class="hidden">
        <h2 tabindex="0">Thank you for providing feedback!</h2>
        <p>Your input helps improve our developer documentation.</p>
        <div id="thank_you_icon"></div>
    </div>
    
    <form id="feedback" action="#" method="post">
        <div class="left-leaf">
            <h2 id="helpful_title" data-asterisk="a1" tabindex="0">How helpful is this document?</h2>     
            <sup id="a1" class="asterisk" aria-hidden="true">*</sup>

            <div id="star_group" role="radiogroup" aria-required="true">
                <label> 
                    <input class="radio" type="radio" name="helped" value="1" /> 
                    Very helpful
                </label>
                <label> 
                    <input class="radio" type="radio" name="helped" value="2" /> 
                    Somewhat helpful
                </label>
                <label>
                    <input class="radio" type="radio" name="helped" value="3" /> 
                    Not helpful
                </label>
            </div>
        </div>
        <div class="right-leaf">
            <h2>How can we improve this document?</h2>
            <div id="improve" class="checkboxes">
                <label>
                    <input type="checkbox" name="typo" /> 
                    Fix typos or links
                </label>
                <label>
                    <input type="checkbox" name="infoIncorrect" /> 
                    Fix incorrect information
                </label>
                <label>
                    <input type="checkbox" name="needs_examples" /> 
                    Add or update code samples
                </label>
                <label>
                    <input type="checkbox" name="needs_art" /> 
                    Add or update illustrations
                </label>
                <label>
                    <input type="checkbox" name="missingInfo" /> 
                    Add information about...
                </label>
            </div>
        </div>

        <textarea id="comment" name="problem" cols="70" rows="8" placeholder="Please tell us more about your experience with this document" data-asterisk="a2" required></textarea>
        <sup id="a2" class="asterisk" aria-hidden="true">*</sup>

        <p class="fineprint">
            <em aria-hidden="true"><span>*</span> Required information</em>
        </p> 

        <input id="submit" type="button" value="Send" />

        <section id="legal">
            <p>
                To submit a product bug or enhancement request, please visit the 
                <a href="https://developer.apple.com/bugreporter/" target="_blank">Bug Reporter</a> 
                page.
            </p>
            <p>
                Please read <a href="http://www.apple.com/legal/policies/ideas.html" target="_blank">Apple's Unsolicited Idea Submission Policy</a> 
                before you send us your feedback.
            </p> 
        </section>
    </form>
</div>

    
    <script charset="utf-8" src="../../../../Resources/1282/JavaScript/lib/prototype.js"></script>
    <script src="../../../../Resources/1282/JavaScript/library.js"></script>
</body>
</html>
