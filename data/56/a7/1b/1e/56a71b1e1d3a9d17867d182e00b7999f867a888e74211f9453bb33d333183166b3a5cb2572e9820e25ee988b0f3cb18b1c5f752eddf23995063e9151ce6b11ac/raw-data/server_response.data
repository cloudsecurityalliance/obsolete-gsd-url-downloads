
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>
Issue 30458: [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699) - Python tracker

</title>
<link rel="shortcut icon" href="@@file/favicon.ico" />
<link rel="stylesheet" type="text/css" href="@@file/main.css" />
<link rel="stylesheet" type="text/css" href="@@file/style.css" />
<link rel="search" type="application/opensearchdescription+xml" href="@@file/osd.xml" title="Python bug tracker search" />
<meta http-equiv="Content-Type"
      content="text/html; charset=utf-8" />

<script nonce="c5f88b8041476c2c29569137af2227742eb80872cf2d74fc00d1a69ab56d94b4" type="text/javascript">
submitted = false;
function submit_once() {
    if (submitted) {
        alert("Your request is being processed.\nPlease be patient.");
        return false;
    }
    submitted = true;
    return true;
}

function help_window(helpurl, width, height) {
    HelpWin = window.open('https://bugs.python.org/' + helpurl, 'RoundupHelpWindow', 'scrollbars=yes,resizable=yes,toolbar=no,height='+height+',width='+width);
    HelpWin.focus ()
}
</script>


<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"></script>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.15/jquery-ui.js"></script>
<script type="text/javascript" src="@@file/issue.item.js"></script>
<link rel="stylesheet" type="text/css" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/smoothness/jquery-ui.css" />


</head>
<body>
  <!--  Logo  -->
  <h1 id="logoheader">
    <a accesskey="1" href="." id="logolink">
       <img src="@@file/python-logo.gif" alt="homepage" border="0" id="logo" /></a>
  </h1>

<div id="utility-menu">
<!-- Search Box -->
<div id="searchbox">
    <form name="searchform" method="get" action="issue" id="searchform">
      <div id="search">
       <input type="hidden" name="@columns"
              value="id,activity,title,creator,assignee,status,type" />
       <input type="hidden" name="@sort" value="-activity" />
       <input type="hidden" name="@filter" value="status" />
       <input type="hidden" name="@action" value="searchid" />
       <input type="hidden" name="ignore" value="file:content" />
       <input class="input-text" id="search-text"
              name="@search_text" size="10" />
       <input type="submit" id="submit" value="search" name="submit" class="input-button" />
       <input type="radio" name="status"
              id="status_notresolved" value="-1,1,3" />
       <label for="status_notresolved">open</label>
       <input type="radio" name="status" checked="checked"
              id="status_all" value="-1,1,2,3" />
       <label for="status_all">all</label>
      </div>
     </form>
</div>
</div>


<div id="left-hand-navigation">
<!--  Main Menu NEED LEVEL TWO HEADER AND FOOTER -->
<div id="menu">
  <ul class="level-one">
    <li><a href="https://www.python.org/" title="Go to the Python homepage">Python Home</a></li>
    <li><a href="https://www.python.org/about/" title="About The Python Language">About</a></li>
    <li><a href="https://www.python.org/blogs/" title="">News</a></li>
    <li><a href="https://www.python.org/doc/" title="">Documentation</a></li>
    <li><a href="https://www.python.org/downloads/" title="">Downloads</a></li>
    <li><a href="https://www.python.org/community/" title="">Community</a></li>
    <li><a href="https://www.python.org/psf/" title="Python Software Foundation">Foundation</a></li>
    <li><a href="https://devguide.python.org/" title="Python Developer's Guide">Developer's Guide</a></li>
    <li class="selected"><a href="." class="selected" title="Python Issue Tracker">Issue Tracker</a>
      <ul class="level-two">
        <li>
          <strong>Issues</strong>
          <ul class="level-three">
            
            <li><a href="issue?@template=search&amp;status=1">Search</a></li>
            <li><a href="issue?@action=random">Random Issue</a></li>
            <li>
              <form method="post" action="issue30458">
                <input type="submit" class="form-small"
                       value="Show issue:" />
                <input class="form-small" size="4" type="text" name="@number" />
                <input type="hidden" name="@type" value="issue" />
                <input type="hidden" name="@action" value="show" />
              </form>
            </li>
          </ul>
        </li>


        <li>
          <strong>Summaries</strong>
          <ul class="level-three">
            

            

            

            <li>
              <a href="issue?status=1&amp;@sort=-activity&amp;@columns=id%2Cactivity%2Ctitle%2Ccreator%2Cstatus&amp;@dispname=Issues%20with%20patch&amp;@startwith=0&amp;@group=priority&amp;keywords=2&amp;@action=search&amp;@filter=&amp;@pagesize=50">Issues with patch</a>
            </li>

            <li>
              <a href="issue?status=1&amp;@sort=-activity&amp;@columns=id%2Cactivity%2Ctitle%2Ccreator%2Cstatus&amp;@dispname=Easy%20issues&amp;@startwith=0&amp;@group=priority&amp;keywords=6&amp;@action=search&amp;@filter=&amp;@pagesize=50">Easy issues</a>
            </li>

            <li>
              <a href="issue?@template=stats">Stats</a>
            </li>

          </ul>
        </li>


        <li>
          <strong>User</strong>
          <form method="post" action="issue30458">
          <ul class="level-three">
            <li>
                Login&nbsp;(OpenID&nbsp;possible)<br />
	         <a style="display:inline;width:0;margin:0"
             href="issue30458?@action=oic_login&amp;provider=Google">
                  <img hspace="0" vspace="0" width="16"
                       height="16"
                       src="https://www.google.com/favicon.ico"
                       alt="Google" title="Google" /></a>
	         <a style="display:inline;width:0;margin:0"
             href="issue30458?@action=oic_login&amp;provider=GitHub">
                  <img hspace="0" vspace="0" width="16"
                       height="16"
                       src="https://www.github.com/favicon.ico"
                       alt="GitHub" title="GitHub" /></a>
	         <a style="display:inline;width:0;margin:0"
             href="issue30458?@action=openid_login&amp;provider=Launchpad">
                  <img hspace="0" vspace="0" width="16"
                       height="16"
                       src="https://launchpad.net/favicon.ico"
                       alt="Launchpad" title="Launchpad" /></a>
                <input size="10" name="openid_identifier" style="background:url(@@file/openid-16x16.gif)
                  center left no-repeat;padding-left:16px" /><br />
                <input size="10" type="password" name="__login_password" /><br />
                <input type="hidden" name="@action" value="Login" />
                <input type="checkbox" name="remember" id="remember" />
                <label for="remember">Remember me?</label><br />
                <input class="form-small" type="submit"
                       value="Login" /><br />
                <input type="hidden" name="__came_from"
                       value="https://bugs.python.org/issue30458?">
                
                <input type="hidden" name="@sort" value=""/>
<input type="hidden" name="@group" value=""/>
<input type="hidden" name="@pagesize" value="50"/>
<input type="hidden" name="@startwith" value="0"/>
            </li>
            <li>
                <a href="user?@template=register">Register</a>
            </li>
            <li><a href="user?@template=forgotten">Lost&nbsp;your&nbsp;login?</a></li>
          </ul>
          </form>
        </li>

        

        

        <li>
          <strong>Administration</strong>
          <ul class="level-three">
            
            <li>
                <a href="user?@sort=username">User List</a></li>
            <li>
                <a href="user?iscommitter=1&amp;@action=search&amp;@sort=username&amp;@pagesize=300">Committer List</a></li>
            
            
            
          </ul>
        </li>

        <li>
          <strong>Help</strong>
          <ul class="level-three">
            <li><a href="http://docs.python.org/devguide/triaging.html">
                Tracker Documentation</a></li>
            <li><a href="http://wiki.python.org/moin/TrackerDevelopment">
                Tracker Development</a></li>
            <li><a href="https://github.com/python/psf-infra-meta/issues">
                Report Tracker Problem</a></li>
          </ul>
        </li>

      </ul>
    </li>
  </ul>
</div> <!-- menu -->
</div> <!-- left-hand-navigation -->

<div id="content-body">
<div id="body-main">
<div id="content">
<div id="breadcrumb">
 
 
 Issue30458
 
</div>
 
 





<div>

<form method="post" name="itemSynopsis"
      onsubmit="return submit_once()"
      enctype="multipart/form-data" action="issue30458">

<fieldset><legend>classification</legend>
<table class="form">
<tr>
 <th class="required"><a href="http://docs.python.org/devguide/triaging.html#title" target="_blank">Title</a>:</th>
 
 <td colspan="3">
  <span>[security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)</span>
  <input type="hidden" name="title"
         value="[security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)">
 </td>
</tr>

<tr>
 <th class="required"><a href="http://docs.python.org/devguide/triaging.html#type" target="_blank">Type</a>:</th>
 <td>security</td>
 <th><a href="http://docs.python.org/devguide/triaging.html#stage" target="_blank">Stage</a>:</th>
 <td>resolved</td>
</tr>

<tr>
 <th><a href="http://docs.python.org/devguide/triaging.html#components" target="_blank">Components</a>:</th>
 <td>Library (Lib)</td>
 <th><a href="http://docs.python.org/devguide/triaging.html#versions" target="_blank">Versions</a>:</th>
 <td>Python 3.9, Python 3.8, Python 3.7, Python 3.6, Python 3.5, Python 2.7</td>
</tr>
</table>
</fieldset>

<fieldset><legend>process</legend>
<table class="form">
<tr>
  <th><a href="http://docs.python.org/devguide/triaging.html#status" target="_blank">Status</a>:</th>
  <td>closed</td>
  <th><a href="http://docs.python.org/devguide/triaging.html#resolution" target="_blank">Resolution</a>:</th>
  <td>fixed</td>
</tr>

<tr>
 <th>
    <a href="http://docs.python.org/devguide/triaging.html#dependencies"
       target="_blank">Dependencies</a>:
 </th>
 <td>
  
  
 </td>
 <th><a href="http://docs.python.org/devguide/triaging.html#superseder" target="_blank">Superseder</a>:</th>
 <td>
  
 
 </td>
 </tr>
 <tr>
 <th>
   <a href="http://docs.python.org/devguide/triaging.html#assigned-to"
      target="_blank">Assigned To</a>:
 </th>
 
 <td>
  
 </td>
 <th>
   <a href="http://docs.python.org/devguide/triaging.html#nosy-list"
      target="_blank">Nosy List</a><!--
        <span tal:condition="context/nosy_count" tal:replace="python: ' (%d)' % context.nosy_count" /> -->:
 </th>
 <td>
     benjamin.peterson, cstratak, gregory.p.smith, jaraco, larry, lukasz.langa, martin.panter, miss-islington, ned.deily, orange, rschiron, serhiy.storchaka, vstinner, ware, xiang.zhang, xtreak
     
 </td>
</tr>
<tr>
 <th>
   <a href="http://docs.python.org/devguide/triaging.html#priority"
      target="_blank">Priority</a>:
 </th>
 <td>deferred blocker</td>
 <th>
    <a href="http://docs.python.org/devguide/triaging.html#keywords"
       target="_blank">Keywords</a>:
 </th>
 <td>patch, security_issue</td>


</tr>









</table>
</fieldset>

</form>

<p>Created on <strong>2017-05-24 15:01</strong> by <strong>orange</strong>, last changed <strong>2019-12-09 03:10</strong> by <strong>gregory.p.smith</strong>. This issue is now <strong style="color:#00F; background-color:inherit;">closed</strong>.</p>



<table class="files">
 <tr><th class="header" colspan="4">Pull Requests</th></tr>
 <tr>
  <th>URL</th>
  <th>Status</th>
  <th>Linked</th>
  <th>Edit</th>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/12755" title="bpo-30458: Disallow control chars in http URLs.">PR 12755</a></td>
  <td>merged</td>
  <td>
   <span>gregory.p.smith</span>,
   <span>2019-04-10 09:11</span>
  </td>
  <td>
    
  </td>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/13032" title="bpo-30458: Disable https related urllib tests on a build without ssl">PR 13032</a></td>
  <td>merged</td>
  <td>
   <span>xtreak</span>,
   <span>2019-05-01 06:50</span>
  </td>
  <td>
    
  </td>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/13044" title="bpo-30458: Use InvalidURL instead of ValueError.">PR 13044</a></td>
  <td>merged</td>
  <td>
   <span>gregory.p.smith</span>,
   <span>2019-05-01 20:10</span>
  </td>
  <td>
    
  </td>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/13154" title="[3.7] bpo-30458: Disallow control chars in http URLs. (GH-12755)">PR 13154</a></td>
  <td>merged</td>
  <td>
   <span>hroncok</span>,
   <span>2019-05-07 14:32</span>
  </td>
  <td>
    
  </td>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/13155" title="[3.6] bpo-30458: Disallow control chars in http URLs. (GH-12755)">PR 13155</a></td>
  <td>merged</td>
  <td>
   <span>hroncok</span>,
   <span>2019-05-07 14:50</span>
  </td>
  <td>
    
  </td>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/13207" title="[3.5] bpo-30458: Disallow control chars in http URLs. (GH-12755)">PR 13207</a></td>
  <td>merged</td>
  <td>
   <span>hroncok</span>,
   <span>2019-05-08 18:41</span>
  </td>
  <td>
    
  </td>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/13315" title="[2.7] bpo-30458: Disallow control chars in http URLs. (GH-12755) (GH-13154)">PR 13315</a></td>
  <td>merged</td>
  <td>
   <span>vstinner</span>,
   <span>2019-05-14 15:04</span>
  </td>
  <td>
    
  </td>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/12524" title="">PR 12524</a></td>
  <td>closed</td>
  <td>
   <span>push0ebp</span>,
   <span>2019-05-29 12:14</span>
  </td>
  <td>
    
  </td>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/11768" title="">PR 11768</a></td>
  <td>closed</td>
  <td>
   <span>matrixise</span>,
   <span>2019-05-29 12:15</span>
  </td>
  <td>
    
  </td>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/13771" title="bpo-30458: Disallow control chars in http URLs. (GH-12755)">PR 13771</a></td>
  <td>closed</td>
  <td>
   <span>python-dev</span>,
   <span>2019-06-03 06:15</span>
  </td>
  <td>
    
  </td>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/16321" title="bpo-38216, bpo-36274: Allow subclasses to override validation and encoding behavior">PR 16321</a></td>
  <td>closed</td>
  <td>
   <span>jaraco</span>,
   <span>2019-09-21 08:55</span>
  </td>
  <td>
    
  </td>
 </tr>
</table>





<table class="messages">
 <tr><th colspan="4" class="header">Messages (55)</th></tr>
 
  <tr>
    <th>
     <a href="#msg294360" id="msg294360">msg294360</a> - <a
    href="msg294360">(view)</a></th>
   <th>Author: Orange (orange)</th>
   <th>Date: 2017-05-24 15:01</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Hi, the patch in CVE-2016-5699 can be broke by an addition space.
<a href="http://www.cvedetails.com/cve/CVE-2016-5699/">http://www.cvedetails.com/cve/CVE-2016-5699/</a>
<a href="https://hg.python.org/cpython/rev/bf3e1c9b80e9">https://hg.python.org/cpython/rev/bf3e1c9b80e9</a>
<a href="https://hg.python.org/cpython/rev/1c45047c5102">https://hg.python.org/cpython/rev/1c45047c5102</a>

import urllib, urllib2

urllib.urlopen('<a href="http://127.0.0.1">http://127.0.0.1</a>\r\n\x20hihi\r\n :11211')
urllib2.urlopen('<a href="http://127.0.0.1">http://127.0.0.1</a>\r\n\x20hihi\r\n :11211')</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg295026" id="msg295026">msg295026</a> - <a
    href="msg295026">(view)</a></th>
   <th>Author: Xiang Zhang (xiang.zhang) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-06-02 15:36</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Looking at the code and the previous issue <a class="closed" title="[closed] HTTP header injection in urrlib2/urllib/httplib/http.client (CVE-2016-5699)" href="issue22928">#22928</a>, CRLF immediately followed by a tab or space (obs-fold: CRLF 1*( SP / HTAB )) is a valid part of a header value so the regex deliberately ignore them.

So it looks right to me the url given doesn't raise the same exception as the url without spaces, though the given url seems malformed.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg295067" id="msg295067">msg295067</a> - <a
    href="msg295067">(view)</a></th>
   <th>Author: Martin Panter (martin.panter) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-06-03 07:01</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>You can also inject proper HTTP header fields (or do multiple requests) if you omit the space after the CRLF:

urlopen("<a href="http://localhost:8000/">http://localhost:8000/</a> HTTP/1.1\r\nHEADER: INJECTED\r\nIgnore:")

Data sent to the server:
&gt;&gt;&gt; server = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
&gt;&gt;&gt; server.bind(("localhost", 8000))
&gt;&gt;&gt; server.listen()
&gt;&gt;&gt; [conn, addr] = server.accept()
&gt;&gt;&gt; pprint(conn.recv(300).splitlines(keepends=True))
[b'GET / HTTP/1.1\r\n',
 b'HEADER: INJECTED\r\n',
 b'Ignore: HTTP/1.1\r\n',
 b'Accept-Encoding: identity\r\n',
 b'User-Agent: Python-urllib/3.5\r\n',
 b'Connection: close\r\n',
 b'Host: localhost:8000\r\n',
 b'\r\n']

<a class="open" title="[open] urlopen URL with unescaped space" href="issue14826">Issue 14826</a> is already open about how “urlopen” handles spaces, and there is a patch in <a class="open" title="[open] urllib2 doesn't escape spaces in http requests" href="issue13359">Issue 13359</a> that proposes to also encode newline characters. But if the CRLF or header injection is a security problem, then 2.7 etc could be changed to raise an exception (like <a class="closed" title="[closed] HTTP header injection in urrlib2/urllib/httplib/http.client (CVE-2016-5699)" href="issue22928">Issue 22928</a>), or to do percent encoding.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg306981" id="msg306981">msg306981</a> - <a
    href="msg306981">(view)</a></th>
   <th>Author: Martin Panter (martin.panter) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-11-26 01:04</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Actually, the CRLF + space can be injected via percent encoding, so just dealing with literal CRLFs and spaces wouldn’t be enough. You would have to validate the hostname after it is decoded.

urlopen("<a href="http://127.0.0.1">http://127.0.0.1</a>%0D%0A%20SLAVEOF . . . :6379/")

&gt;&gt;&gt; pprint(conn.recv(300).splitlines(keepends=True))
[b'GET / HTTP/1.1\r\n',
 b'Accept-Encoding: identity\r\n',
 b'Host: 127.0.0.1\r\n',
 b' SLAVEOF . . . :6379\r\n',
 b'Connection: close\r\n',
 b'User-Agent: Python-urllib/2.7\r\n',
 b'\r\n']</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg337970" id="msg337970">msg337970</a> - <a
    href="msg337970">(view)</a></th>
   <th>Author: Karthikeyan Singaravelan (xtreak) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-03-15 06:15</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>See also <a href="https://bugs.python.org/issue36276">https://bugs.python.org/issue36276</a> for a similar report. I think it's better to raise an error instead of encoding CRLF characters in URL similar to headers.

I feel either of the issue and more preferably <a class="closed" title="[closed] [CVE-2019-9740] Python urllib CRLF injection vulnerability" href="issue36276">issue36276</a> closed as a duplicate of this one. Copy of <a href="msg337968">msg337968</a> with reference to details about similar report in golang : 

For reference an exact report on golang repo : <a href="https://github.com/golang/go/issues/30794">https://github.com/golang/go/issues/30794</a> . This seemed to have been fixed in latest golang release 1.12 and commit <a href="https://github.com/golang/go/commit/829c5df58694b3345cb5ea41206783c8ccf5c3ca">https://github.com/golang/go/commit/829c5df58694b3345cb5ea41206783c8ccf5c3ca</a> . The commit introduces a check for CTL characters and throws an error for URLs something similar to Python does for headers now at <a href="https://hg.python.org/lookup/bf3e1c9b80e9">bf3e1c9b80e9</a>.

func isCTL(r rune) bool {
	return r &lt; ' ' || 0x7f &lt;= r &amp;&amp; r &lt;= 0x9f
}

if strings.IndexFunc(ruri, isCTL) != -1 {
	return errors.New("net/http: can't write control character in Request.URL")
}

So below program used to work before go 1.12 setting a key on Redis but now it throws error : 

package main

import "fmt"
import "net/http"

func main() {
	resp, err := http.Get("<a href="http://127.0.0.1:6379">http://127.0.0.1:6379</a>?\r\nSET test failure12\r\n:8080/test/?test=a")
	fmt.Println(resp)
	fmt.Println(err)
}


➜  go version
go version go1.12 darwin/amd64
➜  go run urllib_vulnerability.go
&lt;nil&gt;
parse <a href="http://127.0.0.1:6379">http://127.0.0.1:6379</a>?
SET test failure12
:8080/test/?test=a: net/url: invalid control character in URL

Looking more into the commit there seemed to be a solution towards escaping characters with <a href="https://github.com/golang/go/issues/22907">https://github.com/golang/go/issues/22907</a> . The fix seemed to have broke Google's internal tests [0] and hence reverted to have the above commit where only CTL characters were checked and raises an error. I think this is a tricky bug upon reading code reviews in the golang repo that has around 2-3 reports with a fix committed to be reverted later for a more conservative fix and the issue was reopened to target go 1.13 .

Thanks a lot for the report @ragdoll.guo

[0] <a href="https://go-review.googlesource.com/c/go/+/159157/2#message-39c6be13a192bf760f6318ac641b432a6ab8fdc8">https://go-review.googlesource.com/c/go/+/159157/2#message-39c6be13a192bf760f6318ac641b432a6ab8fdc8</a></pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg339754" id="msg339754">msg339754</a> - <a
    href="msg339754">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-09 14:28</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>The CVE-2019-9740 has been assigned to the <a class="closed" title="[closed] [CVE-2019-9740] Python urllib CRLF injection vulnerability" href="issue36276">bpo-36276</a>:

* <a href="https://nvd.nist.gov/vuln/detail/CVE-2019-9740">https://nvd.nist.gov/vuln/detail/CVE-2019-9740</a>
* <a href="https://bugzilla.redhat.com/show_bug.cgi?id=1692984">https://bugzilla.redhat.com/show_bug.cgi?id=1692984</a>

... which has been marked as a duplicate of this issue.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg339840" id="msg339840">msg339840</a> - <a
    href="msg339840">(view)</a></th>
   <th>Author: Gregory P. Smith (gregory.p.smith) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-10 09:22</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Martin claimed "Actually, the CRLF + space can be injected via percent encoding"

I am unable to reproduce that behavior using urllib.request.urlopen() or urllib.request.URLopener.open() in my master/3.8 tree.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg339846" id="msg339846">msg339846</a> - <a
    href="msg339846">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-10 10:36</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Oh, I didn't recall that this issue (this class of security vulnerabilities) has a so old history. I found *A LOT* of similar open issues. Here are my notes. Maybe most open issues should be closed as duplicate of this one to clarify the status of urllib in Python? :-)

Emails:

* 2019: <a href="https://mail.python.org/pipermail/python-dev/2019-April/157014.html">https://mail.python.org/pipermail/python-dev/2019-April/157014.html</a>
* 2017: <a href="https://mail.python.org/pipermail/python-dev/2017-July/148699.html">https://mail.python.org/pipermail/python-dev/2017-July/148699.html</a>

Open issues:

* 2011, <a class="open" title="[open] urllib2 doesn't escape spaces in http requests" href="issue13359">bpo-13359</a>: "urllib2 doesn't escape spaces in http requests"
  Not marked as a security issue.
* 2012, <a class="open" title="[open] urlopen URL with unescaped space" href="issue14826">bpo-14826</a>: "urlopen URL with unescaped space"
  Fix using quote(self.__original, safe="%/:=&amp;?~#+!$,;'@()*[]|")
  ... and the changed has then be reverted because it broke buildbots.
  Still open.
* 2013, <a class="open" title="[open] urllib.request add_header() currently allows trailing spaces (and other weird stuff)" href="issue17322">bpo-17322</a>: "urllib.request add_header() currently allows trailing spaces (and other weird stuff)"
  Not marked as a security issue.
* 2014, <a class="closed" title="[closed] HTTP header injection in urrlib2/urllib/httplib/http.client (CVE-2016-5699)" href="issue22928">bpo-22928</a>: "HTTP header injection in urrlib2/urllib/httplib/http.client (CVE-2016-5699)"
  Marked as fixed, but user Orange explained in the first comment of  in
  <a class="closed" title="[closed] [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)" href="issue30458">bpo-30458</a> that the fix is incomplete.
* 2017, <a class="closed" title="[closed] [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)" href="issue30458">bpo-30458</a>: "[CVE-2019-9740][security] CRLF Injection in httplib" (this issue)
* 2017, <a class="closed" title="[closed] [Security] A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!" href="issue32085">bpo-32085</a>: "[Security] A New Era of SSRF - Exploiting URL Parser in Trending Programming Languages!"
* 2019, <a class="closed" title="[closed] [CVE-2019-9947] Header Injection in urllib" href="issue35906">bpo-35906</a>: "[CVE-2019-9947] Header Injection in urllib" (another CVE!)

Closed issues:

* 2004, <a class="closed" title="[closed] urllib doesn't correct server returned urls" href="issue918368">bpo-918368</a>: "urllib doesn't correct server returned urls" (urllib)
  FIXED BY: commit <a href="https://hg.python.org/lookup/7c2867fcb1ade429a41e030585332ea26e3f60e1">7c2867fcb1ade429a41e030585332ea26e3f60e1</a>
  Fix: fullurl = quote(fullurl, safe="%/:=&amp;?~#+!$,;'@()*[]")
* 2005, <a class="closed" title="[closed] Http redirection error in urllib2.py" href="issue1353433">bpo-1353433</a>: "Http redirection error in urllib2.py" (urllib2)
  FIXED BY: commit <a href="https://hg.python.org/lookup/ddb84d7c69addc5d5e2ab3e327260d97b52af3a7">ddb84d7c69addc5d5e2ab3e327260d97b52af3a7</a>
  Fix: newurl = newurl.replace(' ', '%20')
* 2005, <a class="closed" title="[closed] http_error_302() crashes with 'HTTP/1.1 400 Bad Request" href="issue1153027">bpo-1153027</a>: "http_error_302() crashes with 'HTTP/1.1 400 Bad Request"
  FIXED BY: commit <a href="https://hg.python.org/lookup/690ce9b353bc0a86d0886470adbaa50e813de3b8">690ce9b353bc0a86d0886470adbaa50e813de3b8</a> (<a href="https://github.com/python/cpython/blob/master/Lib/urllib/request.py">Lib/urllib/request.py</a>)
  Fix: fullurl = quote(fullurl, safe="%/:=&amp;?~#+!$,;'@()*[]")
* <a class="closed" title="[closed] urllib FTP protocol stream injection" href="issue29606">bpo-29606</a>: "urllib FTP protocol stream injection"
  Duplicate of <a class="closed" title="[closed] (ftplib) A remote attacker could possibly attack by containing the newline characters" href="issue30119">bpo-30119</a>.
* <a class="closed" title="[closed] (ftplib) A remote attacker could possibly attack by containing the newline characters" href="issue30119">bpo-30119</a>: "(ftplib) A remote attacker could possibly attack by containing the newline characters"
  FIXED BY: commmit <a href="https://hg.python.org/lookup/8c2d4cf092c5f0335e7982392a33927579c4d512">8c2d4cf092c5f0335e7982392a33927579c4d512</a>
  Fix: reject "\r" and "\n" in FTP.putline() (<a href="https://github.com/python/cpython/blob/master/Lib/ftplib.py">Lib/ftplib.py</a>)
* <a class="closed" title="[closed] [CVE-2019-9740] Python urllib CRLF injection vulnerability" href="issue36276">bpo-36276</a>: "[CVE-2019-9740] Python urllib CRLF injection vulnerability"
  Closed as duplicate of <a class="closed" title="[closed] [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)" href="issue30458">bpo-30458</a>

Rejected pull requests:

* <a href="https://github.com/python/cpython/pull/1216/files">https://github.com/python/cpython/pull/1216/files</a>
  <a class="closed" title="[closed] urllib FTP protocol stream injection" href="issue29606">bpo-29606</a>: Reject "\n" in ftp_open() of <a href="https://github.com/python/cpython/blob/master/Lib/urllib/request.py">Lib/urllib/request.py</a>
* <a href="https://github.com/python/cpython/pull/2800/files">https://github.com/python/cpython/pull/2800/files</a>
  <a class="closed" title="[closed] urllib FTP protocol stream injection" href="issue29606">bpo-29606</a>: Reject "\n" in ftp_open() and open_ftp() of <a href="https://github.com/python/cpython/blob/master/Lib/urllib/request.py">Lib/urllib/request.py</a>
* <a href="https://github.com/python/cpython/pull/2301/files">https://github.com/python/cpython/pull/2301/files</a>
  <a class="closed" title="[closed] Reject newline character (U+000A) in URLs in urllib.parse" href="issue30713">bpo-30713</a>: The splittype(), splitport() and splithost() functions of the
  urllib.parse module now reject URLs which contain a newline character.
* <a href="https://github.com/python/cpython/pull/2303/files">https://github.com/python/cpython/pull/2303/files</a>
  <a class="closed" title="[closed] Reject newline character (U+000A) in URLs in urllib.parse" href="issue30713">bpo-30713</a>: The splittype(), splitport() and splithost() functions of the
  urllib.parse module now reject URLs which contain a newline character, but
  splittype() accepts newlines after the type.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg339848" id="msg339848">msg339848</a> - <a
    href="msg339848">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-10 10:43</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>&gt; * 2019, <a class="closed" title="[closed] [CVE-2019-9947] Header Injection in urllib" href="issue35906">bpo-35906</a>: "[CVE-2019-9947] Header Injection in urllib" (another CVE!)

Gregory P. Smith just marked <a class="closed" title="[closed] [CVE-2019-9947] Header Injection in urllib" href="issue35906">bpo-35906</a> as a duplicate of this issue. Copy of his <a href="msg339842">msg339842</a>:

"""
my fix proposed in <a class="closed" title="[closed] [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)" href="issue30458">issue30458</a> fixes this issue.

i do not think this one deserved its own CVE; at least <a href="https://nvd.nist.gov/vuln/detail/CVE-2019-9947">https://nvd.nist.gov/vuln/detail/CVE-2019-9947</a>'s current text also points to the other one.
"""

Until the status of CVE-2019-9947 is clarified, I added CVE-2019-9947 in the title of this issue to help to better track all CVEs :-)

Did someone contact the CVE organization to do something with CVE-2019-9947?</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg339850" id="msg339850">msg339850</a> - <a
    href="msg339850">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-10 10:45</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>&gt; The CVE-2019-9740 has been assigned to the <a class="closed" title="[closed] [CVE-2019-9740] Python urllib CRLF injection vulnerability" href="issue36276">bpo-36276</a>

I don't know how CVE are assigned. Since this issue started with "the patch in CVE-2016-5699 can be broke by an addition space", would it make sense to reuse CVE-2016-5699 rather than using a new CVE?</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg339851" id="msg339851">msg339851</a> - <a
    href="msg339851">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-10 10:48</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>&gt; Closed issues:

I forgot:

* 2017, <a class="closed" title="[closed] Reject newline character (U+000A) in URLs in urllib.parse" href="issue30713">bpo-30713</a>: "Reject newline character (U+000A) in URLs in urllib.parse"
  Rejected: the ftplib vulnerabilty has been fixed by <a class="closed" title="[closed] (ftplib) A remote attacker could possibly attack by containing the newline characters" href="issue30119">bpo-30119</a>
  with commmit <a href="https://hg.python.org/lookup/8c2d4cf092c5f0335e7982392a33927579c4d512">8c2d4cf092c5f0335e7982392a33927579c4d512</a>.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg339852" id="msg339852">msg339852</a> - <a
    href="msg339852">(view)</a></th>
   <th>Author: Karthikeyan Singaravelan (xtreak) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-10 10:59</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>As @gregory.p.smith noted in GitHub [0] this fixes only protocol level bugs. There are some parsing ambiguities in urllib that are potential security issues still to be fixed.

<a class="open" title="[open] urllib.parse.urlparse() accepts wrong URLs" href="issue20271">issue20271</a> - urllib.urlparse('<a href="http://benign.com">http://benign.com</a>\[attacker.com]') returns attacker.com as hostname . A slightly related issue <a href="https://bugs.python.org/issue20271">https://bugs.python.org/issue20271</a>
<a class="open" title="[open] urlparse library detecting wrong hostname leads to open redirect vulnerability" href="issue35748">issue35748</a> - urllib.urlparse(r'<a href="http://spam">http://spam</a>\eggs!cheese&amp;<a href="mailto:aardvark@evil.com">aardvark@evil.com</a>') returns evil.com as hostname
<a class="open" title="[open] [CVE-2015-2104] Urlparse insufficient validation leads to open redirect" href="issue23505">issue23505</a> - Urlparse insufficient validation leads to open redirect
<a class="open" title="[open] urllib may leak sensitive HTTP headers to a third-party web site" href="issue33661">issue33661</a> - urllib may leak sensitive HTTP headers to a third-party web site (Redirecting from https to http might also pass some headers in plain text. This behavior was changed in requests, golang, Curl that had their own respective CVEs)

As a fun side note this vulnerability was used by one of our own tests as a feature from 2012 to test another security issue (<a class="closed" title="[closed] CVE-2012-0845 Python v2.7.2 / v3.2.2 (SimpleXMLRPCServer): DoS (excessive CPU usage) by processing malformed XMLRPC / HTTP POST request" href="issue14001">issue14001</a>) [1] :) 

[0] <a href="https://github.com/python/cpython/pull/12755#issuecomment-481599611">https://github.com/python/cpython/pull/12755#issuecomment-481599611</a>
[1] <a href="https://github.com/python/cpython/pull/12755#issuecomment-481618741">https://github.com/python/cpython/pull/12755#issuecomment-481618741</a></pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg339853" id="msg339853">msg339853</a> - <a
    href="msg339853">(view)</a></th>
   <th>Author: Martin Panter (martin.panter) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-10 11:28</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Gregory, I haven’t tried recent Python code, but I expect the problem with percent decoding is still there. If you did try my example, what results did you see? Be aware that these techniques only work if the OS co-operates and connects to localhost when you give it the longer host string. At the moment I have glibc 2.26 on x86-64 Linux.

In the Python 3 master branch, the percent-encoding should be decoded in “urllib.request.Request._parse”:

def _parse(self):
    ...
    self.host, self.selector = _splithost(rest)
    if self.host:
        self.host = unquote(self.host)

Then in “AbstractHTTPHandler.do_request_” the decoded host string becomes the “Host” header field value, without any encoding:

def do_request_(self, request):
    host = request.host
    ...
    sel_host = host
    ...
    if not request.has_header('Host'):
        request.add_unredirected_header('Host', sel_host)

Perhaps one solution to both my version and Orange’s original version is to encode the “Host” header field value properly. This might also apply to the “http.client” code.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg339857" id="msg339857">msg339857</a> - <a
    href="msg339857">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-10 12:32</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre><a class="closed" title="[closed] [CVE-2019-9740] Python urllib CRLF injection vulnerability" href="issue36276">bpo-36276</a> has been marked as a duplicate of this issue.

According to the following message, urllib3 is also vulnerable to HTTP Header Injection:
<a href="https://bugs.python.org/issue36276#msg337837">https://bugs.python.org/issue36276#msg337837</a>

Copy of Alvin Chang's <a href="msg337837">msg337837</a>:

"""
I am also seeing the same issue with urllib3 

import urllib3

pool_manager = urllib3.PoolManager()

host = "localhost:7777?a=1 HTTP/1.1\r\nX-injected: header\r\nTEST: 123"
url = "http://" + host + ":8080/test/?test=a"

try:
    info = pool_manager.request('GET', url).info()
    print(info)
except Exception:
    pass

nc -l localhost 7777
GET /?a=1 HTTP/1.1
X-injected: header
TEST: 123:8080/test/?test=a HTTP/1.1
Host: localhost:7777
Accept-Encoding: identity
"""</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg339858" id="msg339858">msg339858</a> - <a
    href="msg339858">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-10 12:35</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>&gt; According to the following message, urllib3 is also vulnerable to HTTP Header Injection: (...)

And the issue has been reported to urllib3:
<a href="https://github.com/urllib3/urllib3/issues/1553">https://github.com/urllib3/urllib3/issues/1553</a>

Copy of the first message:

"""
At <a href="https://bugs.python.org/issue36276">https://bugs.python.org/issue36276</a> there's an issue in Python's urllib that an attacker controlling the request parameter can inject headers by injecting CR/LF chars.

A commenter mentions that the same bug is present in urllib3:
<a href="https://bugs.python.org/issue36276#msg337837">https://bugs.python.org/issue36276#msg337837</a>

So reporting it here to make sure it gets attention.
"""</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg339861" id="msg339861">msg339861</a> - <a
    href="msg339861">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-10 13:03</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Since this issue has a long history and previously attempts to fix it failed, it seems like the Internet is a black or white world, more like a scale of gray... *Maybe* we need to provide a way to allow to pass junk characters in an URL? (disable URL validation)

Idea: add an optional parameter to urllib, httplib, maybe also ftplib, to allow arbitrary "invalid" URLs / FTP commands. It would be a parameter *per request*, not a global option.

I don't propose to have a global configuration option like an environment variable, urllib attribute or something else. A global option would be hard to control and would impact just too much code.

My <a href="https://www.python.org/dev/peps/pep-0433/">PEP 433</a> has been rejected because of the sys.setdefaultcloexec(cloexec: bool) function which allowed to change globally the behavior of Python. The <a href="https://www.python.org/dev/peps/pep-0446/">PEP 446</a> has been accepted with no *global* option to opt-in for the old behavior, but only "local" *per file descriptor*: os.set_inheritable(fd, inheritable).</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg339884" id="msg339884">msg339884</a> - <a
    href="msg339884">(view)</a></th>
   <th>Author: Gregory P. Smith (gregory.p.smith) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-10 19:31</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>&gt; *Maybe* we need to provide a way to allow to pass junk characters in an URL? (disable URL validation)

We should not do this in our http protocol stack code.  Anyone who _wants_ that is already intentionally violating the http protocol which defeats the entire purpose of our library and the parameter named "url".

Will this break something in the world other than our own test_xmlrpc test?  Probably.  Do they have a right to complain about it?  Not one we need listen to.  Such code is doing something that was clearly an abuse of the API.  The parameter was named url not raw_data_to_stuff_subversively_into_the_binary_protocol.  Its intent was clear.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg339894" id="msg339894">msg339894</a> - <a
    href="msg339894">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-10 22:05</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>&gt; Will this break something in the world other than our own test_xmlrpc test?  Probably. Do they have a right to complain about it?  Not one we need listen to.

I understand. But. Can we consider that for old Python versions like Python 2.7 and 3.5?

This change will be applied to all supported Python versions.

I recall that when Python 2.7 started to validate TLS certificate, the change broke some applications. Are these applications badly written? Yes! But well, "it worked well before". Sometimes, when you work in a private network, the security matters less, whereas it might be very expensive to fix a legacy application. At Red Hat, we developed a solution to let customers to opt-out from this fix (to no validate TLS certificates), because it is just too expensive for customers to fix their legacy code but they would like to be able to upgrade RHEL.

One option to not validate URLs is to downgrade Python, but I'm not sure that it's the best compromise :-/</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg340405" id="msg340405">msg340405</a> - <a
    href="msg340405">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-17 15:32</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>It seems like a change has been pushed into urllib3 to fix this issue, but that there is an issue with international URLs and that maybe RFC 3986 should be updated.

RFC 3986: "Uniform Resource Identifier (URI): Generic Syntax" (January 2005)
<a href="https://www.ietf.org/rfc/rfc3986.txt">https://www.ietf.org/rfc/rfc3986.txt</a>

"Without <a class="closed" title="[closed] tarfile.open(fileobj=f) and bad metadata of the first file within the archive" href="issue1531">#1531</a> or IRI support in rfc3986 releasing master in it's current state will break backwards compatibility with international URLs."

<a href="https://github.com/urllib3/urllib3/issues/1553#issuecomment-474046652">https://github.com/urllib3/urllib3/issues/1553#issuecomment-474046652</a>

=&gt; where 1531 means <a href="https://github.com/urllib3/urllib3/pull/1531">https://github.com/urllib3/urllib3/pull/1531</a>

"wave Hi! I've noticed that CVE-2019-11236 has been assigned to the CRLF injection issue described here. It seems that the library has been patched in GitHub, but no new release has been made to pypi. Will a new release containing the fix be made to pypi soon? Based on @theacodes comment it seems like a release was going to be made, but I also see her status has her perhaps unavailable. Is someone else perhaps able to cut a new release into pypi?"

<a href="https://github.com/urllib3/urllib3/issues/1553#issuecomment-484113222">https://github.com/urllib3/urllib3/issues/1553#issuecomment-484113222</a></pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg340407" id="msg340407">msg340407</a> - <a
    href="msg340407">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-17 15:35</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>"wave Hi! I've noticed that CVE-2019-11236 has been assigned to the CRLF injection issue described here. It seems that the library has been patched in GitHub, but no new release has been made to pypi. (...)"

This urllib3 change:
<a href="https://github.com/urllib3/urllib3/commit/0aa3e24fcd75f1bb59ab159e9f8adb44055b2271">https://github.com/urllib3/urllib3/commit/0aa3e24fcd75f1bb59ab159e9f8adb44055b2271</a>

urllib3 now vendors a copy of the rfc3986 library:

<a href="https://pypi.org/project/rfc3986/">https://pypi.org/project/rfc3986/</a></pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg340408" id="msg340408">msg340408</a> - <a
    href="msg340408">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-04-17 15:40</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>&gt; urllib3 now vendors a copy of the rfc3986 library:
&gt; <a href="https://pypi.org/project/rfc3986/">https://pypi.org/project/rfc3986/</a>

There are multiple Python projects to validate URI:

* <a href="https://github.com/python-hyper/rfc3986/">https://github.com/python-hyper/rfc3986/</a> -&gt; <a href="https://pypi.org/project/rfc3986/">https://pypi.org/project/rfc3986/</a>
* <a href="https://github.com/dgerber/rfc3987">https://github.com/dgerber/rfc3987</a> -&gt; <a href="https://pypi.org/project/rfc3987/">https://pypi.org/project/rfc3987/</a> (the name is confusing: the library implements the RFC 3986, not the RFC 3987)
* <a href="https://github.com/tkem/uritools/">https://github.com/tkem/uritools/</a> -&gt; <a href="https://pypi.org/project/uritools/">https://pypi.org/project/uritools/</a></pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg341174" id="msg341174">msg341174</a> - <a
    href="msg341174">(view)</a></th>
   <th>Author: Gregory P. Smith (gregory.p.smith) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-05-01 02:12</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>
New changeset <a href="https://hg.python.org/lookup/c4e671eec20dfcb29b18596a89ef075f826c9f96">c4e671eec20dfcb29b18596a89ef075f826c9f96</a> by Gregory P. Smith in branch 'master':
<a class="closed" title="[closed] [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)" href="issue30458">bpo-30458</a>: Disallow control chars in http URLs. (<a href="https://github.com/python/cpython/pull/12755" class="closed" title="GitHub PR 12755: [merged] bpo-30458: Disallow control chars in http URLs.">GH-12755</a>)
<a href="https://github.com/python/cpython/commit/c4e671eec20dfcb29b18596a89ef075f826c9f96">https://github.com/python/cpython/commit/c4e671eec20dfcb29b18596a89ef075f826c9f96</a>
</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg341175" id="msg341175">msg341175</a> - <a
    href="msg341175">(view)</a></th>
   <th>Author: Gregory P. Smith (gregory.p.smith) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-05-01 02:18</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>backports to older releases will need to be done manually and take care depending on how much of a concern tightening the existing abusive lenient behavior of the http.client API to enforce what characters are allowed in URLs is to stable releases.

I question if this is _really_ worthy of a "security" tag and a CVE (thus its non-high ranking)... it is a bug in the calling program if it blindly uses untrusted data as a URL.  What this issue addresses is that we catch that more often and raise an error; a good thing to do for sure, but the stdlib should be the last line of defense.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg341176" id="msg341176">msg341176</a> - <a
    href="msg341176">(view)</a></th>
   <th>Author: Karthikeyan Singaravelan (xtreak) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-05-01 03:30</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>This causes buildbot failure (AMD64 FreeBSD 10-STABLE Non-Debug 3.x and AMD64 Debian root 3.x). I tried debugging and it's reproducible on my mac machine that has python not built with ssl and not reproducible on Ubuntu machine built with ssl. 

The failed tests use https scheme and as I can see from the file there is one another test (test_cafile_and_context) which is skipped and has skip test if ssl is absent @unittest.skipUnless(ssl, "ssl module required"). It seems perhaps wrapping these machines don't have ssl built with skip test might help. Since primary CI has ssl built it would have been caught.

On trying to add a print statement for lookup variable at <a href="https://github.com/python/cpython/blob/c4e671eec20dfcb29b18596a89ef075f826c9f96/Lib/urllib/request.py#L485">https://github.com/python/cpython/blob/c4e671eec20dfcb29b18596a89ef075f826c9f96/Lib/urllib/request.py#L485</a> I can see the below output where httpshandler was not defined for machines without built ssl. HTTPSConnection was not present as part of http.client due to import ssl causing ImportError.

Ubuntu with ssl

{'unknown': [&lt;urllib.request.UnknownHandler object at 0x7f855d2fe7e8&gt;], 'http': [&lt;urllib.request.HTTPHandler object at 0x7f855d2fe878&gt;], 'ftp': [&lt;urllib.request.FTPHandler object at 0x7f855d2fe6c8&gt;], 'file': [&lt;urllib.request.FileHandler object at 0x7f855d2fe908&gt;], 'data': [&lt;urllib.request.DataHandler object at 0x7f855d2fe998&gt;], 'https': [&lt;urllib.request.HTTPSHandler object at 0x7f855d2fea28&gt;]}

Mac without ssl (https handler missing causing unknown to be taken up for the test)

{'unknown': [&lt;urllib.request.UnknownHandler object at 0x108824c68&gt;], 'http': [&lt;urllib.request.HTTPHandler object at 0x108824cb0&gt;], 'ftp': [&lt;urllib.request.FTPHandler object at 0x108824cf8&gt;], 'file': [&lt;urllib.request.FileHandler object at 0x108824d88&gt;], 'data': [&lt;urllib.request.DataHandler object at 0x108824e60&gt;]}

Gregory, I can create a PR with below patch if my analysis right to see if it helps or you can try a buildbot-custom branch to see if this works with buildbots since my PR won't have any effect on primary CI which have ssl built version of Python. I am not sure I have privileges to trigger a custom buildbot run. I tested it on my Mac without ssl and it has no failures since the tests are skipped.

diff --git a/Lib/test/test_urllib.py b/Lib/test/test_urllib.py
index <a href="https://hg.python.org/lookup/e87c85b928">e87c85b928</a>..<a href="https://hg.python.org/lookup/c5b23f935b">c5b23f935b</a> 100644
--- a/Lib/test/test_urllib.py
+++ b/Lib/test/test_urllib.py
@@ -329,6 +329,7 @@ class urlopen_HttpTests(unittest.TestCase, FakeHTTPMixin, FakeFTPMixin):
         finally:
             self.unfakehttp()

+    @unittest.skipUnless(ssl, "ssl module required")
     def test_url_with_control_char_rejected(self):
         for char_no in list(range(0, 0x21)) + [0x7f]:
             char = chr(char_no)
@@ -354,6 +355,7 @@ class urlopen_HttpTests(unittest.TestCase, FakeHTTPMixin, FakeFTPMixin):
             finally:
                 self.unfakehttp()

+    @unittest.skipUnless(ssl, "ssl module required")
     def test_url_with_newline_header_injection_rejected(self):
         self.fakehttp(b"HTTP/1.1 200 OK\r\n\r\nHello.")
         host = "localhost:7777?a=1 HTTP/1.1\r\nX-injected: header\r\nTEST: 123"</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg341178" id="msg341178">msg341178</a> - <a
    href="msg341178">(view)</a></th>
   <th>Author: Karthikeyan Singaravelan (xtreak) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-05-01 03:59</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Sorry, I will toggle back the issue status. Not sure why bpo didn't warn in this case.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg341192" id="msg341192">msg341192</a> - <a
    href="msg341192">(view)</a></th>
   <th>Author: miss-islington (miss-islington)</th>
   <th>Date: 2019-05-01 12:00</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>
New changeset <a href="https://hg.python.org/lookup/2fc936ed24cf04ed32f6015a8aa78c8ea40da66b">2fc936ed24cf04ed32f6015a8aa78c8ea40da66b</a> by Miss Islington (bot) (Xtreak) in branch 'master':
<a class="closed" title="[closed] [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)" href="issue30458">bpo-30458</a>: Disable https related urllib tests on a build without ssl (<a href="https://github.com/python/cpython/pull/13032" class="closed" title="GitHub PR 13032: [merged] bpo-30458: Disable https related urllib tests on a build without ssl">GH-13032</a>)
<a href="https://github.com/python/cpython/commit/2fc936ed24cf04ed32f6015a8aa78c8ea40da66b">https://github.com/python/cpython/commit/2fc936ed24cf04ed32f6015a8aa78c8ea40da66b</a>
</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg341234" id="msg341234">msg341234</a> - <a
    href="msg341234">(view)</a></th>
   <th>Author: Gregory P. Smith (gregory.p.smith) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-05-01 20:39</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>
New changeset <a href="https://hg.python.org/lookup/b7378d77289c911ca6a0c0afaf513879002df7d5">b7378d77289c911ca6a0c0afaf513879002df7d5</a> by Gregory P. Smith in branch 'master':
<a class="closed" title="[closed] [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)" href="issue30458">bpo-30458</a>: Use InvalidURL instead of ValueError. (<a href="https://github.com/python/cpython/pull/13044" class="closed" title="GitHub PR 13044: [merged] bpo-30458: Use InvalidURL instead of ValueError.">GH-13044</a>)
<a href="https://github.com/python/cpython/commit/b7378d77289c911ca6a0c0afaf513879002df7d5">https://github.com/python/cpython/commit/b7378d77289c911ca6a0c0afaf513879002df7d5</a>
</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg341286" id="msg341286">msg341286</a> - <a
    href="msg341286">(view)</a></th>
   <th>Author: Karthikeyan Singaravelan (xtreak) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-05-02 16:58</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>IMO it does qualify as a security issue. In case of urllib to be lenient and can be exploited it's good to document like tarfile and xml modules that have a warning about untrusted data potentially causing issues and perhaps link to a url validator that adheres to RFC in pypi. I would expect stdlib to handle this but in case it's not handled due to backwards compatibility and potential regressions a warning could be made about the same in the docs noting down the responsibility of the functions and that they are not always safe against malicious data.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg341290" id="msg341290">msg341290</a> - <a
    href="msg341290">(view)</a></th>
   <th>Author: Gregory P. Smith (gregory.p.smith) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-05-02 17:35</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>A note from the urllib3 fixes to this:  They chose to go the route of auto-%-encoding the offending characters in URLs instead.  I do not think the stdlib should do this.

One thing to note though is that they claim URLs with spaces embedded in them are apparently somewhat common in the world, we might want to relax our check to not include space (\x20) in the rejected characters for that reason.

A space alone cannot be used for injection.  Someone could append an incorrect HTTP protocol version to a request using it " HTTP/1.0" but that would be followed by the actual " HTTP/x.y" generated by our library which at that point is up to the server to parse and or reject as odd.  Without the ability to inject \r\n the headers to go with the protocol cannot be modified; so a change in protocol version could at most alter how some headers may be treated.  Worst case: they upgrade/downgrade the http version in a non-pedantic server - i believe this to be low impact (feel free to prove me wrong with a working example against a common server).  Best case: The server rejects the unparseable request or considers their " HTTP/1.0" to be part of their URL path.

In a world where unescaped spaces in URLs are common, some servers _might_ already take the strategy of splitting only on the first and last spaces in the request line anyways, considering everything in the middle to be the url with embedded spaces.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg341291" id="msg341291">msg341291</a> - <a
    href="msg341291">(view)</a></th>
   <th>Author: Karthikeyan Singaravelan (xtreak) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-05-02 17:47</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>&gt; One thing to note though is that they claim URLs with spaces embedded in them are apparently somewhat common in the world, we might want to relax our check to not include space (\x20) in the rejected characters for that reason.

Guess I missed it in the PR discussion and read your comment [0] now about the change from golang's fix that excluded space as a problematic character. Is it worth documenting this change somewhere like a versionchanged directive in http.client?

[0] <a href="https://github.com/python/cpython/pull/12755#discussion_r279888496">https://github.com/python/cpython/pull/12755#discussion_r279888496</a>

Thanks for the details.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg341724" id="msg341724">msg341724</a> - <a
    href="msg341724">(view)</a></th>
   <th>Author: Miro Hrončok (hroncok) <span title="Contributor form received">*</span></th>
   <th>Date: 2019-05-07 13:42</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>I'll work on 3.7 backport.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg341750" id="msg341750">msg341750</a> - <a
    href="msg341750">(view)</a></th>
   <th>Author: Gregory P. Smith (gregory.p.smith) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-05-07 15:28</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>
New changeset <a href="https://hg.python.org/lookup/7e200e0763f5b71c199aaf98bd5588f291585619">7e200e0763f5b71c199aaf98bd5588f291585619</a> by Gregory P. Smith (Miro Hrončok) in branch '3.7':
<a class="closed" title="[closed] [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)" href="issue30458">bpo-30458</a>: Disallow control chars in http URLs. (<a href="https://github.com/python/cpython/pull/12755" class="closed" title="GitHub PR 12755: [merged] bpo-30458: Disallow control chars in http URLs.">GH-12755</a>) (<a href="https://github.com/python/cpython/pull/13154" class="closed" title="GitHub PR 13154: [merged] [3.7] bpo-30458: Disallow control chars in http URLs. (GH-12755)">GH-13154</a>)
<a href="https://github.com/python/cpython/commit/7e200e0763f5b71c199aaf98bd5588f291585619">https://github.com/python/cpython/commit/7e200e0763f5b71c199aaf98bd5588f291585619</a>
</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg341906" id="msg341906">msg341906</a> - <a
    href="msg341906">(view)</a></th>
   <th>Author: Ned Deily (ned.deily) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-05-08 16:33</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>
New changeset <a href="https://hg.python.org/lookup/c50d437e942d4c4c45c8cd76329b05340c02eb31">c50d437e942d4c4c45c8cd76329b05340c02eb31</a> by Ned Deily (Miro Hrončok) in branch '3.6':
<a class="closed" title="[closed] [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)" href="issue30458">bpo-30458</a>: Disallow control chars in http URLs. (<a href="https://github.com/python/cpython/pull/12755" class="closed" title="GitHub PR 12755: [merged] bpo-30458: Disallow control chars in http URLs.">GH-12755</a>) (<a href="https://github.com/python/cpython/pull/13155" class="closed" title="GitHub PR 13155: [merged] [3.6] bpo-30458: Disallow control chars in http URLs. (GH-12755)">GH-13155</a>)
<a href="https://github.com/python/cpython/commit/c50d437e942d4c4c45c8cd76329b05340c02eb31">https://github.com/python/cpython/commit/c50d437e942d4c4c45c8cd76329b05340c02eb31</a>
</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg341932" id="msg341932">msg341932</a> - <a
    href="msg341932">(view)</a></th>
   <th>Author: Charalampos Stratakis (cstratak) <span title="Contributor form received">*</span></th>
   <th>Date: 2019-05-08 19:25</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>A small clarification on the differences of those two CVE's.

CVE-2019-9740: CLRF sequences are not properly handled in python built-in modules urllib/urllib2 in the query part of the url parameter of urlopen() function

CVE-2019-9947: CLRF sequences are not properly handled in python built-in modules urllib/urllib2 in the path part of the url parameter of urlopen() function</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg342470" id="msg342470">msg342470</a> - <a
    href="msg342470">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-05-14 15:09</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>I backported the fix from Python 3.7 to Python 2.7: <a href="https://github.com/python/cpython/pull/13315" class="closed" title="GitHub PR 13315: [merged] [2.7] bpo-30458: Disallow control chars in http URLs. (GH-12755) (GH-13154)">PR 13315</a>.

Please review it carefully, I had to make multiple changes to adapt the fix to Python 2:

* non-ASCII characters are explicitly rejected
* urllib doesn't reject control characters: they are quoted properly, so I addapted test_urllib
* urllib2 doesn't quote the URL and so reject control characters, I added tests to test_urllib2
* I replaced http.client with httplib
* I replaced urllib.request with urllib or urllib2</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg343045" id="msg343045">msg343045</a> - <a
    href="msg343045">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-05-21 13:12</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>
New changeset <a href="https://hg.python.org/lookup/bb8071a4cae5ab3fe321481dd3d73662ffb26052">bb8071a4cae5ab3fe321481dd3d73662ffb26052</a> by Victor Stinner in branch '2.7':
<a class="closed" title="[closed] [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)" href="issue30458">bpo-30458</a>: Disallow control chars in http URLs (<a href="https://github.com/python/cpython/pull/12755" class="closed" title="GitHub PR 12755: [merged] bpo-30458: Disallow control chars in http URLs.">GH-12755</a>) (<a href="https://github.com/python/cpython/pull/13154" class="closed" title="GitHub PR 13154: [merged] [3.7] bpo-30458: Disallow control chars in http URLs. (GH-12755)">GH-13154</a>) (<a href="https://github.com/python/cpython/pull/13315" class="closed" title="GitHub PR 13315: [merged] [2.7] bpo-30458: Disallow control chars in http URLs. (GH-12755) (GH-13154)">GH-13315</a>)
<a href="https://github.com/python/cpython/commit/bb8071a4cae5ab3fe321481dd3d73662ffb26052">https://github.com/python/cpython/commit/bb8071a4cae5ab3fe321481dd3d73662ffb26052</a>
</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg343104" id="msg343104">msg343104</a> - <a
    href="msg343104">(view)</a></th>
   <th>Author: Gregory P. Smith (gregory.p.smith) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-05-21 21:53</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Assigning to Larry to decide if he wants to merge that PR into 3.5 or not.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg344826" id="msg344826">msg344826</a> - <a
    href="msg344826">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-06-06 16:06</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Note for myself: Python 2 urllib.urlopen(url) always quotes the URL and so is not vulnerable to HTTP Header Injection (at least, not to this issue ;-)).</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg347282" id="msg347282">msg347282</a> - <a
    href="msg347282">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-07-04 14:02</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>The commit <a href="https://hg.python.org/lookup/b7378d77289c911ca6a0c0afaf513879002df7d5">b7378d77289c911ca6a0c0afaf513879002df7d5</a> is incomplete: it doesn't seem to check for control characters in the "host" part of the URL, only in the "path" part of the URL. Example:
---
try:
    from urllib import request as urllib_request
except ImportError:
    import urllib2 as urllib_request
import socket
def bug(*args):
    raise Exception(args)
# urlopen() must not call create_connection()
socket.create_connection = bug
urllib_request.urlopen('<a href="http://127.0.0.1">http://127.0.0.1</a>\r\n\x20hihi\r\n :11211')
---

The URL comes from the first message of this issue:
<a href="https://bugs.python.org/issue30458#msg294360">https://bugs.python.org/issue30458#msg294360</a>

Development branches 2.7 and master produce a similar output:
---
Traceback (most recent call last):
 ...
Exception: (('127.0.0.1\r\n hihi\r\n ', 11211), ..., None)
---

So urllib2/urllib.request actually does a real network connection (DNS query), whereas it should reject control characters in the "host" part of the URL.

***

A second problem comes into the game. Some C libraries like glibc strip the end of the hostname (strip at the first newline character) and so HTTP Header injection is still possible is this case:
<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1673465">https://bugzilla.redhat.com/show_bug.cgi?id=1673465</a>

***

According to the RFC 3986, the "host" grammar doesn't allow any control character, it looks like:

   host          = IP-literal / IPv4address / reg-name

   ALPHA (letters)
   DIGIT (decimal digits)
   unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
      pct-encoded = "%" HEXDIG HEXDIG
      sub-delims  = "!" / "$" / "&amp;" / "'" / "(" / ")"
                  / "*" / "+" / "," / ";" / "="
   reg-name      = *( unreserved / pct-encoded / sub-delims )

   IP-literal    = "[" ( IPv6address / IPvFuture  ) "]"
   IPvFuture     = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )
   IPv6address   =                            6( h16 ":" ) ls32
                 /                       "::" 5( h16 ":" ) ls32
                 / [               h16 ] "::" 4( h16 ":" ) ls32
                 / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
                 / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
                 / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
                 / [ *4( h16 ":" ) h16 ] "::"              ls32
                 / [ *5( h16 ":" ) h16 ] "::"              h16
                 / [ *6( h16 ":" ) h16 ] "::"
   h16           = 1*4HEXDIG
   ls32          = ( h16 ":" h16 ) / IPv4address
   IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg347285" id="msg347285">msg347285</a> - <a
    href="msg347285">(view)</a></th>
   <th>Author: Karthikeyan Singaravelan (xtreak) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-07-04 15:31</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Okay, the url variable against which the regex check is made is not the full url but the path. The HTTPConnection class sets self.host [0] in the constructor which is used to send the Host header. Perhaps the regex check could be done for the host too given the path check is already done in the previous commit. With that the reported host also throws a http.client.InvalidURL exception.

&gt; A second problem comes into the game. Some C libraries like glibc strip the end of the hostname (strip at the first newline character) and so HTTP Header injection is still possible is this case: <a href="https://bugzilla.redhat.com/show_bug.cgi?id=1673465">https://bugzilla.redhat.com/show_bug.cgi?id=1673465</a>

The bug link raises permission error. Does fixing the host part fix this issue too since there won't be any socket connection made? Is it possible to have a Python reproducer of this issue?

[0] <a href="https://github.com/python/cpython/blob/7f41c8e0dd237d1f3f0a1d2ba2f3ee4e4bd400a7/Lib/http/client.py#L829">https://github.com/python/cpython/blob/7f41c8e0dd237d1f3f0a1d2ba2f3ee4e4bd400a7/Lib/http/client.py#L829</a></pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg347290" id="msg347290">msg347290</a> - <a
    href="msg347290">(view)</a></th>
   <th>Author: Riccardo Schirone (rschiron)</th>
   <th>Date: 2019-07-04 17:04</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>&gt; &gt; A second problem comes into the game. Some C libraries like glibc strip the end of the hostname (strip at the first newline character) and so HTTP Header injection is still possible is this case: <a href="https://bugzilla.redhat.com/show_bug.cgi?id=1673465">https://bugzilla.redhat.com/show_bug.cgi?id=1673465</a>

&gt; The bug link raises permission error. Does fixing the host part fix this issue too since there won't be any socket connection made? Is it possible to have a Python reproducer of this issue?

I think this was supposed to refer to CVE-2016-10739 (<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1347549">https://bugzilla.redhat.com/show_bug.cgi?id=1347549</a>)</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg347897" id="msg347897">msg347897</a> - <a
    href="msg347897">(view)</a></th>
   <th>Author: Larry Hastings (larry) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-07-14 09:07</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>
New changeset <a href="https://hg.python.org/lookup/afe3a4975cf93c97e5d6eb8800e48f368011d37a">afe3a4975cf93c97e5d6eb8800e48f368011d37a</a> by larryhastings (Miro Hrončok) in branch '3.5':
<a class="closed" title="[closed] [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)" href="issue30458">bpo-30458</a>: Disallow control chars in http URLs. (<a href="https://github.com/python/cpython/pull/12755" class="closed" title="GitHub PR 12755: [merged] bpo-30458: Disallow control chars in http URLs.">GH-12755</a>) (<a class="closed" title="[closed] os.path.expanduser breaks when using unicode character in the username" href="issue13207">#13207</a>)
<a href="https://github.com/python/cpython/commit/afe3a4975cf93c97e5d6eb8800e48f368011d37a">https://github.com/python/cpython/commit/afe3a4975cf93c97e5d6eb8800e48f368011d37a</a>
</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg350003" id="msg350003">msg350003</a> - <a
    href="msg350003">(view)</a></th>
   <th>Author: Riccardo Schirone (rschiron)</th>
   <th>Date: 2019-08-20 13:30</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Will the flaw outlined in <a href="https://bugs.python.org/issue30458#msg347282">https://bugs.python.org/issue30458#msg347282</a> be fixed in python itself? If so, I think a CVE for python should be requested to MITRE (I can request one, in that case).

Moreover, does it make sense to create a new bug to track the new issue? This bug already references 3 CVEs and it would probably just create more confusion to reference a 4th. What do you think?</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg350028" id="msg350028">msg350028</a> - <a
    href="msg350028">(view)</a></th>
   <th>Author: Gregory P. Smith (gregory.p.smith) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-08-20 17:53</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>I'm not a fan of CVE numbers in general, people have been creating too many of those.  But that also means I just don't care if someone does.  Having a CVE entry is not a way to claim something is important.

This issue is still open and can be used to track dealing with the host.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg352451" id="msg352451">msg352451</a> - <a
    href="msg352451">(view)</a></th>
   <th>Author: Jason R. Coombs (jaraco) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-09-14 20:38</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>This change caused a regression or two captured in <a class="closed" title="[closed] http.client cannot send non-ASCII request lines" href="issue36274">issue36274</a>. Essentially, by blocking invalid requests, it's now not possible for a system intentionally to generate invalid requests for testing purposes. As these point releases of Python start making it into the wild, the impact of this change will likely increase.

I think this patch was applied at too low a level. That is, instead of protecting the user inputs, the change protects the programmer's inputs.

I mention this here so those interested can follow the mitigation work happening in <a class="closed" title="[closed] http.client cannot send non-ASCII request lines" href="issue36274">issue36274</a>.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg352596" id="msg352596">msg352596</a> - <a
    href="msg352596">(view)</a></th>
   <th>Author: Ned Deily (ned.deily) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-09-17 04:58</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>If I understand Jason's message correctly, the changes for <a class="closed" title="[closed] [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)" href="issue30458">Issue30458</a> introduced a regression in 3.7.4 and will introduce the same regression in other branches as they are released, including 3.5.8 whose rc1 is now in testing.  3.7.5rc1 is scheduled to be tagged later today.  Is this regression serious enough that we should hold 3.7.5 and/or 3.5.8 for a fix?  If so, there should probably be a separate issue for it unless it is necessarily intertwined with the resolution of <a class="closed" title="[closed] http.client cannot send non-ASCII request lines" href="issue36274">Issue36274</a>.

I'm provisionally setting the status of this issue to "release blocker".</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg352727" id="msg352727">msg352727</a> - <a
    href="msg352727">(view)</a></th>
   <th>Author: Larry Hastings (larry) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-09-18 13:32</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Should we open a separate issue to track fixing the regression?</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg352731" id="msg352731">msg352731</a> - <a
    href="msg352731">(view)</a></th>
   <th>Author: Jason R. Coombs (jaraco) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-09-18 14:37</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>&gt; Should we open a separate issue to track (fixing) the regression?

Yes, I think so. The ticket I referenced mainly addresses an incompatibility that was introduced with Python 3.0, so is much less urgent than the one introduced more recently, so I believe it deserves a proper, independent description and discussion. I'll gladly file that ticket, tonight most likely.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg352751" id="msg352751">msg352751</a> - <a
    href="msg352751">(view)</a></th>
   <th>Author: Jason R. Coombs (jaraco) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-09-18 18:44</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>I've created <a class="closed" title="[closed] Fix for issue30458 (HTTP Header Injection) prevents crafting invalid requests" href="issue38216">issue38216</a> to address the (perceived) regression.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg352760" id="msg352760">msg352760</a> - <a
    href="msg352760">(view)</a></th>
   <th>Author: Ned Deily (ned.deily) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-09-18 22:30</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>With the breaking out of the portential and/or actual regression (e.g. invalid requests can no longer be crafted) into <a class="closed" title="[closed] Fix for issue30458 (HTTP Header Injection) prevents crafting invalid requests" href="issue38216">Issue38216</a>, itself a potential release blocker, we are still left here with the as-yet unresolved issue identified above in <a href="msg34728">msg34728</a> (e.g. not checking for control characters in the "host" part of the URL, only the "path" part).  Since this also affects so many branches/releases and has external components (CVE's, third-party impacts), it probably would have made sense to break it out into a separate issue (and maybe it still does).  But since this problem has been present for many releases (apparently), I would rather not further hold the 3.7.5 release for a resolution (though that would be a good thing) so I'm going to change the priority for the moment to "deferred blocker".

But we need someone (preferably a core dev already involved) to take charge of this and push it to a resolution.  Thanks for everyone's help so far!</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg355246" id="msg355246">msg355246</a> - <a
    href="msg355246">(view)</a></th>
   <th>Author: Riccardo Schirone (rschiron)</th>
   <th>Date: 2019-10-23 18:34</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>CVE-2019-18348 has been assigned to the issue explained in <a href="https://bugs.python.org/issue30458#msg347282">https://bugs.python.org/issue30458#msg347282</a> . Maybe a separate bug for it would be better though. CVE-2019-18348 is about injecting CRLF in HTTP requests through the *host* part of a URL.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg355261" id="msg355261">msg355261</a> - <a
    href="msg355261">(view)</a></th>
   <th>Author: Gregory P. Smith (gregory.p.smith) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-10-23 19:48</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Can you please open a separate issue for CVE-2019-18348?  It is easier to track that way.

(META: In general I think the CVE process is being abused and that these really did not deserve that treatment.  <a href="https://lwn.net/Articles/801157/">https://lwn.net/Articles/801157/</a>  is good reading and food for thought.)</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg355298" id="msg355298">msg355298</a> - <a
    href="msg355298">(view)</a></th>
   <th>Author: Riccardo Schirone (rschiron)</th>
   <th>Date: 2019-10-24 08:12</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>I have created <a href="https://bugs.python.org/issue38576">https://bugs.python.org/issue38576</a> to address CVE-2019-18348.

@gregory.p.smith if you have particular complains about these CVEs feel free to let me know (even privately). I think the security impact of these flaws is: an application that relies on urlopen/HTTPConnection/etc. where either the query part, the path part or the host part are user-controlled, could be exploited to send unintended HTTP headers to other hosts (maybe services that would not be directly reachable by the user).

FYI, there were some good replies to that CVE talk, one of which is <a href="https://grsecurity.net/reports_of_cves_death_greatly_exaggerated">https://grsecurity.net/reports_of_cves_death_greatly_exaggerated</a> .</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg357988" id="msg357988">msg357988</a> - <a
    href="msg357988">(view)</a></th>
   <th>Author: Ned Deily (ned.deily) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-12-07 20:45</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>What is the status of this issue?  Now that <a class="closed" title="[closed] CVE-2019-18348: CRLF injection via the host part of the url passed to urlopen()" href="issue38576">Issue38576</a> has been opened to cover the host address part, can this issue be closed or downgraded?  Should <a class="closed" title="[closed] CVE-2019-18348: CRLF injection via the host part of the url passed to urlopen()" href="issue38576">Issue38576</a> be a release blocker?</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg358050" id="msg358050">msg358050</a> - <a
    href="msg358050">(view)</a></th>
   <th>Author: Gregory P. Smith (gregory.p.smith) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2019-12-09 03:10</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>i believe new work will be done via the new issue.  marking this closed.  if there is something not covered by <a class="closed" title="[closed] CVE-2019-18348: CRLF injection via the host part of the url passed to urlopen()" href="issue38576">issue38576</a> that remains, please open a new issue for it.  new discussion on this long issue is easy to get lost in.</pre>
   </td>
  </tr>
 
</table>

<table class="history table table-condensed table-striped"><tr><th colspan="4" class="header">
History
</th></tr><tr>
<th>Date</th>
<th>User</th>
<th>Action</th>
<th>Args</th>
</tr>
<tr><td>2019-12-09&nbsp;03:10:03</td><td>gregory.p.smith</td><td>set</td><td>status: open -> closed<br />resolution: fixed<br />messages:
  + <a rel="nofollow" href="msg358050">msg358050</a><br /><br />stage: patch review -> resolved</td></tr>
<tr><td>2019-12-07&nbsp;20:45:10</td><td>ned.deily</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg357988">msg357988</a></td></tr>
<tr><td>2019-10-24&nbsp;08:12:29</td><td>rschiron</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg355298">msg355298</a></td></tr>
<tr><td>2019-10-23&nbsp;19:48:10</td><td>gregory.p.smith</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg355261">msg355261</a></td></tr>
<tr><td>2019-10-23&nbsp;18:34:37</td><td>rschiron</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg355246">msg355246</a></td></tr>
<tr><td>2019-09-21&nbsp;08:55:08</td><td>jaraco</td><td>set</td><td>stage: needs patch -> patch review<br />pull_requests:
  + <a rel="nofollow" href="pull_request15900">pull_request15900</a></td></tr>
<tr><td>2019-09-18&nbsp;22:30:07</td><td>ned.deily</td><td>set</td><td>priority: release blocker -> deferred blocker<br /><br />messages:
  + <a rel="nofollow" href="msg352760">msg352760</a></td></tr>
<tr><td>2019-09-18&nbsp;18:44:54</td><td>jaraco</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg352751">msg352751</a></td></tr>
<tr><td>2019-09-18&nbsp;14:37:37</td><td>jaraco</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg352731">msg352731</a></td></tr>
<tr><td>2019-09-18&nbsp;13:32:02</td><td>larry</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg352727">msg352727</a></td></tr>
<tr><td>2019-09-17&nbsp;04:58:53</td><td>ned.deily</td><td>set</td><td>priority: normal -> release blocker<br />nosy:
  + <a rel="nofollow" href="user12704">lukasz.langa</a>, <a rel="nofollow" href="user4455">benjamin.peterson</a>, <a rel="nofollow" href="user5248">ned.deily</a><br />messages:
  + <a rel="nofollow" href="msg352596">msg352596</a><br /><br /></td></tr>
<tr><td>2019-09-14&nbsp;20:38:54</td><td>jaraco</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user1290">jaraco</a><br />messages:
  + <a rel="nofollow" href="msg352451">msg352451</a><br /></td></tr>
<tr><td>2019-08-20&nbsp;17:53:52</td><td>gregory.p.smith</td><td>set</td><td>keywords:
  + <a rel="nofollow" href="keyword15">security_issue</a><br />assignee: <a ref="nofollow" href="user2731">larry</a> -> <a rel="nofollow" href="userNone"></a><br />messages:
  + <a rel="nofollow" href="msg350028">msg350028</a><br /><br />stage: patch review -> needs patch</td></tr>
<tr><td>2019-08-20&nbsp;13:30:47</td><td>rschiron</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg350003">msg350003</a></td></tr>
<tr><td>2019-07-14&nbsp;09:07:14</td><td>larry</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg347897">msg347897</a></td></tr>
<tr><td>2019-07-04&nbsp;17:04:56</td><td>rschiron</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user31501">rschiron</a><br />messages:
  + <a rel="nofollow" href="msg347290">msg347290</a><br /></td></tr>
<tr><td>2019-07-04&nbsp;15:31:37</td><td>xtreak</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg347285">msg347285</a></td></tr>
<tr><td>2019-07-04&nbsp;14:02:42</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg347282">msg347282</a><br />versions:
  + Python 2.7, Python 3.6, Python 3.7, Python 3.8, Python 3.9</td></tr>
<tr><td>2019-06-06&nbsp;16:06:09</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg344826">msg344826</a></td></tr>
<tr><td>2019-06-03&nbsp;06:15:52</td><td>python-dev</td><td>set</td><td>pull_requests:
  + <a rel="nofollow" href="pull_request13655">pull_request13655</a></td></tr>
<tr><td>2019-05-29&nbsp;12:15:07</td><td>matrixise</td><td>set</td><td>pull_requests:
  + <a rel="nofollow" href="pull_request13546">pull_request13546</a></td></tr>
<tr><td>2019-05-29&nbsp;12:14:46</td><td>push0ebp</td><td>set</td><td>pull_requests:
  + <a rel="nofollow" href="pull_request13545">pull_request13545</a></td></tr>
<tr><td>2019-05-21&nbsp;21:53:01</td><td>gregory.p.smith</td><td>set</td><td>assignee: <a ref="nofollow" href="user2731">larry</a><br /><br />messages:
  + <a rel="nofollow" href="msg343104">msg343104</a><br />nosy:
  + <a rel="nofollow" href="user2731">larry</a></td></tr>
<tr><td>2019-05-21&nbsp;21:52:07</td><td>gregory.p.smith</td><td>set</td><td>versions:
  - Python 3.6, Python 3.7</td></tr>
<tr><td>2019-05-21&nbsp;21:51:47</td><td>gregory.p.smith</td><td>set</td><td>versions:
  - Python 2.7</td></tr>
<tr><td>2019-05-21&nbsp;13:12:39</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg343045">msg343045</a></td></tr>
<tr><td>2019-05-14&nbsp;15:09:30</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg342470">msg342470</a></td></tr>
<tr><td>2019-05-14&nbsp;15:04:51</td><td>vstinner</td><td>set</td><td>pull_requests:
  + <a rel="nofollow" href="pull_request13225">pull_request13225</a></td></tr>
<tr><td>2019-05-08&nbsp;19:25:57</td><td>cstratak</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user23615">cstratak</a>, - <a rel="nofollow" href="user5248">ned.deily</a>, <a rel="nofollow" href="user16276">koobs</a>, <a rel="nofollow" href="user25227">hroncok</a><br /><br />messages:
  + <a rel="nofollow" href="msg341932">msg341932</a><br />versions:
  + Python 3.7</td></tr>
<tr><td>2019-05-08&nbsp;18:41:16</td><td>hroncok</td><td>set</td><td>pull_requests:
  + <a rel="nofollow" href="pull_request13118">pull_request13118</a></td></tr>
<tr><td>2019-05-08&nbsp;16:33:29</td><td>ned.deily</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user5248">ned.deily</a><br />messages:
  + <a rel="nofollow" href="msg341906">msg341906</a><br /></td></tr>
<tr><td>2019-05-07&nbsp;15:29:37</td><td>gregory.p.smith</td><td>set</td><td>versions:
  - Python 3.7</td></tr>
<tr><td>2019-05-07&nbsp;15:28:51</td><td>gregory.p.smith</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg341750">msg341750</a></td></tr>
<tr><td>2019-05-07&nbsp;14:50:11</td><td>hroncok</td><td>set</td><td>pull_requests:
  + <a rel="nofollow" href="pull_request13072">pull_request13072</a></td></tr>
<tr><td>2019-05-07&nbsp;14:32:29</td><td>hroncok</td><td>set</td><td>pull_requests:
  + <a rel="nofollow" href="pull_request13071">pull_request13071</a></td></tr>
<tr><td>2019-05-07&nbsp;14:03:04</td><td>koobs</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user16276">koobs</a><br /></td></tr>
<tr><td>2019-05-07&nbsp;13:42:24</td><td>hroncok</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user25227">hroncok</a><br />messages:
  + <a rel="nofollow" href="msg341724">msg341724</a><br /></td></tr>
<tr><td>2019-05-02&nbsp;17:47:42</td><td>xtreak</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg341291">msg341291</a></td></tr>
<tr><td>2019-05-02&nbsp;17:35:01</td><td>gregory.p.smith</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg341290">msg341290</a></td></tr>
<tr><td>2019-05-02&nbsp;16:58:20</td><td>xtreak</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg341286">msg341286</a></td></tr>
<tr><td>2019-05-01&nbsp;20:39:26</td><td>gregory.p.smith</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg341234">msg341234</a></td></tr>
<tr><td>2019-05-01&nbsp;20:10:45</td><td>gregory.p.smith</td><td>set</td><td>stage: backport needed -> patch review<br />pull_requests:
  + <a rel="nofollow" href="pull_request12964">pull_request12964</a></td></tr>
<tr><td>2019-05-01&nbsp;12:02:40</td><td>gregory.p.smith</td><td>set</td><td>stage: patch review -> backport needed</td></tr>
<tr><td>2019-05-01&nbsp;12:00:11</td><td>miss-islington</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user27838">miss-islington</a><br />messages:
  + <a rel="nofollow" href="msg341192">msg341192</a><br /></td></tr>
<tr><td>2019-05-01&nbsp;06:50:54</td><td>xtreak</td><td>set</td><td>stage: backport needed -> patch review<br />pull_requests:
  + <a rel="nofollow" href="pull_request12953">pull_request12953</a></td></tr>
<tr><td>2019-05-01&nbsp;03:59:58</td><td>xtreak</td><td>set</td><td>assignee: <a ref="nofollow" href="user252">gregory.p.smith</a> -> (no value)<br />stage: patch review -> backport needed<br />messages:
  + <a rel="nofollow" href="msg341178">msg341178</a><br />versions:
  - Python 3.8</td></tr>
<tr><td>2019-05-01&nbsp;03:30:25</td><td>xtreak</td><td>set</td><td>assignee: <a ref="nofollow" href="user252">gregory.p.smith</a><br />stage: backport needed -> patch review<br />messages:
  + <a rel="nofollow" href="msg341176">msg341176</a><br />versions:
  + Python 3.8</td></tr>
<tr><td>2019-05-01&nbsp;02:18:51</td><td>gregory.p.smith</td><td>set</td><td>assignee: <a ref="nofollow" href="user252">gregory.p.smith</a> -> (no value)<br />stage: patch review -> backport needed</td></tr>
<tr><td>2019-05-01&nbsp;02:18:09</td><td>gregory.p.smith</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg341175">msg341175</a><br />versions:
  - Python 3.8</td></tr>
<tr><td>2019-05-01&nbsp;02:12:37</td><td>gregory.p.smith</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg341174">msg341174</a></td></tr>
<tr><td>2019-04-17&nbsp;15:40:34</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg340408">msg340408</a></td></tr>
<tr><td>2019-04-17&nbsp;15:35:49</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg340407">msg340407</a></td></tr>
<tr><td>2019-04-17&nbsp;15:32:37</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg340405">msg340405</a></td></tr>
<tr><td>2019-04-10&nbsp;22:05:48</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg339894">msg339894</a></td></tr>
<tr><td>2019-04-10&nbsp;19:31:06</td><td>gregory.p.smith</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg339884">msg339884</a></td></tr>
<tr><td>2019-04-10&nbsp;13:03:09</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg339861">msg339861</a></td></tr>
<tr><td>2019-04-10&nbsp;12:35:01</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg339858">msg339858</a></td></tr>
<tr><td>2019-04-10&nbsp;12:32:58</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg339857">msg339857</a></td></tr>
<tr><td>2019-04-10&nbsp;11:28:11</td><td>martin.panter</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg339853">msg339853</a></td></tr>
<tr><td>2019-04-10&nbsp;10:59:20</td><td>xtreak</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg339852">msg339852</a></td></tr>
<tr><td>2019-04-10&nbsp;10:50:15</td><td>vstinner</td><td>set</td><td>title: [CVE-2019-9740][CVE-2019-9947][security] CRLF Injection in httplib -> [security][CVE-2019-9740][CVE-2019-9947] HTTP Header Injection (follow-up of CVE-2016-5699)</td></tr>
<tr><td>2019-04-10&nbsp;10:48:21</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg339851">msg339851</a></td></tr>
<tr><td>2019-04-10&nbsp;10:45:12</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg339850">msg339850</a></td></tr>
<tr><td>2019-04-10&nbsp;10:43:18</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg339848">msg339848</a><br />title: [CVE-2019-9740][security] CRLF Injection in httplib -> [CVE-2019-9740][CVE-2019-9947][security] CRLF Injection in httplib</td></tr>
<tr><td>2019-04-10&nbsp;10:36:30</td><td>vstinner</td><td>set</td><td>versions:
  + Python 3.5, Python 3.6, Python 3.7, Python 3.8</td></tr>
<tr><td>2019-04-10&nbsp;10:36:15</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg339846">msg339846</a></td></tr>
<tr><td>2019-04-10&nbsp;09:32:36</td><td>gregory.p.smith</td><td>link</td><td><a rel="nofollow" href="issue35906">issue35906 superseder</a></td></tr>
<tr><td>2019-04-10&nbsp;09:23:06</td><td>gregory.p.smith</td><td>set</td><td>assignee: <a ref="nofollow" href="user252">gregory.p.smith</a></td></tr>
<tr><td>2019-04-10&nbsp;09:22:34</td><td>gregory.p.smith</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user252">gregory.p.smith</a><br />messages:
  + <a rel="nofollow" href="msg339840">msg339840</a><br /></td></tr>
<tr><td>2019-04-10&nbsp;09:11:30</td><td>gregory.p.smith</td><td>set</td><td>keywords:
  + <a rel="nofollow" href="keyword2">patch</a><br />stage: patch review<br />pull_requests:
  + <a rel="nofollow" href="pull_request12688">pull_request12688</a></td></tr>
<tr><td>2019-04-09&nbsp;15:42:49</td><td>ware</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user31061">ware</a><br /></td></tr>
<tr><td>2019-04-09&nbsp;14:28:59</td><td>vstinner</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user2377">vstinner</a><br /><br />messages:
  + <a rel="nofollow" href="msg339754">msg339754</a><br />title: CRLF Injection in httplib -> [CVE-2019-9740][security] CRLF Injection in httplib</td></tr>
<tr><td>2019-03-17&nbsp;08:52:59</td><td>xtreak</td><td>link</td><td><a rel="nofollow" href="issue36276">issue36276 superseder</a></td></tr>
<tr><td>2019-03-15&nbsp;06:15:37</td><td>xtreak</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user28746">xtreak</a><br />messages:
  + <a rel="nofollow" href="msg337970">msg337970</a><br /></td></tr>
<tr><td>2017-11-26&nbsp;01:04:36</td><td>martin.panter</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg306981">msg306981</a></td></tr>
<tr><td>2017-11-26&nbsp;01:00:28</td><td>martin.panter</td><td>link</td><td><a rel="nofollow" href="issue32085">issue32085 dependencies</a></td></tr>
<tr><td>2017-11-26&nbsp;00:03:14</td><td>martin.panter</td><td>set</td><td>type: security</td></tr>
<tr><td>2017-06-03&nbsp;07:01:33</td><td>martin.panter</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg295067">msg295067</a></td></tr>
<tr><td>2017-06-02&nbsp;15:36:20</td><td>xiang.zhang</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user21530">xiang.zhang</a>, <a rel="nofollow" href="user15623">serhiy.storchaka</a>, <a rel="nofollow" href="user14751">martin.panter</a><br />messages:
  + <a rel="nofollow" href="msg295026">msg295026</a><br /></td></tr>
<tr><td>2017-05-24&nbsp;15:01:31</td><td>orange</td><td>create</td><td></td></tr>
</table>

</div>


</div> <!-- content-body -->
<div id="footer">
<div id="credits">
  Hosted on <a href="https://m.do.co/c/783434964889" title="Hosted on DigitalOcean">DigitalOcean</a>,
  <br>
  Supported by <a href="https://python.org/psf-landing/" title="The Python Software Foundation">The Python Software Foundation</a>,
  <br>
  Powered by <a href="http://roundup.sourceforge.net" title="Powered by the Roundup Issue Tracker">Roundup</a>
</div> <!-- credits -->
Copyright &copy; 1990-2020, <a href="http://python.org/psf">Python Software Foundation</a><br />
<a href="http://python.org/about/legal">Legal Statements</a>
</div> <!-- footer -->
</div> <!-- body-main -->
</div> <!-- content -->



</body>
</html>

