<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>
    CVE-2019-11360: BufferOverflow in iptables-restore v1.8.2 | Sebastian Neef - 0day.work
    </title>

    

    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="shortcut icon" href="/favicon.png">

    <!--<link rel="stylesheet" type="text/css" href="/assets/css/screen.css?v=e104868e81" />-->

    <link rel="stylesheet" href="/assets/css/bootstrap.min.css?v=e104868e81"/>
    <link rel="stylesheet" href="/assets/css/monokai_sublime.css?v=e104868e81">
    <link rel="stylesheet" href="/assets/css/default.css?v=e104868e81">
    <link rel="stylesheet" href="/assets/css/elusive-icons.min.css?v=e104868e81">
    <link rel="stylesheet" href="/assets/css/cookieconsent.min.css?v=e104868e81">

    <link rel="icon" href="/favicon.png" type="image/png" />
    <link rel="canonical" href="https://0day.work/cve-2019-11360-bufferoverflow-in-iptables-restore-v1-8-2/" />
    <meta name="referrer" content="no-referrer-when-downgrade" />
    <link rel="amphtml" href="https://0day.work/cve-2019-11360-bufferoverflow-in-iptables-restore-v1-8-2/amp/" />
    
    <meta property="og:site_name" content="Sebastian Neef - 0day.work" />
    <meta property="og:type" content="article" />
    <meta property="og:title" content="CVE-2019-11360: BufferOverflow in iptables-restore v1.8.2" />
    <meta property="og:description" content="This blogpost is about a BufferOverflow vulnerability which I found by fuzzing iptables-restore using AFL in March, 2019. It was fixed by the netfilter team in April 2019 and was assigned CVE-2019-11360 by MTIRE.  Fuzzing iptables-restore Back in March I somehow came up with the idea of fuzzing iptables. I" />
    <meta property="og:url" content="https://0day.work/cve-2019-11360-bufferoverflow-in-iptables-restore-v1-8-2/" />
    <meta property="article:published_time" content="2019-07-11T10:33:07.000Z" />
    <meta property="article:modified_time" content="2019-07-11T10:33:07.000Z" />
    <meta property="article:tag" content="cve" />
    <meta property="article:tag" content="writeups" />
    
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content="CVE-2019-11360: BufferOverflow in iptables-restore v1.8.2" />
    <meta name="twitter:description" content="This blogpost is about a BufferOverflow vulnerability which I found by fuzzing iptables-restore using AFL in March, 2019. It was fixed by the netfilter team in April 2019 and was assigned CVE-2019-11360 by MTIRE.  Fuzzing iptables-restore Back in March I somehow came up with the idea of fuzzing iptables. I" />
    <meta name="twitter:url" content="https://0day.work/cve-2019-11360-bufferoverflow-in-iptables-restore-v1-8-2/" />
    <meta name="twitter:label1" content="Written by" />
    <meta name="twitter:data1" content="Sebastian Neef" />
    <meta name="twitter:label2" content="Filed under" />
    <meta name="twitter:data2" content="cve, writeups" />
    <meta name="twitter:site" content="@0daywork" />
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "Sebastian Neef - 0day.work",
        "url": "https://0day.work/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://0day.work/content/images/2016/01/0day-1.png",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Sebastian Neef",
        "url": "https://0day.work/author/sebastian/",
        "sameAs": []
    },
    "headline": "CVE-2019-11360: BufferOverflow in iptables-restore v1.8.2",
    "url": "https://0day.work/cve-2019-11360-bufferoverflow-in-iptables-restore-v1-8-2/",
    "datePublished": "2019-07-11T10:33:07.000Z",
    "dateModified": "2019-07-11T10:33:07.000Z",
    "keywords": "cve, writeups",
    "description": "This blogpost is about a BufferOverflow vulnerability which I found by fuzzing \niptables-restore using AFL in March, 2019. It was fixed by the netfilter team in\nApril 2019 and was assigned CVE-2019-11360 by MTIRE.\n\nFuzzing iptables-restore\nBack in March I somehow came up with the idea of fuzzing iptables. I thought\nusing iptables-restore as the target binary would be a good idea, because I\ncould use AFL to supply iptables rules files to it.\n\nYou can save your current rules with iptables-save &gt; /",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://0day.work/"
    }
}
    </script>

    <meta name="generator" content="Ghost 3.42" />
    <link rel="alternate" type="application/rss+xml" title="Sebastian Neef - 0day.work" href="https://0day.work/rss/" />
    <style>
    .post img {
    	max-width: 50%;
        height: auto;
        display:block;
        margin: 0 auto;
    }
    .description i.read-more::before {
    	content: "read more...";
    }
    
    body {
        font-size: 1.7em;
    }
</style>
<link rel="stylesheet" href="/assets/css/jquery.fancybox.min.css" />

    <script type="text/javascript" src="/assets/js/jquery.js?v=e104868e81"></script>
    <script type="text/javascript" src="/assets/js/cookieconsent.min.js?v=e104868e81"></script>
    <script type="text/javascript" src="/assets/js/cookies.js?v=e104868e81"></script>

    <!--<link rel="stylesheet" href="/assets/css/default.css?v=e104868e81">-->
    
    <script src="/assets/js/highlight.pack.js?v=e104868e81"></script>
  
      <script>hljs.initHighlightingOnLoad();</script>


<script>

</script>
</head>
<body>
<div class="container">
<div class="row">
<div class="col-md-2 hidden-sm hidden-xs">

    <div class="logo">
<a class="blog-logo" href="https://0day.work">
        <img class="blog-logo-image" src="/content/images/2016/01/0day-1.png" alt="Blog Logo"/>
</a>
    </div>


<h5>Sebastian Neef - 0day.work</h5>
<hr>
<ul class="list-unstyled menu">
    <li>
        <a href="https://0day.work/">
         <i class="el el-home"></i> Home 
        </a>
    </li>
    <li>
        <a href="https://0day.work/contact/">
         <i class="el el-envelope"></i> Contact
        </a>
    </li>

    <li>
       <a href="https://twitter.com/0daywork" target="_blank">
            <i class="el el-twitter"></i> @0daywork
       </a>
    </li>

    <li>
        <a href="https://twitter.com/gehaxelt" target="_blank">
            <i class="el el-twitter"></i> @gehaxelt
        </a>
    </li>

    <li>
        <a href="https://it-solutions-neef.de/impressum.html" target="_blank">
            Impressum
        </a>
    </li>

    <li>
        <a href="https://it-solutions-neef.de/datenschutz.html" target="_blank">
           Datenschutz 
        </a>
    </li>


</ul>



</div>
<div class="col-md-10 col-xs-12">
    

<a href="/" class="read-more"><i class="el el-caret-left read-more"></i> home</a>
<hr>





<main  role="main">

    <article class="row post tag-cve tag-writeups no-image">

        <header class="col-xs-12">
        <div class="col-md-10 no-margin no-padding post">
            <h1 class="title">
            CVE-2019-11360: BufferOverflow in iptables-restore v1.8.2

            </h1>
             </div>
<div class="col-md-2">
            </div>

        </header>

        <section class="col-xs-12">
            <!--kg-card-begin: markdown--><p>This blogpost is about a BufferOverflow vulnerability which I found by fuzzing <code>iptables-restore</code> using AFL in March, 2019. It was fixed by the netfilter team in April 2019 and was assigned CVE-2019-11360 by MTIRE.</p>
<!-- more -->
<h1 id="fuzzingiptablesrestore">Fuzzing iptables-restore</h1>
<p>Back in March I somehow came up with the idea of fuzzing iptables. I thought using <code>iptables-restore</code> as the target binary would be a good idea, because I could use AFL to supply iptables rules files to it.</p>
<p>You can save your current rules with <code>iptables-save &gt; /tmp/rules</code> and restore them later (i.e. on boot) using <code>iptables-restore /tmp/rules</code>.</p>
<p>The test harness consisted of two such rules files that I took from my laptop and a server that I own. As iptables is the user-interface to the kernel's netfilter subsystem, the source code is open source and can be downloaded from <a href="https://git.netfilter.org/iptables/">the git.netfilter.org repository</a>.</p>
<p>To be honest, I can't remember for how long the master and slave AFL instance was fuzzing on my fuzzing-VM, but I think it was not longer than 1-2 weeks until the first crash showed up.</p>
<h1 id="bufferoverflowinadd_param_to_argv">BufferOverflow in add_param_to_argv</h1>
<p>I downloaded the crash file and used GDB to run it against the AFL-instrumented <code>iptables-restore</code> binary. The crash occurred in the function <code>add_param_to_argv</code> in <code>iptables/xshared.c</code>.</p>
<p>Having the source code, I started looking at the function and trying to understand why the crash occurred and if it was exploitable.</p>
<p>The vulnerable code <a href="https://git.netfilter.org/iptables/tree/iptables/xshared.c?h=v1.8.2">can be found in iptables v1.8.2</a> and looks like this:</p>
<pre><code class="language-plain">void add_param_to_argv(char *parsestart, int line)
{
	int quote_open = 0, escaped = 0, param_len = 0;
	char param_buffer[1024], *curchar;

	/* After fighting with strtok enough, here's now
	 * a 'real' parser. According to Rusty I'm now no
	 * longer a real hacker, but I can live with that */

	for (curchar = parsestart; *curchar; curchar++) {
		if (quote_open) {
			if (escaped) {
				param_buffer[param_len++] = *curchar;
				escaped = 0;
				continue;
			} else if (*curchar == '\\') {
				escaped = 1;
				continue;
			} else if (*curchar == '&quot;') {
				quote_open = 0;
				*curchar = '&quot;';
			} else {
				param_buffer[param_len++] = *curchar;
				continue;
			}
		} else {
			if (*curchar == '&quot;') {
				quote_open = 1;
				continue;
			}
		}

		switch (*curchar) {
		case '&quot;':
			break;
		case ' ':
		case '\t':
		case '\n':
			if (!param_len) {
				/* two spaces? */
				continue;
			}
			break;
		default:
			/* regular character, copy to buffer */
			param_buffer[param_len++] = *curchar;

			if (param_len &gt;= sizeof(param_buffer))
				xtables_error(PARAMETER_PROBLEM,
					      &quot;Parameter too long!&quot;);
			continue;
		}

		param_buffer[param_len] = '\0';

		/* check if table name specified */
		if ((param_buffer[0] == '-' &amp;&amp;
		     param_buffer[1] != '-' &amp;&amp;
		     strchr(param_buffer, 't')) ||
		    (!strncmp(param_buffer, &quot;--t&quot;, 3) &amp;&amp;
		     !strncmp(param_buffer, &quot;--table&quot;, strlen(param_buffer)))) {
			xtables_error(PARAMETER_PROBLEM,
				      &quot;The -t option (seen in line %u) cannot be used in %s.\n&quot;,
				      line, xt_params-&gt;program_name);
		}

		add_argv(param_buffer, 0);
		param_len = 0;
	}
}
</code></pre>
<p>The function is part of the argument parsing process of iptables, i.e. <code>-p tcp --dport &quot;&lt;some-argument-here&gt;&quot;</code>. It uses a fixed <code>param_buffer[1024]</code> on the stack and overflowing it leads to the crash.</p>
<p>A motivated reader will take a 5-minute break to look at the code and find the BoF himself ;-)</p>
<p>The <code>for</code>-loop goes over all characters of the string that is passed to the function through <code>char *parsestart</code>. In the lower part there is a <code>switch</code> blck which will match different characters and conduct a bounds check in the <code>default:</code> branch. If an argument is longer than the 1024-bytes <code>param_buffer</code>, then an error is thrown and the BoF prevented.</p>
<p>However, the upper part of the <code>for</code>-loop checks if an argument is quoted. If the <code>*curchar</code> equals <code>&quot;</code> then <code>quote_open</code> is set to <code>1</code> in the <code>else</code> branch and the loop starts over (<code>continue</code>). In the next iteration, it will enter the <code>if (quote_open)</code> branch. As long as no matching <code>&quot;</code> is found, the loop will stay in the upper part due to the <code>continue</code> statements:</p>
<pre><code class="language-plain">    param_buffer[param_len++] = *curchar;
    continue;
</code></pre>
<p>That means that it will never reach the bounds check in the lower part and copy as many characters as the <code>*parsestart</code> has to the stack, thereby overflowing the <code>param_buffer</code> and allowing an attacker to rewrite the stack.</p>
<h1 id="proofofconcept">Proof of Concept</h1>
<p>I started minifying the AFL-generated crash file and managed to create the following PoC iptables file which overwrites <code>RIP</code> with <code>0x414141414141</code>:</p>
<pre><code class="language-plain">*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -p tcp --dport &quot;aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaaczaadbaadcaaddaadeaadfaadgaadhaadiaadjaadkaadlaadmaadnaadoaadpaadqaadraadsaadtaaduaadvaadwaadxaadyaadzaaebaaecaaedaaeeaaefaaegaaehaaeiaaejaaekaaelaaemaaenaaeoaaepaaeqaaeraaesaaetaaeuaaevaaewaaexaaeyaaezaafbaafcaafdaafeaaffaafgaafhaafiaafjaafkaaflaafmaafnaafoaafpaafqaafraafsaaftaafuaafvaafwaafxaafyaafzaagbaagcaagdaageaagfaaggaaghaagiaagjaagkaaglaagmaagnaagoaagpaagqaagraagsaagtaaguaagvaagwaagxaagyaagzaahbaahcaahdaaheaahfaahgaahhaahiaahjaahkaahBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBAAAAAA&quot;
COMMIT
</code></pre>
<p><img src="https://0day.work/content/images/2019/07/poc.png" alt="poc"></p>
<p>One could argue that the severity of the issue is not high, because one already needs root privileges to run <code>iptables-restore</code> in a standard debian setup. So if an attacker is capable of running <code>iptables-restore</code>, then she already can do more harm to your system anyway. If an administrator can be convinced to apply unknown iptables rules files, then her system is most likely already compromised.</p>
<p>Furthermore, I had to disable all well-known security features like <code>NX</code>, <code>Canaries</code> and <code>PIE</code> to build this PoC. This means, that building a real-world exploit probably takes much more effort and/or is quite hard:</p>
<pre><code class="language-plain">$&gt; checksec -f /usr/bin/iptables-restore 
RELRO           STACK CANARY      NX            PIE             RPATH      RUNPATH	Symbols		FORTIFY	Fortified	Fortifiable  FILE
Full RELRO      Canary found      NX enabled    PIE enabled     No RPATH   No RUNPATH   No Symbols      Yes	7		12	/usr/bin/iptables-restore
</code></pre>
<p>All in all, I believe that this vulnerability can only be used for academic/educational purposes and has no particular real-world impact. [I'd really appreciate if you prove me wrong ;-)]</p>
<h1 id="patch">Patch</h1>
<p>As iptables is open source, I decided to try and come up with a patch myself. I took the easiest and most obvious approach of simply doing a bounds check at the beginning of the loop:</p>
<pre><code class="language-plain">fuzz@fuzzing:~/fuzzing/iptables/pkg-iptables/iptables# diff -Naur xshared.c.old xshared.c
--- xshared.c.old       2019-04-13 20:50:07.871158901 +0100
+++ xshared.c   2019-04-13 20:42:59.216774862 +0100
@@ -443,6 +443,10 @@
         * longer a real hacker, but I can live with that */

        for (curchar = parsestart; *curchar; curchar++) {
+               if (param_len &gt;= sizeof(param_buffer))
+                               xtables_error(PARAMETER_PROBLEM,
+                                             &quot;Parameter too long!&quot;);
+
                if (quote_open) {
                        if (escaped) {
                                param_buffer[param_len++] = *curchar;
@@ -479,10 +483,6 @@
                default:
                        /* regular character, copy to buffer */
                        param_buffer[param_len++] = *curchar;
-                       if (param_len &gt;= sizeof(param_buffer))
-                               xtables_error(PARAMETER_PROBLEM,
-                                             &quot;Parameter too long!&quot;);
-
                        continue;
                }
</code></pre>
<p>I sent the patch to Pablo in hopes to make his life easier. The netfilter team decided to completely rewrite my patch and, regarding to my more proficient C-developer friends, make it more readable.</p>
<p>The final patch can be found <a href="https://git.netfilter.org/iptables/commit/iptables/xshared.c?id=2ae1099a42e6a0f06de305ca13a842ac83d4683e">in their git repo</a> and looks like this:</p>
<pre><code class="language-plain">diff --git a/iptables/xshared.c b/iptables/xshared.c
index fb186fb1..36a2ec5f 100644
--- a/iptables/xshared.c
+++ b/iptables/xshared.c
@@ -433,10 +433,24 @@ void save_argv(void)
 	}
 }
 
+struct xt_param_buf {
+	char	buffer[1024];
+	int 	len;
+};
+
+static void add_param(struct xt_param_buf *param, const char *curchar)
+{
+	param-&gt;buffer[param-&gt;len++] = *curchar;
+	if (param-&gt;len &gt;= sizeof(param-&gt;buffer))
+		xtables_error(PARAMETER_PROBLEM,
+			      &quot;Parameter too long!&quot;);
+}
+
 void add_param_to_argv(char *parsestart, int line)
 {
-	int quote_open = 0, escaped = 0, param_len = 0;
-	char param_buffer[1024], *curchar;
+	int quote_open = 0, escaped = 0;
+	struct xt_param_buf param = {};
+	char *curchar;
 
 	/* After fighting with strtok enough, here's now
 	 * a 'real' parser. According to Rusty I'm now no
@@ -445,7 +459,7 @@ void add_param_to_argv(char *parsestart, int line)
 	for (curchar = parsestart; *curchar; curchar++) {
 		if (quote_open) {
 			if (escaped) {
-				param_buffer[param_len++] = *curchar;
+				add_param(&amp;param, curchar);
 				escaped = 0;
 				continue;
 			} else if (*curchar == '\\') {
@@ -455,7 +469,7 @@ void add_param_to_argv(char *parsestart, int line)
 				quote_open = 0;
 				*curchar = '&quot;';
 			} else {
-				param_buffer[param_len++] = *curchar;
+				add_param(&amp;param, curchar);
 				continue;
 			}
 		} else {
@@ -471,36 +485,32 @@ void add_param_to_argv(char *parsestart, int line)
 		case ' ':
 		case '\t':
 		case '\n':
-			if (!param_len) {
+			if (!param.len) {
 				/* two spaces? */
 				continue;
 			}
 			break;
 		default:
 			/* regular character, copy to buffer */
-			param_buffer[param_len++] = *curchar;
-
-			if (param_len &gt;= sizeof(param_buffer))
-				xtables_error(PARAMETER_PROBLEM,
-					      &quot;Parameter too long!&quot;);
+			add_param(&amp;param, curchar);
 			continue;
 		}
 
-		param_buffer[param_len] = '\0';
+		param.buffer[param.len] = '\0';
 
 		/* check if table name specified */
-		if ((param_buffer[0] == '-' &amp;&amp;
-		     param_buffer[1] != '-' &amp;&amp;
-		     strchr(param_buffer, 't')) ||
-		    (!strncmp(param_buffer, &quot;--t&quot;, 3) &amp;&amp;
-		     !strncmp(param_buffer, &quot;--table&quot;, strlen(param_buffer)))) {
+		if ((param.buffer[0] == '-' &amp;&amp;
+		     param.buffer[1] != '-' &amp;&amp;
+		     strchr(param.buffer, 't')) ||
+		    (!strncmp(param.buffer, &quot;--t&quot;, 3) &amp;&amp;
+		     !strncmp(param.buffer, &quot;--table&quot;, strlen(param.buffer)))) {
 			xtables_error(PARAMETER_PROBLEM,
 				      &quot;The -t option (seen in line %u) cannot be used in %s.\n&quot;,
 				      line, xt_params-&gt;program_name);
 		}
 
-		add_argv(param_buffer, 0);
-		param_len = 0;
+		add_argv(param.buffer, 0);
+		param.len = 0;
 	}
 }
</code></pre>
<h1 id="timeline">Timeline</h1>
<ul>
<li>03/05/2019 - Report sent to netfilter's coreteam mailing list</li>
<li>03/22/2019 - Resent email to Pablo Neira Ayuso, because it was somehow lost</li>
<li>04/17/2019 - Provided the netfilter team an initial patch / diff</li>
<li>04/XX/2019 - MITRE assigned CVE-2019-11360</li>
<li>04/22/2019 - Pablo rewrites and posts the patch for review</li>
<li>04/30/2019 - Patch is merged into iptables-restore</li>
<li>??/??/???? - iptables v.1.8.3 released</li>
<li>07/11/2019 - Blogpost published</li>
</ul>
<p>-=-</p>
<!--kg-card-end: markdown-->
        </section>

        <footer class="col-xs-12 author">
            
            <hr>

      
        </footer>

    </article>
    
</main>


</div>

</div>
</div>

    <footer class="page-footer">
      <div class="container">
        <div class="row">
          <div class="col-xs-6">
          <i class="el el-stop footer-icon"></i>
            &copy; 2021 <a href="https://0day.work">Sebastian Neef - 0day.work</a> All rights reserved.<br><br>
            Coder Ghost Theme created by <a href="https://www.mbejda.com">Milos Bejda</a>
          </div>
          <div class="col-xs-6 text-right hidden-sm hidden-xs">Proudly published with <a href="https://ghost.org">Ghost</a></div>
        </div>
      </div>
    </footer>

    <a href="#" class="back-to-top"><span class="fa fa-angle-up fa-2x"></span></a>

    <script src="/assets/js/jquery.fancybox.min.js?v=1"></script>
<script src="/assets/js/fancybox.js?v=1"></script>
<!-- Piwik -->
<script type="text/javascript">
  var _paq = _paq || [];
  /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
  _paq.push(["setDocumentTitle", document.domain + "/" + document.title]);
  _paq.push(["setCookieDomain", "*.0day.work"]);
  _paq.push(["setDomains", ["*.0day.work"]]);
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  (function() {
    var u="//piwik.neef.it/";
    _paq.push(['setTrackerUrl', u+'piwik.php']);
    _paq.push(['setSiteId', '10']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'piwik.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<noscript><p><img src="//piwik.neef.it/piwik.php?idsite=10&rec=1" style="border:0;" alt="" /></p></noscript>
<!-- End Piwik Code -->

    <script src="/assets/js/modernizr.js?v=e104868e81"></script>
    <script type="text/javascript" src="/assets/js/index.js?v=e104868e81"></script>

</body>
</html>
