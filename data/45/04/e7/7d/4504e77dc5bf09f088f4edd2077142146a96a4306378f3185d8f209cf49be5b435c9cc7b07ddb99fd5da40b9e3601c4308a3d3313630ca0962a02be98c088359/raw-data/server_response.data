<!DOCTYPE html>
<html lang="en">
  <head>
    <title>1608 &ndash; (CVE-2019-14575) DxeImageVerificationHandler() fails open in case of dbx signature check</title>

      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<link href="data/assets/75609f26e54e89ee3ae27c8744d7baad.css?1532037811" rel="stylesheet" type="text/css">



    
<script type="text/javascript" src="data/assets/a7c2f3a028f17a9aa60f56dc9d6e732d.js?1532037772"></script>

    <script type="text/javascript">
    <!--
        YAHOO.namespace('bugzilla');
        YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
               if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
               var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
               return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
         };
        if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
            YAHOO.util.Event._simpleRemove(window, "unload", 
                                           YAHOO.util.Event._unload);
        }
        
        function unhide_language_selector() { 
            YAHOO.util.Dom.removeClass(
                'lang_links_container', 'bz_default_hidden'
            ); 
        } 
        YAHOO.util.Event.onDOMReady(unhide_language_selector);

        
        var BUGZILLA = {
            param: {
                cookiepath: '\/',
                maxusermatches: 1000
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    "You must enter a Description for this attachment.",
                component_required:
                    "You must select a Component for this bug.",
                description_required:
                    "You must enter a Description for this bug.",
                short_desc_required:
                    "You must enter a Summary for this bug.",
                version_required:
                    "You must select a Version for this bug."
            }
              , api_token: ''
        };

    if (history && history.replaceState) {
      if(!document.location.href.match(/show_bug\.cgi/)) {
        history.replaceState( null,
                             "1608 – (CVE-2019-14575) DxeImageVerificationHandler() fails open in case of dbx signature check",
                             "show_bug.cgi?id=1608" );
        document.title = "1608 – (CVE-2019-14575) DxeImageVerificationHandler() fails open in case of dbx signature check";
      }
      if (document.location.href.match(/show_bug\.cgi\?.*list_id=/)) {
        var href = document.location.href;
        href = href.replace(/[\?&]+list_id=(\d+|cookie)/, '');
        history.replaceState(null, "1608 – (CVE-2019-14575) DxeImageVerificationHandler() fails open in case of dbx signature check", href);
      }
    }
    YAHOO.util.Event.onDOMReady(function() {
      initDirtyFieldTracking();

    });
    // -->
    </script>
<script type="text/javascript" src="data/assets/daf5e0fb6826e6a35280e622913f0c4a.js?1532039702"></script>

    

    
    <link rel="search" type="application/opensearchdescription+xml"
                       title="TianoCore TianoCore Bugzilla" href="./search_plugin.cgi">
    <link rel="shortcut icon" href="images/favicon.ico">
  </head>

  <body 
        class="bugzilla-tianocore-org
                 bz_bug
                 bz_status_RESOLVED
                 bz_product_EDK2
                 bz_component_Code
                 bz_bug_1608 yui-skin-sam">

  <div id="header"><div id="banner">
  </div>

    <div id="titles">
      <span id="title">TianoCore Bugzilla &ndash; Bug&nbsp;1608</span>

        <span id="subtitle" class="subheader">DxeImageVerificationHandler() fails open in case of dbx signature check</span>

        <span id="information" class="header_addl_info">Last modified: 2021-09-22 15:47:02 EDT</span>
    </div>


    <div id="common_links"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_top" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_top");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_top" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_top"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/5.0/using/understanding.html" target="_blank">Help</a>
      </li>
    

    <li id="mini_login_container_top">
  <span class="separator">| </span>
  <a id="login_link_top" href="show_bug.cgi?id=1608&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_top')">Log In</a>

  <form action="show_bug.cgi?id=1608" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_top">
    <input id="Bugzilla_login_top" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_top" required
           placeholder="Password">
      <input type="checkbox" id="Bugzilla_remember_top" 
             name="Bugzilla_remember" value="on" class="bz_remember"
             >
      <label for="Bugzilla_remember_top">Remember</label>
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_top">
    <a href="#" onclick="return hide_mini_login_form('_top')">[x]</a>
  </form>
</li>


  <li id="forgot_container_top">
    <span class="separator">| </span>
    <a id="forgot_link_top" href="show_bug.cgi?id=1608&amp;GoAheadAndLogIn=1#forgot"
       onclick="return show_forgot_form('_top')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_top"
          class="mini_forgot bz_default_hidden">
      <label for="login_top">Login:</label>
      <input name="loginname" size="20" id="login_top" required
          type="email" placeholder="Your Email Address">
      <input id="forgot_button_top" value="Reset Password" type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_top" name="token"
             value="1635630769-NJuZ8bRT8PccNNO2hB5Co0bsBfWid_YNz7I-UPBqRpA">
      <a href="#" onclick="return hide_forgot_form('_top')">[x]</a>
    </form>
  </li>
</ul>
    </div>
  </div>

  <div id="bugzilla-body">


<script type="text/javascript">
<!--

//-->
</script>

<form name="changeform" id="changeform" method="post" action="process_bug.cgi">

  <input type="hidden" name="delta_ts" value="2021-09-22 15:47:02">
  <input type="hidden" name="id" value="1608">
  <input type="hidden" name="token" value="1635630769-667x-PRP4FbGPHRCEiZETDX4vp9P6es-qjMN972GqxU">
<div class="bz_short_desc_container edit_form">
     <a href="show_bug.cgi?id=1608"><b>Bug&nbsp;1608</b></a> <span id="summary_container" class="bz_default_hidden">
        (<span id="alias_nonedit_display">CVE-2019-14575</span>)
      - <span id="short_desc_nonedit_display">DxeImageVerificationHandler() fails open in case of dbx signature check</span>
     </span>

    <div id="summary_input"><span class="field_label "
    id="field_label_short_desc">


  <a 
      title="The bug summary is a short sentence which succinctly describes what the bug is about."
      class="field_help_link"
      href="page.cgi?id=fields.html#short_desc"
  >Summary:</a>

</span>DxeImageVerificationHandler() fails open in case of dbx signature check
    </div>
  </div>
  <script type="text/javascript">
    hideEditableField('summary_container',
                      'summary_input',
                      'summary_edit_action',
                      'short_desc',
                      'DxeImageVerificationHandler() fails open in case of dbx signature check' );
  </script>
  <table class="edit_form">
    <tr>
      
      <td id="bz_show_bug_column_1" class="bz_show_bug_column">     
        <table>
          <tr>
    <th class="field_label">
      <a href="page.cgi?id=fields.html#bug_status">Status</a>:
    </th>
    <td id="bz_field_status">
      <span id="static_bug_status">RESOLVED
          FIXED
      </span>
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_alias">


  <a 
      title="A short, unique name assigned to a bug in order to assist with looking it up and referring to it in other places in Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#alias"
  >Alias:</a>

</th>
    <td>CVE-2019-14575
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_product">


  <a 
      title="Bugs are categorised into Products and Components."
      class="field_help_link"
      href="describecomponents.cgi"
  >Product:</a>

</th>
  <td class="field_value "
      id="field_container_product" >EDK2

</td>
    </tr>

    
    <tr class="bz_default_hidden"><th class="field_label "
    id="field_label_classification">


  <a 
      title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation."
      class="field_help_link"
      href="page.cgi?id=fields.html#classification"
  >Classification:</a>

</th>
  <td class="field_value "
      id="field_container_classification" >Unclassified

</td>
    </tr>
        
    
    
    <tr><th class="field_label "
    id="field_label_component">


  <a 
      title="Components are second-level categories; each belongs to a particular Product. Select a Product to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi?product=EDK2"
  >Component:</a>

</th>
  <td class="field_value "
      id="field_container_component" >Code

  (<a href="buglist.cgi?component=Code&amp;product=EDK2&amp;bug_status=__open__"
      target="_blank">show other bugs</a>)
</td>
    </tr>
    <tr><th class="field_label "
    id="field_label_version">


  <a 
      title="The version field defines the version of the software the bug was found in."
      class="field_help_link"
      href="page.cgi?id=fields.html#version"
  >Version:</a>

</th>
<td>Current
  </td>
    </tr>
        
    
        
    <tr><th class="field_label "
    id="field_label_rep_platform">


  <a 
      title="The hardware platform the bug was observed on. Note: When searching, selecting the option &quot;All&quot; only finds bugs whose value for this field is literally the word &quot;All&quot;."
      class="field_help_link"
      href="page.cgi?id=fields.html#rep_platform"
  >Hardware:</a>

</th>
      <td class="field_value">All
        All
      </td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          
          <tr>
      <th class="field_label">
        <label  accesskey="i">
          <a href="page.cgi?id=fields.html#importance"><u>I</u>mportance</a></label>:
      </th>
      <td>High
       major
      </td>
    </tr>
          
          <tr><th class="field_label "
    id="field_label_assigned_to">


  <a 
      title="The person in charge of resolving the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#assigned_to"
  >Assignee:</a>

</th>
      <td><span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
      </td>
    </tr>

    <script type="text/javascript">
      assignToDefaultOnChange(['product', 'component'],
        'unassigned\x40tianocore.org',
        '');
    </script>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          <tr><th class="field_label "
    id="field_label_bug_file_loc">


  <a 
      title="Bugs can have a URL associated with them - for example, a pointer to a web site where the problem is seen."
      class="field_help_link"
      href="page.cgi?id=fields.html#bug_file_loc"
  >URL:</a>

</th>
    <td>
      <span id="bz_url_input_area">
      </span>
    </td>
  </tr>


    <tr><th class="field_label "
    id="field_label_keywords">


  <a 
      title="You can add keywords from a defined list to bugs, in order to easily identify and group them."
      class="field_help_link"
      href="describekeywords.cgi"
  >Keywords:</a>

</th>
  <td class="field_value "
      id="field_container_keywords" >need_info

</td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>

          <tr>
    <th class="field_label">
      <label>Duplicates (2)</label>:
    </th>
    <td class="field_value">
      <span id="duplicates"><a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE"
   href="show_bug.cgi?id=1945">1945</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE"
   href="show_bug.cgi?id=2450">2450</a> 
      </span>
      (<a href="buglist.cgi?bug_id=1945,2450">view as bug list</a>)
    </td>
  </tr>
<tr><th class="field_label "
    id="field_label_dependson">


  <a 
      title="The bugs listed here must be resolved before this bug can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#dependson"
  >Depends on:</a>

</th>

  <td>
    <span id="dependson_input_area">
    </span>

  </td>
  </tr>
  
  <tr><th class="field_label "
    id="field_label_blocked">


  <a 
      title="This bug must be resolved before the bugs listed in this field can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#blocked"
  >Blocks:</a>

</th>

  <td>
    <span id="blocked_input_area">
    </span>

  </td>
  </tr>
          
        </table>
      </td>
      <td>
        <div class="bz_column_spacer">&nbsp;</div>
      </td>
      
      <td id="bz_show_bug_column_2" class="bz_show_bug_column">
        <table>
        <tr>
    <th class="field_label">
      Reported:
    </th>
    <td>2019-03-10 21:08 EDT by <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
    </td>
  </tr>
  
  <tr>
    <th class="field_label">
      Modified:
    </th>
    <td>2021-09-22 15:47 EDT
      (<a href="show_activity.cgi?id=1608">History</a>)
    </td>
  
  </tr>
<tr>
      <th class="field_label">
        <label  accesskey="a">
          CC List:
        </label>
      </th>
      <td>11 
          users
          <span id="cc_edit_area_showhide_container" class="bz_default_hidden">
            (<a href="#" id="cc_edit_area_showhide">show</a>)
          </span>
        <div id="cc_edit_area">
          <br>
            <select id="cc" multiple="multiple" size="5" >
                <option value="bret.barkelew">bret.barkelew</option>
                <option value="dick_wilkins">dick_wilkins</option>
                <option value="edk2+bugs+int+994+563148131503455288">edk2+bugs+int+994+563148131503455288</option>
                <option value="eugene">eugene</option>
                <option value="john.mathews">john.mathews</option>
                <option value="kimolsun2020">kimolsun2020</option>
                <option value="lersek">lersek</option>
                <option value="michael.d.kinney">michael.d.kinney</option>
                <option value="philmd">philmd</option>
                <option value="rschiron">rschiron</option>
                <option value="vincent.zimmer">vincent.zimmer</option>
            </select>
        </div>
          <script type="text/javascript">
            hideEditableField( 'cc_edit_area_showhide_container', 
                               'cc_edit_area', 
                               'cc_edit_area_showhide', 
                               '', 
                               '');  
          </script>
      </td>
    </tr>

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_see_also">


  <a 
      title="This allows you to refer to bugs in other installations. You can enter a URL to a bug in the 'Add Bug URLs' field to note that that bug is related to this one. You can enter multiple URLs at once by separating them with whitespace. You should normally use this field to refer to bugs in other installations. For bugs in this installation, it is better to use the Depends on and Blocks fields."
      class="field_help_link"
      href="page.cgi?id=fields.html#see_also"
  >See Also:</a>

</th>
  <td class="field_value "
      id="field_container_see_also" >

</td>
    </tr> 
<tr>
      <th class="field_label  bz_hidden_field"
    id="field_label_cf_industrystandardspecifications">


  <a 
      title="A custom Drop Down field in this installation of Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_industrystandardspecifications"
  >EDK II Code First industry standard specifications:</a>

</th>
  <td class="field_value  bz_hidden_field"
      id="field_container_cf_industrystandardspecifications" >---

</td>
    </tr>
    <tr>
      <th class="field_label "
    id="field_label_cf_branch">


  <a 
      title="Which github repository?"
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_branch"
  >Branch URL:</a>

</th>
  <td class="field_value "
      id="field_container_cf_branch" >

</td>
    </tr>
    <tr>
      <th class="field_label "
    id="field_label_cf_release_observed">


  <a 
      title="Release(s) the issue is observed"
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_release_observed"
  >Release(s) the issue is observed:</a>

</th>
  <td class="field_value "
      id="field_container_cf_release_observed" >EDK II Master

</td>
    </tr>
    <tr>
      <th class="field_label "
    id="field_label_cf_target_os">


  <a 
      title="The operating system the target platform is running when the issue is observed. If the issue is observed before an OS is booted, then use default '---'. Provide the detailed OS version information in the Description."
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_target_os"
  >The OS the target platform is running:</a>

</th>
  <td class="field_value "
      id="field_container_cf_target_os" >---

</td>
    </tr>
    <tr>
      <th class="field_label "
    id="field_label_cf_package">


  <a 
      title="A custom Multiple-Selection Box field in this installation of Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_package"
  >Package:</a>

</th>
  <td class="field_value "
      id="field_container_cf_package" >SecurityPkg

</td>
    </tr>
    <tr>
      <th class="field_label "
    id="field_label_cf_releases_to_fix">


  <a 
      title="Release(s) the issues must be fixed"
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_releases_to_fix"
  >Release(s) the issues must be fixed:</a>

</th>
  <td class="field_value "
      id="field_container_cf_releases_to_fix" >EDK II Master

</td>
    </tr>
    <tr>
      <th class="field_label  bz_hidden_field"
    id="field_label_cf_documents">


  <a 
      title="A custom Multiple-Selection Box field in this installation of Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_documents"
  >Tianocore documents:</a>

</th>
  <td class="field_value  bz_hidden_field"
      id="field_container_cf_documents" >

</td>
    </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>



        </table>
      </td>
    </tr>
    <tr>
      <td colspan="3">
          <hr id="bz_top_half_spacer">
      </td>
    </tr>
  </table>

  <table id="bz_big_form_parts">
  <tr>
  <td>

    
<script type="text/javascript">
<!--
function toggle_display(link) {
    var table = document.getElementById("attachment_table");
    var view_all = document.getElementById("view_all");
    var hide_obsolete_url_parameter = "&hide_obsolete=1";
    // Store current height for scrolling later
    var originalHeight = table.offsetHeight;
    var rows = YAHOO.util.Dom.getElementsByClassName(
        'bz_tr_obsolete', 'tr', table);

    for (var i = 0; i < rows.length; i++) {
        bz_toggleClass(rows[i], 'bz_default_hidden');
    }

    if (YAHOO.util.Dom.hasClass(rows[0], 'bz_default_hidden')) {
        link.innerHTML = "Show Obsolete";
        view_all.href = view_all.href + hide_obsolete_url_parameter 
    }
    else {
        link.innerHTML = "Hide Obsolete";
        view_all.href = view_all.href.replace(hide_obsolete_url_parameter,"");
    }

    var newHeight = table.offsetHeight;
    // This scrolling makes the window appear to not move at all.
    window.scrollBy(0, newHeight - originalHeight);

    return false;
}
//-->
</script>

<br>
<table id="attachment_table">
  <tr id="a0">
    <th colspan="2" class="left">
      Attachments
    </th>
  </tr>


      <tr id="a1" class="bz_contenttype_text_plain bz_patch bz_tr_obsolete bz_default_hidden">
        <td>
            <a href="attachment.cgi?id=356"
               title="View the content of the attachment">
          <b><span class="bz_obsolete">v1</span></b></a>

          <span class="bz_attach_extra_info">
              (15.17 KB,
                patch)

            <br>
            <a href="#attach_356"
               title="Go to the comment associated with the attachment">2019-06-03 01:11 EDT</a>,

            <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=356&amp;action=edit">Details</a>
            | <a href="attachment.cgi?id=356&amp;action=diff">Diff</a>
        </td>
      </tr>
      <tr id="a2" class="bz_contenttype_text_plain bz_patch bz_tr_obsolete bz_default_hidden">
        <td>
            <a href="attachment.cgi?id=357"
               title="View the content of the attachment">
          <b><span class="bz_obsolete">v2</span></b></a>

          <span class="bz_attach_extra_info">
              (15.17 KB,
                patch)

            <br>
            <a href="#attach_357"
               title="Go to the comment associated with the attachment">2019-06-13 17:05 EDT</a>,

            <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=357&amp;action=edit">Details</a>
            | <a href="attachment.cgi?id=357&amp;action=diff">Diff</a>
        </td>
      </tr>
      <tr id="a3" class="bz_contenttype_text_plain bz_patch bz_tr_obsolete bz_default_hidden">
        <td>
            <a href="attachment.cgi?id=368"
               title="View the content of the attachment">
          <b><span class="bz_obsolete">v3</span></b></a>

          <span class="bz_attach_extra_info">
              (15.94 KB,
                patch)

            <br>
            <a href="#attach_368"
               title="Go to the comment associated with the attachment">2019-07-25 02:16 EDT</a>,

            <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=368&amp;action=edit">Details</a>
            | <a href="attachment.cgi?id=368&amp;action=diff">Diff</a>
        </td>
      </tr>
      <tr id="a4" class="bz_contenttype_application_zip">
        <td>
            <a href="attachment.cgi?id=401"
               title="View the content of the attachment">
          <b>v4</b></a>

          <span class="bz_attach_extra_info">
              (11.13 KB,
                application/zip)

            <br>
            <a href="#attach_401"
               title="Go to the comment associated with the attachment">2019-09-20 02:11 EDT</a>,

            <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=401&amp;action=edit">Details</a>
        </td>
      </tr>
      <tr id="a5" class="bz_contenttype_application_zip">
        <td>
            <a href="attachment.cgi?id=411"
               title="View the content of the attachment">
          <b>proposed restructuring of v4 patches 3/6 and 4/6</b></a>

          <span class="bz_attach_extra_info">
              (4.81 KB,
                application/zip)

            <br>
            <a href="#attach_411"
               title="Go to the comment associated with the attachment">2019-09-25 08:03 EDT</a>,

            <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=411&amp;action=edit">Details</a>
        </td>
      </tr>
      <tr id="a6" class="bz_contenttype_application_x-zip-compressed">
        <td>
            <a href="attachment.cgi?id=418"
               title="View the content of the attachment">
          <b>v5</b></a>

          <span class="bz_attach_extra_info">
              (13.66 KB,
                application/x-zip-compressed)

            <br>
            <a href="#attach_418"
               title="Go to the comment associated with the attachment">2019-10-10 04:31 EDT</a>,

            <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=418&amp;action=edit">Details</a>
        </td>
      </tr>

  <tr class="bz_attach_footer">
    <td colspan="2">
        <span class="bz_attach_view_hide">
            <a href="#a0" onclick="return toggle_display(this);">Show
              Obsolete</a> (3)
        </span>
        <a href="attachment.cgi?bugid=1608&amp;action=enter">Add an attachment</a>
        (proposed patch, testcase, etc.)
    </td>
  </tr>
</table>
<br>
<div id="add_comment" class="bz_section_additional_comments">
      <table>
        <tr>
          <td>
            <fieldset>
              <legend>Note</legend>
              You need to
              <a href="show_bug.cgi?id=1608&amp;GoAheadAndLogIn=1">log in</a>
              before you can comment on or make changes to this bug.
            </fieldset>
          </td>
        </tr> 
      </table>
  </div>
  </td>
  <td>
  </td>
  </tr></table>

  
  <div id="comments"><script src="js/comments.js?1458056812" type="text/javascript">
</script>

<script type="text/javascript">
<!--
  /* Adds the reply text to the 'comment' textarea */
  function replyToComment(id, real_id, name) {
      var prefix = "(In reply to " + name + " from comment #" + id + ")\n";
      var replytext = "";
        /* pre id="comment_name_N" */
        var text_elem = document.getElementById('comment_text_'+id);
        var text = getText(text_elem);
        replytext = prefix + wrapReplyText(text);


      /* <textarea id="comment"> */
      var textarea = document.getElementById('comment');
      if (textarea.value != replytext) {
          textarea.value += replytext;
      }

      textarea.focus();
  } 
//-->
</script>


<!-- This auto-sizes the comments and positions the collapse/expand links 
     to the right. -->
<table class="bz_comment_table">
<tr>
<td>
<div id="c0" class="bz_comment bz_first_comment">

      <div class="bz_first_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c0">Description</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-03-10 21:08:46 EDT
        </span>

      </div>




<pre class="bz_comment_text">\securitypkg\library\dxeimageverificationlib\DxeImageVerificationLib.c


Threat and Impact:
DxeImageVerificationHandler() has specific code to handle .efis that aren't signed, but should be allowed to run. To do this, it hashes the .efi image, and then compares the image against a blacklist (dbx) and a whitelist (db). A situation could occur where a hash is both in the dbx and db list. This is supposed to fail. since it's in the dbx list.

Because of the way a signature is looked up in dbx (using IsSignatureFoundInDatabase() return value) any failure (e.g. allocation failure, looking up the variable failure, ...) will be seen as signature not found in database. This logic allows for bypassing the dbx looking, meaning if an .efi image is both in the dbx and db list, it's not supposed to load, but the fail open can make it so it will load.</pre>
    </div>

    <div id="c1" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c1">Comment 1</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-03-10 21:30:38 EDT
        </span>

      </div>




<pre class="bz_comment_text">+++++ czhan46 3/6/2019 7:30:03 AM

need to enforce all error handling return to deny module execution</pre>
    </div>

    <div id="c2" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c2">Comment 2</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-06-03 01:11:07 EDT
        </span>

      </div>




<pre class="bz_comment_text">Created <span class="bz_obsolete"><a href="attachment.cgi?id=356&amp;action=diff" name="attach_356" title="v1">attachment 356</a> <a href="attachment.cgi?id=356&amp;action=edit" title="v1">[details]</a></span>
v1

Patch attached.</pre>
    </div>

    <div id="c3" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c3">Comment 3</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-06-13 17:05:39 EDT
        </span>

      </div>




<pre class="bz_comment_text">Created <span class="bz_obsolete"><a href="attachment.cgi?id=357&amp;action=diff" name="attach_357" title="v2">attachment 357</a> <a href="attachment.cgi?id=357&amp;action=edit" title="v2">[details]</a></span>
v2</pre>
    </div>

    <div id="c4" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c4">Comment 4</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Bret Barkelew</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-06-25 16:49:15 EDT
        </span>

      </div>




<pre class="bz_comment_text">Patch v2 looks good. What’s the timeline for release?</pre>
    </div>

    <div id="c5" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c5">Comment 5</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Dick Wilkins</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-07-01 20:02:21 EDT
        </span>

      </div>




<pre class="bz_comment_text">Phoenix would also like to know if this patch is ready to be rolled out to our OEM customers. Also, has the embargo time clock started running? (Is this the &quot;official&quot; patch?)</pre>
    </div>

    <div id="c6" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c6">Comment 6</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Bret Barkelew</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-07-15 12:30:57 EDT
        </span>

      </div>




<pre class="bz_comment_text">Upon integration, there's a couple of problems with this patch.

1) In IsForbiddenByDbx(), IsForbidden needs to be set to FALSE after the final for-loop, otherwise the TRUE default will reject anything that wasn't found as a hash.
2) In IsAllowedByDb(), VerifyStatus needs to be set to TRUE after IsCertHashFoundInDatabase() in the case where there was no error, but IsFound == FALSE.

These changes can be seen in the following commit in our Mu security patch repo. Currently, anyone with permission to view the TianoCore security bugs is welcome to request access to this repo. We intend to maintain it going forward as each Mu release stabilizes.

<a href="https://dev.azure.com/projectmu/Mu_Security_Private_Release/_git/mu_basecore/commit/d5b1dc4e8c1da98c2adea64ccd0208e75535b0db">https://dev.azure.com/projectmu/Mu_Security_Private_Release/_git/mu_basecore/commit/d5b1dc4e8c1da98c2adea64ccd0208e75535b0db</a>

If you can't view the commit, email me (<a href="mailto:bret.barkelew&#64;microsoft.com">bret.barkelew&#64;microsoft.com</a>) to request access.</pre>
    </div>

    <div id="c7" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c7">Comment 7</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-07-22 11:13:32 EDT
        </span>

      </div>




<pre class="bz_comment_text">Bret and Dick,

Per current process, once an issue has solution (patch tested and attached), there'll be a 6-month embargo period before disclosing. I'd assume the embargo starting from June.

Jian</pre>
    </div>

    <div id="c8" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c8">Comment 8</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-07-22 11:14:59 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Bret Barkelew from <a href="show_bug.cgi?id=1608#c6">comment #6</a>)
<span class="quote">&gt; Upon integration, there's a couple of problems with this patch.
&gt; 
&gt; 1) In IsForbiddenByDbx(), IsForbidden needs to be set to FALSE after the
&gt; final for-loop, otherwise the TRUE default will reject anything that wasn't
&gt; found as a hash.
&gt; 2) In IsAllowedByDb(), VerifyStatus needs to be set to TRUE after
&gt; IsCertHashFoundInDatabase() in the case where there was no error, but
&gt; IsFound == FALSE.
&gt; 
&gt; These changes can be seen in the following commit in our Mu security patch
&gt; repo. Currently, anyone with permission to view the TianoCore security bugs
&gt; is welcome to request access to this repo. We intend to maintain it going
&gt; forward as each Mu release stabilizes.
&gt; 
&gt; <a href="https://dev.azure.com/projectmu/Mu_Security_Private_Release/_git/mu_basecore/">https://dev.azure.com/projectmu/Mu_Security_Private_Release/_git/mu_basecore/</a>
&gt; commit/d5b1dc4e8c1da98c2adea64ccd0208e75535b0db
&gt; 
&gt; If you can't view the commit, email me (<a href="mailto:bret.barkelew&#64;microsoft.com">bret.barkelew&#64;microsoft.com</a>) to
&gt; request access.</span >

Thanks for catching the problems. I've sent you email for the repo access. Once I confirmed them I'll upload the v3 patch here.</pre>
    </div>

    <div id="c9" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c9">Comment 9</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-07-24 21:34:52 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Bret Barkelew from <a href="show_bug.cgi?id=1608#c6">comment #6</a>)
<span class="quote">&gt; Upon integration, there's a couple of problems with this patch.
&gt; 
&gt; 1) In IsForbiddenByDbx(), IsForbidden needs to be set to FALSE after the
&gt; final for-loop, otherwise the TRUE default will reject anything that wasn't
&gt; found as a hash.</span >

I think IsForbidden should not be set to FALSE after final for-loop. If the function can run to the final for-loop, the IsForbidden must be FALSE. If the AuthData data can pass timestamp check, the IsForbidden is set to FALSE and code logic can reach the point after for-loop. Otherwise, the code logic just jump to Done label. So there's no need to set it to FALSE after the for-loop, unless you think the CertNumber==0 is a valid situation.</pre>
    </div>

    <div id="c10" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c10">Comment 10</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-07-25 02:16:42 EDT
        </span>

      </div>




<pre class="bz_comment_text">Created <span class="bz_obsolete"><a href="attachment.cgi?id=368&amp;action=diff" name="attach_368" title="v3">attachment 368</a> <a href="attachment.cgi?id=368&amp;action=edit" title="v3">[details]</a></span>
v3

v3 changes:
  a. incorporate Bret's fixes
  b. fix two more issues:
     1) check CertNumber against zero in IsForbiddenByDbx()
     2) init DbxDataSize to 0 before testing the variable size in IsAllowedByDb()</pre>
    </div>

    <div id="c11" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c11">Comment 11</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-07-25 02:19:03 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Wang, Jian J from <a href="show_bug.cgi?id=1608#c9">comment #9</a>)
<span class="quote">&gt; (In reply to Bret Barkelew from <a href="show_bug.cgi?id=1608#c6">comment #6</a>)
&gt; &gt; Upon integration, there's a couple of problems with this patch.
&gt; &gt; 
&gt; &gt; 1) In IsForbiddenByDbx(), IsForbidden needs to be set to FALSE after the
&gt; &gt; final for-loop, otherwise the TRUE default will reject anything that wasn't
&gt; &gt; found as a hash.
&gt; 
&gt; I think IsForbidden should not be set to FALSE after final for-loop. If the
&gt; function can run to the final for-loop, the IsForbidden must be FALSE. If
&gt; the AuthData data can pass timestamp check, the IsForbidden is set to FALSE
&gt; and code logic can reach the point after for-loop. Otherwise, the code logic
&gt; just jump to Done label. So there's no need to set it to FALSE after the
&gt; for-loop, unless you think the CertNumber==0 is a valid situation.</span >

Forget my above comment. Your change is correct. I uploaded v3 patch, which includes two more issues we found besides your changes.</pre>
    </div>

    <div id="c12" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c12">Comment 12</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Bret Barkelew</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-07-25 17:00:03 EDT
        </span>

      </div>




<pre class="bz_comment_text">Thanks!</pre>
    </div>

    <div id="c13" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c13">Comment 13</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-08-01 15:57:48 EDT
        </span>

      </div>




<pre class="bz_comment_text">Jian,

can you please assign a CVE number to this vulnerability?

And once you have the CVE ID, can you please add it to the Alias field on this bugzilla ticket?

Thank you.</pre>
    </div>

    <div id="c14" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c14">Comment 14</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-08-01 15:59:41 EDT
        </span>

      </div>




<pre class="bz_comment_text">This issue affects all OvmfPkg platforms that are built with -D SECURE_BOOT_ENABLE.

The issue doesn't affect ArmVirtPkg platforms (as none of those support secure boot yet).</pre>
    </div>

    <div id="c15" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c15">Comment 15</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Dick Wilkins</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-08-01 16:04:02 EDT
        </span>

      </div>




<pre class="bz_comment_text">Is this patch now considered &quot;the solution&quot;? And the embargo period starts from when v3 was available? That is Jul 25, 2019 thru Jan 25, 2020.</pre>
    </div>

    <div id="c16" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c16">Comment 16</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-08-02 06:26:54 EDT
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE"
   href="show_bug.cgi?id=1945">Bug 1945</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c17" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c17">Comment 17</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-08-02 18:40:21 EDT
        </span>

      </div>




<pre class="bz_comment_text">(actually I'm going to remove the RHBZ downstream tracker from See Also -- not necessarily because I want to keep that information hidden (the RHBZ is private anyway), but because vendor BZ references just clutter the See Also field, they are useless to all TianoCore BZ users except the one vendor in question)</pre>
    </div>

    <div id="c18" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c18">Comment 18</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-03 07:53:43 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Wang, Jian J from <a href="show_bug.cgi?id=1608#c10">comment #10</a>)
<span class="quote">&gt; Created <span class="bz_obsolete"><a href="attachment.cgi?id=368&amp;action=diff" name="attach_368" title="v3">attachment 368</a> <a href="attachment.cgi?id=368&amp;action=edit" title="v3">[details]</a></span>
&gt; v3</span >

My comments:

<span class="quote">&gt;| diff --git a/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.c b/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.c
&gt;| index fe4cdccedd..de1b39166a 100644
&gt;| --- a/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.c
&gt;| +++ b/SecurityPkg/Library/DxeImageVerificationLib/DxeImageVerificationLib.c
&gt;| &#64;&#64; -821,22 +821,23 &#64;&#64; AddImageExeInfo (
&gt;|    &#64;param[in]  SignatureList     Pointer to the Signature List in forbidden database.
&gt;|    &#64;param[in]  SignatureListSize Size of Signature List.
&gt;|    &#64;param[out] RevocationTime    Return the time that the certificate was revoked.
&gt;| +  &#64;param[in]  IsFound           Search result.</span >

(1) &quot;IsFound&quot; is an output parameter, not an input parameter.

(2) Please document explicitly that the caller should only consult
&quot;IsFound&quot; in case EFI_SUCCESS is returned.

<span class="quote">&gt;|
&gt;| -  &#64;return TRUE   The certificate hash is found in the forbidden database.
&gt;| -  &#64;return FALSE  The certificate hash is not found in the forbidden database.
&gt;| +  &#64;return EFI_SUCCESS           Finished the search without any error.
&gt;| +  &#64;return Others                Error occurred in the search of database.</span >

(3) The EFI_SUCCESS return value should not be documented with &#64;return;
it should be &#64;retval.

<span class="quote">&gt;|    //
&gt;|    // Retrieve the TBSCertificate from the X.509 Certificate.
&gt;|    //
&gt;|    if (!X509GetTBSCert (Certificate, CertSize, &amp;TBSCert, &amp;TBSCertSize)) {
&gt;| -    return FALSE;
&gt;| +    goto Done;
&gt;|    }</span >

(4) I think the &quot;goto Done&quot; is unjustified here. It needlessly
complicates the control flow. At this point we have *certainly* not
allocated &quot;HashCtx&quot;. Therefore we should simply write &quot;return Status&quot;.
(Status is set to EFI_ABORTED at this point.)

<span class="quote">&gt;| &#64;&#64; -894,16 +896,13 &#64;&#64; IsCertHashFoundInDatabase (
&gt;|      if (HashCtx == NULL) {
&gt;|        goto Done;
&gt;|      }
&gt;| -    Status = mHash[HashAlg].HashInit (HashCtx);
&gt;| -    if (!Status) {
&gt;| +    if (!mHash[HashAlg].HashInit (HashCtx)) {
&gt;|        goto Done;
&gt;|      }
&gt;| -    Status = mHash[HashAlg].HashUpdate (HashCtx, TBSCert, TBSCertSize);
&gt;| -    if (!Status) {
&gt;| +    if (!mHash[HashAlg].HashUpdate (HashCtx, TBSCert, TBSCertSize)) {
&gt;|        goto Done;
&gt;|      }
&gt;| -    Status = mHash[HashAlg].HashFinal (HashCtx, CertDigest);
&gt;| -    if (!Status) {
&gt;| +    if (!mHash[HashAlg].HashFinal (HashCtx, CertDigest)) {
&gt;|        goto Done;
&gt;|      }
&gt;|</span >

(5) Here we have an independent (preexistent) bug. We should fix it --
in a separate patch.

Namely, we call AllocatePool() in the loop, but we don't free &quot;HashCtx&quot;
in the loop!

Therefore, right after the HashFinal() call succeeds, we should do:

  FreePool (HashCtx);
  HashCtx = NULL;

<span class="quote">&gt;| &#64;&#64; -934,12 +934,14 &#64;&#64; IsCertHashFoundInDatabase (
&gt;|      DbxList  = (EFI_SIGNATURE_LIST *) ((UINT8 *) DbxList + DbxList-&gt;SignatureListSize);
&gt;|    }
&gt;|
&gt;| +  Status   = EFI_SUCCESS;
&gt;| +</span >

(6) The extra whitespace is unwarranted for, in this case.

<span class="quote">&gt;|  Done:
&gt;|    if (HashCtx != NULL) {
&gt;|      FreePool (HashCtx);
&gt;|    }
&gt;|
&gt;| -  return IsFound;
&gt;| +  return Status;
&gt;|  }
&gt;|
&gt;|  /**</span >

Other than those cosmetic problems, the updates to
IsCertHashFoundInDatabase() look OK to me.

<span class="quote">&gt;| &#64;&#64; -949,17 +951,19 &#64;&#64; Done:
&gt;|    &#64;param[in]  Signature           Pointer to signature that is searched for.
&gt;|    &#64;param[in]  CertType            Pointer to hash algrithom.
&gt;|    &#64;param[in]  SignatureSize       Size of Signature.
&gt;| +  &#64;param[in]  IsFound             Search result.</span >

(7) Same as (1).

(8) Same as (2).

<span class="quote">&gt;|
&gt;| -  &#64;return TRUE                    Found the signature in the variable database.
&gt;| -  &#64;return FALSE                   Not found the signature in the variable database.
&gt;| +  &#64;return EFI_SUCCESS             Finished the search without any error.
&gt;| +  &#64;return Others                  Error occurred in the search of database.</span >

(9) Same as (3).


<span class="quote">&gt;|  **/
&gt;| -BOOLEAN
&gt;| +EFI_STATUS
&gt;|  IsSignatureFoundInDatabase (
&gt;| -  IN CHAR16             *VariableName,
&gt;| -  IN UINT8              *Signature,
&gt;| -  IN EFI_GUID           *CertType,
&gt;| -  IN UINTN              SignatureSize
&gt;| +  IN  CHAR16            *VariableName,
&gt;| +  IN  UINT8             *Signature,
&gt;| +  IN  EFI_GUID          *CertType,
&gt;| +  IN  UINTN             SignatureSize,
&gt;| +  OUT BOOLEAN           *IsFound
&gt;|    )</span >

(10) The IsSignatureFoundInDatabase() update (and the call site updates)
should be split to a separate patch, from the
IsCertHashFoundInDatabase() patch.

Larger patches are more difficult to review, and both functions can be
isolated from each other.

<span class="quote">&gt;|  {
&gt;|    EFI_STATUS          Status;
&gt;| &#64;&#64; -969,22 +973,29 &#64;&#64; IsSignatureFoundInDatabase (
&gt;|    UINT8               *Data;
&gt;|    UINTN               Index;
&gt;|    UINTN               CertCount;
&gt;| -  BOOLEAN             IsFound;
&gt;|
&gt;|    //
&gt;|    // Read signature database variable.
&gt;|    //
&gt;| -  IsFound   = FALSE;
&gt;| +  *IsFound  = FALSE;
&gt;|    Data      = NULL;
&gt;|    DataSize  = 0;
&gt;|    Status    = gRT-&gt;GetVariable (VariableName, &amp;gEfiImageSecurityDatabaseGuid, NULL, &amp;DataSize, NULL);
&gt;|    if (Status != EFI_BUFFER_TOO_SMALL) {
&gt;| -    return FALSE;
&gt;| +    if (Status == EFI_NOT_FOUND) {
&gt;| +      //
&gt;| +      // No database, no need to search, or search has been done already.</span >

(11) I don't understand the &quot;search has been done already&quot; part -- why
does the EFI_NOT_FOUND return code imply an earlier search?

<span class="quote">&gt;| +      //
&gt;| +      Status = EFI_SUCCESS;
&gt;| +    } else {
&gt;| +      Status = EFI_ABORTED;
&gt;| +    }
&gt;| +    goto Done;
&gt;|    }</span >

(12) How about the following instead:

  Status = gRT-&gt;GetVariable (...);
  ASSERT (EFI_ERROR (Status));
  if (Status != EFI_BUFFER_TOO_SMALL) {
    if (Status == EFI_NOT_FOUND) {
      //
      // No database, no need to search
      //
      Status = EFI_SUCCESS;
    }
    return Status;
  }

Due to three considerations:

- with DataSize=0 on input, gRT-&gt;GetVariable() can never succeed,

- if gRT-&gt;GetVariable() fails with an error code that is different from
  both EFI_BUFFER_TOO_SMALL and EFI_NOT_FOUND, then we don't need to
  overwrite that error code with EFI_ABORTED; we can just propagate the
  error outwards. The interface contract forbids the caller from
  consuming &quot;IsFound&quot; on any error.

- We haven't allocated anything yet; no need for complicating the
  control flow with a &quot;goto&quot;.

If you disagree, I won't insist -- the v3 code above is not wrong, it's
just a bit too hard to reason about (at least for me).

<span class="quote">&gt;|
&gt;|    Data = (UINT8 *) AllocateZeroPool (DataSize);
&gt;|    if (Data == NULL) {
&gt;| -    return FALSE;
&gt;| +    goto Done;
&gt;|    }</span >

(13) Again, not a bug per se, just difficult to reason about -- with the
&quot;goto&quot; here, we rely on &quot;Status&quot; being set to EFI_BUFFER_TOO_SMALL, by
gRT-&gt;GetVariable().

In addition, the &quot;goto&quot; is unnecessary in the first place; we haven't
allocated anything yet.

I think it would be cleaner to write:

  return EFI_OUT_OF_RESOURCES;

<span class="quote">&gt;|
&gt;|    Status = gRT-&gt;GetVariable (VariableName, &amp;gEfiImageSecurityDatabaseGuid, NULL, &amp;DataSize, Data);
&gt;| &#64;&#64; -1004,22 +1015,18 &#64;&#64; IsSignatureFoundInDatabase (
&gt;|            //
&gt;|            // Find the signature in database.
&gt;|            //
&gt;| -          IsFound = TRUE;
&gt;| +          *IsFound = TRUE;
&gt;|            //
&gt;|            // Entries in UEFI_IMAGE_SECURITY_DATABASE that are used to validate image should be measured
&gt;|            //
&gt;|            if (StrCmp(VariableName, EFI_IMAGE_SECURITY_DATABASE) == 0) {
&gt;|              SecureBootHook (VariableName, &amp;gEfiImageSecurityDatabaseGuid, CertList-&gt;SignatureSize, Cert);
&gt;|            }
&gt;| -          break;
&gt;| +          goto Done;
&gt;|          }
&gt;|
&gt;|          Cert = (EFI_SIGNATURE_DATA *) ((UINT8 *) Cert + CertList-&gt;SignatureSize);
&gt;|        }
&gt;| -
&gt;| -      if (IsFound) {
&gt;| -        break;
&gt;| -      }
&gt;|      }
&gt;|</span >

(14) While the code is not wrong, I disagee about replacing the &quot;break&quot;
statements with &quot;goto&quot;. For two reasons:

- This change is orthogonal to the bug being fixed, therefore it should
  be in a separate patch, minimally. (The same replacement could be done
  using the original &quot;IsFound&quot; BOOLEAN variable.)

- According to the edk2 C Coding Standards, &quot;goto&quot; should be used for
  error handling, at the most. (I realize that the other function,
  IsCertHashFoundInDatabase(), breaks that rule even before this patch.)

If you really value consistency with IsCertHashFoundInDatabase() over
the CCS, then at least split this change to a separate patch, please.

<span class="quote">&gt;|      DataSize -= CertList-&gt;SignatureListSize;
&gt;| &#64;&#64; -1031,7 +1038,7 &#64;&#64; Done:
&gt;|      FreePool (Data);
&gt;|    }
&gt;|
&gt;| -  return IsFound;
&gt;| +  return Status;
&gt;|  }
&gt;|
&gt;|  /**
&gt;| &#64;&#64; -1212,6 +1219,7 &#64;&#64; IsForbiddenByDbx (
&gt;|  {
&gt;|    EFI_STATUS                Status;
&gt;|    BOOLEAN                   IsForbidden;
&gt;| +  BOOLEAN                   IsFound;
&gt;|    UINT8                     *Data;
&gt;|    UINTN                     DataSize;
&gt;|    EFI_SIGNATURE_LIST        *CertList;
&gt;| &#64;&#64; -1233,7 +1241,7 &#64;&#64; IsForbiddenByDbx (
&gt;|    //
&gt;|    // Variable Initialization
&gt;|    //
&gt;| -  IsForbidden       = FALSE;
&gt;| +  IsForbidden       = TRUE;
&gt;|    Data              = NULL;
&gt;|    CertList          = NULL;
&gt;|    CertData          = NULL;
&gt;| &#64;&#64; -1251,16 +1259,22 &#64;&#64; IsForbiddenByDbx (
&gt;|    DataSize = 0;
&gt;|    Status   = gRT-&gt;GetVariable (EFI_IMAGE_SECURITY_DATABASE1, &amp;gEfiImageSecurityDatabaseGuid, NULL, &amp;DataSize, NULL);
&gt;|    if (Status != EFI_BUFFER_TOO_SMALL) {
&gt;| -    return IsForbidden;
&gt;| +    if (Status == EFI_NOT_FOUND) {
&gt;| +      //
&gt;| +      // Apparently not in dbx if the database doesn't exist.
&gt;| +      //
&gt;| +      IsForbidden = FALSE;
&gt;| +    }
&gt;| +    goto Done;
&gt;|    }</span >

(15) How about the following instead:

  Status = gRT-&gt;GetVariable (...);
  ASSERT (EFI_ERROR (Status));
  if (Status != EFI_BUFFER_TOO_SMALL) {
    if (Status == EFI_NOT_FOUND) {
      //
      // Evidently not in dbx if the database doesn't exist.
      //
      IsForbidden = FALSE;
    }
    return IsForbidden;
  }

Due to the following considerations:

- With DataSize=0, GetVariable cannot succeed. Be clear about that.

- We haven't allocated anything yet, so no need to jump to the Done
  label. The goto needlessly complicates the control flow.

- According to the English wiktionary, in modern speech, &quot;apparently&quot;
  primarily means &quot;seemingly&quot;. What you mean is &quot;evidently&quot; (which is
  only an archaic meaning of the word &quot;apparently&quot;).
  &lt;<a href="https://en.wiktionary.org/wiki/apparently">https://en.wiktionary.org/wiki/apparently</a>&gt;

Again, the code is not wrong, but it could be improved for clarity's
sake.

<span class="quote">&gt;|    Data = (UINT8 *) AllocateZeroPool (DataSize);
&gt;|    if (Data == NULL) {
&gt;| -    return IsForbidden;
&gt;| +    goto Done;
&gt;|    }</span >

(16) This change is unneeded, en bloc. We haven't allocated anything
yet.

<span class="quote">&gt;|
&gt;|    Status = gRT-&gt;GetVariable (EFI_IMAGE_SECURITY_DATABASE1, &amp;gEfiImageSecurityDatabaseGuid, NULL, &amp;DataSize, (VOID *) Data);
&gt;|    if (EFI_ERROR (Status)) {
&gt;| -    return IsForbidden;
&gt;| +    goto Done;
&gt;|    }
&gt;|
&gt;|    //
&gt;| &#64;&#64; -1322,7 +1336,7 &#64;&#64; IsForbiddenByDbx (
&gt;|    //       UINT8  Certn[];
&gt;|    //
&gt;|    Pkcs7GetSigners (AuthData, AuthDataSize, &amp;CertBuffer, &amp;BufferLength, &amp;TrustedCert, &amp;TrustedCertLength);
&gt;| -  if ((BufferLength == 0) || (CertBuffer == NULL)) {
&gt;| +  if ((BufferLength == 0) || (CertBuffer == NULL) || (*CertBuffer) == 0) {
&gt;|      IsForbidden = TRUE;
&gt;|      goto Done;
&gt;|    }</span >

(17) The nullity check on (*CertBuffer) seems entirely orthogonal to the
present patch. I can't tell off-hand if this change is valid and/or
necessary, but minimally, it should be split to a separate patch.


<span class="quote">&gt;| &#64;&#64; -1340,12 +1354,13 &#64;&#64; IsForbiddenByDbx (
&gt;|      //
&gt;|      CertPtr = CertPtr + sizeof (UINT32) + CertSize;
&gt;|
&gt;| -    if (IsCertHashFoundInDatabase (Cert, CertSize, (EFI_SIGNATURE_LIST *)Data, DataSize, &amp;RevocationTime)) {
&gt;| +    Status = IsCertHashFoundInDatabase (Cert, CertSize, (EFI_SIGNATURE_LIST *)Data, DataSize, &amp;RevocationTime, &amp;IsFound);
&gt;| +    if (EFI_ERROR (Status) || IsFound) {
&gt;|        //
&gt;|        // Check the timestamp signature and signing time to determine if the image can be trusted.
&gt;|        //
&gt;|        IsForbidden = TRUE;
&gt;| -      if (PassTimestampCheck (AuthData, AuthDataSize, &amp;RevocationTime)) {
&gt;| +      if (IsFound &amp;&amp; PassTimestampCheck (AuthData, AuthDataSize, &amp;RevocationTime)) {
&gt;|          IsForbidden = FALSE;
&gt;|          //
&gt;|          // Pass DBT check. Continue to check other certs in image signer's cert list against DBX, DBT</span >

(18) The change is incorrect. We may have reached that location due to:

(a) IsCertHashFoundInDatabase() failing, or

(b) IsCertHashFoundInDatabase() succeeding, and setting &quot;IsFound&quot; to
true.

In case (a), we must not consume &quot;IsFound&quot;. Therefore, the condition
should be written as:

  (!EFI_ERROR (Status) &amp;&amp;
   PassTimestampCheck (AuthData, AuthDataSize, &amp;RevocationTime))


<span class="quote">&gt;| &#64;&#64; -1355,9 +1370,10 &#64;&#64; IsForbiddenByDbx (
&gt;|        DEBUG ((DEBUG_INFO, &quot;DxeImageVerificationLib: Image is signed but signature failed the timestamp check.\n&quot;));
&gt;|        goto Done;
&gt;|      }
&gt;| -
&gt;|    }
&gt;|</span >

(19) The above whitespace change is spurious, please undo it.

<span class="quote">&gt;| +  IsForbidden = FALSE;
&gt;| +
&gt;|  Done:
&gt;|    if (Data != NULL) {
&gt;|      FreePool (Data);
&gt;| &#64;&#64; -1388,6 +1404,7 &#64;&#64; IsAllowedByDb (
&gt;|  {
&gt;|    EFI_STATUS                Status;
&gt;|    BOOLEAN                   VerifyStatus;
&gt;| +  BOOLEAN                   IsFound;
&gt;|    EFI_SIGNATURE_LIST        *CertList;
&gt;|    EFI_SIGNATURE_DATA        *CertData;
&gt;|    UINTN                     DataSize;
&gt;| &#64;&#64; -1449,11 +1466,20 &#64;&#64; IsAllowedByDb (
&gt;|                             mImageDigestSize
&gt;|                             );
&gt;|            if (VerifyStatus) {
&gt;| +            VerifyStatus = FALSE;
&gt;| +
&gt;|              //
&gt;|              // Here We still need to check if this RootCert's Hash is revoked
&gt;|              //
&gt;| +            DbxDataSize = 0;
&gt;|              Status   = gRT-&gt;GetVariable (EFI_IMAGE_SECURITY_DATABASE1, &amp;gEfiImageSecurityDatabaseGuid, NULL, &amp;DbxDataSize, NULL);
&gt;| -            if (Status == EFI_BUFFER_TOO_SMALL) {
&gt;| +            if (Status != EFI_BUFFER_TOO_SMALL) {
&gt;| +              if (Status == EFI_NOT_FOUND) {
&gt;| +                //
&gt;| +                // Apparently not in dbx if the database doesn't exist.
&gt;| +                //
&gt;| +                VerifyStatus = TRUE;
&gt;| +              }
&gt;|                goto Done;
&gt;|              }</span >

(20) I'd again propose the pattern from (12) and (15).

<span class="quote">&gt;|              DbxData = (UINT8 *) AllocateZeroPool (DbxDataSize);
&gt;| &#64;&#64; -1466,7 +1492,8 &#64;&#64; IsAllowedByDb (
&gt;|                goto Done;
&gt;|              }
&gt;|
&gt;| -            if (IsCertHashFoundInDatabase (RootCert, RootCertSize, (EFI_SIGNATURE_LIST *)DbxData, DbxDataSize, &amp;RevocationTime)) {
&gt;| +            Status = IsCertHashFoundInDatabase (RootCert, RootCertSize, (EFI_SIGNATURE_LIST *)DbxData, DbxDataSize, &amp;RevocationTime, &amp;IsFound);
&gt;| +            if (!EFI_ERROR (Status) &amp;&amp; IsFound) {
&gt;|                //
&gt;|                // Check the timestamp signature and signing time to determine if the RootCert can be trusted.
&gt;|                //
&gt;| &#64;&#64; -1474,6 +1501,8 &#64;&#64; IsAllowedByDb (
&gt;|                if (!VerifyStatus) {
&gt;|                  DEBUG ((DEBUG_INFO, &quot;DxeImageVerificationLib: Image is signed and signature is accepted by DB, but its root cert failed the timestamp check.\n&quot;));
&gt;|                }
&gt;| +            } else if (!EFI_ERROR (Status) &amp;&amp; !IsFound) {
&gt;| +              VerifyStatus = TRUE;
&gt;|              }
&gt;|
&gt;|              goto Done;</span >

(21) The branching is too complex. After IsCertHashFoundInDatabase()
returns, you can check &quot;Status&quot; in itself. For example:

  Status = IsCertHashFoundInDatabase
             RootCert,
             RootCertSize,
             (EFI_SIGNATURE_LIST *)DbxData,
             DbxDataSize,
             &amp;RevocationTime,
             &amp;IsFound
             );
  if (EFI_ERROR (Status)) {
    goto Done;
  }

  if (!IsFound) {
    VerifyStatus = TRUE;
    goto Done;
  }

  VerifyStatus = PassTimestampCheck (
                   AuthData,
                   AuthDataSize,
                   &amp;RevocationTime
                   );
  if (!VerifyStatus) {
    DEBUG ((...));
  }
  goto Done;

<span class="quote">&gt;| &#64;&#64; -1580,6 +1609,7 &#64;&#64; DxeImageVerificationHandler (
&gt;|    EFI_IMAGE_DATA_DIRECTORY             *SecDataDir;
&gt;|    UINT32                               OffSet;
&gt;|    CHAR16                               *NameStr;
&gt;| +  BOOLEAN                              IsFound;
&gt;|
&gt;|    SignatureList     = NULL;
&gt;|    SignatureListSize = 0;
&gt;| &#64;&#64; -1732,15 +1762,32 &#64;&#64; DxeImageVerificationHandler (
&gt;|        goto Done;
&gt;|      }
&gt;|
&gt;| -    if (IsSignatureFoundInDatabase (EFI_IMAGE_SECURITY_DATABASE1, mImageDigest, &amp;mCertType, mImageDigestSize)) {
&gt;| +    IsFound = TRUE;</span >

(22) This assignment is not necessary, and its presence is confusing.
Please remove it.

<span class="quote">&gt;| +    Status = IsSignatureFoundInDatabase (
&gt;| +               EFI_IMAGE_SECURITY_DATABASE1,
&gt;| +               mImageDigest,
&gt;| +               &amp;mCertType,
&gt;| +               mImageDigestSize,
&gt;| +               &amp;IsFound
&gt;| +               );
&gt;| +    if (EFI_ERROR (Status) || IsFound) {
&gt;|        //
&gt;|        // Image Hash is in forbidden database (DBX).
&gt;|        //
&gt;|        DEBUG ((DEBUG_INFO, &quot;DxeImageVerificationLib: Image is not signed and %s hash of image is forbidden by DBX.\n&quot;, mHashTypeStr));
&gt;| +      Status = EFI_ACCESS_DENIED;
&gt;|        goto Done;
&gt;|      }
&gt;|
&gt;| -    if (IsSignatureFoundInDatabase (EFI_IMAGE_SECURITY_DATABASE, mImageDigest, &amp;mCertType, mImageDigestSize)) {
&gt;| +    IsFound = FALSE;</span >

(23) Same as (22).

<span class="quote">&gt;| +    Status = IsSignatureFoundInDatabase (
&gt;| +               EFI_IMAGE_SECURITY_DATABASE,
&gt;| +               mImageDigest,
&gt;| +               &amp;mCertType,
&gt;| +               mImageDigestSize,
&gt;| +               &amp;IsFound
&gt;| +               );
&gt;| +    if (!EFI_ERROR (Status) &amp;&amp; IsFound) {
&gt;|        //
&gt;|        // Image Hash is in allowed database (DB).
&gt;|        //
&gt;| &#64;&#64; -1751,6 +1798,7 &#64;&#64; DxeImageVerificationHandler (
&gt;|      // Image Hash is not found in both forbidden and allowed database.
&gt;|      //
&gt;|      DEBUG ((DEBUG_INFO, &quot;DxeImageVerificationLib: Image is not signed and %s hash of image is not found in DB/DBX.\n&quot;, mHashTypeStr));
&gt;| +    Status = EFI_ACCESS_DENIED;
&gt;|      goto Done;
&gt;|    }
&gt;|
&gt;| &#64;&#64; -1828,16 +1876,33 &#64;&#64; DxeImageVerificationHandler (
&gt;|      //
&gt;|      // Check the image's hash value.
&gt;|      //
&gt;| -    if (IsSignatureFoundInDatabase (EFI_IMAGE_SECURITY_DATABASE1, mImageDigest, &amp;mCertType, mImageDigestSize)) {
&gt;| +    IsFound = TRUE;</span >

(24) Same as (22).

<span class="quote">&gt;| +    Status = IsSignatureFoundInDatabase (
&gt;| +               EFI_IMAGE_SECURITY_DATABASE1,
&gt;| +               mImageDigest,
&gt;| +               &amp;mCertType,
&gt;| +               mImageDigestSize,
&gt;| +               &amp;IsFound
&gt;| +               );
&gt;| +    if (EFI_ERROR (Status) || IsFound) {
&gt;|        Action = EFI_IMAGE_EXECUTION_AUTH_SIG_FOUND;
&gt;|        DEBUG ((DEBUG_INFO, &quot;DxeImageVerificationLib: Image is signed but %s hash of image is found in DBX.\n&quot;, mHashTypeStr));
&gt;|        VerifyStatus = EFI_ACCESS_DENIED;
&gt;|        break;
&gt;|      } else if (EFI_ERROR (VerifyStatus)) {
&gt;| -      if (IsSignatureFoundInDatabase (EFI_IMAGE_SECURITY_DATABASE, mImageDigest, &amp;mCertType, mImageDigestSize)) {
&gt;| +      IsFound = FALSE;</span >

(25) Same as (22).

<span class="quote">&gt;| +      Status = IsSignatureFoundInDatabase (
&gt;| +                 EFI_IMAGE_SECURITY_DATABASE,
&gt;| +                 mImageDigest,
&gt;| +                 &amp;mCertType,
&gt;| +                 mImageDigestSize,
&gt;| +                 &amp;IsFound
&gt;| +                 );
&gt;| +      if (!EFI_ERROR (Status) &amp;&amp; IsFound) {
&gt;|          VerifyStatus = EFI_SUCCESS;
&gt;|        } else {
&gt;|          DEBUG ((DEBUG_INFO, &quot;DxeImageVerificationLib: Image is signed but signature is not allowed by DB and %s hash of image is not found in DB/DBX.\n&quot;, mHashTypeStr));
&gt;| +        Status = EFI_ACCESS_DENIED;</span >

(26) Why is the last assignment needed?

Before the patch, the value of &quot;Status&quot;, near the DEBUG macro
invocation, is guaranteed to be EFI_SUCCESS. See the HashPeImageByType()
invocation higher up:

    Status = HashPeImageByType (AuthData, AuthDataSize);
    if (EFI_ERROR (Status)) {
      continue;
    }

If the original behavior is a bug, then it should be fixed in a separate
patch.

--*--

For v4, I propose the following patch series structure:

- 1/8: Plug the leak described in comment (5).

- 2/8: Code flow update as described in comment (14) -- although it
       would be better to drop that change altogether!

- 3/8: (*CertBuffer) nullity check as described in comment (17)

- 4/8: If the assignment described in comment (26) is necessary, then
       dedicate a patch to it.

- 5/8: IsCertHashFoundInDatabase() updates, including call site updates
       in IsForbiddenByDbx() and IsAllowedByDb().

       Please address comments (1), (2), (3), (4), (6), (18) and (21).

- 6/8: Remaining updates to IsForbiddenByDbx().

       Please address comments (15), (16), and (19).

- 7/8: Remaining updates to IsAllowedByDb().

       Please address comment (20).

- 8/8: IsSignatureFoundInDatabase() updates, including call site updates
       in DxeImageVerificationHandler().

       Please address comments (7), (8), (9), (11), (12), (13), (22),
       (23), (24) and (25).

Thanks
Laszlo

<span class="quote">&gt;|        }
&gt;|      }
&gt;|    }</span ></pre>
    </div>

    <div id="c19" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c19">Comment 19</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-03 08:06:23 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Laszlo Ersek from <a href="show_bug.cgi?id=1608#c18">comment #18</a>)

<span class="quote">&gt; &gt;| &#64;&#64; -1449,11 +1466,20 &#64;&#64; IsAllowedByDb (
&gt; &gt;|                             mImageDigestSize
&gt; &gt;|                             );
&gt; &gt;|            if (VerifyStatus) {
&gt; &gt;| +            VerifyStatus = FALSE;
&gt; &gt;| +
&gt; &gt;|              //
&gt; &gt;|              // Here We still need to check if this RootCert's Hash is revoked
&gt; &gt;|              //
&gt; &gt;| +            DbxDataSize = 0;
&gt; &gt;|              Status   = gRT-&gt;GetVariable (EFI_IMAGE_SECURITY_DATABASE1, &amp;gEfiImageSecurityDatabaseGuid, NULL, &amp;DbxDataSize, NULL);
&gt; &gt;| -            if (Status == EFI_BUFFER_TOO_SMALL) {
&gt; &gt;| +            if (Status != EFI_BUFFER_TOO_SMALL) {
&gt; &gt;| +              if (Status == EFI_NOT_FOUND) {
&gt; &gt;| +                //
&gt; &gt;| +                // Apparently not in dbx if the database doesn't exist.
&gt; &gt;| +                //
&gt; &gt;| +                VerifyStatus = TRUE;
&gt; &gt;| +              }
&gt; &gt;|                goto Done;
&gt; &gt;|              }
&gt; 
&gt; (20) I'd again propose the pattern from (12) and (15).</span >

Meaning two things:
- &quot;apparently&quot; vs. &quot;evidently&quot;,
- and the ASSERT().

The &quot;goto&quot; is justified in this case.</pre>
    </div>

    <div id="c20" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c20">Comment 20</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-11 04:46:42 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Laszlo Ersek from <a href="show_bug.cgi?id=1608#c18">comment #18</a> &amp; #19)
Thank you very much for the very thorough review. I agree most of the comments. I'll give separate response later. v4 is being prepared and will bed uploaded soon.</pre>
    </div>

    <div id="c21" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c21">Comment 21</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-11 16:30:34 EDT
        </span>

      </div>




<pre class="bz_comment_text">Thanks, Jian! Please take your time. I will probably be slow to review v4; my plate has been way too full lately. Thanks.</pre>
    </div>

    <div id="c22" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c22">Comment 22</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-12 00:00:04 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Laszlo Ersek from <a href="show_bug.cgi?id=1608#c19">comment #19</a>)
About the ASSERT(), there're more similar cases in the same file. Do you think we need to add it to them all? But, on a second thought, I don't see any benefit from it. It seems no chances that GetVariable() will return EFI_SUCCESS in the case of variable buffer with zero size.</pre>
    </div>

    <div id="c23" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c23">Comment 23</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-12 03:11:28 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Laszlo Ersek from <a href="show_bug.cgi?id=1608#c19">comment #19</a>)
<span class="quote">&gt;|              DbxData = (UINT8 *) AllocateZeroPool (DbxDataSize);
&gt;| &#64;&#64; -1466,7 +1492,8 &#64;&#64; IsAllowedByDb (
&gt;|                goto Done;
&gt;|              }
&gt;|
&gt;| -            if (IsCertHashFoundInDatabase (RootCert, RootCertSize, (EFI_SIGNATURE_LIST *)DbxData, DbxDataSize, &amp;RevocationTime)) {
&gt;| +            Status = IsCertHashFoundInDatabase (RootCert, RootCertSize, (EFI_SIGNATURE_LIST *)DbxData, DbxDataSize, &amp;RevocationTime, &amp;IsFound);
&gt;| +            if (!EFI_ERROR (Status) &amp;&amp; IsFound) {
&gt;|                //
&gt;|                // Check the timestamp signature and signing time to determine if the RootCert can be trusted.
&gt;|                //
&gt;| &#64;&#64; -1474,6 +1501,8 &#64;&#64; IsAllowedByDb (
&gt;|                if (!VerifyStatus) {
&gt;|                  DEBUG ((DEBUG_INFO, &quot;DxeImageVerificationLib: Image is signed and signature is accepted by DB, but its root cert failed the timestamp check.\n&quot;));
&gt;|                }
&gt;| +            } else if (!EFI_ERROR (Status) &amp;&amp; !IsFound) {
&gt;| +              VerifyStatus = TRUE;
&gt;|              }
&gt;|
&gt;|              goto Done;</span >

Similar to (5), there's another memory leak here in multiple cert case. DbxData should be freed if it's not NULL before allocation. But I think we could move GetVariable related code to be out of while-loop, because the code is just retrieving the same variable and there's no need to read it again and again. But I'm not sure if there's chance that it'll be updated elsewhere while being retrieved here. Possible?</pre>
    </div>

    <div id="c24" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c24">Comment 24</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-12 03:13:57 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Wang, Jian J from <a href="show_bug.cgi?id=1608#c23">comment #23</a>)
Sorry I quoted wrong code in last comment. See below

<span class="quote">&gt;| &#64;&#64; -1449,11 +1466,20 &#64;&#64; IsAllowedByDb (
&gt;|                             mImageDigestSize
&gt;|                             );
&gt;|            if (VerifyStatus) {
&gt;| +            VerifyStatus = FALSE;
&gt;| +
&gt;|              //
&gt;|              // Here We still need to check if this RootCert's Hash is revoked
&gt;|              //
&gt;| +            DbxDataSize = 0;
&gt;|              Status   = gRT-&gt;GetVariable (EFI_IMAGE_SECURITY_DATABASE1, &amp;gEfiImageSecurityDatabaseGuid, NULL, &amp;DbxDataSize, NULL);
&gt;| -            if (Status == EFI_BUFFER_TOO_SMALL) {
&gt;| +            if (Status != EFI_BUFFER_TOO_SMALL) {
&gt;| +              if (Status == EFI_NOT_FOUND) {
&gt;| +                //
&gt;| +                // Apparently not in dbx if the database doesn't exist.
&gt;| +                //
&gt;| +                VerifyStatus = TRUE;
&gt;| +              }
&gt;|                goto Done;
&gt;|              }</span ></pre>
    </div>

    <div id="c25" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c25">Comment 25</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-12 12:22:18 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Wang, Jian J from <a href="show_bug.cgi?id=1608#c22">comment #22</a>)
<span class="quote">&gt; (In reply to Laszlo Ersek from <a href="show_bug.cgi?id=1608#c19">comment #19</a>)
&gt; About the ASSERT(), there're more similar cases in the same file. Do you
&gt; think we need to add it to them all? But, on a second thought, I don't see
&gt; any benefit from it. It seems no chances that GetVariable() will return
&gt; EFI_SUCCESS in the case of variable buffer with zero size.</span >

My thinking was that the code deserved a comment -- it would really help my understanding at least if a comment stated explicitly that GetVariable() was bound to fail at that point (due to size=0).

And then, an ASSERT() is always better than a comment. :) It has zero cost in RELEASE builds, and provides extra safety in DEBUG/NOOPT builds.

Up to you.</pre>
    </div>

    <div id="c26" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c26">Comment 26</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-12 12:52:29 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Wang, Jian J from <a href="show_bug.cgi?id=1608#c23">comment #23</a>)

<span class="quote">&gt; Similar to (5), there's another memory leak here in multiple cert
&gt; case. DbxData should be freed if it's not NULL before allocation. But
&gt; I think we could move GetVariable related code to be out of
&gt; while-loop, because the code is just retrieving the same variable and
&gt; there's no need to read it again and again. But I'm not sure if
&gt; there's chance that it'll be updated elsewhere while being retrieved
&gt; here. Possible?</span >

Believe it or not :), I spent at least half an hour on that question!

So, it's a bit tricky. Note that, once we enter the &quot;VerifyStatus&quot;
block, we *always* jump to the &quot;Done&quot; label after one iteration. Please
see the &quot;goto&quot; statement that is at the very end of the block that is
conditional on &quot;VerifyStatus&quot;.

That is, there is no way to leak &quot;DbxData&quot;, because:

- &quot;VerifyStatus&quot; is FALSE, and we don't allocate &quot;DbxData&quot; at all, or
- &quot;VerifyStatus&quot; is TRUE, we allocate &quot;DbxData&quot;, but then we *alway*
  jump out of the loop (to the &quot;Done&quot; label).

My thoughts then turned to a more difficult question: was it indeed the
right thing to immediately terminate the loop (with success or failure)
once &quot;VerifyStatus&quot; is set to TRUE?

I mean sure, if the DBX check does *not* fire, then we're all good.

But in case the DBX check fires -- meaning that the current certificate,
selected from DB, accepts the executable, but the certificate is
blacklisted --, should we perhaps continue scanning DB for *another*
certificate that also accepts the binary, but is not rejected by DBX?

The UEFI spec answers this question, apparently. In &quot;32.5.3.3
Authorization Process&quot; in UEFI-2.8, we have

<span class="quote">&gt; 3. The security database db must either contain an entry with a hash
&gt;    value of the image (with a supported hash type), or it must contain
&gt;    an entry with a certificate against which an entry in the image's
&gt;    certificate table can be verified. In either case verification must
&gt;    not succeed if the security database dbx contains any record with:</span >
&gt;
<span class="quote">&gt;    [...]</span >
&gt;
<span class="quote">&gt;    B. Any entry with SignatureListType of EFI_CERT_X509_SHA256,
&gt;       EFI_CERT_X509_SHA384, or EFI_CERT_X509_SHA512, with any
&gt;       SignatureData which reflects the To-Be-Signed hash included in
&gt;       any certificate in the signing chain of the signature being
&gt;       verified.</span >
&gt;
<span class="quote">&gt;    [...]</span >

&quot;Any certificate in the signing chain of the signature being verified&quot;
seems to include &quot;current RootCert&quot;. Therefore the &quot;goto Done&quot; at the
end of the block appears justified to me.

And so DbxData cannot be leaked.

(

It's also interesting to look at IsAllowedByDb() historically.

- The &quot;goto Done&quot; statemenet originates from commit 0c18794ea428 (&quot;Add
  security package to repository.&quot;, 2011-09-02). At that time, the
  function was still called VerifyCertPkcsSignedData(), and it only
  searched for a match in DB -- it didn't consider the DBX blacklist.

- Then in commit 27c93c06c0a8 (&quot;Correct the DBX and Certificate Hash
  Checking.&quot;, 2015-02-04), the blacklist check was added. It extended
  the IsAllowedByDb() function with the current logic -- importantly, it
  *did not continue* the loop if the DBX check flipped VerifyStatus back
  to FALSE! Even if the DBX check set VerifyStatus to FALSE, the commit
  would allow the loop to terminate, like before, just because we found
  an entry in DB that accepted the binary.

  And based on the UEFI spec, I think it was intentional.

)</pre>
    </div>

    <div id="c27" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c27">Comment 27</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-12 13:00:48 EDT
        </span>

      </div>




<pre class="bz_comment_text">(I mean I had spent half an hour, dedicated to DbxData, when originally writing <a href="show_bug.cgi?id=1608#c18">comment 18</a>. That comment was going to be incredibly long anyway, and I determined DbxData was not possible to leak, plus the loop termination on DBX match looked intentional as well, so I decided to simply not comment on any of that. :) )</pre>
    </div>

    <div id="c28" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c28">Comment 28</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-14 04:40:31 EDT
        </span>

      </div>




<pre class="bz_comment_text">For ASSERT(), I got your point. It's ok for me if it's for comments purpose. So let's keep it.

For DbxData, you're right. I neglected the &quot;goto Done&quot; part.

Thanks again for the great comments.</pre>
    </div>

    <div id="c29" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c29">Comment 29</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Bret Barkelew</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-16 17:59:44 EDT
        </span>

      </div>




<pre class="bz_comment_text">While we're discussing leaks. We've identified one in IsAllowedByDb(), in the primary &quot;for&quot; loop, DbxData is allocated and not freed before the end of the loop. The final allocation is freed at the end of the function, but any intermediate allocations are leaked.</pre>
    </div>

    <div id="c30" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c30">Comment 30</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Bret Barkelew</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-16 18:05:53 EDT
        </span>

      </div>




<pre class="bz_comment_text">*OR* I could add a comment before reading all the updates where Laszlo diligently described why DbxData can't be leaked.

I would encourage a comment about why the leak is impossible. I would also love to see this code refactored in a way that this behavior is more apparent.</pre>
    </div>

    <div id="c31" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c31">Comment 31</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-16 21:55:22 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Bret Barkelew from <a href="show_bug.cgi?id=1608#c30">comment #30</a>)
<span class="quote">&gt; *OR* I could add a comment before reading all the updates where Laszlo
&gt; diligently described why DbxData can't be leaked.
&gt; 
&gt; I would encourage a comment about why the leak is impossible. I would also
&gt; love to see this code refactored in a way that this behavior is more
&gt; apparent.</span >

I think we can move those code (get dbx variable) to be outside of the while-loop. If no objection, I'll put change in the patch (1) in v4 series.</pre>
    </div>

    <div id="c32" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c32">Comment 32</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-17 05:53:21 EDT
        </span>

      </div>




<pre class="bz_comment_text">The code movement sounds good to me, thank you. I also agree that the final &quot;goto Done&quot; (i.e. &quot;VerifyStatus==TRUE&quot; being final) deserves a comment.</pre>
    </div>

    <div id="c33" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c33">Comment 33</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-20 02:11:33 EDT
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=401" name="attach_401" title="v4">attachment 401</a> <a href="attachment.cgi?id=401&amp;action=edit" title="v4">[details]</a></span>
v4

v4 is uploaded. Please note that the logic in IsAllowedByDb() is also refined a little bit besides moving the GetVariable out of while-loop and adding comments.</pre>
    </div>

    <div id="c34" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c34">Comment 34</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-20 02:14:21 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Wang, Jian J from <a href="show_bug.cgi?id=1608#c33">comment #33</a>)
<span class="quote">&gt; Created <span class=""><a href="attachment.cgi?id=401" name="attach_401" title="v4">attachment 401</a> <a href="attachment.cgi?id=401&amp;action=edit" title="v4">[details]</a></span>
&gt; v4
&gt; 
&gt; v4 is uploaded. Please note that the logic in IsAllowedByDb() is also
&gt; refined a little bit besides moving the GetVariable out of while-loop and
&gt; adding comments.</span >

Patch 2/8 and 4/8 mentioned are not included because I agree to drop those changes.</pre>
    </div>

    <div id="c35" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c35">Comment 35</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-20 05:32:50 EDT
        </span>

      </div>




<pre class="bz_comment_text">Thanks, Jian. I've queued this update for review. It will take a while; my backlog is crazy. :(</pre>
    </div>

    <div id="c36" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c36">Comment 36</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-25 05:26:35 EDT
        </span>

      </div>




<pre class="bz_comment_text">Jian,

I'm very sorry, I must have missed your specific remark in <a href="show_bug.cgi?id=1608#c31">comment 31</a> about *squashing* the movement of the dbx variable fetch into patch#1. In <a href="show_bug.cgi?id=1608#c32">comment 32</a>, I meant to agree to the code movement in general, and to a code comment on &quot;goto Done&quot;, in v4 -- but I certainly didn't mean to agree to doing that in patch#1, specifically.

Patch#1 -- fixing the leak in IsCertHashFoundInDatabase() -- is completely unrelated to the code movement. We *absolutely* need to separate the code movement to a stand-alone patch. In IsCertHashFoundInDatabase(), we fix a leak. In IsAllowedByDb(), we move around code to improve the readability of the function, but we do not change the behavior.

Again, the fault is with me, because you did announce your intent; I apologize for missing your intent. (It clearly happened because I've been continuously overloaded for weeks or months now.) I should have spoken up earlier.

I have some more comments on v4 1/6, specifically in relation to EFI_BUFFER_TOO_SMALL.

- Inverting the EFI_BUFFER_TOO_SMALL condition at the top of the function (related to &quot;db&quot;) is helpful. It does not change behavior (there is no bug), but it simplifies the code flow, and it allows us to un-nest the rest of the function by one indentation level. Obviously, this patch should stand on its own.

- The EFI_BUFFER_TOO_SMALL change, related to &quot;dbx&quot;, is justified; it is a bugfix. It belongs in its own separate patch, together with the DbxDataSize=0 assignment.

So we need to split v4 1/6 into *at least* four patches:
- fixing the leak in IsCertHashFoundInDatabase(), like I requested in <a href="show_bug.cgi?id=1608#c18">comment 18</a>,

- the db:EFI_BUFFER_TOO_SMALL refactoring / un-indentation for IsAllowedByDb(),

- the dbx fetching fix (DbxDataSize=0 assignment, and EFI_BUFFER_TOO_SMALL check); *in-place*

- moving the dbx fetching out of the loop,

- (possibly commenting on &quot;goto Done&quot; for improving readability).

In its current form, v4 1/6 is practically un-reviewable to me.

--*--

I request that you please start minimalizing patches (*any* patches you write) as much as you can, as a *primary* goal. I shouldn't have to request this every single time I review a patch; I'm asking for this as a *general* development method, a general attitude towards code changes. All patches should be as minimal as we can possibly make them.

Edk2 contributors really have to optimize the patches for the review process, and not for the programming (authoring) process.

- There is just one author, there are multiple reviewers.

- Writing code is easier than reading code. The author translates ideas to code, the reviewers need to translate code to ideas. The second is a lot more difficult.

If given a choice between twenty small patches and six messy patches, I'll take the former *any day*. I can stop and resume reviewing a  series at a patch boundary at any time. So if you break the patch set into twenty small patches, I'll have an easy time reviewing any given patch in the series, and I'll have twenty possible review suspension points, where I can go away and come back. If you give me 6 messy patches, I'll have to spend half a day *deciphering* each, and it destroys my mood and productivity.

Simplicity is the *most important* factor in software engineering. Every patch author must *actively* look for patch minimization opportunities, as a standing imperative, and vigorously exploit those opportunities.</pre>
    </div>

    <div id="c37" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c37">Comment 37</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-25 05:43:33 EDT
        </span>

      </div>




<pre class="bz_comment_text">For patch v4 2/6 (SecurityPkg/DxeImageVerificationLib: Add nullity check for CertBuffer):

I have now looked into this in more detail than in bullet (17).

The patch is valid, but the commit message is wrong.

The condition that we intend to catch here is whether the &quot;CertNumber&quot; field (of type UINT8) at the start of the output &quot;CertStack&quot; is zero.

Namely, after ensuring that BufferLength is positive, and CertBuffer is not NULL, the expression (*CertBuffer) indeed gives us the embedded &quot;CertNumber&quot; field. Therefore the commit message should say, &quot;catch if CertStack.CertNumber is zero&quot;.

However: this change is unnecessary! (Note that in bullet (17), I wrote that I couldn't tell whether this change was necessary.) Now I claim that this change is unnecessary.

Namely, just below we have:

  CertNumber = (UINT8) (*CertBuffer);
  CertPtr    = CertBuffer + 1;
  for (Index = 0; Index &lt; CertNumber; Index++) {

If CertNumber is 0, then the loop body is never entered, and we end up at the &quot;Done&quot; label.

So I think this change (patch v4 2/6) can be dropped altogether.

(Side comment: this is a good example why *small* patches are important. Now that in v4 this change is isolated to its own patch, I could investigate it separately from everything else, and arrive at a conclusion.)</pre>
    </div>

    <div id="c38" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c38">Comment 38</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-25 05:53:37 EDT
        </span>

      </div>




<pre class="bz_comment_text">Let me revise that: patch v4 2/6 has no effect on the control flow, with (*CertBuffer) == 0, but it changes the return value of the function.

So I was partly wrong; the patch is not superfluous.

However, the commit message is still wrong. The right message would be something like:

&quot;&quot;&quot;
SecurityPkg/DxeImageVerificationLib: reject CertStack.CertNumber==0 per DBX

In case the signers' certificate stack, retrieved from the PE/COFF image's Authenticode blob, has zero elements (= there are zero signer certificates), then we should consider the image forbidden by DBX, not accepted by DBX.
&quot;&quot;&quot;

With this commit message update, for v4 2/6:

Reviewed-by: Laszlo Ersek &lt;<a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a>&gt;</pre>
    </div>

    <div id="c39" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c39">Comment 39</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-25 05:56:46 EDT
        </span>

      </div>




<pre class="bz_comment_text">(Meta comment: if my insistence on &quot;atomic&quot; patches is perceived as counter-productive, I'm OK to withdraw from the review on this BZ. I certainly don't intend to slow down or block progress, if other reviewers on the infosec group would like to provide R-b's. Thanks.)</pre>
    </div>

    <div id="c40" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c40">Comment 40</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-25 08:03:29 EDT
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=411" name="attach_411" title="proposed restructuring of v4 patches 3/6 and 4/6">attachment 411</a> <a href="attachment.cgi?id=411&amp;action=edit" title="proposed restructuring of v4 patches 3/6 and 4/6">[details]</a></span>
proposed restructuring of v4 patches 3/6 and 4/6

For patches v4 3/6 and v4 4/6:

I think we could further improve the scope of these patches.

* In patch v4 3/6 (&quot;SecurityPkg/DxeImageVerificationLib: Differentiate
  error and search result in IsCertHashFoundInDatabase&quot;), there is no
  need to flip the default value of IsForbidden to TRUE just yet, in
  IsForbiddenByDbx(). This patch is about updating the
  IsCertHashFoundInDatabase() function, and its call sites. By flipping
  the default value of IsForbidden to TRUE, in IsForbiddenByDbx(), we
  temporarily regress the EFI_NOT_FOUND interpretation for dbx. And then
  the next patch has to fix that up.

  So I would move the initial &quot;IsForbidden = TRUE&quot;, and the final
  &quot;IsForbidden = FALSE&quot;, to patch v4 4/6, for function
  IsForbiddenByDbx(). The commit message on patch v4 4/6 would have to
  be rewritten accordingly. (It would basically be the 2nd paragraph of
  v3 4/6:

      All intermediate results inside this function will be checked and
      returned immediately upon any failure or error, like
      out-of-resource, hash calculation error or certificate retrieval
      failure.

  )

* Furthermore, the leak fix from patch v4 4/6 should stand alone. (The
  code in question as also part of v3 -- please see it just under my
  bullet (16) in <a href="show_bug.cgi?id=1608#c18">comment 18</a>.)

Basically I'm suggesting to replace the following two patches:

- v4 3/6 SecurityPkg/DxeImageVerificationLib: Differentiate error and
         search result in IsCertHashFoundInDatabase

- v4 4/6 SecurityPkg/DxeImageVerificationLib: Add logic to handle
         non-existence of dbx in IsForbiddenByDbx

With the following three patches:

- SecurityPkg/DxeImageVerificationLib: Differentiate error and search
  result in IsCertHashFoundInDatabase

  [updated]

- SecurityPkg/DxeImageVerificationLib: tighten default result of
  IsForbiddenByDbx()

  [new patch]

- SecurityPkg/DxeImageVerificationLib: plug Data leak in
  IsForbiddenByDbx()

  [new patch]

The end result is exactly the same, but the patch scopes would improve,
in my opinion.

Please see my proposal attached.

If you disagree, I'm willing to give R-b for v4 3/6 and v4 4/6.

Thanks.</pre>
    </div>

    <div id="c41" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c41">Comment 41</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-26 06:08:00 EDT
        </span>

      </div>




<pre class="bz_comment_text">I've tried to look at patch v4 5/6
(&quot;SecurityPkg/DxeImageVerificationLib: Add logic to handle non-existence
of dbx in IsAllowedByDb&quot;).

It is difficult to make comments on this patch. The main problem is that
patch v4 1/6 regresses IsAllowedByDb(), for the case when DBX does not
exist.

Consider:

(a) After v4 patch#1 is applied, if DBX does not exist, IsAllowedByDb()
returns FALSE.

<span class="quote">&gt;|   VerifyStatus      = FALSE;
&gt;|
&gt;|   [...]
&gt;|
&gt;|   DbxDataSize = 0
&gt;|   Status      = gRT-&gt;GetVariable (EFI_IMAGE_SECURITY_DATABASE1, &amp;gEfiImageSecurityDatabaseGuid, NULL, &amp;DbxDataSize, NULL);
&gt;|   if (Status != EFI_BUFFER_TOO_SMALL) {
&gt;|     goto Done;
&gt;|   }</span >

(b) However, at current edk2 master (c70fef962e80) -- that is, without
applying any patches from this BZ -- , we have the following code in
IsAllowedByDb():

<span class="quote">&gt;|           if (VerifyStatus) {
&gt;|             //
&gt;|             // Here We still need to check if this RootCert's Hash is revoked
&gt;|             //
&gt;|             Status   = gRT-&gt;GetVariable (EFI_IMAGE_SECURITY_DATABASE1, &amp;gEfiImageSecurityDatabaseGuid, NULL, &amp;DbxDataSize, NULL);
&gt;|             if (Status == EFI_BUFFER_TOO_SMALL) {
&gt;|               goto Done;
&gt;|             }
&gt;|             DbxData = (UINT8 *) AllocateZeroPool (DbxDataSize);
&gt;|             if (DbxData == NULL) {
&gt;|               goto Done;
&gt;|             }
&gt;|
&gt;|             Status = gRT-&gt;GetVariable (EFI_IMAGE_SECURITY_DATABASE1, &amp;gEfiImageSecurityDatabaseGuid, NULL, &amp;DbxDataSize, (VOID *) DbxData);
&gt;|             if (EFI_ERROR (Status)) {
&gt;|               goto Done;
&gt;|             }</span >

When entering this block, the value in &quot;DbxDataSize&quot; is indeterminate
(due to a separate bug, discussed earlier). However, for the &quot;DBX does
not exist&quot; case, it actually doesn't matter.

VariableServiceGetVariable()
[MdeModulePkg/Universal/Variable/RuntimeDxe/Variable.c] calls
FindVariable() *first* -- which can return EFI_NOT_FOUND --, and does
the following only *second*, in accordance with the UEFI spec:

<span class="quote">&gt;|   if (*DataSize &gt;= VarDataSize) {
&gt;|     if (Data == NULL) {
&gt;|       Status = EFI_INVALID_PARAMETER;
&gt;|       goto Done;
&gt;|     }</span >

Which means that, if DBX does not exist, the first GetVariable()
invocation quoted under (b) will return EFI_NOT_FOUND, regardless of the
indeterminate value in DbxDataSize.

The EFI_BUFFER_TOO_SMALL check is wrong right after (discussed
elsewhere). Thus, we reach AllocateZeroPool().

Assume that AllocateZeroPool() fails (due to the indeterminate
DbxDataSize being impossible to allocate). Then we jump to Done, with
VerifyStatus=TRUE. This happens to be a *correct* result for the
function!

Assume that AllocateZeroPool() succeeds. Then we reach the last
GetVariable() call, for DBX. This will again fail with EFI_NOT_FOUND. We
jump to Done, with VerifyStatus=TRUE. This is again a *correct* result
for the function!

Therefore, despite all its flaws, IsAllowedByDb() at current master
(c70fef962e80) handles the total absence of DBX *correctly*.

And patch v4 1/6 breaks that, and then patch v4 5/6 restores it
separately. That's not a correct approach; if possible, we should not
break the &quot;DBX absent&quot; case for IsAllowedByDb() even temporarily.

I made some observations on v4 1/6 in <a href="show_bug.cgi?id=1608#c36">comment#36</a> already. As I
mentioned, the DBX fetching changes in that patch must be broken out to
several smaller patches. And now I'm adding: while at it, make sure that
the &quot;DBX absent&quot; return value for IsAllowedByDb() is never regressed,
relative to master.

With that in mind, patch v4 5/6 -- which depends on v4 1/6 -- will
either fall away completely, or it will have to be reworked.</pre>
    </div>

    <div id="c42" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c42">Comment 42</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-09-26 06:56:25 EDT
        </span>

      </div>




<pre class="bz_comment_text">Re: patch v4 6/6 (&quot;SecurityPkg/DxeImageVerificationLib: Differentiate error and search result in IsSignatureFoundInDatabase&quot;):

Reviewed-by: Laszlo Ersek &lt;<a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a>&gt;</pre>
    </div>

    <div id="c43" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c43">Comment 43</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-10-09 04:26:28 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Laszlo Ersek from <a href="show_bug.cgi?id=1608#c36">comment #36</a>)
Totally agree. I'll split the patches at suggested. Thanks for the very good advice.</pre>
    </div>

    <div id="c44" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c44">Comment 44</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-10-09 04:30:40 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Laszlo Ersek from <a href="show_bug.cgi?id=1608#c37">comment #37</a>)
<span class="quote">&gt; For patch v4 2/6 (SecurityPkg/DxeImageVerificationLib: Add nullity check for
&gt; CertBuffer):
&gt; </span >
Good catch. Let's drop patch#2.</pre>
    </div>

    <div id="c45" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c45">Comment 45</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-10-09 04:34:57 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Laszlo Ersek from <a href="show_bug.cgi?id=1608#c38">comment #38</a>)
<span class="quote">&gt; Let me revise that: patch v4 2/6 has no effect on the control flow, with
&gt; (*CertBuffer) == 0, but it changes the return value of the function.
&gt; </span >

Right. I almost forgot why :(, and wrote a wrong commit message.</pre>
    </div>

    <div id="c46" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c46">Comment 46</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-10-09 04:38:59 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Laszlo Ersek from <a href="show_bug.cgi?id=1608#c39">comment #39</a>)
<span class="quote">&gt; (Meta comment: if my insistence on &quot;atomic&quot; patches is perceived as
&gt; counter-productive, I'm OK to withdraw from the review on this BZ. I
&gt; certainly don't intend to slow down or block progress, if other reviewers on
&gt; the infosec group would like to provide R-b's. Thanks.)</span >

I don't think it'll block anything. You did a very good review works. I really appreciate that. Forgive my slow response. I'm really occupied by many other things.</pre>
    </div>

    <div id="c47" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c47">Comment 47</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-10-09 04:40:42 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Laszlo Ersek from <a href="show_bug.cgi?id=1608#c40">comment #40</a>)
<span class="quote">&gt; Created <span class=""><a href="attachment.cgi?id=411" name="attach_411" title="proposed restructuring of v4 patches 3/6 and 4/6">attachment 411</a> <a href="attachment.cgi?id=411&amp;action=edit" title="proposed restructuring of v4 patches 3/6 and 4/6">[details]</a></span>
&gt; proposed restructuring of v4 patches 3/6 and 4/6
&gt; 
&gt; For patches v4 3/6 and v4 4/6:
&gt; </span >

Totally agree.</pre>
    </div>

    <div id="c48" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c48">Comment 48</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-10-09 05:07:21 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Laszlo Ersek from <a href="show_bug.cgi?id=1608#c41">comment #41</a>)
<span class="quote">&gt; I've tried to look at patch v4 5/6
&gt; (&quot;SecurityPkg/DxeImageVerificationLib: Add logic to handle non-existence
&gt; of dbx in IsAllowedByDb&quot;).
&gt; </span >

It's brain burning comment:). I read it several times. But I still don't follow.  Forgive my numbness. I agree your analysis of DBX non-existence situation. But if DBX exists and DbxDataSize happens to be a small enough integer, the first gRT-&gt;GetVariable() do return EFI_BUFFER_TOO_SMALL. The original code did a '==' comparing and jump to 'Done' if true. Isn't it still bug here?

            if (Status == EFI_BUFFER_TOO_SMALL) {
              goto Done;
            }

Do you mean we just need to fix above one but no need to init DbxDataSize?</pre>
    </div>

    <div id="c49" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c49">Comment 49</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-10-09 17:22:35 EDT
        </span>

      </div>




<pre class="bz_comment_text">Jian,

in <a href="show_bug.cgi?id=1608#c41">comment 41</a>, I focused only on the &quot;DBX absent&quot; case.

I did not consider any &quot;DBX present, and [insert other circumstances]&quot; situation.

My point was that, if DBX is absent, then patch#1 regresses the return value of IsAllowedByDb(), and then patch#5 restores the behavior.

Generally, when we work towards fixing a bug (or a set of bugs), we avoid introducing new ones, even temporarily (that is, even mid-series).

Such transitory bugs do not play nice with bisection. A person could be bisecting an independent issue, and the temporary breakage of IsAllowedByDb(), when DBX is absent, could prevent them from testing (interpreting) the symptom they were actually looking for, in the bisection. Put differently, such transitory bugs may leave a person with untestable commit ranges during a bisection.

So my request was that we please write patches that never break things, only refactor code (without changing behavior), or improve behavior.

Now I'm fully aware that this is sometimes very difficult to do with small surgical steps, if at all possible :(</pre>
    </div>

    <div id="c50" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c50">Comment 50</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-10-10 01:54:06 EDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Laszlo Ersek from <a href="show_bug.cgi?id=1608#c49">comment #49</a>)
Understood. I think refactor will always cause bisection in this special case. Maybe we should not do it. But, from another point of view, I think there's also false-negative issue here. In original code, any error in fetching dbx will not alter the result of VerifyStatus (which is TRUE). Only timestamp check failure will change it to FALSE.

It means dbx timestamp check can be bypassed for other errors (like out-of-resource) even if it's expired. Similar to the issue in IsSignatureFoundInDatabase reported in tracker, any error in checking dbx should be taken as checking failure (not-allowed). I think we should also fix it here.

If you agree it's a false-negative issue in IsAllowedByDb(), I think it's OK to move the code fetching dbx to be outside the while-loop, because it's ok to return FALSE upon any error in fetching dbx. 

Otherwise, refactor this part of code will always cause bisection, because at that point (in refactored code) db has not been checked and we can only return FALSE upon errors (returning TRUE is a worse choice), which is different from original code logic.</pre>
    </div>

    <div id="c51" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c51">Comment 51</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-10-10 04:13:24 EDT
        </span>

      </div>




<pre class="bz_comment_text">In the end, I agree with you. It's more important to fix the &quot;incorrectly accepted&quot; situation than to keep the &quot;correctly accepted&quot; situation intact at every stage.

It looks like we cannot avoid a temporary &quot;incorrectly rejected&quot; behavior, midway into the series (when DBX is absent). But given the circumstances, I think it's tolerable, temporarily. Being too strict is not optimal, but if we have to choose either/or, it's better than being too lax. Please go ahead.</pre>
    </div>

    <div id="c52" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c52">Comment 52</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-10-10 04:31:46 EDT
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=418" name="attach_418" title="v5">attachment 418</a> <a href="attachment.cgi?id=418&amp;action=edit" title="v5">[details]</a></span>
v5

Thanks, Laszlo. I uploaded v5 patches.</pre>
    </div>

    <div id="c53" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c53">Comment 53</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-10-15 03:52:39 EDT
        </span>

      </div>




<pre class="bz_comment_text">Jian, please don't wait for my feedback on v5 -- please ask the owning package maintainers to review, and/or other reviewers from the infosec team. As I wrote elsewhere, I'm ramping down my triage &amp; review activities in infosec. Thank you, and my apologies.</pre>
    </div>

    <div id="c54" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c54">Comment 54</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2020-01-09 11:55:04 EST
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE"
   href="show_bug.cgi?id=2450">Bug 2450</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c55" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c55">Comment 55</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Vincent Zimmer</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2020-02-05 12:20:49 EST
        </span>

      </div>




<pre class="bz_comment_text">2/5/2020 infosec meeting - per starting time of embargo in june 19 and fact that we have patches + cve, move to un-embargo</pre>
    </div>

    <div id="c56" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c56">Comment 56</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2020-02-05 15:09:05 EST
        </span>

      </div>




<pre class="bz_comment_text">Jian, please post the patches to the mailing list immediately, for maintainer review. This is a 0day that has been opened now, without patches being ready for immediate merging into upstream master.</pre>
    </div>

    <div id="c57" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c57">Comment 57</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2020-02-05 15:21:17 EST
        </span>

      </div>




<pre class="bz_comment_text">In other words, we do *not* have patches, for upstream edk2. We would have patches for upstream edk2, and therefore for open source downstreams of edk2, if those patches were now ready for immediate posting to edk2-devel *and merging* into edk2. But prior review in this BZ had never reached that point. When I burned out and stepped away from the infosec team (<a href="show_bug.cgi?id=1608#c53">comment 53</a>), noone else joined this review, not even SecurityPkg maintainers. So, we do not have approved (ready-to-go) upstream patches.</pre>
    </div>

    <div id="c58" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c58">Comment 58</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2020-02-06 09:24:27 EST
        </span>

      </div>




<pre class="bz_comment_text">Patches posted <a href="https://edk2.groups.io/g/devel/message/53866">https://edk2.groups.io/g/devel/message/53866</a>
Branch: <a href="https://github.com/jwang36/edk2/tree/fix-bz1608-bypass-blacklist-check-via-signature">https://github.com/jwang36/edk2/tree/fix-bz1608-bypass-blacklist-check-via-signature</a></pre>
    </div>

    <div id="c59" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c59">Comment 59</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laszlo Ersek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2020-02-14 09:31:13 EST
        </span>

      </div>




<pre class="bz_comment_text">* Jian posted:
[edk2-devel] [PATCH v2 00/10] Fix false negative issue in DxeImageVerificationHandler

* Mailing list archive links:
<a href="http://mid.mail-archive.com/20200214072745.1570-1-jian.j.wang&#64;intel.com">http://mid.mail-archive.com/20200214072745.1570-1-jian.j.wang&#64;intel.com</a>
<a href="https://edk2.groups.io/g/devel/message/54416">https://edk2.groups.io/g/devel/message/54416</a>

* Topic branch:
<a href="https://github.com/jwang36/edk2/tree/fix-bz1608-bypass-blacklist-check-via-signature-v2">https://github.com/jwang36/edk2/tree/fix-bz1608-bypass-blacklist-check-via-signature-v2</a></pre>
    </div>

    <div id="c60" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c60">Comment 60</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Wang, Jian J</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2020-02-19 09:21:58 EST
        </span>

      </div>




<pre class="bz_comment_text">Pushed fbb9607223...c230c002ac</pre>
    </div>

    <div id="c61" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1608#c61">Comment 61</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Kim Olsun</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2021-09-22 15:47:02 EDT
        </span>

      </div>




<pre class="bz_comment_text"><a href="http://www.compilatori.com/category/tech/">http://www.compilatori.com/category/tech/</a>	<a href="http://www.wearelondonmade.com/category/tech/">http://www.wearelondonmade.com/category/tech/</a>	<a href="http://www.jopspeech.com/category/tech/">http://www.jopspeech.com/category/tech/</a>	<a href="http://joerg.li/category/tech/">http://joerg.li/category/tech/</a>	<a href="http://connstr.net/category/tech/">http://connstr.net/category/tech/</a>	<a href="http://embermanchester.uk/category/tech/">http://embermanchester.uk/category/tech/</a>	<a href="http://www.slipstone.co.uk/category/tech/">http://www.slipstone.co.uk/category/tech/</a>	<a href="http://www.logoarts.co.uk/category/tech/">http://www.logoarts.co.uk/category/tech/</a>	<a href="http://www.acpirateradio.co.uk/category/tech/">http://www.acpirateradio.co.uk/category/tech/</a>	<a href="https://waytowhatsnext.com/category/property/">https://waytowhatsnext.com/category/property/</a>	<a href="https://www.webb-dev.co.uk/category/property/">https://www.webb-dev.co.uk/category/property/</a>	<a href="http://www.iu-bloomington.com/category/property/">http://www.iu-bloomington.com/category/property/</a>	<a href="http://www-look-4.com/category/tech/">http://www-look-4.com/category/tech/</a></pre>
    </div>


  

</td>
<td>
</td>
</tr></table>
  </div>
        

</form>

<hr>
<ul class="related_actions">
    <li><a href="show_bug.cgi?format=multiple&amp;id=1608">Format For Printing</a></li>
    <li>&nbsp;-&nbsp;<a href="show_bug.cgi?ctype=xml&amp;id=1608">XML</a></li>
    <li>&nbsp;-&nbsp;<a href="enter_bug.cgi?cloned_bug_id=1608">Clone This Bug</a></li>
    
    <li>&nbsp;-&nbsp;<a href="#">Top of page </a></li>
    </ul>

<br>
</div>

    <div id="footer">
      <div class="intro"></div>
<ul id="useful-links">
  <li id="links-actions"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_bottom" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_bottom" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_bottom"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/5.0/using/understanding.html" target="_blank">Help</a>
      </li>
    

    <li id="mini_login_container_bottom">
  <span class="separator">| </span>
  <a id="login_link_bottom" href="show_bug.cgi?id=1608&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_bottom')">Log In</a>

  <form action="show_bug.cgi?id=1608" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_bottom">
    <input id="Bugzilla_login_bottom" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_bottom" required
           placeholder="Password">
      <input type="checkbox" id="Bugzilla_remember_bottom" 
             name="Bugzilla_remember" value="on" class="bz_remember"
             >
      <label for="Bugzilla_remember_bottom">Remember</label>
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_bottom">
    <a href="#" onclick="return hide_mini_login_form('_bottom')">[x]</a>
  </form>
</li>


  <li id="forgot_container_bottom">
    <span class="separator">| </span>
    <a id="forgot_link_bottom" href="show_bug.cgi?id=1608&amp;GoAheadAndLogIn=1#forgot"
       onclick="return show_forgot_form('_bottom')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_bottom"
          class="mini_forgot bz_default_hidden">
      <label for="login_bottom">Login:</label>
      <input name="loginname" size="20" id="login_bottom" required
          type="email" placeholder="Your Email Address">
      <input id="forgot_button_bottom" value="Reset Password" type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_bottom" name="token"
             value="1635630769-NJuZ8bRT8PccNNO2hB5Co0bsBfWid_YNz7I-UPBqRpA">
      <a href="#" onclick="return hide_forgot_form('_bottom')">[x]</a>
    </form>
  </li>
</ul>
  </li>

  




  
</ul>

      <div class="outro"></div>
    </div>

  </body>
</html>