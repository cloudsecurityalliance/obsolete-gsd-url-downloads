<!DOCTYPE html>
<html>
<head>
<base href="https://core.tcl-lang.org/tcl/info" />
<meta charset="UTF-8">
<meta http-equiv="Content-Security-Policy" content="default-src 'self' data:; script-src 'self' 'nonce-a5b9a1893e9229d72db0e49861982e87b8c2e755989d5ba5'; style-src 'self' 'unsafe-inline'; img-src * data:" />
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Tcl Source Code: View Ticket</title>
<link rel="alternate" type="application/rss+xml" title="RSS Feed" href="/tcl/timeline.rss" />
<link rel="stylesheet" href="/tcl/style.css?id=e3852445" type="text/css" />
</head>
<body class="tkt">
<div class="header">
<div class="title"><h1>Tcl Source Code</h1>View Ticket</div>
<div class="status"><a href='/tcl/login'>Login</a>
</div>
</div>
<div class="mainmenu">
<a id='hbbtn' href='/tcl/sitemap' aria-label='Site Map'>&#9776;</a><a href='https://core.tcl-lang.org/' class=''>Core <img src="/images/ext.png"></a>
<a href='/tcl/home' class=''>Home</a>
<a href='/tcl/timeline' class=''>Timeline</a>
<a href='/tcl/brlist' class='wideonly'>Branches</a>
<a href='/tcl/taglist' class='wideonly'>Tags</a>
<a href='/tcl/ticket' class=''>Tickets</a>
<a href='/tcl/wiki' class='wideonly'>Wiki</a>
</div>
<div id='hbdrop'></div>
<div class="submenu">
<a class="label" href="/tcl/attachadd?tkt=bad6cc213dfe8280&amp;from=/tcl/tktview/bad6cc213dfe8280">Attach</a>
<a class="label" href="/tcl/tktedit?name=bad6cc213dfe8280">Edit</a>
<a class="label" href="/tcl/tktnew">New Ticket</a>
<a class="label" href="/tcl/tktview/bad6cc213dfe8280?plaintext">Plaintext</a>
</div>
<div class="adunit_banner">
<div style="width: 640px; margin: 12px auto;">
<img style="float: left; width: 32px; height: 32px; padding-right: 10px;" src="/images/fa-bounties.png">
<a href="https://github.com/flightaware/Tcl-bounties">Bounty program</a>
for improvements to Tcl and certain Tcl packages.
</div></div>
<div class="content"><span id="debugMsg"></span>
<table id="timelineTable0" class="timelineTable"> 
<tr class="timelineDateRow"><td>
<div class="divider timelineDate">2021-07-01</div>
</td><td></td><td></td></tr>
<tr>
<td class="timelineTime">06:22</a></td>
<td class="timelineGraph">
</td>
<td class="timelineModernCell" id='mc0'>
&bull;
<span class='timelineModernComment'>
Ticket <span class="wikiTagCancelled">[bad6cc213d]</span> <i>A format string vulnerability in Tcl nmakehelp.c allows code execution via a crated file.</i> status still Closed with 4 other changes
</span>
<span class='timelineModernDetail'>artifact:&nbsp;686a2ddb91</a> user:&nbsp;jan.nijtmans</span>
</td></tr>
<tr class="timelineDateRow"><td>
<div class="divider timelineDate">2021-06-22</div>
</td><td></td><td></td></tr>
<tr>
<td class="timelineTime">09:11</a></td>
<td class="timelineGraph">
</td>
<td class="timelineModernCell" id='mc0'>
&bull;
<span class='timelineModernComment'>
Closed ticket <span class="wikiTagCancelled">[bad6cc213d]</span>.
</span>
<span class='timelineModernDetail'>artifact:&nbsp;b905b3d21a</a> user:&nbsp;jan.nijtmans</span>
</td></tr>
<tr>
<td class="timelineTime">09:02</a></td>
<td class="timelineGraph">
<div id="m1" class="tl-nodemark"></div>
</td>
<td class="timelineModernCell" id='mc1'>
<span class='timelineModernComment'>
Fix <span class="wikiTagCancelled">[bad6cc213d]</span>: A format string vulnerability in Tcl nmakehelp.c allows code execution via a crate...
</span>
<span class='timelineModernDetail'>check-in:&nbsp;28ef6c0c74</a> user:&nbsp;jan.nijtmans tags:&nbsp;core-8-5-branch</span>
</td></tr>
<tr>
<td class="timelineTime">07:33</a></td>
<td class="timelineGraph">
</td>
<td class="timelineModernCell" id='mc0'>
&bull;
<span class='timelineModernComment'>
New ticket <span class="wikiTagCancelled">[bad6cc213d]</span> <i>A format string vulnerability in Tcl nmakehelp.c allows code execution via a crated file.</i>.
</span>
<span class='timelineModernDetail'>artifact:&nbsp;813cbff8b7</a> user:&nbsp;salmonx</span>
</td></tr>
<tr class="timelineBottom" id="btm-0"><td></td><td></td><td></td></tr>
</table>
<script id='timeline-data-0' type='application/json'>{
  "iTableId": 0,
  "circleNodes": 1,
  "showArrowheads": 1,
  "iRailPitch": 0,
  "colorGraph": 1,
  "nomo": 0,
  "iTopRow": 1,
  "omitDescenders": 1,
  "fileDiff": 0,
  "scrollToSelect": 1,
  "nrail": 1,
  "baseUrl": "/tcl",
  "dwellTimeout": 100,
  "closeTimeout": 250,
  "hashDigits": 16,
  "bottomRowId": "btm-0",
  "rowinfo": [
{"id":1,"bg":"#bfbff0","r":0,"u":-1,"f":0,"fg":"#4f4f80","br":"core-8-5-branch","h":"28ef6c0c741408a2"}]
}</script>
<hr>
<table cellpadding="5">
<tr><td class="tktDspLabel">Ticket&nbsp;UUID:</td>
<td class='tktDspValue' colspan='3'>bad6cc213dfe8280c25b3bfe3e5830e9e2481f91</td>
</tr>
<tr>
<td class="tktDspLabel">Title:</td>
<td class="tktDspValue" colspan="3">A format string vulnerability in Tcl nmakehelp.c allows code execution via a crated file.</td>
</tr>
<tr>
<td class="tktDspLabel">Type:</td>
<td class="tktDspValue">Bug</td>
<td class="tktDspLabel">Version:</td>
<td class="tktDspValue">ALL</td>
</tr>
<tr>
<td class="tktDspLabel">Submitter:</td>
<td class="tktDspValue">salmonx</td>
<td class="tktDspLabel">Created&nbsp;on:</td>
<td class="tktDspValue">2021-06-22 07:33:42</td>
</tr>
<tr>
<td class="tktDspLabel">Subsystem:</td>
<td class="tktDspValue">69. Other</td>
<td class="tktDspLabel">Assigned&nbsp;To:</td>
<td class="tktDspValue">jan.nijtmans</td>
</tr>
<tr>
<td class="tktDspLabel">Priority:</td>
<td class="tktDspValue">5 Medium</td>
<td class="tktDspLabel">Severity:</td>
<td class="tktDspValue">Cosmetic</td>
</tr>
<tr>
<td class="tktDspLabel">Status:</td>
<td class="tktDspValue">Closed</td>
<td class="tktDspLabel">Last&nbsp;Modified:</td>
<td class="tktDspValue">2021-07-01 06:22:34</td>
</tr>
<tr>
<td class="tktDspLabel">Resolution:</td>
<td class="tktDspValue">Fixed</td>
<td class="tktDspLabel">Closed&nbsp;By:</td>
<td class="tktDspValue">jan.nijtmans</td>
</tr>
<tr>
<td class="tktDspLabel">&nbsp;</td>
<td class="tktDspValue">&nbsp;</td>
<td class="tktDspLabel">Closed&nbsp;on:</td>
<td class="tktDspValue">2021-07-01 06:22:34</td>
</tr>
<tr><td class="tktDspLabel" valign=top>Description:</td>
<td colspan="4" class="tktDspValue">
<p>
<p>Description: The 'printf' in 'SubstituteFile' accepts a format string as an argument, but the format string originates from the argv[3] which is controlled by user.
</p>
<p>Fix: printf("%s", szBuffer);</p>
<hr />
<pre>static int
SubstituteFile(
    const char *substitutions,
    const char *filename)
{
    ...

	/*
	 * Run the substitutions over each line of the input
	 */

	while (fgets(szBuffer, cbBuffer, fp) != NULL) {
	    list_item_t *p = NULL;
	    for (p = substPtr; p != NULL; p = p->nextPtr) {
		char *m = strstr(szBuffer, p->key);
		if (m) {
		    char *cp, *op, *sp;
		    cp = szCopy;
		    op = szBuffer;
		    while (op != m) *cp++ = *op++;
		    sp = p->value;
		    while (sp &amp;&amp; *sp) *cp++ = *sp++;
		    op += strlen(p->key);
		    while (*op) *cp++ = *op++;
		    *cp = 0;
		    memcpy(szBuffer, szCopy, sizeof(szCopy));
		}
	    }
	    printf(szBuffer); // Bug is here, szBuffer can be controlled
	}

	list_free(&amp;substPtr);
    }
    fclose(fp);
    return 0;
}
</pre>
</p>
</tr>
<tr><td class='tktDspLabel' valign='top'>User Comments:</td>
<td colspan='4' class='tktDspValue'>
jan.nijtmans added on 2021-07-01 06:22:34:
<p>
This issue has been assigned a CVE number: CVE-2021-35331
</p>
<hr>
jan.nijtmans added on 2021-06-22 09:11:53:
<p>
See also <a href="https://sqlite.org/forum/forumpost/47c7eb6802">https://sqlite.org/forum/forumpost/47c7eb6802</a>. Let's repeat the conclusion here: "This Is Not A Tcl Vulnerability"! Same arguments as DRH wrote in the SQLite forum post.
<p>That said, it's fixed here: [28ef6c0c741408a2]
</p>
</td></tr>
</table></div>
<div class="footer">
This page was generated in about
0.006s by
Fossil 2.17 [ae433763ae] 2021-10-04 11:39:55
</div>
<script nonce="a5b9a1893e9229d72db0e49861982e87b8c2e755989d5ba5">/* style.c:895 */
function debugMsg(msg){
var n = document.getElementById("debugMsg");
if(n){n.textContent=msg;}
}
</script>
<script nonce='a5b9a1893e9229d72db0e49861982e87b8c2e755989d5ba5'>
/* hbmenu.js *************************************************************/
(function() {
var hbButton = document.getElementById("hbbtn");
if (!hbButton) return;
if (!document.addEventListener) return;
var panel = document.getElementById("hbdrop");
if (!panel) return;
if (!panel.style) return;
var panelBorder = panel.style.border;
var panelInitialized = false;
var panelResetBorderTimerID = 0;
var animate = panel.style.transition !== null && (typeof(panel.style.transition) == "string");
var animMS = panel.getAttribute("data-anim-ms");
if (animMS) {
animMS = parseInt(animMS);
if (isNaN(animMS) || animMS == 0)
animate = false;
else if (animMS < 0)
animMS = 400;
}
else
animMS = 400;
var panelHeight;
function calculatePanelHeight() {
panel.style.maxHeight = '';
var es   = window.getComputedStyle(panel),
edis = es.display,
epos = es.position,
evis = es.visibility;
panel.style.visibility = 'hidden';
panel.style.position   = 'absolute';
panel.style.display    = 'block';
panelHeight = panel.offsetHeight + 'px';
panel.style.display    = edis;
panel.style.position   = epos;
panel.style.visibility = evis;
}
function showPanel() {
if (panelResetBorderTimerID) {
clearTimeout(panelResetBorderTimerID);
panelResetBorderTimerID = 0;
}
if (animate) {
if (!panelInitialized) {
panelInitialized = true;
calculatePanelHeight();
panel.style.transition = 'max-height ' + animMS +
'ms ease-in-out';
panel.style.overflowY  = 'hidden';
panel.style.maxHeight  = '0';
}
setTimeout(function() {
panel.style.maxHeight = panelHeight;
panel.style.border    = panelBorder;
}, 40);
}
panel.style.display = 'block';
document.addEventListener('keydown',panelKeydown,true);
document.addEventListener('click',panelClick,false);
}
var panelKeydown = function(event) {
var key = event.which || event.keyCode;
if (key == 27) {
event.stopPropagation();
panelToggle(true);
}
};
var panelClick = function(event) {
if (!panel.contains(event.target)) {
panelToggle(true);
}
};
function panelShowing() {
if (animate) {
return panel.style.maxHeight == panelHeight;
}
else {
return panel.style.display == 'block';
}
}
function hasChildren(element) {
var childElement = element.firstChild;
while (childElement) {
if (childElement.nodeType == 1)
return true;
childElement = childElement.nextSibling;
}
return false;
}
window.addEventListener('resize',function(event) {
panelInitialized = false;
},false);
hbButton.addEventListener('click',function(event) {
event.stopPropagation();
event.preventDefault();
panelToggle(false);
},false);
function panelToggle(suppressAnimation) {
if (panelShowing()) {
document.removeEventListener('keydown',panelKeydown,true);
document.removeEventListener('click',panelClick,false);
if (animate) {
if (suppressAnimation) {
var transition = panel.style.transition;
panel.style.transition = '';
panel.style.maxHeight = '0';
panel.style.border = 'none';
setTimeout(function() {
panel.style.transition = transition;
}, 40);
}
else {
panel.style.maxHeight = '0';
panelResetBorderTimerID = setTimeout(function() {
panel.style.border = 'none';
panelResetBorderTimerID = 0;
}, animMS);
}
}
else {
panel.style.display = 'none';
}
}
else {
if (!hasChildren(panel)) {
var xhr = new XMLHttpRequest();
xhr.onload = function() {
var doc = xhr.responseXML;
if (doc) {
var sm = doc.querySelector("ul#sitemap");
if (sm && xhr.status == 200) {
panel.innerHTML = sm.outerHTML;
showPanel();
}
}
}
var url = hbButton.href + (hbButton.href.includes("?")?"&popup":"?popup")
xhr.open("GET", url);
xhr.responseType = "document";
xhr.send();
}
else {
showPanel();
}
}
}
})();
/* graph.js *************************************************************/
var amendCssOnce = 1;
function amendCss(circleNodes,showArrowheads){
if( !amendCssOnce ) return;
var css = "";
if( circleNodes ){
css += ".tl-node, .tl-node:after { border-radius: 50%; }";
}
if( !showArrowheads ){
css += ".tl-arrow.u { display: none; }";
}
if( css!=="" ){
var style = document.createElement("style");
style.textContent = css;
document.querySelector("head").appendChild(style);
}
amendCssOnce = 0;
}
var tooltipObj = document.createElement("span");
tooltipObj.className = "tl-tooltip";
tooltipObj.style.display = "none";
document.getElementsByClassName("content")[0].appendChild(tooltipObj);
tooltipObj.onmouseenter = function(){
stopCloseTimer();
stopDwellTimer();
tooltipInfo.ixHover = tooltipInfo.ixActive;
}
tooltipObj.onmouseleave = function(){
if (tooltipInfo.ixActive != -1) resumeCloseTimer();
};
window.tooltipInfo = {
dwellTimeout: 250,
closeTimeout: 3000,
hashDigits: 16,
idTimer: 0,
idTimerClose: 0,
ixHover: -1,
ixActive: -1,
nodeHover: null,
idNodeActive: 0,
posX: 0, posY: 0
};
function onKeyDown(event){
var key = event.which || event.keyCode;
if( key==27 ){
event.stopPropagation();
hideGraphTooltip();
}
}
function hideGraphTooltip(){
document.removeEventListener('keydown',onKeyDown,true);
stopCloseTimer();
tooltipObj.style.display = "none";
tooltipInfo.ixActive = -1;
tooltipInfo.idNodeActive = 0;
}
document.body.onunload = hideGraphTooltip
function stopDwellTimer(){
if(tooltipInfo.idTimer!=0){
clearTimeout(tooltipInfo.idTimer);
tooltipInfo.idTimer = 0;
}
}
function resumeCloseTimer(){
if(tooltipInfo.idTimerClose==0 && tooltipInfo.closeTimeout>0) {
tooltipInfo.idTimerClose = setTimeout(function(){
tooltipInfo.idTimerClose = 0;
hideGraphTooltip();
},tooltipInfo.closeTimeout);
}
}
function stopCloseTimer(){
if(tooltipInfo.idTimerClose!=0){
clearTimeout(tooltipInfo.idTimerClose);
tooltipInfo.idTimerClose = 0;
}
}
function TimelineGraph(tx){
var topObj = document.getElementById("timelineTable"+tx.iTableId);
amendCss(tx.circleNodes, tx.showArrowheads);
tooltipInfo.dwellTimeout = tx.dwellTimeout
tooltipInfo.closeTimeout = tx.closeTimeout
tooltipInfo.hashDigits = tx.hashDigits
topObj.onclick = clickOnGraph
topObj.ondblclick = dblclickOnGraph
topObj.onmousemove = function(e) {
var ix = findTxIndex(e);
topObj.style.cursor = (ix<0) ? "" : "pointer"
mouseOverGraph(e,ix,null);
};
topObj.onmouseleave = function(e) {
if(e.relatedTarget && e.relatedTarget != tooltipObj){
tooltipInfo.ixHover = -1;
hideGraphTooltip();
stopDwellTimer();
stopCloseTimer();
}
};
function mouseOverNode(e){
e.stopPropagation()
mouseOverGraph(e,-2,this)
}
function mouseOverGraph(e,ix,node){
stopDwellTimer();
var ownTooltip =
(ix>=0 && ix==tooltipInfo.ixActive) ||
(ix==-2 && tooltipInfo.idNodeActive==node.id);
if(ownTooltip) stopCloseTimer();
else resumeCloseTimer();
tooltipInfo.ixHover = ix;
tooltipInfo.nodeHover = node;
tooltipInfo.posX = e.clientX;
tooltipInfo.posY = e.clientY;
if(ix!=-1 && !ownTooltip && tooltipInfo.dwellTimeout>0){
tooltipInfo.idTimer = setTimeout(function(){
tooltipInfo.idTimer = 0;
stopCloseTimer();
showGraphTooltip();
},tooltipInfo.dwellTimeout);
}
}
var canvasDiv;
var railPitch;
var mergeOffset;
var node, arrow, arrowSmall, line, mArrow, mLine, wArrow, wLine;
function initGraph(){
var parent = topObj.rows[0].cells[1];
parent.style.verticalAlign = "top";
canvasDiv = document.createElement("div");
canvasDiv.className = "tl-canvas";
canvasDiv.style.position = "absolute";
parent.appendChild(canvasDiv);
var elems = {};
var elemClasses = [
"rail", "mergeoffset", "node", "arrow u", "arrow u sm", "line",
"arrow merge r", "line merge", "arrow warp", "line warp",
"line cherrypick", "line dotted"
];
for( var i=0; i<elemClasses.length; i++ ){
var cls = elemClasses[i];
var elem = document.createElement("div");
elem.className = "tl-" + cls;
if( cls.indexOf("line")==0 ) elem.className += " v";
canvasDiv.appendChild(elem);
var k = cls.replace(/\s/g, "_");
var r = elem.getBoundingClientRect();
var w = Math.round(r.right - r.left);
var h = Math.round(r.bottom - r.top);
elems[k] = {w: w, h: h, cls: cls};
}
node = elems.node;
arrow = elems.arrow_u;
arrowSmall = elems.arrow_u_sm;
line = elems.line;
mArrow = elems.arrow_merge_r;
mLine = elems.line_merge;
cpLine = elems.line_cherrypick;
wArrow = elems.arrow_warp;
wLine = elems.line_warp;
dotLine = elems.line_dotted;
var minRailPitch = Math.ceil((node.w+line.w)/2 + mArrow.w + 1);
if( window.innerWidth<400 ){
railPitch = minRailPitch;
}else{
if( tx.iRailPitch>0 ){
railPitch = tx.iRailPitch;
}else{
railPitch = elems.rail.w;
railPitch -= Math.floor((tx.nrail-1)*(railPitch-minRailPitch)/21);
}
railPitch = Math.max(railPitch, minRailPitch);
}
if( tx.nomo ){
mergeOffset = 0;
}else{
mergeOffset = railPitch-minRailPitch-mLine.w;
mergeOffset = Math.min(mergeOffset, elems.mergeoffset.w);
mergeOffset = mergeOffset>0 ? mergeOffset + line.w/2 : 0;
}
var canvasWidth = (tx.nrail-1)*railPitch + node.w;
canvasDiv.style.width = canvasWidth + "px";
canvasDiv.style.position = "relative";
}
function drawBox(cls,color,x0,y0,x1,y1){
var n = document.createElement("div");
x0 = Math.floor(x0);
y0 = Math.floor(y0);
x1 = x1 || x1===0 ? Math.floor(x1) : x0;
y1 = y1 || y1===0 ? Math.floor(y1) : y0;
if( x0>x1 ){ var t=x0; x0=x1; x1=t; }
if( y0>y1 ){ var t=y0; y0=y1; y1=t; }
var w = x1-x0;
var h = y1-y0;
n.style.position = "absolute";
n.style.left = x0+"px";
n.style.top = y0+"px";
if( w ) n.style.width = w+"px";
if( h ) n.style.height = h+"px";
if( color ) n.style.backgroundColor = color;
n.className = "tl-"+cls;
canvasDiv.appendChild(n);
return n;
}
function absoluteY(obj){
var y = 0;
do{
y += obj.offsetTop;
}while( obj = obj.offsetParent );
return y;
}
function absoluteX(obj){
var x = 0;
do{
x += obj.offsetLeft;
}while( obj = obj.offsetParent );
return x;
}
function miLineY(p){
return p.y + node.h - mLine.w - 1;
}
function drawLine(elem,color,x0,y0,x1,y1){
var cls = elem.cls + " ";
if( x1===null ){
x1 = x0+elem.w;
cls += "v";
}else{
y1 = y0+elem.w;
cls += "h";
}
return drawBox(cls,color,x0,y0,x1,y1);
}
function drawUpArrow(from,to,color,id){
var y = to.y + node.h;
var arrowSpace = from.y - y + (!from.id || from.r!=to.r ? node.h/2 : 0);
var arw = arrowSpace < arrow.h*1.5 ? arrowSmall : arrow;
var x = to.x + (node.w-line.w)/2;
var y0 = from.y + node.h/2;
var y1 = Math.ceil(to.y + node.h + arw.h/2);
var n = drawLine(line,color,x,y0,null,y1);
addToolTip(n,id)
x = to.x + (node.w-arw.w)/2;
n = drawBox(arw.cls,null,x,y);
if(color) n.style.borderBottomColor = color;
addToolTip(n,id)
}
function drawDotted(from,to,color,id){
var x = to.x + (node.w-line.w)/2;
var y0 = from.y + node.h/2;
var y1 = Math.ceil(to.y + node.h);
var n = drawLine(dotLine,null,x,y0,null,y1)
if( color ) n.style.borderColor = color
addToolTip(n,id)
}
function addToolTip(n,id){
if( id ) n.setAttribute("data-ix",id-tx.iTopRow)
}
function drawMergeLine(x0,y0,x1,y1){
drawLine(mLine,null,x0,y0,x1,y1);
}
function drawCherrypickLine(x0,y0,x1,y1){
drawLine(cpLine,null,x0,y0,x1,y1);
}
function drawMergeArrow(p,rail,isCP){
var x0 = rail*railPitch + node.w/2;
if( rail in mergeLines ){
x0 += mergeLines[rail];
if( p.r<rail ) x0 += mLine.w;
}else{
x0 += (p.r<rail ? -1 : 1)*line.w/2;
}
var x1 = mArrow.w ? mArrow.w/2 : -node.w/2;
x1 = p.x + (p.r<rail ? node.w + Math.ceil(x1) : -x1);
var y = miLineY(p);
var x = p.x + (p.r<rail ? node.w : -mArrow.w);
var cls;
if( isCP ){
drawCherrypickLine(x0,y,x1,null);
cls = "arrow cherrypick " + (p.r<rail ? "l" : "r");
}else{
drawMergeLine(x0,y,x1,null);
cls = "arrow merge " + (p.r<rail ? "l" : "r");
}
drawBox(cls,null,x,y+(mLine.w-mArrow.h)/2);
}
function drawNode(p, btm){
if( p.bg ){
var e = document.getElementById("mc"+p.id);
if(e) e.style.backgroundColor = p.bg;
e = document.getElementById("md"+p.id);
if(e) e.style.backgroundColor = p.bg;
}
if( p.r<0 ) return;
if( p.u>0 ) drawUpArrow(p,tx.rowinfo[p.u-tx.iTopRow],p.fg,p.id);
if( p.sb>0 ) drawDotted(p,tx.rowinfo[p.sb-tx.iTopRow],p.fg,p.id);
var cls = node.cls;
if( p.hasOwnProperty('mi') && p.mi.length ) cls += " merge";
if( p.f&1 ) cls += " leaf";
var n = drawBox(cls,p.bg,p.x,p.y);
n.id = "tln"+p.id;
n.onclick = clickOnNode;
n.ondblclick = dblclickOnNode;
n.onmousemove = mouseOverNode;
n.style.zIndex = 10;
if( !tx.omitDescenders ){
if( p.u==0 ){
if( p.hasOwnProperty('mo') && p.r==p.mo ){
var ix = p.hasOwnProperty('cu') ? p.cu : p.mu;
var top = tx.rowinfo[ix-tx.iTopRow]
drawUpArrow(p,{x: p.x, y: top.y-node.h}, p.fg, p.id);
}else if( p.y>100 ){
drawUpArrow(p,{x: p.x, y: p.y-50}, p.fg, p.id);
}else{
drawUpArrow(p,{x: p.x, y: 0},p.fg, p.id);
}
}
if( p.hasOwnProperty('d') ){
if( p.y + 150 >= btm ){
drawUpArrow({x: p.x, y: btm - node.h/2},p,p.fg,p.id);
}else{
drawUpArrow({x: p.x, y: p.y+50},p,p.fg,p.id);
drawDotted({x: p.x, y: p.y+63},{x: p.x, y: p.y+50-node.h/2},p.fg,p.id);
}
}
}
if( p.hasOwnProperty('mo') ){
var x0 = p.x + node.w/2;
var x1 = p.mo*railPitch + node.w/2;
var u = tx.rowinfo[p.mu-tx.iTopRow];
var y1 = miLineY(u);
if( p.u<=0 || p.mo!=p.r ){
if( p.u==0 && p.mo==p.r ){
mergeLines[p.mo] = u.r<p.r ? -mergeOffset-mLine.w : mergeOffset;
}else{
mergeLines[p.mo] = -mLine.w/2;
}
x1 += mergeLines[p.mo]
var y0 = p.y+2;
var isCP = p.hasOwnProperty('cu');
if( p.mu==p.id ){
var dx = x1<x0 ? mArrow.w : -mArrow.w;
if( isCP ){
drawCherrypickLine(x0,y0,x1+dx,null);
cls = "arrow cherrypick " + (x1<x0 ? "l" : "r");
}else{
drawMergeLine(x0,y0,x1+dx,null);
cls = "arrow merge " + (x1<x0 ? "l" : "r");
}
if( !isCP || p.mu==p.cu ){
dx = x1<x0 ? mLine.w : -(mArrow.w + mLine.w/2);
drawBox(cls,null,x1+dx,y0+(mLine.w-mArrow.h)/2);
}
y1 = y0;
}else{
drawMergeLine(x0,y0,x1+(x0<x1 ? mLine.w : 0),null);
drawMergeLine(x1,y0+mLine.w,null,y1);
}
if( isCP && p.cu!=p.id ){
var u2 = tx.rowinfo[p.cu-tx.iTopRow];
var y2 = miLineY(u2);
drawCherrypickLine(x1,y1,null,y2);
}
}else if( mergeOffset ){
mergeLines[p.mo] = u.r<p.r ? -mergeOffset-mLine.w : mergeOffset;
x1 += mergeLines[p.mo];
if( p.mu<p.id ){
drawMergeLine(x1,p.y+node.h/2,null,y1);
}
if( p.hasOwnProperty('cu') ){
var u2 = tx.rowinfo[p.cu-tx.iTopRow];
var y2 = miLineY(u2);
drawCherrypickLine(x1,y1,null,y2);
}
}else{
delete mergeLines[p.mo];
}
}
if( p.hasOwnProperty('au') ){
for( var i=0; i<p.au.length; i+=2 ){
var rail = p.au[i];
var x0 = p.x + node.w/2;
var x1 = rail*railPitch + (node.w-line.w)/2;
if( x0<x1 ){
x0 = Math.ceil(x0);
x1 += line.w;
}
var y0 = p.y + (node.h-line.w)/2;
var u = tx.rowinfo[p.au[i+1]-tx.iTopRow];
if( u.id<p.id ){
drawLine(line,u.fg,x0,y0,x1,null);
drawUpArrow(p,u,u.fg,u.id);
}else{
var y1 = u.y + (node.h-line.w)/2;
var n = drawLine(wLine,u.fg,x0,y0,x1,null);
addToolTip(n,u.id)
n = drawLine(wLine,u.fg,x1-line.w,y0,null,y1+line.w);
addToolTip(n,u.id)
n = drawLine(wLine,u.fg,x1,y1,u.x-wArrow.w/2,null);
addToolTip(n,u.id)
var x = u.x-wArrow.w;
var y = u.y+(node.h-wArrow.h)/2;
n = drawBox(wArrow.cls,null,x,y);
addToolTip(n,u.id)
if( u.fg ) n.style.borderLeftColor = u.fg;
}
}
}
if( p.hasOwnProperty('mi') ){
for( var i=0; i<p.mi.length; i++ ){
var rail = p.mi[i];
if( rail<0 ){
rail = -rail;
mergeLines[rail] = -mLine.w/2;
var x = rail*railPitch + (node.w-mLine.w)/2;
var y = miLineY(p);
drawMergeLine(x,y,null,mergeBtm[rail]);
mergeBtm[rail] = y;
}
drawMergeArrow(p,rail,0);
}
}
if( p.hasOwnProperty('ci') ){
for( var i=0; i<p.ci.length; i++ ){
var rail = p.ci[i];
if( rail<0 ){
rail = -rail;
mergeLines[rail] = -mLine.w/2;
var x = rail*railPitch + (node.w-mLine.w)/2;
var y = miLineY(p);
drawCherrypickLine(x,y,null,mergeBtm[rail]);
mergeBtm[rail] = y;
}
drawMergeArrow(p,rail,1);
}
}
}
var mergeLines;
var mergeBtm = new Array;
function renderGraph(){
mergeLines = {};
canvasDiv.innerHTML = "";
var canvasY = absoluteY(canvasDiv);
for(var i=0; i<tx.rowinfo.length; i++ ){
var e = document.getElementById("m"+tx.rowinfo[i].id);
tx.rowinfo[i].y = absoluteY(e) - canvasY;
tx.rowinfo[i].x = tx.rowinfo[i].r*railPitch;
}
var tlBtm = document.getElementById(tx.bottomRowId);
if( tlBtm.offsetHeight<node.h ){
tlBtm.style.height = node.h + "px";
}
var btm = absoluteY(tlBtm) - canvasY + tlBtm.offsetHeight;
for( var i=0; i<tx.nrail; i++) mergeBtm[i] = btm;
for( var i=tx.rowinfo.length-1; i>=0; i-- ){
drawNode(tx.rowinfo[i], btm);
}
}
var selRow;
function clickOnNode(e){
hideGraphTooltip()
var p = tx.rowinfo[parseInt(this.id.match(/\d+$/)[0], 10)-tx.iTopRow];
if( !selRow ){
selRow = p;
this.className += " sel";
canvasDiv.className += " sel";
}else if( selRow==p ){
selRow = null;
this.className = this.className.replace(" sel", "");
canvasDiv.className = canvasDiv.className.replace(" sel", "");
}else{
if( tx.fileDiff ){
location.href=tx.baseUrl + "/fdiff?v1="+selRow.h+"&v2="+p.h;
}else{
var href = tx.baseUrl + "/vdiff?from="+selRow.h+"&to="+p.h;
let params = (new URL(document.location)).searchParams;
if(params && typeof params === "object"){
let glob = params.get("chng");
if( !glob ){
glob = params.get("glob");
}
if( glob ){
href += "&glob=" + glob;
}
}
location.href = href;
}
}
e.stopPropagation()
}
function dblclickOnNode(e){
var p = tx.rowinfo[parseInt(this.id.match(/\d+$/)[0], 10)-tx.iTopRow];
window.location.href = tx.baseUrl+"/info/"+p.h
e.stopPropagation()
}
function findTxIndex(e){
if( !tx.rowinfo ) return -1;
var x = e.clientX + window.pageXOffset - absoluteX(canvasDiv);
var y = e.clientY + window.pageYOffset - absoluteY(canvasDiv);
var aNode = canvasDiv.childNodes
var nNode = aNode.length;
var i;
for(i=0;i<nNode;i++){
var n = aNode[i]
if( !n.hasAttribute("data-ix") ) continue;
if( x<n.offsetLeft-5 ) continue;
if( x>n.offsetLeft+n.offsetWidth+5 ) continue;
if( y<n.offsetTop-5 ) continue;
if( y>n.offsetTop+n.offsetHeight ) continue;
return n.getAttribute("data-ix")
}
return -1
}
function branchHyperlink(ix){
var br = tx.rowinfo[ix].br
var dest = tx.baseUrl + "/timeline?r=" + encodeURIComponent(br)
dest += tx.fileDiff ? "&m&cf=" : "&m&c="
dest += encodeURIComponent(tx.rowinfo[ix].h)
return dest
}
function clickOnGraph(e){
stopCloseTimer();
stopDwellTimer();
tooltipInfo.ixHover = findTxIndex(e);
tooltipInfo.posX = e.clientX;
tooltipInfo.posY = e.clientY;
showGraphTooltip();
}
function showGraphTooltip(){
var html = null
var ix = -1
if( tooltipInfo.ixHover==-2 ){
ix = parseInt(tooltipInfo.nodeHover.id.match(/\d+$/)[0],10)-tx.iTopRow
var h = tx.rowinfo[ix].h
var dest = tx.baseUrl + "/info/" + h
h = h.slice(0,tooltipInfo.hashDigits);
if( tx.fileDiff ){
html = "artifact <a id=\"tooltip-link\" href=\""+dest+"\">"+h+"</a>"
}else{
html = "check-in <a id=\"tooltip-link\" href=\""+dest+"\">"+h+"</a>"
}
tooltipInfo.ixActive = -2;
tooltipInfo.idNodeActive = tooltipInfo.nodeHover.id;
}else if( tooltipInfo.ixHover>=0 ){
ix = tooltipInfo.ixHover
var br = tx.rowinfo[ix].br
var dest = branchHyperlink(ix)
var hbr = br.replace(/&/g, "&amp;")
.replace(/</g, "&lt;")
.replace(/>/g, "&gt;")
.replace(/"/g, "&quot;")
.replace(/'/g, "&#039;");
html = "branch <a id=\"tooltip-link\" href=\""+dest+"\">"+hbr+"</a>"
tooltipInfo.ixActive = ix;
tooltipInfo.idNodeActive = 0;
}
if( html ){
var s = getComputedStyle(document.body)
if( tx.rowinfo[ix].bg.length ){
tooltipObj.style.backgroundColor = tx.rowinfo[ix].bg
}else{
tooltipObj.style.backgroundColor = s.getPropertyValue('background-color')
}
tooltipObj.style.borderColor =
tooltipObj.style.color = s.getPropertyValue('color')
tooltipObj.style.visibility = "hidden"
tooltipObj.innerHTML = html
tooltipObj.insertBefore(makeCopyButton("tooltip-link",0,0),
tooltipObj.childNodes[1]);
tooltipObj.style.display = "inline"
tooltipObj.style.position = "absolute"
var x = tooltipInfo.posX + 4 + window.pageXOffset
- absoluteX(tooltipObj.offsetParent)
tooltipObj.style.left = x+"px"
var y = tooltipInfo.posY + window.pageYOffset
- tooltipObj.clientHeight - 4
- absoluteY(tooltipObj.offsetParent)
tooltipObj.style.top = y+"px"
tooltipObj.style.visibility = "visible"
document.addEventListener('keydown',onKeyDown,true);
}else{
hideGraphTooltip()
}
}
function dblclickOnGraph(e){
var ix = findTxIndex(e);
hideGraphTooltip()
if( ix>=0 ){
var dest = branchHyperlink(ix)
window.location.href = dest
}
}
function changeDisplay(selector,value){
var x = document.getElementsByClassName(selector);
var n = x.length;
for(var i=0; i<n; i++) {x[i].style.display = value;}
}
function changeDisplayById(id,value){
var x = document.getElementById(id);
if(x) x.style.display=value;
}
function toggleDetail(){
var id = parseInt(this.getAttribute('data-id'))
var x = document.getElementById("detail-"+id);
if( x.style.display=="inline" ){
x.style.display="none";
changeDisplayById("ellipsis-"+id,"inline");
changeDisplayById("links-"+id,"none");
}else{
x.style.display="inline";
changeDisplayById("ellipsis-"+id,"none");
changeDisplayById("links-"+id,"inline");
}
checkHeight();
}
function scrollToSelected(){
var x = document.getElementsByClassName('timelineSelected');
if(x[0]){
var h = window.innerHeight;
var y = absoluteY(x[0]) - h/2;
if( y>0 ) window.scrollTo(0, y);
}
}
if( tx.rowinfo ){
var lastRow =
document.getElementById("m"+tx.rowinfo[tx.rowinfo.length-1].id);
var lastY = 0;
function checkHeight(){
var h = absoluteY(lastRow);
if( h!=lastY ){
renderGraph();
lastY = h;
}
setTimeout(checkHeight, 1000);
}
initGraph();
checkHeight();
}else{
function checkHeight(){}
}
if( tx.scrollToSelect ){
scrollToSelected();
}
var lx = topObj.getElementsByClassName('timelineEllipsis');
var i;
for(i=0; i<lx.length; i++){
if( lx[i].hasAttribute('data-id') ) lx[i].onclick = toggleDetail;
}
lx = topObj.getElementsByClassName('timelineCompactComment');
for(i=0; i<lx.length; i++){
if( lx[i].hasAttribute('data-id') ) lx[i].onclick = toggleDetail;
}
if( window.innerWidth<400 ){
lx = topObj.getElementsByClassName('timelineDateRow');
for(i=0; i<lx.length; i++){
var rx = lx[i];
if( rx.getAttribute('data-reordered') ) break;
rx.setAttribute('data-reordered',1);
rx.appendChild(rx.firstChild);
rx.insertBefore(rx.childNodes[1],rx.firstChild);
}
lx = topObj.getElementsByClassName('timelineHistLink');
for(i=0; i<lx.length; i++){
var rx = lx[i];
rx.style.display="none";
}
}
}
(function(){
var i;
for(i=0; 1; i++){
var dataObj = document.getElementById("timeline-data-"+i);
if(!dataObj) break;
var txJson = dataObj.textContent || dataObj.innerText;
var tx = JSON.parse(txJson);
TimelineGraph(tx);
}
}());
/* copybtn.js *************************************************************/
function makeCopyButton(idTarget,bFlipped,cchLength){
var elButton = document.createElement("span");
elButton.className = "copy-button";
if( bFlipped ) elButton.className += " copy-button-flipped";
elButton.id = "copy-" + idTarget;
initCopyButton(elButton,idTarget,cchLength);
return elButton;
}
function initCopyButtonById(idButton,idTarget,cchLength){
idButton = idButton || "copy-" + idTarget;
var elButton = document.getElementById(idButton);
if( elButton ) initCopyButton(elButton,idTarget,cchLength);
return elButton;
}
function initCopyButton(elButton,idTarget,cchLength){
elButton.style.transition = "";
elButton.style.opacity = 1;
if( idTarget ) elButton.setAttribute("data-copytarget",idTarget);
if( cchLength ) elButton.setAttribute("data-copylength",cchLength);
elButton.onclick = clickCopyButton;
return elButton;
}
setTimeout(function(){
var aButtons = document.getElementsByClassName("copy-button");
for ( var i=0; i<aButtons.length; i++ ){
initCopyButton(aButtons[i],0,0);
}
},1);
var lockCopyText = false;
function clickCopyButton(e){
e.preventDefault();
e.stopPropagation();
if( lockCopyText ) return;
lockCopyText = true;
this.style.transition = "opacity 400ms ease-in-out";
this.style.opacity = 0;
var idTarget = this.getAttribute("data-copytarget");
var elTarget = document.getElementById(idTarget);
if( elTarget ){
var text = elTarget.innerText.replace(/^\s+|\s+$/g,'');
var cchLength = parseInt(this.getAttribute("data-copylength"));
if( !isNaN(cchLength) && cchLength>0 ){
text = text.slice(0,cchLength);
}
copyTextToClipboard(text);
}
setTimeout(function(id){
var elButton = document.getElementById(id);
if( elButton ){
elButton.style.transition = "";
elButton.style.opacity = 1;
}
lockCopyText = false;
}.bind(null,this.id),400);
}
function copyTextToClipboard(text){
if( window.clipboardData && window.clipboardData.setData ){
window.clipboardData.setData('Text',text);
}else{
var x = document.createElement("textarea");
x.style.position = 'fixed';
x.value = text;
document.body.appendChild(x);
x.select();
try{
document.execCommand('copy');
}catch(err){
}finally{
document.body.removeChild(x);
}
}
}
</script>
</body>
</html>
