<!DOCTYPE html>
<html lang="en-US">
  <head>
    <title>Beyond Binary - Advisory: Seagate NAS Remote Code Execution Vulnerability</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="stylesheet" href="/css/style.css?7" />
    <link rel="icon" type="iamge/png" href="https://beyondbinary.io/images/favicon.png" />
    <link rel="shortcut" type="iamge/png" href="https://beyondbinary.io/images/favicon.png" />
    <link rel="apple-touch-icon" type="iamge/png" href="https://beyondbinary.io/images/favicon.png" />
    <link rel="canonical" href="https://beyondbinary.io/articles/seagate-nas-rce/" />

    <!--[if lt IE 9]>
      <script src="/js/lib/html5shiv.js"></script>
      <script src="/js/lib/ie8.js"></script>
      <script src="/js/lib/respond.min.js"></script>
    <![endif]-->
  </head>
  <body>
    <header>
      <div class="container">
        <div class="row">
          <div class="table-row">
            <div class="col-xs-4 col-sm-3 cell-xs">
              <a href="/">
                <img src="/images/beyond-binary-logo.png" srcset="/images/beyond-binary-logo@2x.png 2x" alt="" />
              </a>
            </div>
            <div class="col-xs-8 col-sm-9 cell-xs text-right position-static">
              <ul class="header-navigation">
                <li><a href="/">home</a></li>
                <li><a href="/about/">about</a></li>
                <li><a href="/services/">services</a></li>
                <li><a href="/articles/">articles</a></li>
                <li><a href="/contact/">contact</a></li>
                <li><a href="/media/">media</a></li>
              </ul>
              <svg id="menu-burger" width="64" height="64" viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg">
                <path fill="none" stroke="#7b7b7b" stroke-width="3" stroke-linejoin="bevel" d="m 5.0916789,20.818994 53.8166421,0"/>
                <path fill="none" stroke="#7b7b7b" stroke-width="3" stroke-linejoin="bevel" d="m 5.1969746,31.909063 53.8166424,0"/>
                <path fill="none" stroke="#7b7b7b" stroke-width="3" stroke-linejoin="bevel" d="m 5.0916788,42.95698 53.8166422,0"/>
              </svg>
            </div>
          </div>
        </div>
      </div>
      <img class="sticky-morph" src="/images/sticky-morph.png" srcset="/images/sticky-morph@2x.png 2x" alt="" />
    </header>

    <section>
      <div class="container">
        <h2 class="blue-line-through-md"><span>Articles &amp; News&nbsp;</span></h2>
        <div class="row">
          <article class="col-md-7">
            <header>
              <span class="date">1 March 2015</span>
              <h1>Advisory: Seagate NAS Remote Code Execution Vulnerability</h1>
              <a class="tag" href="/tags/advisory/">Advisory</a>
              <a class="tag" href="/tags/cve/">CVE</a>
              <a class="tag" href="/tags/exploit/">Exploit</a>
              <a class="tag" href="/tags/seagate/">Seagate</a>
            </header>

            <h2>Overview</h2>

            <p><a href="http://www.seagate.com/">Seagate</a> is a well-known vendor of hardware solutions, with products available worldwide. Its line of <a href="https://en.wikipedia.org/wiki/Network-attached_storage">NAS</a> products targeted at businesses is called <a href="http://www.seagate.com/au/en/support/external-hard-drives/network-storage/business-storage-2-bay-nas/">Business Storage 2-Bay NAS</a>. These can be found inside home and business networks, and in many cases they are publicly exposed.</p>

            <p>Products in this line that run firmware versions up to and including version 2014.00319 were found to be vulnerable to a number of issues that allow for remote code execution under the context of the root user. These vulnerabilities are exploitable without requiring any form of authorisation on the device.</p>

            <h2>Updates</h2>

            <p>This document was updated on 11th June 2015 to include links to the released firmware that attempts to address the issues in this advisory.</p>

            <h2>Vulnerability Details</h2>

            <p>Seagate Business NAS products come with a web-enabled management application. This application lets administrators perform the usual device configuration functions, such as adding users, setting up access control, managing files, and more.</p>

            <p>The web application is built with the following core technologies:</p>

            <ul>
              <li>PHP version 5.2.13 (<a href="http://php.net/releases/5_2_13.php">Released 25th February 2010</a>)</li>
              <li>CodeIgniter 2.1.0 (<a href="https://github.com/bcit-ci/CodeIgniter/releases/tag/v2.1.0">Released 23rd November 2011</a>)</li>
              <li>Lighttpd 1.4.28 (<a href="http://redmine.lighttpd.net/projects/lighttpd/wiki/Release-1_4_28">Released 22nd August 2010</a>)</li>
            </ul>

            <p>All three of these technologies are clearly out of date, and the listed versions of PHP and CodeIgniter are known to have security issues. On top of these technologies sits a custom PHP application, which itself contains a number of security-related issues. Details of each key issue are listed below.</p>

            <h3>PHP 5.2.3</h3>

            <p>Versions of PHP prior to 5.3.4 allow users to specify file paths that include a NULL byte (<a href="http://www.cvedetails.com/cve/CVE-2006-7243/">CVE-2006-7243</a>). This issue allows user-controlled data to prematurely terminate file paths, allowing for full control over the file extension.</p>

            <p>This issue is regularly abused to include unintended files in PHP source code via functions such as <code>require()</code> and <code>include()</code>.</p>

            <h3>CodeIgniter 2.1.0</h3>

            <p>Versions of CodeIgniter prior to 2.2.0 create session tokens that are made up of a serialised PHP associative array (hash) that has been encrypted using a custom algorithm. This PHP hash contains user-controllable data, which makes it possible for users to <a href="https://www.mehmetince.net/codeigniter-object-injection-vulnerability-via-encryption-key/">extract the encryption key</a> and decrypt the content of the cookie (<a href="https://www.dionach.com/blog/codeigniter-session-decoding-vulnerability">CVE-2014-8686</a>). Once decrypted, users can modify the content of the cookie and re-encrypt it prior to submitting it back to the server, resulting in other potential attack vectors including PHP object injection.</p>

            <p>A unique encryption key value should be used for each installation of a CodeIgniter application. However, in the case of this line of NAS products, the encryption key that is used is exactly the same for every instance (<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8687">CVE-2014-8687</a>).</p>

            <h3>Custom web application</h3>

            <p>The custom web application does not appear to maintain session-related information on the web server side. All of the information relevant to a user session is stored inside the session cookie prior to it being encrypted and sent to the browser. The PHP hash inside the cookie contains a number of key/value entries, including the following:</p>

            <ul>
              <li><code>username</code>: this is a string value that represents the name of the user in the current session.</li>
              <li><code>is_admin</code>: this is a string value that can be set to <code>yes</code> or <code>no</code>, and indicates whether the current user is an administrator on the NAS.</li>
              <li><code>language</code>: this is a string value that represents the current user’s chosen language (eg. <code>en_US</code>).</li>
            </ul>

            <p>Once a session has been established and the <code>username</code> field is present in the cookie, the system does no further validation of user credentials. This means that if a user can manipulate this value directly, instead of attempting to log in the standard way, they can bypass the login mechanism completely.</p>

            <p>Direct modification (or addition) of the <code>is_admin</code> value allows a user to self-elevate to administrative privileges in the web application itself.</p>

            <p>The fact that a static session encryption key is in use across all instances of the NAS means that once a user has a valid session cookie on one instance, they can apply that same cookie directly to another instance and acquire the same level of access. In short, once a user is logged in as <code>admin</code> on one instance, they’re effectively <code>admin</code> on every instance.</p>

            <p>The <code>language</code> parameter is used to generate a file path that is referenced in the web application PHP code via a call to <code>include()</code>. Manipulation of this parameter allows for exploitation of a local file inclusion vulnerability.</p>

            <p>Finally, the web application is being served by an instance of Lighttpd that is running under the context of the <code>root</code> user. Hence, any successful exploitation results in activities being conducted as <code>root</code>.</p>

            <h2>Affected versions</h2>

            <p>Two versions of the NAS firmware were tested and shown to be vulnerable. Those versions were:</p>

            <ul>
              <li>2014.00319</li>
              <li>2013.60311</li>
            </ul>

            <p>At the time of writing, it is believed that all versions prior to 2014.00319 are highly likely to contain the same vulnerabilities.</p>

            <h2>CVE Identifiers</h2>

            <p>This advisory makes use of prior work referenced in the following CVEs:</p>

            <ul>
              <li><a href="http://seclists.org/fulldisclosure/2014/May/54">CVE-2014-8684</a>: timing attacks and object injection.</li>
              <li><a href="https://www.dionach.com/blog/codeigniter-session-decoding-vulnerability">CVE-2014-8686</a>: a fall-back to the <code>_xor_encode()</code> method of session encryption.</li>
            </ul>

            <p>The vulnerability discovered via the reuse of the session cookie encryption key was allocated the identifier <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8687">CVE-2014-8687</a> by MITRE.</p>

            <h2>Exploitation</h2>

            <p>It is simple to exploit the issues listed above to gain arbitrary code execution on the device as the <code>root</code> user. The key steps required to achieve this are:</p>

            <ul>
              <li>The attacker must write PHP code to the file system on the NAS. This can be done in several ways, including:

                <ol>
                  <li>HTTP access log file poisoning via the <code>User-Agent</code> header.</li>
                  <li>HTTP error log file poisoning via the <code>Host</code> header.</li>
                  <li>Modifying the device description in the web application interface. This writes user-controlled strings to a file located at <code>/etc/devicedesc</code>, however it does require administrative rights.</li>
                  <li>Uploading of files to a file share that the device has exposed.</li>
                </ol>
              </li>
              <li>The attacker must then manipulate the content of the <code>language</code> variable in the session cookie so that it contains the path to the attacker-controlled PHP on the file system. The NULL byte flaw in PHP must be used at the end of this value to force PHP to ignore any characters that are appended to the file path by the web application.</li>
              <li>The attacker then makes a request with the manipulated cookie, resulting in code execution as <code>root</code>.</li>
            </ul>

            <p>Beyond Binary has produced a Metasploit module and a standalone Python script that automate the process of exploitation. Each of these scripts take the following approach:</p>

            <ol>
              <li>Connects to the target NAS and extracts a <code>ci_session</code> cookie.</li>
              <li>Decrypts the cookie using the static encryption key of <code>0f0a000d02011f0248000d290d0b0b0e03010e07</code> and extracts the PHP hash.</li>
              <li>Modifies the serialised PHP hash so that the <code>username</code> is set to <code>admin</code> and the <code>is_admin</code> field is set to <code>yes</code>.</li>
              <li>Encrypts this updated PHP hash ready for further use as a <code>ci_session</code> cookie. This cookie now allows future requests to operate on the NAS as if they were an administrator.</li>
              <li>Performs a request to extract the host configuration, which includes the device’s description.</li>
              <li>Modifies the host configuration so that the device description contains a small stager payload.</li>
              <li>Performs a request to update the host configuration with the new data so that the stager payload is written to <code>/etc/devicedesc</code>.</li>
              <li>Modifies the PHP hash again so that the <code>language</code> parameter contains the value <code>../../../../etc/devicedesc\x00</code> (note the NULL byte at the end).</li>
              <li>Encrypts this new PHP hash ready for future use as a <code>ci_session</code> cookie.</li>
              <li>Performs a request to the NAS using the cookie created in the previous step. This invokes the stager that was written to disk. This request posts a larger payload which is written to disk under the web server root.</li>
              <li>Performs another request which then resets the host configuration back to what it was prior to exploitation.</li>
            </ol>

            <p>From here, the final stage of the exploit is on-disk and ready to be executed. In the case of the Metasploit module, the final stage is a self-deleting file that contains whichever payload was chosen by the user. In the case of the standalone Python script, the final stage is a simple web shell which is continually referenced for each executed command, and is removed when the Python script is closed.</p>

            <p>The exploits are available for download here:</p>

            <ul>
              <li><a href="/exploits/bbsec001/seagate_nas_php_exec_noauth.rb">Metasploit module</a> (or on <a href="https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/linux/http/seagate_nas_php_exec_noauth.rb">Github</a>).</li>
              <li><a href="/exploits/bbsec001/seagate_nas_php_exec_noauth.py">Python script</a> (or on <a href="http://www.exploit-db.com/exploits/36202/">Exploit DB</a>).</li>
            </ul>

            <p>The following image shows a sample run of the Metasploit module:</p>

            <p class="img-full-screen-sm">
            <img src="/images/bbsec001/msf-sample-run.png" alt="Metasploit module sample run" />
            </p>

            <h2>Remediation</h2>

            <p>At the time of writing there is no firmware version available for download that contains fixes for the issues listed in this advisory. It is recommended that consumers of these Seagate Business NAS products (and other products using vulnerable firmware) ensure that devices are not accessible via the public Internet. For internal use, it is recommended that the devices be located behind a firewall configured to allow only a trusted set of IP addresses to connect to the web interface.</p>

            <p><strong>Edit: 11th June 2015</strong>
            </p>

            <p>During April 2015 Seagate released <a href="http://www.seagate.com/au/en/support/downloads/item/business-nas-4bay-firmware-master-dl/">firmware</a> that attempts to resolve these issues. Please see the timeline below.</p>

            <h2>Exposure</h2>

            <p>At the time of writing, <a href="https://www.shodan.io/">Shodan</a> reports that there are over 2,500 publicly exposed devices on the Internet that are likely to be vulnerable.</p>

            <h2>Potential Ramifications</h2>

            <p>It appears that the NAS products do not integrate with the likes of Active Directory or LDAP. As a result, they need to store passwords for any users that require access. Passwords are hashed using DES and stored in the <code>/etc/shadow</code> file.</p>

            <p>Instances of the NAS housed inside an organisation are likely to contain passwords that are reused by domain users. The DES hashes are very easy to crack, and hence an attacker could easily acquire domain credentials once the NAS has been compromised.</p>

            <h2>Notes</h2>

            <p>Initial attempts to disclose the above issues to the vendor proved time consuming and unproductive. Staff on the front-line support team repeatedly failed to direct the query to the relevant point of contact. In light of this, a direct security contact was identified using open intelligence, and front-line support was bypassed. This employee handled the query professionally and&nbsp;demonstrated a high level of concern in the early stages.&nbsp;</p>

            <h2>Timeline</h2>

            <ul>
              <li><strong>07th October 2014</strong>
                <ul>
                  <li>Initial bug discovery.</li>
                </ul>
              </li>
              <li><strong>08th October 2014</strong>
                <ul>
                  <li>Simple Proof of Concept exploit created.</li>
                </ul>
              </li>
              <li><strong>16th October 2014</strong>
                <ul>
                  <li>Enhanced exploit created.</li>
                </ul>
              </li>
              <li><strong>18th October 2014</strong>
                <ul>
                  <li>Contacted vendor via website, requested PGP for secure communications.</li>
                  <li>Contacted MITRE to discuss potential CVE identifier allocation.</li>
                </ul>
              </li>
              <li><strong>20th October 2014</strong>
                <ul>
                  <li>Contacted vendor via Twitter, requested PGP for secure communications.</li>
                  <li>Vendor responded via email, requested disclosure via non-encrypted channels.</li>
                </ul>
              </li>
              <li><strong>22nd October 2014</strong>
                <ul>
                  <li>Contacted vendor via email, disclosed all details of the issues found.</li>
                  <li>Beyond Binary established 100 day public disclosure period ending on 30th January 2015.</li>
                </ul>
              </li>
              <li><strong>23rd October 2014</strong>
                <ul>
                  <li>Vendor responded, confirmed receipt, requested 24 hours to confirm issues.</li>
                </ul>
              </li>
              <li><strong>23rd October 2014</strong>
                <ul>
                  <li>Vendor responded, requested firmware version in use. Suggested using latest firmware.</li>
                  <li>Contacted vendor via email, informed them that all firmware versions are vulnerable.</li>
                </ul>
              </li>
              <li><strong>27th October 2014</strong>
                <ul>
                  <li>Vendor responded via email, indicated work will be done without further communication.</li>
                  <li>Contacted vendor via email, requested updates on progress.</li>
                </ul>
              </li>
              <li><strong>02nd November 2014</strong>
                <ul>
                  <li>Contacted vendor via email, requested confirmation of receipt of previous email.</li>
                  <li>Vendor responded, indicated communications will remain open.</li>
                </ul>
              </li>
              <li><strong>09th November 2014</strong>
                <ul>
                  <li>MITRE responded with thorough email about prior work, and CVE allocation.</li>
                </ul>
              </li>
              <li><strong>17th November 2014</strong>
                <ul>
                  <li>Contacted vendor via email, requested status update.</li>
                </ul>
              </li>
              <li><strong>02nd December 2014</strong>
                <ul>
                  <li>Contacted vendor again via email, requested status update.</li>
                </ul>
              </li>
              <li><strong>16th December 2014</strong>
                <ul>
                  <li>Contacted vendor again via Twitter, requested status update.</li>
                  <li>Vendor responded again, email content was the same as what was received 27th October 2014.</li>
                  <li>Contacted vendor via email, requested a more thorough update.</li>
                </ul>
              </li>
              <li><strong>17th December 2014</strong>
                <ul>
                  <li>Vendor responded, requested confirmation of firmware version and asked if SSH is enabled.</li>
                </ul>
              </li>
              <li><strong>19th December 2014</strong>
                <ul>
                  <li>Contacted vendor, informed them that use of SSH is irrelevant, as is the firmware version.</li>
                </ul>
              </li>
              <li><strong>01st January 2015</strong>
                <ul>
                  <li>Contacted a number of vendor employees via Linked In.</li>
                </ul>
              </li>
              <li><strong>09th January 2015</strong>
                <ul>
                  <li>Established contact with vendor employee responsible for security after interaction with a security professional on Twitter.</li>
                  <li>Established secure communications with employee using PGP.</li>
                </ul>
              </li>
              <li><strong>10th January 2015</strong>
                <ul>
                  <li>Second vendor employee responded via Linked In, confirmed receipt of message and indicated knowledge of contact with previous employee. Previous employee will continue handling disclosure.</li>
                </ul>
              </li>
              <li><strong>10th-16th January 2015</strong>
                <ul>
                  <li>Various communications back-and-forth with employee.</li>
                </ul>
              </li>
              <li><strong>16th January 2015</strong>
                <ul>
                  <li>Disclosure documentation rewritten and sent with exploit to employee PGP-encrypted.</li>
                </ul>
              </li>
              <li><strong>17th January 2015</strong>
                <ul>
                  <li>Employee confirmed receipt.</li>
                  <li>Beyond Binary revised public disclosure date to 1st March 2015.</li>
                </ul>
              </li>
              <li><strong>21st January 2015</strong>
                <ul>
                  <li>Contacted employee, requested update.</li>
                </ul>
              </li>
              <li><strong>23rd January 2015</strong>
                <ul>
                  <li>Employee responded, indicated successful exploitation using Proof of Concept code.</li>
                </ul>
              </li>
              <li><strong>30th January 2015</strong>
                <ul>
                  <li>Employee proactively established contact and provided an update.</li>
                </ul>
              </li>
              <li><strong>05th February 2015</strong>
                <ul>
                  <li>Employee again proactively established contact and provided an update.</li>
                </ul>
              </li>
              <li><strong>17th February 2015</strong>
                <ul>
                  <li>Contacted employee to request status update for fixes and timeline for release.</li>
                </ul>
              </li>
              <li><strong>26th February 2015</strong>
                <ul>
                  <li>Employee responded indicating there is no update to be shared.</li>
                </ul>
              </li>
              <li><strong>01st March 2015</strong>
                <ul>
                  <li>Public disclosure.</li>
                </ul>
              </li>
              <li><strong>April 2015 (day unknown)</strong>
                <ul>
                  <li>Seagate released <a href="http://www.seagate.com/au/en/support/downloads/item/business-nas-4bay-firmware-master-dl/">firmware version 2015.00322</a> to address security issues (<a href="http://www.seagate.com/au/en/support/external-hard-drives/network-storage/business-storage-4-bay-nas/4-bay-release-notes-00319/">release notes</a>).</li>
                </ul>
              </li>
            </ul>
          </article>

          <aside class="col-md-4 col-md-offset-1">
            <h2 class="blue-line-through-md"><span>Recent&nbsp;</span></h2>
            <article>
              <header>
                <span class="date">15 March 2018</span>
                <h4 class="text-header upper-case"><a href="/articles/domain-fronting-with-metasploit-and-meterpreter/">TTP: Domain Fronting with Metasploit and Meterpreter</a></h4>
              </header>
              <div class="small-text text-black">
                <p>Though it isn't widely known, support for Domain Fronting was added to Metasploit and Meterpreter by OJ Reeves in late 2017. Part of the reason that it's not common knowledge is the lack of documentation or discussion around how to use it. As a result, we decided to create this post so that users of Metasploit have a decent guide on how to configure and use Domain Fronting over HTTPS with a legitimate certificate.</p>
              </div>
              <footer>
                <a class="tag" href="/tags/metasploit/">Metasploit</a>
                <a class="tag" href="/tags/ttp/">TTP</a>
              </footer>
            </article>

            <article>
              <header>
                <span class="date">01 August 2017</span>
                <h4 class="text-header upper-case"><a href="/articles/bypassing-messagelabs/">TTP: Bypassing Symantec Email Security.cloud (MessageLabs)</a></h4>
              </header>
              <div class="small-text text-black">
                <p>During a recent Attack Simulation against a high-profile client, Beyond Binary faced off against Symantec Email Security.cloud (formerly MessageLabs) whilst conducting a variety of phishing campaigns. This was not the first time we had come up against cloud-based email security services, however our usual approaches to bypassing them didn't yield any fruit.</p>
              </div>
              <footer>
                <a class="tag" href="/tags/messagelabs/">MessageLabs</a>
                <a class="tag" href="/tags/ttp/">TTP</a>
              </footer>
            </article>

            <article>
              <header>
                <span class="date">10 March 2015</span>
                <h4 class="text-header upper-case"><a href="/articles/seagate-nas-rce-response-analysis/">Opinion: Seagate's Analysis is Incorrect</a></h4>
              </header>
              <div class="small-text text-black">
                <p>On March 1st 2015 Beyond Binary went public with an advisory that disclosed 0day flaws in Seagate Business Storage 2-Bay NAS devices. Days later, Seagate responded to the advisory through a number of channels:</p>
                <ul>
                  <li>A direct email to Beyond Binary</li>
                </ul>
              </div>
              <footer>
                <a class="tag" href="/tags/opinion/">Opinion</a>
                <a class="tag" href="/tags/seagate/">Seagate</a>
              </footer>
            </article>

            <article>
              <header>
                <span class="date">1 March 2015</span>
                <h4 class="text-header upper-case"><a href="/articles/seagate-nas-rce/">Advisory: Seagate NAS Remote Code Execution Vulnerability</a></h4>
              </header>
              <div class="small-text text-black">
                <p>Seagate is a well-known vendor of hardware solutions, with products available worldwide. Its line of NAS products targeted at businesses is called Business Storage 2-Bay NAS. These can be found inside home and business networks, and in many cases they are publicly exposed.</p>
              </div>
              <footer>
                <a class="tag" href="/tags/advisory/">Advisory</a>
                <a class="tag" href="/tags/cve/">CVE</a>
                <a class="tag" href="/tags/exploit/">Exploit</a>
                <a class="tag" href="/tags/seagate/">Seagate</a>
              </footer>
            </article>

            <article>
              <header>
                <span class="date">4 February 2015</span>
                <h4 class="text-header upper-case"><a href="/articles/teamcity-account-creation/">Advisory: TeamCity Account Creation</a></h4>
              </header>
              <div class="small-text text-black">
                <p>TeamCity is a multi-platform continuous integration and build server product created by JetBrains. It is used by many development organisations to automate the build and deployment of software solutions as part of the development process. TeamCity is a very popular product and hence the number of installations, both public and private, is quite high.</p>
              </div>
              <footer>
                <a class="tag" href="/tags/advisory/">Advisory</a>
                <a class="tag" href="/tags/cve/">CVE</a>
                <a class="tag" href="/tags/exploit/">Exploit</a>
                <a class="tag" href="/tags/teamcity/">TeamCity</a>
              </footer>
            </article>

            <p>
            <a href="/articles/" class="button full-width-xs">View older articles</a>
            </p>
          </aside>
        </div>
      </div>
    </section>

    <footer>
      <div class="container">
        <div class="row">
          <div class="table-row">
            <div class="cell-sm col-sm-2 text-center">
              <p>
              <a href="/"><img src="/images/beyond-binary-logo.png" srcset="/images/beyond-binary-logo@2x.png 2x" alt="" /></a>
              </p>
            </div>

            <div class="cell-sm col-sm-10">
              <div class="row">
                <div class="col-sm-11 col-sm-offset-1">
                  <p><a href="https://twitter.com/BeyondBase2/status/892362430881214464">01 August 2017:&nbsp;</a>Some cloud-based email protection mechanisms are useful. But don’t rely on them, they can and will be bypassed without much effort!</p>
                  <hr />
                  <ul class="footer-navigation">
                    <li><a href="/">home</a></li>
                    <li><a href="/about/">about</a></li>
                    <li><a href="/services/">services</a></li>
                    <li><a href="/articles/">articles</a></li>
                    <li><a href="/contact/">contact</a></li>
                    <li><a href="/media/">media</a></li>
                  </ul>
                  <p class="small-text">
                  &copy; Beyond Binary Pty Ltd - ABN 64 146 311 962
                  </p>
                </div>
              </div>
            </div>   
          </div>
        </div>
      </div>
    </footer>

    <script src="/js/lib/jquery-1.11.3.min.js"></script>
    <script src="/js/lib/jquery-ui.min.js"></script>
    <script src="/js/lib/snap.svg-min.js"></script>
    <script src="/js/equal-height.js"></script>
    <script src="/js/menu-burger.js?3"></script>
    <script src="/js/hero/hero.js?9"></script>
    <script src="/js/hero/texts.js?9"></script>
    <script src="/js/hero/bar.js?9"></script>
    <script src="/js/hero/morph.js?9"></script>
    <script src="/js/notification.js"></script>
    <script src="/js/contact-form.js"></script>

  </body>
