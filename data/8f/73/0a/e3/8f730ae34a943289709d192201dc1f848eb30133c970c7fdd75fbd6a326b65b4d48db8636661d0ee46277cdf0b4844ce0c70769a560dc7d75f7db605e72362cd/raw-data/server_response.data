<!DOCTYPE html>


<html lang="en-us" data-theme="">
<head>
	<meta name="generator" content="Hugo 0.77.0" />
    
        
<meta charset="utf-8">
<meta name="HandheldFriendly" content="True">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="referrer" content="no-referrer-when-downgrade">

<title>Sorcery Blog</title>
<meta name="description" content="">

<link rel="alternate" type="application/rss+xml" href="/index.xml" title="Sorcery Blog" />
<link rel="icon" type="image/x-icon" href="favicon.ico">
<link rel="apple-touch-icon-precomposed" href="favicon.png">





<link rel="stylesheet" href="/css/style.bb96fd315dd35ff3162f4a19fe9ef9d1259274e37555145edc78e9fe914db7aa.css" integrity="sha256-u5b9MV3TX/MWL0oZ/p750SWSdON1VRRe3Hjp/pFNt6o=">

<link rel="stylesheet" href="css/my.css?rnd=1633364048">

<script src="js/main.js?rnd=1633364048" type="text/javascript" charset="utf-8"></script>

<meta property="og:title" content="Sorcery Blog" />
<meta property="og:description" content="" />
<meta property="og:type" content="website" />
<meta property="og:url" content="/" />
<meta property="og:image" content="images/og-featured.png"/>
<meta property="og:updated_time" content="2021-10-04T00:00:00+00:00" />

<meta name="twitter:card" content="summary_large_image"/>
<meta name="twitter:image" content="images/og-featured.png"/>

<meta name="twitter:title" content="Sorcery Blog"/>
<meta name="twitter:description" content=""/>









    
</head>
<body>
    <a class="skip-main" href="#main">Skip to main content</a>
    <div class="container">
        <header class="common-header"> 
            
                <h1 class="site-title">
    <a href="/">Sorcery Blog</a>
</h1>

    <nav>
        
        
        <a class="" href="https://twitter.com/sorceryie" title="Twitter">Twitter</a>
        
        <a class="" href="/posts/" title="Archive">Archive</a>
        
        <a class="" href="/tags/" title="">Tags</a>
        
        <a class="" href="https://sorcery.ie" title="Main Site">Main Site</a>
        
    </nav>


            
        </header>
        <main id="main" tabindex="-1"> 
            
    <div class="homepage-content">
        
    </div>

    
    
        <article class="post-list">
    <header class="post-header">
        <h1 class="post-title"><a href="/posts/redux_wordpress/">Proof of Concept for CVE-2021-38314 (Redux Framework)</a></h1>
    </header>

    <div class="content post-summary">
        In order to understand this bug I first read through the Wordfence blog post and then read through through the Redux Framework source code to fill in the gaps. I also installed Wordpress with this plugin so that I didn&rsquo;t have to test things blindly.
The relevant code is in inc/class.redux_instances.php. The first hook I looked at is this one:
$hash = md5( trailingslashit( network_site_url() ) . &#39;-redux&#39; ); add_action( &#39;wp_ajax_nopriv_&#39; .
    </div>
    
    
    

    


<div class="post-info">
    
        <div class="post-date">2021-10-04</div>
    
    <div class="post-taxonomies">
        
            
                <ul class="post-tags">
                    
                        <li><a href="tags/redux">#redux</a></li>
                    
                        <li><a href="tags/redux-framework">#redux framework</a></li>
                    
                        <li><a href="tags/cve-2021-38314">#CVE-2021-38314</a></li>
                    
                        <li><a href="tags/poc">#poc</a></li>
                    
                        <li><a href="tags/wordpress">#wordpress</a></li>
                    
                </ul>
        
    </div>
</div>

</article>
    
        <article class="post-list">
    <header class="post-header">
        <h1 class="post-title"><a href="/posts/smartblog_sqli/">SQLi in SmartBlog CVE-2021-37538</a></h1>
    </header>

    <div class="content post-summary">
        This blog post details an SQLi I found in the SmartBlog Prestashop module by SmartDataSoft.
First we need to talk about how the Prestashop pSQL function works and what it does.
pSQL() is intended for string escaping, so for example if you have a query like:
$sql = &#34;SELECT * FROM myTable WHERE name=&#39;$name&#39;&#34;  If $name has quotes in it then it can break out of the quotes. If $name is james' and sleep(10)-- -
    </div>
    
    
    

    


<div class="post-info">
    
        <div class="post-date">2021-08-21</div>
    
    <div class="post-taxonomies">
        
            
                <ul class="post-tags">
                    
                        <li><a href="tags/smartblog">#smartblog</a></li>
                    
                        <li><a href="tags/prestashop">#prestashop</a></li>
                    
                        <li><a href="tags/cve-2021-37538">#CVE-2021-37538</a></li>
                    
                </ul>
        
    </div>
</div>

</article>
    
        <article class="post-list">
    <header class="post-header">
        <h1 class="post-title"><a href="/posts/ph_simpleblog_sqli/">SQLi in ph_simpleblog CVE-2021-36748</a></h1>
    </header>

    <div class="content post-summary">
        This blog post details an SQLi I found in Blog for Prestashop (ph_simpleblog) by Prestahome, it is also my first CVE ðŸ˜Š
To begin with I had to identify that the module was installed, it is a blog plugin so this can generally be spotted by looking at the page source of the blog but you can also test if Prestashop modules are installed more directly by checking https://example.com/modules/ph_simpleblog/config.xml.
This Prestashop module uses the controller functionality so that&rsquo;s where I started to look as it&rsquo;s usually where the user input will go first.
    </div>
    
    
    

    


<div class="post-info">
    
        <div class="post-date">2021-08-18</div>
    
    <div class="post-taxonomies">
        
            
                <ul class="post-tags">
                    
                        <li><a href="tags/ph_simpleblog">#ph_simpleblog</a></li>
                    
                        <li><a href="tags/simpleblog">#simpleblog</a></li>
                    
                        <li><a href="tags/prestahome">#prestahome</a></li>
                    
                        <li><a href="tags/cve-2021-36748">#CVE-2021-36748</a></li>
                    
                </ul>
        
    </div>
</div>

</article>
    
        <article class="post-list">
    <header class="post-header">
        <h1 class="post-title"><a href="/posts/adminer/">Adminer - A Guide For All its Vulnerabilities</a></h1>
    </header>

    <div class="content post-summary">
        Adminer is a popular PHP database management tool.
This blog post will detail its vulnerabilities, how to exploit them and how to protect yourself from these risks.
RCE using SQLite Versions 4.2.4 and before that support SQLite are vulnerable to this.
The server must have the SQLite PHP driver installed for this to work.
On Adminer you login with an empty username and database name.
This will log you in to a temporary in-memory database.
    </div>
    
    
    

    


<div class="post-info">
    
        <div class="post-date">2021-03-11</div>
    
    <div class="post-taxonomies">
        
            
                <ul class="post-tags">
                    
                        <li><a href="tags/adminer">#adminer</a></li>
                    
                </ul>
        
    </div>
</div>

</article>
    
        <article class="post-list">
    <header class="post-header">
        <h1 class="post-title"><a href="/posts/binance-phishing-bounty/">The Time I tried to get a Bounty from Binance</a></h1>
    </header>

    <div class="content post-summary">
        Back in 2018 Binance had been targeted by a large scale attack by a group of phishers. They made a bounty offer of $250k in BNB to anyone who could provide information leading to their arrest.
In the Medium post they provided a list of known phishing domains for people to investigate.
I went through the list to see which of the sites were still active:
   Domain IP     kykoin.
    </div>
    
    
    

    


<div class="post-info">
    
        <div class="post-date">2020-12-10</div>
    
    <div class="post-taxonomies">
        
            
                <ul class="post-tags">
                    
                        <li><a href="tags/phishing">#phishing</a></li>
                    
                        <li><a href="tags/binance">#binance</a></li>
                    
                        <li><a href="tags/beef-hook">#beef hook</a></li>
                    
                        <li><a href="tags/bounty">#bounty</a></li>
                    
                </ul>
        
    </div>
</div>

</article>
    
        <article class="post-list">
    <header class="post-header">
        <h1 class="post-title"><a href="/posts/git-directory-exposure/">Exposed .git Folder and How To Remediate it</a></h1>
    </header>

    <div class="content post-summary">
        Discovery Usually we find this when directory bruteforce returns positive results from the following urls:
http://site.com/.git/ http://site.com/.git/config http://site.com/.git/HEAD http://site.com/.git/index Many times the .git/ may be 403 (due to directory listing being disabled) but the files within it are downloadable. A lot of the git files are at known paths and the rest can be worked out from the known files so it is still exploitable as long as the files are downloadable.
    </div>
    
    
    

    


<div class="post-info">
    
        <div class="post-date">2020-11-23</div>
    
    <div class="post-taxonomies">
        
            
                <ul class="post-tags">
                    
                        <li><a href="tags/vulnerability">#vulnerability</a></li>
                    
                        <li><a href="tags/fix">#fix</a></li>
                    
                        <li><a href="tags/patch">#patch</a></li>
                    
                        <li><a href="tags/.git">#.git</a></li>
                    
                        <li><a href="tags/source-code-exposure">#source code exposure</a></li>
                    
                </ul>
        
    </div>
</div>

</article>
    
    



        </main>
        
            <footer class="common-footer">
    
    

    <div class="common-footer-bottom">
        
        <div class="copyright">
            <p>Â© Sorcery Ltd, 2021<br>
            Powered by <a target="_blank" rel="noopener noreferrer" href="https://gohugo.io/">Hugo</a>, theme <a target="_blank" rel="noopener noreferrer" href="https://github.com/mitrichius/hugo-theme-anubis">Anubis</a>.
            </p>  
        </div> 

        

    



    <button class="theme-switcher">
        Dark theme
    </button>

    <script>
    const STORAGE_KEY = 'user-color-scheme'
    const defaultTheme = "light"

    let currentTheme
    let switchButton
    let autoDefinedScheme = window.matchMedia('(prefers-color-scheme: dark)')

    const autoChangeScheme = e => {
        currentTheme = e.matches ? 'dark' : 'light'
        document.documentElement.setAttribute('data-theme', currentTheme)
        changeButtonText()
    }

    document.addEventListener('DOMContentLoaded', function() {
        switchButton = document.querySelector('.theme-switcher')
        currentTheme = detectCurrentScheme()
        if (currentTheme == 'dark') {
            document.documentElement.setAttribute('data-theme', 'dark')
        }
        if (currentTheme == 'auto') {
            autoChangeScheme(autoDefinedScheme);
            autoDefinedScheme.addListener(autoChangeScheme);
        }
        changeButtonText()
        switchButton.addEventListener('click', switchTheme, false)
    })

    function detectCurrentScheme() {
        if (localStorage.getItem(STORAGE_KEY)) {
            return localStorage.getItem(STORAGE_KEY)
        } 
        if (defaultTheme) {
            return defaultTheme
        } 
        if (!window.matchMedia) {
            return 'light'
        } 
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark'
        }
        return 'light'
    }

    function changeButtonText()
    {   
        switchButton.textContent = currentTheme == 'dark' ?  "Light theme" : "Dark theme"
    }

    function switchTheme(e) {
        if (currentTheme == 'dark') {
            localStorage.setItem(STORAGE_KEY, 'light')
            document.documentElement.setAttribute('data-theme', 'light')
            currentTheme = 'light'
        } else {
            localStorage.setItem(STORAGE_KEY, 'dark')
            document.documentElement.setAttribute('data-theme', 'dark')
            currentTheme = 'dark'
        }
        changeButtonText()
    }
    </script>
   
    </div>
</footer>

        
    </div>
</body>
</html>
