<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head> <title>curl - Windows DLL hijacking - CVE-2016-4802</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta content="text/html; charset=UTF-8" http-equiv="Content-Type">
<link rel="stylesheet" type="text/css" href="/curl.css">
<link rel="shortcut icon" href="/favicon.ico">
<link rel="icon" href="/logo/curl-symbol.svg" type="image/svg+xml">
<link rel="STYLESHEET" type="text/css" href="https://curl.se/manpage.css">
</head>
<body>
<div class="main">
<div class="menu">
<a href="/docs/" class="menuitem" title="Documentation Overview">Docs Overview</a>
<div class="dropdown">
  <a class="dropbtn" href="/docs/projdocs.html">Project</a>
  <div class="dropdown-content">
    <a href="/docs/bugbounty.html">Bug Bounty</a>
    <a href="/docs/bugs.html">Bug Report</a>
    <a href="/docs/code-of-conduct.html">Code of conduct</a>
    <a href="/docs/libs.html">Dependencies</a>
    <a href="/donation.html">Donate</a>
    <a href="/docs/faq.html">FAQ</a>
    <a href="/docs/features.html">Features</a>
    <a href="/docs/governance.html">Governance</a>
    <a href="/docs/history.html">History</a>
    <a href="/docs/install.html">Install</a>
    <a href="/docs/knownbugs.html">Known Bugs</a>
    <a href="/docs/todo.html">TODO</a>
    <a href="/about.html">Web Site Info</a>
  </div>
</div>
<div class="dropdown">
  <a class="dropbtn" href="/docs/protdocs.html">Protocols</a>
  <div class="dropdown-content">
    <a href="/docs/hsts.html">HSTS</a>
    <a href="/docs/http-cookies.html">HTTP cookies</a>
    <a href="/docs/http2.html">HTTP/2</a>
    <a href="/docs/http3.html">HTTP/3</a>
    <a href="/docs/mqtt.html">MQTT</a>
    <a href="/docs/sslcerts.html">SSL certs</a>
    <a href="/docs/caextract.html">CA Extract</a>
    <a href="/docs/ssl-compared.html">SSL libs compared</a>
    <a href="/docs/url-syntax.html">URL syntax</a>
  </div>
</div>
<div class="dropdown">
  <a class="dropbtn" href="/docs/reldocs.html">Releases</a>
  <div class="dropdown-content">
    <a href="/changes.html">Changelog</a>
    <a href="/docs/releases.html">Release Table</a>
    <a href="/docs/security.html">Security Problems</a>
    <a href="/docs/versions.html">Version Nums</a>
    <a href="/docs/vulnerabilities.html">Vulnerabilities</a>
  </div>
</div>
<div class="dropdown">
  <a class="dropbtn" href="/docs/tooldocs.html">Tool</a>
  <div class="dropdown-content">
    <a href="/docs/comparison-table.html">Comparison Table</a>
    <a href="/docs/manpage.html">curl man page</a>
    <a href="/docs/httpscripting.html">HTTP Scripting</a>
    <a href="/docs/mk-ca-bundle.html">mk-ca-bundle</a>
    <a href="/docs/manual.html">Tutorial</a>
  </div>
</div>
<div class="dropdown">
  <a class="dropbtn" href="/docs/whodocs.html">Who and Why</a>
  <div class="dropdown-content">
    <a href="/docs/companies.html">Companies</a>
    <a href="/docs/copyright.html">Copyright</a>
    <a href="/sponsors.html">Sponsors</a>
    <a href="/docs/thanks.html">Thanks</a>
    <a href="/docs/thename.html">The name</a>
  </div>
</div>
</div>
<div class="contents">
<div class="where"><a href="/">curl</a> / <a href="/docs/">Docs</a> / <a href="/docs/security.html">Security Problems</a> / <b>Windows DLL hijacking</b></div>
<div class="relatedbox">
<b>Related:</b>
<br><a href="/docs/bugbounty.html">Bug Bounty</a>
<br><a href="/changes.html">Changelog</a>
<br><a href="/donation.html">Donate</a>
<br><a href="faq.html">FAQ</a>
<br><a href="security.html">Security Problems</a>
<br><a href="/dev/secprocess.html">Security Process</a>
<br><a href="vulnerabilities.html">Vulnerabilities Table</a>
</div>
<h1 id="windows-dll-hijacking">Windows DLL hijacking</h1>
<p>Project curl Security Advisory, May 30th 2016 - <a href="https://curl.se/docs/CVE-2016-4802.html">Permalink</a></p>
<h2 id="vulnerability">VULNERABILITY</h2>
<p>libcurl would load Windows system DLLs in a manner that may make it vulnerable to a DLL hijacking (aka binary planting) attack in certain configurations.</p>
<p>libcurl has a unified code base that builds and runs on a multitude of different versions of Windows. To make that possible, when libcurl is built with SSPI or telnet is used, it dynamically loads some of the necessary system DLLs at run-time by calling LoadLibrary(). No path is specified for these DLLs.</p>
<p>To find a DLL when no path is specified LoadLibrary() follows <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682586.aspx#search_order_for_desktop_applications">DLL search order</a> to load it. If it is a &quot;known DLL&quot; no searching is done, the system copy is used. If it is not a &quot;known DLL&quot;: The application directory is searched first. The current directory is searched next, if DLL safe search mode isn't enabled. The system directory is searched next.</p>
<p>The 3 system DLLs libcurl loads dynamically are security.dll, secur32.dll and ws2_32.dll (a &quot;known DLL&quot; when installed). These DLLs may not be present on some versions of Windows, which is why they are loaded dynamically. Depending on a number of factors outlined in the DLL search order document it may be possible for an attacker to plant a DLL of the same name in the user's current directory, application directory or other directory in the DLL search order, thereby possibly causing it to be loaded first.</p>
<p><strong>Recent versions of Windows include all 3 of those dynamically loaded system DLLs and also enable safe DLL search mode by default. Therefore in such a case ws2_32.dll could not be planted, and security.dll or secur32.dll could only be planted in the application directory.</strong></p>
<p>To address this issue we have changed libcurl so that any system DLL it dynamically loads in Windows is done in the most secure way available.</p>
<p>Note if an attacker has the ability to write new files to your application directory they can likely still plant DLLs to be loaded in any case, load-time or run-time. This is by design in Windows DLL loading (refer the the DLL search order doc). For example it may be possible to override DLL search paths by planting an app.exe.local file or possibly a fake manifest. There is nothing we can do to prevent against this. We advise you to guard write permissions on your application directory.</p>
<p><strong>Also note it is may still be possible for planting attacks to be done against load-time DLLs used by libcurl and the curl tool. This is because Windows loads those DLLs and their dependencies without specifying a path. There is nothing we can do to fix this, it is endemic in the design of Windows. We advise you to guard write permissions on your application directory.</strong></p>
<p>We are not aware of any exploit of this flaw.</p>
<h2 id="info">INFO</h2>
<p>This flaw also affects the curl command line tool.</p>
<p>The Common Vulnerabilities and Exposures (CVE) project has assigned the name CVE-2016-4802 to this issue.</p>
<p>CWE-94: Improper Control of Generation of Code ('Code Injection')</p>
<h2 id="affected-versions">AFFECTED VERSIONS</h2>
<p>This flaw is relevant for all versions of curl and libcurl on Windows that support SSPI or Telnet.</p>
<ul>
<li>Affected versions: libcurl <a href="vuln-7.11.1.html">7.11.1</a> to and including <a href="vuln-7.49.0.html">7.49.0</a></li>
<li>Not affected versions: libcurl &lt; <a href="vuln-7.11.1.html">7.11.1</a> and libcurl &gt;= <a href="vuln-7.49.1.html">7.49.1</a></li>
</ul>
<p>libcurl is used by many applications, but not always advertised as such!</p>
<h2 id="the-solution">THE SOLUTION</h2>
<p>In version <a href="vuln-7.49.1.html">7.49.1</a>, libcurl loads DLLs from the Windows system directory, either via LoadLibraryEx() and <code>LOAD_LIBRARY_SEARCH_SYSTEM32</code>, where supported, or by explicitly finding the system directory.</p>
<p>A <a href="https://curl.se/CVE-2016-4802.patch">patch for CVE-2016-4802</a> is available.</p>
<h2 id="recommendations">RECOMMENDATIONS</h2>
<p>We suggest you take one of the following actions immediately, in order of preference:</p>
<p>A - Upgrade curl and libcurl to version <a href="vuln-7.49.1.html">7.49.1</a></p>
<p>B - Apply the patch to your version and rebuild</p>
<p>C - Build your libcurl without SSPI and Telnet support enabled</p>
<p>Additionally in any case you should secure write permissions to your application directory and if you are using the curl tool exercise judicious use of <code>--remote-header-name</code> (also usable as <code>-J</code>). The <code>-J</code> option when combined with <code>-O</code> lets the server choose the file name. A rogue server could send you the name of a DLL or other file that could be used in a planting attack.</p>
<h2 id="time-line">TIME LINE</h2>
<p>It was first reported to the curl project on May 7th 2016. We contacted MITRE on May 13.</p>
<p>libcurl <a href="vuln-7.49.1.html">7.49.1</a> was released on May 30 2016, coordinated with the publication of this advisory.</p>
<h2 id="credits">CREDITS</h2>
<p>Reported by Guohui from Huawei WeiRan Labs. Patch by Steve Holme. Stefan Kanthak and Jay Satiro brought valuable feedback.</p>
<p>Thanks a lot!</p>
</div>
</div>
<script defer src="https://www.fastly-insights.com/insights.js?k=8cb1247c-87c2-4af9-9229-768b1990f90b" type="text/javascript"></script>
</body> </html>
