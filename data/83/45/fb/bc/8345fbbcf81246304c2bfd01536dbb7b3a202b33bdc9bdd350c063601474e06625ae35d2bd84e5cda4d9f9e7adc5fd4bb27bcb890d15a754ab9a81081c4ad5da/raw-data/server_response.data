<!doctype html><html lang=en><head><meta charset=utf-8><meta http-equiv=x-ua-compatible content="IE=edge,chrome=1"><meta name=viewport content="width=device-width,initial-scale=1"><meta name=description content="npm, pnpm and yarn were vulnerable to binary planting and arbitrary file (over)write through the bin field in package.json."><title>binary planting and arbitrary file (over)write vulnerabilities in npm, pnpm and yarn | Blog of Daniel Ruf</title><meta property="og:title" content="binary planting and arbitrary file (over)write vulnerabilities in npm, pnpm and yarn - Blog of Daniel Ruf"><meta property="og:description" content="npm, pnpm and yarn were vulnerable to binary planting and arbitrary file (over)write through the bin field in package.json."><meta property="og:url" content="https://blog.daniel-ruf.de/critical-design-flaw-npm-pnpm-yarn/"><meta property="og:site_name" content="Blog of Daniel Ruf"><meta property="og:type" content="article"><meta property="article:tag" content="npm"><meta property="article:tag" content="pnpm"><meta property="article:tag" content="yarn"><meta property="article:tag" content="nodejs"><meta property="article:published_time" content="2019-12-12T06:00:00Z"><meta property="article:modified_time" content="2019-12-12T06:00:00Z"><meta name=twitter:card content="summary"><meta name=twitter:image:src content="https://blog.daniel-ruf.de/logo.png"><link href=https://blog.daniel-ruf.de/rss.xml rel=alternate type=application/rss+xml title="Blog of Daniel Ruf"><link rel=stylesheet href=https://blog.daniel-ruf.de/css/style.min.7daa2bb3de748899e33573cc48ba4f95fb011000f0200b8b4cf8fe0cbb35f1ff.css><link rel=manifest href=/site.webmanifest><link rel=canonical href=https://blog.daniel-ruf.de/critical-design-flaw-npm-pnpm-yarn/><meta name=msapplication-TileColor content="#ffffff"><meta name=theme-color content="#ffffff"></head><body><div class=container><header><h3 class=site-title><a href=/>Blog of Daniel Ruf</a></h3></header><main><article><header><small><a href=/tags/npm/>#npm</a>
| <a href=/tags/pnpm/>#pnpm</a>
| <a href=/tags/yarn/>#yarn</a>
| <a href=/tags/nodejs/>#nodejs</a></small><h1>binary planting and arbitrary file (over)write vulnerabilities in npm, pnpm and yarn</h1><small>12.12.2019</small></header><section><h2 id=abstract>Abstract</h2><p>The Node.js and npm ecosystem are the fastest growing ones and there are many types of attacks. Most of them are probably not yet widely known as the topic security is just becoming more relevant and it was never something that most of us thought about.</p><p>In the evening of 21.10.2019 I was thinking about possible ways how malicious actors and packages could cause harm on our systems. One feature that is very powerful and often overlooked is the possibility to define binaries through package.json, including their name and the used file. Can this be used to (over)write some files or drop binaries wherever we want to?</p><h2 id=the-problem>The problem</h2><p>My tests confirmed my initial assumption that all three are vulnerable to <strong>binary planting</strong> and <strong>arbitrary file (over)write</strong> attacks.</p><p>While npm and yarn are most vulnerable, pnpm seems to prevent many of the attack types as my tests concluded.</p><p>pnpm seems to not resolve the path outside of node_modules in most cases. Also as pnpm uses symlinks in general to manage the dependencies, it prevents that symlinks can be overwritten by other packages then with which they were created and are owned by them.</p><p>The problem is that we can define any (valid) paths for the binary name and the file which is then symlinked.</p><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-json data-lang=json>{
  <span style=color:#f92672>&#34;bin&#34;</span>: {
    <span style=color:#f92672>&#34;../some/path&#34;</span>: <span style=color:#e6db74>&#34;../some/other/path&#34;</span>
  }
}
</code></pre></div><p>This is basically everything that is needed to execute these attacks. What you can do with this depends on the package manager and the result can be pretty bad.</p><p>I have reported my findings to the team at Snyk which handled all the further steps. Many thanks to the experienced Snyk team, especially Liran, Sam and Simon for helping with this and doing a coordinated responsible disclosure.</p><p>Please make sure to take a look at the <a href=https://snyk.io/blog/understanding-filesystem-takeover-vulnerabilities-in-npm-javascript-package-manager/>detailed report</a> by Snyk which also includes details about the vulnerable and patched versions, available patches and remediation steps and much more.</p><h2 id=pocs>PoCs</h2><h3 id=symlink-sshid_rsa>symlink .ssh/id_rsa</h3><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-json data-lang=json>{
  <span style=color:#f92672>&#34;bin&#34;</span>: {
   <span style=color:#f92672>&#34;keyfile&#34;</span>: <span style=color:#e6db74>&#34;/Users/danielruf/.ssh/id_rsa&#34;</span>
  }
}
</code></pre></div><p>This allows that a malicious application can directly access the file without using the absolute path and bypass tools which check the path that is used. This might also work as some sort of privilege bypass depending on how the package manager is installed.</p><h3 id=overwrite-a-file--binary>(over)write a file / binary</h3><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-json data-lang=json>{
  <span style=color:#f92672>&#34;bin&#34;</span>: {
    <span style=color:#f92672>&#34;webpack&#34;</span>: <span style=color:#e6db74>&#34;./test.js&#34;</span>
  }
}
</code></pre></div><p>This overwrites the <code>webpack</code> binary with something else. This can be used to silently replace clean binaries or files with a manipulated or malicious version. If it is not yet created it will be created.</p><h3 id=plant-a-binary>plant a binary</h3><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-json data-lang=json>{
  <span style=color:#f92672>&#34;bin&#34;</span>: {
    <span style=color:#f92672>&#34;/Users/danielruf/Desktop/yyy&#34;</span>: <span style=color:#e6db74>&#34;./fake-file&#34;</span>
  }
}
</code></pre></div><p>This generates a new file on the desktop which contains the code from the relative path of the installed package.</p><p>A relative path and simple path traversal can be also used to achieve the same:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-json data-lang=json>{
  <span style=color:#f92672>&#34;bin&#34;</span>: {
    <span style=color:#f92672>&#34;../../../yyy&#34;</span>: <span style=color:#e6db74>&#34;./fake-file&#34;</span>
  }
}
</code></pre></div><h2 id=possible-solutions>Possible solutions</h2><p>Paths should not be resolved outside of the node_modules folder to prevent most of these ways, like pnpm already does.</p><p>Also it should not be allowed to overwrite symlinks which were created by other dependencies. In some situations it is prevented but in most cases the package managers allow this.</p><p>Users also get no information that a binary is installed by default so it is not very clear what happens behind the scene.</p><p>There should be also restrictions regarding the filesystem access which would prevent many other attacks too. But this is a general problem which has to be resolved in Node.js (which deno already tries to resolve at the root).</p><h2 id=remediation>Remediation</h2><p>Update to the latest available versions of npm (v6.13.4), pnpm (v4.5.0) and yarn (v1.12.1) which fix these issues.</p><h2 id=cves>CVEs</h2><p><span class=monospace><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10773">CVE-2019-10773</a></span> - Arbitrary Symlink Generation in yarn<br><span class=monospace><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16775">CVE-2019-16775</a></span> - Arbitrary File Write in npm<br><span class=monospace><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16776">CVE-2019-16776</a></span> - Arbitrary File Write in npm<br><span class=monospace><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16777">CVE-2019-16777</a></span> - Arbitrary File Overwrite in npm</p><h2 id=links>Links</h2><h3 id=media>media</h3><p><a href=https://blog.npmjs.org/post/189618601100/binary-planting-with-the-npm-cli>blog post (npmjs)</a><br><a href=https://nodejs.org/en/blog/vulnerability/december-2019-security-releases/>blog post (NodeJS)</a><br><a href=https://snyk.io/blog/understanding-filesystem-takeover-vulnerabilities-in-npm-javascript-package-manager/>blog post (Snyk)</a><br><a href=https://www.golem.de/news/javascript-node-pakete-koennen-binaerdateien-unterjubeln-1912-145557.html>article (golem.de)</a><br><a href=https://www.heise.de/security/meldung/Jetzt-updaten-Paketmanager-Yarn-und-npm-erlaubten-unbefugte-Schreibzugriffe-4616308.html>article (heise online)</a><br><a href=https://nakedsecurity.sophos.com/2019/12/16/npm-patches-two-serious-bugs>article (Naked Security)</a><br><a href=https://www.theregister.co.uk/2019/12/13/npm_path_traversal_bug/>article (The Register)</a><br><a href=https://www.zdnet.com/article/npm-team-warns-of-new-binary-planting-bug/>article (ZDNet)</a></p><h3 id=npmjs-advisories>npmjs advisories</h3><p><a href=https://www.npmjs.com/advisories/1427>Arbitrary File Write (bin-links)</a><br><a href=https://www.npmjs.com/advisories/1434>Arbitrary File Write (npm)</a><br><a href=https://www.npmjs.com/advisories/1435>Symlink reference outside of node_modules (bin-links)</a><br><a href=https://www.npmjs.com/advisories/1436>Symlink reference outside of node_modules (npm)</a><br><a href=https://www.npmjs.com/advisories/1437>Global node_modules Binary Overwrite (npm)</a><br><a href=https://www.npmjs.com/advisories/1438>Global node_modules Binary Overwrite (bin-links)</a></p><h3 id=snyk-vulnerability-database>Snyk vulnerability database</h3><p><span class=monospace><a href=https://snyk.io/vuln/SNYK-JS-NPM-537603>SNYK-JS-NPM-537603</a></span> - Arbitrary File Overwrite in npm<br><span class=monospace><a href=https://snyk.io/vuln/SNYK-JS-NPM-537604>SNYK-JS-NPM-537604</a></span> - Unauthorized File Access in npm<br><span class=monospace><a href=https://snyk.io/vuln/SNYK-JS-NPM-537606>SNYK-JS-NPM-537606</a></span> - Arbitrary File Write in npm<br><span class=monospace><a href=https://snyk.io/vuln/SNYK-JS-YARN-537806>SNYK-JS-YARN-537806</a></span> - Arbitrary File Write in yarn<br><span class=monospace><a href=https://snyk.io/vuln/SNYK-JS-PNPMPACKAGEBINS-539934>SNYK-JS-PNPMPACKAGEBINS-539934</a></span> - Arbitrary File Write in pnpm</p><h3 id=github-security-advisories>GitHub security advisories</h3><p><span class=monospace><a href=https://github.com/npm/cli/security/advisories/GHSA-m6cx-g6qm-p2cx>GHSA-m6cx-g6qm-p2cx</a></span> - Unauthorized File Access in npm<br><span class=monospace><a href=https://github.com/npm/cli/security/advisories/GHSA-x8qc-rrcw-4r46>GHSA-x8qc-rrcw-4r46</a></span> - Arbitrary File Write in npm<br><span class=monospace><a href=https://github.com/npm/cli/security/advisories/GHSA-4328-8hgf-7wjr>GHSA-4328-8hgf-7wjr</a></span> - Arbitrary File Overwrite in npm</p><h2 id=timeline>Timeline</h2><p><strong>2019-10-21</strong> first tests using private repositories on GitHub<br><strong>2019-11-25</strong> started documentation of results<br><strong>2019-11-25</strong> contacted Liran Tal of Snyk<br><strong>2019-12-01</strong> reported as vulnerability to Snyk<br><strong>2019-12-01</strong> informed german media<br><strong>2019-12-02</strong> provided further information to Snyk including PoC<br><strong>2019-12-06</strong> Snyk forwarded the details to the developers of npm and yarn<br><strong>2019-12-10</strong> npm v6.13.3 released<br><strong>2019-12-11</strong> yarn v1.21.1 released<br><strong>2019-12-11</strong> npm v6.13.4 released<br><strong>2019-12-12</strong> coordinated vulnerability disclosure<br><strong>2019-12-16</strong> pnpm v4.5.0 released</p><div class=related></div></section></article></main><nav><ul><li><a rel=prev href=https://blog.daniel-ruf.de/post-mortem-hacked-wordpress-cryptominer/>&larr; post mortem: hacked WordPress with a cryptominer (2018)</a></li><li><a rel=next href=https://blog.daniel-ruf.de/dont-blindly-trust-filter-validate-url/>don't blindly trust FILTER_VALIDATE_URL &rarr;</a></li></ul></nav><footer><a href=https://daniel-ruf.de/legal.html>legal notice</a></footer></div><script>if('serviceWorker'in navigator){window.addEventListener('load',()=>{navigator.serviceWorker.register('/sw.js');});}</script></body></html>