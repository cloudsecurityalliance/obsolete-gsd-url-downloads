<!DOCTYPE html>
<html lang="en">
  <head>
    <title>8197 &ndash; PER dissector crash</title>

      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">


<link href="data/assets/64b49332a92937374625c24ed9a89c85.css?1635022386" rel="stylesheet" type="text/css">

<link href="data/assets/f6911ed8e5a97f108734d9324cb6bd67.css?1635022386" rel="stylesheet" type="text/css">

    
<script type="text/javascript" src="data/assets/a7c2f3a028f17a9aa60f56dc9d6e732d.js?1635022386"></script>

    <script type="text/javascript">
    <!--
        YAHOO.namespace('bugzilla');
        YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
               if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
               var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
               return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
         };
        if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
            YAHOO.util.Event._simpleRemove(window, "unload", 
                                           YAHOO.util.Event._unload);
        }
        
        function unhide_language_selector() { 
            YAHOO.util.Dom.removeClass(
                'lang_links_container', 'bz_default_hidden'
            ); 
        } 
        YAHOO.util.Event.onDOMReady(unhide_language_selector);

        
        var BUGZILLA = {
            param: {
                cookiepath: '\/',
                maxusermatches: 1000
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    "You must enter a Description for this attachment.",
                component_required:
                    "You must select a Component for this bug.",
                description_required:
                    "You must enter a Description for this bug.",
                short_desc_required:
                    "You must enter a Summary for this bug.",
                version_required:
                    "You must select a Version for this bug."
            }
              , api_token: ''
        };

    if (history && history.replaceState) {
      if(!document.location.href.match(/show_bug\.cgi/)) {
        history.replaceState( null,
                             "8197 – PER dissector crash",
                             "show_bug.cgi?id=8197" );
        document.title = "8197 – PER dissector crash";
      }
      if (document.location.href.match(/show_bug\.cgi\?.*list_id=/)) {
        var href = document.location.href;
        href = href.replace(/[\?&]+list_id=(\d+|cookie)/, '');
        history.replaceState(null, "8197 – PER dissector crash", href);
      }
    }
    YAHOO.util.Event.onDOMReady(function() {
      initDirtyFieldTracking();

    });
    // -->
    </script>
<script type="text/javascript" src="data/assets/daf5e0fb6826e6a35280e622913f0c4a.js?1635022386"></script>

    

    
    <link rel="search" type="application/opensearchdescription+xml"
                       title="Bugzilla" href="./search_plugin.cgi">
    <link rel="shortcut icon" href="images/favicon.ico">
  </head>

  <body 
        class="bugs-wireshark-org-bugzilla
                 bz_bug
                 bz_status_RESOLVED
                 bz_product_Wireshark
                 bz_component_TShark
                 bz_bug_8197 yui-skin-sam">

  <div id="header"><div id="banner">
      <a href="/bugzilla/"><img id="badge" src="/image/wsbadge-bug@186x57.png"></a>
      <span id="banner-text">
        Wireshark Bug Database &ndash; Bug&nbsp;8197
      </span>
      <div id="subtitle">
        <p class="subheader">PER dissector crash</p>
      </div>

       <div id="motd_yellow">

<p>
This Bugzilla instance was migrated to <a href="https://gitlab.com/wireshark/wireshark">GitLab</a> on Sunday, August 23.
</p>


<p>
This bug has been migrated to <a href="https://gitlab.com/wireshark/wireshark/-/issues/8197">issue 8197</a> in the <a href="https://gitlab.com/wireshark/wireshark/-/issues">GitLab issue tracker</a>.
It can be viewed and updated there.
</p>


</p>

<p>
See the <a href="https://gitlab.com/wireshark/gitlab-migration/wikis/home">migration wiki</a> for more details.
</p>

       </div>


    </div>

<!-- WS: Title info is in the banner
    <div id="titles">
      <span id="title">Bugzilla &ndash; Bug&nbsp;8197</span>
  
        <span id="subtitle" class="subheader">PER dissector crash</span>

        <span id="information" class="header_addl_info">Last modified: 2013-05-17 09:26:18 UTC</span>
    </div>
  -->


    <div id="common_links"><ul class="links">
  <li><a href="https://www.wireshark.org/">Wireshark Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_top" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_top");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_top" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_top"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/5.0/using/understanding.html" target="_blank">Help</a>
      </li>
    

    <li id="mini_login_container_top">
  <span class="separator">| </span>
  <a id="login_link_top" href="show_bug.cgi?id=8197&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_top')">Log In</a>

  <form action="show_bug.cgi?id=8197" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_top">
    <input id="Bugzilla_login_top" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_top" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_top">
    <a href="#" onclick="return hide_mini_login_form('_top')">[x]</a>
  </form>
</li>


  <li id="forgot_container_top">
    <span class="separator">| </span>
    <a id="forgot_link_top" href="show_bug.cgi?id=8197&amp;GoAheadAndLogIn=1#forgot"
       onclick="return show_forgot_form('_top')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_top"
          class="mini_forgot bz_default_hidden">
      <label for="login_top">Login:</label>
      <input name="loginname" size="20" id="login_top" required
          type="email" placeholder="Your Email Address">
      <input id="forgot_button_top" value="Reset Password" type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_top" name="token"
             value="1635621859-M5riPenbvXywSimYDRwbf7wNFKmigG2gyldy3L4QKoM">
      <a href="#" onclick="return hide_forgot_form('_top')">[x]</a>
    </form>
  </li>
</ul>
    </div>
  </div>

  <div id="bugzilla-body">


<script type="text/javascript">
<!--

//-->
</script>

<form name="changeform" id="changeform" method="post" action="process_bug.cgi">

  <input type="hidden" name="delta_ts" value="2013-05-17 09:26:18">
  <input type="hidden" name="id" value="8197">
  <input type="hidden" name="token" value="1635621859-8TBKtXxEl0kRrfLBxMOdrSmazjM9uVI6-t3LWDl_XEI">
<div class="bz_short_desc_container edit_form">
     <a href="show_bug.cgi?id=8197"><b>Bug&nbsp;8197</b></a> <span id="summary_container" class="bz_default_hidden">
      - <span id="short_desc_nonedit_display">PER dissector crash</span>
     </span>

    <div id="summary_input"><span class="field_label "
    id="field_label_short_desc">


  <a 
      title="The bug summary is a short sentence which succinctly describes what the bug is about."
      class="field_help_link"
      href="page.cgi?id=fields.html#short_desc"
  >Summary:</a>

</span>PER dissector crash
    </div>
  </div>
  <script type="text/javascript">
    hideEditableField('summary_container',
                      'summary_input',
                      'summary_edit_action',
                      'short_desc',
                      'PER dissector crash' );
  </script>
  <table class="edit_form">
    <tr>
      
      <td id="bz_show_bug_column_1" class="bz_show_bug_column">     
        <table>
          <tr>
    <th class="field_label">
      <a href="page.cgi?id=fields.html#bug_status">Status</a>:
    </th>
    <td id="bz_field_status">
      <span id="static_bug_status">RESOLVED
          FIXED
      </span>
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_alias">


  <a 
      title="A short, unique name assigned to a bug in order to assist with looking it up and referring to it in other places in Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#alias"
  >Alias:</a>

</th>
    <td>
        None
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_product">


  <a 
      title="Bugs are categorised into Products and Components."
      class="field_help_link"
      href="describecomponents.cgi"
  >Product:</a>

</th>
  <td class="field_value "
      id="field_container_product" >Wireshark

</td>
    </tr>

    
    <tr class="bz_default_hidden"><th class="field_label "
    id="field_label_classification">


  <a 
      title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation."
      class="field_help_link"
      href="page.cgi?id=fields.html#classification"
  >Classification:</a>

</th>
  <td class="field_value "
      id="field_container_classification" >Unclassified

</td>
    </tr>
        
    
    
    <tr><th class="field_label "
    id="field_label_component">


  <a 
      title="Components are second-level categories; each belongs to a particular Product. Select a Product to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi?product=Wireshark"
  >Component:</a>

</th>
  <td class="field_value "
      id="field_container_component" >TShark

  (<a href="buglist.cgi?component=TShark&amp;product=Wireshark&amp;bug_status=__open__"
      target="_blank">show other bugs</a>)
</td>
    </tr>
    <tr><th class="field_label "
    id="field_label_version">


  <a 
      title="The version field defines the version of the software the bug was found in."
      class="field_help_link"
      href="page.cgi?id=fields.html#version"
  >Version:</a>

</th>
<td>Git
  </td>
    </tr>
        
    
        
    <tr><th class="field_label "
    id="field_label_rep_platform">


  <a 
      title="The hardware platform the bug was observed on. Note: When searching, selecting the option &quot;All&quot; only finds bugs whose value for this field is literally the word &quot;All&quot;."
      class="field_help_link"
      href="page.cgi?id=fields.html#rep_platform"
  >Hardware:</a>

</th>
      <td class="field_value">x86-64
        Linux
      </td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          
          <tr>
      <th class="field_label">
        <label  accesskey="i">
          <a href="page.cgi?id=fields.html#importance"><u>I</u>mportance</a></label>:
      </th>
      <td>Low
       Minor<span id="votes_container">
    (<a href="page.cgi?id=voting/user.html&amp;bug_id=8197#vote_8197">vote</a>)
  </span>
      </td>
    </tr>

      <tr><th class="field_label "
    id="field_label_target_milestone">


  <a 
      title="The Target Milestone field is used to define when the engineer the bug is assigned to expects to fix it."
      class="field_help_link"
      href="page.cgi?id=fields.html#target_milestone"
  >Target Milestone:</a>

</th><td>---
  </td>
      </tr>
          
          <tr><th class="field_label "
    id="field_label_assigned_to">


  <a 
      title="The person in charge of resolving the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#assigned_to"
  >Assignee:</a>

</th>
      <td><span class="vcard"><span class="fn">Bugzilla Administrator</span>
</span>
      </td>
    </tr>

    <script type="text/javascript">
      assignToDefaultOnChange(['product', 'component'],
        'bugzilla-admin\x40wireshark.org',
        '');
    </script>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          <tr><th class="field_label "
    id="field_label_bug_file_loc">


  <a 
      title="Bugs can have a URL associated with them - for example, a pointer to a web site where the problem is seen."
      class="field_help_link"
      href="page.cgi?id=fields.html#bug_file_loc"
  >URL:</a>

</th>
    <td>
      <span id="bz_url_input_area">
      </span>
    </td>
  </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>

          
<tr><th class="field_label "
    id="field_label_dependson">


  <a 
      title="The bugs listed here must be resolved before this bug can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#dependson"
  >Depends on:</a>

</th>

  <td>
    <span id="dependson_input_area">
    </span>

  </td>
  </tr>
  
  <tr><th class="field_label "
    id="field_label_blocked">


  <a 
      title="This bug must be resolved before the bugs listed in this field can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#blocked"
  >Blocks:</a>

</th>

  <td>
    <span id="blocked_input_area">
    </span>

  </td>
  </tr>
          
        </table>
      </td>
      <td>
        <div class="bz_column_spacer">&nbsp;</div>
      </td>
      
      <td id="bz_show_bug_column_2" class="bz_show_bug_column">
        <table>
        <tr>
    <th class="field_label">
      Reported:
    </th>
    <td>2013-01-12 05:10 UTC by <span class="vcard"><span class="fn">Laurent Butti</span>
</span>
    </td>
  </tr>
  
  <tr>
    <th class="field_label">
      Modified:
    </th>
    <td>2013-05-17 09:26 UTC
      (<a href="show_activity.cgi?id=8197">History</a>)
    </td>
  
  </tr>
<tr>
      <th class="field_label">
        <label  accesskey="a">
          CC List:
        </label>
      </th>
      <td>4 
          users
          <span id="cc_edit_area_showhide_container" class="bz_default_hidden">
            (<a href="#" id="cc_edit_area_showhide">show</a>)
          </span>
        <div id="cc_edit_area">
          <br>
            <select id="cc" multiple="multiple" size="5" >
                <option value="darkjames-ws">darkjames-ws</option>
                <option value="eapache">eapache</option>
                <option value="jeff.morriss.ws">jeff.morriss.ws</option>
                <option value="pascal">pascal</option>
            </select>
        </div>
          <script type="text/javascript">
            hideEditableField( 'cc_edit_area_showhide_container', 
                               'cc_edit_area', 
                               'cc_edit_area_showhide', 
                               '', 
                               '');  
          </script>
      </td>
    </tr>

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_see_also">


  <a 
      title="This allows you to refer to bugs in other installations. You can enter a URL to a bug in the 'Add Bug URLs' field to note that that bug is related to this one. You can enter multiple URLs at once by separating them with whitespace. You should normally use this field to refer to bugs in other installations. For bugs in this installation, it is better to use the Depends on and Blocks fields."
      class="field_help_link"
      href="page.cgi?id=fields.html#see_also"
  >See Also:</a>

</th>
  <td class="field_value "
      id="field_container_see_also" >

</td>
    </tr> 

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>



        </table>
      </td>
    </tr>
    <tr>
      <td colspan="3">
          <hr id="bz_top_half_spacer">
      </td>
    </tr>
  </table>

  <table id="bz_big_form_parts">
  <tr>
  <td>

    
<script type="text/javascript">
<!--
function toggle_display(link) {
    var table = document.getElementById("attachment_table");
    var view_all = document.getElementById("view_all");
    var hide_obsolete_url_parameter = "&hide_obsolete=1";
    // Store current height for scrolling later
    var originalHeight = table.offsetHeight;
    var rows = YAHOO.util.Dom.getElementsByClassName(
        'bz_tr_obsolete', 'tr', table);

    for (var i = 0; i < rows.length; i++) {
        bz_toggleClass(rows[i], 'bz_default_hidden');
    }

    if (YAHOO.util.Dom.hasClass(rows[0], 'bz_default_hidden')) {
        link.innerHTML = "Show Obsolete";
        view_all.href = view_all.href + hide_obsolete_url_parameter 
    }
    else {
        link.innerHTML = "Hide Obsolete";
        view_all.href = view_all.href.replace(hide_obsolete_url_parameter,"");
    }

    var newHeight = table.offsetHeight;
    // This scrolling makes the window appear to not move at all.
    window.scrollBy(0, newHeight - originalHeight);

    return false;
}
//-->
</script>

<br>
<table id="attachment_table">
  <tr id="a0">
    <th colspan="2" class="left">
      Attachments
    </th>
  </tr>


      <tr id="a1" class="bz_contenttype_application_pcap">
        <td>
            <a href="attachment.cgi?id=9801"
               title="View the content of the attachment">
          <b>Capture that crashes</b></a>

          <span class="bz_attach_extra_info">
              (499.90 KB,
                application/pcap)

            <br>
            <a href="#attach_9801"
               title="Go to the comment associated with the attachment">2013-01-12 05:10 UTC</a>,

            <span class="vcard"><span class="fn">Laurent Butti</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=9801&amp;action=edit">Details</a>
        </td>
      </tr>

  <tr class="bz_attach_footer">
    <td colspan="2">
        <span class="bz_attach_view_hide">
        </span>
        <a href="attachment.cgi?bugid=8197&amp;action=enter">Add an attachment</a>
        (proposed patch, testcase, etc.)
    </td>
  </tr>
</table>
<br>
<div id="add_comment" class="bz_section_additional_comments">
      <table>
        <tr>
          <td>
            <fieldset>
              <legend>Note</legend>
              You need to
              <a href="show_bug.cgi?id=8197&amp;GoAheadAndLogIn=1">log in</a>
              before you can comment on or make changes to this bug.
            </fieldset>
          </td>
        </tr> 
      </table>
  </div>
  </td>
  <td>
  </td>
  </tr></table>

  
  <div id="comments"><script src="js/comments.js?1490378926" type="text/javascript">
</script>

<script type="text/javascript">
<!--
  /* Adds the reply text to the 'comment' textarea */
  function replyToComment(id, real_id, name) {
      var prefix = "(In reply to " + name + " from comment #" + id + ")\n";
      var replytext = "";
        /* pre id="comment_name_N" */
        var text_elem = document.getElementById('comment_text_'+id);
        var text = getText(text_elem);
        replytext = prefix + wrapReplyText(text);


      /* <textarea id="comment"> */
      var textarea = document.getElementById('comment');
      if (textarea.value != replytext) {
          textarea.value += replytext;
      }

      textarea.focus();
  } 
//-->
</script>


<!-- This auto-sizes the comments and positions the collapse/expand links 
     to the right. -->
<table class="bz_comment_table">
<tr>
<td>
<div id="c0" class="bz_comment bz_first_comment">

      <div class="bz_first_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c0">Description</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laurent Butti</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-01-12 05:10:23 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=9801" name="attach_9801" title="Capture that crashes">attachment 9801</a> <a href="attachment.cgi?id=9801&amp;action=edit" title="Capture that crashes">[details]</a></span>
Capture that crashes

Build Information:
1.8.4
--
--
Hi,

Here is a PCAP file triggering an that could enable (at least) a remote
party to trigger a denial of service.

This file was generated thanks to a fuzz testing campaign.

Laurent Butti.

--
Program received signal SIGSEGV, Segmentation fault.
sl_alloc (mem_chunk=0x7ffff6d474e0) at /usr/include/x86_64-linux-gnu/bits/string3.h:52
52    return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));
(gdb) bt
#0  sl_alloc (mem_chunk=0x7ffff6d474e0) at /usr/include/x86_64-linux-gnu/bits/string3.h:52
#1  0x00007ffff5188d88 in proto_tree_set_representation (pi=&lt;optimized out&gt;, format=0x7ffff5ddc0af &quot;Item %d&quot;, ap=0x7fffffffb9e8) at proto.c:3651
#2  0x00007ffff518c09a in proto_tree_add_text (tree=&lt;optimized out&gt;, tvb=&lt;optimized out&gt;, start=&lt;optimized out&gt;, length=&lt;optimized out&gt;, 
    format=&lt;optimized out&gt;) at proto.c:1031
#3  0x00007ffff560b91d in dissect_per_sequence_of_helper (tvb=0x1602ea0, offset=1216, actx=0x7fffffffbf70, tree=0x7ffff7ee3440, 
    func=0x7ffff5b49b80 &lt;dissect_t124_UserId&gt;, hf_index=87963, length=8965) at packet-per.c:484
#4  0x00007ffff560c7a9 in dissect_per_sequence_of (tvb=0x1602ea0, offset=1184, actx=0x7fffffffbf70, parent_tree=0x7ffff7ee2900, hf_index=&lt;optimized out&gt;, 
    ett_index=28584, seq=0x7ffff6cda210) at packet-per.c:518
#5  0x00007ffff5b4977b in dissect_t124_SET_OF_UserId (tvb=&lt;optimized out&gt;, offset=&lt;optimized out&gt;, actx=&lt;optimized out&gt;, tree=&lt;optimized out&gt;, 
    hf_index=&lt;optimized out&gt;) at ../../asn1/t124/t124.cnf:417
#6  0x00007ffff560f413 in dissect_per_sequence (tvb=0x1602ea0, offset=1168, actx=0x7fffffffbf70, parent_tree=&lt;optimized out&gt;, hf_index=&lt;optimized out&gt;, 
    ett_index=&lt;optimized out&gt;, sequence=0x7ffff6cdad40) at packet-per.c:1813
#7  0x00007ffff5b48beb in dissect_t124_T_private (tvb=&lt;optimized out&gt;, offset=&lt;optimized out&gt;, actx=&lt;optimized out&gt;, tree=&lt;optimized out&gt;, 
    hf_index=&lt;optimized out&gt;) at ../../asn1/t124/t124.cnf:434
#8  0x00007ffff560f0ca in dissect_per_choice (tvb=0x1602ea0, offset=1130, actx=0x7fffffffbf70, tree=&lt;optimized out&gt;, hf_index=87967, ett_index=28580, 
    choice=0x7ffff6cdac60, value=0x0) at packet-per.c:1665
#9  0x00007ffff5b48fd4 in dissect_t124_ChannelAttributes (tvb=&lt;optimized out&gt;, offset=&lt;optimized out&gt;, actx=&lt;optimized out&gt;, tree=&lt;optimized out&gt;, 
    hf_index=&lt;optimized out&gt;) at ../../asn1/t124/t124.cnf:473
#10 0x00007ffff560b943 in dissect_per_sequence_of_helper (tvb=0x1602ea0, offset=1128, actx=0x7fffffffbf70, tree=0x7ffff7fef2d0, 
    func=0x7ffff5b48fb0 &lt;dissect_t124_ChannelAttributes&gt;, hf_index=87967, length=105) at packet-per.c:487
#11 0x00007ffff560c7a9 in dissect_per_sequence_of (tvb=0x1602ea0, offset=16, actx=0x7fffffffbf70, parent_tree=0x7ffff7fde930, hf_index=&lt;optimized out&gt;, 
    ett_index=28587, seq=0x7ffff6cdac30) at packet-per.c:518
#12 0x00007ffff5b497fb in dissect_t124_SET_OF_ChannelAttributes (tvb=&lt;optimized out&gt;, offset=&lt;optimized out&gt;, actx=&lt;optimized out&gt;, tree=&lt;optimized out&gt;, 
    hf_index=&lt;optimized out&gt;) at ../../asn1/t124/t124.cnf:487
#13 0x00007ffff560f413 in dissect_per_sequence (tvb=0x1602ea0, offset=6, actx=0x7fffffffbf70, parent_tree=&lt;optimized out&gt;, hf_index=&lt;optimized out&gt;, 
    ett_index=&lt;optimized out&gt;, sequence=0x7ffff6cdabe0) at packet-per.c:1813
#14 0x00007ffff5b48bab in dissect_t124_MergeChannelsConfirm (tvb=&lt;optimized out&gt;, offset=&lt;optimized out&gt;, actx=&lt;optimized out&gt;, tree=&lt;optimized out&gt;, 
    hf_index=&lt;optimized out&gt;) at ../../asn1/t124/t124.cnf:530
#15 0x00007ffff560f0ca in dissect_per_choice (tvb=0x1602ea0, offset=6, actx=0x7fffffffbf70, tree=&lt;optimized out&gt;, hf_index=87825, ett_index=28637, 
    choice=0x7ffff6cd9140, value=0x7fffffffc03c) at packet-per.c:1665
#16 0x00007ffff5b49f2e in dissect_t124_DomainMCSPDU (hf_index=&lt;optimized out&gt;, tree=0x7ffff7ee3da0, actx=0x7fffffffbf70, offset=0, tvb=0x1602ea0)
    at ../../asn1/t124/t124.cnf:196
#17 dissect_DomainMCSPDU_PDU (tvb=0x1602ea0, pinfo=&lt;optimized out&gt;, tree=0x7ffff7ee3da0) at ../../asn1/t124/packet-t124-template.c:117
#18 0x00007ffff5b4a146 in dissect_t125 (tvb=0x1602ea0, pinfo=0x7fffffffd530, parent_tree=&lt;optimized out&gt;) at ../../asn1/t125/packet-t125-template.c:85
#19 0x00007ffff5b4a273 in dissect_t125_heur (tvb=0x1602ea0, pinfo=0x7fffffffd530, parent_tree=0x7ffff7fef000) at ../../asn1/t125/packet-t125-template.c:113
#20 0x00007ffff517ee4c in dissector_try_heuristic (sub_dissectors=&lt;optimized out&gt;, tvb=0x1602ea0, pinfo=0x7fffffffd530, tree=0x7ffff7fef000) at packet.c:1781
#21 0x00007ffff55f581e in ositp_decode_DT (subdissector_found=&lt;synthetic pointer&gt;, uses_inactive_subset=0, tree=0x7ffff7fef000, pinfo=0x7fffffffd530, 
    tpdu=15 '\017', li=&lt;optimized out&gt;, offset=3, tvb=0x15ff180) at packet-ositp.c:988
#22 dissect_ositp_internal (tvb=0x15ff180, pinfo=0x7fffffffd530, tree=0x7ffff7fef000, uses_inactive_subset=0) at packet-ositp.c:1669
#23 0x00007ffff517d1bb in call_dissector_through_handle (handle=0x773e30, tvb=0x15ff180, pinfo=0x7fffffffd530, tree=0x7ffff7fef000) at packet.c:429
#24 0x00007ffff517d865 in call_dissector_work (handle=0x773e30, tvb=0x15ff180, pinfo_arg=0x7fffffffd530, tree=0x7ffff7fef000, add_proto_name=1)
    at packet.c:524
#25 0x00007ffff517f5a1 in call_dissector (handle=&lt;optimized out&gt;, tvb=0x15ff180, pinfo=0x7fffffffd530, tree=0x7ffff7fef000) at packet.c:2050
#26 0x00007ffff578773c in dissect_tpkt_encap (tvb=0x160b460, pinfo=0x7fffffffd530, tree=0x7ffff7fef000, desegment=1, subdissector_handle=0x773e30)
    at packet-tpkt.c:555
#27 0x00007ffff517d180 in call_dissector_through_handle (handle=0x103fab0, tvb=0x160b460, pinfo=0x7fffffffd530, tree=0x7ffff7fef000) at packet.c:433
#28 0x00007ffff517d865 in call_dissector_work (handle=0x103fab0, tvb=0x160b460, pinfo_arg=0x7fffffffd530, tree=0x7ffff7fef000, add_proto_name=1)
    at packet.c:524
#29 0x00007ffff517e08e in dissector_try_uint_new (sub_dissectors=&lt;optimized out&gt;, uint_val=102, tvb=0x160b460, pinfo=0x7fffffffd530, tree=0x7ffff7fef000, 
    add_proto_name=1) at packet.c:943
#30 0x00007ffff5767452 in decode_tcp_ports (tvb=&lt;optimized out&gt;, offset=&lt;optimized out&gt;, pinfo=0x7fffffffd530, tree=0x7ffff7fef000, src_port=102, 
    dst_port=59806, tcpd=0x7fffecfcda90) at packet-tcp.c:3874
#31 0x00007ffff576788e in process_tcp_payload (tvb=0x15ff580, offset=32, pinfo=0x7fffffffd530, tree=0x7ffff7fef000, tcp_tree=0x7ffff7ee2420, src_port=102, 
    dst_port=59806, seq=0, nxtseq=0, is_tcp_segment=0, tcpd=0x7fffecfcda90) at packet-tcp.c:3933
#32 0x00007ffff5767e31 in desegment_tcp (tcpd=0x7fffecfcda90, tcp_tree=0x7ffff7ee2420, tree=0x7ffff7fef000, dport=59806, sport=102, nxtseq=2773418301, 
    seq=2773417985, offset=32, pinfo=0x7fffffffd530, tvb=0x15ff580) at packet-tcp.c:1799
#33 dissect_tcp_payload (tvb=0x15ff580, pinfo=0x7fffffffd530, offset=&lt;optimized out&gt;, seq=&lt;optimized out&gt;, nxtseq=2773418301, sport=102, dport=59806, 
---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---
    tree=0x7ffff7fef000, tcp_tree=0x7ffff7ee2420, tcpd=0x7fffecfcda90) at packet-tcp.c:4000
#34 0x00007ffff576927f in dissect_tcp (tvb=&lt;optimized out&gt;, pinfo=0x7fffffffd530, tree=0x7ffff7fef000) at packet-tcp.c:4748
#35 0x00007ffff517d180 in call_dissector_through_handle (handle=0x100eab0, tvb=0x15ff580, pinfo=0x7fffffffd530, tree=0x7ffff7fef000) at packet.c:433
#36 0x00007ffff517d865 in call_dissector_work (handle=0x100eab0, tvb=0x15ff580, pinfo_arg=0x7fffffffd530, tree=0x7ffff7fef000, add_proto_name=1)
    at packet.c:524
#37 0x00007ffff517e08e in dissector_try_uint_new (sub_dissectors=&lt;optimized out&gt;, uint_val=6, tvb=0x15ff580, pinfo=0x7fffffffd530, tree=0x7ffff7fef000, 
    add_proto_name=1) at packet.c:943
#38 0x00007ffff54bfe6b in dissect_ip (tvb=0x15fdaa0, pinfo=&lt;optimized out&gt;, parent_tree=0x7ffff7fef000) at packet-ip.c:2396
#39 0x00007ffff517d180 in call_dissector_through_handle (handle=0xb99b30, tvb=0x15fdaa0, pinfo=0x7fffffffd530, tree=0x7ffff7fef000) at packet.c:433
#40 0x00007ffff517d865 in call_dissector_work (handle=0xb99b30, tvb=0x15fdaa0, pinfo_arg=0x7fffffffd530, tree=0x7ffff7fef000, add_proto_name=1)
    at packet.c:524
#41 0x00007ffff517e08e in dissector_try_uint_new (sub_dissectors=&lt;optimized out&gt;, uint_val=2048, tvb=0x15fdaa0, pinfo=0x7fffffffd530, tree=0x7ffff7fef000, 
    add_proto_name=1) at packet.c:943
#42 0x00007ffff53adffa in ethertype (etype=2048, tvb=0x160b6a0, offset_after_etype=14, pinfo=0x7fffffffd530, tree=0x7ffff7fef000, fh_tree=0x7ffff7ed5120, 
    etype_id=21641, trailer_id=21645, fcs_len=-1) at packet-ethertype.c:270
#43 0x00007ffff53acabc in dissect_eth_common (tvb=0x160b6a0, pinfo=0x7fffffffd530, parent_tree=0x7ffff7fef000, fcs_len=-1) at packet-eth.c:403
#44 0x00007ffff517d180 in call_dissector_through_handle (handle=0x9e2820, tvb=0x160b6a0, pinfo=0x7fffffffd530, tree=0x7ffff7fef000) at packet.c:433
#45 0x00007ffff517d865 in call_dissector_work (handle=0x9e2820, tvb=0x160b6a0, pinfo_arg=0x7fffffffd530, tree=0x7ffff7fef000, add_proto_name=1)
    at packet.c:524
#46 0x00007ffff517e08e in dissector_try_uint_new (sub_dissectors=&lt;optimized out&gt;, uint_val=1, tvb=0x160b6a0, pinfo=0x7fffffffd530, tree=0x7ffff7fef000, 
    add_proto_name=1) at packet.c:943
#47 0x00007ffff53dfc1b in dissect_frame (tvb=0x160b6a0, pinfo=0x7fffffffd530, parent_tree=0x7ffff7fef000) at packet-frame.c:383
#48 0x00007ffff517d180 in call_dissector_through_handle (handle=0xa2a740, tvb=0x160b6a0, pinfo=0x7fffffffd530, tree=0x7ffff7fef000) at packet.c:433
#49 0x00007ffff517d865 in call_dissector_work (handle=0xa2a740, tvb=0x160b6a0, pinfo_arg=0x7fffffffd530, tree=0x7ffff7fef000, add_proto_name=1)
    at packet.c:524
#50 0x00007ffff517f5a1 in call_dissector (handle=&lt;optimized out&gt;, tvb=0x160b6a0, pinfo=0x7fffffffd530, tree=0x7ffff7fef000) at packet.c:2050
#51 0x00007ffff517f9b4 in dissect_packet (edt=0x7fffffffd520, pseudo_header=0x0, pd=0x15d43a0 &quot;&quot;, fd=0x7fffffffd6c0, cinfo=0x0) at packet.c:364
#52 0x000000000041ad8b in process_packet (cf=0x6449e0, offset=&lt;optimized out&gt;, whdr=&lt;optimized out&gt;, pseudo_header=0x15cf328, pd=0x15d43a0 &quot;&quot;, 
    filtering_tap_listeners=&lt;optimized out&gt;, tap_flags=4) at tshark.c:3106
#53 0x000000000040dc5f in load_cap_file (max_byte_count=0, max_packet_count=-1273, out_file_name_res=0, out_file_type=2, save_file=0x0, cf=&lt;optimized out&gt;)
    at tshark.c:2899
#54 main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at tshark.c:1791

(gdb) exploitable -v
'exploitable' version 1.04
Linux nitro 3.2.0-30-generic #48-Ubuntu SMP Fri Aug 24 16:52:48 UTC 2012 x86_64
Signal si_signo: 11 Signal si_addr: 0x0
Nearby code:
   0x00007ffff51738b0 &lt;+0&gt;: push   rbx
   0x00007ffff51738b1 &lt;+1&gt;: mov    rax,QWORD PTR [rdi+0x10]
   0x00007ffff51738b5 &lt;+5&gt;: mov    rbx,rdi
   0x00007ffff51738b8 &lt;+8&gt;: test   rax,rax
   0x00007ffff51738bb &lt;+11&gt;:    je     0x7ffff51738d0 &lt;sl_alloc+32&gt;
=&gt; 0x00007ffff51738bd &lt;+13&gt;:    mov    rdx,QWORD PTR [rax]
   0x00007ffff51738c0 &lt;+16&gt;:    mov    QWORD PTR [rdi+0x10],rdx
   0x00007ffff51738c4 &lt;+20&gt;:    pop    rbx
   0x00007ffff51738c5 &lt;+21&gt;:    ret    
   0x00007ffff51738c6 &lt;+22&gt;:    nop    WORD PTR cs:[rax+rax*1+0x0]
Stack trace:
#  0 sl_alloc at 0x7ffff51738bd in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
#  1 proto_tree_set_representation at 0x7ffff5188d88 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
#  2 proto_tree_add_text at 0x7ffff518c09a in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
#  3 dissect_per_sequence_of_helper at 0x7ffff560b91d in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
#  4 dissect_per_sequence_of at 0x7ffff560c7a9 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
#  5 dissect_t124_SET_OF_UserId at 0x7ffff5b4977b in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
#  6 dissect_per_sequence at 0x7ffff560f413 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
#  7 dissect_t124_T_private at 0x7ffff5b48beb in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
#  8 dissect_per_choice at 0x7ffff560f0ca in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
#  9 dissect_t124_ChannelAttributes at 0x7ffff5b48fd4 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 10 dissect_per_sequence_of_helper at 0x7ffff560b943 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 11 dissect_per_sequence_of at 0x7ffff560c7a9 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 12 dissect_t124_SET_OF_ChannelAttributes at 0x7ffff5b497fb in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 13 dissect_per_sequence at 0x7ffff560f413 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 14 dissect_t124_MergeChannelsConfirm at 0x7ffff5b48bab in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 15 dissect_per_choice at 0x7ffff560f0ca in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 16 dissect_t124_DomainMCSPDU at 0x7ffff5b49f2e in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 17 dissect_DomainMCSPDU_PDU at 0x7ffff5b49f2e in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 18 dissect_t125 at 0x7ffff5b4a146 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 19 dissect_t125_heur at 0x7ffff5b4a273 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 20 dissector_try_heuristic at 0x7ffff517ee4c in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 21 ositp_decode_DT at 0x7ffff55f581e in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 22 dissect_ositp_internal at 0x7ffff55f581e in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 23 call_dissector_through_handle at 0x7ffff517d1bb in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 24 call_dissector_work at 0x7ffff517d865 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 25 call_dissector at 0x7ffff517f5a1 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 26 dissect_tpkt_encap at 0x7ffff578773c in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 27 call_dissector_through_handle at 0x7ffff517d180 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 28 call_dissector_work at 0x7ffff517d865 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 29 dissector_try_uint_new at 0x7ffff517e08e in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 30 decode_tcp_ports at 0x7ffff5767452 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 31 process_tcp_payload at 0x7ffff576788e in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 32 desegment_tcp at 0x7ffff5767e31 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 33 dissect_tcp_payload at 0x7ffff5767e31 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 34 dissect_tcp at 0x7ffff576927f in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 35 call_dissector_through_handle at 0x7ffff517d180 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 36 call_dissector_work at 0x7ffff517d865 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 37 dissector_try_uint_new at 0x7ffff517e08e in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 38 dissect_ip at 0x7ffff54bfe6b in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 39 call_dissector_through_handle at 0x7ffff517d180 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 40 call_dissector_work at 0x7ffff517d865 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 41 dissector_try_uint_new at 0x7ffff517e08e in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---
# 42 ethertype at 0x7ffff53adffa in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 43 dissect_eth_common at 0x7ffff53acabc in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 44 call_dissector_through_handle at 0x7ffff517d180 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 45 call_dissector_work at 0x7ffff517d865 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 46 dissector_try_uint_new at 0x7ffff517e08e in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 47 dissect_frame at 0x7ffff53dfc1b in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 48 call_dissector_through_handle at 0x7ffff517d180 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 49 call_dissector_work at 0x7ffff517d865 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 50 call_dissector at 0x7ffff517f5a1 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 51 dissect_packet at 0x7ffff517f9b4 in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
# 52 process_packet at 0x41ad8b in /home/laurent/fuzzing/bin/wireshark-1.8.4/bin/tshark
# 53 load_cap_file at 0x40dc5f in /home/laurent/fuzzing/bin/wireshark-1.8.4/bin/tshark
# 54 main at 0x40dc5f in /home/laurent/fuzzing/bin/wireshark-1.8.4/bin/tshark
Faulting frame: #  0 sl_alloc at 0x7ffff51738bd in /home/laurent/fuzzing/bin/wireshark-1.8.4/lib/libwireshark.so.2.0.4
Description: Access violation
Short description: AccessViolation (20/21)
Hash: 443627f0ec9f8fbe3076e95544580739.21407070f41946e566bee9873babf224
Exploitability Classification: UNKNOWN
Explanation: The target crashed due to an access violation but there is not enough additional information available to determine exploitability.</pre>
    </div>

    <div id="c1" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c1">Comment 1</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-01-14 10:21:59 UTC
        </span>

      </div>




<pre class="bz_comment_text">I'm not immediately able to reproduce on my build of 1.8.4. Did you have to change any settings or &quot;Decode As&quot; any fields in order to cause this crash?</pre>
    </div>

    <div id="c2" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c2">Comment 2</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Pascal Quantin</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-01-14 10:57:52 UTC
        </span>

      </div>




<pre class="bz_comment_text">I could have trunk-1.8 top of tree crash with this capture when doing a tshark -nVr on the capture.
A trunk Wireshark also triggers an error, but in another dissector (ASN.1 BER and not PER if I remember correctly, but I might be wrong).
I did not have the time to investigate at all.</pre>
    </div>

    <div id="c3" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c3">Comment 3</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-01-14 12:05:51 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8197#c2">comment #2</a>)
<span class="quote">&gt; I could have trunk-1.8 top of tree crash with this capture when doing a
&gt; tshark -nVr on the capture.</span >

That's very strange - I'm not seeing any such errors. I have removed my ~/.wireshark directory to ensure I am starting with a default profile. My build information is as follows:

TShark 1.8.5 (SVN<a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=47055">Rev 47055</a> from /trunk-1.8)

Copyright 1998-2013 Gerald Combs &lt;<a href="/cdn-cgi/l/email-protection#fd9a988f9c9199dbdecbc9c68a948f988e959c8f96d3928f9a">gerald&#64;wireshark.org</a>&gt; and contributors.
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Compiled (64-bit) with GLib 2.34.3, with libpcap, with libz 1.2.7, with POSIX
capabilities (Linux), with SMI 0.4.8, with c-ares 1.9.1, with Lua 5.1, without
Python, with GnuTLS 2.12.20, with Gcrypt 1.5.0, with MIT Kerberos, with GeoIP.

Running on Linux 3.8.0-0-generic, with locale en_CA.UTF-8, with libpcap version
1.3.0, with libz 1.2.7.

Built using gcc 4.7.2.

<span class="quote">&gt; A trunk Wireshark also triggers an error, but in another dissector (ASN.1
&gt; BER and not PER if I remember correctly, but I might be wrong).
&gt; I did not have the time to investigate at all.</span >

I'm also not seeing this one. I wonder what's wrong with my setup?</pre>
    </div>

    <div id="c4" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c4">Comment 4</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Pascal Quantin</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-01-14 13:42:22 UTC
        </span>

      </div>




<pre class="bz_comment_text">My build info is:
TShark 1.8.5 (SVN<a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=47051">Rev 47051</a> from /trunk-1.8)

Copyright 1998-2013 Gerald Combs &lt;<a href="/cdn-cgi/l/email-protection#8deae8ffece1e9abaebbb9b6fae4ffe8fee5ecffe6a3e2ffea">gerald&#64;wireshark.org</a>&gt; and contributors.
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Compiled (64-bit) with GLib 2.34.1, with libpcap, with libz 1.2.7, without POSIX
capabilities, without SMI, without c-ares, without ADNS, without Lua, without
Python, without GnuTLS, without Gcrypt, without Kerberos, without GeoIP.

Running on Linux 3.5.0-21-generic, with locale fr_FR.UTF-8, with libpcap version
1.3.0, with libz 1.2.7.

Built using gcc 4.7.2.

It runs on Ubuntu 12.10 x64 and I get the same segmentation fault as Laurent in frame 1242.

With trunk (revision 47047), the call stack is:
#0  sl_alloc (mem_chunk=mem_chunk&#64;entry=0x7ffff6c5dbd0 &lt;item_label_slab&gt;)
    at emem.c:905
#1  0x00007ffff4eca53b in proto_tree_set_representation_value (
    pi=pi&#64;entry=0x7ffff7fdb4e0, format=format&#64;entry=0x7ffff5ede173 &quot;%s&quot;, 
    ap=ap&#64;entry=0x7fffffffb928) at proto.c:3610
#2  0x00007ffff4f1b9be in proto_tree_add_uint_format_value (
    tree=tree&#64;entry=0x7ffff7fec120, hfindex=129498, tvb=tvb&#64;entry=0x0, 
    start=start&#64;entry=0, length=length&#64;entry=0, value=value&#64;entry=6291456, 
    format=format&#64;entry=0x7ffff5ede173 &quot;%s&quot;) at proto.c:2994
#3  0x00007ffff4efe100 in expert_set_info_vformat (ap=0x7fffffffba68, 
    format=&lt;optimized out&gt;, severity=6291456, group=117440512, 
    pi=0x7ffff7fd6150, pinfo=0x7fffffffd780) at expert.c:192
#4  expert_add_info_format (pinfo=&lt;optimized out&gt;, 
    pi=pi&#64;entry=0x7ffff7fd6150, group=group&#64;entry=117440512, 
    severity=severity&#64;entry=6291456, 
    format=format&#64;entry=0x7ffff5a889a8 &quot;BER Error: Unknown field in SET&quot;)
    at expert.c:229
#5  0x00007ffff5001cb2 in dissect_ber_set (implicit_tag=implicit_tag&#64;entry=0, 
    actx=actx&#64;entry=0x7fffffffbe20, parent_tree=0x7ffff7fd6b40, 
    tvb=tvb&#64;entry=0x173f300, offset=&lt;optimized out&gt;, offset&#64;entry=0, 
    set=0x7ffff6c12d60 &lt;CPA_PPDU_set&gt;, hf_id=72721, ett_id=19862)
    at packet-ber.c:2883
#6  0x00007ffff53edb82 in dissect_pres_CPA_PPDU (hf_index=&lt;optimized out&gt;, 
    tree=&lt;optimized out&gt;, actx=&lt;optimized out&gt;, offset=&lt;optimized out&gt;, 
    tvb=&lt;optimized out&gt;, implicit_tag=&lt;optimized out&gt;)
    at ../../asn1/pres/pres.cnf:321
#7  dissect_ppdu (tree=0x7ffff7fec000, pinfo=0x7fffffffd780, offset=0, 
    tvb=0x173f300) at ../../asn1/pres/packet-pres-template.c:268
#8  dissect_pres (tvb=0x173f300, pinfo=0x7fffffffd780, 
    parent_tree=0x7ffff7fec000) at ../../asn1/pres/packet-pres-template.c:359
#9  0x00007ffff4f04df8 in call_dissector_through_handle (handle=0xec1000, 
    tvb=0x173f300, pinfo=0x7fffffffd780, tree=0x7ffff7fec000, data=0x0)
    at packet.c:458
#10 0x00007ffff4f0569d in call_dissector_work (handle=0xec1000, 
    tvb=0x173f300, pinfo_arg=0x7fffffffd780, tree=0x7ffff7fec000, 
    add_proto_name=1, data=0x0) at packet.c:549
#11 0x00007ffff4f07411 in call_dissector_with_data (handle=&lt;optimized out&gt;, 
    tvb=tvb&#64;entry=0x173f300, pinfo=pinfo&#64;entry=0x7fffffffd780, 
    tree=tree&#64;entry=0x7ffff7fec000, data=data&#64;entry=0x0) at packet.c:2076
#12 0x00007ffff4f074d8 in call_dissector (handle=&lt;optimized out&gt;, 
    tvb=tvb&#64;entry=0x173f300, pinfo=pinfo&#64;entry=0x7fffffffd780, 
    tree=tree&#64;entry=0x7ffff7fec000) at packet.c:2094
[...]

Same kind of crash, but from packet-ber.c instead of packet-per.c. The offending frame is also number 1242.</pre>
    </div>

    <div id="c5" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c5">Comment 5</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-01-14 14:24:29 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8197#c4">comment #4</a>)
<span class="quote">&gt; It runs on Ubuntu 12.10 x64 and I get the same segmentation fault as Laurent
&gt; in frame 1242.</span >

I am running on a prerelease of 13.04 x64 and still have not been able to reproduce. Possibly some of the extra libraries I have linked in (c-ares, geoip, etc) are changing my memory layout enough that I'm not seeing it?

<span class="quote">&gt; Same kind of crash, but from packet-ber.c instead of packet-per.c. The
&gt; offending frame is also number 1242.</span >

Based on the stack trace provided I suspect that implementing the check suggested in the comment at emem.c:934 would catch the error earlier. It appears that a field_info-&gt;rep is getting a bad value (either through being incorrectly overwritten by something else or by being left uninitialized). This is getting freed and put into the label slab list, and then the next time a new label slab is needed the invalid address is dereferenced, leading to a crash.
^^^ warning: pure speculation ^^^

I'm not entirely sure why the bad rep pointer wouldn't cause an earlier crash when the field is displayed though, and I'm frustrated by my inability to reproduce.

When I implement this part of wmem I will give some thought as to how to provide better debug information and more reliable crashes in these situations. In the meantime I don't think I can take this any farther, sorry.

Marking as CONFIRMED since at least somebody is seeing it reliably.</pre>
    </div>

    <div id="c6" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c6">Comment 6</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-01-14 14:26:02 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8197#c5">comment #5</a>)
<span class="quote">&gt; Based on the stack trace provided I suspect that implementing the check
&gt; suggested in the comment at emem.c:934 would catch the error earlier. It
&gt; appears that a field_info-&gt;rep is getting a bad value (either through being
&gt; incorrectly overwritten by something else or by being left uninitialized).</span >

Note that valgrind ought to catch uninitialized accesses even if they work out nicely to NULL (and valgrind is giving me nothing) so it seems more likely that it's being incorrectly overwritten...</pre>
    </div>

    <div id="c7" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c7">Comment 7</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-01-14 14:32:34 UTC
        </span>

      </div>




<pre class="bz_comment_text">Took a wild guess in<a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=47084">r47084</a>. There was in theory a double-free if proto_item_set_text was called twice in a row on a hidden item. Might be related?</pre>
    </div>

    <div id="c8" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c8">Comment 8</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laurent Butti</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-01-15 07:53:45 UTC
        </span>

      </div>




<pre class="bz_comment_text">Triggered only with tshark -nVxr.

Build information
--
TShark 1.8.4 (SVN Rev Unknown from unknown)

Copyright 1998-2012 Gerald Combs &lt;<a href="/cdn-cgi/l/email-protection#afc8caddcec3cb898c999b94d8c6ddcadcc7ceddc481c0ddc8">gerald&#64;wireshark.org</a>&gt; and contributors.
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Compiled (64-bit) with GLib 2.32.3, with libpcap, with libz 1.2.3.4, without
POSIX capabilities, without SMI, without c-ares, without ADNS, with Lua 5.1,
without Python, with GnuTLS 2.12.14, with Gcrypt 1.5.0, with MIT Kerberos,
without GeoIP.

Running on Linux 3.2.0-30-generic, with locale en_US.UTF-8, with libpcap version
1.1.1, with libz 1.2.3.4.

Built using gcc 4.6.3.
--</pre>
    </div>

    <div id="c9" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c9">Comment 9</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jeff Morriss</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-01-15 19:37:10 UTC
        </span>

      </div>




<pre class="bz_comment_text">I get the crash in Fedora 17.  Valgrind complains thus:

~~~
==1239== Command: /home/morriss/Projects/wireshark/source2/.libs/lt-tshark -Vx -nr /tmp/fuzz-8197.pcap
==1239== 
==1239== Invalid read of size 1
==1239==    at 0x4104D5: print_hex_data_buffer (print.c:997)
==1239==    by 0x411E48: print_hex_data (print.c:915)
==1239==    by 0x4197B6: print_packet (tshark.c:3589)
==1239==    by 0x41AFAD: process_packet (tshark.c:3198)
==1239==    by 0x40DE9A: main (tshark.c:2978)
==1239==  Address 0x9216800 is 0 bytes inside a block of size 1 free'd
==1239==    at 0x4A07786: free (vg_replace_malloc.c:446)
==1239==    by 0x35ACC4D50E: g_free (in /usr/lib64/libglib-2.0.so.0.3200.4)
==1239==    by 0x613ECDB: emem_free_all (emem.c:1239)
==1239==    by 0x6141828: epan_dissect_run_with_taps (epan.c:218)
==1239==    by 0x41AEAC: process_packet (tshark.c:3181)
==1239==    by 0x40DE9A: main (tshark.c:2978)
==1239== 
==1239== Invalid read of size 8
==1239==    at 0x613F44D: sl_alloc (string3.h:52)
==1239==    by 0x610EF4F: proto_tree_set_representation_value (proto.c:3610)
==1239==    by 0x615FB9D: proto_tree_add_uint_format_value (proto.c:2994)
==1239==    by 0x614243F: expert_add_info_format (expert.c:192)
==1239==    by 0x62451F1: dissect_ber_set (packet-ber.c:2883)
==1239==    by 0x662EED1: dissect_pres (pres.cnf:321)
==1239==    by 0x6149067: call_dissector_through_handle (packet.c:458)
==1239==    by 0x614990C: call_dissector_work (packet.c:549)
==1239==    by 0x614B680: call_dissector_with_data (packet.c:2076)
==1239==    by 0x66DE71A: call_pres_dissector (packet-ses.c:350)
==1239==    by 0x66DF5D2: dissect_spdu (packet-ses.c:993)
==1239==    by 0x66DFE5D: dissect_ses (packet-ses.c:1219)
==1239==  Address 0x61746d2008faccf0 is not stack'd, malloc'd or (recently) free'd
==1239== 
==1239== 
==1239== Process terminating with default action of signal 11 (SIGSEGV)
==1239==  General Protection Fault
==1239==    at 0x613F44D: sl_alloc (string3.h:52)
==1239==    by 0x610EF4F: proto_tree_set_representation_value (proto.c:3610)
==1239==    by 0x615FB9D: proto_tree_add_uint_format_value (proto.c:2994)
==1239==    by 0x614243F: expert_add_info_format (expert.c:192)
==1239==    by 0x62451F1: dissect_ber_set (packet-ber.c:2883)
==1239==    by 0x662EED1: dissect_pres (pres.cnf:321)
==1239==    by 0x6149067: call_dissector_through_handle (packet.c:458)
==1239==    by 0x614990C: call_dissector_work (packet.c:549)
==1239==    by 0x614B680: call_dissector_with_data (packet.c:2076)
==1239==    by 0x66DE71A: call_pres_dissector (packet-ses.c:350)
==1239==    by 0x66DF5D2: dissect_spdu (packet-ses.c:993)
==1239==    by 0x66DFE5D: dissect_ses (packet-ses.c:1219)
~~~

The first (&quot;invalid read of size 1&quot;) is because tvb_new_octet_aligned() is returning an ep_alloc'd buffer which is then being added as a data source (add_new_data_source()).  I still need to go back and read about why ep_ allocations started disappearing after dissection is complete but before we're done displaying what we've dissected.  Anyway, this isn't causing the crash.


After adding debugability to the slab allocator in<a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=47710">r47710</a>, Valgrind now says this is the cause of the crash; I'm now out of time to actually investigate the problem:

~~~
==5296== Invalid read of size 8
==5296==    at 0x615EA7D: proto_item_append_text (proto.c:4097)
==5296==    by 0x6AB56BF: dissect_p1_MTAName (p1.cnf:691)
==5296==    by 0x62408FB: dissect_ber_choice (packet-ber.c:3398)
==5296==    by 0x6AB19AF: dissect_p1_ObjectName (p1.cnf:1203)
==5296==    by 0x6244ECE: dissect_ber_set (packet-ber.c:2850)
==5296==    by 0x6AB9421: dissect_MTSBindResult_PDU (p1.cnf:1290)
==5296==    by 0x69253A9: call_ros_oid_callback (packet-ros-template.c:196)
==5296==    by 0x62408FB: dissect_ber_choice (packet-ber.c:3398)
==5296==    by 0x6925BBF: dissect_ros_ROS (ros.cnf:196)
==5296==    by 0x6925CA7: dissect_ros (packet-ros-template.c:429)
==5296==    by 0x6149097: call_dissector_through_handle (packet.c:458)
==5296==    by 0x614993C: call_dissector_work (packet.c:549)
==5296==    by 0x614A46E: dissector_try_string (packet.c:1228)
==5296==    by 0x6247781: call_ber_oid_callback (packet-ber.c:991)
==5296==    by 0x62408FB: dissect_ber_choice (packet-ber.c:3398)
==5296==    by 0x68305EF: dissect_acse_T_encoding (acse.cnf:126)
==5296==    by 0x6246391: dissect_ber_sequence (packet-ber.c:2221)
==5296==    by 0x6830AEF: dissect_acse_EXTERNALt_U (acse.cnf:144)
==5296==    by 0x623FA97: dissect_ber_tagged_type (packet-ber.c:585)
==5296==    by 0x683072D: dissect_acse_EXTERNALt (acse.cnf:154)
==5296==    by 0x624372E: dissect_ber_sq_of (packet-ber.c:4186)
==5296==    by 0x6243E4D: dissect_ber_sequence_of (packet-ber.c:4445)
==5296==    by 0x6830B2F: dissect_acse_Association_data (acse.cnf:286)
==5296==    by 0x6246391: dissect_ber_sequence (packet-ber.c:2221)
==5296==    by 0x68309EF: dissect_acse_AARE_apdu_U (acse.cnf:249)
==5296==    by 0x623FADA: dissect_ber_tagged_type (packet-ber.c:560)
==5296==    by 0x6831555: dissect_acse_AARE_apdu (acse.cnf:101)
==5296==    by 0x62408FB: dissect_ber_choice (packet-ber.c:3398)
==5296==    by 0x6831B90: dissect_acse (acse.cnf:130)
==5296==    by 0x6149097: call_dissector_through_handle (packet.c:458)
==5296==    by 0x614993C: call_dissector_work (packet.c:549)
==5296==    by 0x614A46E: dissector_try_string (packet.c:1228)
==5296==    by 0x6247781: call_ber_oid_callback (packet-ber.c:991)
==5296==    by 0x662F203: dissect_pres_T_single_ASN1_type (pres.cnf:44)
==5296==    by 0x62408FB: dissect_ber_choice (packet-ber.c:3398)
==5296==    by 0x662E23F: dissect_pres_T_presentation_data_values (pres.cnf:101)
==5296==    by 0x6246391: dissect_ber_sequence (packet-ber.c:2221)
==5296==    by 0x662DEFF: dissect_pres_PDV_list (pres.cnf:118)
==5296==    by 0x624372E: dissect_ber_sq_of (packet-ber.c:4186)
==5296==    by 0x6243E4D: dissect_ber_sequence_of (packet-ber.c:4445)
==5296==  Address 0x155a6ae0 is 80 bytes inside a block of size 96 free'd
==5296==    at 0x4A07786: free (vg_replace_malloc.c:446)
==5296==    by 0x35ACC4D50E: g_free (in /usr/lib64/libglib-2.0.so.0.3200.4)
==5296==    by 0x35ACC61E5E: g_slice_free1 (in /usr/lib64/libglib-2.0.so.0.3200.4)
==5296==    by 0x61565E1: proto_tree_free_node (proto.c:593)
==5296==    by 0x6156581: proto_tree_children_foreach (proto.c:532)
==5296==    by 0x61565AA: proto_tree_free_node (proto.c:590)
==5296==    by 0x6156581: proto_tree_children_foreach (proto.c:532)
==5296==    by 0x61565AA: proto_tree_free_node (proto.c:590)
==5296==    by 0x6156581: proto_tree_children_foreach (proto.c:532)
==5296==    by 0x61565AA: proto_tree_free_node (proto.c:590)
==5296==    by 0x6156581: proto_tree_children_foreach (proto.c:532)
==5296==    by 0x61565AA: proto_tree_free_node (proto.c:590)
==5296==    by 0x6156581: proto_tree_children_foreach (proto.c:532)
==5296==    by 0x615661A: proto_tree_free (proto.c:605)
==5296==    by 0x61418B3: epan_dissect_cleanup (epan.c:236)
==5296==    by 0x41AF08: process_packet (tshark.c:3236)
==5296==    by 0x40DE9A: main (tshark.c:2978)
~~~</pre>
    </div>

    <div id="c10" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c10">Comment 10</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-01-16 06:15:40 UTC
        </span>

      </div>




<pre class="bz_comment_text">With your slab changes I can actually reproduce this now (at least the valgrind errors). Partially fixed in<a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=47114">r47114</a>. Removes 44 of the 50 errors Valgrind was printing for me.</pre>
    </div>

    <div id="c11" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c11">Comment 11</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Pascal Quantin</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-01-17 14:38:03 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8197#c10">comment #10</a>)
<span class="quote">&gt; With your slab changes I can actually reproduce this now (at least the
&gt; valgrind errors). Partially fixed in<a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=47114">r47114</a>. Removes 44 of the 50 errors
&gt; Valgrind was printing for me.</span >

This fixes the crash I was experiencing, both with trunk and trunk-1.8.</pre>
    </div>

    <div id="c12" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c12">Comment 12</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-01-19 14:19:18 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8197#c11">comment #11</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=8197#c10">comment #10</a>)
&gt; &gt; With your slab changes I can actually reproduce this now (at least the
&gt; &gt; valgrind errors). Partially fixed in<a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=47114">r47114</a>. Removes 44 of the 50 errors
&gt; &gt; Valgrind was printing for me.
&gt; 
&gt; This fixes the crash I was experiencing, both with trunk and trunk-1.8.</span >

Scheduled for backporting. Leaving the bug open since Valgrind is still complaining.</pre>
    </div>

    <div id="c13" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c13">Comment 13</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-05-16 16:44:34 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8197#c9">comment #9</a>)
<span class="quote">&gt; I get the crash in Fedora 17.  Valgrind complains thus:
&gt; 
&gt; ~~~
&gt; ==1239== Command: /home/morriss/Projects/wireshark/source2/.libs/lt-tshark
&gt; -Vx -nr /tmp/fuzz-8197.pcap
&gt; ==1239== 
&gt; ==1239== Invalid read of size 1
&gt; ==1239==    at 0x4104D5: print_hex_data_buffer (print.c:997)
&gt; ==1239==    by 0x411E48: print_hex_data (print.c:915)
&gt; ==1239==    by 0x4197B6: print_packet (tshark.c:3589)
&gt; ==1239==    by 0x41AFAD: process_packet (tshark.c:3198)
&gt; ==1239==    by 0x40DE9A: main (tshark.c:2978)
&gt; ==1239==  Address 0x9216800 is 0 bytes inside a block of size 1 free'd
&gt; ==1239==    at 0x4A07786: free (vg_replace_malloc.c:446)
&gt; ==1239==    by 0x35ACC4D50E: g_free (in /usr/lib64/libglib-2.0.so.0.3200.4)
&gt; ==1239==    by 0x613ECDB: emem_free_all (emem.c:1239)
&gt; ==1239==    by 0x6141828: epan_dissect_run_with_taps (epan.c:218)
&gt; ==1239==    by 0x41AEAC: process_packet (tshark.c:3181)
&gt; ==1239==    by 0x40DE9A: main (tshark.c:2978)</span >

<span class="quote">&gt; 
&gt; The first (&quot;invalid read of size 1&quot;) is because tvb_new_octet_aligned() is
&gt; returning an ep_alloc'd buffer which is then being added as a data source
&gt; (add_new_data_source()).  I still need to go back and read about why ep_
&gt; allocations started disappearing after dissection is complete but before
&gt; we're done displaying what we've dissected.  Anyway, this isn't causing the
&gt; crash.</span >

The correct fix for this particular issue (although it is basically a non-issue in practice due to some emem/wmem internals) is to have tvb_new_octet_aligned use the pinfo-scoped pool (pinfo-&gt;pool) instead of ephemeral or packet-scoped memory. Unfortunately, this will require passing pinfo pointers into all sorts of functions that don't already have them (in the PER dissector at least) so isn't a simple change.</pre>
    </div>

    <div id="c14" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c14">Comment 14</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-05-16 16:45:42 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8197#c13">comment #13</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=8197#c9">comment #9</a>)
&gt; &gt; I get the crash in Fedora 17.  Valgrind complains thus:
&gt; &gt; 
&gt; &gt; ~~~
&gt; &gt; ==1239== Command: /home/morriss/Projects/wireshark/source2/.libs/lt-tshark
&gt; &gt; -Vx -nr /tmp/fuzz-8197.pcap
&gt; &gt; ==1239== 
&gt; &gt; ==1239== Invalid read of size 1
&gt; &gt; ==1239==    at 0x4104D5: print_hex_data_buffer (print.c:997)
&gt; &gt; ==1239==    by 0x411E48: print_hex_data (print.c:915)
&gt; &gt; ==1239==    by 0x4197B6: print_packet (tshark.c:3589)
&gt; &gt; ==1239==    by 0x41AFAD: process_packet (tshark.c:3198)
&gt; &gt; ==1239==    by 0x40DE9A: main (tshark.c:2978)
&gt; &gt; ==1239==  Address 0x9216800 is 0 bytes inside a block of size 1 free'd
&gt; &gt; ==1239==    at 0x4A07786: free (vg_replace_malloc.c:446)
&gt; &gt; ==1239==    by 0x35ACC4D50E: g_free (in /usr/lib64/libglib-2.0.so.0.3200.4)
&gt; &gt; ==1239==    by 0x613ECDB: emem_free_all (emem.c:1239)
&gt; &gt; ==1239==    by 0x6141828: epan_dissect_run_with_taps (epan.c:218)
&gt; &gt; ==1239==    by 0x41AEAC: process_packet (tshark.c:3181)
&gt; &gt; ==1239==    by 0x40DE9A: main (tshark.c:2978)
&gt; 
&gt; &gt; 
&gt; &gt; The first (&quot;invalid read of size 1&quot;) is because tvb_new_octet_aligned() is
&gt; &gt; returning an ep_alloc'd buffer which is then being added as a data source
&gt; &gt; (add_new_data_source()).  I still need to go back and read about why ep_
&gt; &gt; allocations started disappearing after dissection is complete but before
&gt; &gt; we're done displaying what we've dissected.  Anyway, this isn't causing the
&gt; &gt; crash.
&gt; 
&gt; The correct fix for this particular issue (although it is basically a
&gt; non-issue in practice due to some emem/wmem internals) is to have
&gt; tvb_new_octet_aligned use the pinfo-scoped pool (pinfo-&gt;pool) instead of
&gt; ephemeral or packet-scoped memory. Unfortunately, this will require passing
&gt; pinfo pointers into all sorts of functions that don't already have them (in
&gt; the PER dissector at least) so isn't a simple change.</span >

More precisely, tvb_new_octet_aligned should take a wmem allocator as a parameter and use that to allocate the buffer. The PER dissector (and presumably others using this pattern) should be passing in the pinfo pool to that parameter.</pre>
    </div>

    <div id="c15" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c15">Comment 15</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jakub Zawadzki</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-05-16 22:03:58 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8197#c13">comment #13</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=8197#c9">comment #9</a>)
&gt; &gt; I get the crash in Fedora 17.  Valgrind complains thus:
&gt; &gt; 
&gt; &gt; ~~~
&gt; &gt; ==1239== Command: /home/morriss/Projects/wireshark/source2/.libs/lt-tshark
&gt; &gt; -Vx -nr /tmp/fuzz-8197.pcap
&gt; &gt; ==1239== 
&gt; &gt; ==1239== Invalid read of size 1
&gt; &gt; ==1239==    at 0x4104D5: print_hex_data_buffer (print.c:997)
&gt; &gt; ==1239==    by 0x411E48: print_hex_data (print.c:915)
&gt; &gt; ==1239==    by 0x4197B6: print_packet (tshark.c:3589)
&gt; &gt; ==1239==    by 0x41AFAD: process_packet (tshark.c:3198)
&gt; &gt; ==1239==    by 0x40DE9A: main (tshark.c:2978)
&gt; &gt; ==1239==  Address 0x9216800 is 0 bytes inside a block of size 1 free'd
&gt; &gt; ==1239==    at 0x4A07786: free (vg_replace_malloc.c:446)
&gt; &gt; ==1239==    by 0x35ACC4D50E: g_free (in /usr/lib64/libglib-2.0.so.0.3200.4)
&gt; &gt; ==1239==    by 0x613ECDB: emem_free_all (emem.c:1239)
&gt; &gt; ==1239==    by 0x6141828: epan_dissect_run_with_taps (epan.c:218)
&gt; &gt; ==1239==    by 0x41AEAC: process_packet (tshark.c:3181)
&gt; &gt; ==1239==    by 0x40DE9A: main (tshark.c:2978)
&gt; 
&gt; &gt; 
&gt; &gt; The first (&quot;invalid read of size 1&quot;) is because tvb_new_octet_aligned() is
&gt; &gt; returning an ep_alloc'd buffer which is then being added as a data source
&gt; &gt; (add_new_data_source()).  I still need to go back and read about why ep_
&gt; &gt; allocations started disappearing after dissection is complete but before
&gt; &gt; we're done displaying what we've dissected.  Anyway, this isn't causing the
&gt; &gt; crash.
&gt; 
&gt; The correct fix for this particular issue (although it is basically a
&gt; non-issue in practice due to some emem/wmem internals) is to have
&gt; tvb_new_octet_aligned use the pinfo-scoped pool (pinfo-&gt;pool) instead of
&gt; ephemeral or packet-scoped memory. Unfortunately, this will require passing
&gt; pinfo pointers into all sorts of functions that don't already have them (in
&gt; the PER dissector at least) so isn't a simple change.</span >

Why it just won't allocate memory using glib's g_malloc0(), and later use 
tvb_set_free_cb(sub_tvb, g_free); ?

It's how tvb_uncompress() or base64_to_tvb() works....</pre>
    </div>

    <div id="c16" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c16">Comment 16</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jeff Morriss</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-05-17 07:46:04 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8197#c15">comment #15</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=8197#c13">comment #13</a>)
&gt; &gt; (In reply to <a href="show_bug.cgi?id=8197#c9">comment #9</a>)
&gt; &gt; &gt; I get the crash in Fedora 17.  Valgrind complains thus:
&gt; &gt; &gt; 
&gt; &gt; &gt; ~~~
&gt; &gt; &gt; ==1239== Command: /home/morriss/Projects/wireshark/source2/.libs/lt-tshark
&gt; &gt; &gt; -Vx -nr /tmp/fuzz-8197.pcap
&gt; &gt; &gt; ==1239== 
&gt; &gt; &gt; ==1239== Invalid read of size 1
&gt; &gt; &gt; ==1239==    at 0x4104D5: print_hex_data_buffer (print.c:997)
&gt; &gt; &gt; ==1239==    by 0x411E48: print_hex_data (print.c:915)
&gt; &gt; &gt; ==1239==    by 0x4197B6: print_packet (tshark.c:3589)
&gt; &gt; &gt; ==1239==    by 0x41AFAD: process_packet (tshark.c:3198)
&gt; &gt; &gt; ==1239==    by 0x40DE9A: main (tshark.c:2978)
&gt; &gt; &gt; ==1239==  Address 0x9216800 is 0 bytes inside a block of size 1 free'd
&gt; &gt; &gt; ==1239==    at 0x4A07786: free (vg_replace_malloc.c:446)
&gt; &gt; &gt; ==1239==    by 0x35ACC4D50E: g_free (in /usr/lib64/libglib-2.0.so.0.3200.4)
&gt; &gt; &gt; ==1239==    by 0x613ECDB: emem_free_all (emem.c:1239)
&gt; &gt; &gt; ==1239==    by 0x6141828: epan_dissect_run_with_taps (epan.c:218)
&gt; &gt; &gt; ==1239==    by 0x41AEAC: process_packet (tshark.c:3181)
&gt; &gt; &gt; ==1239==    by 0x40DE9A: main (tshark.c:2978)
&gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; The first (&quot;invalid read of size 1&quot;) is because tvb_new_octet_aligned() is
&gt; &gt; &gt; returning an ep_alloc'd buffer which is then being added as a data source
&gt; &gt; &gt; (add_new_data_source()).  I still need to go back and read about why ep_
&gt; &gt; &gt; allocations started disappearing after dissection is complete but before
&gt; &gt; &gt; we're done displaying what we've dissected.  Anyway, this isn't causing the
&gt; &gt; &gt; crash.
&gt; &gt; 
&gt; &gt; The correct fix for this particular issue (although it is basically a
&gt; &gt; non-issue in practice due to some emem/wmem internals) is to have
&gt; &gt; tvb_new_octet_aligned use the pinfo-scoped pool (pinfo-&gt;pool) instead of
&gt; &gt; ephemeral or packet-scoped memory. Unfortunately, this will require passing
&gt; &gt; pinfo pointers into all sorts of functions that don't already have them (in
&gt; &gt; the PER dissector at least) so isn't a simple change.
&gt; 
&gt; Why it just won't allocate memory using glib's g_malloc0(), and later use 
&gt; tvb_set_free_cb(sub_tvb, g_free); ?
&gt; 
&gt; It's how tvb_uncompress() or base64_to_tvb() works....</span >

Right.  Of course.  &lt;sigh&gt;

Fixed like that in<a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=49379">r49379</a> and scheduled for 1.8.7 and 1.10.0rc2.  Thanks for reminding me/us...

Unfortunately this capture file now shows another error under Valgrind; I think I'll open a separate bug for that.</pre>
    </div>

    <div id="c17" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8197#c17">Comment 17</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jeff Morriss</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-05-17 09:26:18 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8197#c16">comment #16</a>)
<span class="quote">&gt; Unfortunately this capture file now shows another error under Valgrind; I
&gt; think I'll open a separate bug for that.</span >

That new bug is <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED FIXED - Invalid memory read in P1 dissector"
   href="show_bug.cgi?id=8693">bug 8693</a>.</pre>
    </div>


  

</td>
<td>
</td>
</tr></table>
  </div>
        

</form>

<hr>
<ul class="related_actions">
    <li><a href="show_bug.cgi?format=multiple&amp;id=8197">Format For Printing</a></li>
    <li>&nbsp;-&nbsp;<a href="show_bug.cgi?ctype=xml&amp;id=8197">XML</a></li>
    <li>&nbsp;-&nbsp;<a href="enter_bug.cgi?cloned_bug_id=8197">Clone This Bug</a></li>
    
    <li>&nbsp;-&nbsp;<a href="#">Top of page </a></li>
    </ul>

<br>
</div>

    <div id="footer">
      <div class="intro"></div>
<ul id="useful-links">
  <li id="links-actions"><ul class="links">
  <li><a href="https://www.wireshark.org/">Wireshark Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_bottom" name="no_redirect" value="0">
    <script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_bottom" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_bottom"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/5.0/using/understanding.html" target="_blank">Help</a>
      </li>
    

    <li id="mini_login_container_bottom">
  <span class="separator">| </span>
  <a id="login_link_bottom" href="show_bug.cgi?id=8197&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_bottom')">Log In</a>

  <form action="show_bug.cgi?id=8197" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_bottom">
    <input id="Bugzilla_login_bottom" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_bottom" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_bottom">
    <a href="#" onclick="return hide_mini_login_form('_bottom')">[x]</a>
  </form>
</li>


  <li id="forgot_container_bottom">
    <span class="separator">| </span>
    <a id="forgot_link_bottom" href="show_bug.cgi?id=8197&amp;GoAheadAndLogIn=1#forgot"
       onclick="return show_forgot_form('_bottom')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_bottom"
          class="mini_forgot bz_default_hidden">
      <label for="login_bottom">Login:</label>
      <input name="loginname" size="20" id="login_bottom" required
          type="email" placeholder="Your Email Address">
      <input id="forgot_button_bottom" value="Reset Password" type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_bottom" name="token"
             value="1635621859-M5riPenbvXywSimYDRwbf7wNFKmigG2gyldy3L4QKoM">
      <a href="#" onclick="return hide_forgot_form('_bottom')">[x]</a>
    </form>
  </li>
</ul>
  </li>

  




  
</ul>

      <div class="outro"></div>
    </div>

  </body>
</html>