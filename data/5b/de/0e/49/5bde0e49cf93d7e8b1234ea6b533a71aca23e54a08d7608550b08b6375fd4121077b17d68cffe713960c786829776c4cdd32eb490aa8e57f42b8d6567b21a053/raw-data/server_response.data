<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
<head>
<title>Bug 746422 – [CVE-2018-1000135] Unencrypted DNS queries leaked outside full-tunnel VPN</title>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
<link href="https://bugzilla.gnome.org/" rel="Top"/>
<link href="showdependencytree.cgi?id=746422&amp;hide_resolved=1" rel="Show" title="Dependency Tree"/>
<link href="show_bug.cgi?format=multiple&amp;id=746422" rel="Show" title="Printer-Friendly Version"/>
<link href="skins/standard/global.css" rel="alternate stylesheet" title="Classic"/><link href="js/yui/assets/skins/sam/autocomplete.css" rel="stylesheet" type="text/css"/><link href="js/yui/assets/skins/sam/calendar.css" rel="stylesheet" type="text/css"/><link href="skins/standard/global.css" rel="stylesheet" type="text/css"/><link href="skins/standard/show_bug.css" rel="stylesheet" type="text/css"/><!--[if lte IE 7]>
      


  <link href="skins/standard/IE-fixes.css" rel="stylesheet"
        type="text/css" >
<![endif]-->
<link href="skins/contrib/Gnome/global.css" rel="stylesheet" title="Gnome" type="text/css"/>
<script src="js/yui/yahoo-dom-event/yahoo-dom-event.js" type="text/javascript"></script><script src="js/yui/cookie/cookie-min.js" type="text/javascript"></script><script src="js/yui/datasource/datasource-min.js" type="text/javascript"></script><script src="js/yui/connection/connection-min.js" type="text/javascript"></script><script src="js/yui/json/json-min.js" type="text/javascript"></script><script src="js/yui/autocomplete/autocomplete-min.js" type="text/javascript"></script><script src="js/yui/calendar/calendar-min.js" type="text/javascript"></script><script src="js/global.js" type="text/javascript"></script>
<script type="text/javascript">
    <!--
        YAHOO.namespace('bugzilla');
        YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
               if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
               var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
               return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
         };
        if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
            YAHOO.util.Event._simpleRemove(window, "unload", 
                                           YAHOO.util.Event._unload);
        }
        
        function unhide_language_selector() { 
            YAHOO.util.Dom.removeClass(
                'lang_links_container', 'bz_default_hidden'
            ); 
        } 
        YAHOO.util.Event.onDOMReady(unhide_language_selector);

        
        var BUGZILLA = {
            param: {
                cookiepath: '\/',
                maxusermatches: 50
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    'You must enter a Description for this attachment.',
                component_required:
                    'You must select a Component for this bug.',
                description_required:
                    'You must enter a Description for this bug.',
                short_desc_required:
                    'You must enter a Summary for this bug.',
                version_required:
                    'You must select a Version for this bug.'
            }
        };

    if (history && history.replaceState) {
      if(!document.location.href.match(/show_bug\.cgi/)) {
        history.replaceState( null, 
                             "Bug 746422 – [CVE-2018-1000135] Unencrypted DNS queries leaked outside full-tunnel VPN",  
                             "show_bug.cgi?id=746422" );
        document.title = "Bug 746422 – [CVE-2018-1000135] Unencrypted DNS queries leaked outside full-tunnel VPN";
      }
      if (document.location.href.match(/show_bug\.cgi\?.*list_id=/)) {
        var href = document.location.href;
        href = href.replace(/[\?&]+list_id=(\d+|cookie)/, '');
        history.replaceState(null, "Bug 746422 – [CVE-2018-1000135] Unencrypted DNS queries leaked outside full-tunnel VPN", href);
      }
    }
    YAHOO.util.Event.onDOMReady(function() {
      initDirtyFieldTracking();
    });
    // -->
    </script>
<script src="js/util.js" type="text/javascript"></script><script src="js/field.js" type="text/javascript"></script>
<link href="./search_plugin.cgi" rel="search" title="GNOME Bugzilla" type="application/opensearchdescription+xml"/>
<link href="images/favicon.ico" rel="shortcut icon"/><link href="extensions/TraceParser/web/style.css" rel="stylesheet" type="text/css"/>
</head>
<body class="bugzilla-gnome-org bz_bug bz_status_RESOLVED bz_product_NetworkManager bz_component_IP_and_DNS_config bz_bug_746422 yui-skin-sam" onload="">
<div id="header">
<div id="banner">
</div>
<table border="0" cellpadding="0" cellspacing="0" id="titles">
<tr>
<td id="title">
<p>GNOME Bugzilla – Bug 746422</p>
</td>
<td id="subtitle">
<p class="subheader">[CVE-2018-1000135] Unencrypted DNS queries leaked outside full-tunnel VPN</p>
</td>
<td id="information">
<p class="header_addl_info">Last modified: 2020-11-12 14:31:19 UTC</p>
</td>
</tr>
</table>
<table cellpadding="0" cellspacing="0" class="bz_default_hidden" id="lang_links_container"><tr><td>
</td></tr></table>
<ul class="links"><li><a href="./">Home</a></li></ul>
</div>
<div id="bugzilla-body">
<div style="margin-bottom: 50px; margin-top: 50px; padding: 40px; text-align: center; background-color: rgb(74,134,207); border: rgb(57,104,161); color: rgb(255,255,255); line-height: 300%;">After an <a href="https://wiki.gnome.org/Initiatives/DevelopmentInfrastructure" style="color: rgb(255,255,255);">evaluation</a>, GNOME has moved from Bugzilla to <a href="https://gitlab.gnome.org/" style="color: rgb(255,255,255);">GitLab</a>. <a href="https://wiki.gnome.org/GitLab" style="color: rgb(255,255,255);">Learn more about GitLab</a>. <br/><span style="background-color: #EE0000; font-size: xx-large;"><b>No new issues can be reported in GNOME Bugzilla anymore.</b></span>
<br/><span style="background-color: #EE0000; font-size: xx-large;"><b>To report an issue in a GNOME project, <a href="https://gitlab.gnome.org/GNOME" style="color: rgb(255,255,255);">go to GNOME GitLab</a></b>.</span><br/>Do <b>not</b> go to GNOME Gitlab for: <a href="https://sourceforge.net/p/bluefish/tickets" style="color: rgb(255,255,255);">Bluefish</a>, <a href="https://github.com/doxygen/doxygen/issues" style="color: rgb(255,255,255);">Doxygen</a>, <a href="https://bugs.gnucash.org/" style="color: rgb(255,255,255);">GnuCash</a>, <a href="https://gitlab.freedesktop.org/gstreamer/" style="color: rgb(255,255,255);">GStreamer</a>, <a href="https://github.com/afcowie/java-gnome/issues" style="color: rgb(255,255,255);">java-gnome</a>, <a href="https://github.com/ldtp/ldtp2/issues" style="color: rgb(255,255,255);">LDTP</a>, <a href="https://gitlab.freedesktop.org/NetworkManager/NetworkManager/issues" style="color: rgb(255,255,255);">NetworkManager</a>, <a href="https://github.com/tomboy-notes/tomboy/issues" style="color: rgb(255,255,255);">Tomboy</a>.</div>
<script type="text/javascript">
<!--

//-->
</script>
<form action="process_bug.cgi" id="changeform" method="post" name="changeform">
<input name="delta_ts" type="hidden" value="2020-11-12 14:31:19"/>
<input name="longdesclength" type="hidden" value="74"/>
<input name="id" type="hidden" value="746422"/>
<input name="token" type="hidden" value="1626107432-I2X6mx3ESslWg5z-cdfJ6F2UoQoCaX8hHA4WTTk3HJA"/>
<div class="bz_alias_short_desc_container edit_form">
<a href="show_bug.cgi?id=746422"><b>Bug 746422</b></a> -<span class="bz_default_hidden" id="summary_alias_container"> 
        (<span id="alias_nonedit_display">CVE-2018-1000135</span>) 
      <span id="short_desc_nonedit_display">[CVE-2018-1000135] Unencrypted DNS queries leaked outside full-tunnel VPN</span>
</span>
<div id="summary_alias_input">
<table id="summary">
<tr>
<td colspan="2">(CVE-2018-1000135)
          </td>
</tr>
<tr><th class="field_label" id="field_label_short_desc">
<label accesskey="s" for="short_desc">
<a class="field_help_link" href="page.cgi?id=fields.html#short_desc" title="The bug summary is a short sentence which succinctly describes what the bug is about.">Summary:</a>
</label>
</th>
<td>[CVE-2018-1000135] Unencrypted DNS queries leaked outside full-tunnel VPN
          </td>
</tr>
</table>
</div>
</div>
<script type="text/javascript">
    hideAliasAndSummary('[CVE-2018-1000135] Unencrypted DNS queries leaked outside full-tunnel VPN', 'CVE-2018-1000135');
  </script>
<table class="edit_form">
<tr>
<td class="bz_show_bug_column" id="bz_show_bug_column_1">
<table>
<tr>
<th class="field_label">
<a href="page.cgi?id=fields.html#bug_status">Status</a>:
    </th>
<td id="bz_field_status">
<span id="static_bug_status">RESOLVED
          OBSOLETE
      </span>
</td>
</tr>
<tr>
<td class="bz_section_spacer" colspan="2"></td>
</tr>
<tr><th class="field_label" id="field_label_product">
<a class="field_help_link" href="describecomponents.cgi" title="Bugs are categorised into Products and Components. Select a Classification to narrow down this list.">Product:</a>
</th>
<td class="field_value" id="field_container_product">NetworkManager</td>
</tr>
<tr class="bz_default_hidden"><th class="field_label" id="field_label_classification">
<a class="field_help_link" href="page.cgi?id=fields.html#classification" title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation.">Classification:</a>
</th>
<td class="field_value" id="field_container_classification">Platform</td>
</tr>
<tr><th class="field_label" id="field_label_component">
<a class="field_help_link" href="describecomponents.cgi?product=NetworkManager" title="Components are second-level categories; each belongs to a particular Product. Select a Product to narrow down this list.">Component:</a>
</th>
<td class="field_value" id="field_container_component">IP and DNS config</td>
</tr>
<tr><th class="field_label" id="field_label_version">
<label for="version">
<a class="field_help_link" href="page.cgi?id=fields.html#version" title="The version field defines the version of the software the bug was found in.">Version:</a>
</label>
</th>
<td>unspecified
  </td>
</tr>
<tr><th class="field_label" id="field_label_rep_platform">
<label accesskey="h" for="rep_platform">
<a class="field_help_link" href="page.cgi?id=fields.html#rep_platform" title='The hardware platform the bug was observed on. Note: When searching, selecting the option "All" only finds bugs whose value for this field is literally the word "All".'>Hardware:</a>
</label>
</th>
<td class="field_value">Other
       Linux
      </td>
</tr>
<tr>
<td class="bz_section_spacer" colspan="2"></td>
</tr>
<tr>
<th class="field_label">
<label accesskey="i" for="priority">
<a href="page.cgi?id=fields.html#importance"><u>I</u>mportance</a></label>:
      </th>
<td>Normal
       normal
      </td>
</tr>
<tr>
<th class="field_label">
<label for="target_milestone">
<a href="page.cgi?id=fields.html#target_milestone">
            Target Milestone</a></label>:
        </th><td>---
  </td>
</tr>
<tr>
<th class="field_label">
<a href="page.cgi?id=fields.html#assigned_to">Assigned To</a>:
      </th>
<td><span class="vcard"><span class="fn">NetworkManager maintainer(s)</span>
</span>
</td>
</tr>
<tr><th class="field_label" id="field_label_qa_contact">
<label accesskey="q" for="qa_contact">
<a class="field_help_link" href="page.cgi?id=fields.html#qa_contact" title="The person responsible for confirming this bug if it is unconfirmed, and for verifying the fix once the bug has been resolved.">QA Contact:</a>
</label>
</th>
<td><span class="vcard"><span class="fn">NetworkManager maintainer(s)</span>
</span>
</td>
</tr>
<script type="text/javascript">
      assignToDefaultOnChange(['product', 'component'],
        'networkmanager-maint\x40gnome.bugs',
        'networkmanager-maint\x40gnome.bugs');
    </script>
<tr>
<td class="bz_section_spacer" colspan="2"></td>
</tr>
<tr><th class="field_label" id="field_label_bug_file_loc">
<label accesskey="u" for="bug_file_loc">
<a class="field_help_link" href="page.cgi?id=fields.html#bug_file_loc" title="Bugs can have a URL associated with them - for example, a pointer to a web site where the problem is seen.">URL:</a>
</label>
</th>
<td>
<span id="bz_url_input_area">
</span>
</td>
</tr>
<tr><th class="field_label" id="field_label_status_whiteboard">
<label accesskey="w" for="status_whiteboard">
<a class="field_help_link" href="page.cgi?id=fields.html#status_whiteboard" title="Each bug has a free-form single line text entry box for adding tags and status information.">Whiteboard:</a>
</label>
</th><td colspan="2">
</td>
</tr>

<tr>
<td class="bz_section_spacer" colspan="2"></td>
</tr>
<tr>
<th class="field_label">
<label for="duplicates">Duplicates</label>:
    </th>
<td class="field_value" colspan="2">
<span id="duplicates"><a class="bz_bug_link bz_status_RESOLVED bz_closed" href="show_bug.cgi?id=780913" title="RESOLVED DUPLICATE - full-tunnel VPN DNS breakage">780913</a>
</span>
      (<a href="buglist.cgi?bug_id=780913">view as bug list</a>)
    </td>
</tr>
<tr><th class="field_label" id="field_label_dependson">
<a class="field_help_link" href="page.cgi?id=fields.html#dependson" title="The bugs listed here must be resolved before this bug can be resolved.">Depends on:</a>
</th>
<td>
<span id="dependson_input_area">
</span>
</td>
</tr>
<tr><th class="field_label" id="field_label_blocked">
<a class="field_help_link" href="page.cgi?id=fields.html#blocked" title="This bug must be resolved before the bugs listed in this field can be resolved.">Blocks:</a>
</th>
<td>
<span id="blocked_input_area">
</span>
<a class="bz_bug_link bz_status_RESOLVED bz_closed" href="show_bug.cgi?id=728406" title="RESOLVED OBSOLETE - tracker bug for all bug reviews">nm-review</a>
</td>
</tr>
<tr>
<th> </th>

</tr>
</table>
</td>
<td>
<div class="bz_column_spacer"> </div>
</td>
<td class="bz_show_bug_column" id="bz_show_bug_column_2">
<table cellpadding="3" cellspacing="1">
<tr>
<th class="field_label">
      Reported:
    </th>
<td>2015-03-18 22:30 UTC by <span class="vcard"><span class="fn">Dan Williams</span>
</span>
</td>
</tr>
<tr>
<th class="field_label">
      Modified:
    </th>
<td>2020-11-12 14:31 UTC 
    </td>
</tr>

<tr>
<td class="bz_section_spacer" colspan="2"></td>
</tr>
<tr><th class="field_label" id="field_label_see_also">
<a class="field_help_link" href="page.cgi?id=fields.html#see_also" title="This allows you to refer to bugs in other installations. You can enter a URL to a bug in the 'Add Bug URLs' field to note that that bug is related to this one. You can enter multiple URLs at once by separating them with a comma. You should normally use this field to refer to bugs in other installations. For bugs in this installation, it is better to use the Depends on and Blocks fields.">See Also:</a>
</th>
<td class="field_value" id="field_container_see_also"></td>
</tr>
<tr><th class="field_label" id="field_label_cf_gnome_target">
<a class="field_help_link" href="page.cgi?id=fields.html#cf_gnome_target" title="A custom Drop Down field in this installation of GNOME Bugzilla.">GNOME target:</a>
</th>
<td class="field_value" colspan="2" id="field_container_cf_gnome_target">---</td>
</tr>
<tr><th class="field_label" id="field_label_cf_gnome_version">
<a class="field_help_link" href="page.cgi?id=fields.html#cf_gnome_version" title="A custom Drop Down field in this installation of GNOME Bugzilla.">GNOME version:</a>
</th>
<td class="field_value" colspan="2" id="field_container_cf_gnome_version">---</td>
</tr>
<tr>
<td class="bz_section_spacer" colspan="2"></td>
</tr>
</table>
</td>
</tr>
<tr>
<td colspan="3">
<hr id="bz_top_half_spacer"/>
</td>
</tr>
</table>
<table cellpadding="0" cellspacing="0" id="bz_big_form_parts"><tr>
<td>
<script type="text/javascript">
<!--
function toggle_display(link) {
    var table = document.getElementById("attachment_table");
    var view_all = document.getElementById("view_all");
    var hide_obsolete_url_parameter = "&hide_obsolete=1";
    // Store current height for scrolling later
    var originalHeight = table.offsetHeight;
    var rows = YAHOO.util.Dom.getElementsByClassName(
        'bz_tr_obsolete', 'tr', table);

    for (var i = 0; i < rows.length; i++) {
        bz_toggleClass(rows[i], 'bz_default_hidden');
    }

    if (YAHOO.util.Dom.hasClass(rows[0], 'bz_default_hidden')) {
        link.innerHTML = "Show Obsolete";
        view_all.href = view_all.href + hide_obsolete_url_parameter 
    }
    else {
        link.innerHTML = "Hide Obsolete";
        view_all.href = view_all.href.replace(hide_obsolete_url_parameter,"");
    }

    var newHeight = table.offsetHeight;
    // This scrolling makes the window appear to not move at all.
    window.scrollBy(0, newHeight - originalHeight);

    return false;
}
//-->
</script>
<br/>

<br/>
</td>
<td>
</td>
</tr></table>
<div id="comments"><script src="js/comments.js" type="text/javascript">
</script>
<script type="text/javascript">
<!--
  /* Adds the reply text to the `comment' textarea */
  function replyToComment(id, real_id, name) {
      var prefix = "(In reply to " + name + " from comment #" + id + ")\n";
      var replytext = "";
        /* pre id="comment_name_N" */
        var text_elem = document.getElementById('comment_text_'+id);
        var text = getText(text_elem);
        replytext = prefix + wrapReplyText(text);


      /* <textarea id="comment"> */
      var textarea = document.getElementById('comment');
      if (textarea.value != replytext) {
          textarea.value += replytext;
      }

      textarea.focus();
  } 
//-->
</script>
<!-- This auto-sizes the comments and positions the collapse/expand links 
     to the right. -->
<table cellpadding="0" cellspacing="0" class="bz_comment_table"><tr>
<td>
<div class="bz_comment bz_first_comment" id="c0">
<div class="bz_first_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c0">Description</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Dan Williams</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2015-03-18 22:30:03 UTC
        </span>
</div>
<pre class="bz_comment_text">If the VPN routes all traffic (eg, its ipv4.never-default=false) that usually indicates that the VPN's nameservers should be used instead of the parent interface's nameservers, since the parent interface's nameservers would be accessed over the VPN anyway (since it's routing all traffic).

But with dns=dnsmasq, the dnsmasq plugin always does split DNS regardless of the never-default value of the VPN's IPv4 config:

	/* Use split DNS for VPN configs */
	for (iter = (GSList *) vpn_configs; iter; iter = g_slist_next (iter)) {
		if (NM_IS_IP4_CONFIG (iter-&gt;data))
			add_ip4_config (conf, NM_IP4_CONFIG (iter-&gt;data), TRUE);
		else if (NM_IS_IP6_CONFIG (iter-&gt;data))
			add_ip6_config (conf, NM_IP6_CONFIG (iter-&gt;data), TRUE);
	}

instead I think that each config should be added with split DNS only if ipv4.never-default=true for that config.  That would ensure that when the VPN was routing all traffic, split DNS was not used, but when the VPN was not routing all traffic, split DNS was used.

If the user really does want to use the parent interface's nameservers even though they will be contacted over the VPN, they can either add custom dnsmasq options to /etc/NetworkManager/dnsmasq.d or enter them manually for the connection.

ISTR that the behavior I'm suggesting was always intended, but apparently we changed that behavior a long time ago and possibly didn't realize it?</pre>
</div><div class="bz_comment" id="c1">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c1">Comment 1</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Pavel Simerda</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2015-03-19 11:15:43 UTC
        </span>
</div>
<pre class="bz_comment_text">In my opinion it is useful to use split DNS view in all cases and only use never-default setting to decide the global DNS.

Rationale: There is no such think as sending all traffic across VPN, only default route traffic, i.e. traffic for which there's no specific route over a specific interface. As specific routes (as found in the routing table) are still used even with default route over VPN, I believe that specific zones (as found in per-connection lists of domains) should be maintained as well.</pre>
</div><div class="bz_comment" id="c2">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c2">Comment 2</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">John 'Warthog9' Hawley</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2015-03-20 07:58:02 UTC
        </span>
</div>
<pre class="bz_comment_text">Pavel, I'll admit to not 100% following what you've suggested, so please excuse me if I've horribly miss-understood.  I disagree with the assertion that "There is no such think as sending all traffic across VPN".  The parent interface's adapter will have a local route mainly so you can get to the gateway, as well as a route for vpn endpoint you need to push traffic at however, there are some mitigating circumstances that forcing split-dns, so that the DNS on the VPN is ONLY serving the search spaces pushed, is actually exactly the opposite of what a user likely wants and/or causes some rather broken behavior.

- VPNs can, and often do, have IP space overlap issues.  So if the parent interface's network you are on happens to be in the 10.0.0.0/255.255.252.0 (gateway 10.0.0.1, DNS server 10.0.0.2 &amp; 10.0.0.3) ip range, and the VPN uses 10.0.1.0/255.255.255.0, you can end up in some very screwed up situation.  This is actually taken from a real world scenario (which is why I learned of the change to default to split DNS at all).  If you are routing all traffic over the VPN you now have lost access to the two parent interface's DNS servers, and with split DNS you now have *NO* DNS access at all.  As it currently stands the only way to fix this is to either manually edit /etc/resolv.conf or to restart NM without dnsmasq.

- DNS is not equal at all locations, which your assumption about split DNS I think assumes.  DNS zones mean that something that resolves externally one way, may resolve completely differently (and potentially).  example.com, to an external resolver may go to a coloed and public instance, while the same dns entry from an internal dns server may not.  Assuming the VPN only pushes a search of internal.example.com, but doesn't push a search for example.com (making the assumption that people will just type it), the internal site is now unreachable.  Keeping in mind I'm talking about VPNs, and those are typically used in more corporate environments where you are dealing with corporate IT departments.

- In a more casual environment, lets say a hotel, part of the reasons to use a VPN is because the user EXPLICITLY doesn't trust anything about the network they are on, up to and including the DNS servers.  The user, if they are routing everything, is pretty likely to trust the DNS servers on the far side of the VPN.  There's actually plenty of security concerns there, and I for one would have assumed that if I'm routing all my traffic over the VPN, my DNS traffic was as well (meaning I wouldn't have been relying on, or trusting, DNS servers I don't trust).

These are the three issues I'm most concerned about keeping split-dns as the default without choice.  There are situations where I want split-dns, it's great and it's a fantastic feature, but in the case of a vpn that's intending to route all traffic, I'd argue the expected case is that all traffic, including all DNS queries, go over the vpn and it is not split.</pre>
</div><div class="bz_comment" id="c3">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c3">Comment 3</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Alexander E. Patrakov</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2015-11-28 17:37:01 UTC
        </span>
</div>
<pre class="bz_comment_text">There is one more interesting use case currently unsupported by NetworkManager.

SafeDNS Inc. (a company that provides a filtered DNS server for parental control, with configurable filter settings) currently runs private beta testing of their VPN service, based on OpenVPN, with mobile phones and tablets being the primary target.

Their VPN is a split-tunnel setup, i.e. the pushed config explicitly routes their subnet (which contains their DNS server and various types of the "site is blocked" page) through the VPN, and nothing else. Their DNS server uses the fact that the queries come through the VPN in order to reliably identify the user and to apply his/her personal filtering settings.

For the filter to work, it is crucial that there are no other DNS servers used in the system. That's how OpenVPN Connect on both Android and iOS behaves, but, unfortunately, not how NetworkManager works.

So, in summary, they absolutely need all other DNS servers to be forgotten by the client, even though they don't want to route all traffic through their VPN servers.


For the record, here is what their ovpn file looks like:

client
remote vpn.safedns.com 1194 udp
nobind
dev tun
persist-tun
persist-key
verify-x509-name vpn.safedns.com name
remote-cert-tls server
cipher AES-128-CBC

&lt;ca&gt;
-----BEGIN CERTIFICATE-----
...snip...
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
...snip...
-----END CERTIFICATE-----
&lt;/ca&gt;
&lt;cert&gt;
...snip...
-----END CERTIFICATE-----
&lt;/cert&gt;
&lt;key&gt;
-----BEGIN PRIVATE KEY-----
...snip...
-----END PRIVATE KEY-----
&lt;/key&gt;

They push routes to 195.46.39.0/29 and 195.46.39.39, and push 195.46.39.39 as the DNS server.</pre>
</div><div class="bz_comment" id="c4">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c4">Comment 4</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Dan Williams</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2015-12-03 18:21:04 UTC
        </span>
</div>
<pre class="bz_comment_text">Thanks for the data point Alexander.  We probably need another option on the IP4 and IP6 settings for all connections indicating whether or not split DNS should be used if it is available for that connection.  There would be a default value that would preserve existing behavior.

For Pavel's case (with a VPN grabbing all default-route traffic, but where some routes/devices are not routed over the VPN) that property would indicate that split DNS should be used.

For the SafeDNS case (where grabs all default-route traffic, but no other DNS should be used) that property would indicate that no split DNS should be used, and the DNS manager would merge/ignore DNS based on connection priority (since we will very soon support multiple VPN connections).

If the property was left as default, then ipX.never-default would control whether split DNS was used or not.</pre>
</div><div class="bz_comment" id="c5">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c5">Comment 5</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2016-05-25 16:03:01 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Alexander E. Patrakov from <a href="show_bug.cgi?id=746422#c3">comment #3</a>)

<span class="quote">&gt; So, in summary, they absolutely need all other DNS servers to be forgotten
&gt; by the client, even though they don't want to route all traffic through
&gt; their VPN servers.</span>

For the record, this is now possible by <a class="bz_bug_link bz_status_RESOLVED bz_closed" href="show_bug.cgi?id=758772" title="RESOLVED FIXED - NetworkManager openVPN connection causes DNS leak">bug 758772</a>
<a href="https://cgit.freedesktop.org/NetworkManager/NetworkManager/commit/?id=8da3e658f7313f56928d22cfe13f9ab78cc1dd3c">https://cgit.freedesktop.org/NetworkManager/NetworkManager/commit/?id=8da3e658f7313f56928d22cfe13f9ab78cc1dd3c</a></pre>
</div><div class="bz_comment" id="c6">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c6">Comment 6</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2017-04-05 08:51:56 UTC
        </span>
</div>
<pre class="bz_comment_text">*** <a class="bz_bug_link bz_status_RESOLVED bz_closed" href="show_bug.cgi?id=780913" title="RESOLVED DUPLICATE - full-tunnel VPN DNS breakage">Bug 780913</a> has been marked as a duplicate of this bug. ***</pre>
</div><div class="bz_comment" id="c7">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c7">Comment 7</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2017-04-05 08:56:08 UTC
        </span>
</div>
<pre class="bz_comment_text">If a VPN connection is set to take all traffic then we should definitely be using its DNS servers for all lookups. We might not even be able to *reach* the DNS server advertised by the "local" network. We *might* if it's physically on the local subnet, but almost certainly not further afield.

Note also that if you *wanted* to do split DNS, you have no idea which domains to do split DNS *FOR*. You have a list of default search domains, but that is a DIFFERENT THING. A search domain of example.com means "if the user looks up foo and it doesn't exist, then also look for foo.example.com before failing". It doesn't mean any more than that. In particular, there can be domains which exist in a VPN (such as example.internal) which are *not* added to the search domains.

If you want to add an option for doing split-DNS, it can't be a boolean and abuse the search domains. It has to be an explicit list of the domains for which you want to use that DNS service. Unless we have a separate list of "domains which exist here" for each connection, which is *distinct* from the search domains?</pre>
</div><div class="bz_comment" id="c8">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c8">Comment 8</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2017-04-11 08:24:45 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to David Woodhouse from <a href="show_bug.cgi?id=746422#c7">comment #7</a>)
<span class="quote">&gt; Note also that if you *wanted* to do split DNS, you have no idea which
&gt; domains to do split DNS *FOR*. You have a list of default search domains,
&gt; but that is a DIFFERENT THING. A search domain of example.com means "if the
&gt; user looks up foo and it doesn't exist, then also look for foo.example.com
&gt; before failing". It doesn't mean any more than that.</span>

It also means that foo.example.com should be queried over the
interface that has it the search list. I don't think it makes any
sense that interface X specifies domain D in the search list but we
try to resolve it on interface Y.

<span class="quote">&gt; In particular, there
&gt; can be domains which exist in a VPN (such as example.internal) which are
&gt; *not* added to the search domains.</span>

Yes, basically the search list is only a subset of the domains for
which we want to do split DNS.

<span class="quote">&gt; If you want to add an option for doing split-DNS, it can't be a boolean and
&gt; abuse the search domains. It has to be an explicit list of the domains for
&gt; which you want to use that DNS service. Unless we have a separate list of
&gt; "domains which exist here" for each connection, which is *distinct* from the
&gt; search domains?</span>

I looked at systemd-resolved documentation and it introduces the
concept of "routing-only" domains, which are those domains only used
for deciding the output interface, as opposed to "search" domains that
are used for both completing unqualified names and for routing:

 <a href="https://www.freedesktop.org/software/systemd/man/systemd.network.html#Domains">https://www.freedesktop.org/software/systemd/man/systemd.network.html#Domains</a>=

and I think we could do something similar. For example, interpret
domains starting with a tilde in ipvX.dns-search as routing-only. All
other domains automatically obtained from DHCP/VPN/... would still be
considered as standard search domains.

When the DNS backend supports split DNS (i.e. dnsmasq or
systemd-resolved) I think we should always use split-DNS for the
domains in the search list; and with always I mean also for non-VPN
connections. In this way, queries for a domain in the search list will
be forwarded only to the interface that specified it. Then, of course,
we need to add wildcard rules to forward non-matching queries to all
interfaces.

Borrowing another concept from systemd-resolved, we could support the
wildcard routing domain "~." that means "send all all queries that
don't match specific search domains to this interface". To keep
backwards compatibility, if no connection provides a wildcard routing
domain, we would forward all non-matching queries to all interfaces,
except to VPNs that provides a search list. In this way:
 - we still do split DNS for VPNs by default
 - this <a class="bz_bug_link bz_status_RESOLVED bz_closed" href="show_bug.cgi?id=766769" title="RESOLVED FIXED - vpn with ipv6 support breaks DNS resolution completely">https://bugzilla.gnome.org/show_bug.cgi?id=766769</a> (VPNs that
   don't push any domains should get all queries) keeps working as is

In case of a full-tunnel VPN, one could set ipv4.dns-search to "~*" on
the VPN connection to direct all to the VPN DNS server. Queries for a
domain provided by a local connection would still go on through local
interface.

Any opinions about this idea? I pushed a draft implementation to branch
bg/dns-domains-bgo746422 and it seems that it should cover all the use
cases mentioned in this bz.</pre>
</div><div class="bz_comment" id="c9">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c9">Comment 9</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2017-04-11 09:22:08 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Beniamino Galvani from <a href="show_bug.cgi?id=746422#c8">comment #8</a>)
<span class="quote">&gt;  - we still do split DNS for VPNs by default
&gt;  - this <a class="bz_bug_link bz_status_RESOLVED bz_closed" href="show_bug.cgi?id=766769" title="RESOLVED FIXED - vpn with ipv6 support breaks DNS resolution completely">https://bugzilla.gnome.org/show_bug.cgi?id=766769</a> (VPNs that
&gt;    don't push any domains should get all queries) keeps working as is</span>

VPNs which don't push any *routing* domains should get all queries. So that's *all* existing VPN configs. From the automatic configuration of VPNs we only ever get *search* domains.

<span class="quote">&gt; In case of a full-tunnel VPN, one could set ipv4.dns-search to "~*" on
&gt; the VPN connection to direct all to the VPN DNS server.</span>

This needs to be the default, surely?

<span class="quote">&gt; Queries for a domain provided by a local connection would still go on 
&gt; through local interface.</span>

Doesn't that leave me with the same problem, that it's trying to perform DNS queries to the "local" DNS server which is actually upstream (e.g. 4.2.2.1), and I can't even *route* to that IP address because all my traffic is going to the VPN?

At the very least, this logic would need to be based on whether the VPN takes the default route or not, wouldn't it? If a VPN takes the default route, it *definitely* needs all DNS traffic. If it doesn't, it probably still should unless explicitly configured otherwise.</pre>
</div><div class="bz_comment" id="c10">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c10">Comment 10</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2017-04-11 12:47:02 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to David Woodhouse from <a href="show_bug.cgi?id=746422#c9">comment #9</a>)
<span class="quote">&gt; (In reply to Beniamino Galvani from <a href="show_bug.cgi?id=746422#c8">comment #8</a>)
&gt; &gt;  - we still do split DNS for VPNs by default
&gt; &gt;  - this <a class="bz_bug_link bz_status_RESOLVED bz_closed" href="show_bug.cgi?id=766769" title="RESOLVED FIXED - vpn with ipv6 support breaks DNS resolution completely">https://bugzilla.gnome.org/show_bug.cgi?id=766769</a> (VPNs that
&gt; &gt;    don't push any domains should get all queries) keeps working as is</span>
&gt;
<span class="quote">&gt; VPNs which don't push any *routing* domains should get all queries. So
&gt; that's *all* existing VPN configs. From the automatic configuration of VPNs
&gt; we only ever get *search* domains.</span>

I think a search domain should also be implicitly used for routing,
and thus VPNs do push routing domains.

IOW, if a connection provides search domain X, queries for names
ending in X should only go through that connection, no?

<span class="quote">&gt; &gt; In case of a full-tunnel VPN, one could set ipv4.dns-search to "~*" on
&gt; &gt; the VPN connection to direct all to the VPN DNS server.</span>
&gt;
<span class="quote">&gt; This needs to be the default, surely?</span>

See below.

<span class="quote">&gt; &gt; Queries for a domain provided by a local connection would still go on
&gt; &gt; through local interface.</span>
&gt;
<span class="quote">&gt; Doesn't that leave me with the same problem, that it's trying to perform DNS
&gt; queries to the "local" DNS server which is actually upstream (e.g. 4.2.2.1),
&gt; and I can't even *route* to that IP address because all my traffic is going
&gt; to the VPN?</span>

The scenario I'm referring to is: I'm connected to a VPN getting the
default route. I configure "~." as search domain on it to perform all
queries through the VPN. At the same time, the DHCP server on LAN
network announces a local DNS server with domain "local.foobar.com". I
want that every query ending in this domains is resolved locally, not
using the VPN DNS server.

If the DNS server announced by DHCP is not on LAN, I don't expect any
search domain to be present for the LAN connection and so every DNS
query will go through the VPN.

<span class="quote">&gt; At the very least, this logic would need to be based on whether the VPN
&gt; takes the default route or not, wouldn't it? If a VPN takes the default
&gt; route, it *definitely* needs all DNS traffic.</span>

First, if we start to decide DNS policy based on routing, this would
be a change in behavior and will possibly break users'
configurations. If we restrict the change only to VPNs with default
routes, probably it's less of a problem, and I think we can do it.

<span class="quote">&gt; If it doesn't, it probably still should unless explicitly configured
&gt; otherwise.</span>

I think many people using split tunnel VPNs would complain about this
change in behavior because suddenly (and possibly, without knowing it)
they would start sending all DNS queries to the VPN, which can have
bad privacy implications (e.g. when it's a corporate VPN).</pre>
</div><div class="bz_comment" id="c11">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c11">Comment 11</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2017-06-26 13:39:06 UTC
        </span>
</div>
<pre class="bz_comment_text">I've reworked a bit the branch. The main change is a new
ipv{4,6}.dns-default property that replaces the "~." domain of the
previous version.

I've also written a short description of the changes at:

<a href="https://wiki.gnome.org/Projects/NetworkManager/DNS">https://wiki.gnome.org/Projects/NetworkManager/DNS</a>

Please have a look at branch bg/dns-domains-bgo746422.</pre>
</div><div class="bz_comment" id="c12">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c12">Comment 12</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2017-06-27 11:20:06 UTC
        </span>
</div>
<pre class="bz_comment_text"><span class="quote">&gt;&gt; dns: introduce routing domains</span>
    

+         if (domain[0] == '~' &amp;&amp; search_only)
+              continue;

+         if (domain[0] == '~') {
+              if (search_only)
+                   continue;
+         }


I don't mind which, but let's make it consistent.



<span class="quote">&gt;&gt; libnm-core,cli: add support for DNS default property</span>

+     * name servers specified by this connection. When set to %FALSE, such
+     * queries are sent through all connections, excluding VPNs that provide
+     * a search list.

this is not clear to me. Instead of "When set to %FALSE,...", should it be:
"when no currently active connections have this property set to %TRUE, ..."




<span class="quote">&gt;&gt; dns: add 'default' attribute to exported DNS entries</span>
    

+         /* Add default */
+         g_variant_builder_add (&amp;entry_builder,
+                                "{sv}",
+                                "default",
+                                g_variant_new_boolean (is_default));

maybe only add the "default" key, if the value is actually TRUE. A missing value already means FALSE. The reason would be, not to teach users to rely on "default" being present.


minor fixup commits pushed.


the rest lgtm</pre>
</div><div class="bz_comment" id="c13">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c13">Comment 13</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2017-06-27 11:40:42 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Beniamino Galvani from <a href="show_bug.cgi?id=746422#c11">comment #11</a>)
<span class="quote">&gt; I've reworked a bit the branch. The main change is a new
&gt; ipv{4,6}.dns-default property that replaces the "~." domain of the
&gt; previous version.</span>

I'm still really unhappy with this. DNS is *not* a per-protocol thing. It doesn't make sense to have separate ipv4 vs. ipv6 dns defaults, any more than it does to have defaults for different IP ranges (i.e. DNS for 10.x.x.x vs. for 11.x.x.x). (Sure we have those for reverse-DNS but not like this.)

I understand that we have inherited this to a certain extent but I'd really like to avoid entrenching it further.</pre>
</div><div class="bz_comment" id="c14">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c14">Comment 14</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2017-06-29 08:13:01 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to David Woodhouse from <a href="show_bug.cgi?id=746422#c13">comment #13</a>)
<span class="quote">&gt; (In reply to Beniamino Galvani from <a href="show_bug.cgi?id=746422#c11">comment #11</a>)
&gt; &gt; I've reworked a bit the branch. The main change is a new
&gt; &gt; ipv{4,6}.dns-default property that replaces the "~." domain of the
&gt; &gt; previous version.
&gt; 
&gt; I'm still really unhappy with this. DNS is *not* a per-protocol thing. It
&gt; doesn't make sense to have separate ipv4 vs. ipv6 dns defaults, any more
&gt; than it does to have defaults for different IP ranges (i.e. DNS for 10.x.x.x
&gt; vs. for 11.x.x.x). (Sure we have those for reverse-DNS but not like this.)
&gt; 
&gt; I understand that we have inherited this to a certain extent but I'd really
&gt; like to avoid entrenching it further.</span>

that is true.

but we cannot change API, so, all we could do is deprecate the current properties and add a new one. But the old one still has to be supported. It's not clear that this is cleaner in the result.

As for adding new DNS related settings, it probably makes sense to instead add a new "ip" section and place it there. One day, we might deprecated ipv4.dns and ipv6.dns in favor of a ip.dns.
So let's do ^^?</pre>
</div><div class="bz_comment" id="c15">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c15">Comment 15</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2017-06-29 08:14:20 UTC
        </span>
</div>
<pre class="bz_comment_text">Or

[network]
dns-default=...


like, [Network] in `man systemd.network`</pre>
</div><div class="bz_comment" id="c16">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c16">Comment 16</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2017-06-29 08:46:52 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Thomas Haller from <a href="show_bug.cgi?id=746422#c14">comment #14</a>)
<span class="quote">&gt; but we cannot change API, so, all we could do is deprecate the current
&gt; properties and add a new one. But the old one still has to be supported.
&gt; It's not clear that this is cleaner in the result.
&gt; 
&gt; As for adding new DNS related settings, it probably makes sense to instead
&gt; add a new "ip" section and place it there. One day, we might deprecated
&gt; ipv4.dns and ipv6.dns in favor of a ip.dns.</span>

Or maybe DNS parameters should have their own "DNS" setting as:

 dns.servers
 dns.domains
 dns.options
 dns.priority
 dns.is-default

The old properties would be copied to the new setting when the connection is normalized, to provide backwards compatibility.

An "IP" setting would instead make sense if there are other protocol-agnostic IP properties we plan to add (but I can't imagine which ones now).</pre>
</div><div class="bz_comment" id="c17">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c17">Comment 17</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2017-06-29 09:23:36 UTC
        </span>
</div>
<pre class="bz_comment_text">proxy...

Each setting instance has a large implementation over-head. We could have instead

[network]
proxy-*=
dns-*=


arguably,

  `nmcli connection modify $NAME dns.*`
is much nicer then
  `nmcli connection modify $NAME network.dns-*`

(while nmcli is not required to expose nm-settings exactly the same way as they are in libnm and on D-Bus, it makes sense to do that).


tl;dr: +1 for a "dns" section.</pre>
</div><div class="bz_comment" id="c18">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c18">Comment 18</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-01-10 14:01:10 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Thomas Haller from <a href="show_bug.cgi?id=746422#c17">comment #17</a>)
<span class="quote">&gt; tl;dr: +1 for a "dns" section.</span>

Ok, I'll add the new 'default' property to a 'dns' setting and I'll also move the existing connection.mdns property there, since we haven't done any official release that includes it.

I pushed some preliminary patches to branch bg/dns-domains-pt1-bgo746422, please review.</pre>
</div><div class="bz_comment" id="c19">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c19">Comment 19</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-01-11 12:55:39 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Beniamino Galvani from <a href="show_bug.cgi?id=746422#c18">comment #18</a>)
<span class="quote">&gt; (In reply to Thomas Haller from <a href="show_bug.cgi?id=746422#c17">comment #17</a>)
&gt; &gt; tl;dr: +1 for a "dns" section.
&gt; 
&gt; Ok, I'll add the new 'default' property to a 'dns' setting and I'll also
&gt; move the existing connection.mdns property there, since we haven't done any
&gt; official release that includes it.</span>

I agree.

<span class="quote">&gt; I pushed some preliminary patches to branch bg/dns-domains-pt1-bgo746422,
&gt; please review.</span>

+         if (search_only &amp;&amp; domain_is_routing_only (str))
+              continue;

it's a bit confusing that the parameter is called "search_only", while it compares it with "routing_only". Could you rename "search_only"?
Also, the inverse naming is confusing to me:

  add_dns_domains (array, ip_config, FALSE, FALSE);

has search_only=FALSE, the double-inverse will result in ~all~. Could we rename "search_only" to "with_routing_only" (and inverse meaning)?




+              if (!domain_is_valid (str, FALSE))
+                   continue;

@str has possible a leading tilde. Shouldn't you strip it with "nm_utils_parse_dns_domain (str, NULL)" ?



-    /* If this link is never the default (e.g. only used for resources on this
-     * network) add a routing domain. */
-    route_only =   addr_family == AF_INET
-                 ? !nm_ip4_config_best_default_route_get (NM_IP4_CONFIG (config))
-                 : !nm_ip6_config_best_default_route_get (NM_IP6_CONFIG (config));
-

this behaviour came originally from <a href="https://cgit.freedesktop.org/NetworkManager/NetworkManager/commit/?id=c4864ba63f4a13e9938a978787490005f5ba48fb">https://cgit.freedesktop.org/NetworkManager/NetworkManager/commit/?id=c4864ba63f4a13e9938a978787490005f5ba48fb</a>. But despite the commit message, I don't understand why we would set routing-only if nm_ip4_config_get_never_default(). I guess, this new behavior makes much more sense to me.



pushed one fixup.</pre>
</div><div class="bz_comment" id="c20">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c20">Comment 20</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-01-11 14:55:32 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Thomas Haller from <a href="show_bug.cgi?id=746422#c19">comment #19</a>)
<span class="quote">&gt; (In reply to Beniamino Galvani from <a href="show_bug.cgi?id=746422#c18">comment #18</a>)
&gt; &gt; (In reply to Thomas Haller from <a href="show_bug.cgi?id=746422#c17">comment #17</a>)
&gt; &gt; &gt; tl;dr: +1 for a "dns" section.
&gt; &gt; 
&gt; &gt; Ok, I'll add the new 'default' property to a 'dns' setting and I'll also
&gt; &gt; move the existing connection.mdns property there, since we haven't done any
&gt; &gt; official release that includes it.
&gt; 
&gt; I agree.
&gt; 
&gt; &gt; I pushed some preliminary patches to branch bg/dns-domains-pt1-bgo746422,
&gt; &gt; please review.
&gt; 
&gt; +         if (search_only &amp;&amp; domain_is_routing_only (str))
&gt; +              continue;
&gt; 
&gt; it's a bit confusing that the parameter is called "search_only", while it
&gt; compares it with "routing_only". Could you rename "search_only"?
&gt; Also, the inverse naming is confusing to me:
&gt; 
&gt;   add_dns_domains (array, ip_config, FALSE, FALSE);</span>
&gt;
<span class="quote">&gt; has search_only=FALSE, the double-inverse will result in ~all~. Could we
&gt; rename "search_only" to "with_routing_only" (and inverse meaning)?</span>

Changed.


<span class="quote">&gt; +              if (!domain_is_valid (str, FALSE))
&gt; +                   continue;
&gt; 
&gt; @str has possible a leading tilde. Shouldn't you strip it with
&gt; "nm_utils_parse_dns_domain (str, NULL)" ?</span>

Good catch, fixed.

<span class="quote">&gt; -    /* If this link is never the default (e.g. only used for resources on
&gt; this
&gt; -     * network) add a routing domain. */
&gt; -    route_only =   addr_family == AF_INET
&gt; -                 ? !nm_ip4_config_best_default_route_get (NM_IP4_CONFIG
&gt; (config))
&gt; -                 : !nm_ip6_config_best_default_route_get (NM_IP6_CONFIG
&gt; (config));
&gt; -
&gt; 
&gt; this behaviour came originally from
&gt; <a href="https://cgit.freedesktop.org/NetworkManager/NetworkManager/commit/">https://cgit.freedesktop.org/NetworkManager/NetworkManager/commit/</a>
&gt; ?id=c4864ba63f4a13e9938a978787490005f5ba48fb. But despite the commit
&gt; message, I don't understand why we would set routing-only if
&gt; nm_ip4_config_get_never_default(). I guess, this new behavior makes much
&gt; more sense to me.</span>

The original behavior didn't make much sense and caused troubles (as in <a class="bz_bug_link bz_status_RESOLVED bz_closed" href="show_bug.cgi?id=783024" title="RESOLVED DUPLICATE - OpenVPN Does Not Set DNS Search Domain">bug 783024</a> and <a class="bz_bug_link bz_status_RESOLVED bz_closed" href="show_bug.cgi?id=782469" title="RESOLVED OBSOLETE - Search domains are not considered for split-tunnelling connections">bug 782469</a>). I think it's better if we add domain as search-domains by default.</pre>
</div><div class="bz_comment" id="c21">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c21">Comment 21</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-01-11 15:53:26 UTC
        </span>
</div>
<pre class="bz_comment_text">bg/dns-domains-pt1-bgo746422 lgtm</pre>
</div><div class="bz_comment" id="c22">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c22">Comment 22</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-01-12 12:46:56 UTC
        </span>
</div>
<pre class="bz_comment_text">First part merged to master:

<a href="https://cgit.freedesktop.org/NetworkManager/NetworkManager/commit/?id=b2f306ac3d84283fdebb225079f354afb8c2a752">https://cgit.freedesktop.org/NetworkManager/NetworkManager/commit/?id=b2f306ac3d84283fdebb225079f354afb8c2a752</a></pre>
</div><div class="bz_comment" id="c23">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c23">Comment 23</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-08 21:24:21 UTC
        </span>
</div>
<pre class="bz_comment_text">So... a VPN configuration which wants *all* DNS queries to go to the VPN's nameservers would add '~.' to the dns search list? Or just '~'?</pre>
</div><div class="bz_comment" id="c24">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c24">Comment 24</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-09 08:41:44 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to David Woodhouse from <a href="show_bug.cgi?id=746422#c23">comment #23</a>)
<span class="quote">&gt; So... a VPN configuration which wants *all* DNS queries to go to the VPN's
&gt; nameservers would add '~.' to the dns search list? Or just '~'?</span>

Yes, that is the plan ('~.') for part 2 (not implemented yet).</pre>
</div><div class="bz_comment" id="c25">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c25">Comment 25</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-09 09:25:41 UTC
        </span>
</div>
<pre class="bz_comment_text">Per discussion on IRC, I really don't like this very much. There is too much confusion already.

We should have a *clear* separation of two entirely different fields.

 • Search list

This is the list of domains that will be appended to failing lookups and tried again, before eventually failing. So if my search list contains "company.com, company.internal" and I attempt to look up "foo", then I get to wait while all these lookups are done in turn:

   foo.
   foo.company.com.
   foo.company.internal.

Note that this is an *ordered* list. And it should be kept as short as possible because we don't *want* to wait for all those extra lookups. And it might not be set at all, because we might want people to use fully qualified domain names in hyperlinks and other places, without relying on this auto-completion.

 • Lookup list

This is the list of domains for which this connection's nameserver should be used. For a large company which has merged with lots of others, there may be *many* domains which are only visible internally, or which have schizo-DNS presenting a different view to the internal network. This may contain all of the elements in the search list, but would *also* contain others like "some-company-we-bought.com", "£company-corp.com", etc.

This is an unordered list. And for full-tunnel VPNs we should use the VPN DNS for *everything*, which is the subject of this bug. This is quite a serious security bug, as described in <a href="https://bugzilla.redhat.com/show_bug.cgi?id=1553634">https://bugzilla.redhat.com/show_bug.cgi?id=1553634</a></pre>
</div><div class="bz_comment" id="c26">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c26">Comment 26</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-09 10:07:05 UTC
        </span>
</div>
<pre class="bz_comment_text">Some further notes:

 • I can make NetworkManager-openconnect provide both 'search domains' and
   'split dns domain' in separate config items. Right now we mache them all
   into the search domains because we know NM abuses that field for both,
   but we should fix that too.

 • We might perhaps take this opportunity to kill the weirdness that we have
   redundant DNS information in *both* IPv4 and IPv6 configs. That was always
   wrong, and a clean break to make it sane might be better than letting it
   persist for ever.

 • For a split-tunnel VPN, it's OK to have the split-dns lookup list default
   to the same as the search list (plus all the reverse domains which we do
   already get right, I believe). It should be possible to *add* entries to
   the split-dns lookup list that aren't in the search list, both manually
   in the config, and automatically from the VPN plugin (see first point above).

 • for a full-tunnel VPN, the split-dns lookup list should cover everything.
   There *might* be an exception list — for example IF we allow routing to
   the local network (cf. <a class="bz_bug_link bz_status_RESOLVED bz_closed" href="show_bug.cgi?id=767288" title="RESOLVED OBSOLETE - RFE: Route *everything* to VPN (block access to local network)">bug 767288</a> which asks for an option not to) then
   the reverse lookup ranges in .ip6.arpa and the split-dns domain list of
   the local network would be the only thing that's permitted *not* to go
   to the VPN's nameservers.


In the general case, DNS lookups for reverse ranges in .ip6.arpa and .in-addr.arpa should go to the nameservers of the connection to which we are routing those addresses. We *mostly* get that right, except for full-tunnel VPN right now.

Forward DNS lookups by default should go to the DNS servers of the connection which has the default route. Again, we don't get that right for full-tunnel VPN right now.

Forward DNS lookups for domains which are listed in some connection's "split-dns domains list" (which I called the 'lookup list' above), could go to that connection's DNS server UNLESS there's a reason not to (like a full tunnel VPN wanting to disable *all* local access as discussed in <a class="bz_bug_link bz_status_RESOLVED bz_closed" href="show_bug.cgi?id=767288" title="RESOLVED OBSOLETE - RFE: Route *everything* to VPN (block access to local network)">bug 767288</a>).</pre>
</div><div class="bz_comment" id="c27">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c27">Comment 27</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-12 12:27:26 UTC
        </span>
</div>
<pre class="bz_comment_text">Hm... since commit <a href="https://git.gnome.org/browse/NetworkManager/commit/?id=db9b7e10a">db9b7e10a</a> for <a class="bz_bug_link bz_status_RESOLVED bz_closed" href="show_bug.cgi?id=707617" title="RESOLVED FIXED - [review thaller/IP6Config_replace] core: update existing IP6Config of device instead of replacing it">bug 707617</a>, NMIP4Config already *has* separate fields for 'domains' vs. 'searches'.

Surely the "domains" list is already intended to be "routing domains", i.e. "domains for which we should do the DNS lookup to this connection's nameservers"? 
While "searches" is purely the auto-completion one? 

However, we seem to process them all the same. Perhaps we should stop doing that, then we don't need the '~' prefix hack...</pre>
</div><div class="bz_comment" id="c28">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c28">Comment 28</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-22 08:44:56 UTC
        </span>
</div>
<pre class="bz_comment_text">What is currently missing in my opinion is a flexible way to decide
which connections are used for default DNS queries (those not matching
any lookup domain).

A possible way to do this is to choose connections that have the
highest value of a new 'dns.default-priority' property. Since we want
to have default values that work for most users, the default value of
the property would be 'auto' (0), which means:

 * 1000 for full-tunnel VPNs
 *  500 for non-VPN connections
 *   -1 for split-tunnel VPNs. -1 means that the connection is never
        used for default DNS lookups

For example, if you have a full-tunnel VPN with search domain
'example.com' and a local connection with search domain 'local.com',
the following entries would be added to dnsmasq:

/example.com/VPN-nameserver
/local.com/local-nameserver
VPN-nameserver                 # default

But if the VPN is split-tunnel (doesn't get the default route):

/example.com/VPN-nameserver
/local.com/local-nameserver
local-nameserver               # default

If you want that all queries go through the full-tunnel VPN with no
exceptions, also set ipvx.dns-priority -1 for the VPN and dnsmasq will
be configured with:

/example.com/VPN-nameserver
VPN-nameserver                 # default

BTW, for ipvx.dns-priority we consider lower values with higher
priority while for dns.default-priority it's the other way around. I
believe doing ipvx.dns-priority that way was a mistake because it is
counterintuitive.

Users can also set custom value for dns.default-priority to tweak the
configuration to their needs.

What do you think? Any other ideas?</pre>
</div><div class="bz_comment" id="c29">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c29">Comment 29</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-22 08:56:40 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to David Woodhouse from <a href="show_bug.cgi?id=746422#c26">comment #26</a>)
<span class="quote">&gt; Some further notes:
&gt; 
&gt;  • I can make NetworkManager-openconnect provide both 'search domains' and
&gt;    'split dns domain' in separate config items. Right now we mache them all
&gt;    into the search domains because we know NM abuses that field for both,
&gt;    but we should fix that too.</span>

You can put them all in the NM_VPN_PLUGIN_IP4_CONFIG_DOMAINS key and prefix routing-only domains with a '~'.
 
<span class="quote">&gt;  • We might perhaps take this opportunity to kill the weirdness that we have
&gt;    redundant DNS information in *both* IPv4 and IPv6 configs. That was always
&gt;    wrong, and a clean break to make it sane might be better than letting it
&gt;    persist for ever.</span>

Changing this is a huge pain for users, and developers too (but this probably doesn't matter much). I can't think of a way to achieve a smooth transition from the separate DNS properties into a new common setting.</pre>
</div><div class="bz_comment" id="c30">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c30">Comment 30</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-22 09:11:45 UTC
        </span>
</div>
<pre class="bz_comment_text"><span class="quote">&gt; For example, if you have a full-tunnel VPN with search domain
&gt; 'example.com' and a local connection with search domain 'local.com',
&gt; the following entries would be added to dnsmasq:</span>

Please let's not talk about search domains. Those are completely different things, not related to what we're talking about here.

Search domains are purely a way to enable users to be lazy. I can type 'intranet" into my browser and it gets autocompleted to "intranet.company.com", for example.

They (should) have *nothing* to do with the choice of which DNS lookups get sent out on which connection. (Apart from the fact that we're doing this horrid thing with mixing them all together and prefixing one with ~, which is a technical detail.)

A full-tunnel VPN should end up with a *LOOKUP* domain of "" or "*" or "." or however you want to represent the default (currently there's no way for me to specify that even manually to work around this issue, I think). 

I think that implementing the "~." support as suggested in <a href="show_bug.cgi?id=746422#c24">comment 24</a> and then making full-tunnel VPNs automatically add that, would go a long way to dealing with this problem.

I'm not sure I understand the benefit of adding 'dns.default-priority' too. Is that *purely* a special case of ipvx.dns-priority, except for the "~." lookup domain alone? Does it need special-casing? Can't *all* the lookup domains of a given connection have the same priority, whether they're "~." or "~company.com." ?</pre>
</div><div class="bz_comment" id="c31">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c31">Comment 31</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-22 09:19:31 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Beniamino Galvani from <a href="show_bug.cgi?id=746422#c29">comment #29</a>)
<span class="quote">&gt; &gt;  • We might perhaps take this opportunity to kill the weirdness that we have
&gt; &gt;    redundant DNS information in *both* IPv4 and IPv6 configs. That was always
&gt; &gt;    wrong, and a clean break to make it sane might be better than letting it
&gt; &gt;    persist for ever.
&gt; 
&gt; Changing this is a huge pain for users, and developers too (but this
&gt; probably doesn't matter much). I can't think of a way to achieve a smooth
&gt; transition from the separate DNS properties into a new common setting.</span>

It's a short-term pain, which will eventually go away.

Can't we start by shadowing the ipv?.dns-* options into a generic dns.* option set so that they're identical? We can give people a long time to start using the new location, before eventually taking away the old ones.

We definitely shouldn't be making the problem *worse* by doing things like the ~ prefix hack or adding any *more* fields to ipv?.dns-*. Can't we at least add that as dns.lookup-domain even if it's all by itself in the "DNS" settings for now?</pre>
</div><div class="bz_comment" id="c32">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c32">Comment 32</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-22 09:37:09 UTC
        </span>
</div>
<pre class="bz_comment_text">I think this can work without a new default-priority field, and just a simple set of lookup domains per connection in conjunction with the existing dns-priority.

You have a set of { domain, connection, priority } tuples. (Where all lookup domains of a given connection have the *same* priority right now; there's no real need to make them individually configurable I think).

Where multiple lookup rules exist for a given domain, the highest priority (numerically lowest) one wins. And when a given rule is for a domain which is a *subdomain* of another domain with a negative dns-priority, that subdomain also loses (and is dropped).

So your first example in <a href="show_bug.cgi?id=746422#c28">comment 28</a> would look like this:

{ "example.com", vpn0, 50 }
{ local.com, eth0, 100 }
{ ".", vpn0, 50 }
{ ".", eth0, 100 }  # This one gets dropped due to the previous one

Your second example looks like this (because a split tunnel VPN doesn't add the "~." lookup domain:

{ "example.com", vpn0, 50 }
{ "local.com", eth0, 100 }
{ ".", eth0, 100 }

And your final example looks like this, because the user has set dns-priority=-1:


{ "example.com", vpn0, -1 }
{ local.com, eth0, 100 } # This one gets dropped due to the next one
{ ".", vpn0, -1 }
{ ".", eth0, 100 }  # This one gets dropped due to the previous one</pre>
</div><div class="bz_comment" id="c33">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c33">Comment 33</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-22 09:39:05 UTC
        </span>
</div>
<pre class="bz_comment_text">The idea is that VPNs would automatically have the "~." default lookup domain added, according to the never-default flag.</pre>
</div><div class="bz_comment" id="c34">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c34">Comment 34</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-22 10:22:04 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to David Woodhouse from <a href="show_bug.cgi?id=746422#c31">comment #31</a>)
<span class="quote">&gt; (In reply to Beniamino Galvani from <a href="show_bug.cgi?id=746422#c29">comment #29</a>)
&gt; &gt; &gt;  • We might perhaps take this opportunity to kill the weirdness that we have
&gt; &gt; &gt;    redundant DNS information in *both* IPv4 and IPv6 configs. That was always
&gt; &gt; &gt;    wrong, and a clean break to make it sane might be better than letting it
&gt; &gt; &gt;    persist for ever.
&gt; &gt; 
&gt; &gt; Changing this is a huge pain for users, and developers too (but this
&gt; &gt; probably doesn't matter much). I can't think of a way to achieve a smooth
&gt; &gt; transition from the separate DNS properties into a new common setting.
&gt; 
&gt; It's a short-term pain, which will eventually go away.</span>

Maybe, but existing properties are part of the API and so they will never be
dropped because we don't break API between releases. We'll have to maintain
them, together with the new properties and the code to sync them forever.

<span class="quote">&gt; Can't we start by shadowing the ipv?.dns-* options into a generic dns.*
&gt; option set so that they're identical? We can give people a long time to
&gt; start using the new location, before eventually taking away the old ones.</span>

If you mean that ipv4.dns-*, ipv6.dns-* and dns.* should be all identical,
that is a change in behavior and would badly break users.

If by shadowing you mean keeping them is sync (with the dns.* as the union
of ipv4.dns-* and ipv6.dns-*), that is possible but would create some other
problems in my opinion. 
 
<span class="quote">&gt; We definitely shouldn't be making the problem *worse* by doing things like
&gt; the ~ prefix hack or adding any *more* fields to ipv?.dns-*. Can't we at
&gt; least add that as dns.lookup-domain even if it's all by itself in the "DNS"
&gt; settings for now?</span>

Ok, we aren't going to add any new properties to ipvx.dns-*. Yes, I think we
can add a dns.lookup-domain property.</pre>
</div><div class="bz_comment" id="c35">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c35">Comment 35</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-22 12:16:25 UTC
        </span>
</div>
<pre class="bz_comment_text">Right, the idea was the dns.* properties would be the union of the ipv4.dns-* and ipv6.dns-* (which right now are treated identically and just appended to each other, I believe?).


Note: it's "lookup domains" we should be using for the proxy setup we poke into PacRunner, not "search domains". Can we fix that too please?</pre>
</div><div class="bz_comment" id="c36">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c36">Comment 36</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-26 16:40:20 UTC
        </span>
</div>
<pre class="bz_comment_text">I pushed branch bg/dns-bgo746422. I think it should solve the leaks in
case of full-tunnel VPNS when using dnsmasq or systemd-resolved. It
basically:

 - allows users to specify that connections get the default lookup
   domain through the special entry "~."

 - automatically adds "~." to connections with the default route

 - applies rules from <a href="show_bug.cgi?id=746422#c32">comment 32</a> to decide which domains are used
   based on DNS priority.

Other things that I didn't do, but can be done later (if necessary)
are:

 - as noticed by Thomas, you can't override the NM decision of
   automatically adding "~." to connections with default route.
   Actually, you can add "~." to another connection with a lower
   priority value, and it will override the "~." added by NM on the
   first connection. Perhaps this is enough. Otherwise we could
   introduce another special domain.

 - I haven't added a new dns setting with duplicates of the existing
   ipvx properties. I think it's really a different issue and should
   be solved separately.

 - Also I didn't add the dns.lookup-domain property, as the "~."
   domain is sufficient and it is just another case of the
   routing-only domains we already support.

What do you think?</pre>
</div><div class="bz_comment" id="c37">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c37">Comment 37</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-26 17:21:21 UTC
        </span>
</div>
<pre class="bz_comment_text"><span class="quote">&gt; dns: dnsmasq: fix adding multiple domains</span>

can you add a "Fixes" comment?


<span class="quote">&gt; core: allow '~.' domain in ip4 and ip6 configs</span>
    
+    if (!nm_streq (search, "~.")) {
          len = strlen (search);
          if (search[len - 1] == '.')
               search[len - 1] = 0;
+    }

this seems wrong, for example if "search" is "~..".
Either, do a full normalization and drop such entires (or clean up the duplicate dots). Or: normalize "~." to "~" too. It's odd that the special domain is treated entirely different regardingt the trailing dot.


<span class="quote">&gt; dns: use dns-priority to provide a preprocessed domain list to plugins</span>

          _LOGD ("update-dns: updating plugin %s", plugin_name);
+         rebuild_domain_lists (self);
          if (!nm_dns_plugin_update (plugin,

do we need to rebuild the list every time? We know when an update changes something. Can we cache the result, generate it when needed, and clear it when something changes?


+    struct {
+         const char **search;
+         char **reverse;
+    } domains;
 } NMDnsIPConfigData;


I think these are leaked.


<span class="quote">&gt; dns: dnsmasq: honor dns-priority</span>
    
+    int addr_family, i, j, num;

let's use guint for index variables of arrays? Also matches 
  num = nm_ip_config_get_num_nameservers (ip_config);



<span class="quote">&gt; dns: sd-resolved: honor dns-priority</span>
    
-         NMIPConfig *ip_config = elem-&gt;data;
+         NMDnsIPConfigData *data = elem-&gt;data;
+         NMIPConfig *ip_config = data-&gt;ip_config;

this seems wrong.



Overall, lgtm</pre>
</div><div class="bz_comment" id="c38">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c38">Comment 38</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-28 12:29:49 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Thomas Haller from <a href="show_bug.cgi?id=746422#c37">comment #37</a>)
<span class="quote">&gt; &gt; dns: dnsmasq: fix adding multiple domains
&gt; 
&gt; can you add a "Fixes" comment?</span>

Done.

<span class="quote">&gt; &gt; core: allow '~.' domain in ip4 and ip6 configs
&gt;     
&gt; +    if (!nm_streq (search, "~.")) {
&gt;           len = strlen (search);
&gt;           if (search[len - 1] == '.')
&gt;                search[len - 1] = 0;
&gt; +    }
&gt; 
&gt; this seems wrong, for example if "search" is "~..".
&gt; Either, do a full normalization and drop such entires (or clean up the
&gt; duplicate dots). Or: normalize "~." to "~" too. It's odd that the special
&gt; domain is treated entirely different regardingt the trailing dot.</span>

What do you mean by "full normalization"? 

We can convert 'domain.' into 'domain' because it's equivalent, but
'domain..' or 'my..domain' are invalid and they should be dropped. I
think this would be the best approach.

If we normalize '~.' to '~', once we strip the ~ prefix the domain
would become empty, which is not desirable in my opinion.

<span class="quote">&gt; &gt; dns: use dns-priority to provide a preprocessed domain list to plugins
&gt; 
&gt;           _LOGD ("update-dns: updating plugin %s", plugin_name);
&gt; +         rebuild_domain_lists (self);
&gt;           if (!nm_dns_plugin_update (plugin,
&gt; 
&gt; do we need to rebuild the list every time? We know when an update changes
&gt; something. Can we cache the result, generate it when needed, and clear it
&gt; when something changes?</span>

If nothing changes, the DNS configuration hash will be the same and
update_dns() won't be called at all by nm_dns_manager_end_updates().

Ok, nm_dns_manager_set_hostname() calls update_dns() without checking
the hash, but do we need another caching mechanism different from the
existing one just for this case?

<span class="quote">&gt; +    struct {
&gt; +         const char **search;
&gt; +         char **reverse;
&gt; +    } domains;
&gt;  } NMDnsIPConfigData;</span>
&gt;
<span class="quote">&gt; I think these are leaked.</span>

Ops, fixed.

<span class="quote">&gt; &gt; dns: dnsmasq: honor dns-priority
&gt;     
&gt; +    int addr_family, i, j, num;
&gt; 
&gt; let's use guint for index variables of arrays? Also matches 
&gt;   num = nm_ip_config_get_num_nameservers (ip_config);</span>

Ok.

<span class="quote">&gt; &gt; dns: sd-resolved: honor dns-priority
&gt;     
&gt; -         NMIPConfig *ip_config = elem-&gt;data;
&gt; +         NMDnsIPConfigData *data = elem-&gt;data;
&gt; +         NMIPConfig *ip_config = data-&gt;ip_config;
&gt; 
&gt; this seems wrong.</span>

Why? Looks fine to me.</pre>
</div><div class="bz_comment" id="c39">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c39">Comment 39</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-03-28 12:50:01 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Beniamino Galvani from <a href="show_bug.cgi?id=746422#c38">comment #38</a>)
<span class="quote">&gt; (In reply to Thomas Haller from <a href="show_bug.cgi?id=746422#c37">comment #37</a>)</span>

<span class="quote">&gt; What do you mean by "full normalization"? 
&gt; 
&gt; We can convert 'domain.' into 'domain' because it's equivalent, but
&gt; 'domain..' or 'my..domain' are invalid and they should be dropped. I
&gt; think this would be the best approach.</span>

I mean, to handle "my..domain". Either normalize the double . away, or verify it and drop it as invalid. If you don't do either, then "~.." will end up being treated like "~." which is wrong.

<span class="quote">&gt; If we normalize '~.' to '~', once we strip the ~ prefix the domain
&gt; would become empty, which is not desirable in my opinion.</span>

Yes, after dropping the default domain becomes "". It's not that you currently use the domain "." as-is. You do:

  nm_streq (domain, ".") ? NULL : domain)

that could also be:

  nm_streq (domain, "") ? NULL : domain)

or

#define DEFAULT_DOMAIN ""
  nm_streq (domain, DEFAULT_DOMAIN) ? NULL : domain)

(maybe a define is in order either way).


<span class="quote">&gt; &gt; &gt; dns: use dns-priority to provide a preprocessed domain list to plugins
&gt; &gt; 
&gt; &gt;           _LOGD ("update-dns: updating plugin %s", plugin_name);
&gt; &gt; +         rebuild_domain_lists (self);
&gt; &gt;           if (!nm_dns_plugin_update (plugin,
&gt; &gt; 
&gt; &gt; do we need to rebuild the list every time? We know when an update changes
&gt; &gt; something. Can we cache the result, generate it when needed, and clear it
&gt; &gt; when something changes?
&gt; 
&gt; If nothing changes, the DNS configuration hash will be the same and
&gt; update_dns() won't be called at all by nm_dns_manager_end_updates().
&gt; 
&gt; Ok, nm_dns_manager_set_hostname() calls update_dns() without checking
&gt; the hash, but do we need another caching mechanism different from the
&gt; existing one just for this case?</span>

Maybe the hashing mechanism is anyway ugly, and should be dropped (in a future commit). Instead of implementing a SHA-hashing of ~some~ parameters, implement a cmp() function. It's more efficient, and easier to get right.


<span class="quote">&gt; &gt; &gt; dns: sd-resolved: honor dns-priority
&gt; &gt;     
&gt; &gt; -         NMIPConfig *ip_config = elem-&gt;data;
&gt; &gt; +         NMDnsIPConfigData *data = elem-&gt;data;
&gt; &gt; +         NMIPConfig *ip_config = data-&gt;ip_config;
&gt; &gt; 
&gt; &gt; this seems wrong.
&gt; 
&gt; Why? Looks fine to me.</span>

you are right.</pre>
</div><div class="bz_comment" id="c40">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c40">Comment 40</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-04-08 09:09:45 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Thomas Haller from <a href="show_bug.cgi?id=746422#c39">comment #39</a>)
<span class="quote">&gt; (In reply to Beniamino Galvani from <a href="show_bug.cgi?id=746422#c38">comment #38</a>)
&gt; &gt; (In reply to Thomas Haller from <a href="show_bug.cgi?id=746422#c37">comment #37</a>)
&gt; 
&gt; &gt; What do you mean by "full normalization"? 
&gt; &gt; 
&gt; &gt; We can convert 'domain.' into 'domain' because it's equivalent, but
&gt; &gt; 'domain..' or 'my..domain' are invalid and they should be dropped. I
&gt; &gt; think this would be the best approach.
&gt; 
&gt; I mean, to handle "my..domain". Either normalize the double . away, or
&gt; verify it and drop it as invalid. If you don't do either, then "~.." will
&gt; end up being treated like "~." which is wrong.
&gt; 
&gt; &gt; If we normalize '~.' to '~', once we strip the ~ prefix the domain
&gt; &gt; would become empty, which is not desirable in my opinion.
&gt; 
&gt; Yes, after dropping the default domain becomes "". It's not that you
&gt; currently use the domain "." as-is. You do:
&gt; 
&gt;   nm_streq (domain, ".") ? NULL : domain)
&gt; 
&gt; that could also be:
&gt; 
&gt;   nm_streq (domain, "") ? NULL : domain)
&gt; 
&gt; or
&gt; 
&gt; #define DEFAULT_DOMAIN ""
&gt;   nm_streq (domain, DEFAULT_DOMAIN) ? NULL : domain)
&gt; 
&gt; (maybe a define is in order either way).</span>

Yeah, considering "" internally as the wildcard domain simplifies things a bit. I've updated the branch.

<span class="quote">&gt; Maybe the hashing mechanism is anyway ugly, and should be dropped (in a
&gt; future commit). Instead of implementing a SHA-hashing of ~some~ parameters,
&gt; implement a cmp() function. It's more efficient, and easier to get right.</span>

A agree, this could be an improvement (for the future).</pre>
</div><div class="bz_comment" id="c41">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c41">Comment 41</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-04-13 11:45:05 UTC
        </span>
</div>
<pre class="bz_comment_text"><span class="quote">&gt; core: allow '~.' domain in ip4 and ip6 configs</span>

commit <a href="https://git.gnome.org/browse/NetworkManager/commit/?id=bebafff7844228d018d17f0d11c5d6035dbf6a91">bebafff7844228d018d17f0d11c5d6035dbf6a91</a>,
lgtm, but the commit message no longer seams to match, does it?


<span class="quote">&gt; dns: use dns-priority to provide a preprocessed domain list to plugins</span>

+    c_list_for_each_entry (ip_data, _ip_config_lst_head (self), ip_config_lst) {

the list head is accessed on every iteration. Could we pre-cache the value like:

    CList *ip_config_lst_head;

    ip_config_lst_head = _ip_config_lst_head (self);

    c_list_for_each_entry (ip_data, ip_config_lst_head, ip_config_lst) {

    (and below again)


+         int i, n, n_domains = 0;

these variables are used to iterate over a number of guint values. Like

  n = nm_ip_config_get_num_searches (ip_config);

where get_num_searches() returns a guint. Could we consistently use the correct type? (yes, I know that C might optimize signed for loops better, because it assumes that signed cannot overflow. But IMO consistent use of types is more important than what the compiler might do).


+         priority = nm_ip_config_get_dns_priority (ip_config);
+         nm_assert (priority != 0);

this invariant is not enforced by NMIPxConfig, so, you basically assert that all callers that create an NMIPxConfig properly initialize priority to a non-zero value. It asserts something that is two layers of code away. That is non-obvious. Not sure what to do about this. Ok, fine as is :)


add the wilcard domain to all non-VPN
        ^^^^^^^


+    parent_priority = GPOINTER_TO_INT (g_hash_table_lookup (ht, "."));
+    if (parent_priority &lt; 0 &amp;&amp; parent_priority &lt; priority) {
+         *out_parent = ".";
+         *out_parent_priority = parent_priority;

is "." still right? Should this be "" to mean the wildcard domain?




could you add a
   nm_assert (!g_hash_table_contains (ht, domain));
to domain_is_shadowed() -- because that one is already checked before calling domain_is_shadowed().



         g_free (ip_data-&gt;domains.search);

I always like avoiding unnecessary copies. But in this case, "search" array will point inside strings owned by NMIPxConfig. That seems quite fragile to me. Should we not clone them? In practice it's not necessary, but it feels fragile. What can we do about that?



»···/* Free the array and return NULL if the only element was the ending NULL */
»···strv = (char **) g_ptr_array_free (domains, (domains-&gt;len == 1));

»···return _nm_utils_strv_cleanup (strv, FALSE, FALSE, TRUE);

skip_repeated=TRUE likely won't help much, because duplicated domains are probably not sorted after each other. Maybe sort them first? Maybe by cherry-picking "shared: add nm_utils_strv_sort() helper" from <a href="https://github.com/NetworkManager/NetworkManager/pull/91">https://github.com/NetworkManager/NetworkManager/pull/91</a></pre>
</div><div class="bz_comment" id="c42">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c42">Comment 42</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Michael Biebl</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-04-14 11:11:17 UTC
        </span>
</div>
<pre class="bz_comment_text">Will those changes be pulled into the nm-1-10 branch as well?</pre>
</div><div class="bz_comment" id="c43">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c43">Comment 43</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-04-30 12:32:23 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Thomas Haller from <a href="show_bug.cgi?id=746422#c41">comment #41</a>)
<span class="quote">&gt; &gt; core: allow '~.' domain in ip4 and ip6 configs
&gt; 
&gt; commit <a href="https://git.gnome.org/browse/NetworkManager/commit/?id=bebafff7844228d018d17f0d11c5d6035dbf6a91">bebafff7844228d018d17f0d11c5d6035dbf6a91</a>,
&gt; lgtm, but the commit message no longer seams to match, does it?</span>

<span class="quote">&gt; the list head is accessed on every iteration. Could we pre-cache the value
&gt; like:</span>

<span class="quote">&gt; +         int i, n, n_domains = 0;
&gt; 
&gt; these variables are used to iterate over a number of guint values. Like
&gt; 
&gt;   n = nm_ip_config_get_num_searches (ip_config);
&gt; 
&gt; where get_num_searches() returns a guint. Could we consistently use the
&gt; correct type?</span>

<span class="quote">&gt; add the wilcard domain to all non-VPN</span>

<span class="quote">&gt; is "." still right? Should this be "" to mean the wildcard domain?</span>

<span class="quote">&gt; could you add a
&gt;    nm_assert (!g_hash_table_contains (ht, domain));
&gt; to domain_is_shadowed() -- because that one is already checked before
&gt; calling domain_is_shadowed().</span>

Fixed all the above.


<span class="quote">&gt; I always like avoiding unnecessary copies. But in this case, "search" array
&gt; will point inside strings owned by NMIPxConfig. That seems quite fragile to
&gt; me. Should we not clone them? In practice it's not necessary, but it feels
&gt; fragile. What can we do about that?</span>

Now the list is cleared just after nm_dns_plugin_update() returns to ensure
that elements in the list don't become stale. What do you think?

<span class="quote">&gt; »···/* Free the array and return NULL if the only element was the ending
&gt; NULL */
&gt; »···strv = (char **) g_ptr_array_free (domains, (domains-&gt;len == 1));
&gt; 
&gt; »···return _nm_utils_strv_cleanup (strv, FALSE, FALSE, TRUE);
&gt; 
&gt; skip_repeated=TRUE likely won't help much, because duplicated domains are
&gt; probably not sorted after each other. Maybe sort them first? Maybe by
&gt; cherry-picking "shared: add nm_utils_strv_sort() helper" from
&gt; <a href="https://github.com/NetworkManager/NetworkManager/pull/91">https://github.com/NetworkManager/NetworkManager/pull/91</a></span>

I don't understand, duplicate domains don't have to be consecutive with
current _nm_utils_strv_cleanup() implementation.</pre>
</div><div class="bz_comment" id="c44">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c44">Comment 44</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-04-30 12:33:39 UTC
        </span>
</div>
<pre class="bz_comment_text">I've added some NM-CI tests to ensure the behavior is the one we expect:

<a href="https://github.com/NetworkManager/NetworkManager-ci/pull/180">https://github.com/NetworkManager/NetworkManager-ci/pull/180</a></pre>
</div><div class="bz_comment" id="c45">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c45">Comment 45</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-04-30 12:42:40 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Michael Biebl from <a href="show_bug.cgi?id=746422#c42">comment #42</a>)
<span class="quote">&gt; Will those changes be pulled into the nm-1-10 branch as well?</span>

Let's wait until the branch is merged to master and see if there are
any issues. If there are no complaints, we can think about backporting
it to a stable branch.</pre>
</div><div class="bz_comment" id="c46">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c46">Comment 46</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-04-30 13:18:56 UTC
        </span>
</div>
<pre class="bz_comment_text"><span class="quote">&gt; I don't understand, duplicate domains don't have to be consecutive with
&gt; current _nm_utils_strv_cleanup() implementation.</span>

How do you mean?

calling "_nm_utils_strv_cleanup (strv, FALSE, FALSE, TRUE);" with skip_repeated=TRUE will remove "consecutive duplicates". That doesn't seem useful, because most of the time (given how the array is constructed), duplicates are not consecutive.
so either: do not drop any duplicates and do skip_repeated=FALSE
or: drop all duplicates, by sorting the array first, followed by skip_repeated=TRUE.</pre>
</div><div class="bz_comment" id="c47">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c47">Comment 47</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Lubomir Rintel</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-05-14 07:36:41 UTC
        </span>
</div>
<pre class="bz_comment_text">bg/dns-domains-bgo746422 LGTM</pre>
</div><div class="bz_comment" id="c48">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c48">Comment 48</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Lubomir Rintel</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-05-14 07:59:27 UTC
        </span>
</div>
<pre class="bz_comment_text">That is, bg/dns-bgo746422 LGTM</pre>
</div><div class="bz_comment" id="c49">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c49">Comment 49</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-05-14 13:32:11 UTC
        </span>
</div>
<pre class="bz_comment_text">Merged to master:

<a href="https://cgit.freedesktop.org/NetworkManager/NetworkManager/commit/?id=d9782589248e61c0cb5aec90e3eb62612891116b">https://cgit.freedesktop.org/NetworkManager/NetworkManager/commit/?id=d9782589248e61c0cb5aec90e3eb62612891116b</a></pre>
</div><div class="bz_comment" id="c50">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c50">Comment 50</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-05-14 14:44:19 UTC
        </span>
</div>
<pre class="bz_comment_text">FWIW the original situation appears to be fairly broken regardless of the security situation. I've lost count of the number of times in my recent travels that the DNS servers of the airport/hotel/etc. in which I find myself are *not* directly on the local subnet. And thus aren't accessible as soon as I join the VPN.

If that situation is going to be allowed to persist in any form (especially if it's the default and we have to take special action to give the VPN nameservers top priority), then we should fix that by explicitly adding routes to them, as I've been having to do manually:

 $ ip route
default dev vpn0  proto static  scope link  metric 50 
default via 10.246.8.1 dev wlp2s0  proto static  metric 600 
8.8.4.4 via 10.246.8.1 dev wlp2s0 
8.8.8.8 via 10.246.8.1 dev wlp2s0</pre>
</div><div class="bz_comment" id="c51">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c51">Comment 51</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Olivier Tilloy</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-10-15 15:02:19 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Beniamino Galvani from <a href="show_bug.cgi?id=746422#c45">comment #45</a>)
<span class="quote">&gt; (In reply to Michael Biebl from <a href="show_bug.cgi?id=746422#c42">comment #42</a>)
&gt; &gt; Will those changes be pulled into the nm-1-10 branch as well?
&gt; 
&gt; Let's wait until the branch is merged to master and see if there are
&gt; any issues. If there are no complaints, we can think about backporting
&gt; it to a stable branch.</span>

Now that this has been in master and 1.12 for a few months, is this something you would consider backporting to 1.10 ?</pre>
</div><div class="bz_comment" id="c52">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c52">Comment 52</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-10-15 18:35:16 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Olivier Tilloy from <a href="show_bug.cgi?id=746422#c51">comment #51</a>)
<span class="quote">&gt; (In reply to Beniamino Galvani from <a href="show_bug.cgi?id=746422#c45">comment #45</a>)
&gt; &gt; (In reply to Michael Biebl from <a href="show_bug.cgi?id=746422#c42">comment #42</a>)
&gt; &gt; &gt; Will those changes be pulled into the nm-1-10 branch as well?
&gt; &gt; 
&gt; &gt; Let's wait until the branch is merged to master and see if there are
&gt; &gt; any issues. If there are no complaints, we can think about backporting
&gt; &gt; it to a stable branch.
&gt; 
&gt; Now that this has been in master and 1.12 for a few months, is this
&gt; something you would consider backporting to 1.10 ?</span>

Can you describe who would pick up the upstream patches if they get backported? 
Would 1.10 branch be far enough?

Would you then rebase to a minor 1.10.z release, or would you just cherry-pick the patches?</pre>
</div><div class="bz_comment" id="c53">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c53">Comment 53</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-10-15 21:03:59 UTC
        </span>
</div>
<pre class="bz_comment_text">I'd like to see them in a Fedora release, which is preferably via a 1.10.z release rather than just cherry-picking the patches.

Also Ubuntu but they basically never fix anything so I suppose that's unlikely. I'd still like it in a 1.10.z release so they don't have any *excuse* though.</pre>
</div><div class="bz_comment" id="c54">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c54">Comment 54</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Sebastien Bacher</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-10-16 08:39:10 UTC
        </span>
</div>
<pre class="bz_comment_text">@David, I don't think that comment is either constructive or true. We have somewhat limited resources and struggle a bit sometime to keep up with network-manager bugfixes/update but we would backport a fix for this bug to our stable serie if there is one landing in the 1.10 vcs.</pre>
</div><div class="bz_comment" id="c55">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c55">Comment 55</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-10-17 15:46:55 UTC
        </span>
</div>
<pre class="bz_comment_text">The backport is quite complicated due to several changes that made the
DNS code in nm-1-12 diverge from nm-1-10. The th/policy-and-mdns
branch [1] alone changed:

 src/dns/nm-dns-dnsmasq.c           | 330 +++++++++++++--------------------
 src/dns/nm-dns-manager.c           | 581 +++++++++++++++++++++++++++++++++-------------------------
 src/dns/nm-dns-systemd-resolved.c  | 219 ++++++++++++++--------

so, unless we decide to also backport that branch, the backport of the
fix requires reimplementing several non-trivial patches on top of
1.10, with the high risk of breaking things.

If we also backport the th/policy-and-mdns branch, we would need to
backport a total of 30+ commits, including mDNS support and related
libnm API.

Any opinions? This latter approach seems doable, but it is a big
change for a minor release.

[1] <a href="https://cgit.freedesktop.org/NetworkManager/NetworkManager/log/?qt=range&amp;q=5eea9be983bd95f5a482e483a438a100b80c716f">https://cgit.freedesktop.org/NetworkManager/NetworkManager/log/?qt=range&amp;q=5eea9be983bd95f5a482e483a438a100b80c716f</a></pre>
</div><div class="bz_comment" id="c56">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c56">Comment 56</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-10-17 16:27:36 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to Beniamino Galvani from <a href="show_bug.cgi?id=746422#c55">comment #55</a>)
&gt;
<span class="quote">&gt; Any opinions? This latter approach seems doable, but it is a big
&gt; change for a minor release.</span>

Backporting th/policy-and-mdns too, seems favourable to me. As long, as the cherry-picks are trivial, the result will all be code which is on master and tested for a while already. I'd rather cherry-pick more patches just to make them apply, instead of reimplementing them. YMMV.</pre>
</div><div class="bz_comment" id="c57">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c57">Comment 57</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Olivier Tilloy</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-11-16 18:48:22 UTC
        </span>
</div>
<pre class="bz_comment_text">I confirm that the Ubuntu desktop team would be interested in picking up the update if this fix and related branches were to be backported to the 1.10 branch.

Is this something we can reasonably expect?</pre>
</div><div class="bz_comment" id="c58">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c58">Comment 58</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Thomas Haller</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-11-16 20:23:00 UTC
        </span>
</div>
<pre class="bz_comment_text">it's backported to nm-1-10 branch: <a href="https://cgit.freedesktop.org/NetworkManager/NetworkManager/commit/?id=1e486a721de1fec76c81bfc461671a7fbdae531b">https://cgit.freedesktop.org/NetworkManager/NetworkManager/commit/?id=1e486a721de1fec76c81bfc461671a7fbdae531b</a></pre>
</div><div class="bz_comment" id="c59">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c59">Comment 59</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Olivier Tilloy</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-11-19 21:51:26 UTC
        </span>
</div>
<pre class="bz_comment_text">Excellent, thank you Thomas!</pre>
</div><div class="bz_comment" id="c60">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c60">Comment 60</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-11-20 10:58:33 UTC
        </span>
</div>
<pre class="bz_comment_text">The fix is included also in the 1.10.14 release.</pre>
</div><div class="bz_comment" id="c61">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c61">Comment 61</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Olivier Tilloy</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2018-11-20 21:25:17 UTC
        </span>
</div>
<pre class="bz_comment_text">That's handy. The backport to Ubuntu 18.04 is being tracked by <a href="https://bugs.launchpad.net/ubuntu/+source/network-manager/+bug/1754671">https://bugs.launchpad.net/ubuntu/+source/network-manager/+bug/1754671</a>.</pre>
</div><div class="bz_comment" id="c62">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c62">Comment 62</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2019-02-04 22:37:35 UTC
        </span>
</div>
<pre class="bz_comment_text">I've finally managed to test the Ubuntu 18.04 backport; apologies for the delay.

At first it seemed to work. I tried an internal domain which isn't the main $COMPANY.com and isn't in the default search domains for the VPN, and it worked after the upgrade.

Some hours later, I was unable to get a Kerberos ticket because various other DNS lookups, even within the main $COMPANY.com domain, were being done on the local network and not the VPN.

I manually set ipv4.dns-priority=-1 and ipv4.dns-search=~. but this is a full-tunnel VPN; surely I shouldn't have needed to do that part manually?

(Sebastian, apologies for the somewhat grumpy comment earlier. I am very happy to be proved wrong.)</pre>
</div><div class="bz_comment" id="c63">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c63">Comment 63</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2019-02-04 22:38:28 UTC
        </span>
</div>
<pre class="bz_comment_text">Gr, and apologies too for spelling your name wrong, Sebastien.</pre>
</div><div class="bz_comment" id="c64">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c64">Comment 64</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2019-02-05 08:18:22 UTC
        </span>
</div>
<pre class="bz_comment_text">Hi,

can you please attach the log file generated in this way:

 # nmcli general logging level trace
 # journalctl -u NetworkManager -f &gt; dns-log.txt &amp;
 # killall -HUP NetworkManager
 # kill %1

when the DNS is wrongly configured? Thanks.</pre>
</div><div class="bz_comment" id="c65">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c65">Comment 65</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2019-02-05 09:44:20 UTC
        </span>
</div>
<pre class="bz_comment_text">Before I do that, do we agree that I shouldn't have needed to manually set dns-priority and dns-search as described in <a href="show_bug.cgi?id=746422#c62">comment 62</a>, for a VPN connection which is full-tunnel?</pre>
</div><div class="bz_comment" id="c66">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c66">Comment 66</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2019-02-05 10:00:35 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to David Woodhouse from <a href="show_bug.cgi?id=746422#c65">comment #65</a>)
<span class="quote">&gt; Before I do that, do we agree that I shouldn't have needed to manually set
&gt; dns-priority and dns-search as described in <a href="show_bug.cgi?id=746422#c62">comment 62</a>, for a VPN connection
&gt; which is full-tunnel?</span>

Yes, the full-tunnel VPN should have higher priority.

We have an automated CI test to check this scenario:

 <a href="https://github.com/NetworkManager/NetworkManager-ci/blob/master/nmcli/features/dns.feature#L403">https://github.com/NetworkManager/NetworkManager-ci/blob/master/nmcli/features/dns.feature#L403</a>

and it seems to be working well.</pre>
</div><div class="bz_comment" id="c67">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c67">Comment 67</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2019-02-05 11:37:09 UTC
        </span>
</div>
<pre class="bz_comment_text">Ack, then I will remove those settings and test again. With dnsmasq, OK? This can never work with plain resolv.conf anyway.

Thanks.</pre>
</div><div class="bz_comment" id="c68">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c68">Comment 68</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2019-02-05 11:50:56 UTC
        </span>
</div>
<pre class="bz_comment_text">(In reply to David Woodhouse from <a href="show_bug.cgi?id=746422#c67">comment #67</a>)
<span class="quote">&gt; Ack, then I will remove those settings and test again. With dnsmasq, OK?</span>

Yes, thanks.</pre>
</div><div class="bz_comment" id="c69">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c69">Comment 69</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2019-08-21 09:03:43 UTC
        </span>
</div>
<pre class="bz_comment_text">Without the ipv4.dns-priority and ipv4.dns-search settings being manually set, I see the wired device still being used for its own search domain. This is what causes the problem.

It seems to work for me if I set *only* ipv4.dns-priority=-1 though.

My biggest practical problem here was that we had set ipv4.dns-priority and ipv4.dns-search options in an emergency deployment to our users after Ubuntu shipped the 1.10.14 update to 18.04 to fix this... and then when they *pulled* the update, new installations got the new config but older NM, and that didn't work correctly either.

I'm going to experiment with *just* setting ipv4.dns-priority=-1 and not ipv4.dns-search. Do we expect that to work for everyone, whether they have the updated package or not? 

We should be setting ipv4.dns-priority=1 by default for full-tunnel VPNs, but at least if I can find a way to work around it that works for everyone, that'll be an improvement.</pre>
</div><div class="bz_comment" id="c70">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c70">Comment 70</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2019-08-21 11:33:44 UTC
        </span>
</div>
<pre class="bz_comment_text">No, ipv4.dns-priority=-1 breaks older NM because there, there's no default routing domain ~. and not even any way to set it. So lookups outside the VPN domains are just refused instead of being leaked to the local nameservers as they were before.

As it happens, we configure our DHCP client to always override the discovered search domains to our corporate AD domain dom.company.com, so I can work around NM's failure to automatically set ipv4.dns-priority=-1 a different way — by manually configuring the VPN with ipv4.dns-domains=dom.company.com;company.com;. That works for both old and new NetworkManager.</pre>
</div><div class="bz_comment" id="c71">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c71">Comment 71</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">Beniamino Galvani</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2019-08-22 07:51:33 UTC
        </span>
</div>
<pre class="bz_comment_text"><span class="quote">&gt; My biggest practical problem here was that we had set
&gt; ipv4.dns-priority and ipv4.dns-search options in an emergency
&gt; deployment to our users after Ubuntu shipped the 1.10.14 update to
&gt; 18.04 to fix this... and then when they *pulled* the update, new
&gt; installations got the new config but older NM, and that didn't work
&gt; correctly either.</span>

<span class="quote">&gt; I'm going to experiment with *just* setting ipv4.dns-priority=-1 and
&gt; not ipv4.dns-search. Do we expect that to work for everyone, whether
&gt; they have the updated package or not?</span>

Yes, this should work the same on 1.10.14 and 1.12+ releases.

<span class="quote">&gt; We should be setting ipv4.dns-priority=1 by default for full-tunnel
&gt; VPNs, but at least if I can find a way to work around it that works
&gt; for everyone, that'll be an improvement.</span>

Do you mean -1? Why? This will cause an opposite problem: local
queries leaked to the VPN, i.e. I look up nas.myhome and the query
goes through the VPN.

<span class="quote">&gt; No, ipv4.dns-priority=-1 breaks older NM because there, there's no default routing domain ~. and not even any way to set it</span>

Which version is 'older'?</pre>
</div><div class="bz_comment" id="c72">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c72">Comment 72</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">David Woodhouse</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2019-08-22 10:25:44 UTC
        </span>
</div>
<pre class="bz_comment_text">In my case, 'older' is 1.10.6. At this point I'm just trying to get things working for my users on Ubuntu 18.04. So I'm comparing 1.10.6 (the current Ubuntu package) with 1.10.14 (the update, that was briefly shipped in 18.04 updates and then withdrawn).

When the 1.10.14 update went out, it broke our users because lookups for the dom.company.com AD domain were now always going to the local network (because of our dhclient config override). We immediately rolled out a manual setting of ipv4.dns-priority=-1 (yes, not =1) to fix it.

Then the Ubuntu 1.10.14 update was withdrawn, and new installations got 1.10.6 which *doesn't* work with ipv4.dns-priority=-1, because there's no ~. routing domain and thus lookups outside the VPN domains don't work at all.

(We don't care about local lookups not working. In fact we'd prefer local lookups *not* to work, which might be part of the reason we've overridden the search domain obtained by DHCP. If we could stop *routing* to the local network from working, we would. It's an open feature request, I believe.)

But *because* I know the search domain on the local physical network will always be just 'dom.company.com', adding that explicitly in the VPN config is enough and I don't need ipv4.dns-priority=-1. Now I have a config that works with both 1.10.6 and 1.10.14. So I can wait for the regressions that caused the 1.10.14 update to be pulled, to get fixed and then maybe later I can set ipv4.dns-priority=-1 again.



Anyway, we now know that the reason my initial testing of the Ubuntu 1.10.14 backport was unsuccessful, was because of the search domain on the *local* network. I've been able to work around that, and things are now working OK.</pre>
</div><div class="bz_comment" id="c73">
<div class="bz_comment_head">
<span class="bz_comment_number">
<a href="show_bug.cgi?id=746422#c73">Comment 73</a>
</span>
<span class="bz_comment_user">
<span class="vcard"><span class="fn">André Klapper</span>
</span>
</span>
<span class="bz_comment_user_images">
</span>
<span class="bz_comment_time">
          2020-11-12 14:31:19 UTC
        </span>
</div>
<pre class="bz_comment_text">bugzilla.gnome.org is being shut down in favor of a GitLab instance. 
We are closing all old bug reports and feature requests in GNOME Bugzilla which have not seen updates for a long time.

If you still use NetworkManager and if you still see this bug / want this feature in a recent and supported version of NetworkManager, then please feel free to report it at <a href="https://gitlab.freedesktop.org/NetworkManager/NetworkManager/-/issues/">https://gitlab.freedesktop.org/NetworkManager/NetworkManager/-/issues/</a>

Thank you for creating this report and we are sorry it could not be implemented (workforce and time is unfortunately limited).</pre>
</div>
<script type="text/javascript">
  function traceparser_toggle_trace(link, trace_id) {
    var trace = document.getElementById('trace_' + trace_id);
    bz_toggleClass(trace, 'bz_default_hidden');
    if (link.innerHTML == '+') { link.innerHTML = '&mdash;'; }
    else { link.innerHTML = '+'; }
  }
</script>
</td>
<td>
</td>
</tr></table>
</div>
<hr/>
</form>
<hr/>

<br/>
</div>
<div id="footer">
<div class="intro"></div>
<ul id="useful-links">
<li id="links-actions"><ul class="links">
<li><a href="./">Home</a></li>
<li><span class="separator">| </span><span style="text-decoration:line-through"><a href="">New</a></span></li>
<li><span class="separator">| </span><a href="page.cgi?id=browse.html&amp;product=NetworkManager">Browse</a></li>
<li><span class="separator">| </span><a href="query.cgi">Search</a></li>
<li class="form">
<span class="separator">| </span>
<form action="buglist.cgi" method="get" onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
<input id="no_redirect_bottom" name="no_redirect" type="hidden" value="0"/>
<script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
<input class="txt" id="quicksearch_bottom" name="quicksearch" title="Quick Search" type="text" value=""/>
<input class="btn" id="find_bottom" type="submit" value="Search"/></form>
<a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>
<li><span class="separator">| </span><a href="page.cgi?id=reports.html">Reports</a></li>
<li>
<span class="separator">| </span>
<a href="http://www.bugzilla.org/docs/4.4/en/html/bug_page.html" target="_blank">Help</a>
</li>
<li id="mini_login_container_bottom">
<span class="separator">| </span>
<a href="show_bug.cgi?id=746422&amp;GoAheadAndLogIn=1" id="login_link_bottom" onclick="return show_mini_login_form('_bottom')">Log In</a>
<form action="show_bug.cgi?id=746422" class="mini_login bz_default_hidden" id="mini_login_bottom" method="POST" onsubmit="return check_mini_login_fields( '_bottom' );">
<input class="bz_login" id="Bugzilla_login_bottom" name="Bugzilla_login" onfocus="mini_login_on_focus('_bottom')" title="Login"/>
<input class="bz_password" id="Bugzilla_password_bottom" name="Bugzilla_password" title="Password" type="password"/>
<input class="bz_password bz_default_hidden bz_mini_login_help" id="Bugzilla_password_dummy_bottom" onfocus="mini_login_on_focus('_bottom')" title="Password" type="text" value="password"/>
<input checked="" class="bz_remember" id="Bugzilla_remember_bottom" name="Bugzilla_remember" type="checkbox" value="on"/>
<label for="Bugzilla_remember_bottom">Remember</label>
<input name="Bugzilla_login_token" type="hidden" value=""/>
<input id="log_in_bottom" name="GoAheadAndLogIn" type="submit" value="Log in"/>
<script type="text/javascript">
      mini_login_constants = {
          "login" : "login",
          "warning" : "You must set the login and password before logging in."
      };
      
      if (YAHOO.env.ua.gecko || YAHOO.env.ua.ie || YAHOO.env.ua.opera) {
          YAHOO.util.Event.onDOMReady(function() {
              init_mini_login_form('_bottom');
          });
      }
      else {
          YAHOO.util.Event.on(window, 'load', function () {
              window.setTimeout(function() {
                  init_mini_login_form('_bottom');
              }, 200);
          });
    }
    </script>
<a href="#" onclick="return hide_mini_login_form('_bottom')">[x]</a>
</form>
</li>
<li id="forgot_container_bottom">
<span class="separator">| </span>
<a href="show_bug.cgi?id=746422&amp;GoAheadAndLogIn=1#forgot" id="forgot_link_bottom" onclick="return show_forgot_form('_bottom')">Forgot Password</a>
<form action="token.cgi" class="mini_forgot bz_default_hidden" id="forgot_form_bottom" method="post">
<label for="login_bottom">Login:</label>
<input id="login_bottom" name="loginname" size="20" type="text"/>
<input id="forgot_button_bottom" type="submit" value="Reset Password"/>
<input name="a" type="hidden" value="reqpw"/>
<input id="token_bottom" name="token" type="hidden" value="1626107433-7PJBlU8jmGer641a9WCT4ww7LTM7JBNhPRXLID31iM0"/>
<a href="#" onclick="return hide_forgot_form('_bottom')">[x]</a>
</form>
</li>
</ul>
</li>
</ul>
<div class="outro"></div>
</div>
</body>
</html>