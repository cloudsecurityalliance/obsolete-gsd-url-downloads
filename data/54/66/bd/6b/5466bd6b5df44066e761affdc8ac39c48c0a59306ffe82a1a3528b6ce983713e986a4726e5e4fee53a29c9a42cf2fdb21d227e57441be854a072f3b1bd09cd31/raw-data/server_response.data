<!doctype html>
<html lang="en"> 
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <meta name="generator" content="Asciidoctor 2.0.10"> 
  <title>Gradle Enterprise Maven Extension User Manual | Gradle Enterprise Docs</title> 
  <script src="/cdn-cgi/apps/head/mT371IMKRtEtJHJl9q67D-hCq88.js"></script><link rel="stylesheet" href="css/asciidoctor.css"> 
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"> 
  <meta name="theme-color" content="#02303A"> 
  <meta name="code-samples-storage-name" content="preferred-maven-dsl"> 
  <meta name="code-samples-sorted-dsls" content="xml,java,bash"> <!-- favicon --> 
  <link rel="manifest" href="https://assets.gradle.com/icon/gradle-enterprise/site.webmanifest"> 
  <link rel="icon" href="https://assets.gradle.com/icon/gradle-enterprise/favicon.ico"> 
  <link rel="icon" type="image/png" sizes="32x32" href="https://assets.gradle.com/icon/gradle-enterprise/favicon-32x32.png"> 
  <link rel="icon" type="image/png" sizes="16x16" href="https://assets.gradle.com/icon/gradle-enterprise/favicon-16x16.png"> 
  <link rel="apple-touch-icon" sizes="180x180" href="https://assets.gradle.com/icon/gradle-enterprise/apple-touch-icon.png"> 
  <link rel="stylesheet" href="https://assets.gradle.com/lato/css/lato-font.css"> 
  <link rel="stylesheet" href="https://assets.gradle.com/inconsolata/inconsolata.css"> 
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script> 
  <script type="text/javascript" src="js/code-samples.js"></script> 
  <script type="text/javascript">
  function adjustTOC() {
    var tocLinks = $('#toc').find('a');
    var tocLinkHrefs = tocLinks.map(function() { return $(this).attr("href") }).get();

    var activeHref;
    var scrollTop = (document.documentElement.scrollTop || document.body.scrollTop);
    $('#content').find('a.anchor').each(function() {
      var link = $(this);
      var href = link.attr("href");
      if ($.inArray(href, tocLinkHrefs) != -1) {
        if (activeHref == null || Math.floor(link.offset().top) <= scrollTop) {
          activeHref = href;
        } else {
          return false;
        }
      }
    });
    tocLinks.filter(".active[href!='" + activeHref + "']").removeClass("active");
    tocLinks.filter("[href='" + activeHref + "']").addClass("active");
  }

  $(window).scroll(adjustTOC).click(adjustTOC);
  $(adjustTOC);
</script> 
 <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-4207603-1', 'auto', 'all', {
    'allowLinker': true
  });
  ga('all.set', 'transport', 'beacon');
  ga('all.require', 'linker');
  ga('all.linker:autoLink', ['gradle.org'], false, true);
  ga('all.send', 'pageview');

  ga(function() {
    ga_trackers = [];
    ga.getAll().forEach(function(x,i) {
      ga_trackers.push(x.get('name'));
    });
    ga_trackers.forEach(function(gaName) {
      ga(gaName + '.require', 'Clearbit', {
        mapping: {
          companyName: 'dimension1',
          companyDomain: 'dimension2',
          companyTags: 'dimension3',
          companySector: 'dimension4',
          companyIndustryGroup: 'dimension5',
          companyIndustry: 'dimension6',
          companySubIndustry: 'dimension7',
          companyType: 'dimension8',
          companyEmployeesRange: 'dimension9',
          companyAlexaRank: 'dimension10',
          companyCity: 'dimension11',
          companyState: 'dimension12',
          companyCountry: 'dimension13',
          companyFunding: 'dimension14',
          companyTech: 'dimension15',
          type: 'dimension16'
        }
      });
    });
});
</script>
<script async src="https://ga.clearbit.com/v1/ga.js?authorization=pk_067c93c26f8959abd1943501094c424f"></script>
<script type="text/javascript">
  piAId = '69052';
  piCId = '50982';
  (function() {
    function async_load() {
      var s = document.createElement('script'); s.type = 'text/javascript';
      s.src = ('https:' == document.location.protocol ? 'https://pi' : 'http://cdn') + '.pardot.com/pd.js';
      var c = document.getElementsByTagName('script')[0]; c.parentNode.insertBefore(s, c);
    }
    if(window.attachEvent) { window.attachEvent('onload', async_load); }
    else { window.addEventListener('load', async_load, false); }
  })();
</script>
</head> 
 <body class="article toc2 toc-right"> 
  <div id="header">
   <div style="padding-top: 10px;">
    <a href="https://gradle.com" alt="Gradlephant">
     <svg id="Layer_1" xmlns="http://www.w3.org/2000/svg" width="278px" height="43px" viewbox="160 0 278 86"> 
      <title>Gradle Enterprise</title> <path fill="#02303a" d="M148.76,52.31v14a18.29,18.29,0,0,1-5.59,2.82,21.82,21.82,0,0,1-6.36.9,21.08,21.08,0,0,1-7.64-1.32A17,17,0,0,1,123.33,65a15.85,15.85,0,0,1-3.74-5.58,18.78,18.78,0,0,1-1.31-7.08,19.32,19.32,0,0,1,1.27-7.13,16,16,0,0,1,3.58-5.58A16.16,16.16,0,0,1,128.78,36a20.37,20.37,0,0,1,7.44-1.29,21,21,0,0,1,3.92.34,20.43,20.43,0,0,1,3.39.91,15.16,15.16,0,0,1,2.85,1.42,17.3,17.3,0,0,1,2.36,1.84l-1.84,2.91a1.77,1.77,0,0,1-1.12.85,2,2,0,0,1-1.5-.35l-1.57-.91A10.16,10.16,0,0,0,141,41a14,14,0,0,0-2.17-.55,16.24,16.24,0,0,0-2.78-.22,11.91,11.91,0,0,0-4.61.86,9.78,9.78,0,0,0-3.52,2.46,11.08,11.08,0,0,0-2.24,3.84,14.92,14.92,0,0,0-.79,5,15.23,15.23,0,0,0,.85,5.28,11.2,11.2,0,0,0,2.38,3.94A10.15,10.15,0,0,0,131.78,64a14.42,14.42,0,0,0,8.25.45,16.84,16.84,0,0,0,2.94-1.1V57.13h-4.34a1.31,1.31,0,0,1-1-.35,1.14,1.14,0,0,1-.34-.84V52.31Zm10.48-2.93A10.48,10.48,0,0,1,162,45.93a5.83,5.83,0,0,1,3.73-1.25,4.55,4.55,0,0,1,2.71.74L168,49.83a1.14,1.14,0,0,1-.34.61,1,1,0,0,1-.61.18A6.89,6.89,0,0,1,166,50.5a8.19,8.19,0,0,0-1.37-.12,5,5,0,0,0-1.75.29,4.46,4.46,0,0,0-1.37.82,5.76,5.76,0,0,0-1.07,1.3,12.82,12.82,0,0,0-.87,1.74V69.6h-5.89V45.13h3.46a1.93,1.93,0,0,1,1.26.32,1.9,1.9,0,0,1,.48,1.16Zm11.35-.84a14.53,14.53,0,0,1,10.16-3.86,9.92,9.92,0,0,1,3.84.7,8.06,8.06,0,0,1,2.86,2,8.38,8.38,0,0,1,1.78,3,11.42,11.42,0,0,1,.61,3.82V69.6h-2.67a2.66,2.66,0,0,1-1.29-.25,1.73,1.73,0,0,1-.72-1l-.52-1.77A21.7,21.7,0,0,1,182.83,68,10.66,10.66,0,0,1,181,69.1a9.74,9.74,0,0,1-2,.66,11.78,11.78,0,0,1-2.4.23,9.32,9.32,0,0,1-2.86-.42,6.5,6.5,0,0,1-2.27-1.25,5.72,5.72,0,0,1-1.48-2.08,7.36,7.36,0,0,1-.52-2.88,5.53,5.53,0,0,1,1.32-3.61,8.52,8.52,0,0,1,1.83-1.57,12.15,12.15,0,0,1,2.75-1.29,24.42,24.42,0,0,1,3.81-.89,38.51,38.51,0,0,1,5-.42V54.15A5.36,5.36,0,0,0,183,50.51a3.83,3.83,0,0,0-3-1.18,7.28,7.28,0,0,0-2.37.33,10.29,10.29,0,0,0-1.66.76l-1.3.75a2.59,2.59,0,0,1-1.3.33,1.74,1.74,0,0,1-1-.32,2.71,2.71,0,0,1-.69-.75Zm13.5,10.62a31.67,31.67,0,0,0-4.29.44,11.3,11.3,0,0,0-2.79.82,3.69,3.69,0,0,0-1.51,1.17,2.89,2.89,0,0,0,.47,3.67,3.93,3.93,0,0,0,2.39.67,7.09,7.09,0,0,0,3.14-.65,9.42,9.42,0,0,0,2.59-2Zm32.53-25V69.6H213a1.38,1.38,0,0,1-1.48-1.07l-.5-2.36a12.25,12.25,0,0,1-3.4,2.74,9.17,9.17,0,0,1-4.47,1,8.14,8.14,0,0,1-3.67-.83,8.32,8.32,0,0,1-2.88-2.42,11.76,11.76,0,0,1-1.86-3.93,19.67,19.67,0,0,1-.65-5.34,16.51,16.51,0,0,1,.74-5.06A12.3,12.3,0,0,1,197,48.33a9.82,9.82,0,0,1,3.31-2.68,9.53,9.53,0,0,1,4.35-1,8.61,8.61,0,0,1,3.5.64,9,9,0,0,1,2.6,1.74V34.16Zm-5.89,17.22a5.87,5.87,0,0,0-2.18-1.72,6.5,6.5,0,0,0-2.54-.5,5.71,5.71,0,0,0-2.41.5,4.87,4.87,0,0,0-1.84,1.52,7.34,7.34,0,0,0-1.17,2.58,14.74,14.74,0,0,0-.4,3.68,16.5,16.5,0,0,0,.34,3.64,7.6,7.6,0,0,0,1,2.43,3.79,3.79,0,0,0,1.58,1.36,5,5,0,0,0,2.07.42,6,6,0,0,0,3.13-.77,9,9,0,0,0,2.43-2.17Zm17.68-17.22V69.6h-5.9V34.16Zm10.42,24a11.72,11.72,0,0,0,.67,3.25,6.69,6.69,0,0,0,1.38,2.27,5.41,5.41,0,0,0,2,1.34,7.52,7.52,0,0,0,2.61.44,7.84,7.84,0,0,0,2.47-.34,11.13,11.13,0,0,0,1.81-.74c.52-.27,1-.51,1.36-.74a2.31,2.31,0,0,1,1.14-.33,1.2,1.2,0,0,1,1.09.55L255.1,66a9.91,9.91,0,0,1-2.2,1.91,12,12,0,0,1-2.54,1.25,14.06,14.06,0,0,1-2.69.65A18.92,18.92,0,0,1,245,70a13.18,13.18,0,0,1-4.75-.84,10.76,10.76,0,0,1-3.82-2.51,11.7,11.7,0,0,1-2.55-4.1,15.9,15.9,0,0,1-.93-5.67,13.55,13.55,0,0,1,.81-4.71,11.34,11.34,0,0,1,2.33-3.84,11,11,0,0,1,3.7-2.59,12.23,12.23,0,0,1,4.92-1,12,12,0,0,1,4.27.74,9.17,9.17,0,0,1,3.36,2.16,10,10,0,0,1,2.21,3.48,13.06,13.06,0,0,1,.8,4.71,3.82,3.82,0,0,1-.29,1.8,1.17,1.17,0,0,1-1.09.47Zm11.23-3.56a7,7,0,0,0-.32-2.16,5.06,5.06,0,0,0-1-1.77,4.59,4.59,0,0,0-1.64-1.21,5.68,5.68,0,0,0-2.3-.44,5.47,5.47,0,0,0-4,1.46A7.1,7.1,0,0,0,239,54.55Zm43.65,13,0,2H273.44V35.85h20.23v2H275.9V51.52h14.78v2H275.9V67.58ZM301.37,50a13.47,13.47,0,0,1,3.8-3.29A9.47,9.47,0,0,1,310,45.49a9,9,0,0,1,3.45.62,6.38,6.38,0,0,1,2.47,1.79,7.92,7.92,0,0,1,1.47,2.81,12.58,12.58,0,0,1,.51,3.72V69.6h-2.29V54.43a8.1,8.1,0,0,0-1.53-5.23,5.63,5.63,0,0,0-4.65-1.9,8.49,8.49,0,0,0-4.33,1.18,12.19,12.19,0,0,0-3.59,3.28V69.6H299.2V45.87h1.26a.63.63,0,0,1,.69.6Zm30.24,20a5.1,5.1,0,0,1-3.75-1.34,5.6,5.6,0,0,1-1.35-4.13V48.3H323.1a.6.6,0,0,1-.43-.14.5.5,0,0,1-.17-.4v-.89l4.06-.28.57-8.49a1,1,0,0,1,.19-.39.51.51,0,0,1,.41-.16h1.07v9.06h7.49V48.3H328.8V64.41a5,5,0,0,0,.25,1.68,3.18,3.18,0,0,0,.69,1.15,2.63,2.63,0,0,0,1,.67,4.12,4.12,0,0,0,2.77,0,5.62,5.62,0,0,0,1.07-.54,6.78,6.78,0,0,0,.74-.55.79.79,0,0,1,.45-.25.5.5,0,0,1,.38.24l.62,1a6.6,6.6,0,0,1-2.3,1.61A7.25,7.25,0,0,1,331.61,70ZM342.2,56.8v.45a15.87,15.87,0,0,0,.63,4.7,9.69,9.69,0,0,0,1.76,3.4,7.22,7.22,0,0,0,2.77,2.06,9.16,9.16,0,0,0,3.62.69,10.88,10.88,0,0,0,3.1-.39,11.8,11.8,0,0,0,2.21-.88,11.31,11.31,0,0,0,1.42-.89,1.61,1.61,0,0,1,.76-.39.55.55,0,0,1,.48.24l.62.76a6.53,6.53,0,0,1-1.52,1.34A11.05,11.05,0,0,1,356,69a15.54,15.54,0,0,1-2.48.7,13.35,13.35,0,0,1-2.67.26,11.32,11.32,0,0,1-4.43-.84,9.52,9.52,0,0,1-3.44-2.47,11.22,11.22,0,0,1-2.2-4,17.07,17.07,0,0,1-.78-5.38,14.54,14.54,0,0,1,.73-4.71,10.59,10.59,0,0,1,2.1-3.72,9.55,9.55,0,0,1,3.36-2.45,11,11,0,0,1,4.52-.88,9.85,9.85,0,0,1,3.72.69,8.25,8.25,0,0,1,3,2,9.4,9.4,0,0,1,2,3.25,12.68,12.68,0,0,1,.72,4.44,1.26,1.26,0,0,1-.14.72.57.57,0,0,1-.48.19ZM358,55.34a10.4,10.4,0,0,0-.53-3.42A7.36,7.36,0,0,0,356,49.35a6.72,6.72,0,0,0-2.32-1.61,7.74,7.74,0,0,0-3-.56,8.79,8.79,0,0,0-3.3.58,7.15,7.15,0,0,0-2.51,1.64A8.3,8.3,0,0,0,343.18,52a12.17,12.17,0,0,0-.86,3.36Zm10.4-3.74A14.86,14.86,0,0,1,369.7,49a7.64,7.64,0,0,1,1.62-1.92,6.53,6.53,0,0,1,2.05-1.21,7.38,7.38,0,0,1,2.51-.41,7.85,7.85,0,0,1,1.46.13,3.5,3.5,0,0,1,1.26.46l-.19,1.58A.46.46,0,0,1,378,48a3.65,3.65,0,0,1-.87-.17,5.8,5.8,0,0,0-1.54-.17,6.56,6.56,0,0,0-2.44.42,5.7,5.7,0,0,0-1.91,1.25,7.94,7.94,0,0,0-1.48,2.07,19.85,19.85,0,0,0-1.16,2.82V69.6h-2.29V45.87h1.22a.79.79,0,0,1,.57.17,1,1,0,0,1,.22.57Zm16.89-1.46A12.63,12.63,0,0,1,389,46.73a9.08,9.08,0,0,1,4.74-1.26,8.26,8.26,0,0,1,6.81,3q2.44,3,2.44,9.08a16.55,16.55,0,0,1-.68,4.86,11.57,11.57,0,0,1-2,3.91A9.59,9.59,0,0,1,397.08,69a9.79,9.79,0,0,1-4.43,1,9.19,9.19,0,0,1-4.17-.88,8.59,8.59,0,0,1-3.06-2.6V78h-2.28V45.87h1.26a.63.63,0,0,1,.69.6Zm.09,14.29a10.76,10.76,0,0,0,1.45,1.73,7.25,7.25,0,0,0,1.58,1.14,6.53,6.53,0,0,0,1.78.64,10.58,10.58,0,0,0,2,.19,8.34,8.34,0,0,0,3.68-.77,7.25,7.25,0,0,0,2.63-2.16,9.69,9.69,0,0,0,1.6-3.34,15.92,15.92,0,0,0,.54-4.28c0-3.53-.66-6.12-2-7.78a6.68,6.68,0,0,0-5.61-2.5,7.76,7.76,0,0,0-4.26,1.22,12.09,12.09,0,0,0-3.42,3.39ZM411.61,51.6A14.86,14.86,0,0,1,412.87,49a7.85,7.85,0,0,1,1.62-1.92,6.53,6.53,0,0,1,2.05-1.21,7.44,7.44,0,0,1,2.52-.41,7.82,7.82,0,0,1,1.45.13,3.62,3.62,0,0,1,1.27.46l-.2,1.58a.46.46,0,0,1-.45.38,3.65,3.65,0,0,1-.87-.17,5.8,5.8,0,0,0-1.54-.17,6.56,6.56,0,0,0-2.44.42,5.7,5.7,0,0,0-1.91,1.25,7.94,7.94,0,0,0-1.48,2.07,19.85,19.85,0,0,0-1.16,2.82V69.6h-2.29V45.87h1.22a.79.79,0,0,1,.57.17,1,1,0,0,1,.22.57Zm18.2-13.91a1.8,1.8,0,0,1-.18.8,2.52,2.52,0,0,1-.46.66,2.19,2.19,0,0,1-.67.45,2.13,2.13,0,0,1-1.62,0,2.08,2.08,0,0,1-.67-.45,2.27,2.27,0,0,1-.45-.66,1.94,1.94,0,0,1-.17-.8,2.08,2.08,0,0,1,.17-.82,2.12,2.12,0,0,1,.45-.68,2.28,2.28,0,0,1,.67-.46,2.13,2.13,0,0,1,1.62,0,2.42,2.42,0,0,1,.67.46,2.33,2.33,0,0,1,.46.68A1.92,1.92,0,0,1,429.81,37.69Zm-1,8.18V69.6h-2.27V45.87ZM450,48.81a.6.6,0,0,1-.55.33,1.23,1.23,0,0,1-.67-.3,10.17,10.17,0,0,0-1.08-.67,8.9,8.9,0,0,0-1.69-.66,8.48,8.48,0,0,0-2.43-.3,7,7,0,0,0-2.35.37,5.53,5.53,0,0,0-1.81,1A4.32,4.32,0,0,0,438.23,50a3.88,3.88,0,0,0-.4,1.73,3,3,0,0,0,.57,1.86,5,5,0,0,0,1.49,1.26,10.8,10.8,0,0,0,2.11.91l2.42.76c.82.26,1.63.54,2.42.85A8.7,8.7,0,0,1,449,58.54a5.37,5.37,0,0,1,1.49,1.69,4.75,4.75,0,0,1,.58,2.43,7.63,7.63,0,0,1-.55,2.89,6.43,6.43,0,0,1-1.61,2.31,7.67,7.67,0,0,1-2.61,1.55,10.07,10.07,0,0,1-3.56.58,10.63,10.63,0,0,1-4.31-.8,12.38,12.38,0,0,1-3.25-2.09l.53-.81a1,1,0,0,1,.27-.29.82.82,0,0,1,.42-.09,1.26,1.26,0,0,1,.75.38,8.4,8.4,0,0,0,1.18.82,10.09,10.09,0,0,0,1.82.83,8.33,8.33,0,0,0,2.69.38,7.72,7.72,0,0,0,2.65-.42,5.64,5.64,0,0,0,1.9-1.13,4.69,4.69,0,0,0,1.16-1.69,5.37,5.37,0,0,0,.39-2,3.26,3.26,0,0,0-.57-2,4.88,4.88,0,0,0-1.5-1.34,10,10,0,0,0-2.11-.93L442.29,58c-.83-.26-1.64-.54-2.42-.84a9,9,0,0,1-2.12-1.14,5.64,5.64,0,0,1-1.5-1.69,4.84,4.84,0,0,1-.57-2.46,5.61,5.61,0,0,1,.55-2.44,6.05,6.05,0,0,1,1.56-2A7.71,7.71,0,0,1,440.26,46a9.84,9.84,0,0,1,3.27-.52,11.18,11.18,0,0,1,3.85.62A9,9,0,0,1,450.44,48Zm8,8v.45a15.89,15.89,0,0,0,.62,4.7,9.69,9.69,0,0,0,1.76,3.4,7.3,7.3,0,0,0,2.77,2.06,9.16,9.16,0,0,0,3.62.69,10.88,10.88,0,0,0,3.1-.39,11.8,11.8,0,0,0,2.21-.88,11.31,11.31,0,0,0,1.42-.89,1.61,1.61,0,0,1,.76-.39.55.55,0,0,1,.48.24l.62.76a6.53,6.53,0,0,1-1.52,1.34A11.05,11.05,0,0,1,471.76,69a15.54,15.54,0,0,1-2.48.7,13.32,13.32,0,0,1-2.66.26,11.33,11.33,0,0,1-4.44-.84,9.52,9.52,0,0,1-3.44-2.47,11.22,11.22,0,0,1-2.2-4,17.07,17.07,0,0,1-.78-5.38,14.54,14.54,0,0,1,.73-4.71,10.75,10.75,0,0,1,2.1-3.72A9.55,9.55,0,0,1,462,46.37a11,11,0,0,1,4.52-.88,9.85,9.85,0,0,1,3.72.69,8.25,8.25,0,0,1,3,2,9.4,9.4,0,0,1,2,3.25,12.68,12.68,0,0,1,.72,4.44,1.26,1.26,0,0,1-.14.72.57.57,0,0,1-.48.19Zm15.83-1.46a10.4,10.4,0,0,0-.53-3.42,7.36,7.36,0,0,0-1.52-2.57,6.72,6.72,0,0,0-2.32-1.61,7.74,7.74,0,0,0-3-.56,8.79,8.79,0,0,0-3.3.58,7.33,7.33,0,0,0-2.51,1.64A8.3,8.3,0,0,0,459,52a12.17,12.17,0,0,0-.86,3.36ZM106,10A13.74,13.74,0,0,0,86.91,9.7a1.27,1.27,0,0,0-.41.93,1.29,1.29,0,0,0,.38.95l1.73,1.73a1.31,1.31,0,0,0,1.71.12A7.87,7.87,0,0,1,100.6,25.3C89.7,36.2,75.14,5.65,42.13,21.36a4.48,4.48,0,0,0-2,6.29l5.67,9.8a4.47,4.47,0,0,0,6.06,1.66L52,39l-.11.08,2.51-1.4a58.26,58.26,0,0,0,7.91-5.9,1.38,1.38,0,0,1,1.8-.06h0a1.3,1.3,0,0,1,.06,2A58.84,58.84,0,0,1,55.84,40l-.09,0-2.51,1.41a7.2,7.2,0,0,1-9.7-2.67l-5.36-9.24C27.9,36.81,21.67,50.8,25,68.49a1.3,1.3,0,0,0,1.28,1.07h6.09a1.32,1.32,0,0,0,1.3-1.15,8.93,8.93,0,0,1,17.72,0,1.31,1.31,0,0,0,1.29,1.15h5.94a1.32,1.32,0,0,0,1.3-1.15,8.93,8.93,0,0,1,17.72,0A1.31,1.31,0,0,0,79,69.56h5.87a1.32,1.32,0,0,0,1.31-1.29c.13-8.28,2.36-17.78,8.73-22.55C116.89,29.24,111.09,15.12,106,10ZM83.52,34.91l-4.2-2.11h0a2.64,2.64,0,1,1,4.2,2.12Z" /> 
     </svg> </a>
   </div> 
   <h1>Gradle Enterprise Maven Extension User Manual</h1> 
   <div id="toc" class="toc2"> 
    <div id="toctitle">
     Table of Contents
    </div> 
    <ul class="sectlevel1"> 
     <li><a href="#getting_set_up">Getting set up</a></li> 
     <li><a href="#using_build_scans">Using build scans</a> 
      <ul class="sectlevel2"> 
       <li><a href="#enabling_publication_of_build_scans">Enabling publication of build scans</a> 
        <ul class="sectlevel3"> 
         <li><a href="#set_the_location_of_your_gradle_enterprise_instance">Set the location of your Gradle Enterprise instance</a></li> 
         <li><a href="#accept_the_scans_gradle_com_terms_of_service">Accept the scans.gradle.com terms of service</a></li> 
        </ul> </li> 
       <li><a href="#integrating_your_ci_tool">Integrating your CI tool</a></li> 
       <li><a href="#controlling_when_build_scans_are_published">Controlling when build scans are published</a> 
        <ul class="sectlevel3"> 
         <li><a href="#publishing_every_build_run">Publishing every build run</a></li> 
         <li><a href="#publishing_on_demand">Publishing on demand</a></li> 
         <li><a href="#publishing_based_on_criteria">Publishing based on criteria</a></li> 
        </ul> </li> 
       <li><a href="#configuring_background_uploading">Configuring background uploading</a></li> 
       <li><a href="#authenticating_with_gradle_enterprise">Authenticating with Gradle Enterprise</a> 
        <ul class="sectlevel3"> 
         <li><a href="#automated_access_key_provisioning">Automated access key provisioning</a></li> 
         <li><a href="#manual_access_key_configuration">Manual access key configuration</a></li> 
        </ul> </li> 
       <li><a href="#capturing_goal_input_files">Capturing goal input files</a> 
        <ul class="sectlevel3"> 
         <li><a href="#when_to_enable">When to enable</a></li> 
         <li><a href="#how_to_enable">How to enable</a></li> 
        </ul> </li> 
       <li><a href="#capturing_build_and_test_outputs">Capturing build and test outputs</a> 
        <ul class="sectlevel3"> 
         <li><a href="#when_to_disable">When to disable</a></li> 
         <li><a href="#how_to_disable">How to disable</a></li> 
        </ul> </li> 
       <li><a href="#extending_build_scans">Extending build scans</a> 
        <ul class="sectlevel3"> 
         <li><a href="#adding_tags">Adding tags</a></li> 
         <li><a href="#adding_links">Adding links</a></li> 
         <li><a href="#adding_custom_values">Adding custom values</a></li> 
        </ul> </li> 
       <li><a href="#callbacks">Callbacks</a> 
        <ul class="sectlevel3"> 
         <li><a href="#executing_operations_at_the_end_of_the_build">Executing operations at the end of the build</a></li> 
         <li><a href="#executing_operations_when_a_build_scan_is_published">Executing operations when a build scan is published</a></li> 
         <li><a href="#executing_expensive_operations">Executing expensive operations</a></li> 
         <li><a href="#executing_operations_only_once">Executing operations only once</a></li> 
         <li><a href="#obfuscating_identifying_data">Obfuscating identifying data</a></li> 
        </ul> </li> 
       <li><a href="#troubleshooting">Troubleshooting</a> 
        <ul class="sectlevel3"> 
         <li><a href="#failed_background_build_scan_uploads">Failed background build scan uploads</a></li> 
         <li><a href="#slow_resolution_of_host_name">Slow resolution of host name</a></li> 
         <li><a href="#forked_maven_builds">Forked Maven builds</a></li> 
        </ul> </li> 
      </ul> </li> 
     <li><a href="#using_the_build_cache">Using the build cache</a> 
      <ul class="sectlevel2"> 
       <li><a href="#configuring_the_build_cache">Configuring the build cache</a> 
        <ul class="sectlevel3"> 
         <li><a href="#configuring_the_local_cache">Configuring the local cache</a></li> 
         <li><a href="#configuring_the_remote_cache">Configuring the remote cache</a></li> 
        </ul> </li> 
       <li><a href="#normalization">Runtime classpath normalization</a> 
        <ul class="sectlevel3"> 
         <li><a href="#ignoring_arbitrary_files">Ignoring arbitrary files</a></li> 
         <li><a href="#ignoring_specific_entries_in_properties_files">Ignoring specific entries in properties files</a></li> 
         <li><a href="#normalizing_contents_of_meta_inf">Normalizing contents of META-INF</a></li> 
        </ul> </li> 
       <li><a href="#declaring_inputs_and_outputs">Declaring inputs and outputs</a> 
        <ul class="sectlevel3"> 
         <li><a href="#adding_inputs_and_outputs">Adding additional inputs and outputs to a plugin or execution</a></li> 
         <li><a href="#disabling_build_caching_for_a_plugin_or_execution">Disabling build caching for a plugin or execution</a></li> 
         <li><a href="#making_other_goals_cacheable">Making other goals cacheable</a></li> 
        </ul> </li> 
       <li><a href="#solving_problems_with_build_caching">Troubleshooting</a> 
        <ul class="sectlevel3"> 
         <li><a href="#debugging_cache_operations">Debugging cache operations</a></li> 
         <li><a href="#finding_the_cause_of_cache_misses">Finding the cause of cache misses</a></li> 
         <li><a href="#solving_common_causes_of_cache_misses">Solving common causes of cache misses</a></li> 
         <li><a href="#rerunning_goals">Rerunning goals to deal with invalid cache entries</a></li> 
        </ul> </li> 
      </ul> </li> 
     <li><a href="#test_distribution">Using test distribution</a> 
      <ul class="sectlevel2"> 
       <li><a href="#how_it_works">How it works</a></li> 
       <li><a href="#compatible_types_of_tests">Compatible types of tests</a> 
        <ul class="sectlevel3"> 
         <li><a href="#external_test_resources">External test resources</a></li> 
        </ul> </li> 
       <li><a href="#prerequisites">Prerequisites</a></li> 
       <li><a href="#configuration">Configuration</a> 
        <ul class="sectlevel3"> 
         <li><a href="#enabling_test_distribution">Enabling test distribution</a></li> 
         <li><a href="#executors">Executors</a></li> 
         <li><a href="#test_distribution_config_requirements">Requirements</a></li> 
         <li><a href="#wait_timeout">Wait timeout</a></li> 
         <li><a href="#inputs_and_outputs">Inputs and outputs</a></li> 
         <li><a href="#test_distribution_config_other_parameters">Other configuration parameters</a></li> 
        </ul> </li> 
       <li><a href="#integration_with_other_plugins">Integration with other plugins</a> 
        <ul class="sectlevel3"> 
         <li><a href="#test_distribution_jacoco">JaCoCo plugin</a></li> 
        </ul> </li> 
       <li><a href="#troubleshooting_2">Troubleshooting</a> 
        <ul class="sectlevel3"> 
         <li><a href="#identifying_the_executor_of_a_failed_test">Identifying the executor of a failed test</a></li> 
         <li><a href="#classes_sharing_static_state">Classes sharing static state</a></li> 
         <li><a href="#test_distribution_tests_reading_files_from_src_test_resources">Tests reading files from <code>src/test/resources</code></a></li> 
         <li><a href="#provisioning_an_external_resource_for_many_tests">Provisioning an external resource for many tests</a></li> 
        </ul> </li> 
      </ul> </li> 
     <li><a href="#configuration_reference">Appendix A: Configuration reference</a> 
      <ul class="sectlevel2"> 
       <li><a href="#gradle_enterprise_xml">gradle-enterprise.xml</a> 
        <ul class="sectlevel3"> 
         <li><a href="#expression_support">Expression support</a></li> 
        </ul> </li> 
       <li><a href="#pom_xml">pom.xml</a></li> 
       <li><a href="#custom_extension">Programmatic configuration</a></li> 
      </ul> </li> 
     <li><a href="#captured_information">Appendix B: Captured information</a> 
      <ul class="sectlevel2"> 
       <li><a href="#listing">Listing</a></li> 
       <li><a href="#access">Access</a></li> 
      </ul> </li> 
     <li><a href="#cacheable_plugins_and_goals">Appendix C: Cacheable plugins and goals</a> 
      <ul class="sectlevel2"> 
       <li><a href="#maven_compiler_plugin">maven-compiler-plugin</a> 
        <ul class="sectlevel3"> 
         <li><a href="#compile_avoidance">Compile avoidance</a></li> 
        </ul> </li> 
       <li><a href="#maven_surefire_plugin_and_maven_failsafe_plugin">maven-surefire-plugin and maven-failsafe-plugin</a></li> 
       <li><a href="#jacoco_maven_plugin">jacoco-maven-plugin</a></li> 
       <li><a href="#maven-jaxb2-plugin">maven-jaxb2-plugin (org.jvnet.jaxb2.maven2)</a></li> 
       <li><a href="#maven_javadoc_plugin">maven-javadoc-plugin</a></li> 
       <li><a href="#maven_checkstyle_plugin">maven-checkstyle-plugin</a></li> 
      </ul> </li> 
     <li><a href="#anatomy_of_the_gradle_enterprise_directory">Appendix D: Anatomy of the .gradle-enterprise directory</a></li> 
     <li><a href="#release_history">Appendix E: Release history</a></li> 
     <li><a href="#compatibility_with_apache_maven_and_gradle_enterprise">Appendix F: Compatibility with Apache Maven and Gradle Enterprise</a></li> 
     <li><a href="#compatibility_with_apache_maven_plugins">Appendix G: Compatibility with Apache Maven plugins</a></li> 
     <li><a href="#compatibility_with_intellij_idea">Appendix H: Compatibility with IntelliJ IDEA</a></li> 
     <li><a href="#verifying_the_signature_of_the_extension_jar">Appendix I: Verifying the signature of the extension jar</a></li> 
    </ul> 
   </div> 
  </div> 
  <div id="content"> 
   <div id="preamble"> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>The Gradle Enterprise Maven extension improves your development workflow and your productivity, when developing and maintaining Apache Maven™ builds. The extension enables <a href="#using_build_scans">build scan insights</a>, <a href="#using_the_build_cache">build cache acceleration</a>, and <a href="#test_distribution">test distribution</a>.</p> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="getting_set_up"><a class="anchor" href="#getting_set_up"></a><a class="link" href="#getting_set_up">Getting set up</a></h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>You apply the Gradle Enterprise Maven extension to your build by adding the following configuration block to a new or existing <code>.mvn/extensions.xml</code> file in your Maven project. The extension will be downloaded automatically from <a href="https://search.maven.org/search?q=a:gradle-enterprise-maven-extension">Maven Central</a> once you run your build.</p> 
     </div> 
     <div class="listingblock silver"> 
      <div class="title">
       Add the following to <code>.mvn/extensions.xml</code>
      </div> 
      <div class="content"> 
       <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;extensions&gt;
  &lt;extension&gt;
    &lt;groupId&gt;com.gradle&lt;/groupId&gt;
    &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
    &lt;version&gt;1.11.1&lt;/version&gt;
  &lt;/extension&gt;
&lt;/extensions&gt;</code></pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p>You can also add the extension jar into the <code>lib/ext</code> folder of your Maven installation. This is useful if you are packaging a custom Maven installation for your organization and you want Gradle Enterprise to be available to all your projects out of the box.</p> 
     </div> 
     <div class="paragraph"> 
      <p>The extension is configured through one or more <code>gradle-enterprise.xml</code> files and the <code>pluginManagement</code> sections of your <code>pom.xml</code> files. Similarly to the <code>extensions.xml</code> file, the <code>gradle-enterprise.xml</code> file can be placed in your Maven project’s <code>.mvn</code> directory. Unless you intend to publish build scans to <a href="https://scans.gradle.com">scans.gradle.com</a>, the minimum configuration required is that of the Gradle Enterprise server URL.</p> 
     </div> 
     <div class="listingblock silver"> 
      <div class="title">
       Add the following to <code>.mvn/gradle-enterprise.xml</code>
      </div> 
      <div class="content"> 
       <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;server&gt;
    &lt;url&gt;https://gradle-enterprise.mycompany.com&lt;/url&gt;
  &lt;/server&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p>Other mechanisms for configuring Gradle Enterprise are available, including alternate file locations for <code>gradle-enterprise.xml</code> and programmatic configuration with a custom Maven extension. For the full reference of the extension’s configuration, see the <a href="#gradle_enterprise_xml">configuration reference</a>. All available configuration options will be introduced over the coming sections.</p> 
     </div> 
     <div class="admonitionblock note"> 
      <table> 
       <tbody>
        <tr> 
         <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
         <td class="content"> 
          <div class="paragraph"> 
           <p>Since version 1.2, the Gradle Enterprise Maven extension captures an identifier used to uniquely represent a given workspace.</p> 
          </div> 
          <div class="ulist"> 
           <ul> 
            <li> <p>For versions 1.2.3+, this identifier is stored under <code>.mvn/.gradle-enterprise/gradle-enterprise-workspace-id</code>. The <code>.mvn/.gradle-enterprise</code> folder should <strong>NOT</strong> be committed under version control.</p> </li> 
            <li> <p>For versions [1.2 - 1.2.2], the identifier is stored under <code>.mvn/gradle-enterprise-workspace-id.txt</code>. The file is migrated to the new location when upgrading to a Gradle Enterprise Maven extension version that is at least 1.2.3. The <code>.mvn/gradle-enterprise-workspace-id.txt</code> file should <strong>NOT</strong> be committed under version control.</p> </li> 
           </ul> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="using_build_scans"><a class="anchor" href="#using_build_scans"></a><a class="link" href="#using_build_scans">Using build scans</a></h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>Build scans are a record of what happened during a build, captured and visualized by Gradle Enterprise.</p> 
     </div> 
     <div class="paragraph"> 
      <p>Build scans are an important tool for developing and maintaining Maven builds. They provide insights into exactly what your builds are doing, helping you identify problems with the build environment, performance, and more. They can also help you understand and improve the build more generally, and make collaborating with others easier.</p> 
     </div> 
     <div id="img-build-scans" class="imageblock"> 
      <div class="content"> 
       <img src="images/build-scan-service-overview.svg" alt="build scan service overview" width="600"> 
      </div> 
      <div class="title">
       Figure 1. build scans can be published to Gradle Enterprise or scans.gradle.com
      </div> 
     </div> 
     <div class="paragraph"> 
      <p><a href="https://gradle.com/enterprise">Gradle Enterprise</a> is a commercial product for companies that can be hosted on their own systems and ships with a build scan server and a build cache backend implementation. <a href="https://scans.gradle.com">scans.gradle.com</a> is a build scan server available for free, hosted by Gradle Inc.</p> 
     </div> 
     <div class="paragraph"> 
      <p>There are two aspects to working with build scans:</p> 
     </div> 
     <div class="ulist"> 
      <ul> 
       <li> <p>Data collection</p> </li> 
       <li> <p>Publishing</p> </li> 
      </ul> 
     </div> 
     <div class="sect2"> 
      <h3 id="enabling_publication_of_build_scans"><a class="anchor" href="#enabling_publication_of_build_scans"></a><a class="link" href="#enabling_publication_of_build_scans">Enabling publication of build scans</a></h3> 
      <div class="paragraph"> 
       <p>Enabling publication of build scans depends on whether you are publishing to a Gradle Enterprise instance or scans.gradle.com. In the case of Gradle Enterprise, you need to specify the server’s location. In the case of scans.gradle.com, you need to accept the terms of service.</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="set_the_location_of_your_gradle_enterprise_instance"><a class="anchor" href="#set_the_location_of_your_gradle_enterprise_instance"></a><a class="link" href="#set_the_location_of_your_gradle_enterprise_instance">Set the location of your Gradle Enterprise instance</a></h4> 
       <div class="paragraph"> 
        <p>When you publish build scans to a Gradle Enterprise instance, you must configure the location of the Gradle Enterprise server.</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.setServer("https://gradle-enterprise.mycompany.com");</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">$ mvn package -Dgradle.enterprise.url=https://gradle-enterprise.mycompany.com</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;server&gt;
    &lt;url&gt;https://gradle-enterprise.mycompany.com&lt;/url&gt;
  &lt;/server&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>The precise URL you need depends on the hostname that your Gradle Enterprise instance has been configured with. If in doubt, be sure to ask whomever manages that instance.</p> 
       </div> 
       <div class="paragraph"> 
        <p>You may encounter a warning about an untrusted certificate when connecting to Gradle Enterprise over HTTPS. The ideal solution is for someone to add a valid SSL certificate to the Gradle Enterprise instance, but we recognise that you may not be able to do that. In this case, set the <code>allowUntrusted</code> option to <code>true</code>:</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.setAllowUntrusted(true);</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Allowing untrusted certificate cannot be done via command-line argument.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;server&gt;
    &lt;allowUntrusted&gt;true&lt;/allowUntrusted&gt;
  &lt;/server&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>This is a convenient workaround, but you shouldn’t use it as a long-term solution.</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="accept_the_scans_gradle_com_terms_of_service"><a class="anchor" href="#accept_the_scans_gradle_com_terms_of_service"></a><a class="link" href="#accept_the_scans_gradle_com_terms_of_service">Accept the scans.gradle.com terms of service</a></h4> 
       <div class="paragraph"> 
        <p>In order to publish to scans.gradle.com, you need to accept the terms of service.</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.setTermsOfServiceUrl("https://gradle.com/terms-of-service");
buildScan.setTermsOfServiceAgree("true");</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Accepting the terms of service cannot be done via command-line argument.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;termsOfService&gt;
      &lt;url&gt;https://gradle.com/terms-of-service&lt;/url&gt;
      &lt;accept&gt;true&lt;/accept&gt;
    &lt;/termsOfService&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>Be sure to check the terms of service at the URL shown in the above fragment.</p> 
       </div> 
       <div class="paragraph"> 
        <p>Once you have accepted the terms of service, you can start publishing build scans to scans.gradle.com.</p> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> 
            <div class="paragraph"> 
             <p>If you don’t accept the terms of service, as explained above, you will be prompted to agree to the terms of service on the command line, before any attempt of publishing a build scan. This can be useful if you share your <code>gradle-enterprise.xml</code> file with others, and you want everyone to explicitly accept those terms of service.</p> 
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="integrating_your_ci_tool"><a class="anchor" href="#integrating_your_ci_tool"></a><a class="link" href="#integrating_your_ci_tool">Integrating your CI tool</a></h3> 
      <div class="paragraph"> 
       <p>The <a href="https://plugins.jenkins.io/gradle">Gradle plugin for Jenkins</a> prominently displays links to the build scan for any Maven builds that produce build scans. This makes viewing the build scan of CI builds much easier.</p> 
      </div> 
      <div class="imageblock shadow"> 
       <div class="content"> 
        <img src="images/jenkins.png" alt="jenkins" width="400"> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>A <a href="https://github.com/etiennestuder/teamcity-build-scan-plugin">TeamCity build scan plugin</a> is also available that provides a prominent link to the build scan for executed builds.</p> 
      </div> 
      <div class="imageblock shadow"> 
       <div class="content"> 
        <img src="images/teamcity.png" alt="teamcity" width="600"> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="controlling_when_build_scans_are_published"><a class="anchor" href="#controlling_when_build_scans_are_published"></a><a class="link" href="#controlling_when_build_scans_are_published">Controlling when build scans are published</a></h3> 
      <div class="paragraph"> 
       <p>Once you’ve gone through the initial setup of the previous section, you are ready to start publishing build scans. But when should you publish them? Every time you run a build? Only when the build fails? It’s up to you. The Gradle Enterprise Maven extension has several options that allow you to use whatever approach works best.</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="publishing_every_build_run"><a class="anchor" href="#publishing_every_build_run"></a><a class="link" href="#publishing_every_build_run">Publishing every build run</a></h4> 
       <div class="paragraph"> 
        <p>This is the default. There are many advantages to publishing build scans regularly, such as being able to track the behavior and performance of a build over time. It makes no sense relying on ad-hoc publishing of scans in such a situation as it’s easy to forget on the command line. Should you decide to explicitly enforce this default option, you can do this as follows:</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.publishAlways();</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Always publishing a build scan cannot be done via command-line argument.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;publish&gt;ALWAYS&lt;/publish&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>This approach means that you get a build scan for every successful and failed build that runs, including from your continuous integration infrastructure and your developers.</p> 
       </div> 
       <div class="paragraph"> 
        <p>If you want to deactivate build scans for a particular build, you can pass the <code>-Dscan=false</code> system property to Maven.</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="publishing_on_demand"><a class="anchor" href="#publishing_on_demand"></a><a class="link" href="#publishing_on_demand">Publishing on demand</a></h4> 
       <div class="paragraph"> 
        <p>We imagine that when you first start experimenting with build scans, you won’t want to publish them all the time until you become familiar with the implications. Even then, you may have good reason not to go all-in and automate the process. That’s where one-off build scans come in.</p> 
       </div> 
       <div class="paragraph"> 
        <p>If you only want to publish build scans when explicitly requested, use the following option:</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.publishOnDemand();</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">-Dscan

For instance:
$ mvn clean verify -Dscan</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;publish&gt;ON_DEMAND&lt;/publish&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;

You can then publish a build scan by passing the <code>-Dscan</code> system property to Maven.
$ mvn clean verify -Dscan</code></pre> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="publishing_based_on_criteria"><a class="anchor" href="#publishing_based_on_criteria"></a><a class="link" href="#publishing_based_on_criteria">Publishing based on criteria</a></h4> 
       <div class="paragraph"> 
        <p>Many of you will want a bit more control over exactly when build scans are published without resorting to using <code>-Dscan</code> each time. Perhaps you only want to publish build scans when the build fails, or if the build is running on your continuous integration infrastructure. Such scenarios are covered by the options in the following table.</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.publishAlwaysIf(true); // Publish a build scan if the given condition is <code>true</code>, regardless of whether the build succeeds or fails
buildScan.publishOnFailure(); // Publish a build scan only when the build fails
buildScan.publishOnFailureIf(true); // Publish a build scan only if the condition is <code>true</code> <em>and</em> the build fails</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Conditional publication is not available via command-line argument.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;publish&gt;ON_FAILURE&lt;/publish&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>Giving a more concrete example, let’s say you only want to publish build scans from your CI system, which is identified by having a <code>CI</code> environment variable. This configuration will do the trick:</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.publishAlwaysIf(System.getenv("CI") != null);</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Conditional publication is not available via command-line argument.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;publish&gt;#{env['CI'] == null ? 'ON_DEMAND' : 'ALWAYS'}&lt;/publish&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="configuring_background_uploading"><a class="anchor" href="#configuring_background_uploading"></a><a class="link" href="#configuring_background_uploading">Configuring background uploading</a></h3> 
      <div class="paragraph"> 
       <p><em>(Maven extension 1.5+, Gradle Enterprise 2020.2+)</em></p> 
      </div> 
      <div class="paragraph"> 
       <p>By default, build scans are uploaded in the background after the build has finished. This allows the build to finish sooner, but can be problematic in build environments (e.g. ephemeral CI agents) that terminate as soon as the build is finished, as the upload may be terminated before it completes. Background uploading should be disabled for such environments.</p> 
      </div> 
      <div class="admonitionblock note"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
          <td class="content"> Prior to version 1.5 of the Maven extension, build scans are always uploaded before the build finishes. </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="paragraph"> 
       <p>Background build scan upload can be disabled programmatically, via a system property, or via the <code>gradle-enterprise.xml</code> configuration file.</p> 
      </div> 
      <div class="listingblock multi-language-sample"> 
       <div class="title">
        Using the <a href="#custom_extension">Programmatic configuration</a>
       </div> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.setUploadInBackground(false);</code></pre> 
       </div> 
      </div> 
      <div class="listingblock silver multi-language-sample"> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">-Dgradle.scan.uploadInBackground=false

For instance:
$ mvn clean verify -Dgradle.scan.uploadInBackground=false</code></pre> 
       </div> 
      </div> 
      <div class="listingblock silver multi-language-sample"> 
       <div class="title">
        Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
       </div> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;backgroundBuildScanUpload&gt;false&lt;/backgroundBuildScanUpload&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>It may be desirable to conditionally set the value based on the environment.</p> 
      </div> 
      <div class="listingblock multi-language-sample"> 
       <div class="title">
        Using the <a href="#custom_extension">Programmatic configuration</a>
       </div> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.setUploadInBackground(System.getenv("CI") == null);</code></pre> 
       </div> 
      </div> 
      <div class="listingblock silver multi-language-sample"> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">-Dgradle.scan.uploadInBackground=false

Add the system property only on the CI build configuration:
$ mvn clean verify -Dgradle.scan.uploadInBackground=false</code></pre> 
       </div> 
      </div> 
      <div class="listingblock silver multi-language-sample"> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;backgroundBuildScanUpload&gt;#{env['CI'] == null}&lt;/backgroundBuildScanUpload&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="authenticating_with_gradle_enterprise"><a class="anchor" href="#authenticating_with_gradle_enterprise"></a><a class="link" href="#authenticating_with_gradle_enterprise">Authenticating with Gradle Enterprise</a></h3> 
      <div class="paragraph"> 
       <p><em>(Maven extension 1.3+, Gradle Enterprise 2019.4+)</em></p> 
      </div> 
      <div class="paragraph"> 
       <p>Gradle Enterprise installations may be configured to require build scan publishing to be authenticated. Additionally, installations may be configured to only allow certain users to publish build scans.</p> 
      </div> 
      <div class="admonitionblock warning"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-warning" title="Warning"></i> </td> 
          <td class="content"> 
           <div class="paragraph"> 
            <p>Gradle Enterprise access keys should be treated with the same secrecy as passwords. They are used to authorize access to Gradle Enterprise from a build.</p> 
           </div> </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="sect3"> 
       <h4 id="automated_access_key_provisioning"><a class="anchor" href="#automated_access_key_provisioning"></a><a class="link" href="#automated_access_key_provisioning">Automated access key provisioning</a></h4> 
       <div class="paragraph"> 
        <p>The easiest way to configure a build environment to authenticate with Gradle Enterprise is to use the the following goal:</p> 
       </div> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre>$ mvn com.gradle:gradle-enterprise-maven-extension:1.11.1:provision-access-key</pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>When executed, it opens your web browser and asks to confirm provisioning of a new access key. You will be asked to sign in to Gradle Enterprise in your browser first if you are not already signed in.</p> 
       </div> 
       <div class="paragraph"> 
        <p>When confirmed, a new access key will be generated and stored in the <code>.gradle-enterprise/keys.properties</code> file within the Maven user home directory (<code>~/.m2</code> by default).</p> 
       </div> 
       <div class="paragraph"> 
        <p>Any existing access key for the same server will be replaced in the file, but will not be revoked at the server for use elsewhere. To revoke old access keys, sign in to Gradle Enterprise and access “My settings” via the user menu at the top right of the page.</p> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> 
            <div class="paragraph"> 
             <p>If your browser cannot be opened automatically at the correct page, you will be asked to manually open a link provided in the build console.</p> 
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="manual_access_key_configuration"><a class="anchor" href="#manual_access_key_configuration"></a><a class="link" href="#manual_access_key_configuration">Manual access key configuration</a></h4> 
       <div class="paragraph"> 
        <p>Access keys can also be configured manually for an environment, when automated provisioning is not suitable.</p> 
       </div> 
       <div class="sect4"> 
        <h5 id="creating_access_keys"><a class="anchor" href="#creating_access_keys"></a><a class="link" href="#creating_access_keys">Creating access keys</a></h5> 
        <div class="paragraph"> 
         <p>To create a new access key, sign in to Gradle Enterprise and access “My settings” via the user menu at the top right of the page. From there, use the “Access keys” section to generate an access key.</p> 
        </div> 
        <div class="paragraph"> 
         <p>The access key value should then be copied and configured in your build environment via file or via environment variable.</p> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="via_file"><a class="anchor" href="#via_file"></a><a class="link" href="#via_file">Via file</a></h5> 
        <div class="paragraph"> 
         <p>Gradle Enterprise access keys are stored inside the Maven user home directory (<code>~/.m2</code> by default), at <code>.gradle-enterprise/keys.properties</code>, in a Java properties file. The property name refers to the <em>host name</em> of the server, and the value is the access key.</p> 
        </div> 
        <div class="literalblock"> 
         <div class="content"> 
          <pre>gradle-enterprise.mycompany.com=7w5kbqqjea4vonghohvuyra5bnvszop4asbqee3m3sm6dbjdudtq</pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>The file may contain multiple entries. The first entry for a given host value will be used.</p> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="via_environment_variable"><a class="anchor" href="#via_environment_variable"></a><a class="link" href="#via_environment_variable">Via environment variable</a></h5> 
        <div class="paragraph"> 
         <p>The access key may also be specified via the <code>GRADLE_ENTERPRISE_ACCESS_KEY</code> environment variable. This is typically more suitable for CI build environments.</p> 
        </div> 
        <div class="paragraph"> 
         <p>The environment variable value format is <code>«server host name»=«access key»</code>.</p> 
        </div> 
        <div class="literalblock"> 
         <div class="content"> 
          <pre>$ export GRADLE_ENTERPRISE_ACCESS_KEY=gradle-enterprise.mycompany.com=7w5kbqqjea4vonghohvuyra5bnvszop4asbqee3m3sm6dbjdudtq
$ mvn package</pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>The server host name is specified in order to prevent the access key being transmitted to a different server than intended. In the rare case that you require access keys for multiple servers, you can specify multiple entries separated by semicolons (requires Maven extension 1.9+, Gradle Enterprise 2021.1+).</p> 
        </div> 
        <div class="literalblock"> 
         <div class="content"> 
          <pre>$ export GRADLE_ENTERPRISE_ACCESS_KEY=ge1.mycompany.com=7w5kbqqjea4vonghohvuyra5bnvszop4asbqee3m3sm6dbjdudtq;ge2.mycompany.com=9y4agfiubqqjea4vonghohvuyra5bnvszop4asbqee3m3sm67w5k
$ ./gradlew build</pre> 
         </div> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="via_configuration"><a class="anchor" href="#via_configuration"></a><a class="link" href="#via_configuration">Via configuration</a></h5> 
        <div class="paragraph"> 
         <p><em>(Maven extension 1.11+)</em></p> 
        </div> 
        <div class="paragraph"> 
         <p>The <code>accessKey</code> can also be set via the extension’s <a href="#configuration_reference">configuration</a>.</p> 
        </div> 
        <div class="listingblock multi-language-sample"> 
         <div class="title">
          Using the <a href="#custom_extension">Programmatic configuration</a>
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">GradleEnterpriseApi gradleEnterprise = (GradleEnterpriseApi) mavenSession.lookup("com.gradle.maven.extension.api.GradleEnterpriseApi");
gradleEnterprise.setServer("https://gradle-enterprise.mycompany.com");
gradleEnterprise.setAccessKey("7w5kbqqjea4vonghohvuyra5bnvszop4asbqee3m3sm6dbjdudtq");</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="title">
          The access key cannot be set via command-line argument.
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="title">
          Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;server&gt;
    &lt;url&gt;https://gradle-enterprise.mycompany.com&lt;/url&gt;
    &lt;accessKey&gt;7w5kbqqjea4vonghohvuyra5bnvszop4asbqee3m3sm6dbjdudtq&lt;/accessKey&gt;
  &lt;/server&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>An access key configured for the server this way will take precedence over an access key set via the environment variable or access key file.</p> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="capturing_goal_input_files"><a class="anchor" href="#capturing_goal_input_files"></a><a class="link" href="#capturing_goal_input_files">Capturing goal input files</a></h3> 
      <div class="paragraph"> 
       <p><em>(Maven extension v1.1+)</em></p> 
      </div> 
      <div class="paragraph"> 
       <p>Build scans capture hashes of goal inputs, to enable identifying changes to inputs when comparing builds, among other features. By default, an overall hash value for each goal input property is captured. This enables identifying which properties changed for a goal execution (e.g. the source or the classpath for Java compilation), but not which <em>individual files</em> changed. In order to identify file changes, the paths and content hashes of each individual input file must be captured, which can be enabled.</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="when_to_enable"><a class="anchor" href="#when_to_enable"></a><a class="link" href="#when_to_enable">When to enable</a></h4> 
       <div class="paragraph"> 
        <p>Capturing goal input files increases the amount of data transmitted to the build scan server at the end of the build. If the network connection to the build scan server is poor, it may increase the time required to transmit. Additionally, it may also increase the data storage requirements for the build scan server.</p> 
       </div> 
       <div class="paragraph"> 
        <p>This data is currently only used for build comparison, which is only available in <a href="https://gradle.com">Gradle Enterprise</a> and is not available with <a href="https://scans.gradle.com">scans.gradle.com</a>. If you are using <a href="https://scans.gradle.com">scans.gradle.com</a>, it is not recommended that you enable capture of goal input files.</p> 
       </div> 
       <div class="paragraph"> 
        <p>If you are using Gradle Enterprise and utilising its build cache to accelerate your builds, it is strongly recommended to enable capture of goal input files as identifying which files have changed between builds with build comparison is extremely effective for diagnosing unexpected build cache misses.</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="how_to_enable"><a class="anchor" href="#how_to_enable"></a><a class="link" href="#how_to_enable">How to enable</a></h4> 
       <div class="paragraph"> 
        <p>Goal input files capture can be enabled programmatically, via a system property, or via the <code>gradle-enterprise.xml</code> configuration file.</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.setCaptureGoalInputFiles(true);       // for extension &lt; 1.11
buildScan.getCapture().setGoalInputFiles(true); // for extension &gt;= 1.11</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">-Dgradle.scan.captureGoalInputFiles

For instance:
$ mvn clean verify -Dgradle.scan.captureGoalInputFiles=true</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;captureGoalInputFiles&gt;true&lt;/captureGoalInputFiles&gt; &lt;!-- For extension &lt; 1.11--&gt;
    &lt;capture&gt;                                           &lt;!-- For extension &gt;= 1.11 --&gt;
      &lt;goalInputFiles&gt;true&lt;/goalInputFiles&gt;
    &lt;/capture&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="capturing_build_and_test_outputs"><a class="anchor" href="#capturing_build_and_test_outputs"></a><a class="link" href="#capturing_build_and_test_outputs">Capturing build and test outputs</a></h3> 
      <div class="paragraph"> 
       <p><em>(Maven extension v1.11+)</em></p> 
      </div> 
      <div class="paragraph"> 
       <p>By default, outputs generated during the build are captured and displayed in build scans.</p> 
      </div> 
      <div class="paragraph"> 
       <p>Note that when disabling test output capturing, test failures will still be captured.</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="when_to_disable"><a class="anchor" href="#when_to_disable"></a><a class="link" href="#when_to_disable">When to disable</a></h4> 
       <div class="paragraph"> 
        <p>You may want to skip capturing build or test outputs for security/privacy reasons (i.e., some outputs may leak sensitive data), or performance/storage reasons (i.e., some goals/tests may produce a lot of outputs that are irrelevant for your usage of build scans).</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="how_to_disable"><a class="anchor" href="#how_to_disable"></a><a class="link" href="#how_to_disable">How to disable</a></h4> 
       <div class="paragraph"> 
        <p>Output capture can be disabled programmatically, via a system property, or via the <code>gradle-enterprise.xml</code> configuration file.</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.getCapture().setBuildLogging(false);
buildScan.getCapture().setTestLogging(false);</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">-Dgradle.scan.captureBuildLogging
-Dgradle.scan.captureTestLogging

For instance:
$ mvn clean verify -Dgradle.scan.captureBuildLogging=false -Dgradle.scan.captureTestLogging=false</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;capture&gt;
      &lt;buildLogging&gt;false&lt;/buildLogging&gt;
      &lt;testLogging&gt;false&lt;/testLogging&gt;
    &lt;/capture&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="extending_build_scans"><a class="anchor" href="#extending_build_scans"></a><a class="link" href="#extending_build_scans">Extending build scans</a></h3> 
      <div class="paragraph"> 
       <p>You can easily include extra custom information in your build scans in the form of tags, links and values. This is a very powerful mechanism for capturing and sharing information that is important to your build and development process.</p> 
      </div> 
      <div class="paragraph"> 
       <p>This information can be anything you like. You can tag all builds run by your continuous integration tool with a <code>CI</code> tag. You can capture the name of the environment that the build published to as a value. You can link to the source revision for the build in an online tool such as GitHub. The possibilities are endless.</p> 
      </div> 
      <div class="paragraph"> 
       <p>You can see how the custom data appears in figure 2:</p> 
      </div> 
      <div id="img-scan-with-custom-data" class="imageblock shadow image-1600"> 
       <div class="content"> 
        <img src="images/scan-with-custom-data.png" alt="scan with custom data"> 
       </div> 
       <div class="title">
        Figure 2. A build scan containing the different types of custom data
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>Gradle Enterprise allows listing and searching across all of the build scans in the system. You can find and filter build scans by tags and custom values, in addition to project name, outcome and other properties. In figure 3, for example, we are filtering for all build scans that have the tag "local" and a git branch name of "master":</p> 
      </div> 
      <div id="img-filtered-list-view" class="imageblock shadow image-2400"> 
       <div class="content"> 
        <img src="images/build-scan-filtered-list.png" alt="build scan filtered list"> 
       </div> 
       <div class="title">
        Figure 3. A filtered list of build scans in Gradle Enterprise
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="adding_tags"><a class="anchor" href="#adding_tags"></a><a class="link" href="#adding_tags">Adding tags</a></h4> 
       <div class="paragraph"> 
        <p>Tags are typically used to indicate the type or class of a build, or a key characteristic. They are prominent in the user interface and quickly inform a user about the nature of a build. A build can have zero or more tags.</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.tag("my tag");</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">-Dscan.tag.&lt;tag&gt;

For instance:
$ mvn package -Dscan.tag.CI</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;tags&gt;
      &lt;tag&gt;my tag&lt;/tag&gt;
    &lt;/tags&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to a project <code>pom.xml</code>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;project&gt;
  &lt;!-- other build configuration --&gt;
  &lt;pluginManagement&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;com.gradle&lt;/groupId&gt;
      &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;gradleEnterprise&gt;
          &lt;buildScan&gt;
            &lt;tags&gt;
              &lt;tag&gt;my tag&lt;/tag&gt;
            &lt;/tags&gt;
          &lt;/buildScan&gt;
        &lt;/gradleEnterprise&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
  &lt;/pluginManagement&gt;
&lt;/project&gt;

Prefer the programmatic access.
If specified in parent POM, tags will be applied to all projects inheriting from it.</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>Note that the order in which you declare the tags doesn’t affect the build scan view. They are displayed in alphabetical order, with any all-caps labels displayed before the rest.</p> 
       </div> 
       <div class="paragraph"> 
        <p>You can see the effect of a custom tag in <a href="#img-scan-with-custom-data">figure 2</a>.</p> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> 
            <div class="paragraph"> 
             <p>The Gradle Enterprise Maven extension imposes limits on captured tags:</p> 
            </div> 
            <div class="ulist"> 
             <ul> 
              <li> <p>maximum tag count: 50</p> </li> 
              <li> <p>maximum tag length: 200 characters</p> </li> 
             </ul> 
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="adding_links"><a class="anchor" href="#adding_links"></a><a class="link" href="#adding_links">Adding links</a></h4> 
       <div class="paragraph"> 
        <p>Builds rarely live in isolation. Where does the project source live? Is there online documentation for the project? Where can you find the project’s issue tracker? If these exist and have a URL, you can add them to the build scan.</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.link("my link", "http://my-site.com");</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">-Dscan.link.&lt;name&gt;=&lt;URL&gt;

For instance:
$ mvn package -Dscan.link.VCS=https://github.com/myorg/my-super-project/tree/my-new-feature</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;links&gt;
      &lt;link&gt;
        &lt;name&gt;my link&lt;/name&gt;
        &lt;url&gt;http://my-site.com&lt;/url&gt;
      &lt;/link&gt;
    &lt;/links&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to a project <code>pom.xml</code>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;project&gt;
  ...
  &lt;pluginManagement&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;com.gradle&lt;/groupId&gt;
        &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;gradleEnterprise&gt;
            &lt;buildScan&gt;
              &lt;links&gt;
                &lt;link&gt;
                  &lt;name&gt;my link&lt;/name&gt;
                  &lt;url&gt;http://my-site.com&lt;/url&gt;
                &lt;/link&gt;
              &lt;/links&gt;
            &lt;/buildScan&gt;
          &lt;/gradleEnterprise&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/pluginManagement&gt;
&lt;/project&gt;

Prefer the programmatic access.
If specified in parent POM, links will be applied to all projects inheriting from it.</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>Links can also be added in your project POM.</p> 
       </div> 
       <div class="paragraph"> 
        <p>The &lt;name&gt; is simply a string identifier that you choose and that means something to you.</p> 
       </div> 
       <div class="paragraph"> 
        <p>You can see the effect of a custom link in <a href="#img-scan-with-custom-data">figure 2</a>, which shows how a label <em>CVS</em> becomes a hyperlink that anyone viewing the build scan can follow.</p> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> 
            <div class="paragraph"> 
             <p>The Gradle Enterprise Maven extension imposes limits on captured links:</p> 
            </div> 
            <div class="ulist"> 
             <ul> 
              <li> <p>maximum link count: 20</p> </li> 
              <li> <p>maximum link label length: 100 characters</p> </li> 
              <li> <p>maximum link url length: 100,000 characters for Gradle Enterprise Maven extension 1.11+; 1,000 characters otherwise</p> </li> 
             </ul> 
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="adding_custom_values"><a class="anchor" href="#adding_custom_values"></a><a class="link" href="#adding_custom_values">Adding custom values</a></h4> 
       <div class="paragraph"> 
        <p>Some information just isn’t useful without context. What does "1G" mean? You might guess that it represents 1 gigabyte, but of what? It’s only when you attach the label "Max heap size for build" that it makes sense. The same applies to git commit IDs, for example, which could be interpreted as some other checksum without a suitable label.</p> 
       </div> 
       <div class="paragraph"> 
        <p>Custom values are designed for these cases that require context. They’re standard key-value pairs, in which the key is a string label of your choosing and the values are also strings, often evaluated from the build environment.</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.value("my name", "my value");</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">-Dscan.value.&lt;name&gt;=&lt;value&gt;

For instance:
$ mvn package "-Dscan.value.CIBuildType=QA_Build"</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;values&gt;
      &lt;value&gt;
        &lt;name&gt;my name&lt;/name&gt;
        &lt;value&gt;my value&lt;/value&gt;
      &lt;/value&gt;
    &lt;/values&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Add the following to a project <code>pom.xml</code>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;project&gt;
  ...
  &lt;pluginManagement&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;com.gradle&lt;/groupId&gt;
        &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;gradleEnterprise&gt;
            &lt;buildScan&gt;
              &lt;values&gt;
                &lt;value&gt;
                  &lt;name&gt;Build Number&lt;/name&gt;
                  &lt;value&gt;${project.buildNumber}&lt;/value&gt;
                &lt;/value&gt;
              &lt;/values&gt;
            &lt;/buildScan&gt;
          &lt;/gradleEnterprise&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/pluginManagement&gt;
&lt;/project&gt;

Prefer the programmatic access.
If specified in parent POM, custom values will be applied to all projects inheriting from it.</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>As with tags, you can filter build scans by custom values in Gradle Enterprise.</p> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> 
            <div class="paragraph"> 
             <p>The Gradle Enterprise Maven extension imposes limits on captured custom values:</p> 
            </div> 
            <div class="ulist"> 
             <ul> 
              <li> <p>maximum custom value count: 1,000</p> </li> 
              <li> <p>maximum custom value key length: 1,000 characters</p> </li> 
              <li> <p>maximum custom value value length: 100,000 characters</p> </li> 
             </ul> 
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="callbacks"><a class="anchor" href="#callbacks"></a><a class="link" href="#callbacks">Callbacks</a></h3> 
      <div class="paragraph"> 
       <p>The Build Scan API allows to programmatically interact with the build scan configuration of the Gradle Enterprise Maven extension. Please see the <a href="api/index.html">Javadoc</a> for the complete API documentation.</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="executing_operations_at_the_end_of_the_build"><a class="anchor" href="#executing_operations_at_the_end_of_the_build"></a><a class="link" href="#executing_operations_at_the_end_of_the_build">Executing operations at the end of the build</a></h4> 
       <div class="paragraph"> 
        <p><em>(Maven extension v1.2+)</em></p> 
       </div> 
       <div class="paragraph"> 
        <p>What if you want to execute some code based on data that is only available late in the build? For example, you might want to label a build as "built-from-clean" if the <code>clean</code> goal was run. But you don’t know if that’s the case until the goal execution plan is ready.</p> 
       </div> 
       <div class="paragraph"> 
        <p>The Maven extension provides a <code>buildFinished()</code> hook that you can use for these situations. It defers attaching custom data until the build has finished running. As an example, imagine you want to report how much disk space was taken up by the output directory. The build doesn’t know this until it’s finished, so the solution is to calculate the disk space and attach it to a custom value in the <code>buildFinished()</code> hook:</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">import org.apache.commons.io.FileUtils;
import java.io.File;
...
BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
File outputDir = mavenSession.getCurrentProject().getBuild().getOutputDirectory();
buildScan.buildFinished(buildResult -&gt; buildScan.value("Disk usage (target dir)", FileUtils.sizeOfDirectory(outputDir)));</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Adding data at the end of the build is not available via command-line argument.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Adding data at the end of the build is not available via XML configuration.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs"></code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>The <code>buildFinished()</code> action has access to a <code>BuildResult</code> instance that you can use to determine whether the build failed or not, like so:</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.buildFinished(buildResult -&gt; {
  buildResult.getFailures().stream().forEach(failure -&gt;
    buildScan.value("Failed with", failure.getMessage());
  );
});</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Adding data at the end of the build is not available via command-line argument.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Adding data at the end of the build is not available via XML configuration.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs"></code></pre> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="executing_operations_when_a_build_scan_is_published"><a class="anchor" href="#executing_operations_when_a_build_scan_is_published"></a><a class="link" href="#executing_operations_when_a_build_scan_is_published">Executing operations when a build scan is published</a></h4> 
       <div class="paragraph"> 
        <p><em>(Maven extension v1.2+)</em></p> 
       </div> 
       <div class="paragraph"> 
        <p>You might want to perform a custom operation when a build scan is published, like notifying an internal tool of your company. To do this , you can use the <code>BuildScanApi#buildScanPublished()</code> method:</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">import java.nio.Files
...
BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
File journal = new File("buildScans.txt")
buildScan.buildScanPublished(buildScan -&gt; Files.write(journal.toPath(), buildScan.getBuildScanId().getBytes(), StandardOpenOption.APPEND));</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Executing operations when a build scan is published cannot be configured via command-line argument.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Executing operations when a build scan is published cannot be configured via XML.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs"></code></pre> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="executing_expensive_operations"><a class="anchor" href="#executing_expensive_operations"></a><a class="link" href="#executing_expensive_operations">Executing expensive operations</a></h4> 
       <div class="paragraph"> 
        <p><em>(Maven extension v1.2+)</em></p> 
       </div> 
       <div class="paragraph"> 
        <p>Some data that you may wish to add to your build scan can be expensive to capture. For example, capturing the Git commit ID may require executing the <code>git</code> command as an external process, which is expensive. To do this without slowing your build down, you can use the <code>BuildScanApi#background()</code> method:</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">import java.io.File;
import org.eclipse.jgit.*;
...
BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.background(api -&gt; {
  File projectDir = mavenSession.getCurrentProject().getBasedir();
  Git git = Git.open(projectDir);
  ObjectId objectId = git.getRepository().resolve("HEAD");
  api.value("Git Commit ID", ObjectId.toString(objectId));
});</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Doing expensive work in the background cannot be configured via command-line argument.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Doing expensive work in the background cannot be configured via XML.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs"></code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>This method takes a function that will be executed on a separate thread, which allows Maven to continue without waiting for the expensive work to complete.</p> 
       </div> 
       <div class="paragraph"> 
        <p>All background work will be completed before finishing the build and publishing the build scan.</p> 
       </div> 
       <div class="paragraph"> 
        <p>Any errors that are thrown by the background action will be logged and captured in the build scan.</p> 
       </div> 
       <div class="paragraph"> 
        <p>See the <a href="api/com/gradle/maven/extension/api/scan/BuildScanApi.html#background(java.util.function.Consumer)">BuildScanApi#background() API reference</a> for more information.</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="executing_operations_only_once"><a class="anchor" href="#executing_operations_only_once"></a><a class="link" href="#executing_operations_only_once">Executing operations only once</a></h4> 
       <div class="paragraph"> 
        <p><em>(Maven extension v1.2.3+)</em></p> 
       </div> 
       <div class="paragraph"> 
        <p>You may want to ensure that a given operation is only executed once for the whole execution of a multi-project Maven build.</p> 
       </div> 
       <div class="paragraph"> 
        <p>The Maven extension provides an <code>executeOnce()</code> hook that you can use for these situations. It must be provided with an identifier, and can call any service provided by the API. The identifier is used to guarantee that the provided action will be executed at most once.</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.executeOnce("capture custom data", api -&gt; api.tag("my custom tag")); // This will be executed once
buildScan.executeOnce("capture custom data", api -&gt; api.tag("my other custom tag")); // This will not be executed and will silently be ignored
buildScan.executeOnce("publish to journal", api -&gt; api.buildScanPublished(buildScan -&gt; journalServer.add(buildScan))); // This will be executed once</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Running custom build scan configuration logic once is not available via command-line argument.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Running custom build scan configuration logic once is not available via XML configuration.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs"></code></pre> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="obfuscating_identifying_data"><a class="anchor" href="#obfuscating_identifying_data"></a><a class="link" href="#obfuscating_identifying_data">Obfuscating identifying data</a></h4> 
       <div class="paragraph"> 
        <p><em>(Maven extension v1.3.1+)</em></p> 
       </div> 
       <div class="paragraph"> 
        <p>Build scans capture certain identifying information such as the operating system username, hostname and network addresses. You may choose to obfuscate this data so that it is not decipherable in build scans when viewed. To do this, you can use the <code>BuildScanApi#obfuscation()</code> method.</p> 
       </div> 
       <div class="paragraph"> 
        <p>With Maven extension v1.6.3+, you can register obfuscation values on the <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>. These will always be applied, even in case of very early build failures, that would prevent programmatic configuration via the BuildScan API. If the BuildScan API gets eventually called, obfuscation functions registered with it will have precedence over the values defined via XML.</p> 
       </div> 
       <div class="paragraph"> 
        <p>The following examples show registering obfuscation functions for the different identifying data.</p> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Obfuscating the username using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">import java.util.stream.Collectors;
...
BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.obfuscation(obfuscation -&gt; obfuscation.username(s -&gt; s.chars().mapToObj(c -&gt; String.valueOf(Character.getNumericValue(c))).collect(Collectors.joining())));</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Obfuscating the username cannot be configured via command-line argument.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Obfuscating the username via <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a> (Maven extension v1.6.3+)
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;obfuscation&gt;
      &lt;!-- Use a redacted value. --&gt;
      &lt;username&gt;obfuscated&lt;/username&gt;
    &lt;/obfuscation&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;
---
&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;obfuscation&gt;
      &lt;!-- Use Spring Expression Language. The 'username' variable can be used to get access to the username that would be captured. --&gt;
      &lt;username&gt;#{username.substring(0,1)}&lt;/username&gt;
    &lt;/obfuscation&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;
---
&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;obfuscation&gt;
      &lt;!-- Use Spring Expression Language. The 'sha512' method can be used. --&gt;
      &lt;username&gt;#{sha512(username)}&lt;/username&gt;
    &lt;/obfuscation&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Obfuscating the hostnames using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">import java.util.stream.Collectors;
...
BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.obfuscation(obfuscation -&gt; obfuscation.hostname(h -&gt; h.chars().mapToObj(c -&gt; String.valueOf(Character.getNumericValue(c))).collect(Collectors.joining())));</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Obfuscating the hostnames cannot be configured via command-line argument.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Obfuscating the hostnames via <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a> (Maven extension v1.6.3+)
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;obfuscation&gt;
      &lt;!-- Use a redacted value. --&gt;
      &lt;hostname&gt;obfuscated&lt;/hostname&gt;
    &lt;/obfuscation&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;
---
&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;obfuscation&gt;
      &lt;!-- Use Spring Expression Language. --&gt;
      &lt;hostname&gt;#{isTrue(env['CI']) ? 'CI agent' : 'Local agent'}&lt;/hostname&gt;
    &lt;/obfuscation&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
       <div class="listingblock multi-language-sample"> 
        <div class="title">
         Obfuscating the IP addresses using the <a href="#custom_extension">Programmatic configuration</a>
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">import java.util.stream.Collectors;
...
BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.obfuscation(obfuscation -&gt; obfuscation.ipAddresses(addresses -&gt; addresses.stream().map(address -&gt; "0.0.0.0").collect(Collectors.toList())));</code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Obfuscating the IP addresses cannot be configured via command-line argument.
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
        </div> 
       </div> 
       <div class="listingblock silver multi-language-sample"> 
        <div class="title">
         Obfuscating the IP addresses via <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a> (Maven extension v1.6.3+)
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;obfuscation&gt;
      &lt;!-- Use a redacted value.--&gt;
      &lt;ipAddresses&gt;#{{'0.0.0.0'}}&lt;/ipAddresses&gt;
    &lt;/obfuscation&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;
---
&lt;gradleEnterprise&gt;
  &lt;buildScan&gt;
    &lt;obfuscation&gt;
      &lt;!-- Use Spring Expression Language. The 'sha512' method can be used. The 'ipAddresses' variable can be used to get access to the list of IP addresses that would be captured. --&gt;
      &lt;ipAddresses&gt;#{sha512(ipAddresses)}&lt;/ipAddresses&gt;
    &lt;/obfuscation&gt;
  &lt;/buildScan&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>See the <a href="api/com/gradle/maven/extension/api/scan/BuildScanApi.html#obfuscation(java.util.function.Consumer)">BuildScanApi#obfuscation() API reference</a> for more information.</p> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="troubleshooting"><a class="anchor" href="#troubleshooting"></a><a class="link" href="#troubleshooting">Troubleshooting</a></h3> 
      <div class="sect3"> 
       <h4 id="failed_background_build_scan_uploads"><a class="anchor" href="#failed_background_build_scan_uploads"></a><a class="link" href="#failed_background_build_scan_uploads">Failed background build scan uploads</a></h4> 
       <div class="paragraph"> 
        <p>When using background build scan uploading (default behaviour since Maven extension version 1.5, see <a href="#configuring_background_uploading">this section</a> for configuration options) upload failures are not visible in the build logging due to occurring in a background process after the build has finished. Instead, errors are logged to a file located at <code>~/.m2/.gradle-enterprise/build-scan-data/upload-failure.log</code>. If this additional information does not help to resolve the failure, please contact technical support and include the contents of this log file.</p> 
       </div> 
       <div class="paragraph"> 
        <p>If the background upload process fails to start, a warning is shown in the build console and uploading is performed in the build process. If this occurs, please contact technical support with the log files located at <code>~/.m2/.gradle-enterprise/build-scan-data/&lt;&lt;extension-version&gt;&gt;/pending-uploads/*.log</code>.</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="slow_resolution_of_host_name"><a class="anchor" href="#slow_resolution_of_host_name"></a><a class="link" href="#slow_resolution_of_host_name">Slow resolution of host name</a></h4> 
       <div class="paragraph"> 
        <p>Build scans attempt to determine the host name of the machine. An <a href="https://bugs.openjdk.java.net/browse/JDK-7180557">issue affecting macOS</a> can cause a delay when doing this in some environments.</p> 
       </div> 
       <div class="paragraph"> 
        <p>If you see a warning during your build that resolving the local host name is slow, you can workaround the problem by adding a host name mapping to your <code>/etc/hosts</code> file.</p> 
       </div> 
       <div class="paragraph"> 
        <p>Add these lines to your <code>/etc/hosts</code> file, substituting your computer name for 'mbpro' in the below snippet:</p> 
       </div> 
       <div class="listingblock"> 
        <div class="title">
         /etc/hosts
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code class="language-none hljs">127.0.0.1   localhost mbpro.local
::1         localhost mbpro.local</code></pre> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="forked_maven_builds"><a class="anchor" href="#forked_maven_builds"></a><a class="link" href="#forked_maven_builds">Forked Maven builds</a></h4> 
       <div class="paragraph"> 
        <p>Several Maven plugins fork a new Maven build during the execution of a build. When the project is configured to publish a Build Scan, the forked Maven build will publish one as well. Depending on the use case, this behavior is desirable or not. The Gradle Enterprise Maven extension does not detect if it’s executed within a forked Maven build to avoid publishing a Build Scan. In some circumstances and specific setups it can lead to errors on the forked Maven build and we then advise you to disable the Build Scan functionality of the Gradle Enterprise Maven extension for such builds. This does not affect the use of the build cache.</p> 
       </div> 
       <div class="paragraph"> 
        <p>The following sections show how to disable publishing a Build Scan for various Maven plugins that spawn forked Maven builds.</p> 
       </div> 
       <div class="sect4"> 
        <h5 id="maven_invoker_plugin"><a class="anchor" href="#maven_invoker_plugin"></a><a class="link" href="#maven_invoker_plugin">Maven invoker plugin</a></h5> 
        <div class="paragraph"> 
         <p>For the <a href="https://maven.apache.org/plugins/maven-invoker-plugin/">Maven invoker plugin</a> set the <code>gradle.scan.disabled</code> system property to <code>true</code>.</p> 
        </div> 
        <div class="listingblock"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-invoker-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
        ...
        &lt;properties&gt;
            &lt;gradle.scan.disabled&gt;true&lt;/gradle.scan.disabled&gt;
        &lt;/properties&gt;
        ...
    &lt;/configuration&gt;
    ...
&lt;/plugin&gt;</code></pre> 
         </div> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="maven_verifier"><a class="anchor" href="#maven_verifier"></a><a class="link" href="#maven_verifier">Maven verifier</a></h5> 
        <div class="paragraph"> 
         <p>For the <a href="https://maven.apache.org/shared/maven-verifier/#">Maven verifier</a> you can set the <code>gradle.scan.disabled</code> CLI option on the <code>Verifier</code> to <code>true</code>.</p> 
        </div> 
        <div class="listingblock"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">verifier.addCliOption("-Dgradle.scan.disabled=true");</code></pre> 
         </div> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="maven_archetype_plugin"><a class="anchor" href="#maven_archetype_plugin"></a><a class="link" href="#maven_archetype_plugin">Maven archetype plugin</a></h5> 
        <div class="paragraph"> 
         <p>While integration testing an archetype with the <a href="https://maven.apache.org/archetype/maven-archetype-plugin/integration-test-mojo.html">Maven archetype plugin</a> a Maven build will be forked. To disable Build Scan publishing, you can set the <code>gradle.scan.disabled</code> system property to <code>true</code>.</p> 
        </div> 
        <div class="listingblock"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-archetype-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
        ...
        &lt;properties&gt;
            &lt;gradle.scan.disabled&gt;true&lt;/gradle.scan.disabled&gt;
        &lt;/properties&gt;
        ...
    &lt;/configuration&gt;
    ...
&lt;/plugin&gt;</code></pre> 
         </div> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="maven_release_plugin"><a class="anchor" href="#maven_release_plugin"></a><a class="link" href="#maven_release_plugin">Maven release plugin</a></h5> 
        <div class="paragraph"> 
         <p>For the <a href="https://maven.apache.org/maven-release/maven-release-plugin/">Maven release plugin</a> set the <code>gradle.scan.disabled</code> system property to <code>true</code>.</p> 
        </div> 
        <div class="listingblock"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;plugin&gt;
    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
    &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;
    &lt;configuration&gt;
        ...
        &lt;arguments&gt;
            -Dgradle.scan.disabled=true
        &lt;/arguments&gt;
        ...
    &lt;/configuration&gt;
    ...
&lt;/plugin&gt;</code></pre> 
         </div> 
        </div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="using_the_build_cache"><a class="anchor" href="#using_the_build_cache"></a><a class="link" href="#using_the_build_cache">Using the build cache</a></h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>The build cache speeds up your builds by reusing outputs from any previous build, on any machine that is connected to the same build cache backend. It does this by reducing the inputs of a goal execution down to a strong hash key and storing the execution’s output under that key. It supports a local cache that allows other subsequent builds on the same machine to reuse the outputs whenever they execute a goal with the same inputs. The full benefit of the build cache is realized when also using the remote backend that Gradle Enterprise provides. This remote cache allows you to share cached outputs across your whole team, including local and CI builds.</p> 
     </div> 
     <div class="paragraph"> 
      <p>Please refer to the <a href="/enterprise/maven-build-cache/">build cache guide</a> for step-by-step instructions on how to get started and in-depth explanations of important concepts. Moreover, the guide shows how to measure the effectiveness of the build cache in your project and explains how to roll out the build cache in your organization.</p> 
     </div> 
     <div class="admonitionblock note"> 
      <table> 
       <tbody>
        <tr> 
         <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
         <td class="content"> 
          <div class="paragraph"> 
           <p>The build caching functionality for Maven requires a Gradle Enterprise license. The free <code>scans.gradle.com</code> server does not allow using the build cache.</p> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
     </div> 
     <div class="sect2"> 
      <h3 id="configuring_the_build_cache"><a class="anchor" href="#configuring_the_build_cache"></a><a class="link" href="#configuring_the_build_cache">Configuring the build cache</a></h3> 
      <div class="paragraph"> 
       <p>In order to use build caching for Apache Maven, you need to configure the location of your Gradle Enterprise server.</p> 
      </div> 
      <div class="listingblock multi-language-sample"> 
       <div class="title">
        Using the <a href="#custom_extension">Programmatic configuration</a>
       </div> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.setServer("https://gradle-enterprise.mycompany.com");</code></pre> 
       </div> 
      </div> 
      <div class="listingblock silver multi-language-sample"> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">$ mvn package -Dgradle.enterprise.url=https://gradle-enterprise.mycompany.com</code></pre> 
       </div> 
      </div> 
      <div class="listingblock silver multi-language-sample"> 
       <div class="title">
        Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
       </div> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;server&gt;
    &lt;url&gt;https://gradle-enterprise.mycompany.com&lt;/url&gt;
  &lt;/server&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>The precise URL you need depends on the hostname that your Gradle Enterprise instance has been configured with. If in doubt, be sure to ask whomever manages that instance.</p> 
      </div> 
      <div class="paragraph"> 
       <p>You may encounter a warning about an untrusted certificate when connecting to Gradle Enterprise over HTTPS. The ideal solution is for someone to add a valid SSL certificate to the Gradle Enterprise instance, but we recognise that you may not be able to do that. In this case, set the <code>allowUntrusted</code> option to <code>true</code>:</p> 
      </div> 
      <div class="listingblock multi-language-sample"> 
       <div class="title">
        Using the <a href="#custom_extension">Programmatic configuration</a>
       </div> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildScanApi buildScan = (BuildScanApi) mavenSession.lookup("com.gradle.maven.extension.api.scan.BuildScanApi");
buildScan.setAllowUntrusted(true);</code></pre> 
       </div> 
      </div> 
      <div class="listingblock silver multi-language-sample"> 
       <div class="title">
        Allowing untrusted certificate cannot be done via command-line argument.
       </div> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs"></code></pre> 
       </div> 
      </div> 
      <div class="listingblock silver multi-language-sample"> 
       <div class="title">
        Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
       </div> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;server&gt;
    &lt;allowUntrusted&gt;true&lt;/allowUntrusted&gt;
  &lt;/server&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>This is a convenient workaround, but you shouldn’t use it as a long-term solution.</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="configuring_the_local_cache"><a class="anchor" href="#configuring_the_local_cache"></a><a class="link" href="#configuring_the_local_cache">Configuring the local cache</a></h4> 
       <div class="paragraph"> 
        <p>The extension uses a local build cache to store build outputs in the local filesystem. It prevents network roundtrips by storing both outputs that local builds created, as well as outputs that were downloaded from the remote build cache.</p> 
       </div> 
       <div class="sect4"> 
        <h5 id="disabling_the_local_cache"><a class="anchor" href="#disabling_the_local_cache"></a><a class="link" href="#disabling_the_local_cache">Disabling the local cache</a></h5> 
        <div class="paragraph"> 
         <p>The local build cache is enabled by default. This can be changed by setting the <code>enabled</code> option to <code>false</code>.</p> 
        </div> 
        <div class="listingblock multi-language-sample"> 
         <div class="title">
          Using the <a href="#custom_extension">Programmatic configuration</a> (Maven extension v1.7+)
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildCacheApi buildCache = (BuildCacheApi) mavenSession.lookup("com.gradle.maven.extension.api.cache.BuildCacheApi");
buildCache.getLocal().setEnabled(false);</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">$ mvn package -Dgradle.cache.local.enabled=false</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="title">
          Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildCache&gt;
    &lt;local&gt;
      &lt;enabled&gt;false&lt;/enabled&gt;
    &lt;/local&gt;
  &lt;/buildCache&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
         </div> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="changing_the_local_cache_directory"><a class="anchor" href="#changing_the_local_cache_directory"></a><a class="link" href="#changing_the_local_cache_directory">Changing the local cache directory</a></h5> 
        <div class="paragraph"> 
         <p>The local cache is located at <code>${user.home}/.m2/.gradle-enterprise/build-cache</code> by default. This can be changed by setting the <code>directory</code> option.</p> 
        </div> 
        <div class="listingblock multi-language-sample"> 
         <div class="title">
          Using the <a href="#custom_extension">Programmatic configuration</a> (Maven extension v1.7+)
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildCacheApi buildCache = (BuildCacheApi) mavenSession.lookup("com.gradle.maven.extension.api.cache.BuildCacheApi");
buildCache.getLocal().setDirectory(new File("path/to/local/build-cache"));</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">$ mvn package -Dgradle.cache.local.directory=/path/to/local/build-cache</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="title">
          Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildCache&gt;
    &lt;local&gt;
      &lt;directory&gt;/path/to/local/build-cache&lt;/directory&gt;
    &lt;/local&gt;
  &lt;/buildCache&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
         </div> 
        </div> 
        <div class="admonitionblock note"> 
         <table> 
          <tbody>
           <tr> 
            <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
            <td class="content"> 
             <div class="paragraph"> 
              <p>It is a common practice in large organizations to put the user home on a network share. Since the underlying motivation of a local build cache is to prevent network roundtrips, you should explicitly configure the local cache directory to a path on the local filesystem.</p> 
             </div> </td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="configuring_local_cache_cleanup"><a class="anchor" href="#configuring_local_cache_cleanup"></a><a class="link" href="#configuring_local_cache_cleanup">Configuring local cache cleanup</a></h5> 
        <div class="paragraph"> 
         <p>To prevent the local cache from growing in size indefinitely, the local cache directory is cleaned up periodically. By default, the cleanup interval is 24 hours and the retention time is 7 days. The cleanup can be disabled by setting the <code>enabled</code> option to <code>false</code>.</p> 
        </div> 
        <div class="listingblock multi-language-sample"> 
         <div class="title">
          Using the <a href="#custom_extension">Programmatic configuration</a> (Maven extension v1.7+)
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildCacheApi buildCache = (BuildCacheApi) mavenSession.lookup("com.gradle.maven.extension.api.cache.BuildCacheApi");
buildCache.getLocal().getCleanupPolicy().setEnabled(false);</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">$ mvn package -Dgradle.cache.local.cleanup.enabled=false</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="title">
          Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildCache&gt;
    &lt;local&gt;
      &lt;cleanup&gt;
        &lt;enabled&gt;false&lt;/enabled&gt;
      &lt;/cleanup&gt;
    &lt;/local&gt;
  &lt;/buildCache&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>The cleanup interval and retention time are controlled by the <code>interval</code> and <code>retention</code> options. The formats accepted are based on the <a href="https://en.wikipedia.org/wiki/ISO_8601#Durations">ISO-8601 duration format</a> <code>PnDTnHnMn.nS</code>.</p> 
        </div> 
        <div class="listingblock multi-language-sample"> 
         <div class="title">
          Using the <a href="#custom_extension">Programmatic configuration</a> (Maven extension v1.7+)
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildCacheApi buildCache = (BuildCacheApi) mavenSession.lookup("com.gradle.maven.extension.api.cache.BuildCacheApi");
buildCache.getLocal().getCleanupPolicy().setRetentionPeriod(java.time.Period.ofDays(30));
buildCache.getLocal().getCleanupPolicy().setCleanupInterval(java.time.Period.ofDays(10));</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">$ mvn package -Dgradle.cache.local.cleanup.retention=P30D -Dgradle.cache.local.cleanup.interval=P10D</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="title">
          Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildCache&gt;
    &lt;local&gt;
      &lt;cleanup&gt;
        &lt;retention&gt;P30D&lt;/retention&gt;
        &lt;interval&gt;P10D&lt;/interval&gt;
      &lt;/cleanup&gt;
    &lt;/local&gt;
  &lt;/buildCache&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
         </div> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="working_offline"><a class="anchor" href="#working_offline"></a><a class="link" href="#working_offline">Working offline</a></h5> 
        <div class="paragraph"> 
         <p>In order to work offline, the extension needs to have run in online mode at least once in the past 24 hours to check whether the given Gradle Enterprise server allows build caching for Maven. The result of this check is stored in a token in the <a href="#anatomy_of_the_gradle_enterprise_directory">user home</a>. As long as you are working online, the token is refreshed every hour. The local cache will keep working in offline mode until that token expires after 24 hours.</p> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="configuring_the_remote_cache"><a class="anchor" href="#configuring_the_remote_cache"></a><a class="link" href="#configuring_the_remote_cache">Configuring the remote cache</a></h4> 
       <div class="paragraph"> 
        <p>Gradle Enterprise provides a cache node that is built into the server. Additionally, remote cache nodes can be spun up and connected to the server. By default, the built-in cache node of the Gradle Enterprise server is used.</p> 
       </div> 
       <div class="sect4"> 
        <h5 id="using_a_different_cache_node"><a class="anchor" href="#using_a_different_cache_node"></a><a class="link" href="#using_a_different_cache_node">Using a different cache node</a></h5> 
        <div class="paragraph"> 
         <p>The address of the remote cache node can be configured in the <code>server</code> option.</p> 
        </div> 
        <div class="listingblock multi-language-sample"> 
         <div class="title">
          Using the <a href="#custom_extension">Programmatic configuration</a> (Maven extension v1.7+)
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildCacheApi buildCache = (BuildCacheApi) mavenSession.lookup("com.gradle.maven.extension.api.cache.BuildCacheApi");
buildCache.getRemote().setUrl(java.net.URI.create("http://my-node/cache/"));</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">$ mvn package -Dgradle.cache.remote.url=http://my-node/cache/</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="title">
          Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildCache&gt;
    &lt;remote&gt;
      &lt;server&gt;
        &lt;url&gt;http://my-node/cache/&lt;/url&gt;
      &lt;/server&gt;
    &lt;/remote&gt;
  &lt;/buildCache&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>Note that you still need to configure the address of your Gradle Enterprise server in the top-level <code>server</code> option.</p> 
        </div> 
        <div class="admonitionblock note"> 
         <table> 
          <tbody>
           <tr> 
            <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
            <td class="content"> 
             <div class="paragraph"> 
              <p>Similar to the top-level Gradle Enterprise server configuration, the remote cache server configuration also provides an <code>allowUntrusted</code> option to circumvent certificate warnings:</p> 
             </div> 
             <div class="listingblock multi-language-sample"> 
              <div class="title">
               Using the <a href="#custom_extension">Programmatic configuration</a> (Maven extension v1.7+)
              </div> 
              <div class="content"> 
               <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildCacheApi buildCache = (BuildCacheApi) mavenSession.lookup("com.gradle.maven.extension.api.cache.BuildCacheApi");
buildCache.getRemote().setAllowUntrusted(true);</code></pre> 
              </div> 
             </div> 
             <div class="listingblock silver multi-language-sample"> 
              <div class="content"> 
               <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">$ mvn package -Dgradle.cache.remote.allowUntrustedServer=true</code></pre> 
              </div> 
             </div> 
             <div class="listingblock silver multi-language-sample"> 
              <div class="title">
               Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
              </div> 
              <div class="content"> 
               <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildCache&gt;
    &lt;remote&gt;
      &lt;server&gt;
        &lt;url&gt;http://my-node/cache/&lt;/url&gt;
        &lt;allowUntrusted&gt;true&lt;/allowUntrusted&gt;
      &lt;/server&gt;
    &lt;/remote&gt;
  &lt;/buildCache&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
              </div> 
             </div> </td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="supplying_remote_cache_credentials"><a class="anchor" href="#supplying_remote_cache_credentials"></a><a class="link" href="#supplying_remote_cache_credentials">Supplying remote cache credentials</a></h5> 
        <div class="paragraph"> 
         <p>In order to use an authenticated cache node the credentials for that node have to be provided. This can be done directly in your Gradle Enterprise configuration, or via a Maven <code>settings.xml</code> file.</p> 
        </div> 
        <div class="listingblock multi-language-sample"> 
         <div class="title">
          Using the <a href="#custom_extension">Programmatic configuration</a> (Maven extension v1.7+)
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildCacheApi buildCache = (BuildCacheApi) mavenSession.lookup("com.gradle.maven.extension.api.cache.BuildCacheApi");
buildCache.getRemote().getCredentials().setUsername("my-username");
buildCache.getRemote().getCredentials().setPassword("my-password");</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">$ mvn package -Dgradle.cache.remote.username=my-username -Dgradle.cache.remote.password=my-password</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="title">
          Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildCache&gt;
    &lt;remote&gt;
      &lt;server&gt;
        &lt;credentials&gt;
          &lt;username&gt;my-username&lt;/username&gt;
          &lt;password&gt;my-password&lt;/password&gt;
        &lt;/credentials&gt;
      &lt;/server&gt;
    &lt;/remote&gt;
  &lt;/buildCache&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>Instead of putting plain-text passwords into the configuration file, you should inject them via environment variables as demonstrated below.</p> 
        </div> 
        <div class="listingblock silver"> 
         <div class="title">
          gradle-enterprise.xml
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildCache&gt;
    &lt;remote&gt;
      &lt;server&gt;
        &lt;credentials&gt;
          &lt;username&gt;${env.GRADLE_ENTERPRISE_CACHE_USERNAME}&lt;/username&gt;
          &lt;password&gt;${env.GRADLE_ENTERPRISE_CACHE_PASSWORD}&lt;/password&gt;
        &lt;/credentials&gt;
      &lt;/server&gt;
    &lt;/remote&gt;
  &lt;/buildCache&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
         </div> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="supplying_remote_cache_credentails_via_maven_settings_xml"><a class="anchor" href="#supplying_remote_cache_credentails_via_maven_settings_xml"></a><a class="link" href="#supplying_remote_cache_credentails_via_maven_settings_xml">Supplying remote cache credentails via Maven <code>settings.xml</code></a></h5> 
        <div class="paragraph"> 
         <p>Alternatively, you can configure the cache node credentials in the <code>settings.xml</code> file, using Maven’s <a href="https://maven.apache.org/guides/mini/guide-encryption.html">password encryption</a> feature to safely store these credentials.</p> 
        </div> 
        <div class="paragraph"> 
         <p>Note that credentials specified directly via Gradle Enterprise configuration take precedence over the credentials specified in a <code>settings.xml</code> file.</p> 
        </div> 
        <div class="listingblock silver"> 
         <div class="title">
          &lt;user-home&gt;/.m2/settings.xml
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;servers&gt;
  &lt;server&gt;
    &lt;id&gt;my-node&lt;/id&gt;
    &lt;username&gt;my-username&lt;/username&gt;
    &lt;password&gt;my-password&lt;/password&gt;
  &lt;/server&gt;
&lt;/servers&gt;</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>The cache node with the ID <code>my-node</code> can then be referenced in the remote cache configuration.</p> 
        </div> 
        <div class="listingblock multi-language-sample"> 
         <div class="title">
          Using the <a href="#custom_extension">Programmatic configuration</a> (Maven extension v1.7+)
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildCacheApi buildCache = (BuildCacheApi) mavenSession.lookup("com.gradle.maven.extension.api.cache.BuildCacheApi");
buildCache.getRemote().setServerId("my-node");</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">$ mvn package -Dgradle.cache.remote.serverId=my-node</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="title">
          Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildCache&gt;
    &lt;remote&gt;
      &lt;server&gt;
        &lt;id&gt;my-node&lt;/id&gt;
        &lt;url&gt;http://my-node/cache/&lt;/url&gt;
      &lt;/server&gt;
    &lt;/remote&gt;
  &lt;/buildCache&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
         </div> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="disabling_the_remote_cache"><a class="anchor" href="#disabling_the_remote_cache"></a><a class="link" href="#disabling_the_remote_cache">Disabling the remote cache</a></h5> 
        <div class="paragraph"> 
         <p>The remote build cache is enabled by default. This can be changed by setting the <code>enabled</code> option to <code>false</code>.</p> 
        </div> 
        <div class="listingblock multi-language-sample"> 
         <div class="title">
          Using the <a href="#custom_extension">Programmatic configuration</a> (Maven extension v1.7+)
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildCacheApi buildCache = (BuildCacheApi) mavenSession.lookup("com.gradle.maven.extension.api.cache.BuildCacheApi");
buildCache.getRemote().setEnabled(false);</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">$ mvn package -Dgradle.cache.remote.enabled=false</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="title">
          Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildCache&gt;
    &lt;remote&gt;
      &lt;enabled&gt;false&lt;/enabled&gt;
    &lt;/remote&gt;
  &lt;/buildCache&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
         </div> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="enabling_remote_store"><a class="anchor" href="#enabling_remote_store"></a><a class="link" href="#enabling_remote_store">Enabling remote store</a></h5> 
        <div class="paragraph"> 
         <p>Since the remote build cache is shared with other developers and CI machines, storing in the remote cache is disabled by default. Storing outputs in the remote cache can be enabled by setting the <code>storeEnabled</code> option to <code>true</code>.</p> 
        </div> 
        <div class="listingblock multi-language-sample"> 
         <div class="title">
          Using the <a href="#custom_extension">Programmatic configuration</a> (Maven extension v1.7+)
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">BuildCacheApi buildCache = (BuildCacheApi) mavenSession.lookup("com.gradle.maven.extension.api.cache.BuildCacheApi");
buildCache.getRemote().setStoreEnabled(true);</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">$ mvn package -Dgradle.cache.remote.storeEnabled=true</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver multi-language-sample"> 
         <div class="title">
          Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a>
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;buildCache&gt;
    &lt;remote&gt;
      &lt;storeEnabled&gt;true&lt;/storeEnabled&gt;
    &lt;/remote&gt;
  &lt;/buildCache&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
         </div> 
        </div> 
        <div class="admonitionblock note"> 
         <table> 
          <tbody>
           <tr> 
            <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
            <td class="content"> 
             <div class="paragraph"> 
              <p>In general, the remote cache should only be populated by controlled build environments such as CI servers. Therefore, the recommendation is to only enable it on the CI server.</p> 
             </div> </td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="normalization"><a class="anchor" href="#normalization"></a><a class="link" href="#normalization">Runtime classpath normalization</a></h3> 
      <div class="paragraph"> 
       <p>A common pattern is to have some build logic that writes volatile data to some files. For example your build might write a timestamp to a <code>build.properties</code> file. This helps to identify the source of a build artifact. However, this also causes problems with build caching: when Maven executes tests, the runtime classpath becomes part of the cache key for that test run. Any resource file that is processed by Maven is also added to that runtime classpath. In consequence, if a build generates a build timestamp, this causes the runtime classpath to change on every build invocation, resulting in cache misses. To circumvent this situation the Maven extension provides several configuration options to normalize the runtime classpath in order to deal with this volatility.</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="ignoring_arbitrary_files"><a class="anchor" href="#ignoring_arbitrary_files"></a><a class="link" href="#ignoring_arbitrary_files">Ignoring arbitrary files</a></h4> 
       <div class="paragraph"> 
        <p>The following snippet shows you how to ignore any file called <code>META-INF/build.properties</code> on any runtime classpath in the given project. You can share this setting across many projects by putting it in the <code>pluginManagement</code> section of your parent POM. You can use ANT-style patterns like <code>META-INF/**/*.sql</code> as well.</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;pluginManagement&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;com.gradle&lt;/groupId&gt;
      &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;gradleEnterprise&gt;
          &lt;normalization&gt;
            &lt;runtimeClassPath&gt;
              &lt;ignoredFiles&gt;
                &lt;ignoredFile&gt;META-INF/build.properties&lt;/ignoredFile&gt;
              &lt;/ignoredFiles&gt;
            &lt;/runtimeClassPath&gt;
          &lt;/normalization&gt;
        &lt;/gradleEnterprise&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/pluginManagement&gt;</code></pre> 
        </div> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> 
            <div class="paragraph"> 
             <p>Files matching the patterns <code>META-INF/maven/**/pom.xml</code> and <code>META-INF/maven/**/pom.properties</code> are always ignored.</p> 
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="ignoring_specific_entries_in_properties_files"><a class="anchor" href="#ignoring_specific_entries_in_properties_files"></a><a class="link" href="#ignoring_specific_entries_in_properties_files">Ignoring specific entries in properties files</a></h4> 
       <div class="paragraph"> 
        <p><em>(Maven extension 1.8+)</em></p> 
       </div> 
       <div class="paragraph"> 
        <p>Since properties files are a common file format to store data generated by the build, the normalization DSL provides special support for ignoring specific entries in properties files. Again, ANT-style patterns can be used to match relevant properties files. In the following example any files named <code>build.properties</code> in <code>com/example</code> or any subdirectory are matched and the value of the property <code>build.timestamp</code> is ignored:</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;pluginManagement&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;com.gradle&lt;/groupId&gt;
      &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;gradleEnterprise&gt;
          &lt;normalization&gt;
            &lt;runtimeClassPath&gt;
              &lt;propertiesNormalizations&gt;
                &lt;propertiesNormalization&gt;
                  &lt;path&gt;com/example/**/build.properties&lt;/path&gt;
                  &lt;ignoredProperties&gt;
                    &lt;ignore&gt;build.timestamp&lt;/ignore&gt;
                  &lt;/ignoredProperties&gt;
                &lt;/propertiesNormalization&gt;
              &lt;/propertiesNormalizations&gt;
            &lt;/runtimeClassPath&gt;
          &lt;/normalization&gt;
        &lt;/gradleEnterprise&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/pluginManagement&gt;</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>A common location to store properties files is the META-INF directory. Thus, the normalization DSL provides a shortcut for normalizing files matching <code>META-INF/**/*.properties</code></p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;pluginManagement&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;com.gradle&lt;/groupId&gt;
      &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;gradleEnterprise&gt;
          &lt;normalization&gt;
            &lt;runtimeClassPath&gt;
              &lt;metaInf&gt;
                &lt;ignoredProperties&gt;
                  &lt;ignore&gt;app.version&lt;/ignore&gt;
                &lt;/ignoredProperties&gt;
              &lt;/metaInf&gt;
            &lt;/runtimeClassPath&gt;
          &lt;/normalization&gt;
        &lt;/gradleEnterprise&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/pluginManagement&gt;</code></pre> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="normalizing_contents_of_meta_inf"><a class="anchor" href="#normalizing_contents_of_meta_inf"></a><a class="link" href="#normalizing_contents_of_meta_inf">Normalizing contents of META-INF</a></h4> 
       <div class="paragraph"> 
        <p><em>(Maven extension 1.8+)</em></p> 
       </div> 
       <div class="paragraph"> 
        <p>The <code>&lt;metaInf&gt;</code> configuration element offers even more convenience configuration settings for normalizing the contents of the META-INF directory. For example, you may only want to ignore one or more attributes in MANIFEST files, e.g. <code>Implementation-Version</code> instead of ignoring the whole file. This can be done as follows:</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;pluginManagement&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;com.gradle&lt;/groupId&gt;
      &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;gradleEnterprise&gt;
          &lt;normalization&gt;
            &lt;runtimeClassPath&gt;
              &lt;metaInf&gt;
                &lt;ignoredAttributes&gt;
                  &lt;ignore&gt;Implementation-Version&lt;/ignore&gt;
                &lt;/ignoredAttributes&gt;
              &lt;/metaInf&gt;
            &lt;/runtimeClassPath&gt;
          &lt;/normalization&gt;
        &lt;/gradleEnterprise&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/pluginManagement&gt;</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>If you want to ignore MANIFEST files completely there’s the <code>&lt;ignoreManifest&gt;</code> configuration as a shorthand for that. It’s the equivalent of adding <code>META-INF/MANIFEST.MF</code> as an ignored file.</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;pluginManagement&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;com.gradle&lt;/groupId&gt;
      &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;gradleEnterprise&gt;
          &lt;normalization&gt;
            &lt;runtimeClassPath&gt;
              &lt;metaInf&gt;
                &lt;ignoreManifest&gt;true&lt;/ignoreManifest&gt;
              &lt;/metaInf&gt;
            &lt;/runtimeClassPath&gt;
          &lt;/normalization&gt;
        &lt;/gradleEnterprise&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/pluginManagement&gt;</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>In situations where you have several changing files in the META-INF directory, you might want to ignore the contents of that directory completely. The <code>&lt;ignoreCompletely&gt;</code> configuration is a shorthand for adding <code>META-INF/**</code> to ignored files.</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;pluginManagement&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;com.gradle&lt;/groupId&gt;
      &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;gradleEnterprise&gt;
          &lt;normalization&gt;
            &lt;runtimeClassPath&gt;
              &lt;metaInf&gt;
                &lt;ignoreCompletely&gt;true&lt;/ignoreCompletely&gt;
              &lt;/metaInf&gt;
            &lt;/runtimeClassPath&gt;
          &lt;/normalization&gt;
        &lt;/gradleEnterprise&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/pluginManagement&gt;</code></pre> 
        </div> 
       </div> 
       <div class="admonitionblock warning"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-warning" title="Warning"></i> </td> 
           <td class="content"> 
            <div class="paragraph"> 
             <p>The more you ignore using runtime classpath normalization, the more likely false cache hits become. You should use these features with care and try to narrow down the scope of normalizations as much as possible, e.g. you should prefer normalizing a single MANIFEST attribute over ignoring the META-INF directory completely.</p> 
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="declaring_inputs_and_outputs"><a class="anchor" href="#declaring_inputs_and_outputs"></a><a class="link" href="#declaring_inputs_and_outputs">Declaring inputs and outputs</a></h3> 
      <div class="paragraph"> 
       <p>The build cache works based on inputs and outputs. For each supported goal execution a cache key is calculated by inspecting all inputs. The cache key is then used to lookup the outputs of that execution in the cache. If no result can be found, the goal is executed and the outputs are stored in the cache under the cache key. This section explains how input and outputs can be fine-tuned.</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="adding_inputs_and_outputs"><a class="anchor" href="#adding_inputs_and_outputs"></a><a class="link" href="#adding_inputs_and_outputs">Adding additional inputs and outputs to a plugin or execution</a></h4> 
       <div class="paragraph"> 
        <p>The predefined inputs and outputs of any supported goal can be augmented by declaring them in the <code>&lt;pluginManagement&gt;</code> section of your <code>pom.xml</code> file. A common use case for declaring additional input files are test cases that read from a location that is not automatically tracked. For example, you might have <a href="https://cucumber.io">Cucumber</a> specification files located in the <code>src/test/specs</code> directory. Any change to the files in that directory may change the result of running the tests. So changing specification files should result in rerunning the tests and not loading the results from the cache. Without additional configuration the build cache is unaware of these additional inputs and will therefore load the result from the cache even if specification files change.</p> 
       </div> 
       <div class="sect4"> 
        <h5 id="declaring_additional_inputs"><a class="anchor" href="#declaring_additional_inputs"></a><a class="link" href="#declaring_additional_inputs">Declaring additional inputs</a></h5> 
        <div class="paragraph"> 
         <p>The following will add the directory <code>src/test/specs</code> as an input to all executions of the <a href="https://maven.apache.org/surefire/maven-surefire-plugin/">Apache Maven Surefire plugin</a>. Any files in that folder which match the given includes and excludes will then be tracked as part of the cache key:</p> 
        </div> 
        <div class="listingblock silver"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;pluginManagement&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;com.gradle&lt;/groupId&gt;
      &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;gradleEnterprise&gt;
          &lt;plugins&gt;
            &lt;plugin&gt;
              &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
              &lt;inputs&gt;
                &lt;fileSets&gt;
                  &lt;fileSet&gt;
                    &lt;name&gt;specs&lt;/name&gt;
                    &lt;paths&gt;
                      &lt;path&gt;src/test/specs&lt;/path&gt;
                    &lt;/paths&gt;
                    &lt;includes&gt;
                      &lt;include&gt;**/*.feature&lt;/include&gt;
                    &lt;/includes&gt;
                    &lt;excludes&gt;
                      &lt;exclude&gt;archive/**/*.feature&lt;/exclude&gt;
                    &lt;/excludes&gt;
                    &lt;normalization&gt;RELATIVE_PATH&lt;/normalization&gt;
                  &lt;/fileSet&gt;
                &lt;/fileSets&gt;
              &lt;/inputs&gt;
            &lt;/plugin&gt;
          &lt;/plugins&gt;
        &lt;/gradleEnterprise&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/pluginManagement&gt;</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>While processing inputs, various normalization strategies can be applied in order to raise the effectiveness of the build cache. In other words, normalization strategies are a way of ignoring changes to input files that are irrelevant for the goal execution. The following input normalization strategies are supported:</p> 
        </div> 
        <table class="tableblock frame-all grid-all stretch"> 
         <colgroup> 
          <col style="width: 25%;"> 
          <col style="width: 25%;"> 
          <col style="width: 25%;"> 
          <col style="width: 25%;"> 
         </colgroup> 
         <thead> 
          <tr> 
           <th class="tableblock halign-left valign-top">Strategy</th> 
           <th class="tableblock halign-left valign-top">Description</th> 
           <th class="tableblock halign-left valign-top">ignoreEmptyDirectories</th> 
           <th class="tableblock halign-left valign-top">ignoreLineEndings</th> 
          </tr> 
         </thead> 
         <tbody> 
          <tr> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">IGNORED_PATH</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Considers the full content of files, but ignores their path.</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Not Supported</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Supported</p></td> 
          </tr> 
          <tr> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">NAME_ONLY</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Considers the full content of files, but only tracks their name and not the rest of their path.</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Supported</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Supported</p></td> 
          </tr> 
          <tr> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">RELATIVE_PATH</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">The default strategy. Considers the full content of a file, but only tracks their path relative to their root directory. The root directory is the directory that was added as an input. The path of that root directory itself is ignored.</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Supported</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Supported</p></td> 
          </tr> 
          <tr> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">ABSOLUTE_PATH</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Considers the full content of files as well as their absolute path. Using this strategy is strongly discouraged, as the project directory (and thus all absolute paths) are usually different on different machines, which prevents cache hits.</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Supported</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Supported</p></td> 
          </tr> 
          <tr> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">CLASSPATH</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Considers only the information relevant for running Java code.</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Not Supported</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Supported</p></td> 
          </tr> 
          <tr> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">COMPILE_CLASSPATH</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Considers only the information relevant for compiling Java code. This means for example that only class files are considered and private implementation details like method bodies are ignored.</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Not Supported</p></td> 
           <td class="tableblock halign-left valign-top"><p class="tableblock">Not Supported</p></td> 
          </tr> 
         </tbody> 
        </table> 
       </div> 
       <div class="sect4"> 
        <h5 id="ignoring_empty_directories"><a class="anchor" href="#ignoring_empty_directories"></a><a class="link" href="#ignoring_empty_directories">Ignoring empty directories</a></h5> 
        <div class="paragraph"> 
         <p><em>(Maven extension 1.8+)</em></p> 
        </div> 
        <div class="paragraph"> 
         <p>The <code>NAME_ONLY</code>, <code>RELATIVE_PATH</code>, and <code>ABSOLUTE_PATH</code> strategies support additional normalization options. Their sensitivity to the presence of empty directories in the source tree can be controlled. The default is to take empty directories into account. This means that adding an empty directory to the source tree will result in a cache miss. The following configuration causes empty directories to be ignored:</p> 
        </div> 
        <div class="listingblock silver"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;normalization&gt;
  &lt;strategy&gt;RELATIVE_PATH&lt;/strategy&gt;
  &lt;ignoreEmptyDirectories&gt;true&lt;/ignoreEmptyDirectories&gt;
&lt;/normalization&gt;</code></pre> 
         </div> 
        </div> 
        <div class="admonitionblock note"> 
         <table> 
          <tbody>
           <tr> 
            <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
            <td class="content"> 
             <div class="paragraph"> 
              <p>A common reason for having empty directories in the source tree is using a version control system like <a href="https://git-scm.com/">Git</a> that only keeps tracks of files. When one developer deletes a directory tree on their machine and another developer pulls that change from the repository, Git will only delete the files contained in that directory tree leaving parent directories empty.</p> 
             </div> </td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="ignoring_line_endings"><a class="anchor" href="#ignoring_line_endings"></a><a class="link" href="#ignoring_line_endings">Ignoring line endings</a></h5> 
        <div class="paragraph"> 
         <p><em>(Maven extension 1.11+)</em></p> 
        </div> 
        <div class="paragraph"> 
         <p>The <code>ignoreLineEndings</code> option allows authors to specify that line endings in text files should be normalized for build cache checks, so that files that only differ by line endings will be considered identical. Binary files, on the other hand, will not be affected by this normalization.</p> 
        </div> 
        <div class="admonitionblock note"> 
         <table> 
          <tbody>
           <tr> 
            <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
            <td class="content"> 
             <div class="paragraph"> 
              <p>Line ending normalization only applies to text files encoded with the ASCII character set or one of its supersets (e.g., UTF-8). Text files encoded in a non-ASCII character set (e.g., UTF-16) will be treated as binary files and will not be subject to line ending normalization.</p> 
             </div> </td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
        <div class="listingblock silver"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;normalization&gt;
  &lt;strategy&gt;RELATIVE_PATH&lt;/strategy&gt;
  &lt;ignoreLineEndings&gt;true&lt;/ignoreLineEndings&gt;
&lt;/normalization&gt;</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>All strategies except <code>COMPILE_CLASSPATH</code> support this option.</p> 
        </div> 
        <div class="paragraph"> 
         <p>The Maven extension normalizes line endings in source files when computing the build cache key for <code>compile</code> or <code>testCompile</code> goals of the <a href="#maven_compiler_plugin">maven-compiler-plugin</a>.</p> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="declaring_additional_outputs"><a class="anchor" href="#declaring_additional_outputs"></a><a class="link" href="#declaring_additional_outputs">Declaring additional outputs</a></h5> 
        <div class="paragraph"> 
         <p>Cucumber can be configured to generate various types of reports. These reports may be located in an output folder different from the default test report folder. In order to store them in the cache for later retrieval the output location needs to be declared as an additional output. The following will add the additional output directory <code>${project.build.directory}/cucumber</code> to the <code>default-test</code> execution of the surefire plugin. The contents of this directory will become part of the cache archive for this execution.</p> 
        </div> 
        <div class="listingblock silver"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;pluginManagement&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;com.gradle&lt;/groupId&gt;
      &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;gradleEnterprise&gt;
          &lt;plugins&gt;
            &lt;plugin&gt;
              &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
              &lt;executions&gt;
                &lt;execution&gt;
                  &lt;id&gt;cucumber-tests&lt;/id&gt;
                  &lt;outputs&gt;
                    &lt;directories&gt;
                      &lt;directory&gt;
                        &lt;name&gt;cucumber-reports&lt;/name&gt;
                        &lt;path&gt;${project.build.directory}/cucumber&lt;/path&gt;
                      &lt;/directory&gt;
                    &lt;/directories&gt;
                  &lt;/outputs&gt;
                &lt;/execution&gt;
              &lt;/executions&gt;
            &lt;/plugin&gt;
          &lt;/plugins&gt;
        &lt;/gradleEnterprise&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/pluginManagement&gt;</code></pre> 
         </div> 
        </div> 
        <div class="admonitionblock note"> 
         <table> 
          <tbody>
           <tr> 
            <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
            <td class="content"> 
             <div class="paragraph"> 
              <p>Configuring caching for a specific goal execution is not limited to declaring additional outputs. The same constructs for defining additional inputs that have been shown before can also be used for specific goal executions.</p> 
             </div> </td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="disabling_build_caching_for_a_plugin_or_execution"><a class="anchor" href="#disabling_build_caching_for_a_plugin_or_execution"></a><a class="link" href="#disabling_build_caching_for_a_plugin_or_execution">Disabling build caching for a plugin or execution</a></h4> 
       <div class="paragraph"> 
        <p>You can disable caching on a fine-grained level in the <code>&lt;pluginManagement&gt;</code> section of your <code>pom.xml</code> file. The following will disable caching for all executions of the failsafe plugin in the given project:</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;pluginManagement&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;com.gradle&lt;/groupId&gt;
      &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;gradleEnterprise&gt;
          &lt;plugins&gt;
            &lt;plugin&gt;
              &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
              &lt;outputs&gt;
                &lt;notCacheableBecause&gt;these tests verify integration with other systems and should rerun even if our inputs didn't change&lt;/notCacheableBecause&gt;
              &lt;/outputs&gt;
            &lt;/plugin&gt;
          &lt;/plugins&gt;
        &lt;/gradleEnterprise&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/pluginManagement&gt;</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>You can also disable caching for a specific execution. Other executions of that plugin will then still remain cacheable. The following will disable caching only for the <code>systems-integration-test</code> execution of the failsafe plugin. Other tests will remain cacheable.</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;pluginManagement&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;com.gradle&lt;/groupId&gt;
      &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;gradleEnterprise&gt;
          &lt;plugins&gt;
            &lt;plugin&gt;
              &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
              &lt;executions&gt;
                &lt;execution&gt;
                  &lt;id&gt;systems-integration-test&lt;/id&gt;
                  &lt;outputs&gt;
                    &lt;notCacheableBecause&gt;these tests verify integration with other systems and should rerun even if our inputs didn't change&lt;/notCacheableBecause&gt;
                  &lt;/outputs&gt;
                &lt;/execution&gt;
              &lt;/executions&gt;
            &lt;/plugin&gt;
          &lt;/plugins&gt;
        &lt;/gradleEnterprise&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/pluginManagement&gt;</code></pre> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="making_other_goals_cacheable"><a class="anchor" href="#making_other_goals_cacheable"></a><a class="link" href="#making_other_goals_cacheable">Making other goals cacheable</a></h4> 
       <div class="paragraph"> 
        <p>The extension allows you to make any goal cacheable, beyond the ones that are supported out of the box. Take great care to define all of the goal’s inputs and outputs before doing so, to avoid false cache hits and follow-up errors.</p> 
       </div> 
       <div class="paragraph"> 
        <p>When making goals cacheable, you don’t need to repeat the values of all their inputs and outputs. You can simply provide the name of each property and the extension will look up the value in the goal’s configuration. The extension will make sure that you have handled all configuration parameters of the goal in this way. If some parameter is irrelevant for the purposes of caching, e.g. because it only affects console output, you can tell the extension to ignore it.</p> 
       </div> 
       <div class="paragraph"> 
        <p>For input properties, the extension supports all primitives, Strings, Enums and Collections, Arrays and Maps of those. Any other types need to be broken down using the <code>nestedProperties</code> (for a single complex type) or <code>iteratedProperties</code> (for a Collection of complex types) configuration.</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;pluginManagement&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;com.gradle&lt;/groupId&gt;
      &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;gradleEnterprise&gt;
          &lt;plugins&gt;
            &lt;plugin&gt;
              &lt;groupId&gt;my.company&lt;/groupId&gt;
              &lt;artifactId&gt;awesome-but-slow-plugin&lt;/artifactId&gt;
              &lt;inputs&gt;
                &lt;fileSets&gt;
                  &lt;fileSet&gt;
                    &lt;name&gt;sources&lt;/name&gt;
                    &lt;includesProperty&gt;includes&lt;/includesProperty&gt;
                    &lt;excludesProperty&gt;excludes&lt;/excludesProperty&gt;
                  &lt;/fileSet&gt;
                &lt;/fileSets&gt;
                &lt;properties&gt;
                  &lt;property&gt;
                    &lt;name&gt;encoding&lt;/name&gt;
                  &lt;/property&gt;
                &lt;/properties&gt;
                &lt;ignoredProperties&gt;
                  &lt;ignore&gt;logWarnings&lt;/ignore&gt;
                &lt;/ignoredProperties&gt;
              &lt;/inputs&gt;
              &lt;nestedProperties&gt;
                &lt;property&gt;
                  &lt;name&gt;forkOptions&lt;/name&gt;
                  &lt;inputs&gt;
                    &lt;properties&gt;
                      &lt;property&gt;
                        &lt;name&gt;maxHeap&lt;/name&gt;
                      &lt;/property&gt;
                    &lt;/properties&gt;
                  &lt;/inputs&gt;
                &lt;/property&gt;
              &lt;/nestedProperties&gt;
              &lt;iteratedProperties&gt;
                &lt;property&gt;
                  &lt;name&gt;targetPlatforms&lt;/name&gt;
                  &lt;inputs&gt;
                    &lt;properties&gt;
                      &lt;property&gt;
                        &lt;name&gt;architecture&lt;/name&gt;
                      &lt;/property&gt;
                      &lt;property&gt;
                        &lt;name&gt;linkingMode&lt;/name&gt;
                      &lt;/property&gt;
                    &lt;/properties&gt;
                  &lt;/inputs&gt;
                &lt;/property&gt;
              &lt;/iteratedProperties&gt;
              &lt;outputs&gt;
                &lt;directories&gt;
                  &lt;directory&gt;
                    &lt;name&gt;outputDir&lt;/name&gt;
                  &lt;/directory&gt;
                &lt;/directories&gt;
                &lt;cacheableBecause&gt;this plugin has CPU-bound goals with well-defined inputs and outputs&lt;/cacheableBecause&gt;
              &lt;/outputs&gt;
            &lt;/plugin&gt;
          &lt;/plugins&gt;
        &lt;/gradleEnterprise&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/pluginManagement&gt;</code></pre> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="solving_problems_with_build_caching"><a class="anchor" href="#solving_problems_with_build_caching"></a><a class="link" href="#solving_problems_with_build_caching">Troubleshooting</a></h3> 
      <div class="paragraph"> 
       <p>While working with the build cache you may encounter situations where build results are not retrieved from cache although you would expect them to. This section provides guidance for analyzing and solving these problems.</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="debugging_cache_operations"><a class="anchor" href="#debugging_cache_operations"></a><a class="link" href="#debugging_cache_operations">Debugging cache operations</a></h4> 
       <div class="paragraph"> 
        <p>The extension provides several loggers to make analyzing problems with build caching easier. To show the effective cache configuration, use the <code>gradle.goal.cache</code> logger:</p> 
       </div> 
       <div class="literalblock"> 
        <div class="content"> 
         <pre>$ mvn clean verify -Dorg.slf4j.simpleLogger.log.gradle.goal.cache=debug
[DEBUG] Using the build cache with the following configuration:
  Local build cache: enabled
      directory: /Users/johndoe/.m2/.gradle-enterprise/build-cache
      cleanup: enabled
          retention: 168h
          interval: 24h
  Remote build cache: enabled
      url: https://my-server/cache/
      authenticated: false
      storeEnabled: false
      allowUntrustedServer: false</pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>The <code>gradle.goal.cache</code> logger will also print the result of determining the cacheability of the executed goals:</p> 
       </div> 
       <div class="literalblock"> 
        <div class="content"> 
         <pre>[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ maven-build-scan-extension-sample ---
[INFO] skip non existing resourceDirectory /Users/johndoe/workspace/maven-build-scan-quickstart/src/main/resources
[DEBUG] Build caching was not enabled for this goal execution because the 'resources' goal was not supported.
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ maven-build-scan-extension-sample ---
[DEBUG] Local cache miss
[DEBUG] Remote cache miss
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 1 source file to /Users/johndoe/workspace/maven-build-scan-quickstart/target/classes
[DEBUG] Stored outputs in the local build cache</pre> 
        </div> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> 
            <div class="paragraph"> 
             <p>All information printed by the <code>gradle.goal.cache</code> can also be viewed in the build scan for that build.</p> 
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="finding_the_cause_of_cache_misses"><a class="anchor" href="#finding_the_cause_of_cache_misses"></a><a class="link" href="#finding_the_cause_of_cache_misses">Finding the cause of cache misses</a></h4> 
       <div class="paragraph"> 
        <p>Sometimes you might encounter a situation where a goal execution is not avoided by using the cache although you would expect it to be. For example, if you run the same build twice without any changes, the outputs of all <a href="#cacheable_plugins_and_goals">supported goals</a> should be retrieved from the local build cache (if it is enabled). If this is not the case, this almost always is caused by unstable inputs, e.g. a timestamp being added to a file by some build logic. In order to identify which inputs change between builds the Maven build comparison feature can be used. Simply run the same Maven build twice and compare those two builds. To make it easier to find unstable input files <a href="#capturing_goal_input_files">capturing of goal input files</a> should be explicitly enabled using <code>-Dgradle.scan.captureGoalInputFiles=true</code></p> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> 
            <div class="paragraph"> 
             <p>Capturing goal input files has an impact on build performance. For this reason it is disabled by default.</p> 
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <div class="paragraph"> 
        <p>Once the build scans have been published they can be compared in Gradle Enterprise. In this example, the build was configured to write a timestamp to the <code>build.properties</code> file. When comparing the two builds this shows up nicely in the comparison.</p> 
       </div> 
       <div class="imageblock shadow"> 
        <div class="content"> 
         <img src="images/comparison-unstable-input.png" alt="comparison unstable input" width="1000"> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>Once the changing input is identified, the build can be changed to be reproducable or <a href="#normalization">normalization</a> can be used to ignore the changing input.</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="solving_common_causes_of_cache_misses"><a class="anchor" href="#solving_common_causes_of_cache_misses"></a><a class="link" href="#solving_common_causes_of_cache_misses">Solving common causes of cache misses</a></h4> 
       <div class="paragraph"> 
        <p>Some widely used Maven plugins are a common cause of cache misses because they produce changing build results. This chapter shows you how to solve them.</p> 
       </div> 
       <div class="sect4"> 
        <h5 id="jaxb"><a class="anchor" href="#jaxb"></a><a class="link" href="#jaxb">JAXB</a></h5> 
        <div class="paragraph"> 
         <p>Old versions of the XJC binding compiler generate classes with methods in random order on each invocation. This has been <a href="https://github.com/javaee/jaxb-v2/issues/598">fixed in JAXB 2.2.11</a>. Since there are several Maven plugins available for JAXB, you need to find out which release of the plugin you are using includes the fixed JAXB release. For example the <a href="https://www.mojohaus.org/jaxb2-maven-plugin/Documentation/v2.4/index.html">jaxb2-maven-plugin</a> includes the fix starting from release 2.1.</p> 
        </div> 
        <div class="paragraph"> 
         <p>Another cause of unstable build results when using JAXB is the fact that the XJC binding compiler generates a header containing a timestamp into all Java classes. This behavior is controlled by the <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/xjc.html"><code>--no-header</code> option</a> which is <code>false</code> by default (= always generate a header). To prevent this add the corresponding configuration to the Maven plugin you use, for example:</p> 
        </div> 
        <div class="listingblock"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;plugin&gt;
  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
  &lt;artifactId&gt;jaxb2-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;2.4&lt;/version&gt;
  &lt;configuration&gt;
    &lt;noGeneratedHeaderComments&gt;true&lt;/noGeneratedHeaderComments&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>If you’re using the <a href="https://github.com/highsource/maven-jaxb2-plugin">maven-jaxb2-plugin</a> it’s still a good idea to remove unnecessary instability from its outputs. However, the Gradle Enterprise Maven Extension <a href="#maven-jaxb2-plugin">supports caching its <code>generate</code> goal</a> even if file headers are being generated. Thus, downstream goals will not be affected by its changing outputs when they are loaded from the cache.</p> 
        </div> 
        <div class="paragraph"> 
         <p>Some of the Maven JAXB plugins generate code based on the current system’s locale if not configured otherwise. This leads to unstable outputs depending on the configuration of the machine that executes the build, which in turn can lead to cache misses. For this reason the locale to use during code generation should be explicitly configured. Both the <a href="https://www.mojohaus.org/jaxb2-maven-plugin/Documentation/v2.4/xjc-mojo.html#locale">jaxb2-maven-plugin</a> and the <a href="https://github.com/highsource/maven-jaxb2-plugin/wiki/Controlling-the-Output">maven-jaxb2-plugin</a> provide a <code>&lt;locale&gt;</code> option for this.</p> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="maven_bundle_plugin"><a class="anchor" href="#maven_bundle_plugin"></a><a class="link" href="#maven_bundle_plugin">maven-bundle-plugin</a></h5> 
        <div class="paragraph"> 
         <p>By default the <a href="http://felix.apache.org/documentation/subprojects/apache-felix-maven-bundle-plugin-bnd.html">maven-bundle-plugin</a> generates a timestamp in the <code>MANIFEST.MF</code> file. To prevent this, the configuration of the plugin has to be adjusted:</p> 
        </div> 
        <div class="listingblock"> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;plugin&gt;
  &lt;groupId&gt;org.apache.felix&lt;/groupId&gt;
  &lt;artifactId&gt;maven-bundle-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;archive&gt;
      &lt;addMavenDescriptor&gt;false&lt;/addMavenDescriptor&gt;
    &lt;/archive&gt;
    &lt;instructions&gt;
      &lt;_removeheaders&gt;Bnd-LastModified&lt;/_removeheaders&gt;
    &lt;/instructions&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>Note that the underscope in <code>&lt;_removeheaders&gt;</code> is not a typo.</p> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="maven_resources_plugin"><a class="anchor" href="#maven_resources_plugin"></a><a class="link" href="#maven_resources_plugin">maven-resources-plugin</a></h5> 
        <div class="paragraph"> 
         <p>A common pattern is to write a build timestamp to a <code>build.properties</code> file using <a href="https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html">Maven resource filtering</a>. One way to fix this is using <a href="#normalization">normalization</a> to ignore the file. Alternatively the build can be adjusted by moving the generation of the timestamp to a separate profile that is only executed when creating a release:</p> 
        </div> 
        <div class="listingblock silver"> 
         <div class="title">
          build.properties
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">build.timestamp=${timestamp}</code></pre> 
         </div> 
        </div> 
        <div class="listingblock silver"> 
         <div class="title">
          pom.xml
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;properties&gt;
  &lt;timestamp&gt;2019-03-07 12:00:00.000&lt;/timestamp&gt;
&lt;/properties&gt;

&lt;build&gt;
  &lt;resources&gt;
    &lt;resource&gt;
      &lt;directory&gt;src/main/resources&lt;/directory&gt;
      &lt;filtering&gt;true&lt;/filtering&gt;
    &lt;/resource&gt;
  &lt;/resources&gt;
&lt;/build&gt;

&lt;profile&gt;
  &lt;id&gt;release&lt;/id&gt;
  &lt;properties&gt;
    &lt;maven.build.timestamp.format&gt;yyyy-MM-dd HH:mm:ss.S&lt;/maven.build.timestamp.format&gt;
    &lt;timestamp&gt;${maven.build.timestamp}&lt;/timestamp&gt;
  &lt;/properties&gt;
&lt;/profile&gt;</code></pre> 
         </div> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="maven_failsafe_plugin"><a class="anchor" href="#maven_failsafe_plugin"></a><a class="link" href="#maven_failsafe_plugin">maven-failsafe-plugin</a></h5> 
        <div class="paragraph"> 
         <p>The maven-failsafe-plugin provides two goals: <code>integration-test</code> and <code>verify</code>. The former runs in the <code>integration-test</code> phase of the build and writes its results to a <a href="https://maven.apache.org/surefire/maven-failsafe-plugin/integration-test-mojo.html#summaryFile">summary file</a>. The latter runs in the <code>verify</code> phase, reads the summary file, and fails the build in case of test failures.</p> 
        </div> 
        <div class="paragraph"> 
         <p>When configuring multiple Failsafe executions, they use the same output location for the summary file by default. This will prevent all but the first execution of the <code>integration-test</code> goal to be cacheable due to overlapping outputs. In order to get cache hits for all executions, you should configure a different summary file for each of them:</p> 
        </div> 
        <div class="listingblock silver"> 
         <div class="title">
          pom.xml
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;plugin&gt;
  &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
  &lt;executions&gt;
    &lt;execution&gt;
      &lt;id&gt;first-execution&lt;/id&gt;
      &lt;goals&gt;
        &lt;goal&gt;integration-test&lt;/goal&gt;
        &lt;goal&gt;verify&lt;/goal&gt;
      &lt;/goals&gt;
      &lt;configuration&gt;
        &lt;!-- ... --&gt;
        &lt;summaryFile&gt;${project.build.directory}/failsafe-reports/first-failsafe-summary.xml&lt;/summaryFile&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
    &lt;execution&gt;
      &lt;id&gt;second-execution&lt;/id&gt;
      &lt;goals&gt;
        &lt;goal&gt;integration-test&lt;/goal&gt;
        &lt;goal&gt;verify&lt;/goal&gt;
      &lt;/goals&gt;
      &lt;configuration&gt;
        &lt;!-- ... --&gt;
        &lt;summaryFile&gt;${project.build.directory}/failsafe-reports/second-failsafe-summary.xml&lt;/summaryFile&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
  &lt;/executions&gt;
&lt;/plugin&gt;</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>If you have configured multiple executions that execute the same or an overlapping set of test classes (e.g. with different parameters), you should in addition change the <a href="https://maven.apache.org/surefire/maven-failsafe-plugin/integration-test-mojo.html#reportsDirectory">reports directory</a>, for example:</p> 
        </div> 
        <div class="listingblock silver"> 
         <div class="title">
          pom.xml
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;plugin&gt;
  &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
  &lt;executions&gt;
    &lt;execution&gt;
      &lt;id&gt;first-execution&lt;/id&gt;
      &lt;goals&gt;
        &lt;goal&gt;integration-test&lt;/goal&gt;
        &lt;goal&gt;verify&lt;/goal&gt;
      &lt;/goals&gt;
      &lt;configuration&gt;
        &lt;!-- ... --&gt;
        &lt;reportsDirectory&gt;${project.build.directory}/first-failsafe-reports&lt;/reportsDirectory&gt;
        &lt;summaryFile&gt;${project.build.directory}/first-failsafe-reports/failsafe-summary.xml&lt;/summaryFile&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
    &lt;execution&gt;
      &lt;id&gt;second-execution&lt;/id&gt;
      &lt;goals&gt;
        &lt;goal&gt;integration-test&lt;/goal&gt;
        &lt;goal&gt;verify&lt;/goal&gt;
      &lt;/goals&gt;
      &lt;configuration&gt;
        &lt;!-- ... --&gt;
        &lt;reportsDirectory&gt;${project.build.directory}/second-failsafe-reports&lt;/reportsDirectory&gt;
        &lt;summaryFile&gt;${project.build.directory}/second-failsafe-reports/failsafe-summary.xml&lt;/summaryFile&gt;
      &lt;/configuration&gt;
    &lt;/execution&gt;
  &lt;/executions&gt;
&lt;/plugin&gt;</code></pre> 
         </div> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="rerunning_goals"><a class="anchor" href="#rerunning_goals"></a><a class="link" href="#rerunning_goals">Rerunning goals to deal with invalid cache entries</a></h4> 
       <div class="paragraph"> 
        <p>In rare circumstances the cache might be filled with an invalid entry, e.g. when another process deletes the outputs of a goal while the cache entry is being created. In this case you can use the <code>-DrerunGoals</code> command line argument to rerun the goals and overwrite the faulty cache entry.</p> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="test_distribution"><a class="anchor" href="#test_distribution"></a><a class="link" href="#test_distribution">Using test distribution</a></h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p><em>(Maven extension 1.8+, Gradle Enterprise 2020.5+)</em></p> 
     </div> 
     <div class="paragraph"> 
      <p>Gradle Enterprise test distribution takes your existing test suites and distributes them across remote agents to execute them faster.</p> 
     </div> 
     <div class="admonitionblock tip"> 
      <table> 
       <tbody>
        <tr> 
         <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> 
         <td class="content"> See <a href="https://tv.gradle.com/intro-distributed-testing">this demo video</a> for a quick introduction to the concept as well as an example of this breakthrough technology in action based on a real-world example. </td> 
        </tr> 
       </tbody>
      </table> 
     </div> 
     <div class="sect2"> 
      <h3 id="how_it_works"><a class="anchor" href="#how_it_works"></a><a class="link" href="#how_it_works">How it works</a></h3> 
      <div class="imageblock"> 
       <div class="content"> 
        <img src="images/test-distribution-network-diagram.svg" alt="test distribution network diagram" width="100%"> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>Historical test execution data provided by Gradle Enterprise is used to create balanced partitions of similar expected execution times in order to optimize distribution across remote agents. The tests and their supporting files are transferred to each agent and executed, with their logging and results streamed back to the build in real time. If there are no remote agents available, tests can still be executed locally on the build machine.</p> 
      </div> 
      <div class="paragraph"> 
       <p>Gradle Enterprise provides an interface for administering remote agents, and viewing the current and historical system usage. Please see the <a href="/enterprise/admin/current/#test_distribution">Gradle Enterprise Admin Manual</a> for more information.</p> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="compatible_types_of_tests"><a class="anchor" href="#compatible_types_of_tests"></a><a class="link" href="#compatible_types_of_tests">Compatible types of tests</a></h3> 
      <div class="paragraph"> 
       <p>The extension enhances the execution of the <code>test</code> goal of the <code>maven-surefire-plugin</code> and the <code>integration-test</code> goal of the <code>maven-failsafe-plugin</code> and requires tests to run with Java 8 or later.</p> 
      </div> 
      <div class="paragraph"> 
       <p>Tests must run via JUnit Platform, which is part of <a href="https://junit.org/junit5/">JUnit 5</a>. All JUnit Platform compatible test engines are supported, such as <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests">JUnit Jupiter</a>, <a href="https://spockframework.org">Spock 2</a>, <a href="https://github.com/junit-team/testng-engine">TestNG</a>, <a href="https://jqwik.net/">jqwik</a>, <a href="https://github.com/kotest/kotest">Kotest</a>, <a href="https://github.com/spekframework/spek">Spek</a>, and others.</p> 
      </div> 
      <div class="paragraph"> 
       <p>JUnit 3 and JUnit 4 based tests are supported when using the <a href="https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4-running">JUnit Vintage Engine</a>, including extensions such as <a href="https://spockframework.org">Spock 1</a>.</p> 
      </div> 
      <div class="admonitionblock tip"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> 
          <td class="content"> See <a href="https://maven.apache.org/surefire/maven-surefire-plugin/examples/junit-platform.html">Surefire’s documentation</a> for guidance on how to configure it to use the JUnit Platform. </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="sect3"> 
       <h4 id="external_test_resources"><a class="anchor" href="#external_test_resources"></a><a class="link" href="#external_test_resources">External test resources</a></h4> 
       <div class="paragraph"> 
        <p>Consideration must be given to any supporting resources required by tests.</p> 
       </div> 
       <div class="paragraph"> 
        <p>Test distribution takes your tests and executes them on remote agents. The test runtime classpath and any <a href="#adding_inputs_and_outputs">additionally declared file inputs</a> are transferred to the agents. If your tests are expecting any other resources to be <em>locally</em> available, such as a running database, the test agents must also provide the resource or the tests will fail.</p> 
       </div> 
       <div class="paragraph"> 
        <p>There are two possible approaches to using such resources in your tests:</p> 
       </div> 
       <div class="olist arabic"> 
        <ol class="arabic"> 
         <li> <p>Have the tests themselves provision necessary resources (e.g. using <a href="https://www.docker.com">Docker</a> containers)</p> </li> 
         <li> <p>Deploy test distribution agents in environments that provide all required resources</p> </li> 
        </ol> 
       </div> 
       <div class="paragraph"> 
        <p>The first approach is recommended where possible as it is more portable and minimizes the need to change agent environments when test resources change. The <a href="https://testcontainers.org">Testcontainers project</a> provides an easy way to utilize Docker containers within tests.</p> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> Depending on how you deploy test distribution agents, additional configuration may be required in order to make Docker accessible to the tests running on those agents. Please refer to the <a href="/enterprise/test-distribution-agent/#dealing_with_docker_in_tests">Test Distribution Agent User Manual</a> for more information on this topic. </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <div class="paragraph"> 
        <p>When using the second approach of having the agent environment provide resources, it is important to declare the <a href="#test_distribution_config_requirements">requirements</a> of tests so that appropriate agents that provide the capability can be assigned.</p> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="prerequisites"><a class="anchor" href="#prerequisites"></a><a class="link" href="#prerequisites">Prerequisites</a></h3> 
      <div class="paragraph"> 
       <p>Test distribution for Maven requires a Gradle Enterprise 2020.5 or later installation with connected test distribution agents. For information on configuring a Gradle Enterprise installation to enable test distribution, please see the <a href="/enterprise/admin/current/#test_distribution">Gradle Enterprise Admin Manual</a>.</p> 
      </div> 
      <div class="paragraph"> 
       <p>Your build must use version 2.22 or later of the <code>maven-surefire-plugin</code> or <code>maven-failsafe-plugin</code>.</p> 
      </div> 
      <div class="paragraph"> 
       <p>Your build must also <a href="#authenticating_with_gradle_enterprise">authenticate with Gradle Enterprise</a> and the user be granted the <a href="/enterprise/admin/current/#roles">“Test distribution” access control role</a>. Unauthenticated usage of test distribution is prohibited due to the inherent security implications of such a remote code execution service.</p> 
      </div> 
      <div class="admonitionblock warning"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-warning" title="Warning"></i> </td> 
          <td class="content"> The Gradle Enterprise Maven extension connects to the Gradle Enterprise server using a WebSocket connection. In case the extension cannot connect to the Gradle Enterprise server, please ensure all load balancers and proxies that are used between both ends support WebSocket connections. </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="configuration"><a class="anchor" href="#configuration"></a><a class="link" href="#configuration">Configuration</a></h3> 
      <div class="admonitionblock note"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
          <td class="content"> The examples in this section all reference the <code>maven-surefire-plugin</code> but the same configuration options are available for the <code>maven-failsafe-plugin</code>. </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="sect3"> 
       <h4 id="enabling_test_distribution"><a class="anchor" href="#enabling_test_distribution"></a><a class="link" href="#enabling_test_distribution">Enabling test distribution</a></h4> 
       <div class="paragraph"> 
        <p>Test distribution is enabled and configured per goal, via the <code>distribution</code> element in the POM.</p> 
       </div> 
       <div class="listingblock"> 
        <div class="title">
         pom.xml
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;plugin&gt;
  &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
  &lt;version&gt;3.0.0-M5&lt;/version&gt;
  &lt;configuration&gt;
    &lt;properties&gt;
      &lt;distribution&gt;
        &lt;enabled&gt;true&lt;/enabled&gt; <i class="conum" data-value="1"></i><b>(1)</b>
      &lt;/distribution&gt;
    &lt;/properties&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</code></pre> 
        </div> 
       </div> 
       <div class="colist arabic"> 
        <table> 
         <tbody>
          <tr> 
           <td><i class="conum" data-value="1"></i><b>1</b></td> 
           <td>Enable test distribution</td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <div class="admonitionblock tip"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> 
           <td class="content"> Transferring test inputs &amp; outputs between build and remote agents comes at a cost. For this reason you should not activate test distribution for each test goal in the build. Good candidates for distribution are test goals that take more than a few seconds to execute. Test goals that only execute fast unit tests should not be distributed as they will compete for remote agents thereby slowing other test distribution jobs down. </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="executors"><a class="anchor" href="#executors"></a><a class="link" href="#executors">Executors</a></h4> 
       <div class="paragraph"> 
        <p>Tests can be executed by local and/or remote executors.</p> 
       </div> 
       <div class="sect4"> 
        <h5 id="local_executors"><a class="anchor" href="#local_executors"></a><a class="link" href="#local_executors">Local executors</a></h5> 
        <div class="paragraph"> 
         <p>By default, the number of local executors is derived from the <a href="https://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#forkCount"><code>forkCount</code></a> parameter of the goal. To limit the use of local executors, configure the <code>maxLocalExecutors</code> parameter. Setting it to zero, causes tests to be only executed remotely.</p> 
        </div> 
        <div class="listingblock silver"> 
         <div class="title">
          pom.xml
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;plugin&gt;
  &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
  &lt;version&gt;3.0.0-M5&lt;/version&gt;
  &lt;configuration&gt;
    &lt;properties&gt;
      &lt;distribution&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;maxLocalExecutors&gt;2&lt;/maxLocalExecutors&gt; <i class="conum" data-value="1"></i><b>(1)</b>
      &lt;/distribution&gt;
    &lt;/properties&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</code></pre> 
         </div> 
        </div> 
        <div class="colist arabic"> 
         <table> 
          <tbody>
           <tr> 
            <td><i class="conum" data-value="1"></i><b>1</b></td> 
            <td>Limit number of local executors to 2</td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="remote_executors"><a class="anchor" href="#remote_executors"></a><a class="link" href="#remote_executors">Remote executors</a></h5> 
        <div class="paragraph"> 
         <p>By default, test execution uses as many remote executors as possible. To limit the number used, you can configure the <code>maxRemoteExecutors</code> parameter:</p> 
        </div> 
        <div class="listingblock silver"> 
         <div class="title">
          pom.xml
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;plugin&gt;
  &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
  &lt;version&gt;3.0.0-M5&lt;/version&gt;
  &lt;configuration&gt;
    &lt;properties&gt;
      &lt;distribution&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;maxRemoteExecutors&gt;2&lt;/maxRemoteExecutors&gt; <i class="conum" data-value="1"></i><b>(1)</b>
      &lt;/distribution&gt;
    &lt;/properties&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</code></pre> 
         </div> 
        </div> 
        <div class="colist arabic"> 
         <table> 
          <tbody>
           <tr> 
            <td><i class="conum" data-value="1"></i><b>1</b></td> 
            <td>Limit number of remote executors to 2</td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
        <div class="paragraph"> 
         <p>Each test goal will request at most <code>maxRemoteExecutors</code> (or as many as possible if not set) and test goals that are running in parallel will each request their respective configured number of remote executors. So a build running two test goals in parallel each having <code>maxRemoteExecutors</code> set to 10 will request 20 remote executors. The number of remote executors actually used is subject to agent availability and the number of test partitions.</p> 
        </div> 
        <div class="paragraph"> 
         <p>Setting the number of remote executors to zero causes tests to be only executed locally.</p> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="executor_preference"><a class="anchor" href="#executor_preference"></a><a class="link" href="#executor_preference">Executor preference</a></h5> 
        <div class="paragraph"> 
         <p>Since local executors are typically the first to respond to execution requests, the longest running tests are usually assigned to them. To favor remote over local execution (e.g. to unburden the build machine), you can set the <code>remoteExecutionPreferred</code> parameter to <code>true</code>.</p> 
        </div> 
        <div class="listingblock silver"> 
         <div class="title">
          pom.xml
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;plugin&gt;
  &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
  &lt;version&gt;3.0.0-M5&lt;/version&gt;
  &lt;configuration&gt;
    &lt;properties&gt;
      &lt;distribution&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;remoteExecutionPreferred&gt;true&lt;/remoteExecutionPreferred&gt;
        &lt;waitTimeoutInSeconds&gt;120&lt;/waitTimeoutInSeconds&gt;
      &lt;/distribution&gt;
    &lt;/properties&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>If enabled, remote executors are tried first, falling back to local ones after <code>waitTimeoutInSeconds</code> expires.</p> 
        </div> 
        <div class="admonitionblock tip"> 
         <table> 
          <tbody>
           <tr> 
            <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> 
            <td class="content"> When first enabling test distribution for an existing test suite, it is a good idea to start with only local executors to verify compatibility of the tests with test distribution. </td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
        <div class="admonitionblock note"> 
         <table> 
          <tbody>
           <tr> 
            <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
            <td class="content"> When using Maven’s offline mode, only local executors will be used. </td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="test_distribution_config_requirements"><a class="anchor" href="#test_distribution_config_requirements"></a><a class="link" href="#test_distribution_config_requirements">Requirements</a></h4> 
       <div class="paragraph"> 
        <p>Test goals can specify requirements that agents must fulfill in order to be considered compatible. Requirements are matched against the advertised capabilities of the agents that are connected to your Gradle Enterprise server. Only agents that fulfill all requirements are considered compatible. Local executors are assumed to provide all required capabilities. This means that local executors will always be used regardless of the declared requirements, unless use of local executors is disabled.</p> 
       </div> 
       <div class="paragraph"> 
        <p>Requirements are strings that may only contain alphanumeric characters, dashes, underscores, periods, and a single equals sign. It is recommended to use a key-value form (e.g. <code>os=linux</code>) or tag-like form (e.g. <code>postgres</code>) to model requirements.</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="title">
         pom.xml
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;plugin&gt;
  &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
  &lt;version&gt;3.0.0-M5&lt;/version&gt;
  &lt;configuration&gt;
    &lt;properties&gt;
      &lt;distribution&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;requirements&gt;
          &lt;requirement&gt;os=linux&lt;/requirement&gt; <i class="conum" data-value="1"></i><b>(1)</b>
          &lt;requirement&gt;postgres&lt;/requirement&gt; <i class="conum" data-value="2"></i><b>(2)</b>
        &lt;/requirements&gt;
      &lt;/distribution&gt;
    &lt;/properties&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</code></pre> 
        </div> 
       </div> 
       <div class="colist arabic"> 
        <table> 
         <tbody>
          <tr> 
           <td><i class="conum" data-value="1"></i><b>1</b></td> 
           <td>Add <code>os=linux</code> requirement</td> 
          </tr> 
          <tr> 
           <td><i class="conum" data-value="2"></i><b>2</b></td> 
           <td>Add <code>postgres</code> requirement</td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <div class="paragraph"> 
        <p>To ensure tests are executed using the intended Java version, an implicit <code>jdk=«version»</code> requirement is added to the set of declared requirements for the goal. The version is determined from the Java executable set on the goal. Only the major version is taken into account (e.g. <code>jdk=8</code> for Java 8 and <code>jdk=11</code> for Java 11).</p> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> For more information on how to define the capabilities of an agent, please see the <a href="/enterprise/test-distribution-agent/">Test Distribution Agent User Manual</a>. </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="wait_timeout"><a class="anchor" href="#wait_timeout"></a><a class="link" href="#wait_timeout">Wait timeout</a></h4> 
       <div class="paragraph"> 
        <p>Test distribution relies on external services in order to execute your build, such as the Gradle Enterprise server and assigned remote agents. When an agent disconnects during the build, the extension reschedules the affected test partition on another local or remote executor. Similarly, when the connection to the Gradle Enterprise server is closed unexpectedly, the extension attempts to reconnect and reschedules the affected test partitions. However, in cases test execution cannot progress, e.g. if local executors are disabled and reconnection attempts are not successful, the extension will fail the build after a configurable <em>wait timeout</em> (30 seconds by default) has elapsed in order to prevent the build from blocking indefinitely.</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="title">
         pom.xml
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;plugin&gt;
  &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
  &lt;version&gt;3.0.0-M5&lt;/version&gt;
  &lt;configuration&gt;
    &lt;properties&gt;
      &lt;distribution&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;waitTimeoutInSeconds&gt;120&lt;/waitTimeoutInSeconds&gt; <i class="conum" data-value="1"></i><b>(1)</b>
      &lt;/distribution&gt;
    &lt;/properties&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</code></pre> 
        </div> 
       </div> 
       <div class="colist arabic"> 
        <table> 
         <tbody>
          <tr> 
           <td><i class="conum" data-value="1"></i><b>1</b></td> 
           <td>Configure wait timeout of 120 seconds</td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> As long as local executors are configured the build can always progress and thus will not time out. If local executors are disabled but there are some compatible remote executors connected, the build will wait as long as it takes for them to become available even if that takes longer than <code>waitTimeoutInSeconds</code>. </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="inputs_and_outputs"><a class="anchor" href="#inputs_and_outputs"></a><a class="link" href="#inputs_and_outputs">Inputs and outputs</a></h4> 
       <div class="paragraph"> 
        <p>All well-known and manually declared inputs of the test goal are tracked by test distribution and will be transferred to remote executors. In order to add additional input files that are required for your tests declare them using in the <a href="#adding_inputs_and_outputs">POM configuration of the Gradle Enterprise Maven extension</a>:</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="title">
         pom.xml
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
      &lt;version&gt;3.0.0-M5&lt;/version&gt;
      &lt;configuration&gt;
        &lt;properties&gt;
          &lt;distribution&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
          &lt;/distribution&gt;
        &lt;/properties&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
  &lt;pluginManagement&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;com.gradle&lt;/groupId&gt;
        &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;gradleEnterprise&gt;
            &lt;plugins&gt;
              &lt;plugin&gt;
                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; <i class="conum" data-value="1"></i><b>(1)</b>
                &lt;inputs&gt;
                  &lt;fileSets&gt;
                    &lt;fileSet&gt;
                      &lt;name&gt;test-data&lt;/name&gt;
                      &lt;paths&gt;
                        &lt;path&gt;src/test-data/data.xml&lt;/path&gt; <i class="conum" data-value="2"></i><b>(2)</b>
                      &lt;/paths&gt;
                    &lt;/fileSet&gt;
                  &lt;/fileSets&gt;
                &lt;/inputs&gt;
              &lt;/plugin&gt;
            &lt;/plugins&gt;
          &lt;/gradleEnterprise&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/pluginManagement&gt;
&lt;/build&gt;</code></pre> 
        </div> 
       </div> 
       <div class="colist arabic"> 
        <table> 
         <tbody>
          <tr> 
           <td><i class="conum" data-value="1"></i><b>1</b></td> 
           <td>Reference the <code>maven-surefire-plugin</code></td> 
          </tr> 
          <tr> 
           <td><i class="conum" data-value="2"></i><b>2</b></td> 
           <td>Declare <code>src/test-data/data.xml</code> as an additional input file</td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <div class="admonitionblock tip"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> 
           <td class="content"> See <a href="#test_distribution_tests_reading_files_from_src_test_resources">Tests reading files from <code>src/test/resources</code></a> for a common example of missing input declarations. </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <div class="paragraph"> 
        <p>Tests may produce file outputs, such as reports. After finishing execution of a test partition all output files that are registered on the test goal are transferred back from remote executors to the build. Test reports and <a href="#test_distribution_jacoco">JaCoCo coverage data</a> are automatically tracked.</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="title">
         pom.xml
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
      &lt;version&gt;3.0.0-M5&lt;/version&gt;
      &lt;configuration&gt;
        &lt;properties&gt;
          &lt;distribution&gt;
            &lt;enabled&gt;true&lt;/enabled&gt;
          &lt;/distribution&gt;
        &lt;/properties&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
  &lt;pluginManagement&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;com.gradle&lt;/groupId&gt;
        &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;gradleEnterprise&gt;
            &lt;plugins&gt;
              &lt;plugin&gt;
                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; <i class="conum" data-value="1"></i><b>(1)</b>
                &lt;outputs&gt;
                  &lt;directories&gt;
                    &lt;directory&gt;
                      &lt;name&gt;additional-outputs&lt;/name&gt;
                      &lt;path&gt;${project.build.directory}/additional-outputs&lt;/path&gt; <i class="conum" data-value="2"></i><b>(2)</b>
                    &lt;/directory&gt;
                  &lt;/directories&gt;
                &lt;/outputs&gt;
              &lt;/plugin&gt;
            &lt;/plugins&gt;
          &lt;/gradleEnterprise&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/pluginManagement&gt;
&lt;/build&gt;</code></pre> 
        </div> 
       </div> 
       <div class="colist arabic"> 
        <table> 
         <tbody>
          <tr> 
           <td><i class="conum" data-value="1"></i><b>1</b></td> 
           <td>Reference the <code>maven-surefire-plugin</code></td> 
          </tr> 
          <tr> 
           <td><i class="conum" data-value="2"></i><b>2</b></td> 
           <td>Declare <code>target/additional-outputs</code> as an additional output directory</td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <div class="admonitionblock warning"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-warning" title="Warning"></i> </td> 
           <td class="content"> If two partitions produce the same output file, the test goal will fail. This means that you must create unique files per test class. Directory structures are merged as long as they don’t contain conflicting files. </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="test_distribution_config_other_parameters"><a class="anchor" href="#test_distribution_config_other_parameters"></a><a class="link" href="#test_distribution_config_other_parameters">Other configuration parameters</a></h4> 
       <div class="paragraph"> 
        <p>In addition to the above configuration parameters, the Gradle Enterprise Maven extension respects most of the goal’s configuration. The following parameters influence test partitioning and the type and number of used local and remote executors.</p> 
       </div> 
       <div class="dlist"> 
        <dl> 
         <dt class="hdlist1">
          <code>forkCount</code>
         </dt> 
         <dd> 
          <p>Used as default number of local executors. Disabling forking by setting <code>forkCount=0</code> is <em>not</em> supported.</p> 
         </dd> 
        </dl> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> 
            <div class="paragraph"> 
             <p>Test distribution agents always only run a single fork. Changing the <code>forkCount</code> setting therefore has no impact on remote test execution. If you want to better utilize compute resources of the machines hosting agents you should start several agent instances on a single machine.</p> 
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <div class="dlist"> 
        <dl> 
         <dt class="hdlist1">
          <code>debugForkedProcess</code> (<code>maven.surefire.debug</code> user property)
         </dt> 
         <dd> 
          <p>If enabled, tests are executed on a single local executor that you can attach a debugger to as usual.</p> 
         </dd> 
         <dt class="hdlist1">
          <code>reuseForks</code>
         </dt> 
         <dd> 
          <p>If disabled, each test partition will be limited to a single test class.</p> 
         </dd> 
         <dt class="hdlist1">
          <code>argLine</code>, <code>systemProperties</code>, <code>systemPropertiesFile</code>, <code>systemPropertyVariables</code>
         </dt> 
         <dd> 
          <p>Used locally and on agents when forking JVMs to execute tests. Paths of inputs and outputs in JVM arguments are automatically replaced to match the agent’s temporary workspace.</p> 
         </dd> 
        </dl> 
       </div> 
       <div class="admonitionblock tip"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> 
           <td class="content"> 
            <div class="paragraph"> 
             <p>By default, Surefire/Failsafe lets the forked JVM determine the maximum heap size based on the machine’s physical memory by default. Since the outcome depends on the used JVM version and implementation, it’s usually a good idea to configure <code>-Xmx</code> explicitly via the <code>argLine</code> configuration parameter.</p> 
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <div class="dlist"> 
        <dl> 
         <dt class="hdlist1">
          <code>environmentVariables</code>, <code>excludedEnvironmentVariables</code>
         </dt> 
         <dd> 
          <p>The environment variables of the Maven process (excluding those in <code>excludedEnvironmentVariables</code>) along with those explicitly configured via <code>environmentVariables</code> are passed to locally forked JVMs. For remote JVMs, only explicitly configured environment variables are propagated. Paths of inputs and outputs in environment variable values are automatically replaced to match the agent’s temporary workspace. In addition, remote JVMs inherit the environment variables of the agent process. You should prefer using system properties over environment variables to inject values into your tests, whenever possible.</p> 
         </dd> 
         <dt class="hdlist1">
          <code>rerunFailingTestsCount</code>
         </dt> 
         <dd> 
          <p>If set to a value greater than 0, failing tests will be retried the specified number of times.</p> 
         </dd> 
        </dl> 
       </div> 
       <div id="test_distribution_unsupported_configuration_parameters" class="admonitionblock warning"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-warning" title="Warning"></i> </td> 
           <td class="content"> 
            <div class="paragraph"> 
             <p>The following configuration parameters are currently <em>not</em> supported: <code>enableProcessChecker</code>, <code>forkedProcessExitTimeoutInSeconds</code>, <code>forkNode</code>, <code>junitArtifactName</code>, <code>objectFactory</code>, <code>parallel</code>, <code>parallelOptimized</code>, <code>parallelTestsTimeoutForcedInSeconds</code>, <code>parallelTestsTimeoutInSeconds</code>, <code>perCoreThreadCount</code>, <code>runOrder</code>, <code>shutdown</code>, <code>suiteXmlFiles</code>, <code>testNGArtifactName</code>, <code>threadCount</code>, <code>threadCountClasses</code>, <code>threadCountMethods</code>, <code>threadCountSuites</code>, <code>useManifestOnlyJar</code>, <code>useSystemClassLoader</code>, <code>useUnlimitedThreads</code>.</p> 
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="integration_with_other_plugins"><a class="anchor" href="#integration_with_other_plugins"></a><a class="link" href="#integration_with_other_plugins">Integration with other plugins</a></h3> 
      <div class="sect3"> 
       <h4 id="test_distribution_jacoco"><a class="anchor" href="#test_distribution_jacoco"></a><a class="link" href="#test_distribution_jacoco">JaCoCo plugin</a></h4> 
       <div class="paragraph"> 
        <p>Test distribution is compatible with <a href="https://www.eclemma.org/jacoco/trunk/doc/maven.html">JaCoCo Maven plugin</a>. Coverage information from all executors, including remote, are merged to produce a single coverage report. No additional configuration is required.</p> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="troubleshooting_2"><a class="anchor" href="#troubleshooting_2"></a><a class="link" href="#troubleshooting_2">Troubleshooting</a></h3> 
      <div class="sect3"> 
       <h4 id="identifying_the_executor_of_a_failed_test"><a class="anchor" href="#identifying_the_executor_of_a_failed_test"></a><a class="link" href="#identifying_the_executor_of_a_failed_test">Identifying the executor of a failed test</a></h4> 
       <div class="paragraph"> 
        <p>The build log contains information about the test executor used and the partition number for every test class. This information can help if the failure is caused by the test executor, such as a remote agent not providing a required resource.</p> 
       </div> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre>$ mvn clean test
[…]
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running TestClass1 (of partition 1 on localhost-executor-1)
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.124 s - in TestClass1 (of partition 1 on localhost-executor-1)
[INFO] Running TestClass2 (of partition 2 on prj-distribution-agent-1)
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.124 s - in TestClass2 (of partition 2 on prj-distribution-agent-1)
[INFO] Running TestClass3 (of partition 3 on prj-distribution-agent-2)
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.124 s - in TestClass3 (of partition 3 on prj-distribution-agent-2)
[…]</pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>Executors starting with <code>localhost-</code> are the local executors. All other executors (in our example containing <code>distribution-agent</code>) are the remote executors.</p> 
       </div> 
       <div class="paragraph"> 
        <p>Moreover, the information is persisted in the generated XML reports. However, it is currently not visible in build scans.</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="classes_sharing_static_state"><a class="anchor" href="#classes_sharing_static_state"></a><a class="link" href="#classes_sharing_static_state">Classes sharing static state</a></h4> 
       <div class="paragraph"> 
        <p>Each test partition executes in a separate JVM. If tests share state via static variables, intentionally or unintentionally, they may not work reliably when distributed. They are also unlikely to work reliably when not using test distribution if using <code>forkCount</code> to execute tests in parallel locally.</p> 
       </div> 
       <div class="paragraph"> 
        <p>If your tests already set <code>reuseForks = false</code> to mitigate shared static state, they will likely work reliably with test distribution but be slower to execute than they otherwise would be. This setting causes a partition to be created per test class, which creates additional overhead when there are many test classes.</p> 
       </div> 
       <div class="paragraph"> 
        <p>To make optimal use of test distribution, each test class should be independent of any other test class and not mutate any shared static state. If that is not possible, consider separating test classes that are self-contained from those that aren’t into separate test goals and configuring them accordingly.</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="test_distribution_tests_reading_files_from_src_test_resources"><a class="anchor" href="#test_distribution_tests_reading_files_from_src_test_resources"></a><a class="link" href="#test_distribution_tests_reading_files_from_src_test_resources">Tests reading files from <code>src/test/resources</code></a></h4> 
       <div class="paragraph"> 
        <p>Some tests access test resource files in their source location, e.g. in <code>src/test/resources</code>. This location is not an input to the test goal and files will not be available when tests are executed remotely. The <code>maven-resources-plugin</code> copies these files <code>target/test-classes</code> before executing tests. This location is declared as an input, and is part of the test runtime classpath.</p> 
       </div> 
       <div class="paragraph"> 
        <p>One potential solution is to access such files from their location in the <code>target</code> folder instead. However, this does not work in IDEs that don’t delegate test execution to Maven as they use <code>src/test/resources</code> as an input. If you are unable to use Maven for all test execution, a better solution is to access the resource via the runtime classpath via <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html">Java’s classpath resource loading mechanism</a>.</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="provisioning_an_external_resource_for_many_tests"><a class="anchor" href="#provisioning_an_external_resource_for_many_tests"></a><a class="link" href="#provisioning_an_external_resource_for_many_tests">Provisioning an external resource for many tests</a></h4> 
       <div class="paragraph"> 
        <p>If you need to prepare/cleanup resources, start/stop a server etc. before/after your tests are executed, you can use one of JUnit Platform’s listener mechanisms. For that purpose, you need to add a dependency on <code>junit-platform-launcher</code> to your project:</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="title">
         pom.xml
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;com.example&lt;/groupId&gt;
  &lt;artifactId&gt;test-execution-listener&lt;/artifactId&gt;
  &lt;version&gt;1.0&lt;/version&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;
      &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt; <i class="conum" data-value="1"></i><b>(1)</b>
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.junit.platform&lt;/groupId&gt;
      &lt;artifactId&gt;junit-platform-launcher&lt;/artifactId&gt; <i class="conum" data-value="2"></i><b>(2)</b>
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;dependencyManagement&gt;
    &lt;dependencies&gt;
      &lt;dependency&gt;
        &lt;groupId&gt;org.junit&lt;/groupId&gt;
        &lt;artifactId&gt;junit-bom&lt;/artifactId&gt;
        &lt;version&gt;5.8.0-M1&lt;/version&gt;
        &lt;type&gt;pom&lt;/type&gt;
        &lt;scope&gt;import&lt;/scope&gt;
      &lt;/dependency&gt;
    &lt;/dependencies&gt;
  &lt;/dependencyManagement&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
        &lt;version&gt;3.8.1&lt;/version&gt;
        &lt;configuration&gt;
          &lt;release&gt;11&lt;/release&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;
        &lt;version&gt;3.0.0-M5&lt;/version&gt;
        &lt;configuration&gt;
          &lt;properties&gt;
            &lt;distribution&gt;
              &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/distribution&gt;
          &lt;/properties&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/project&gt;</code></pre> 
        </div> 
       </div> 
       <div class="colist arabic"> 
        <table> 
         <tbody>
          <tr> 
           <td><i class="conum" data-value="1"></i><b>1</b></td> 
           <td>Use JUnit Platform for executing tests</td> 
          </tr> 
          <tr> 
           <td><i class="conum" data-value="2"></i><b>2</b></td> 
           <td>Use JUnit Platform Launcher API for implementing a custom listener</td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <div class="sect4"> 
        <h5 id="junit_5_8_and_later"><a class="anchor" href="#junit_5_8_and_later"></a><a class="link" href="#junit_5_8_and_later">JUnit 5.8 and later</a></h5> 
        <div class="paragraph"> 
         <p>With <a href="https://junit.org/junit5/docs/5.8.0-M1/api/org.junit.platform.launcher/org/junit/platform/launcher/LauncherSessionListener.html"><code>LauncherSessionListener</code></a>, JUnit 5.8 introduced new hooks that are called before the first and after the last test in a forked test JVM, respectively, and are therefore well suited for implementing once-per-JVM setup/teardown behavior. A custom listener that starts an HTTP server before executing the first test and stops it after the last test has been executed, could look like this:</p> 
        </div> 
        <div class="listingblock"> 
         <div class="title">
          src/test/java/com/example/GlobalSetupTeardownListener.java
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">package com.example;

import com.sun.net.httpserver.HttpServer;
import org.junit.platform.launcher.LauncherSession;
import org.junit.platform.launcher.LauncherSessionListener;
import org.junit.platform.launcher.TestExecutionListener;
import org.junit.platform.launcher.TestPlan;

import java.io.IOException;
import java.io.UncheckedIOException;
import java.net.InetSocketAddress;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class GlobalSetupTeardownListener implements LauncherSessionListener {

    private Fixture fixture;

    @Override
    public void launcherSessionOpened(LauncherSession session) {
        // Avoid setup for test discovery by delaying it until tests are about to be executed
        session.getLauncher().registerTestExecutionListeners(new TestExecutionListener() {
            @Override
            public void testPlanExecutionStarted(TestPlan testPlan) {
                if (fixture == null) {
                    fixture = new Fixture();
                    fixture.setUp();
                }
            }
        });
    }

    @Override
    public void launcherSessionClosed(LauncherSession session) {
        if (fixture != null) {
            fixture.tearDown();
            fixture = null;
        }
    }

    static class Fixture {

        private HttpServer server;
        private ExecutorService executorService;

        void setUp() {
            try {
                server = HttpServer.create(new InetSocketAddress(0), 0);
            } catch (IOException e) {
                throw new UncheckedIOException("Failed to start HTTP server", e);
            };
            server.createContext("/test", exchange -&gt; {
                exchange.sendResponseHeaders(204, -1);
                exchange.close();
            });
            executorService = Executors.newCachedThreadPool();
            server.setExecutor(executorService);
            server.start(); <i class="conum" data-value="1"></i><b>(1)</b>
            System.setProperty("http.server.port", String.valueOf(server.getAddress().getPort())); <i class="conum" data-value="2"></i><b>(2)</b>
        }

        void tearDown() {
            server.stop(0); <i class="conum" data-value="3"></i><b>(3)</b>
            executorService.shutdownNow();
        }
    }

}</code></pre> 
         </div> 
        </div> 
        <div class="colist arabic"> 
         <table> 
          <tbody>
           <tr> 
            <td><i class="conum" data-value="1"></i><b>1</b></td> 
            <td>Start the HTTP server</td> 
           </tr> 
           <tr> 
            <td><i class="conum" data-value="2"></i><b>2</b></td> 
            <td>Export its dynamic port as a system property for consumption by tests</td> 
           </tr> 
           <tr> 
            <td><i class="conum" data-value="3"></i><b>3</b></td> 
            <td>Stop the HTTP server</td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
        <div class="paragraph"> 
         <p>This sample uses the HTTP server implementation from the <code>jdk.httpserver</code> module that comes with the JDK but would work similarly with any other server or resource. In order for the listener to be picked up by JUnit Platform, you need to register it as a service by adding a resource file with the following name and contents to your test runtime classpath (e.g. by adding the file to <code>src/test/resources</code>):</p> 
        </div> 
        <div class="listingblock"> 
         <div class="title">
          src/test/resources/META-INF/services/org.junit.platform.launcher.LauncherSessionListener
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code class="language-none hljs">com.example.GlobalSetupTeardownListener</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>You can now use the resource from your test:</p> 
        </div> 
        <div class="listingblock"> 
         <div class="title">
          src/test/java/com/example/HttpTests.java
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">package com.example;

import org.junit.jupiter.api.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;

class HttpTests {

    @Test
    void respondsWith204() throws Exception {
        var httpClient = HttpClient.newHttpClient();
        var port = System.getProperty("http.server.port"); <i class="conum" data-value="1"></i><b>(1)</b>
        var request = HttpRequest.newBuilder(URI.create("http://localhost:" + port + "/test")).build();

        var response = httpClient.send(request, HttpResponse.BodyHandlers.ofString()); <i class="conum" data-value="2"></i><b>(2)</b>

        assertEquals(204, response.statusCode()); <i class="conum" data-value="3"></i><b>(3)</b>
    }
}</code></pre> 
         </div> 
        </div> 
        <div class="colist arabic"> 
         <table> 
          <tbody>
           <tr> 
            <td><i class="conum" data-value="1"></i><b>1</b></td> 
            <td>Read the port of the server from the system property set by the listener</td> 
           </tr> 
           <tr> 
            <td><i class="conum" data-value="2"></i><b>2</b></td> 
            <td>Send a request to the server</td> 
           </tr> 
           <tr> 
            <td><i class="conum" data-value="3"></i><b>3</b></td> 
            <td>Check the status code of the response</td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="junit_5_7_and_before"><a class="anchor" href="#junit_5_7_and_before"></a><a class="link" href="#junit_5_7_and_before">JUnit 5.7 and before</a></h5> 
        <div class="paragraph"> 
         <p>If you’re using a JUnit version prior to 5.8, you can implement a <a href="https://junit.org/junit5/docs/current/api/org.junit.platform.launcher/org/junit/platform/launcher/TestExecutionListener.html"><code>TestExecutionListener</code></a> to achieve custom setup/teardown behavior.</p> 
        </div> 
        <div class="admonitionblock note"> 
         <table> 
          <tbody>
           <tr> 
            <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
            <td class="content"> Implementations of <code>TestExecutionListener</code> are called for every execution request, i.e. potentially multiple times per forked test JVM in the case of retries and when a forked JVM is reused. If possible, you should therefore upgrade to JUnit 5.8 or later and implement a <code>LauncherSessionListener</code> instead. </td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
        <div class="paragraph"> 
         <p>A custom listener that starts an HTTP server before executing the first test and stops it after the last test has been executed, could look like this:</p> 
        </div> 
        <div class="listingblock"> 
         <div class="title">
          src/test/java/com/example/CustomTestExecutionListener.java
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">package com.example;

import com.sun.net.httpserver.HttpServer;
import org.junit.platform.launcher.TestExecutionListener;
import org.junit.platform.launcher.TestPlan;

import java.io.IOException;
import java.io.UncheckedIOException;
import java.net.InetSocketAddress;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class CustomTestExecutionListener implements TestExecutionListener {

    private HttpServer server;
    private ExecutorService executorService;

    @Override
    public void testPlanExecutionStarted(TestPlan testPlan) {
        try {
            server = HttpServer.create(new InetSocketAddress(0), 0);
        } catch (IOException e) {
            throw new UncheckedIOException("Failed to start HTTP server", e);
        };
        server.createContext("/test", exchange -&gt; {
            exchange.sendResponseHeaders(204, -1);
            exchange.close();
        });
        executorService = Executors.newCachedThreadPool();
        server.setExecutor(executorService);
        server.start(); <i class="conum" data-value="1"></i><b>(1)</b>
        System.setProperty("http.server.port", String.valueOf(server.getAddress().getPort())); <i class="conum" data-value="2"></i><b>(2)</b>
    }

    @Override
    public void testPlanExecutionFinished(TestPlan testPlan) {
        server.stop(0); <i class="conum" data-value="3"></i><b>(3)</b>
        executorService.shutdownNow();
    }
}</code></pre> 
         </div> 
        </div> 
        <div class="colist arabic"> 
         <table> 
          <tbody>
           <tr> 
            <td><i class="conum" data-value="1"></i><b>1</b></td> 
            <td>Start the HTTP server</td> 
           </tr> 
           <tr> 
            <td><i class="conum" data-value="2"></i><b>2</b></td> 
            <td>Export its dynamic port as a system property for consumption by tests</td> 
           </tr> 
           <tr> 
            <td><i class="conum" data-value="3"></i><b>3</b></td> 
            <td>Stop the HTTP server</td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
        <div class="paragraph"> 
         <p>This sample uses the HTTP server implementation from the <code>jdk.httpserver</code> module that comes with the JDK but would work similarly with any other server or resource. In order for the listener to be picked up by JUnit Platform, you need to register it as a service by adding a resource file with the following name and contents to your test runtime classpath (e.g. by adding the file to <code>src/test/resources</code>):</p> 
        </div> 
        <div class="listingblock"> 
         <div class="title">
          src/test/resources/META-INF/services/org.junit.platform.launcher.TestExecutionListener
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code class="language-none hljs">com.example.CustomTestExecutionListener</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>You can now use the resource from your test:</p> 
        </div> 
        <div class="listingblock"> 
         <div class="title">
          src/test/java/com/example/HttpTests.java
         </div> 
         <div class="content"> 
          <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">package com.example;

import org.junit.jupiter.api.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

import static org.junit.jupiter.api.Assertions.assertEquals;

class HttpTests {

    @Test
    void respondsWith204() throws Exception {
        var httpClient = HttpClient.newHttpClient();
        var port = System.getProperty("http.server.port"); <i class="conum" data-value="1"></i><b>(1)</b>
        var request = HttpRequest.newBuilder(URI.create("http://localhost:" + port + "/test")).build();

        var response = httpClient.send(request, HttpResponse.BodyHandlers.ofString()); <i class="conum" data-value="2"></i><b>(2)</b>

        assertEquals(204, response.statusCode()); <i class="conum" data-value="3"></i><b>(3)</b>
    }
}</code></pre> 
         </div> 
        </div> 
        <div class="colist arabic"> 
         <table> 
          <tbody>
           <tr> 
            <td><i class="conum" data-value="1"></i><b>1</b></td> 
            <td>Read the port of the server from the system property set by the listener</td> 
           </tr> 
           <tr> 
            <td><i class="conum" data-value="2"></i><b>2</b></td> 
            <td>Send a request to the server</td> 
           </tr> 
           <tr> 
            <td><i class="conum" data-value="3"></i><b>3</b></td> 
            <td>Check the status code of the response</td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="configuration_reference"><a class="anchor" href="#configuration_reference"></a><a class="link" href="#configuration_reference">Appendix A: Configuration reference</a></h2> 
    <div class="sectionbody"> 
     <div class="sect2"> 
      <h3 id="gradle_enterprise_xml"><a class="anchor" href="#gradle_enterprise_xml"></a><a class="link" href="#gradle_enterprise_xml">gradle-enterprise.xml</a></h3> 
      <div class="paragraph"> 
       <p>Most aspects of the Gradle Enterprise Maven extension are configured in the <code>gradle-enterprise.xml</code> configuration file. Some of the options can be overwritten by system properties.</p> 
      </div> 
      <div class="paragraph"> 
       <p>The <code>gradle-enterprise.xml</code> file can be put into several locations. These files are merged and their properties overwritten based on the precedence rules below:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><code>&lt;maven-home&gt;/conf/gradle-enterprise.xml</code> is used to set global defaults for a given Maven installation. This is useful when you ship a custom Maven distribution to your teams. The location of this configuration file can be overwritten using the <code>-Dgradle.global.config</code> argument. This can be useful for CI environments where changing the Maven installation is not possible.</p> </li> 
        <li> <p><code>&lt;classpath&gt;/gradle-enterprise.xml</code> is used for organization-wide or team-wide configuration and overrides the global configuration. This allows to package a <code>gradle-enterprise.xml</code> file in the root of a <a href="#custom_extension">custom extension jar</a> that can be reused across projects.</p> </li> 
        <li> <p><code>&lt;project-dir&gt;/.mvn/gradle-enterprise.xml</code> is used for project-specific configuration and overrides the classpath configuration.</p> </li> 
        <li> <p><code>&lt;user-home&gt;/.m2/gradle-enterprise.xml</code> is used for user-specific configuration and overrides the project configuration. The location of this configuration file can be overwritten using the <code>-Dgradle.user.config</code> argument. This can be useful for CI environments where changing the user home is not possible.</p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>The example below shows a full reference of everything you can configure in this file.</p> 
      </div> 
      <div class="admonitionblock note"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
          <td class="content"> 
           <div class="paragraph"> 
            <p>Be sure to include the XML namespace declarations to get auto-completion in your IDE. The latest version of the schema is available at <a href="https://www.gradle.com/schema/gradle-enterprise-maven.xsd" class="bare">https://www.gradle.com/schema/gradle-enterprise-maven.xsd</a>, or you can get a specific schema version by appending the Gradle Enterprise Maven extension version to the schema location, e.g. <a href="https://www.gradle.com/schema/gradle-enterprise-maven-1.11.1.xsd" class="bare">https://www.gradle.com/schema/gradle-enterprise-maven-1.11.1.xsd</a>. IntelliJ IDEA will mark unknown schemas as missing and they have to be explicitly fetched via the quick fix dialog (Alt + Enter). There is an <a href="https://youtrack.jetbrains.com/issue/IDEA-214739">open issue</a> to make this more user friendly.</p> 
           </div> </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="listingblock silver"> 
       <div class="title">
        gradle-enterprise.xml
       </div> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise
  xmlns="https://www.gradle.com/gradle-enterprise-maven" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://www.gradle.com/gradle-enterprise-maven https://www.gradle.com/schema/gradle-enterprise-maven.xsd"&gt;
  &lt;!-- Whether the Gradle Enterprise Maven extension should be enabled. Defaults to true. System property is 'gradle.enterprise.enabled'. --&gt;
  &lt;enabled&gt;true&lt;/enabled&gt;
  &lt;server&gt;
    &lt;!-- ID used to reference an element in the settings.xml --&gt;
    &lt;id&gt;my-server&lt;/id&gt;
    &lt;!-- Address of the Gradle Enterprise server. System property is 'gradle.enterprise.url'. --&gt;
    &lt;url&gt;http://my-server/&lt;/url&gt;
    &lt;!-- Whether untrusted connections to the Gradle Enterprise server should be accepted. Defaults to false. --&gt;
    &lt;allowUntrusted&gt;false&lt;/allowUntrusted&gt;
    &lt;!-- The access key (without any hostname prefix) for authenticating with the Gradle Enterprise server. --&gt;
    &lt;accessKey&gt;7w5kbqqjea4vonghohvuyra5bnvszop4asbqee3m3sm6dbjdudtq&lt;/accessKey&gt;
  &lt;/server&gt;
  &lt;!-- Storage directory for caches and temporary data. Defaults to ${user.home}/.m2/.gradle-enterprise. System property is 'gradle.enterprise.storage.directory'. --&gt;
  &lt;storageDirectory&gt;/some/location&lt;/storageDirectory&gt;
  &lt;buildScan&gt;
    &lt;!-- Behavior of publishing build scans. Possible values are ALWAYS, ON_FAILURE, ON_DEMAND. Defaults to ALWAYS. --&gt;
    &lt;publish&gt;ALWAYS&lt;/publish&gt;
    &lt;!-- Terms of service acceptance (mandatory to publish to scans.gradle.com) --&gt;
    &lt;termsOfService&gt;
      &lt;!-- Address of the terms of service. Must be 'https://gradle.com/terms-of-service'. Defaults to an empty string. --&gt;
      &lt;url&gt;&lt;/url&gt;
      &lt;!-- Signal acceptance of the terms of service. Must be 'true'. Defaults to false. --&gt;
      &lt;accept&gt;false&lt;/accept&gt;
    &lt;/termsOfService&gt;
    &lt;!-- Whether to upload the build scan in background. Defaults to true. System property is 'gradle.scan.uploadInBackground' --&gt;
    &lt;backgroundBuildScanUpload&gt;false&lt;/backgroundBuildScanUpload&gt;
    &lt;!-- For extension &lt; 1.11 - DEPRECATED: Whether to capture content hashes of each input file for build scan comparison. Defaults to false. System property is 'gradle.scan.captureGoalInputFiles' --&gt;
    &lt;captureGoalInputFiles&gt;true&lt;/captureGoalInputFiles&gt;
    &lt;!-- For extension &gt;= 1.11 --&gt;
    &lt;capture&gt;
      &lt;!-- Whether to capture content hashes of each input file for build scan comparison. Defaults to false. System property is 'gradle.scan.captureGoalInputFiles' --&gt;
      &lt;goalInputFiles&gt;true&lt;/goalInputFiles&gt;
      &lt;!-- Whether to capture build output for build scans. Defaults to true. System property is 'gradle.scan.captureBuildLogging' --&gt;
      &lt;buildLogging&gt;true&lt;/buildLogging&gt;
      &lt;!-- Whether to capture test output for build scans. Defaults to true. System property is 'gradle.scan.captureTestLogging' --&gt;
      &lt;testLogging&gt;true&lt;/testLogging&gt;
    &lt;/capture&gt;
    &lt;!-- Obfuscated values for captured build scan data (optional). --&gt;
    &lt;obfuscation&gt;
      &lt;!-- The obfuscated username to capture (optional). --&gt;
      &lt;username&gt;&lt;/username&gt;
      &lt;!-- The obfuscated hostname to capture for local and public hostnames (optional). --&gt;
      &lt;hostname&gt;&lt;/hostname&gt;
      &lt;!-- The obfuscated IP addresses to capture (optional). --&gt;
      &lt;ipAddresses&gt;&lt;/ipAddresses&gt;
    &lt;/obfuscation&gt;
    &lt;!-- List of tags to capture --&gt;
    &lt;tags&gt;
      &lt;tag&gt;my tag&lt;/tag&gt;
    &lt;/tags&gt;
    &lt;!-- List of links to capture --&gt;
    &lt;links&gt;
      &lt;link&gt;
        &lt;name&gt;my link&lt;/name&gt;
        &lt;url&gt;http://my-site.com&lt;/url&gt;
      &lt;/link&gt;
    &lt;/links&gt;
    &lt;!-- List of custom values to capture --&gt;
    &lt;values&gt;
      &lt;value&gt;
        &lt;name&gt;my name&lt;/name&gt;
        &lt;value&gt;my value&lt;/value&gt;
      &lt;/value&gt;
    &lt;/values&gt;
  &lt;/buildScan&gt;
  &lt;buildCache&gt;
    &lt;!-- Local cache configuration --&gt;
    &lt;local&gt;
      &lt;!-- Whether the local cache is enabled. Defaults to true. System property is 'gradle.cache.local.enabled'. --&gt;
      &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;!-- Local cache directory. Defaults to ${user.home}/.m2/.gradle-enterprise/build-cache. System property is 'gradle.cache.local.directory'. --&gt;
      &lt;directory&gt;/some/other/location&lt;/directory&gt;
      &lt;!-- Local cache cleanup configuration --&gt;
      &lt;cleanup&gt;
        &lt;!-- Whether local cache cleanup is enabled. Defaults to true. System property is 'gradle.cache.local.cleanup.enabled'. --&gt;
        &lt;enabled&gt;true&lt;/enabled&gt;
        &lt;!-- Items in the cache that were not used in this period will be deleted. Defaults to P7D. System property is 'gradle.cache.local.cleanup.retention'. --&gt;
        &lt;retention&gt;P30D&lt;/retention&gt;
        &lt;!-- Interval at which the cleanup occurs. Defaults to P1D. System property is 'gradle.cache.local.cleanup.interval'. --&gt;
        &lt;interval&gt;P10D&lt;/interval&gt;
      &lt;/cleanup&gt;
    &lt;/local&gt;
    &lt;!-- Remote cache configuration --&gt;
    &lt;remote&gt;
      &lt;!-- Remote cache server configuration --&gt;
      &lt;server&gt;
        &lt;!-- Optionally use the ID of a server specified in your settings.xml to use its credentials. System property is 'gradle.cache.remote.serverId'. --&gt;
        &lt;id&gt;remote-cache&lt;/id&gt;
        &lt;!-- URL of the remote cache. Defaults to ${gradle.enterprise.url}/cache/. System property is 'gradle.cache.remote.url'. --&gt;
        &lt;url&gt;http://my-node/cache/&lt;/url&gt;
        &lt;!-- Optionally specify the credentials. The credentials specified here take precedence over the credentials in your settings.xml --&gt;
        &lt;credentials&gt;
          &lt;!-- The username to use to connect to an authenticated cache node. System property is 'gradle.cache.remote.username'. --&gt;
          &lt;username&gt;some-username&lt;/username&gt;
          &lt;!-- The password to use to connect to an authenticated cache node. System property is 'gradle.cache.remote.password'. --&gt;
          &lt;password&gt;some-password&lt;/password&gt;
        &lt;/credentials&gt;
        &lt;!-- Whether the remote cache accepts untrusted connections. Defaults to false. System property is 'gradle.cache.remote.allowUntrustedServer'. --&gt;
        &lt;allowUntrusted&gt;true&lt;/allowUntrusted&gt;
      &lt;/server&gt;
      &lt;!-- Whether the remote cache is enabled. Defaults to true. System property is 'gradle.cache.remote.enabled'. --&gt;
      &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;!-- Whether to store outputs in the remote build cache (as opposed to only loading from it). Defaults to false. System property is 'gradle.cache.remote.storeEnabled'. --&gt;
      &lt;storeEnabled&gt;true&lt;/storeEnabled&gt;
    &lt;/remote&gt;
    &lt;!-- Whether the 'clean' lifecycle phase is required in order to use the build cache. Defaults to true. System property is 'gradle.cache.requireClean'. --&gt;
    &lt;!-- You should only set this to 'false' when the build is started from a clean working directory. Otherwise, produced build cache entries may be incorrect. --&gt;
    &lt;requireClean&gt;true&lt;/requireClean&gt;
  &lt;/buildCache&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="expression_support"><a class="anchor" href="#expression_support"></a><a class="link" href="#expression_support">Expression support</a></h4> 
       <div class="paragraph"> 
        <p>The <code>gradle-enterprise.xml</code> configuration file supports two types of expressions that are evaluated when reading the configuration file:</p> 
       </div> 
       <div class="dlist"> 
        <dl> 
         <dt class="hdlist1">
          <code>${…​}</code> 
         </dt> 
         <dd> 
          <p>Maven-style expression (behaves like in pom.xml) for simple use cases, e.g. referencing an environment variable (e.g. <code>${env.CACHE_USERNAME}</code>)</p> 
         </dd> 
         <dt class="hdlist1">
          <code>#{…​}</code> 
         </dt> 
         <dd> 
          <p><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#expressions">Spring Expression Language (SpEL)</a> expressions for more complex use cases, e.g. converting an environment variable into a boolean (e.g. #{env['CI'] == null})</p> 
         </dd> 
        </dl> 
       </div> 
       <div class="paragraph"> 
        <p>For both expression types, the following objects can be referenced:</p> 
       </div> 
       <div class="dlist"> 
        <dl> 
         <dt class="hdlist1">
          <code>session</code> 
         </dt> 
         <dd> 
          <p>the current <code>MavenSession</code> object (e.g. <code>${session.request.cacheNotFound}</code> or <code>#{session.request.cacheNotFound}</code>)</p> 
         </dd> 
         <dt class="hdlist1">
          <code>basedir</code> 
         </dt> 
         <dd> 
          <p>the base directory of the build (e.g. <code>${basedir/src}</code> or <code>#{basedir}/src</code>)</p> 
         </dd> 
        </dl> 
       </div> 
       <div class="paragraph"> 
        <p>In addition, the following objects and functions can be referenced in SpEL expressions:</p> 
       </div> 
       <div class="dlist"> 
        <dl> 
         <dt class="hdlist1">
          <code>properties: Properties</code> 
         </dt> 
         <dd> 
          <p>user/system/profile properties (e.g. <code>#{properties['user.dir']}</code>). These are the same properties you can reference using the <code>${«property-name»}</code> syntax.<br> User properties are passed via <code>-D</code> on the command-line. System properties are provided by the runtime and contain <code>System.getProperties()</code> as well as <code>env.</code>-prefixed environment variables. Profile properties refer to properties defined in active Maven profiles.</p> 
         </dd> 
         <dt class="hdlist1">
          <code>env: Map&lt;String, String&gt;</code> 
         </dt> 
         <dd> 
          <p>environment variables (e.g. <code>#{env['CI']}</code>)</p> 
         </dd> 
         <dt class="hdlist1">
          <code>username: String</code> 
         </dt> 
         <dd> 
          <p>The username of the agent running the build (e.g. <code>#{username}</code>)</p> 
         </dd> 
         <dt class="hdlist1">
          <code>ipAddresses: List&lt;String&gt;</code> 
         </dt> 
         <dd> 
          <p>The IP addresses of the agent running the build (e.g. <code>#{ipAddresses}</code>)</p> 
         </dd> 
         <dt class="hdlist1">
          <code>isTrue(Object): boolean</code> 
         </dt> 
         <dd> 
          <p>returns <code>true</code> unless the supplied object’s <code>String</code> value case-insensitively equals <code>false</code>, <code>0</code>, <code>0.0</code>, or <code>null</code> (e.g. <code>#{isTrue(true)}</code>)</p> 
         </dd> 
         <dt class="hdlist1">
          <code>isFalse(Object): boolean</code> 
         </dt> 
         <dd> 
          <p>returns <code>true</code> if the supplied object’s <code>String</code> value case-insensitively equals <code>false</code>, <code>0</code>, <code>0.0</code>, or <code>null</code> (e.g. <code>#{isFalse(false)}</code>)</p> 
         </dd> 
         <dt class="hdlist1">
          <code>sha512(Object): Object</code> 
         </dt> 
         <dd> 
          <p>returns a SHA-512 String representation of the supplied object’s <code>String</code> value. If the supplied object is a <code>List</code>, returns a list of the individual <code>sha512</code> call for each item of the list.</p> 
         </dd> 
        </dl> 
       </div> 
       <div class="paragraph"> 
        <p>The following example shows how to use both expression types to configure local and CI builds with a single <code>gradle-enterprise.xml</code> file. It uses the <code>JENKINS_URL</code> environment variable (which is present in builds on Jenkins) to determine whether the build is running locally or on CI. Based on that, it enables the local build cache and background build scan upload only for local builds but enables writing to the remote build cache only for CI builds. Moreover, it determines the URL of the remote build cache based on the fictional <code>REGION</code> environment variable. Lastly, it uses Maven-style expressions to configure the remote build cache credentials based on custom environment variables that are typically injected by the CI server.</p> 
       </div> 
       <div class="listingblock silver"> 
        <div class="title">
         gradle-enterprise.xml
        </div> 
        <div class="content"> 
         <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise
  xmlns="https://www.gradle.com/gradle-enterprise-maven" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://www.gradle.com/gradle-enterprise-maven https://www.gradle.com/schema/gradle-enterprise-maven.xsd"&gt;
  &lt;buildScan&gt;
    &lt;backgroundBuildScanUpload&gt;#{env['JENKINS_URL'] == null}&lt;/backgroundBuildScanUpload&gt;
    &lt;obfuscation&gt;
      &lt;username&gt;#{sha512(username)}&lt;/username&gt;
      &lt;hostname&gt;#{isTrue(env['CI']) ? 'CI agent' : 'Local agent'}&lt;/hostname&gt;
      &lt;ipAddresses&gt;#{sha512(ipAddresses)}&lt;/ipAddresses&gt;
    &lt;/obfuscation&gt;
  &lt;/buildScan&gt;
  &lt;buildCache&gt;
    &lt;local&gt;
      &lt;enabled&gt;#{env['JENKINS_URL'] == null}&lt;/enabled&gt;
    &lt;/local&gt;
    &lt;remote&gt;
      &lt;server&gt;
        &lt;url&gt;#{env['REGION'].startsWith('us') ? 'https://us.example.org/cache' : 'https://eu.example.org/cache'}&lt;/url&gt;
        &lt;credentials&gt;
          &lt;username&gt;${env.GRADLE_ENTERPRISE_CACHE_USERNAME}&lt;/username&gt;
          &lt;password&gt;${env.GRADLE_ENTERPRISE_CACHE_PASSWORD}&lt;/password&gt;
        &lt;/credentials&gt;
      &lt;/server&gt;
      &lt;enabled&gt;true&lt;/enabled&gt;
      &lt;storeEnabled&gt;#{env['JENKINS_URL'] != null}&lt;/storeEnabled&gt;
    &lt;/remote&gt;
  &lt;/buildCache&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="pom_xml"><a class="anchor" href="#pom_xml"></a><a class="link" href="#pom_xml">pom.xml</a></h3> 
      <div class="paragraph"> 
       <p>The Gradle Enterprise Maven extension also allows you to configure module-specific aspects in the corresponding <code>pom.xml</code> file. This allows you to share common configuration between your project by putting it in a parent POM. See the example below for a full reference.</p> 
      </div> 
      <div class="admonitionblock note"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
          <td class="content"> 
           <div class="paragraph"> 
            <p>In order to get auto-completion in your IDE, be sure to include the XML namespace and schema location as shown in the example below. The latest version of the schema is always available at <a href="https://www.gradle.com/schema/gradle-enterprise-maven-project.xsd" class="bare">https://www.gradle.com/schema/gradle-enterprise-maven-project.xsd</a>, or you can get a specific schema version by appending the Gradle Enterprise Maven extension version to the schema location, e.g. <a href="https://www.gradle.com/schema/gradle-enterprise-maven-project-1.11.1.xsd" class="bare">https://www.gradle.com/schema/gradle-enterprise-maven-project-1.11.1.xsd</a>. IntelliJ IDEA will mark unknown schemas as missing and they have to be explicitly fetched via the quick fix dialog (Alt + Enter). There is an <a href="https://youtrack.jetbrains.com/issue/IDEA-214739">open issue</a> to make this more user friendly. Please note that auto-completion is currently only supported by Eclipse. For IntelliJ IDEA, there’s an <a href="https://youtrack.jetbrains.com/issue/IDEA-157040">open issue</a> to add such a feature.</p> 
           </div> </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="listingblock silver"> 
       <div class="title">
        pom.xml
       </div> 
       <div class="content"> 
        <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd
        https://www.gradle.com/gradle-enterprise-maven-project https://www.gradle.com/schema/gradle-enterprise-maven-project.xsd"&gt;

  &lt;!-- other build configuration --&gt;
  &lt;build&gt;
    &lt;pluginManagement&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;
          &lt;groupId&gt;com.gradle&lt;/groupId&gt;
          &lt;artifactId&gt;gradle-enterprise-maven-extension&lt;/artifactId&gt;
          &lt;configuration&gt;
            &lt;gradleEnterprise xmlns="https://www.gradle.com/gradle-enterprise-maven-project"&gt;
              &lt;normalization&gt;
                &lt;runtimeClassPath&gt;
                  &lt;ignoredFiles&gt;
                    &lt;ignoredFile&gt;META-INF/build.properties&lt;/ignoredFile&gt;
                  &lt;/ignoredFiles&gt;
                  &lt;propertiesNormalizations&gt;
                    &lt;propertiesNormalization&gt;
                      &lt;path&gt;com/example/**/build.properties&lt;/path&gt;
                      &lt;ignoredProperties&gt;
                        &lt;ignore&gt;build.timestamp&lt;/ignore&gt;
                      &lt;/ignoredProperties&gt;
                    &lt;/propertiesNormalization&gt;
                  &lt;/propertiesNormalizations&gt;
                  &lt;metaInf&gt;
                    &lt;ignoreManifest&gt;true&lt;/ignoreManifest&gt;
                    &lt;ignoreCompletely&gt;true&lt;/ignoreCompletely&gt;
                    &lt;ignoredAttributes&gt;
                      &lt;ignore&gt;Implementation-Version&lt;/ignore&gt;
                    &lt;/ignoredAttributes&gt;
                    &lt;ignoredProperties&gt;
                      &lt;ignore&gt;app.version&lt;/ignore&gt;
                    &lt;/ignoredProperties&gt;
                  &lt;/metaInf&gt;
                &lt;/runtimeClassPath&gt;
              &lt;/normalization&gt;
              &lt;plugins&gt;
                &lt;!-- an example of adding more details to an already cacheable plugin --&gt;
                &lt;plugin&gt;
                  &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
                  &lt;inputs&gt;
                    &lt;fileSets&gt;
                      &lt;fileSet&gt;
                        &lt;name&gt;samples&lt;/name&gt;
                        &lt;paths&gt;
                          &lt;path&gt;src/test/samples&lt;/path&gt;
                        &lt;/paths&gt;
                        &lt;includes&gt;
                          &lt;include&gt;**/*.sample&lt;/include&gt;
                        &lt;/includes&gt;
                        &lt;excludes&gt;
                          &lt;exclude&gt;archive/**/*.sample&lt;/exclude&gt;
                        &lt;/excludes&gt;
                        &lt;normalization&gt;NAME_ONLY&lt;/normalization&gt;
                      &lt;/fileSet&gt;
                      &lt;fileSet&gt;
                        &lt;name&gt;config&lt;/name&gt;
                        &lt;paths&gt;
                          &lt;path&gt;src/main/config&lt;/path&gt;
                        &lt;/paths&gt;
                        &lt;normalization&gt;
                          &lt;strategy&gt;RELATIVE_PATH&lt;/strategy&gt;
                          &lt;ignoreEmptyDirectories&gt;true&lt;/ignoreEmptyDirectories&gt;
                          &lt;ignoreLineEndings&gt;true&lt;/ignoreLineEndings&gt;
                        &lt;/normalization&gt;
                      &lt;/fileSet&gt;
                    &lt;/fileSets&gt;
                  &lt;/inputs&gt;
                  &lt;outputs&gt;
                    &lt;files&gt;
                      &lt;file&gt;
                        &lt;name&gt;summary&lt;/name&gt;
                        &lt;path&gt;target/test-results/summary.txt&lt;/path&gt;
                      &lt;/file&gt;
                    &lt;/files&gt;
                    &lt;directories&gt;
                      &lt;directory&gt;
                        &lt;name&gt;screenshots&lt;/name&gt;
                        &lt;path&gt;target/test-results/screenshots&lt;/path&gt;
                      &lt;/directory&gt;
                    &lt;/directories&gt;
                    &lt;notCacheableBecause&gt;these tests verify integration with other systems and should rerun even if our
                      inputs didn't change
                    &lt;/notCacheableBecause&gt;
                  &lt;/outputs&gt;
                  &lt;localState&gt;
                    &lt;fileSets&gt;
                      &lt;fileSet&gt;
                        &lt;name&gt;someTemporaryStuff&lt;/name&gt;
                        &lt;paths&gt;
                          &lt;path&gt;target/myTestFramework/tmp&lt;/path&gt;
                        &lt;/paths&gt;
                      &lt;/fileSet&gt;
                    &lt;/fileSets&gt;
                  &lt;/localState&gt;
                &lt;/plugin&gt;
                &lt;plugin&gt;
                  &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
                  &lt;executions&gt;
                    &lt;execution&gt;
                      &lt;id&gt;default-compile&lt;/id&gt;
                      &lt;inputs&gt;
                        &lt;!-- same as above --&gt;
                      &lt;/inputs&gt;
                      &lt;outputs&gt;
                        &lt;!-- same as above --&gt;
                      &lt;/outputs&gt;
                      &lt;localState&gt;
                        &lt;!-- same as above --&gt;
                      &lt;/localState&gt;
                    &lt;/execution&gt;
                  &lt;/executions&gt;
                &lt;/plugin&gt;
                &lt;!-- an example of making a custom plugin cacheable --&gt;
                &lt;plugin&gt;
                  &lt;groupId&gt;my.company&lt;/groupId&gt;
                  &lt;artifactId&gt;awesome-but-slow-plugin&lt;/artifactId&gt;
                  &lt;inputs&gt;
                    &lt;fileSets&gt;
                      &lt;fileSet&gt;
                        &lt;name&gt;sources&lt;/name&gt;
                        &lt;includesProperty&gt;includes&lt;/includesProperty&gt;
                        &lt;excludesProperty&gt;excludes&lt;/excludesProperty&gt;
                      &lt;/fileSet&gt;
                    &lt;/fileSets&gt;
                    &lt;properties&gt;
                      &lt;property&gt;
                        &lt;name&gt;encoding&lt;/name&gt;
                      &lt;/property&gt;
                    &lt;/properties&gt;
                    &lt;ignoredProperties&gt;
                      &lt;ignore&gt;logWarnings&lt;/ignore&gt;
                    &lt;/ignoredProperties&gt;
                  &lt;/inputs&gt;
                  &lt;nestedProperties&gt;
                    &lt;property&gt;
                      &lt;name&gt;forkOptions&lt;/name&gt;
                      &lt;inputs&gt;
                        &lt;properties&gt;
                          &lt;property&gt;
                            &lt;name&gt;maxHeap&lt;/name&gt;
                          &lt;/property&gt;
                        &lt;/properties&gt;
                      &lt;/inputs&gt;
                    &lt;/property&gt;
                  &lt;/nestedProperties&gt;
                  &lt;iteratedProperties&gt;
                    &lt;property&gt;
                      &lt;name&gt;targetPlatforms&lt;/name&gt;
                      &lt;inputs&gt;
                        &lt;properties&gt;
                          &lt;property&gt;
                            &lt;name&gt;architecture&lt;/name&gt;
                          &lt;/property&gt;
                          &lt;property&gt;
                            &lt;name&gt;linkingMode&lt;/name&gt;
                          &lt;/property&gt;
                        &lt;/properties&gt;
                      &lt;/inputs&gt;
                    &lt;/property&gt;
                  &lt;/iteratedProperties&gt;
                  &lt;outputs&gt;
                    &lt;directories&gt;
                      &lt;directory&gt;
                        &lt;name&gt;outputDir&lt;/name&gt;
                      &lt;/directory&gt;
                    &lt;/directories&gt;
                    &lt;cacheableBecause&gt;this plugin has CPU-bound goals with well-defined inputs and outputs&lt;/cacheableBecause&gt;
                  &lt;/outputs&gt;
                  &lt;localState&gt;
                    &lt;fileSets&gt;
                      &lt;fileSet&gt;
                        &lt;name&gt;tempDir&lt;/name&gt;
                      &lt;/fileSet&gt;
                    &lt;/fileSets&gt;
                  &lt;/localState&gt;
                &lt;/plugin&gt;
              &lt;/plugins&gt;
              &lt;buildScan&gt;
                &lt;tags&gt;
                  &lt;tag&gt;my tag&lt;/tag&gt;
                &lt;/tags&gt;
                &lt;links&gt;
                  &lt;link&gt;
                    &lt;name&gt;my link&lt;/name&gt;
                    &lt;url&gt;http://my-site.com&lt;/url&gt;
                  &lt;/link&gt;
                &lt;/links&gt;
                &lt;values&gt;
                  &lt;value&gt;
                    &lt;name&gt;Build Number&lt;/name&gt;
                    &lt;value&gt;${project.buildNumber}&lt;/value&gt;
                  &lt;/value&gt;
                &lt;/values&gt;
              &lt;/buildScan&gt;
            &lt;/gradleEnterprise&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
      &lt;/plugins&gt;
    &lt;/pluginManagement&gt;
  &lt;/build&gt;
&lt;/project&gt;</code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="custom_extension"><a class="anchor" href="#custom_extension"></a><a class="link" href="#custom_extension">Programmatic configuration</a></h3> 
      <div class="paragraph"> 
       <p>In order to access the Gradle Enterprise Maven extension API to perform programmatic configuration of build scans and the build cache you need to create a <a href="https://maven.apache.org/examples/maven-3-lifecycle-extensions.html">Maven extension</a>. The <a href="https://github.com/gradle/gradle-enterprise-build-config-samples/tree/master/common-custom-user-data-maven-extension">Common Custom User Data Maven Extension</a> provided by Gradle Inc. provides an example. This extension can be applied directly to your project, or can serve as a template project for your own extension implementation.</p> 
      </div> 
      <div class="paragraph"> 
       <p>Please see the <a href="api/index.html">API reference</a> for more details.</p> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="captured_information"><a class="anchor" href="#captured_information"></a><a class="link" href="#captured_information">Appendix B: Captured information</a></h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>The Gradle Enterprise Maven extension captures information while the build is running and transmits it to a server after the build has completed.</p> 
     </div> 
     <div class="paragraph"> 
      <p>Most of the information captured can be considered to be build data. This includes the name of the projects in your build, the executed goals, plugins and other things of this nature. Some more general environmental information is also captured. This includes your Java version, operating system, hardware, country, timezone and other things of this nature.</p> 
     </div> 
     <div class="paragraph"> 
      <p>Notably, the actual source code being built and the output artifacts are <em>not</em> captured. However, error messages emitted by compilers or errors in tests may reveal aspects of the source code.</p> 
     </div> 
     <div class="sect2"> 
      <h3 id="listing"><a class="anchor" href="#listing"></a><a class="link" href="#listing">Listing</a></h3> 
      <div class="paragraph"> 
       <p>The list below details the notable information captured by the Gradle Enterprise Maven extension and transmitted in a build scan.</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p>Environment</p> 
         <div class="ulist"> 
          <ul> 
           <li> <p>Username (system property <code>'user.name'</code>) (Can be <a href="#obfuscating_identifying_data">obfuscated</a>)</p> </li> 
           <li> <p>Local hostname (environment variable <code>'COMPUTERNAME'</code> / <code>'HOSTNAME'</code>) (Can be <a href="#obfuscating_identifying_data">obfuscated</a>)</p> </li> 
           <li> <p>Public hostname (Can be <a href="#obfuscating_identifying_data">obfuscated</a>)</p> </li> 
           <li> <p>Local IP addresses (Can be <a href="#obfuscating_identifying_data">obfuscated</a>)</p> </li> 
           <li> <p><a href="#jvm-content" id="toggler-jvm-content">Build Java Virtual Machine</a></p> 
            <div id="jvm-content" class="ulist hidden"> 
             <ul> 
              <li> <p>Vendor (system property <code>'java.vendor'</code>)</p> </li> 
              <li> <p>Runtime name (system property <code>'java.runtime.name'</code>)</p> </li> 
              <li> <p>Runtime version (system property <code>'java.runtime.version'</code>)</p> </li> 
              <li> <p>Version (system property <code>'java.version'</code>)</p> </li> 
              <li> <p>Class version (system property <code>'java.class.version'</code>)</p> </li> 
              <li> <p>VM information (system property <code>'java.vm.info'</code>)</p> </li> 
              <li> <p>VM name (system property <code>'java.vm.name'</code>)</p> </li> 
              <li> <p>VM vendor (system property <code>'java.vm.vendor'</code>)</p> </li> 
              <li> <p>VM version (system property <code>'java.vm.version'</code>)</p> </li> 
              <li> <p><a href="#jvm-locale-content" id="toggler-jvm-locale-content">Locale</a></p> 
               <div id="jvm-locale-content" class="ulist hidden"> 
                <ul> 
                 <li> <p>Language</p> </li> 
                 <li> <p>Country</p> </li> 
                 <li> <p>Variant</p> </li> 
                 <li> <p>Timezone</p> </li> 
                </ul> 
               </div> </li> 
              <li> <p>Memory utilization and settings</p> </li> 
             </ul> 
            </div> </li> 
           <li> <p><a href="#os-content" id="toggler-os-content">Operating System</a></p> 
            <div id="os-content" class="ulist hidden"> 
             <ul> 
              <li> <p>Name (system property <code>'os.name'</code>)</p> </li> 
              <li> <p>Version (system property <code>'os.version'</code>)</p> </li> 
              <li> <p>Architecture (system property <code>'os.arch'</code>)</p> </li> 
             </ul> 
            </div> </li> 
           <li> <p><a href="#hardware-content" id="toggler-hardware-content">Hardware</a></p> 
            <div id="hardware-content" class="ulist hidden"> 
             <ul> 
              <li> <p>Number of processors</p> </li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
        <li> <p>Build</p> 
         <div class="ulist"> 
          <ul> 
           <li> <p>Maven command-line and invocation options (e.g. requested phases and goals, switches)</p> </li> 
           <li> <p>Build failure exception messages and stacktraces</p> </li> 
           <li> <p>Build console output</p> </li> 
           <li> <p><a href="#projects-content" id="toggler-projects-content">Projects</a></p> 
            <div id="projects-content" class="ulist hidden"> 
             <ul> 
              <li> <p>Group ID</p> </li> 
              <li> <p>Artifact ID</p> </li> 
              <li> <p>Packaging</p> </li> 
              <li> <p>Version number</p> </li> 
              <li> <p>Disk location</p> </li> 
             </ul> 
            </div> </li> 
           <li> <p><a href="#executing-goals-content" id="toggler-executing-goals-content">Executed goals</a></p> 
            <div id="executing-goals-content" class="ulist hidden"> 
             <ul> 
              <li> <p>Goal name</p> </li> 
              <li> <p>Goal execution outcome</p> </li> 
              <li> <p>Goal execution ID</p> </li> 
              <li> <p>Lifecycle phase</p> </li> 
              <li> <p>Reason for a non-cacheable goal</p> </li> 
              <li> <p>Plugin applying the goal</p> </li> 
              <li> <p>Mojo classname</p> </li> 
              <li> <p>Build cache operations, including cache key</p> </li> 
              <li> <p>Goal input and output properties (excluding their values)</p> </li> 
             </ul> 
            </div> </li> 
           <li> <p><a href="#build-tests-content" id="toggler-build-tests-content">Executed tests (using Apache Maven Surefire plugin)</a></p> 
            <div id="build-tests-content" class="ulist hidden"> 
             <ul> 
              <li> <p>Test names (e.g. class and method name) and outcome</p> </li> 
              <li> <p>Console output</p> </li> 
              <li> <p>Failure exception messages and stacktraces</p> </li> 
             </ul> 
            </div> </li> 
           <li> <p><a href="#build-plugins-content" id="toggler-build-plugins-content">Applied plugins</a></p> 
            <div id="build-plugins-content" class="ulist hidden"> 
             <ul> 
              <li> <p>Group ID</p> </li> 
              <li> <p>Artifact ID</p> </li> 
              <li> <p>Version number</p> </li> 
              <li> <p>Goal prefix</p> </li> 
              <li> <p>Required Maven version</p> </li> 
             </ul> 
            </div> </li> 
           <li> <p><a href="#build-dependencies-content" id="toggler-build-dependencies-content">Resolved dependencies</a></p> 
            <div id="build-dependencies-content" class="ulist hidden"> 
             <ul> 
              <li> <p>Identifiers and versions (e.g. javax.inject:javax.inject:1)</p> </li> 
              <li> <p>Resolution failure error messages</p> </li> 
              <li> <p>Origin repositories</p> </li> 
             </ul> 
            </div> </li> 
           <li> <p><a href="#build-downloads-content" id="toggler-build-downloads-content">Network downloads (performed by Maven)</a></p> 
            <div id="build-downloads-content" class="ulist hidden"> 
             <ul> 
              <li> <p>Download time</p> </li> 
              <li> <p>Download size</p> </li> 
              <li> <p>Download location (including repository location)</p> </li> 
             </ul> 
            </div> </li> 
           <li> <p>Build cache configuration</p> </li> 
          </ul> 
         </div> </li> 
       </ul> 
      </div> 
      <script>
    $(document).ready(function(){
      $('*[id^="toggler"]').on('click', function (e) {
        e.preventDefault();
        var id = $(this).attr('id').replace('toggler-', '');
        $("div[id=" + id + "]").toggleClass('hidden');
      });
    });
</script> 
     </div> 
     <div class="sect2"> 
      <h3 id="access"><a class="anchor" href="#access"></a><a class="link" href="#access">Access</a></h3> 
      <div class="paragraph"> 
       <p>Build scans published to a Gradle Enterprise installation are viewable by all users that can reach the server and have the required roles, should Identity Access Management (IAM) be turned on. Gradle Enterprise provides a search interface for discovering and finding individual build scans.</p> 
      </div> 
      <div class="paragraph"> 
       <p>Build scans published to scans.gradle.com are viewable by anyone with the link assigned when publishing the build scan. Links to individual build scans are not discoverable and cannot be guessed, but may be shared.</p> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="cacheable_plugins_and_goals"><a class="anchor" href="#cacheable_plugins_and_goals"></a><a class="link" href="#cacheable_plugins_and_goals">Appendix C: Cacheable plugins and goals</a></h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>The extension caches the following plugins and goals out of the box. Unless otherwise noted, all their parameters are tracked as part of the cache key.</p> 
     </div> 
     <div class="sect2"> 
      <h3 id="maven_compiler_plugin"><a class="anchor" href="#maven_compiler_plugin"></a><a class="link" href="#maven_compiler_plugin">maven-compiler-plugin</a></h3> 
      <div class="paragraph"> 
       <p>Supported versions: 3.1 and above</p> 
      </div> 
      <div class="paragraph"> 
       <p>Supported goals:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><code>compile</code></p> </li> 
        <li> <p><code>testCompile</code></p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>Caching is automatically disabled if:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p>a non-javac toolchain is used</p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>The following use cases currently require disabling the cache for this plugin:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p>using annotation processors that read files outside of Maven’s resource directories</p> </li> 
        <li> <p>using annotation processors that generate sources outside of Maven’s generated sources directory</p> </li> 
        <li> <p>using any non-deterministic annotation processors</p> </li> 
       </ul> 
      </div> 
      <div class="sect3"> 
       <h4 id="compile_avoidance"><a class="anchor" href="#compile_avoidance"></a><a class="link" href="#compile_avoidance">Compile avoidance</a></h4> 
       <div class="paragraph"> 
        <p>Unless there are annotation processors on the classpath, the extension uses <a href="/enterprise/maven-build-cache/#compile_avoidance">compile avoidance</a> so your sources are only recompiled if the signatures of the classes on the compile classpath have changed.</p> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="maven_surefire_plugin_and_maven_failsafe_plugin"><a class="anchor" href="#maven_surefire_plugin_and_maven_failsafe_plugin"></a><a class="link" href="#maven_surefire_plugin_and_maven_failsafe_plugin">maven-surefire-plugin and maven-failsafe-plugin</a></h3> 
      <div class="paragraph"> 
       <p>Supported versions: 2.12.4 and above</p> 
      </div> 
      <div class="paragraph"> 
       <p>Supported goals:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><code>surefire:test</code></p> </li> 
        <li> <p><code>failsafe:integration-test</code></p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>Caching is automatically disabled if:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><a href="http://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#debugForkedProcess"><code>&lt;debugForkedProcess&gt;</code></a> is true</p> </li> 
        <li> <p><a href="http://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#basedir"><code>&lt;basedir&gt;</code></a> is changed to something different from the project’s directory</p> </li> 
        <li> <p><a href="http://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#workingDirectory"><code>&lt;workingDirectory&gt;</code></a> is changed to something different from the project’s root dir</p> </li> 
       </ul> 
      </div> 
      <div class="admonitionblock note"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
          <td class="content"> Test results for <code>surefire:test</code> are stored in the cache whenever the goal succeeds. Thus, by default, only successful or skipped test results are cached. However, if <a href="https://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#testFailureIgnore"><code>&lt;testFailureIgnore&gt;</code></a> is set to <code>true</code>, test failures are cached as well. </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="paragraph"> 
       <p>The following use cases currently require disabling the cache for these plugins:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p>non-deterministic tests (e.g. tests with random parameters)</p> </li> 
        <li> <p>tests that read files that are not on the test classpath (e.g. <code>new File("src/test/samples")</code>)</p> </li> 
        <li> <p>tests that write additional results that you absolutely need (e.g. screenshots for failed UI tests)</p> </li> 
        <li> <p>tests that read environment variables that are not explicitly declared using the <a href="http://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#environmentVariables"><code>&lt;environmentVariables&gt;</code></a> property</p> </li> 
        <li> <p>tests that use Java agents that read additional inputs or create additional outputs, except for JaCoCo, which is explicitly supported</p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>The following properties are deliberately not tracked as inputs, because they should not influence the test result:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p>all concurrency settings, e.g. <a href="http://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#threadCount"><code>&lt;threadCount&gt;</code></a></p> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="jacoco_maven_plugin"><a class="anchor" href="#jacoco_maven_plugin"></a><a class="link" href="#jacoco_maven_plugin">jacoco-maven-plugin</a></h3> 
      <div class="paragraph"> 
       <p>Supported versions: 0.5 and above</p> 
      </div> 
      <div class="paragraph"> 
       <p>Supported goals:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p>none of JaCoCo’s own goals are cached</p> </li> 
        <li> <p>surefire and failsafe remain cacheable when JaCoCo is used</p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>The JaCoCo plugin hooks into surefire and failsafe as a Java agent. The extension automatically tracks all JaCoCo agent options when determining the cache key for surefire and failsafe tests. The JaCoCo execution data file is cached as an additional output of the test execution.</p> 
      </div> 
      <div class="paragraph"> 
       <p>Caching is automatically disabled if:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><a href="https://www.eclemma.org/jacoco/trunk/doc/prepare-agent-mojo.html#append"><code>&lt;append&gt;</code></a> is true</p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>To allow tests to be cached while using JaCoCo, have each surefire/failsafe execution write to a separate data file and use a <a href="https://www.eclemma.org/jacoco/trunk/doc/merge-mojo.html"><code>jacoco:merge</code></a> or <a href="https://www.eclemma.org/jacoco/trunk/doc/report-aggregate-mojo.html"><code>jacoco:report-aggregate</code></a> goal to create a merged data file or an aggregated report.</p> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="maven-jaxb2-plugin"><a class="anchor" href="#maven-jaxb2-plugin"></a><a class="link" href="#maven-jaxb2-plugin">maven-jaxb2-plugin (org.jvnet.jaxb2.maven2)</a></h3> 
      <div class="paragraph"> 
       <p>Supported plugin artifact ids:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><code>maven-jaxb2-plugin</code></p> </li> 
        <li> <p><code>maven-jaxb20-plugin</code></p> </li> 
        <li> <p><code>maven-jaxb21-plugin</code></p> </li> 
        <li> <p><code>maven-jaxb22-plugin</code></p> </li> 
        <li> <p><code>maven-jaxb23-plugin</code></p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>Supported versions: 0.12.3 and above</p> 
      </div> 
      <div class="paragraph"> 
       <p>Supported goals:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><code>generate</code></p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>Caching is automatically disabled if:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p>a non-local URL is used to declare a catalog, schema, or binding</p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>The following use cases currently require disabling the cache for these plugins:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p>non-local URL references to schemas or bindings with changing content from within schema or binding files</p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>The following properties are deliberately not tracked as inputs, because they should not influence the result of code generation:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p>logging settings (<code>verbose</code>)</p> </li> 
        <li> <p>proxy settings (<code>proxyHost</code>, <code>proxyPort</code>, <code>proxyUsername</code>, <code>proxyPassword</code>, <code>useActiveProxyAsHttpproxy</code>)</p> </li> 
        <li> <p>settings for the plugin’s up-to-date check and incremental build feature (<code>forceRegenerate</code>, <code>removeOldOutput</code>, <code>produces</code>, <code>cleanPackageDirectories</code>)</p> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="maven_javadoc_plugin"><a class="anchor" href="#maven_javadoc_plugin"></a><a class="link" href="#maven_javadoc_plugin">maven-javadoc-plugin</a></h3> 
      <div class="paragraph"> 
       <p>Supported versions: 2.7 and above</p> 
      </div> 
      <div class="paragraph"> 
       <p>Supported goals:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><code>javadoc:javadoc</code></p> </li> 
        <li> <p><code>javadoc:javadoc-no-fork</code></p> </li> 
        <li> <p><code>javadoc:test-javadoc</code></p> </li> 
        <li> <p><code>javadoc:test-javadoc-no-fork</code></p> </li> 
        <li> <p><code>javadoc:jar</code></p> </li> 
        <li> <p><code>javadoc:test-jar</code></p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>Caching is automatically disabled if:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><a href="https://maven.apache.org/plugins/maven-javadoc-plugin/javadoc-mojo.html#skip"><code>&lt;skip&gt;</code></a> is true</p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>The following properties are deliberately not tracked as inputs, because they should not influence the javadoc output:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><a href="https://maven.apache.org/plugins/maven-javadoc-plugin/javadoc-mojo.html#quiet"><code>&lt;quiet&gt;</code></a></p> </li> 
        <li> <p><a href="https://maven.apache.org/plugins/maven-javadoc-plugin/javadoc-mojo.html#serialwarn"><code>&lt;serialwarn&gt;</code></a></p> </li> 
        <li> <p><a href="https://maven.apache.org/plugins/maven-javadoc-plugin/javadoc-mojo.html#verbose"><code>&lt;verbose&gt;</code></a></p> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="maven_checkstyle_plugin"><a class="anchor" href="#maven_checkstyle_plugin"></a><a class="link" href="#maven_checkstyle_plugin">maven-checkstyle-plugin</a></h3> 
      <div class="paragraph"> 
       <p>Supported versions: 2.14 and above</p> 
      </div> 
      <div class="paragraph"> 
       <p>Supported goals:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><code>check</code></p> </li> 
        <li> <p><code>checkstyle</code></p> </li> 
        <li> <p><code>checkstyle-aggregate</code></p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>Caching is automatically disabled if:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><a href="https://maven.apache.org/plugins/maven-checkstyle-plugin/check-mojo.html#skip"><code>&lt;skip&gt;</code></a> is true</p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>The following properties are deliberately not tracked as inputs, because they do not influence the outcome of the goal:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><a href="https://maven.apache.org/plugins/maven-checkstyle-plugin/check-mojo.html#consoleOutput"><code>&lt;consoleOutput&gt;</code></a></p> </li> 
        <li> <p><a href="https://maven.apache.org/plugins/maven-checkstyle-plugin/check-mojo.html#logViolationsToConsole"><code>&lt;logViolationsToConsole&gt;</code></a></p> </li> 
       </ul> 
      </div> 
      <div class="admonitionblock note"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
          <td class="content"> 
           <div class="title">
            Absolute paths in output files are ignored
           </div> 
           <div class="paragraph"> 
            <p>Checkstyle’s output files contain <em>absolute paths</em> that are deliberately ignored by the extension. Thus, when loading the goal’s outputs from cache, the referenced paths might not exist on the machine that is executing the build. In case that’s problematic for you, please <a href="#disabling_build_caching_for_a_plugin_or_execution">disable the cache for this goal</a>.</p> 
           </div> </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="anatomy_of_the_gradle_enterprise_directory"><a class="anchor" href="#anatomy_of_the_gradle_enterprise_directory"></a><a class="link" href="#anatomy_of_the_gradle_enterprise_directory">Appendix D: Anatomy of the .gradle-enterprise directory</a></h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>By default, the Gradle Enterprise Maven extension stores temporary data in the <code>${user.home}/.m2/.gradle-enterprise</code> directory. If you want to customize this location, use one of the following options:</p> 
     </div> 
     <div class="listingblock silver multi-language-sample"> 
      <div class="title">
       Using the <a href="#custom_extension">Programmatic configuration</a> (Maven extension 1.10.1+)
      </div> 
      <div class="content"> 
       <pre class="highlightjs highlight"><code data-lang="java" class="language-java hljs">import java.nio.file.Paths
GradleEnterpriseApi gradleEnterprise = (GradleEnterpriseApi) mavenSession.lookup("com.gradle.maven.extension.api.GradleEnterpriseApi");
gradleEnterprise.setStorageDirectory(Paths.get("/path/to/new/storage/directory"));</code></pre> 
      </div> 
     </div> 
     <div class="listingblock silver multi-language-sample"> 
      <div class="content"> 
       <pre class="highlightjs highlight"><code data-lang="bash" class="language-bash hljs">$ mvn clean verify -Dgradle.enterprise.storage.directory=/path/to/new/storage/directory</code></pre> 
      </div> 
     </div> 
     <div class="listingblock silver multi-language-sample"> 
      <div class="title">
       Add the following to <a href="#gradle_enterprise_xml">gradle-enterprise.xml</a> (Maven extension 1.10.3+)
      </div> 
      <div class="content"> 
       <pre class="highlightjs highlight"><code data-lang="xml" class="language-xml hljs">&lt;gradleEnterprise&gt;
  &lt;storageDirectory&gt;/path/to/new/storage/directory&lt;/storageDirectory&gt;
&lt;/gradleEnterprise&gt;</code></pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p>The directory may contain the following subdirectories:</p> 
     </div> 
     <div class="dlist"> 
      <dl> 
       <dt class="hdlist1">
        build-cache
       </dt> 
       <dd> 
        <p>Location of the local build cache</p> 
       </dd> 
       <dt class="hdlist1">
        build-cache-tmp
       </dt> 
       <dd> 
        <p>Temporary directory for loading and storing entries in the remote build cache in case the local build cache is disabled</p> 
       </dd> 
       <dt class="hdlist1">
        build-scan-data
       </dt> 
       <dd> 
        <p>Data collected to create build scans</p> 
       </dd> 
       <dt class="hdlist1">
        fingerprint-cache
       </dt> 
       <dd> 
        <p>Location of the local fingerprint cache</p> 
       </dd> 
       <dt class="hdlist1">
        token-cache
       </dt> 
       <dd> 
        <p>Location of cached entitlement tokens</p> 
       </dd> 
      </dl> 
     </div> 
     <div class="admonitionblock warning"> 
      <table> 
       <tbody>
        <tr> 
         <td class="icon"> <i class="fa icon-warning" title="Warning"></i> </td> 
         <td class="content"> 
          <div class="paragraph"> 
           <p>The <code>.gradle-enterprise</code> directory is an internal directory and subject to change without warning.</p> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
     </div> 
    </div> 
   </div> 
   <div class="sect1 small-header"> 
    <h2 id="release_history"><a class="anchor" href="#release_history"></a><a class="link" href="#release_history">Appendix E: Release history</a></h2> 
    <div class="sectionbody"> 
     <h3 id="1_11_1" class="discrete">1.11.1</h3> 
     <div class="ulist"> 
      <div class="title">
       20th October 2021
      </div> 
      <ul> 
       <li> <p>Fix potential out-of-order Maven events in case of a skipped project, when using Gradle Enterprise 2021.2.3+</p> </li> 
       <li> <p>Fail hard if Gradle Enterprise Maven extension is applied via copying the jar in <code>&lt;maven-home&gt;/lib</code></p> </li> 
       <li> <p>Build scans: Properly capture OS name and version for macOS 11+</p> </li> 
       <li> <p>Test distribution: Fix retry behavior for Spock 2 Stepwise test classes</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2021.3 or later.</p> 
     </div> 
     <h3 id="1_11" class="discrete">1.11</h3> 
     <div class="ulist"> 
      <div class="title">
       15th September 2021
      </div> 
      <ul> 
       <li> <p>Programmatically access the <code>GradleEnterpriseApi</code> with a custom <code>GradleEnterpriseListener</code> implementation</p> </li> 
       <li> <p>Allow configuring access key via <code>GradleEnterpriseApi</code> and <code>gradle-enterprise.xml</code></p> </li> 
       <li> <p>Fix build/test output capturing when empty byte arrays are written to <code>System.out</code>/<code>System.err</code></p> </li> 
       <li> <p>Build scans: Allow opt-out from build and test log capturing</p> </li> 
       <li> <p>Build scans: Avoid capturing identical tags</p> </li> 
       <li> <p>Build scans: Fix potential out-of-order event stream with Maven tests</p> </li> 
       <li> <p>Build scans: Allow capturing links up until 100,000 characters</p> </li> 
       <li> <p>Build cache: Add support for line ending normalization</p> </li> 
       <li> <p>Test distribution: Add support for JDK 16 and above without having to specify <code>--add-opens</code> JVM arguments</p> </li> 
       <li> <p>Test distribution: Validate <code>waitTimeoutInSeconds</code> to be positive</p> </li> 
       <li> <p>Test distribution: Only warn about unsupported properties if they are configured</p> </li> 
       <li> <p>Test distribution: Improve error message when forked test JVM terminates unexpectedly</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2021.3 or later.</p> 
     </div> 
     <h3 id="1_10_5" class="discrete">1.10.5</h3> 
     <div class="ulist"> 
      <div class="title">
       28th July 2021
      </div> 
      <ul> 
       <li> <p>Build cache: Prevent incomplete build cache entries in rare concurrent build scenarios</p> </li> 
       <li> <p>Build cache: Improve failure message when Maven is invoked with an invalid configuration</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2021.2 or later.</p> 
     </div> 
     <h3 id="1_10_4" class="discrete">1.10.4</h3> 
     <div class="ulist"> 
      <div class="title">
       20th July 2021
      </div> 
      <ul> 
       <li> <p>Test distribution: Capture logging as test output when logging frameworks are initialized before test execution</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2021.2 or later.</p> 
     </div> 
     <h3 id="1_10_3" class="discrete">1.10.3</h3> 
     <div class="ulist"> 
      <div class="title">
       25th June 2021
      </div> 
      <ul> 
       <li> <p>Allow configuring storage directory via <code>gradle-enterprise.xml</code></p> </li> 
       <li> <p>Allow configuring <code>requireClean</code> via <code>BuildCacheApi</code></p> </li> 
       <li> <p>Allow disabling the extension via <code>gradle-enterprise.xml</code>, <code>GradleEnterpriseApi</code>, or <code>gradle.enterprise.enabled</code> system property</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2021.2 or later.</p> 
     </div> 
     <h3 id="1_10_2" class="discrete">1.10.2</h3> 
     <div class="ulist"> 
      <div class="title">
       11th June 2021
      </div> 
      <ul> 
       <li> <p>Build scans: Snapshot dependency artifact resolutions of <code>maven-metadata.xml</code> artifacts are properly captured</p> </li> 
       <li> <p>Build scans: Out of bound test output events are not captured</p> </li> 
       <li> <p>Build scans: Also use programmatically configured storage directory (introduced in <code>1.10.1</code>) for temporary files</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2021.2 or later.</p> 
     </div> 
     <h3 id="1_10_1" class="discrete">1.10.1</h3> 
     <div class="ulist"> 
      <div class="title">
       8th June 2021
      </div> 
      <ul> 
       <li> <p>Build scans: Introduce new <code>GradleEnterpriseApi</code></p> </li> 
       <li> <p>Build scans: Restore support for custom locales (e.g. <code>tr-TR</code>)</p> </li> 
       <li> <p>Test distribution: JUnit Platform artifacts on the test runtime classpath/module path take precedence over those included in the extension</p> </li> 
       <li> <p>Test distribution: Merge JaCoCo coverage data when using a single remote executor along with local executors</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2021.2 or later.</p> 
     </div> 
     <h3 id="1_10" class="discrete">1.10</h3> 
     <div class="ulist"> 
      <div class="title">
       1st June 2021
      </div> 
      <ul> 
       <li> <p>Build scans: Capture test output</p> </li> 
       <li> <p>Build scans: Read user input without requiring the Plexus Interactivity dependency</p> </li> 
       <li> <p>Test distribution: Support Java Platform Module System (JPMS)</p> </li> 
       <li> <p>Test distribution: Time out and retry when upgrading a connection to WebSockets hangs</p> </li> 
       <li> <p>Test distribution: Exclude environment variables configured in the <code>excludedEnvironmentVariables</code> Surefire/Failsafe parameter when forking local test JVMs</p> </li> 
       <li> <p>Test distribution: Agents are released on agent shutdown once the current partition is finished</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2021.2 or later.</p> 
     </div> 
     <h3 id="1_9_2" class="discrete">1.9.2</h3> 
     <div class="ulist"> 
      <div class="title">
       7th May 2021
      </div> 
      <ul> 
       <li> <p>Build cache: Add support for <code>xrefTestLocation</code> property in maven-checkstyle-plugin 3.2.0</p> </li> 
       <li> <p>Build cache: Add support for <code>dependencyLinks</code> and <code>addStylesheets</code> properties in maven-javadoc-plugin 3.3.0</p> </li> 
       <li> <p>Test distribution: Fix cross-OS path mapping to cope with a broader range of inputs</p> </li> 
       <li> <p>Test distribution: Reuse temporary workspace on test distribution agents across sessions when <code>reuseForks</code> is <code>false</code></p> </li> 
       <li> <p>Test distribution/build cache: Add support for <code>includeJUnit5Engines</code> and <code>excludeJUnit5Engines</code> property in maven-surefire-plugin and maven-failsafe-plugin 3.0.0-M6</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2021.1 or later.</p> 
     </div> 
     <h3 id="1_9_1" class="discrete">1.9.1</h3> 
     <div class="ulist"> 
      <div class="title">
       7th April 2021
      </div> 
      <ul> 
       <li> <p>Build scans: Reduced memory usage when capturing goal input files</p> </li> 
       <li> <p>Build scans: Fixed rare case of duplicated dependencies capturing</p> </li> 
       <li> <p>Build scans: Fixed captured exception messages in some cases</p> </li> 
       <li> <p>Test distribution: Fixed potentially hanging build when agents disconnect before starting test execution</p> </li> 
       <li> <p>Test distribution: Compatibility with JDK 16 without having to configure <code>&lt;argLine&gt;</code></p> </li> 
       <li> <p>Test distribution: Improved reporting of unrecoverable failures that occurred on test distribution agents</p> </li> 
       <li> <p>Test distribution: Fixed interoperability issue when using test distribution agents running on Linux from builds running on Windows</p> </li> 
       <li> <p>Test distribution: Fixed reporting of output emitted during startup of forked JVMs on test distribution agents</p> </li> 
       <li> <p>Test distribution/build scans: Fixed reporting of tests that were in progress when a forked JVM crashed to be listed as "skipped"</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2021.1 or later.</p> 
     </div> 
     <h3 id="1_9" class="discrete">1.9</h3> 
     <div class="ulist"> 
      <div class="title">
       15th March 2021
      </div> 
      <ul> 
       <li> <p>Build scans: add Maven dependency resolution capturing</p> </li> 
       <li> <p>Build cache: stricter validation of the Gradle Enterprise pom.xml configuration</p> </li> 
       <li> <p>Build scans/test distribution: the <code>GRADLE_ENTERPRISE_ACCESS_KEY</code> environment variable allows specifying the access keys for multiple hosts</p> </li> 
       <li> <p>Test distribution: improve test scheduling by creating smaller partitions</p> </li> 
       <li> <p>Test distribution: add support for once-per-JVM setup/teardown behavior via implementations of <code>LauncherSessionListener</code> introduced in JUnit 5.8.0-M1</p> </li> 
       <li> <p>Test distribution: optimize local execution of single test classes</p> </li> 
       <li> <p>Test distribution: configuring <code>maxLocalExecutors</code> takes precedence over <code>forkCount</code></p> </li> 
       <li> <p>Reduced memory usage for builds with lots of input files</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2021.1 or later.</p> 
     </div> 
     <h3 id="1_8_3" class="discrete">1.8.3</h3> 
     <div class="ulist"> 
      <div class="title">
       25th February 2021
      </div> 
      <ul> 
       <li> <p>Fix resource leakage when used from IntelliJ IDEA</p> </li> 
       <li> <p>Properly disambiguate parameterized TestNG tests</p> </li> 
       <li> <p>Add support for <code>failOnFlakeCount</code> property in maven-surefire-plugin 3.0.0-M6</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.5 or later.</p> 
     </div> 
     <h3 id="1_8_2" class="discrete">1.8.2</h3> 
     <div class="ulist"> 
      <div class="title">
       4th February 2021
      </div> 
      <ul> 
       <li> <p>Missing source roots are treated like empty source roots in build scan comparisons</p> </li> 
       <li> <p>Warnings are logged for unsupported Surefire/Failsafe config parameters even when explicitly set to their default value when Test Distribution is enabled</p> </li> 
       <li> <p>Test Distribution output file archives are sanity checked before unpacking to ensure only regular files and directories are created inside the target directory (<a href="https://security.gradle.com/advisory/CVE-2021-26719">CVE-2021-26719</a>)</p> </li> 
       <li> <p>Temporary Test Distribution output files are stored in <code>target/test-distribution-outputs</code> instead of directly in <code>test-distribution-outputs</code> in the project’s base directory</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.5 or later.</p> 
     </div> 
     <h3 id="1_8_1" class="discrete">1.8.1</h3> 
     <div class="ulist"> 
      <div class="title">
       7th January 2021
      </div> 
      <ul> 
       <li> <p>Test goals without test classes no longer fail if test distribution is enabled without JUnit Platform test engine on the classpath</p> </li> 
       <li> <p>Potential deadlock when test distribution broker connection is lost while tests are being executed is now avoided</p> </li> 
       <li> <p>Output of JVM which discovers / executes tests is printed in case it exits with non-zero exit code</p> </li> 
       <li> <p>Failed attempts to read from or write to the fingerprint cache are now logged as errors but no longer cause the build to fail</p> </li> 
       <li> <p>Fix sporadic <code>ArithmeticException</code> when reconnecting to the Gradle Enterprise server for test distribution</p> </li> 
       <li> <p>File uploads with non-retryable failures now cause test goals to fail instead of making the build hang</p> </li> 
       <li> <p>Fix file path normalization to properly capture file roots (e.g. workspace, local Maven repository)</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.5 or later.</p> 
     </div> 
     <h3 id="1_8" class="discrete">1.8</h3> 
     <div class="ulist"> 
      <div class="title">
       8th December 2020
      </div> 
      <ul> 
       <li> <p>Added support for test distribution</p> </li> 
       <li> <p>Build cache now supports normalization of MANIFEST and properties files</p> </li> 
       <li> <p>Build cache now ignores empty directories being added or removed to the source tree when calculating cache keys for the maven-compiler-plugin and maven-checkstyle-plugin</p> </li> 
       <li> <p>The &lt;normalization&gt; element in the POM DSL now provides a way to specify that empty directories should be ignored during build cache key calculation</p> </li> 
       <li> <p>Tests with failed assumptions in @BeforeAll methods are now captured in build scans correctly</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.5 or later.</p> 
     </div> 
     <h3 id="1_7_2" class="discrete">1.7.2</h3> 
     <div class="ulist"> 
      <div class="title">
       20th November 2020
      </div> 
      <ul> 
       <li> <p>Track versions of JDK 15 and later correctly as input for code compilation, test execution, and Javadoc generation</p> </li> 
       <li> <p>Fix performance issue caused by querying the machine’s network interfaces for every goal execution</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.4 or later.</p> 
     </div> 
     <h3 id="1_7_1" class="discrete">1.7.1</h3> 
     <div class="ulist"> 
      <div class="title">
       13th November 2020
      </div> 
      <ul> 
       <li> <p>Fix race condition when using forked test VMs</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.4 or later.</p> 
     </div> 
     <h3 id="1_7" class="discrete">1.7</h3> 
     <div class="ulist"> 
      <div class="title">
       27th October 2020
      </div> 
      <ul> 
       <li> <p>Capture workspace directory project name as top level project name</p> </li> 
       <li> <p>Prevent build exception if using a Maven Surefire/Failsafe plugin &lt; 2.12</p> </li> 
       <li> <p>Properly detect identical tests run by different forked VMs</p> </li> 
       <li> <p>Improve handling of invalid plugin cache configuration in Maven POM DSL</p> </li> 
       <li> <p>Set the content length header when provisioning access keys for improved compatibility with some load balancers</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.4 or later.</p> 
     </div> 
     <h3 id="1_6_8" class="discrete">1.6.8</h3> 
     <div class="ulist"> 
      <div class="title">
       6th October 2020
      </div> 
      <ul> 
       <li> <p>Correctly handle multiple occurrences of failed dependencies</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.3 or later.</p> 
     </div> 
     <h3 id="1_6_7" class="discrete">1.6.7</h3> 
     <div class="ulist"> 
      <div class="title">
       22nd September 2020
      </div> 
      <ul> 
       <li> <p>Add support for <code>runOrderRandomSeed</code> property in maven-surefire-plugin and maven-failsafe-plugin 3.0.0-M6</p> </li> 
       <li> <p>Correctly handle multiple executions of the same Maven project</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.3 or later.</p> 
     </div> 
     <h3 id="1_6_6" class="discrete">1.6.6</h3> 
     <div class="ulist"> 
      <div class="title">
       18th September 2020
      </div> 
      <ul> 
       <li> <p>Properly link logs from sub-processes to the parent goal execution</p> </li> 
       <li> <p>Protect against unexpected failures during project execution</p> </li> 
       <li> <p>Fix error with Maven build cache when executing a goal early</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.3 or later.</p> 
     </div> 
     <h3 id="1_6_5" class="discrete">1.6.5</h3> 
     <div class="ulist"> 
      <div class="title">
       9th September 2020
      </div> 
      <ul> 
       <li> <p>Introduce <code>BuildCacheApi</code> to programmatically configure the Maven build cache</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.3 or later.</p> 
     </div> 
     <h3 id="1_6_4" class="discrete">1.6.4</h3> 
     <div class="ulist"> 
      <div class="title">
       28th August 2020
      </div> 
      <ul> 
       <li> <p>Fix build scans publishing from IntelliJ 2020.2+</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.3 or later.</p> 
     </div> 
     <h3 id="1_6_3" class="discrete">1.6.3</h3> 
     <div class="ulist"> 
      <div class="title">
       26th August 2020
      </div> 
      <ul> 
       <li> <p>Protect against potentially duplicated Maven <code>SessionStarted</code> execution event callback firing</p> </li> 
       <li> <p>Support obfuscation of identifying data via <code>gradle-enterprise.xml</code></p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.3 or later.</p> 
     </div> 
     <h3 id="1_6_2" class="discrete">1.6.2</h3> 
     <div class="ulist"> 
      <div class="title">
       11th August 2020
      </div> 
      <ul> 
       <li> <p>Fix test capturing when the JUnit Platform is called from within test code with a modified class loader</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.3 or later.</p> 
     </div> 
     <h3 id="1_6_1" class="discrete">1.6.1</h3> 
     <div class="ulist"> 
      <div class="title">
       3rd August 2020
      </div> 
      <ul> 
       <li> <p>Fix project structure capturing for sub modules</p> </li> 
       <li> <p>Fix capturing of skipped test classes</p> </li> 
       <li> <p>Fix test capturing when the JUnit Platform is called from within test code</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.3 or later.</p> 
     </div> 
     <h3 id="1_6" class="discrete">1.6</h3> 
     <div class="ulist"> 
      <div class="title">
       27th July 2020
      </div> 
      <ul> 
       <li> <p>Capture if the build scan was uploaded in the background</p> </li> 
       <li> <p>Capture the full project structure when the build is run from a sub-module</p> </li> 
       <li> <p>Do not print test capturing warning for projects with empty test classes directory</p> </li> 
       <li> <p>Fix potential socket stream security vulnerability when capturing tests (<a href="https://security.gradle.com/advisory/CVE-2020-15777">CVE-2020-15777</a>)</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.3 or later.</p> 
     </div> 
     <h3 id="1_5_3" class="discrete">1.5.3</h3> 
     <div class="ulist"> 
      <div class="title">
       22nd June 2020
      </div> 
      <ul> 
       <li> <p>Build caching now supports custom <code>javac</code> executables configured for the maven-compiler-plugin</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.2 or later.</p> 
     </div> 
     <h3 id="1_5_2" class="discrete">1.5.2</h3> 
     <div class="ulist"> 
      <div class="title">
       5th June 2020
      </div> 
      <ul> 
       <li> <p>Maven Extension XML project XSD is fixed</p> </li> 
       <li> <p>Error when using <code>null</code> values in proxy configuration is fixed</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.2 or later.</p> 
     </div> 
     <h3 id="1_5_1" class="discrete">1.5.1</h3> 
     <div class="ulist"> 
      <div class="title">
       19th May 2020
      </div> 
      <ul> 
       <li> <p>Credentials for remote build cache can be specified via <code>gradle-enterprise.xml</code></p> </li> 
       <li> <p>Support usage of SpEL expressions in <code>gradle-enterprise.xml</code></p> </li> 
       <li> <p>Support supply of <code>gradle-enterprise.xml</code> via custom extension jar on the Maven classpath</p> </li> 
       <li> <p>Race condition in Apache Commons Logging class instantiation is mitigated</p> </li> 
       <li> <p>Stale build scan files are cleaned up</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.2 or later.</p> 
     </div> 
     <h3 id="1_5" class="discrete">1.5</h3> 
     <div class="ulist"> 
      <div class="title">
       5th May 2020
      </div> 
      <ul> 
       <li> <p>Uploads build scans in the background after the build has finished</p> </li> 
       <li> <p>Add caching support for Surefire <code>forkNode</code> and <code>jdkToolchain</code> properties</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.2 or later.</p> 
     </div> 
     <h3 id="1_4_1" class="discrete">1.4.1</h3> 
     <div class="ulist"> 
      <div class="title">
       1st April 2020
      </div> 
      <ul> 
       <li> <p>Fix capturing of unresolvable conflicts in Maven dependency graphs</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.1 or later.</p> 
     </div> 
     <h3 id="1_4" class="discrete">1.4</h3> 
     <div class="ulist"> 
      <div class="title">
       24th March 2020
      </div> 
      <ul> 
       <li> <p>Capture Maven dependencies in build scans</p> </li> 
       <li> <p>Fix test capturing when failure in class-level method happens under special conditions</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2020.1 or later.</p> 
     </div> 
     <h3 id="1_3_6" class="discrete">1.3.6</h3> 
     <div class="ulist"> 
      <div class="title">
       30th January 2020
      </div> 
      <ul> 
       <li> <p>Cache configuration declared using the POM DSL takes precedence over built-in configuration</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.4 or later.</p> 
     </div> 
     <h3 id="1_3_5" class="discrete">1.3.5</h3> 
     <div class="ulist"> 
      <div class="title">
       21st January 2020
      </div> 
      <ul> 
       <li> <p>Extension is deactivated automatically in incompatible IntelliJ IDEA versions</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.4 or later.</p> 
     </div> 
     <h3 id="1_3_4" class="discrete">1.3.4</h3> 
     <div class="ulist"> 
      <div class="title">
       16th January 2020
      </div> 
      <ul> 
       <li> <p>Add caching support for maven-javadoc-plugin 3.2.0</p> </li> 
       <li> <p>Add caching support for maven-checkstyle-plugin 3.1.1</p> </li> 
       <li> <p>Fix handling of compile source roots when loading outputs of the maven-compiler-plugin from cache</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.4 or later.</p> 
     </div> 
     <h3 id="1_3_3" class="discrete">1.3.3</h3> 
     <div class="ulist"> 
      <div class="title">
       16th December 2019
      </div> 
      <ul> 
       <li> <p>Build cache does no longer store broken symbolic links</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.4 or later.</p> 
     </div> 
     <h3 id="1_3_2" class="discrete">1.3.2</h3> 
     <div class="ulist"> 
      <div class="title">
       13th December 2019
      </div> 
      <ul> 
       <li> <p>Test capturing is disabled when tests are executed with Java &lt; 8</p> </li> 
       <li> <p>Improved help message when authentication is required for build scan publishing</p> </li> 
       <li> <p>Mitigation if slow local host name resolution on macOS</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.4 or later.</p> 
     </div> 
     <h3 id="1_3_1" class="discrete">1.3.1</h3> 
     <div class="ulist"> 
      <div class="title">
       9th December 2019
      </div> 
      <ul> 
       <li> <p>Users can provide obfuscation functions for captured username, local IP addresses and hostnames</p> </li> 
       <li> <p>String interpolation in Surefire <code>argLine</code> property is supported</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.4 or later.</p> 
     </div> 
     <h3 id="1_3" class="discrete">1.3</h3> 
     <div class="ulist"> 
      <div class="title">
       25th November 2019
      </div> 
      <ul> 
       <li> <p>Add support for authenticated build scans feature</p> </li> 
       <li> <p>Add support for maven-javadoc-plugin 3.2.0</p> </li> 
       <li> <p>Add support for maven-surefire-plugin and maven-failsafe-plugin 3.0.0-M4</p> </li> 
       <li> <p>Logs on debug level are not captured</p> </li> 
       <li> <p>Ignore additional Maven extension applications, when another instance is already applied</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.4 or later.</p> 
     </div> 
     <h3 id="1_2_8" class="discrete">1.2.8</h3> 
     <div class="ulist"> 
      <div class="title">
       16th October 2019
      </div> 
      <ul> 
       <li> <p>Global <code>gradle-enterprise.xml</code> is now read from <code>${maven.home}/conf</code> in Maven &lt; 3.5.0</p> </li> 
       <li> <p>Fixed hanging build due to race condition when an error during data capturing occurred</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.3 or later.</p> 
     </div> 
     <h3 id="1_2_7" class="discrete">1.2.7</h3> 
     <div class="ulist"> 
      <div class="title">
       1st October 2019
      </div> 
      <ul> 
       <li> <p>Extension behaves more lenient towards unusual embeddings of Maven</p> </li> 
       <li> <p>Goal cache key only contains the major Java version</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.3 or later.</p> 
     </div> 
     <h3 id="1_2_6" class="discrete">1.2.6</h3> 
     <div class="ulist"> 
      <div class="title">
       18th September 2019
      </div> 
      <ul> 
       <li> <p>Reduced runtime and memory allocation overhead of test capturing</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.3 or later.</p> 
     </div> 
     <h3 id="1_2_5" class="discrete">1.2.5</h3> 
     <div class="ulist"> 
      <div class="title">
       16th September 2019
      </div> 
      <ul> 
       <li> <p>Fixed project structure capturing when a goal is executed very early in the build</p> </li> 
       <li> <p>Fixed test capturing when a custom test provider is specified</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.3 or later.</p> 
     </div> 
     <h3 id="1_2_4" class="discrete">1.2.4</h3> 
     <div class="ulist"> 
      <div class="title">
       10th September 2019
      </div> 
      <ul> 
       <li> <p>Fixed test capturing when test started event cannot be found</p> </li> 
       <li> <p>Fixed test capturing when duplicate JUnit 4 Descriptions are found</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.3 or later.</p> 
     </div> 
     <h3 id="1_2_3" class="discrete">1.2.3</h3> 
     <div class="ulist"> 
      <div class="title">
       28th August 2019
      </div> 
      <ul> 
       <li> <p>Add <code>executeOnce</code> Maven build scan API</p> </li> 
       <li> <p>Fixed concurrency issue in test capturing</p> </li> 
       <li> <p>Handle multi-threading and fail-fast scenarios for Maven &lt; 3.6.2</p> </li> 
       <li> <p>Handling of Maven workspace ID is enhanced</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.3 or later.</p> 
     </div> 
     <h3 id="1_2_2" class="discrete">1.2.2</h3> 
     <div class="ulist"> 
      <div class="title">
       23rd August 2019
      </div> 
      <ul> 
       <li> <p>TestNG tests handle orphaned failure events</p> </li> 
       <li> <p>Fixed build hangs when failure occurred during test processing</p> </li> 
       <li> <p>Fixed exceptions in test capturing</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.3 or later.</p> 
     </div> 
     <h3 id="1_2_1" class="discrete">1.2.1</h3> 
     <div class="ulist"> 
      <div class="title">
       20th August 2019
      </div> 
      <ul> 
       <li> <p>Support failing <code>@Before*</code>/<code>@After*</code> annotations in all supported test frameworks</p> </li> 
       <li> <p>Support failing TestNG <code>dependOnMethods</code> and <code>dependsOnGroups</code> tests</p> </li> 
       <li> <p>Don’t fail when <code>null</code> test method name or test class name is encountered</p> </li> 
       <li> <p>Gradle Enterprise server set by configuration is now retrievable from the <code>BuildScanApi</code></p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.3 or later.</p> 
     </div> 
     <h3 id="1_2" class="discrete">1.2</h3> 
     <div class="ulist"> 
      <div class="title">
       8th August 2019
      </div> 
      <ul> 
       <li> <p>Capture tests executed in Surefire/Failsafe 2.15+ for JUnit 4/5 and TestNG frameworks</p> </li> 
       <li> <p>Capture console output</p> </li> 
       <li> <p>Add adjacent build scans support for Maven by capturing the workspace ID, unique per project workspace</p> </li> 
       <li> <p>Fixed origin build scan link when there is no reference to the output producing goal</p> </li> 
       <li> <p>Fixed project structure capturing when other extensions/plugins update the internal Maven projects</p> </li> 
       <li> <p>Fixed event serialization error when using custom tags/links/values via the <code>BuildScanApi</code></p> </li> 
       <li> <p>Enhanced the <code>BuildScanApi</code>:</p> 
        <div class="ulist"> 
         <ul> 
          <li> <p>Register a background action</p> </li> 
          <li> <p>Register an action to be done as late as possible before publishing</p> </li> 
          <li> <p>Register an action to be done when a build scan is published</p> </li> 
          <li> <p>Set terms of service params programmatically</p> </li> 
          <li> <p>Set server programmatically</p> </li> 
          <li> <p>Set if untrusted servers are allowed programmatically</p> </li> 
          <li> <p>Specify the publication behaviour programmatically</p> </li> 
          <li> <p>Specify whether goal input files should be captured programmatically</p> </li> 
         </ul> 
        </div> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.3 or later.</p> 
     </div> 
     <h3 id="1_1_4" class="discrete">1.1.4</h3> 
     <div class="ulist"> 
      <div class="title">
       28th June 2019
      </div> 
      <ul> 
       <li> <p>Undeclared inputs are reported correctly on Windows</p> </li> 
       <li> <p>Registering additional inputs/outputs works in the presence of mixed line separators</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.2 or later.</p> 
     </div> 
     <h3 id="1_1_3" class="discrete">1.1.3</h3> 
     <div class="ulist"> 
      <div class="title">
       20th June 2019
      </div> 
      <ul> 
       <li> <p>Add support for upcoming <code>maven-surefire-plugin/maven-failsafe-plugin</code> version <code>3.0.0-M4</code></p> </li> 
       <li> <p>Build flags capturing is not based on the <code>MAVEN_CMD_LINE_ARGS</code> environment variable anymore</p> </li> 
       <li> <p>Add support for <code>mojo-executor</code> Maven plugin</p> </li> 
       <li> <p>Failed <code>maven-failsafe</code> tests are no longer cached</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.2 or later.</p> 
     </div> 
     <h3 id="1_1_2" class="discrete">1.1.2</h3> 
     <div class="ulist"> 
      <div class="title">
       17th May 2019
      </div> 
      <ul> 
       <li> <p>Fixed a bug which resulted in wrong event order caused by system clock adjustments</p> </li> 
       <li> <p>Fix handling of <code>**</code> in include patterns of supported goals and custom input declarations</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.2 or later.</p> 
     </div> 
     <h3 id="1_1_1" class="discrete">1.1.1</h3> 
     <div class="ulist"> 
      <div class="title">
       12th May 2019
      </div> 
      <ul> 
       <li> <p>Read project-specific <code>gradle-enterprise.xml</code> from same <code>.mvn</code> directory that Maven uses to read <code>extensions.xml</code></p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.2 or later.</p> 
     </div> 
     <h3 id="1_1" class="discrete">1.1</h3> 
     <div class="ulist"> 
      <div class="title">
       3rd May 2019
      </div> 
      <ul> 
       <li> <p>Output of <code>javadoc:aggregate</code> is cached for maven-javadoc-plugin:2.7+</p> </li> 
       <li> <p>Output of <code>javadoc:aggregate-jar</code> is cached for maven-javadoc-plugin:2.7+</p> </li> 
       <li> <p>Output of <code>javadoc:aggregate-no-fork</code> is cached for maven-javadoc-plugin:2.7+</p> </li> 
       <li> <p>Output of <code>javadoc:test-aggregate</code> is cached for maven-javadoc-plugin:2.7+</p> </li> 
       <li> <p>Output of <code>javadoc:test-aggregate-jar</code> is cached for maven-javadoc-plugin:2.7+</p> </li> 
       <li> <p>Output of <code>javadoc:test-aggregate-no-fork</code> is cached for maven-javadoc-plugin:2.7+</p> </li> 
       <li> <p>Maven log no longer disappears when extension is applied twice</p> </li> 
       <li> <p>Skipped cacheable goals are reported as "skipped" instead of "not cacheable"</p> </li> 
       <li> <p>Local cache issues fail the build instead of logging a warning</p> </li> 
       <li> <p>Extension only snapshots input files that match given include/exclude patterns</p> </li> 
       <li> <p>Fix <code>NullPointerException</code> when trying to resolve a non-existing plugin without version</p> </li> 
       <li> <p>Parallel forked goal executions are captured correctly in build scans</p> </li> 
       <li> <p>Capture finer-grained fingerprint events</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.2 or later.</p> 
     </div> 
     <h3 id="1_0_8" class="discrete">1.0.8</h3> 
     <div class="ulist"> 
      <div class="title">
       18th April 2019
      </div> 
      <ul> 
       <li> <p>Fix handling of null-valued system properties</p> </li> 
       <li> <p>Prevent non existing javadoc jars from being attached</p> </li> 
       <li> <p>java.io.tmpdir is ignored in surefire systemProperties/systemPropertyVariables</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.1 or later.</p> 
     </div> 
     <h3 id="1_0_7" class="discrete">1.0.7</h3> 
     <div class="ulist"> 
      <div class="title">
       17th April 2019
      </div> 
      <ul> 
       <li> <p>Output of <code>javadoc:test-jar</code> is cached for maven-javadoc-plugin:2.7+</p> </li> 
       <li> <p>Output of <code>javadoc:jar</code> is cached for maven-javadoc-plugin:2.7+</p> </li> 
       <li> <p>Output of <code>javadoc:test-javadoc-no-fork</code> is cached for maven-javadoc-plugin:2.7+</p> </li> 
       <li> <p>Output of <code>javadoc:test-javadoc</code> is cached for maven-javadoc-plugin:2.7+</p> </li> 
       <li> <p>Output of <code>javadoc:javadoc-no-fork</code> is cached for maven-javadoc-plugin:2.7+</p> </li> 
       <li> <p>Output of <code>javadoc:javadoc</code> is cached for maven-javadoc-plugin:2.7+</p> </li> 
       <li> <p>Output of <code>generate</code> goal is cached for maven-jaxb2-plugin:0.12.3+</p> </li> 
       <li> <p>Output of <code>checkstyle:check</code> is cached for maven-checkstyle-plugin:2.14+</p> </li> 
       <li> <p>Output of <code>checkstyle:checkstyle</code> is cached for maven-checkstyle-plugin:2.14+</p> </li> 
       <li> <p>Output of <code>checkstyle:checkstyle-aggregate</code> is cached for maven-checkstyle-plugin:2.14+</p> </li> 
       <li> <p>Protect against double applications</p> </li> 
       <li> <p>Protect against event notifications received before initialization (workaround for <a href="https://issues.apache.org/jira/browse/MNG-6619">MNG-6619</a>)</p> </li> 
       <li> <p>Handle more absolute paths in JVM arguments out of the box</p> </li> 
       <li> <p>Broken <code>java</code> executables make goals non-cacheable instead of failing the build</p> </li> 
       <li> <p>System properties now overwrite values in <code>gradle-enterprise.xml</code></p> </li> 
       <li> <p>Allow same file to appear in multiple output locations (e.g. the <code>summaryFile</code> of the maven-failsafe-plugin)</p> </li> 
       <li> <p>User can add additional inputs and outputs to goal executions using the <code>pom.xml</code> DSL</p> </li> 
       <li> <p>Command line arguments are normalized, removing all known input and output paths from them to allow relocation</p> </li> 
       <li> <p>Caching is deactivated for goals that contain undeclared file paths in their input properties (e.g. JVM args)</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.1 or later.</p> 
     </div> 
     <h3 id="1_0_6" class="discrete">1.0.6</h3> 
     <div class="ulist"> 
      <div class="title">
       26th March 2019
      </div> 
      <ul> 
       <li> <p>Add support for code completion of <code>publishMode</code> in <code>gradle-enterprise.xml</code></p> </li> 
       <li> <p>Support broken JARs in annotation processor detection</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.1 or later.</p> 
     </div> 
     <h3 id="1_0_5" class="discrete">1.0.5</h3> 
     <div class="ulist"> 
      <div class="title">
       20th March 2019
      </div> 
      <ul> 
       <li> <p>Only fingerprints for external jars are stored in the build cache</p> </li> 
       <li> <p>Surefire statistics file and tempDir are tracked as local state</p> </li> 
       <li> <p>Performance improvements for jar fingerprinting and cache load operations</p> </li> 
       <li> <p>More helpful error message for invalid build scan publishing mode configuration</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.1 or later.</p> 
     </div> 
     <h3 id="1_0_4" class="discrete">1.0.4</h3> 
     <div class="ulist"> 
      <div class="title">
       15th March 2019
      </div> 
      <ul> 
       <li> <p>Fix ID generation for build cache events</p> </li> 
       <li> <p>Jar fingerprints are stored in the build cache</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.1 or later.</p> 
     </div> 
     <h3 id="1_0_3" class="discrete">1.0.3</h3> 
     <div class="ulist"> 
      <div class="title">
       12th March 2019
      </div> 
      <ul> 
       <li> <p>Fix hashing of build cache operations, that was leading to event ID collisions</p> </li> 
       <li> <p>Support a proxy server when publishing build scans</p> </li> 
       <li> <p>Prevent publishing build scans when there is no entitlement</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.1 or later.</p> 
     </div> 
     <h3 id="1_0_2" class="discrete">1.0.2</h3> 
     <div class="ulist"> 
      <div class="title">
       6th March 2019
      </div> 
      <ul> 
       <li> <p>Runtime classpath normalization recursively inspects WAR, EAR, ZIP and APK files</p> </li> 
       <li> <p>Track <a href="https://maven.apache.org/surefire/maven-surefire-plugin/test-mojo.html#runOrder"><code>runOrder</code></a> as input property for the <code>maven-surefire-plugin</code> and <code>maven-failsafe-plugin</code></p> </li> 
       <li> <p>Fix project capturing to respect <code>&lt;module&gt;</code> declarations</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.1 or later.</p> 
     </div> 
     <h3 id="1_0_1" class="discrete">1.0.1</h3> 
     <div class="ulist"> 
      <div class="title">
       1st March 2019
      </div> 
      <ul> 
       <li> <p>Restore compatibility with Maven &lt; <code>3.5.2</code></p> </li> 
       <li> <p>Enhance console output of terms of services</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.1 or later.</p> 
     </div> 
     <h3 id="1_0" class="discrete">1.0</h3> 
     <div class="ulist"> 
      <div class="title">
       28th February 2019
      </div> 
      <ul> 
       <li> <p>Initial release</p> </li> 
      </ul> 
     </div> 
     <div class="paragraph"> 
      <p>Compatible with scans.gradle.com and Gradle Enterprise 2019.1 or later.</p> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="compatibility_with_apache_maven_and_gradle_enterprise"><a class="anchor" href="#compatibility_with_apache_maven_and_gradle_enterprise"></a><a class="link" href="#compatibility_with_apache_maven_and_gradle_enterprise">Appendix F: Compatibility with Apache Maven and Gradle Enterprise</a></h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>Compatibility between versions of Apache Maven, Gradle Enterprise, and the Gradle Enterprise Maven extension can be found <a href="/enterprise/compatibility/#maven_extension">here</a>.</p> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="compatibility_with_apache_maven_plugins"><a class="anchor" href="#compatibility_with_apache_maven_plugins"></a><a class="link" href="#compatibility_with_apache_maven_plugins">Appendix G: Compatibility with Apache Maven plugins</a></h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>Certains versions of the Apache Maven plugins listed below are incompatible with the Gradle Enterprise Maven extension. If using one of those plugins, please ensure to use a compatible version.</p> 
     </div> 
     <table class="tableblock frame-all grid-all stretch"> 
      <colgroup> 
       <col style="width: 33.3333%;"> 
       <col style="width: 33.3333%;"> 
       <col style="width: 33.3334%;"> 
      </colgroup> 
      <thead> 
       <tr> 
        <th class="tableblock halign-left valign-top">Plugin</th> 
        <th class="tableblock halign-left valign-top">Compatible versions</th> 
        <th class="tableblock halign-left valign-top">Reason</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://www.jfrog.com/confluence/display/JFROG/Maven+Artifactory+Plugin">Maven Artifactory Plugin</a></p></td> 
        <td class="tableblock halign-left valign-top"><p class="tableblock">3.1.0+</p></td> 
        <td class="tableblock halign-left valign-top"><p class="tableblock">Previous versions trigger unexpected <code>Project started</code>/<code>Project finished</code> callbacks</p></td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="compatibility_with_intellij_idea"><a class="anchor" href="#compatibility_with_intellij_idea"></a><a class="link" href="#compatibility_with_intellij_idea">Appendix H: Compatibility with IntelliJ IDEA</a></h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>No build scans will be published and the cache will not be used when running builds from IDEA versions below 2019.2 or version 2019.3. This is due to issues in these IDEA versions that we can’t work around. We recommend using IDEA 2019.3.1 or above to get the best experience.</p> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="verifying_the_signature_of_the_extension_jar"><a class="anchor" href="#verifying_the_signature_of_the_extension_jar"></a><a class="link" href="#verifying_the_signature_of_the_extension_jar">Appendix I: Verifying the signature of the extension jar</a></h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>The extension jar is published to Maven Central alongside its signature (cf. <a href="https://central.sonatype.org/publish/requirements/gpg/">OSSRH Guide</a>). The public key is published to <a href="https://keys.openpgp.org" class="bare">https://keys.openpgp.org</a>. You can verify the signature as follows:</p> 
     </div> 
     <div class="listingblock"> 
      <div class="content"> 
       <pre class="highlightjs highlight"><code class="language-none hljs">curl -OL https://repo1.maven.org/maven2/com/gradle/gradle-enterprise-maven-extension/1.11.1/gradle-enterprise-maven-extension-1.11.1.jar
curl -OL https://repo1.maven.org/maven2/com/gradle/gradle-enterprise-maven-extension/1.11.1/gradle-enterprise-maven-extension-1.11.1.jar.asc
gpg --keyserver keys.openpgp.org --recv-key 314FE82E5A4C5377BCA2EDEC5208812E1E4A6DB0
gpg --verify gradle-enterprise-maven-extension-1.11.1.jar.asc gradle-enterprise-maven-extension-1.11.1.jar</code></pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p>The output of the last command should look similar to the following:</p> 
     </div> 
     <div class="literalblock"> 
      <div class="content"> 
       <pre>gpg: Signature made Tue May  5 08:36:01 2020 UTC
gpg:                using RSA key 5208812E1E4A6DB0
gpg: Good signature from "Gradle Inc. &lt;info@gradle.com&gt;" [unknown]
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 314F E82E 5A4C 5377 BCA2  EDEC 5208 812E 1E4A 6DB0</pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p>This verifies that the artifact was signed with the private key that corresponds to the imported public key. The warning is emitted because you haven’t explicitly trusted the imported key (hence <code>[unknown]</code>). One way of establishing trust is to verify the fingerprint over a secure channel. Please contact technical support should you wish to do so.</p> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div id="footer"> 
   <div id="footer-text">
     Last updated 2021-10-10 02:00:17 +0200 
   </div> 
  </div> 
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/styles/idea.min.css"> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/highlight.min.js"></script> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/languages/dockerfile.min.js"></script> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/languages/dns.min.js"></script> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/languages/groovy.min.js"></script> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/languages/java.min.js"></script> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/languages/json.min.js"></script> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/languages/kotlin.min.js"></script> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/languages/xml.min.js"></script> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/languages/yaml.min.js"></script> 
  <script>hljs.initHighlighting()</script>  
 </body>
</html>