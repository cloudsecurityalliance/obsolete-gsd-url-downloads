<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<?xml version="1.0" encoding="iso-8859-1"?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head >
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="description" content="Common Weakness Enumeration (CWE) is a list of software weaknesses." />
	<meta http-equiv="X-UA-Compatible" content="IE=Edge">
	<link rel="shortcut icon" href="/favicon.ico" />
	<link href="/css/main.css?version=4.0.022420" rel="stylesheet" type="text/css" />
	<!--[if IE]>
	<link rel="stylesheet" type="text/css" href="/css/ie.css?version=1.7" />
	<![endif]-->
	
	<script src="/includes/browserheight.js" language="JavaScript" type="text/javascript"></script>
	<script src="/includes/jquery.js" language="JavaScript" type="text/javascript"></script>               	
    	<script src="/includes/cwe_minimizer.js" language="JavaScript" type="text/javascript"></script>
	<script src="/includes/cookie.js" language="JavaScript" type="text/javascript"></script>               	
	<script src="/includes/includeglossarydef.js" language="JavaScript" type="text/javascript"></script>
	<link href="/css/print.css?version=1.11" rel="stylesheet" media="print" type="text/css" />
	<link href="/css/user_skins/complete.css" rel="stylesheet" type="text/css" />
	<noscript>
	<style type="text/css">
		#script { visibility:collapse; visibility:hidden; font-size:0px; height:0px; width:0px  }
		#noscript { visibility:visible; font-size:inherit;  height:inherit; width:inherit}
	</style>
	</noscript>
	<title>CWE -

		CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection') (4.6)                </title>
</head>
<body onload="onloadCookie()">
<a name="top" id="top"></a>
	<div id="MastHead" style="width:100%">
	
	        <div style="width:70%;float:left;padding-top:15px;padding-left:10px;padding-bottom:2px;">
	                <a href="/index.html" style="color:#32498D; text-decoration:none">
	                <img src="/images/cwe_logo.jpg" width="153" height="55" style="float:left;border:0;margin-right:6px" alt="CWE" />
	                <h1 style="color:#314a8d;font-size:1.5em;font-family:'Verdana',sans-serif;text-shadow: 2px 2px #eee;margin: .1em auto">Common Weakness Enumeration</h1>
	                <p style="color:#314a8d;font-style:italic;font-family:'Times New Roman';font-size:1em;text-shadow: 2px 2px #eee;margin:.1em auto 0 auto">A Community-Developed List of Software &amp; Hardware Weakness Types</p>
	                </a>
	        </div>
	
	</div><!--End Masthead div-->
	
	<div style="width:20%;float:right;padding-top:0px;text-align:right;padding-left:0px;padding-right:14px;padding-bottom:0px;"><a href="/scoring/lists/2021_CWE_MIHW.html" title="2021 CWE Most Important Hardware Weaknesses"> <img src="/images/mihw_2021_logo_simple.svg" width="90" border="0" alt="2021 CWE Most Important Hardware Weaknesses" style="vertical-align:bottom"/></a> <div style="width:20%;float:right;padding-top:0px;text-align:right;padding-left:4px;padding-right:40px;padding-bottom:0px;"><a href="/top25/" title="CWE Top 25"><img src="/images/cwe_top_25_logo_simple.svg" width="90" border="0" alt="CWE Top 25 Most Dangerous Weaknesses" style="vertical-align:bottom"/></a></div></div>	

<div id="HeaderBar" class="noprint">
<table width="100%" border="0" cellpadding="0" cellspacing="0">  
	<tr> 
		<td width="100%" align="left" style="padding-left:10px; font-size:75%;"> 
                <a href="/" >Home</a>  &gt;  <a href="/data/index.html" >CWE List</a>  &gt;  

                CWE- Individual Dictionary Definition (4.6)                		&nbsp;
		</td>
		<td align="right" nowrap="nowrap" style="padding-right:12px">
		<!-- Begin /includes/search_cwe_id.html -->
<div class="noprint">
  <form action="/cgi-bin/jumpmenu.cgi" align="right" style="padding:0px; margin:0px">
	ID <label for="id" style="padding-right:5px">Lookup:</label>
    <input id="id" name="id" type="text" style="width:50px; font-size:80%" maxlength="10" />
	<input value="Go" style="padding: 0px; font-size:80%" type="submit">
  </form>
</div>
<!-- End /includes/search_cwe_id.html --> 
		</td>
	</tr>
</table>
</div> <!--//HeaderBar-->
<div class="yesprint">
<hr width="100%" size="1" style="clear:both" color="#000000" />
</div>

<div class="topnav">
<ul>
<li><a href="/index.html">Home</a></li>
<li>
        <div class="dropdown">
          <a href="/about/index.html"><button class="dropbtn">About</button></a>
          <div class="dropdown-content">
            <a href="/about/index.html">Overview</a>
            <a href="/about/board.html">Board</a>
            <a target="_blank" href="https://www.mail-archive.com/cwe-capec-board-list@mitre.org/">Board Discussion Archive</a>
            <a href="/about/board_archive.html">Board Meetings Archive</a>            
            <a href="/documents/glossary/index.html">Glossary</a>
            <a href="/about/history.html">History</a>             
            <a href="/about/sources.html">Sources</a>
            <a href="/about/documents.html">Documents</a>
            <a href="/about/faq.html">FAQs</a>
          </div>
        </div>
</li>
<li>
        <div class="dropdown">
          <a href="/data/index.html"><button class="dropbtn">CWE List</button></a>
          <div class="dropdown-content">
            <a href="/data/index.html">Latest Version</a>
            <a href="/data/downloads.html">Downloads</a>
            <a href="/data/reports.html">Reports</a>
            <a href="/data/pdfs.html">Visualizations</a>
            <a href="/data/archive.html">Archive</a>
          </div>
        </div>
</li>
<li>
        <div class="dropdown">
          <a href="/scoring/index.html"><button class="dropbtn">Scoring</button></a>
          <div class="dropdown-content">
            <a href="/scoring/index.html">Methodologies</a>
            <a href="/community/swa/priority.html">Prioritizing Weaknesses</a>
            <a href="/cwss/cwss_v1.0.1.html">CWSS</a>
            <a href="/cwraf/index.html">CWRAF</a>
            <a href="/top25/index.html">Top 25</a>
            <a href="/scoring/lists/2021_CWE_MIHW.html">Top Hardware</a>            
          </div>
        </div>
</li>
<li>
        <div class="dropdown">
          <a href="/documents/cwe_usage/guidance.html"><button class="dropbtn">Mapping Guidance</button></a>
          <div class="dropdown-content">
            <a href="/documents/cwe_usage/guidance.html">CVE &rarr; CWE Mapping Guidance</a>
            <a href="/documents/cwe_usage/quick_tips.html">CVE &rarr; CWE Mapping Quick Tips</a>
            <a href="/documents/cwe_usage/mapping_examples.html">CVE &rarr; CWE Mapping Examples</a>
            <a href="/documents/cwe_usage/common_terms_cheatsheet.html">Common Terms Cheatsheet</a>
          </div>
        </div>
</li>
<li>
        <div class="dropdown">
          <a href="/community/index.html"><button class="dropbtn">Community</button></a>
          <div class="dropdown-content">
            <a href="/community/index.html">Community</a>
            <a href="/community/members.html">Members</a>
            <a href="/community/citations.html">Use &amp; Citations</a>
            <a href="/research/index.html">Research</a>
            <a href="/compatible/index.html">Compatibility</a>
            <a href="/community/registration.html">Discussion List</a>
            <a target="_blank" href="https://www.mail-archive.com/cwe-research-list@mitre.org/">Discussion Archives</a>
            <a href="/community/submissions/guidelines.html">Content Submissions</a>
          </div>
        </div>
</li>
<li>
        <div class="dropdown">
          <a href="/news/index.html"><button class="dropbtn">News</button></a>
          <div class="dropdown-content">
            <a href="/news/index.html">Current News</a>
            <a href="https://twitter.com/CweCapec" target="_blank" rel="noopener noreferrer">Twitter <img src="/images/twitter_sm.png" width="14" height="14" style="position:relative; vertical-align:bottom; padding-left:3px; top:-1px" title="Twitter"></a>
            <a href="https://www.linkedin.com/showcase/cve-cwe-capec" target="_blank" rel="noopener noreferrer">LinkedIn <img src="/images/linkedin_sm.jpg" width="14" height="14" style="position:relative; vertical-align:bottom; padding-left:3px; top:-1px" title="LinkedIn"></a>
			      <a href="https://www.youtube.com/channel/UCpY9VIpRmFK4ebD6orssifA" target="_blank" rel="noopener noreferrer">YouTube <img src="/images/youtube.png" width="14" height="14" style="position:relative; vertical-align:bottom; padding-left:3px; top:-1px" alt="YouTube"></a>            
			      <a href="https://medium.com/@CWE_CAPEC" target="_blank" rel="noopener noreferrer">Medium <img src="/images/medium_sm.png" width="14" height="14" style="position:relative; vertical-align:bottom; padding-left:3px; top:-1px" alt="Medium"></a>
            <a href="/news/podcast.html">Podcast</a>             
            <a href="/news/newsletters.html">Free Newsletter</a>            
            <a href="/news/archives/index.html">News Archive</a>
        </div> 
</li>

<li style="border-color:#aaaaaa"><a href="/find/index.html">Search</a></li>
</ul>

</div>

<table width="100%" border="0" cellspacing="0" cellpadding="0" id="MainPane">
  <tr>
	<!-- begin left side menu -->
    <td valign="top" rowspan="2" id="LeftPane">
	<!--include virtual="/includes/leftsidemenu.html" Removed 11212016--> 
	<script type="text/javascript">browserheight();</script>
	</td>
	<!-- end left side menu -->
    <td style="height:1px"></td>
	<!-- begin right column -->
	<td valign="top" align="center" rowspan="2" nowrap="nowrap" id="RightPane">

                	</td>
	<!-- end right side menu -->
  </tr>
  <tr>
	<!-- begin content pane -->
    <td valign="top" width="100%" id="Contentpane">
	
	<!--Glossary tags-->
	
<div id="styled_popup" name="styled_popup" style="display:none; position:fixed; top:300; height:auto; width:300px; z-index:1000">
<table width="300" cellpadding="0" cellspacing="0" border="0" style="border:1px solid #32498D;">
<tr style="background-color:#32498D; color:#ffffff;">
<td width="100%" style="padding:1px 5px 1px 5px; border-bottom:1px solid #000000"><div width="100%" style="font-weight:bold;">CWE Glossary Definition</div></td>
<td nowrap="nowrap" style="padding:1px; border-bottom:1px solid #000000" valign="top"><a href="javascript:styledPopupClose();"><img src="/images/layout/close.gif" border="0"  alt="x"></a></td>
</tr>
<tr><td colspan="2" style="background: url(/images/layout/ylgradient.jpg); background-repeat: repeat-x repeat-y; padding:5px; background-color:#FFFFCC; " valign="top">
<div id="output" style="max-height:400px; overflow-y:auto"></div>
</td></tr>
</table>
</div>

                <script src="/includes/nav.js" language="JavaScript" type="text/javascript" /></script>
                <noscript>
                     <style>div.collapseblock { display:inline} </style>
                </noscript>
            
            <html xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" encoding="iso-8859-1">
            <!-- Copyright (c) 2006-2021, The MITRE Corporation. CWE and the CWE logo are trademarks of The MITRE Corporation. -->            <a xmlns:xhtml="http://www.w3.org/1999/xhtml" name="78"></a><div style="overflow:auto;"><h2 style="display:inline; margin:0px 0px 2px 0px; vertical-align: text-bottom">CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</h2><div style="text-align:right; margin:5px 0px 0px 5px; padding-bottom:1px; white-space:nowrap;"></div></div><div xmlns:xhtml="http://www.w3.org/1999/xhtml" id="CWEDefinition" class="Weakness"><div class="title"><div class="status"><table cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td valign="top" align="left" width="33%" nowrap><div style="font-weight:bold">Weakness ID: 78</div><span style="font-size:80%"> Abstraction: <span style="font-weight:normal">Base</span><br>Structure: <span style="font-weight:normal">Simple</span></span></td><td valign="top" align="right" nowrap><div style="font-size:80%;"><b>Status: </b><span class="Stable"><span style="font-weight:normal">Stable</span></span></div></td></tr></table></div></div>
							<div id="Filter_Menu" style="padding-bottom:10px;">
							<div style="font-size:75%; color:#000066; font-style:italic; display:inline">Presentation Filter: </div>
    <select id="SkinSelector" onchange="skinSelector();">
    <option value="basic_summary">Basic</option>
    <option value="complete" selected>Complete</option>
    <option value="high_level">High Level</option>
    <option value="mapping_friendly">Mapping-Friendly</option>
    </select> 

							</div>
						<div id="Description"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Description');"><img id="ocimg_78_Description" src="/images/head_more.gif" border="0" alt="+"></a> </span>Description</div><div name="oc_78_Description" id="oc_78_Description" class="expandblock"><div class="detail"><div class="indent">The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component. </div></div></div></div><div id="Extended_Description"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Extended_Description');"><img id="ocimg_78_Extended_Description" src="/images/head_more.gif" border="0" alt="+"></a> </span>Extended Description</div><div name="oc_78_Extended_Description" id="oc_78_Extended_Description" class="expandblock"><div class="detail"><div class="indent"><p>This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. </p><p>There are at least two subtypes of OS command injection: </p><div style="margin-left:10px;"><ol><li>The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system("nslookup [HOSTNAME]") to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. </li><li>The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use "exec([COMMAND])" to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. </li></ol></div><p>From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input. </p></div></div></div></div><div id="Alternate_Terms"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Alternate_Terms');"><img id="ocimg_78_Alternate_Terms" src="/images/head_more.gif" border="0" alt="+"></a> </span>Alternate Terms</div><div name="oc_78_Alternate_Terms" id="oc_78_Alternate_Terms" class="expandblock"><div class="detail"><div class="indent"><div id="Grouped"><table width="98%" cellpadding="0" cellspacing="0" border="0" class="Detail">
            <tr><th valign="top" nowrap>Shell injection</th><td valign="top" width="100%"></td></tr>
            <tr><th valign="top" nowrap>Shell metacharacters</th><td valign="top" width="100%"></td></tr>
         </table></div></div></div></div></div><div id="Relationships"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Relationships');"><img id="ocimg_78_Relationships" src="/images/head_more.gif" border="0" alt="+"></a> </span>Relationships</div><div name="oc_78_Relationships" id="oc_78_Relationships" class="expandblock"><div class="detail"><div class="indent"><span class="section tool"><img src="/images/dictionary.gif" alt="Section Help"><span class="tip">This table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.</span></span><div id="relevant_table"><div class="reltable"><span id="script"><a href="javascript:toggleblocksOC('78_1000_relevant_table');"><img id="ocimg_78_1000_relevant_table" src="/images/head_more.gif" border="0" alt="+"></a> </span>Relevant to the view "Research Concepts" (CWE-1000)<div name="oc_78_1000_relevant_table" id="oc_78_1000_relevant_table" class="expandblock"><div class="tabledetail"><div class="indent"><div xmlns:saxon="http://saxon.sf.net/" xmlns:xalan="http://xml.apache.org/xalan" class="tabledetail"><table width="98%" cellpadding="0" cellspacing="0" border="0" id="Detail"><tr><th valign="top" width="110px">Nature</th><th valign="top" width="40px">Type</th><th valign="top" width="50px">ID</th><th valign="top">Name</th></tr><tbody><tr class="primary Weakness"><td valign="top">ChildOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/class.gif" alt="Class" class="icon"><span class="tip">Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.</span></span></td><td valign="top">77</td><td valign="top"><a href="/data/definitions/77.html" target="_blank" rel="noopener noreferrer">Improper Neutralization of Special Elements used in a Command ('Command Injection')</a></td></tr><tr class="primary Weakness"><td valign="top">CanAlsoBe</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/base.gif" alt="Base" class="icon"><span class="tip">Base - a weakness 
that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.</span></span></td><td valign="top">88</td><td valign="top"><a href="/data/definitions/88.html" target="_blank" rel="noopener noreferrer">Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')</a></td></tr><tr class="primary Weakness"><td valign="top">CanFollow</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/base.gif" alt="Base" class="icon"><span class="tip">Base - a weakness 
that is still mostly independent of a resource or technology, but with sufficient details to provide specific methods for detection and prevention. Base level weaknesses typically describe issues in terms of 2 or 3 of the following dimensions: behavior, property, technology, language, and resource.</span></span></td><td valign="top">184</td><td valign="top"><a href="/data/definitions/184.html" target="_blank" rel="noopener noreferrer">Incomplete List of Disallowed Inputs</a></td></tr></tbody></table></div></div></div></div></div></div><span class="section tool"><img src="/images/dictionary.gif" alt="Section Help"><span class="tip">This table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.</span></span><div id="relevant_table"><div class="reltable"><span id="script"><a href="javascript:toggleblocksOC('78_699_relevant_table');"><img id="ocimg_78_699_relevant_table" src="/images/head_more.gif" border="0" alt="+"></a> </span>Relevant to the view "Software Development" (CWE-699)<div name="oc_78_699_relevant_table" id="oc_78_699_relevant_table" class="expandblock"><div class="tabledetail"><div class="indent"><div xmlns:saxon="http://saxon.sf.net/" xmlns:xalan="http://xml.apache.org/xalan" class="tabledetail"><table width="98%" cellpadding="0" cellspacing="0" border="0" id="Detail"><tr><th valign="top" width="110px">Nature</th><th valign="top" width="40px">Type</th><th valign="top" width="50px">ID</th><th valign="top">Name</th></tr><tbody><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">137</td><td valign="top"><a href="/data/definitions/137.html" target="_blank" rel="noopener noreferrer">Data Neutralization Issues</a></td></tr></tbody></table></div></div></div></div></div></div><span class="section tool"><img src="/images/dictionary.gif" alt="Section Help"><span class="tip">This table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.</span></span><div id="relevant_table"><div class="reltable"><span id="script"><a href="javascript:toggleblocksOC('78_1003_relevant_table');"><img id="ocimg_78_1003_relevant_table" src="/images/head_less.gif" border="0" alt="+"></a> </span>Relevant to the view "Weaknesses for Simplified Mapping of Published Vulnerabilities" (CWE-1003)<div name="oc_78_1003_relevant_table" id="oc_78_1003_relevant_table" class="collapseblock"><div class="tabledetail"><div class="indent"><div xmlns:saxon="http://saxon.sf.net/" xmlns:xalan="http://xml.apache.org/xalan" class="tabledetail"><table width="98%" cellpadding="0" cellspacing="0" border="0" id="Detail"><tr><th valign="top" width="110px">Nature</th><th valign="top" width="40px">Type</th><th valign="top" width="50px">ID</th><th valign="top">Name</th></tr><tbody><tr class="primary Weakness"><td valign="top">ChildOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/class.gif" alt="Class" class="icon"><span class="tip">Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.</span></span></td><td valign="top">74</td><td valign="top"><a href="/data/definitions/74.html" target="_blank" rel="noopener noreferrer">Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</a></td></tr></tbody></table></div></div></div></div></div></div><span class="section tool"><img src="/images/dictionary.gif" alt="Section Help"><span class="tip">This table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.</span></span><div id="relevant_table"><div class="reltable"><span id="script"><a href="javascript:toggleblocksOC('78_1008_relevant_table');"><img id="ocimg_78_1008_relevant_table" src="/images/head_less.gif" border="0" alt="+"></a> </span>Relevant to the view "Architectural Concepts" (CWE-1008)<div name="oc_78_1008_relevant_table" id="oc_78_1008_relevant_table" class="collapseblock"><div class="tabledetail"><div class="indent"><div xmlns:saxon="http://saxon.sf.net/" xmlns:xalan="http://xml.apache.org/xalan" class="tabledetail"><table width="98%" cellpadding="0" cellspacing="0" border="0" id="Detail"><tr><th valign="top" width="110px">Nature</th><th valign="top" width="40px">Type</th><th valign="top" width="50px">ID</th><th valign="top">Name</th></tr><tbody><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">1019</td><td valign="top"><a href="/data/definitions/1019.html" target="_blank" rel="noopener noreferrer">Validate Inputs</a></td></tr></tbody></table></div></div></div></div></div></div><span class="section tool"><img src="/images/dictionary.gif" alt="Section Help"><span class="tip">This table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.</span></span><div id="relevant_table"><div class="reltable"><span id="script"><a href="javascript:toggleblocksOC('78_1305_relevant_table');"><img id="ocimg_78_1305_relevant_table" src="/images/head_less.gif" border="0" alt="+"></a> </span>Relevant to the view "CISQ Quality Measures (2020)" (CWE-1305)<div name="oc_78_1305_relevant_table" id="oc_78_1305_relevant_table" class="collapseblock"><div class="tabledetail"><div class="indent"><div xmlns:saxon="http://saxon.sf.net/" xmlns:xalan="http://xml.apache.org/xalan" class="tabledetail"><table width="98%" cellpadding="0" cellspacing="0" border="0" id="Detail"><tr><th valign="top" width="110px">Nature</th><th valign="top" width="40px">Type</th><th valign="top" width="50px">ID</th><th valign="top">Name</th></tr><tbody><tr class="primary Weakness"><td valign="top">ChildOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/class.gif" alt="Class" class="icon"><span class="tip">Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.</span></span></td><td valign="top">77</td><td valign="top"><a href="/data/definitions/77.html" target="_blank" rel="noopener noreferrer">Improper Neutralization of Special Elements used in a Command ('Command Injection')</a></td></tr></tbody></table></div></div></div></div></div></div><span class="section tool"><img src="/images/dictionary.gif" alt="Section Help"><span class="tip">This table shows the weaknesses and high level categories that are related to this weakness. These relationships are defined as ChildOf, ParentOf, MemberOf and give insight to similar items that may exist at higher and lower levels of abstraction. In addition, relationships such as PeerOf and CanAlsoBe are defined to show similar weaknesses that the user may want to explore.</span></span><div id="relevant_table"><div class="reltable"><span id="script"><a href="javascript:toggleblocksOC('78_1340_relevant_table');"><img id="ocimg_78_1340_relevant_table" src="/images/head_less.gif" border="0" alt="+"></a> </span>Relevant to the view "CISQ Data Protection Measures" (CWE-1340)<div name="oc_78_1340_relevant_table" id="oc_78_1340_relevant_table" class="collapseblock"><div class="tabledetail"><div class="indent"><div xmlns:saxon="http://saxon.sf.net/" xmlns:xalan="http://xml.apache.org/xalan" class="tabledetail"><table width="98%" cellpadding="0" cellspacing="0" border="0" id="Detail"><tr><th valign="top" width="110px">Nature</th><th valign="top" width="40px">Type</th><th valign="top" width="50px">ID</th><th valign="top">Name</th></tr><tbody><tr class="primary Weakness"><td valign="top">ChildOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/class.gif" alt="Class" class="icon"><span class="tip">Class - a weakness that is described in a very abstract fashion, typically independent of any specific language or technology. More specific than a Pillar Weakness, but more general than a Base Weakness. Class level weaknesses typically describe issues in terms of 1 or 2 of the following dimensions: behavior, property, and resource.</span></span></td><td valign="top">77</td><td valign="top"><a href="/data/definitions/77.html" target="_blank" rel="noopener noreferrer">Improper Neutralization of Special Elements used in a Command ('Command Injection')</a></td></tr></tbody></table></div></div></div></div></div></div></div></div></div></div><div id="Modes_Of_Introduction"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Modes_Of_Introduction');"><img id="ocimg_78_Modes_Of_Introduction" src="/images/head_more.gif" border="0" alt="+"></a> </span>Modes Of Introduction</div><div name="oc_78_Modes_Of_Introduction" id="oc_78_Modes_Of_Introduction" class="expandblock"><div class="tabledetail"><div class="indent"><span class="section tool"><img src="/images/dictionary.gif" alt="Section Help"><span class="tip">The different Modes of Introduction provide information about how and when this weakness may be introduced. The Phase identifies a point in the life cycle at which introduction may occur, while the Note provides a typical scenario related to introduction during the given phase.</span></span><table width="98%" cellpadding="0" cellspacing="0" border="0" id="Detail"><tr><th valign="middle" width="110px">Phase</th><th valign="middle">Note</th></tr><tr><td valign="middle" nowrap>Architecture and Design</td><td valign="middle" width="100%"></td></tr><tr><td valign="middle" nowrap>Implementation</td><td valign="middle" width="100%">REALIZATION: This weakness is caused during implementation of an architectural security tactic. </td></tr></table></div></div></div></div><div id="Applicable_Platforms"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Applicable_Platforms');"><img id="ocimg_78_Applicable_Platforms" src="/images/head_more.gif" border="0" alt="+"></a> </span>Applicable Platforms</div><div name="oc_78_Applicable_Platforms" id="oc_78_Applicable_Platforms" class="expandblock"><div class="detail"><div class="indent"><span class="section tool"><img src="/images/dictionary.gif" alt="Section Help"><span class="tip">This listing shows possible areas for which the given weakness could appear. These may be for specific named Languages, Operating Systems, Architectures, Paradigms, Technologies, or a class of such platforms. The platform is listed along with how frequently the given weakness appears for that instance.</span></span><p class="subheading">Languages</p><div class="indent"><p> Class: Language-Independent <span class="smaller" style="font-style:italic">(Undetermined Prevalence)</span></p></div></div></div></div></div><div id="Common_Consequences"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Common_Consequences');"><img id="ocimg_78_Common_Consequences" src="/images/head_more.gif" border="0" alt="+"></a> </span>Common Consequences</div><div name="oc_78_Common_Consequences" id="oc_78_Common_Consequences" class="expandblock"><div class="tabledetail"><div class="indent"><span class="section tool"><img src="/images/dictionary.gif" alt="Section Help"><span class="tip">This table specifies different individual consequences associated with the weakness. The Scope identifies the application security area that is violated, while the Impact describes the negative technical impact that arises if an adversary succeeds in exploiting this weakness. The Likelihood provides information about how likely the specific consequence is expected to be seen relative to the other consequences in the list. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact.</span></span><table width="98%" cellpadding="0" cellspacing="0" border="0" id="Detail"><tr><th valign="middle" width="135px" nowrap>Scope</th><th valign="middle">Impact</th><th valign="middle" width="100px" nowrap>Likelihood</th></tr><tr><td valign="middle" nowrap>Confidentiality<br>Integrity<br>Availability<br>Non-Repudiation<br></td><td valign="middle" width="100%"><div style="padding-top:5px"><p class="smaller" style="font-weight:normal"><span class="subheading">Technical Impact:</span><i> Execute Unauthorized Code or Commands; DoS: Crash, Exit, or Restart; Read Files or Directories; Modify Files or Directories; Read Application Data; Modify Application Data; Hide Activities</i></p></div><div style="padding-top:5px">Attackers could execute unauthorized commands, which could then be used to disable the software, or read and modify data for which the attacker does not have permissions to access directly. Since the targeted application is directly executing the commands instead of the attacker, any malicious activities may appear to come from the application or the application's owner. </div></td><td valign="middle" nowrap></td></tr></table></div></div></div></div><div id="Likelihood_Of_Exploit"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Likelihood_Of_Exploit');"><img id="ocimg_78_Likelihood_Of_Exploit" src="/images/head_more.gif" border="0" alt="+"></a> </span>Likelihood Of Exploit</div><div name="oc_78_Likelihood_Of_Exploit" id="oc_78_Likelihood_Of_Exploit" class="expandblock"><div class="detail"><div class="indent">High</div></div></div></div><div id="Demonstrative_Examples"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Demonstrative_Examples');"><img id="ocimg_78_Demonstrative_Examples" src="/images/head_more.gif" border="0" alt="+"></a> </span>Demonstrative Examples</div><div name="oc_78_Demonstrative_Examples" id="oc_78_Demonstrative_Examples" class="expandblock"><div class="detail"><div class="indent"><p class="subheading">Example 1</p><p>This example code intends to take the name of a user and list the contents of that user's home directory. It is subject to the first variant of OS command injection.</p><div class="indent bad"><div id="ExampleCode" style="clear:both; padding-top:5px; padding-bottom:5px;"><div class="shadow"><div class="CodeHead"><div style="float:right; font-style:italic; font-size:10px; color:#98A9B7">(bad code)</div><div class="optheading smaller"><span style="font-weight:normal; font-style:italic">Example Language: </span>PHP&nbsp;</div></div><div class="top">
                  <div>$userName = $_POST["user"];<br>$command = 'ls -l /home/' . $userName;<br>system($command);</div>
               </div></div></div></div><p>The $userName variable is not checked for malicious input. An attacker could set the $userName variable to an arbitrary OS command such as:</p><div class="indent attack"><div id="ExampleCode" style="clear:both; padding-top:5px; padding-bottom:5px;"><div class="shadow"><div class="CodeHead"><div style="float:right; font-style:italic; font-size:10px; color:#98A9B7">(attack code)</div><div class="optheading smaller">&nbsp;</div></div><div class="top">
                  <div>;rm -rf /</div>
               </div></div></div></div><p>Which would result in $command being:</p><div class="indent result"><div id="ExampleCode" style="clear:both; padding-top:5px; padding-bottom:5px;"><div class="shadow"><div class="CodeHead"><div style="float:right; font-style:italic; font-size:10px; color:#98A9B7">(result)</div><div class="optheading smaller">&nbsp;</div></div><div class="top">
                  <div>ls -l /home/;rm -rf /</div>
               </div></div></div></div><p>Since the semi-colon is a command separator in Unix, the OS would first execute the ls command, then the rm command, deleting the entire file system.</p><p>Also note that this example code is vulnerable to Path Traversal (<a href="/data/definitions/22.html">CWE-22</a>) and Untrusted Search Path (<a href="/data/definitions/426.html">CWE-426</a>) attacks. </p><p class="subheading">Example 2</p><p>This example is a web application that intends to perform a DNS lookup of a user-supplied domain name. It is subject to the first variant of OS command injection.</p><div class="indent bad"><div id="ExampleCode" style="clear:both; padding-top:5px; padding-bottom:5px;"><div class="shadow"><div class="CodeHead"><div style="float:right; font-style:italic; font-size:10px; color:#98A9B7">(bad code)</div><div class="optheading smaller"><span style="font-weight:normal; font-style:italic">Example Language: </span>Perl&nbsp;</div></div><div class="top">
                  <div>use CGI qw(:standard);<br>$name = param('name');<br>$nslookup = "/path/to/nslookup";<br>print header;<br>if (open($fh, "$nslookup $name|")) {<div style="margin-left:10px;">while (&lt;$fh&gt;) {<div style="margin-left:10px;">print escapeHTML($_);<br>print "&lt;br&gt;\n";</div>}<br>close($fh);</div>}</div>
               </div></div></div></div><p>Suppose an attacker provides a domain name like this:</p><div class="indent attack"><div id="ExampleCode" style="clear:both; padding-top:5px; padding-bottom:5px;"><div class="shadow"><div class="CodeHead"><div style="float:right; font-style:italic; font-size:10px; color:#98A9B7">(attack code)</div><div class="optheading smaller">&nbsp;</div></div><div class="top">
                  <div>cwe.mitre.org%20%3B%20/bin/ls%20-l</div>
               </div></div></div></div><p>The "%3B" sequence decodes to the ";" character, and the %20 decodes to a space. The open() statement would then process a string like this:</p><div class="indent result"><div id="ExampleCode" style="clear:both; padding-top:5px; padding-bottom:5px;"><div class="shadow"><div class="CodeHead"><div style="float:right; font-style:italic; font-size:10px; color:#98A9B7">(result)</div><div class="optheading smaller">&nbsp;</div></div><div class="top">
                  <div>/path/to/nslookup cwe.mitre.org ; /bin/ls -l</div>
               </div></div></div></div><p>As a result, the attacker executes the "/bin/ls -l" command and gets a list of all the files in the program's working directory. The input could be replaced with much more dangerous commands, such as installing a malicious program on the server.</p><p class="subheading">Example 3</p><p>The example below reads the name of a shell script to execute from the system properties. It is subject to the second variant of OS command injection.</p><div class="indent bad"><div id="ExampleCode" style="clear:both; padding-top:5px; padding-bottom:5px;"><div class="shadow"><div class="CodeHead"><div style="float:right; font-style:italic; font-size:10px; color:#98A9B7">(bad code)</div><div class="optheading smaller"><span style="font-weight:normal; font-style:italic">Example Language: </span>Java&nbsp;</div></div><div class="top">
                  <div>String script = System.getProperty("SCRIPTNAME");<br>if (script != null)<div style="margin-left:10px;">System.exec(script);</div>
                  </div>
               </div></div></div></div><p>If an attacker has control over this property, then they could modify the property to point to a dangerous program.</p><p class="subheading">Example 4</p><p>In the example below, a method is used to transform geographic coordinates from latitude and longitude format to UTM format. The method gets the input coordinates from a user through a HTTP request and executes a program local to the application server that performs the transformation. The method passes the latitude and longitude coordinates as a command-line option to the external program and will perform some processing to retrieve the results of the transformation and return the resulting UTM coordinates.</p><div class="indent bad"><div id="ExampleCode" style="clear:both; padding-top:5px; padding-bottom:5px;"><div class="shadow"><div class="CodeHead"><div style="float:right; font-style:italic; font-size:10px; color:#98A9B7">(bad code)</div><div class="optheading smaller"><span style="font-weight:normal; font-style:italic">Example Language: </span>Java&nbsp;</div></div><div class="top">
                  <div>public String coordinateTransformLatLonToUTM(String coordinates)<br>{<div style="margin-left:10px;">
                        <div>String utmCoords = null;<br>try {<div style="margin-left:10px;">
                              <div>String latlonCoords = coordinates;<br>Runtime rt = Runtime.getRuntime();<br>Process exec = rt.exec("cmd.exe /C latlon2utm.exe -" + latlonCoords);<br>
                                 <i>// process results of coordinate transform</i>
                                 <br>
                                 <br>
                                 <i>// ...</i>
                                 <br>
                              </div>
                           </div>}<br>catch(Exception e) {...}<br>return utmCoords;</div>
                     </div>}</div>
               </div></div></div></div><p>However, the method does not verify that the contents of the coordinates input parameter includes only correctly-formatted latitude and longitude coordinates. If the input coordinates were not validated prior to the call to this method, a malicious user could execute another program local to the application server by appending '&amp;' followed by the command for another program to the end of the coordinate string. The '&amp;' instructs the Windows operating system to execute another program.</p><p class="subheading">Example 5</p><p>The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the rman utility and then run a cleanup.bat script to delete some temporary files. The script rmanDB.bat accepts a single command line parameter, which specifies what type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.</p><div class="indent bad"><div id="ExampleCode" style="clear:both; padding-top:5px; padding-bottom:5px;"><div class="shadow"><div class="CodeHead"><div style="float:right; font-style:italic; font-size:10px; color:#98A9B7">(bad code)</div><div class="optheading smaller"><span style="font-weight:normal; font-style:italic">Example Language: </span>Java&nbsp;</div></div><div class="top">
                  <div>...<br>String btype = request.getParameter("backuptype");<br>String cmd = new String("cmd.exe /K \"<div style="margin-left:10px;">c:\\util\\rmanDB.bat "<br>+btype+<br>"&amp;&amp;c:\\utl\\cleanup.bat\"")</div>
                     <br>System.Runtime.getRuntime().exec(cmd);<br>...</div>
               </div></div></div></div><p>The problem here is that the program does not do any validation on the backuptype parameter read from the user. Typically the Runtime.exec() function will not execute multiple commands, but in this case the program first runs the cmd.exe shell in order to run multiple commands with a single call to Runtime.exec(). Once the shell is invoked, it will happily execute multiple commands separated by two ampersands. If an attacker passes a string of the form "&amp; del c:\\dbms\\*.*", then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.</p></div></div></div></div><div id="Observed_Examples"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Observed_Examples');"><img id="ocimg_78_Observed_Examples" src="/images/head_more.gif" border="0" alt="+"></a> </span>Observed Examples</div><div name="oc_78_Observed_Examples" id="oc_78_Observed_Examples" class="expandblock"><div class="tabledetail"><div class="indent"><div style="margin-top: 10px"><table width="98%" cellpadding="0" cellspacing="0" border="0" class="Detail"><tr><th valign="top" width="165px" nowrap>Reference</th><th valign="top">Description</th></tr>
            <tr><td valign="top"><div><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0067" target="_blank" rel="noopener noreferrer">CVE-1999-0067</a></div></td><td valign="top"><div class="indent">Canonical example of OS command injection. CGI program does not neutralize "|" metacharacter when invoking a phonebook program. </div></td></tr>
            <tr><td valign="top"><div><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-1246" target="_blank" rel="noopener noreferrer">CVE-2001-1246</a></div></td><td valign="top"><div class="indent">Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (<a href="/data/definitions/78.html">CWE-78</a>) and Argument Injection (<a href="/data/definitions/88.html">CWE-88</a>) are possible. </div></td></tr>
            <tr><td valign="top"><div><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0061" target="_blank" rel="noopener noreferrer">CVE-2002-0061</a></div></td><td valign="top"><div class="indent">Web server allows command execution using "|" (pipe) character. </div></td></tr>
            <tr><td valign="top"><div><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-0041" target="_blank" rel="noopener noreferrer">CVE-2003-0041</a></div></td><td valign="top"><div class="indent">FTP client does not filter "|" from filenames returned by the server, allowing for OS command injection. </div></td></tr>
            <tr><td valign="top"><div><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-2575" target="_blank" rel="noopener noreferrer">CVE-2008-2575</a></div></td><td valign="top"><div class="indent">Shell metacharacters in a filename in a ZIP archive </div></td></tr>
            <tr><td valign="top"><div><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1898" target="_blank" rel="noopener noreferrer">CVE-2002-1898</a></div></td><td valign="top"><div class="indent">Shell metacharacters in a telnet:// link are not properly handled when the launching application processes the link. </div></td></tr>
            <tr><td valign="top"><div><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4304" target="_blank" rel="noopener noreferrer">CVE-2008-4304</a></div></td><td valign="top"><div class="indent">OS command injection through environment variable. </div></td></tr>
            <tr><td valign="top"><div><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4796" target="_blank" rel="noopener noreferrer">CVE-2008-4796</a></div></td><td valign="top"><div class="indent">OS command injection through https:// URLs </div></td></tr>
            <tr><td valign="top"><div><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3572" target="_blank" rel="noopener noreferrer">CVE-2007-3572</a></div></td><td valign="top"><div class="indent">Chain: incomplete denylist for OS command injection </div></td></tr>
            <tr><td valign="top"><div><a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1988" target="_blank" rel="noopener noreferrer">CVE-2012-1988</a></div></td><td valign="top"><div class="indent">Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters. </div></td></tr>
         </table></div></div></div></div></div><div id="Potential_Mitigations"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Potential_Mitigations');"><img id="ocimg_78_Potential_Mitigations" src="/images/head_more.gif" border="0" alt="+"></a> </span>Potential Mitigations</div><div name="oc_78_Potential_Mitigations" id="oc_78_Potential_Mitigations" class="expandblock"><div class="detail"><div class="indent"><div id="Grouped"><table width="98%" cellpadding="0" cellspacing="0" border="0" class="Detail">
            <tr><td valign="top"><p class="subheading">Phase:  Architecture and Design</p><div class="indent">If at all possible, use library calls rather than external processes to recreate the desired functionality. </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phases:  Architecture and Design; Operation</p><div class="indent"><p class="suboptheading">Strategy:  Sandbox or Jail</p></div><div class="indent"> </div><p><div class="indent">Run the code in a "jail" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software. </div></p><div class="indent"> </div><p><div class="indent">OS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations. </div></p><div class="indent"> </div><p><div class="indent">This may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise. </div></p><div class="indent"> </div><p><div class="indent">Be careful to avoid <a href="/data/definitions/243.html">CWE-243</a> and other weaknesses related to jails. </div></p><div class="indent"> </div><div class="indent"><p class="suboptheading">Effectiveness: Limited</p></div><div class="indent"><b><span class="smaller">Note: </span></b>The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed.</div></td></tr>
            <tr><td valign="top"><p class="subheading">Phase:  Architecture and Design</p><div class="indent"><p class="suboptheading">Strategy:  Attack Surface Reduction</p></div><div class="indent">For any data that will be used to generate a command to be executed, keep as much of that data out of external control as possible. For example, in web applications, this may require storing the data locally in the session's state instead of sending it out to the client in a hidden form field. </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phase:  Architecture and Design</p><div class="indent">For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid <a href="/data/definitions/602.html">CWE-602</a>. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server. </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phase:  Architecture and Design</p><div class="indent"><p class="suboptheading">Strategy:  Libraries or Frameworks</p></div><div class="indent"> </div><p><div class="indent">Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid. </div></p><div class="indent"> </div><p><div class="indent">For example, consider using the ESAPI Encoding control [<a href="#REF-45">REF-45</a>] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error. </div></p><div class="indent"> </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phase:  Implementation</p><div class="indent"><p class="suboptheading">Strategy:  Output Encoding</p></div><div class="indent">While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (<a href="/data/definitions/88.html">CWE-88</a>). </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phase:  Implementation</p><div class="indent">If the program to be executed allows arguments to be specified within an input file or from standard input, then consider using that mode to pass arguments instead of the command line. </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phase:  Architecture and Design</p><div class="indent"><p class="suboptheading">Strategy:  Parameterization</p></div><div class="indent"> </div><p><div class="indent">If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated. </div></p><div class="indent"> </div><p><div class="indent">Some languages offer multiple functions that can be used to invoke commands. Where possible, identify any function that invokes a command shell using a single string, and replace it with a function that requires individual arguments. These functions typically perform appropriate quoting and filtering of arguments. For example, in C, the system() function accepts a string that contains the entire command to be executed, whereas execl(), execve(), and others require an array of strings, one for each argument. In Windows, CreateProcess() only accepts one command at a time. In Perl, if system() is provided with an array of arguments, then it will quote each of the arguments. </div></p><div class="indent"> </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phase:  Implementation</p><div class="indent"><p class="suboptheading">Strategy:  Input Validation</p></div><div class="indent"> </div><p><div class="indent">Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. </div></p><div class="indent"> </div><p><div class="indent">When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as "red" or "blue." </div></p><div class="indent"> </div><p><div class="indent">Do not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright. </div></p><div class="indent"> </div><p><div class="indent">When constructing OS command strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping. </div></p><div class="indent"> </div><p><div class="indent">Note that proper output encoding, escaping, and quoting is the most effective solution for preventing OS command injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent OS command injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, when invoking a mail program, you might need to allow the subject field to contain otherwise-dangerous inputs like ";" and "&gt;" characters, which would need to be escaped or otherwise handled. In this case, stripping the character might reduce the risk of OS command injection, but it would produce incorrect behavior because the subject field would not be recorded as the user intended. This might seem to be a minor inconvenience, but it could be more important when the program relies on well-structured subject lines in order to pass messages to other components. </div></p><div class="indent"> </div><p><div class="indent">Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address. </div></p><div class="indent"> </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phase:  Architecture and Design</p><div class="indent"><p class="suboptheading">Strategy:  Enforcement by Conversion</p></div><div class="indent">When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs. </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phase:  Operation</p><div class="indent"><p class="suboptheading">Strategy:  Compilation or Build Hardening</p></div><div class="indent">Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see <a href="/data/definitions/183.html">CWE-183</a> and <a href="/data/definitions/184.html">CWE-184</a>). </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phase:  Operation</p><div class="indent"><p class="suboptheading">Strategy:  Environment Hardening</p></div><div class="indent">Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's "-T" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see <a href="/data/definitions/183.html">CWE-183</a> and <a href="/data/definitions/184.html">CWE-184</a>). </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phase:  Implementation</p><div class="indent"> </div><p><div class="indent">Ensure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success. </div></p><div class="indent"> </div><p><div class="indent">If errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files. </div></p><div class="indent"> </div><p><div class="indent">Avoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not. </div></p><div class="indent"> </div><p><div class="indent">In the context of OS Command Injection, error information passed back to the user might reveal whether an OS command is being executed and possibly which command is being used. </div></p><div class="indent"> </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phase:  Operation</p><div class="indent"><p class="suboptheading">Strategy:  Sandbox or Jail</p></div><div class="indent">Use runtime policy enforcement to create an allowlist of allowable commands, then prevent use of any command that does not appear in the allowlist. Technologies such as AppArmor are available to do this. </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phase:  Operation</p><div class="indent"><p class="suboptheading">Strategy:  Firewall</p></div><div class="indent">Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth. </div><div class="indent"><p class="suboptheading">Effectiveness: Moderate</p></div><div class="indent"><b><span class="smaller">Note: </span></b>An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization.</div></td></tr>
            <tr><td valign="top"><p class="subheading">Phases:  Architecture and Design; Operation</p><div class="indent"><p class="suboptheading">Strategy:  Environment Hardening</p></div><div class="indent">Run your code using the lowest privileges that are required to accomplish the necessary tasks [<a href="#REF-76">REF-76</a>]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations. </div></td></tr>
            <tr><td valign="top"><p class="subheading">Phases:  Operation; Implementation</p><div class="indent"><p class="suboptheading">Strategy:  Environment Hardening</p></div><div class="indent">When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as <a href="/data/definitions/95.html">CWE-95</a>, <a href="/data/definitions/621.html">CWE-621</a>, and similar issues. </div></td></tr>
         </table></div></div></div></div></div><div id="Detection_Methods"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Detection_Methods');"><img id="ocimg_78_Detection_Methods" src="/images/head_more.gif" border="0" alt="+"></a> </span>Detection Methods</div><div name="oc_78_Detection_Methods" id="oc_78_Detection_Methods" class="expandblock"><div class="detail"><div class="indent"><div id="Grouped"><table width="98%" cellpadding="0" cellspacing="0" border="0" class="Detail">
            <tr><td valign="top"><p class="subheading"> Automated Static Analysis</p><div class="indent"> </div><p><div class="indent">This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives. </div></p><div class="indent"> </div><p><div class="indent">Automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. </div></p><div class="indent"> </div><p><div class="indent">Automated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke OS commands, leading to false negatives - especially if the API/library code is not available for analysis. </div></p><div class="indent"> </div><div class="indent"><b><span class="smaller">Note: </span></b>This is not a perfect solution, since 100% accuracy and coverage are not feasible.</div></td></tr>
            <tr><td valign="top"><p class="subheading"> Automated Dynamic Analysis</p><div class="indent">This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results. </div><div class="indent"><p class="suboptheading">Effectiveness: Moderate</p></div></td></tr>
            <tr><td valign="top"><p class="subheading"> Manual Static Analysis</p><div class="indent">Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints. </div><div class="indent"><p class="suboptheading">Effectiveness: High</p></div></td></tr>
            <tr><td valign="top"><p class="subheading"> Automated Static Analysis - Binary or Bytecode</p><div class="indent"> </div><p><div class="indent">According to SOAR, the following detection techniques may be useful: </div></p><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><div><div class="indent">Highly cost effective: </div></div><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><ul><div class="indent"> </div><li><div class="indent">Bytecode Weakness Analysis - including disassembler + source code weakness analysis </div></li><div class="indent"> </div><li><div class="indent">Binary Weakness Analysis - including disassembler + source code weakness analysis </div></li><div class="indent"> </div></ul><div class="indent"> </div></div><div class="indent"> </div></div><div class="indent"> </div><div class="indent"><p class="suboptheading">Effectiveness: High</p></div></td></tr>
            <tr><td valign="top"><p class="subheading"> Dynamic Analysis with Automated Results Interpretation</p><div class="indent"> </div><p><div class="indent">According to SOAR, the following detection techniques may be useful: </div></p><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><div><div class="indent">Cost effective for partial coverage: </div></div><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><ul><div class="indent"> </div><li><div class="indent">Web Application Scanner </div></li><div class="indent"> </div><li><div class="indent">Web Services Scanner </div></li><div class="indent"> </div><li><div class="indent">Database Scanners </div></li><div class="indent"> </div></ul><div class="indent"> </div></div><div class="indent"> </div></div><div class="indent"> </div><div class="indent"><p class="suboptheading">Effectiveness: SOAR Partial</p></div></td></tr>
            <tr><td valign="top"><p class="subheading"> Dynamic Analysis with Manual Results Interpretation</p><div class="indent"> </div><p><div class="indent">According to SOAR, the following detection techniques may be useful: </div></p><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><div><div class="indent">Cost effective for partial coverage: </div></div><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><ul><div class="indent"> </div><li><div class="indent">Fuzz Tester </div></li><div class="indent"> </div><li><div class="indent">Framework-based Fuzzer </div></li><div class="indent"> </div></ul><div class="indent"> </div></div><div class="indent"> </div></div><div class="indent"> </div><div class="indent"><p class="suboptheading">Effectiveness: SOAR Partial</p></div></td></tr>
            <tr><td valign="top"><p class="subheading"> Manual Static Analysis - Source Code</p><div class="indent"> </div><p><div class="indent">According to SOAR, the following detection techniques may be useful: </div></p><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><div><div class="indent">Highly cost effective: </div></div><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><ul><div class="indent"> </div><li><div class="indent">Manual Source Code Review (not inspections) </div></li><div class="indent"> </div></ul><div class="indent"> </div></div><div class="indent"> </div><div><div class="indent">Cost effective for partial coverage: </div></div><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><ul><div class="indent"> </div><li><div class="indent">Focused Manual Spotcheck - Focused manual analysis of source </div></li><div class="indent"> </div></ul><div class="indent"> </div></div><div class="indent"> </div></div><div class="indent"> </div><div class="indent"><p class="suboptheading">Effectiveness: High</p></div></td></tr>
            <tr><td valign="top"><p class="subheading"> Automated Static Analysis - Source Code</p><div class="indent"> </div><p><div class="indent">According to SOAR, the following detection techniques may be useful: </div></p><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><div><div class="indent">Highly cost effective: </div></div><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><ul><div class="indent"> </div><li><div class="indent">Source code Weakness Analyzer </div></li><div class="indent"> </div><li><div class="indent">Context-configured Source Code Weakness Analyzer </div></li><div class="indent"> </div></ul><div class="indent"> </div></div><div class="indent"> </div></div><div class="indent"> </div><div class="indent"><p class="suboptheading">Effectiveness: High</p></div></td></tr>
            <tr><td valign="top"><p class="subheading"> Architecture or Design Review</p><div class="indent"> </div><p><div class="indent">According to SOAR, the following detection techniques may be useful: </div></p><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><div><div class="indent">Highly cost effective: </div></div><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><ul><div class="indent"> </div><li><div class="indent">Formal Methods / Correct-By-Construction </div></li><div class="indent"> </div></ul><div class="indent"> </div></div><div class="indent"> </div><div><div class="indent">Cost effective for partial coverage: </div></div><div class="indent"> </div><div style="margin-left:10px;"><div class="indent"> </div><ul><div class="indent"> </div><li><div class="indent">Inspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.) </div></li><div class="indent"> </div></ul><div class="indent"> </div></div><div class="indent"> </div></div><div class="indent"> </div><div class="indent"><p class="suboptheading">Effectiveness: High</p></div></td></tr>
         </table></div></div></div></div></div><div id="Functional_Areas"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Functional_Areas');"><img id="ocimg_78_Functional_Areas" src="/images/head_more.gif" border="0" alt="+"></a> </span>Functional Areas</div><div name="oc_78_Functional_Areas" id="oc_78_Functional_Areas" class="expandblock"><div class="detail"><div class="indent"><ul>
            <li>Program Invocation</li>
         </ul></div></div></div></div><div id="Affected_Resources"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Affected_Resources');"><img id="ocimg_78_Affected_Resources" src="/images/head_more.gif" border="0" alt="+"></a> </span>Affected Resources</div><div name="oc_78_Affected_Resources" id="oc_78_Affected_Resources" class="expandblock"><div class="detail"><div class="indent"><ul>
            <li>System Process</li>
         </ul></div></div></div></div><div id="Memberships"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Memberships');"><img id="ocimg_78_Memberships" src="/images/head_more.gif" border="0" alt="+"></a> </span>Memberships</div><div name="oc_78_Memberships" id="oc_78_Memberships" class="expandblock"><div class="detail"><div class="indent"><span class="section tool"><img src="/images/dictionary.gif" alt="Section Help"><span class="tip">This MemberOf Relationships table shows additional CWE Categories and Views that reference this weakness as a member. This information is often useful in understanding where a weakness fits within the context of external information sources.</span></span><div xmlns:saxon="http://saxon.sf.net/" xmlns:xalan="http://xml.apache.org/xalan" class="tabledetail" style="padding-top:10px"><table width="98%" cellpadding="0" cellspacing="0" border="0" id="Detail"><tr><th valign="top" width="110px">Nature</th><th valign="top" width="40px">Type</th><th valign="top" width="50px">ID</th><th valign="top">Name</th></tr><tbody><tr class="primary View"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/view.gif" alt="View" class="icon"><span class="tip">View - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).</span></span></td><td valign="top">635</td><td valign="top"><a href="/data/definitions/635.html" target="_blank" rel="noopener noreferrer">Weaknesses Originally Used by NVD from 2008 to 2016</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">714</td><td valign="top"><a href="/data/definitions/714.html" target="_blank" rel="noopener noreferrer">OWASP Top Ten 2007 Category A3 - Malicious File Execution</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">727</td><td valign="top"><a href="/data/definitions/727.html" target="_blank" rel="noopener noreferrer">OWASP Top Ten 2004 Category A6 - Injection Flaws</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">741</td><td valign="top"><a href="/data/definitions/741.html" target="_blank" rel="noopener noreferrer">CERT C Secure Coding Standard (2008) Chapter 8 - Characters and Strings (STR)</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">744</td><td valign="top"><a href="/data/definitions/744.html" target="_blank" rel="noopener noreferrer">CERT C Secure Coding Standard (2008) Chapter 11 - Environment (ENV)</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">751</td><td valign="top"><a href="/data/definitions/751.html" target="_blank" rel="noopener noreferrer">2009 Top 25 - Insecure Interaction Between Components</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">801</td><td valign="top"><a href="/data/definitions/801.html" target="_blank" rel="noopener noreferrer">2010 Top 25 - Insecure Interaction Between Components</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">810</td><td valign="top"><a href="/data/definitions/810.html" target="_blank" rel="noopener noreferrer">OWASP Top Ten 2010 Category A1 - Injection</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">845</td><td valign="top"><a href="/data/definitions/845.html" target="_blank" rel="noopener noreferrer">The CERT Oracle Secure Coding Standard for Java (2011) Chapter 2 - Input Validation and Data Sanitization (IDS)</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">864</td><td valign="top"><a href="/data/definitions/864.html" target="_blank" rel="noopener noreferrer">2011 Top 25 - Insecure Interaction Between Components</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">875</td><td valign="top"><a href="/data/definitions/875.html" target="_blank" rel="noopener noreferrer">CERT C++ Secure Coding Section 07 - Characters and Strings (STR)</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">878</td><td valign="top"><a href="/data/definitions/878.html" target="_blank" rel="noopener noreferrer">CERT C++ Secure Coding Section 10 - Environment (ENV)</a></td></tr><tr class="primary View"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/view.gif" alt="View" class="icon"><span class="tip">View - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).</span></span></td><td valign="top">884</td><td valign="top"><a href="/data/definitions/884.html" target="_blank" rel="noopener noreferrer">CWE Cross-section</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">929</td><td valign="top"><a href="/data/definitions/929.html" target="_blank" rel="noopener noreferrer">OWASP Top Ten 2013 Category A1 - Injection</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">990</td><td valign="top"><a href="/data/definitions/990.html" target="_blank" rel="noopener noreferrer">SFP Secondary Cluster: Tainted Input to Command</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">1027</td><td valign="top"><a href="/data/definitions/1027.html" target="_blank" rel="noopener noreferrer">OWASP Top Ten 2017 Category A1 - Injection</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">1131</td><td valign="top"><a href="/data/definitions/1131.html" target="_blank" rel="noopener noreferrer">CISQ Quality Measures (2016) - Security</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">1134</td><td valign="top"><a href="/data/definitions/1134.html" target="_blank" rel="noopener noreferrer">SEI CERT Oracle Secure Coding Standard for Java - Guidelines 00. Input Validation and Data Sanitization (IDS)</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">1165</td><td valign="top"><a href="/data/definitions/1165.html" target="_blank" rel="noopener noreferrer">SEI CERT C Coding Standard - Guidelines 10. Environment (ENV)</a></td></tr><tr class="primary View"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/view.gif" alt="View" class="icon"><span class="tip">View - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).</span></span></td><td valign="top">1200</td><td valign="top"><a href="/data/definitions/1200.html" target="_blank" rel="noopener noreferrer">Weaknesses in the 2019 CWE Top 25 Most Dangerous Software Errors</a></td></tr><tr class="primary View"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/view.gif" alt="View" class="icon"><span class="tip">View - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).</span></span></td><td valign="top">1337</td><td valign="top"><a href="/data/definitions/1337.html" target="_blank" rel="noopener noreferrer">Weaknesses in the 2021 CWE Top 25 Most Dangerous Software Weaknesses</a></td></tr><tr class="primary Category"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/category.gif" alt="Category" class="icon"><span class="tip">Category - a CWE entry that contains a set of other entries that share a common characteristic.</span></span></td><td valign="top">1347</td><td valign="top"><a href="/data/definitions/1347.html" target="_blank" rel="noopener noreferrer">OWASP Top Ten 2021 Category A03:2021 - Injection</a></td></tr><tr class="primary View"><td valign="top">MemberOf</td><td valign="top" nowrap class="right" align="center" style="padding-top:1px"><span class="tool"><img src="/images/icons/view.gif" alt="View" class="icon"><span class="tip">View - a subset of CWE entries that provides a way of examining CWE content. The two main view structures are Slices (flat lists) and Graphs (containing relationships between entries).</span></span></td><td valign="top">1350</td><td valign="top"><a href="/data/definitions/1350.html" target="_blank" rel="noopener noreferrer">Weaknesses in the 2020 CWE Top 25 Most Dangerous Software Weaknesses</a></td></tr></tbody></table></div></div></div></div></div><div id="Notes"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Notes');"><img id="ocimg_78_Notes" src="/images/head_more.gif" border="0" alt="+"></a> </span>Notes</div><div name="oc_78_Notes" id="oc_78_Notes" class="expandblock"><div class="detail"><div class="indent"><p class="subheading">Research Gap</p><div class="indent">More investigation is needed into the distinction between the OS command injection variants, including the role with argument injection (<a href="/data/definitions/88.html">CWE-88</a>). Equivalent distinctions may exist in other injection-related problems such as SQL injection. </div><p class="subheading">Terminology</p><div class="indent">The "OS command injection" phrase carries different meanings to different people. For some people, it only refers to cases in which the attacker injects command separators into arguments for an application-controlled program that is being invoked. For some people, it refers to any type of attack that can allow the attacker to execute OS commands of their own choosing. This usage could include untrusted search path weaknesses (<a href="/data/definitions/426.html">CWE-426</a>) that cause the application to find and execute an attacker-controlled program. Further complicating the issue is the case when argument injection (<a href="/data/definitions/88.html">CWE-88</a>) allows alternate command-line switches or options to be inserted into the command line, such as an "-exec" switch whose purpose may be to execute the subsequent argument as a command (this -exec switch exists in the UNIX "find" command, for example). In this latter case, however, <a href="/data/definitions/88.html">CWE-88</a> could be regarded as the primary weakness in a chain with <a href="/data/definitions/78.html">CWE-78</a>. </div></div></div></div></div><div id="Taxonomy_Mappings"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Taxonomy_Mappings');"><img id="ocimg_78_Taxonomy_Mappings" src="/images/head_more.gif" border="0" alt="+"></a> </span>Taxonomy Mappings</div><div name="oc_78_Taxonomy_Mappings" id="oc_78_Taxonomy_Mappings" class="expandblock"><div class="tabledetail"><div class="indent"><div style="margin-top: 10px"><table width="98%" cellpadding="0" cellspacing="0" border="0" class="Detail"><tr><th valign="top" nowrap width="230px">Mapped Taxonomy Name</th><th valign="top" nowrap width="100px">Node ID</th><th valign="top" nowrap>Fit</th><th valign="top">Mapped Node Name</th></tr>
            <tr><td valign="top">PLOVER</td><td valign="top"></td><td valign="top"></td><td valign="top">OS Command Injection</td></tr>
            <tr><td valign="top">OWASP Top Ten 2007</td><td valign="top">A3</td><td valign="top">CWE More Specific</td><td valign="top">Malicious File Execution</td></tr>
            <tr><td valign="top">OWASP Top Ten 2004</td><td valign="top">A6</td><td valign="top">CWE More Specific</td><td valign="top">Injection Flaws</td></tr>
            <tr><td valign="top">CERT C Secure Coding</td><td valign="top">ENV03-C</td><td valign="top"></td><td valign="top">Sanitize the environment when invoking external programs</td></tr>
            <tr><td valign="top">CERT C Secure Coding</td><td valign="top">ENV33-C</td><td valign="top">CWE More Specific</td><td valign="top">Do not call system()</td></tr>
            <tr><td valign="top">CERT C Secure Coding</td><td valign="top">STR02-C</td><td valign="top"></td><td valign="top">Sanitize data passed to complex subsystems</td></tr>
            <tr><td valign="top">WASC</td><td valign="top">31</td><td valign="top"></td><td valign="top">OS Commanding</td></tr>
            <tr><td valign="top">The CERT Oracle Secure Coding Standard for Java (2011)</td><td valign="top">IDS07-J</td><td valign="top"></td><td valign="top">Do not pass untrusted, unsanitized data to the Runtime.exec() method</td></tr>
            <tr><td valign="top">Software Fault Patterns</td><td valign="top">SFP24</td><td valign="top"></td><td valign="top">Tainted input to command</td></tr>
            <tr><td valign="top">OMG ASCSM</td><td valign="top">ASCSM-<a href="/data/definitions/78.html">CWE-78</a> </td><td valign="top"></td><td valign="top"></td></tr>
         </table></div></div></div></div></div><div id="Related_Attack_Patterns"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Related_Attack_Patterns');"><img id="ocimg_78_Related_Attack_Patterns" src="/images/head_more.gif" border="0" alt="+"></a> </span>Related Attack Patterns</div><div name="oc_78_Related_Attack_Patterns" id="oc_78_Related_Attack_Patterns" class="expandblock"><div class="tabledetail"><div class="indent"><div style="margin-top: 10px"><table width="98%" cellpadding="0" cellspacing="0" border="0" class="Detail"><tr><th valign="top" nowrap width="110px">CAPEC-ID</th><th valign="top">Attack Pattern Name</th></tr>
            <tr><td valign="top"><a href="http://capec.mitre.org/data/definitions/108.html" target="_blank" rel="noopener noreferrer">CAPEC-108</a></td><td valign="top">Command Line Execution through SQL Injection</td></tr>
            <tr><td valign="top"><a href="http://capec.mitre.org/data/definitions/15.html" target="_blank" rel="noopener noreferrer">CAPEC-15</a></td><td valign="top">Command Delimiters</td></tr>
            <tr><td valign="top"><a href="http://capec.mitre.org/data/definitions/43.html" target="_blank" rel="noopener noreferrer">CAPEC-43</a></td><td valign="top">Exploiting Multiple Input Interpretation Layers</td></tr>
            <tr><td valign="top"><a href="http://capec.mitre.org/data/definitions/6.html" target="_blank" rel="noopener noreferrer">CAPEC-6</a></td><td valign="top">Argument Injection</td></tr>
            <tr><td valign="top"><a href="http://capec.mitre.org/data/definitions/88.html" target="_blank" rel="noopener noreferrer">CAPEC-88</a></td><td valign="top">OS Command Injection</td></tr>
         </table></div></div></div></div></div><div id="References"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_References');"><img id="ocimg_78_References" src="/images/head_more.gif" border="0" alt="+"></a> </span>References</div><div name="oc_78_References" id="oc_78_References" class="expandblock"><div class="detail"><div class="indent"><div id="Grouped"><table width="98%" cellpadding="0" cellspacing="0" border="0" class="Detail">
            <tr><td valign="top"><div id="REF-140">[REF-140] Greg Hoglund and
								Gary McGraw. "Exploiting Software: How to Break Code". Addison-Wesley. 2004-02-27. 
				&lt;<a href="https://www.amazon.com/Exploiting-Software-How-Break-Code/dp/0201786958" target="_blank" rel="noopener noreferrer">https://www.amazon.com/Exploiting-Software-How-Break-Code/dp/0201786958</a>&gt;.</div></td></tr>
            <tr><td valign="top"><div id="REF-685">[REF-685] Pascal Meunier. "Meta-Character Vulnerabilities". 2008-02-20. 
				&lt;<a href="http://www.cs.purdue.edu/homes/cs390s/slides/week09.pdf" target="_blank" rel="noopener noreferrer">http://www.cs.purdue.edu/homes/cs390s/slides/week09.pdf</a>&gt;.</div></td></tr>
            <tr><td valign="top"><div id="REF-686">[REF-686] Robert Auger. "OS Commanding". 2009-06. 
				&lt;<a href="http://projects.webappsec.org/OS-Commanding" target="_blank" rel="noopener noreferrer">http://projects.webappsec.org/OS-Commanding</a>&gt;.</div></td></tr>
            <tr><td valign="top"><div id="REF-687">[REF-687] Lincoln Stein and
								John Stewart. "The World Wide Web Security FAQ". chapter: "CGI Scripts". 2002-02-04. 
				&lt;<a href="http://www.w3.org/Security/Faq/wwwsf4.html" target="_blank" rel="noopener noreferrer">http://www.w3.org/Security/Faq/wwwsf4.html</a>&gt;.</div></td></tr>
            <tr><td valign="top"><div id="REF-688">[REF-688] Jordan Dimov, Cigital. "Security Issues in Perl Scripts". &lt;<a href="http://www.cgisecurity.com/lib/sips.html" target="_blank" rel="noopener noreferrer">http://www.cgisecurity.com/lib/sips.html</a>&gt;.</div></td></tr>
            <tr><td valign="top"><div id="REF-44">[REF-44] Michael Howard, David LeBlanc
							and John Viega. "24 Deadly Sins of Software Security". "Sin 10: Command Injection." Page 171. McGraw-Hill. 2010. 
				</div></td></tr>
            <tr><td valign="top"><div id="REF-690">[REF-690] Frank Kim. "Top 25 Series - Rank 9 - OS Command Injection". SANS Software Security Institute. 2010-02-24. 
				&lt;<a href="http://blogs.sans.org/appsecstreetfighter/2010/02/24/top-25-series-rank-9-os-command-injection/" target="_blank" rel="noopener noreferrer">http://blogs.sans.org/appsecstreetfighter/2010/02/24/top-25-series-rank-9-os-command-injection/</a>&gt;.</div></td></tr>
            <tr><td valign="top"><div id="REF-45">[REF-45] OWASP. "OWASP Enterprise Security API (ESAPI) Project". &lt;<a href="http://www.owasp.org/index.php/ESAPI" target="_blank" rel="noopener noreferrer">http://www.owasp.org/index.php/ESAPI</a>&gt;.</div></td></tr>
            <tr><td valign="top"><div id="REF-76">[REF-76] Sean Barnum and
								Michael Gegick. "Least Privilege". 2005-09-14. 
				&lt;<a href="https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html" target="_blank" rel="noopener noreferrer">https://buildsecurityin.us-cert.gov/daisy/bsi/articles/knowledge/principles/351.html</a>&gt;.</div></td></tr>
            <tr><td valign="top"><div id="REF-62">[REF-62] Mark Dowd, John McDonald
							and Justin Schuh. "The Art of Software Security Assessment". Chapter 8, "Shell Metacharacters", Page 425. 1st Edition. Addison Wesley. 2006. 
				</div></td></tr>
            <tr><td valign="top"><div id="REF-962">[REF-962] Object Management Group (OMG). "Automated Source Code Security Measure (ASCSM)". ASCSM-CWE-78. 2016-01. 
				&lt;<a href="http://www.omg.org/spec/ASCSM/1.0/" target="_blank" rel="noopener noreferrer">http://www.omg.org/spec/ASCSM/1.0/</a>&gt;.</div></td></tr>
         </table></div></div></div></div></div><div id="Content_History"><div class="heading"><span id="script"><a href="javascript:toggleblocksOC('78_Content_History');"><img id="ocimg_78_Content_History" src="/images/head_more.gif" border="0" alt="+"></a> </span>Content History</div><div name="oc_78_Content_History" id="oc_78_Content_History" class="expandblock"><div class="tabledetail"><div class="indent"><div style="margin-top: 10px"><table width="98%" cellpadding="0" cellspacing="0" border="0" class="Detail"><thead class="Submissions"><tr><th valign="top" colspan="3" class="title"><span id="script"><a href="javascript:toggleblocksOC('78_Submissions');"><img id="ocimg_78_Submissions" src="/images/head_more.gif" border="0" alt="+"></a> </span>Submissions</th></tr></thead><tbody id="oc_78_Submissions" class="expandblock"><tr><th valign="top">Submission Date</th><th valign="top" nowrap>Submitter</th><th valign="top" nowrap>Organization</th></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2006-07-19</td><td valign="top">PLOVER</td><td valign="top"></td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee"></td></tr></tbody><thead class="Modifications"><tr><th valign="top" colspan="3" class="title"><span id="script"><a href="javascript:toggleblocksOC('78_Modifications');"><img id="ocimg_78_Modifications" src="/images/head_less.gif" border="0" alt="+"></a> </span>Modifications</th></tr></thead><tbody id="oc_78_Modifications" class="collapseblock"><tr><th valign="top">Modification Date</th><th valign="top" nowrap>Modifier</th><th valign="top" nowrap>Organization</th></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2008-07-01</td><td valign="top">Sean Eidemiller</td><td valign="top">Cigital</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">added/updated demonstrative examples</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2008-07-01</td><td valign="top">Eric Dalci</td><td valign="top">Cigital</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Time_of_Introduction</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2008-08-01</td><td valign="top"></td><td valign="top">KDM Analytics</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">added/updated white box definitions</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2008-08-15</td><td valign="top"></td><td valign="top">Veracode</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">Suggested OWASP Top Ten 2004 mapping</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2008-09-08</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Relationships, Other_Notes, Taxonomy_Mappings</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2008-10-14</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Description</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2008-11-24</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Observed_Examples, Relationships, Taxonomy_Mappings</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2009-01-12</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Common_Consequences, Demonstrative_Examples, Description, Likelihood_of_Exploit, Name, Observed_Examples, Other_Notes, Potential_Mitigations, Relationships, Research_Gaps, Terminology_Notes</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2009-03-10</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Potential_Mitigations</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2009-05-27</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Name, Related_Attack_Patterns</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2009-07-17</td><td valign="top">KDM Analytics</td><td valign="top"></td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">Improved the White_Box_Definition</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2009-07-27</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Description, Name, White_Box_Definitions</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2009-10-29</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Observed_Examples, References</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2009-12-28</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Detection_Factors</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2010-02-16</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Detection_Factors, Potential_Mitigations, References, Relationships, Taxonomy_Mappings</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2010-04-05</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Potential_Mitigations</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2010-06-21</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Common_Consequences, Description, Detection_Factors, Name, Observed_Examples, Potential_Mitigations, References, Relationships</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2010-09-27</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Potential_Mitigations</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2010-12-13</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Description, Potential_Mitigations</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2011-03-29</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Demonstrative_Examples, Description</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2011-06-01</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Common_Consequences, Relationships, Taxonomy_Mappings</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2011-06-27</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Relationships</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2011-09-13</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Potential_Mitigations, References, Relationships, Taxonomy_Mappings</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2012-05-11</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Demonstrative_Examples, References, Relationships, Taxonomy_Mappings</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2012-10-30</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Observed_Examples, Potential_Mitigations</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2014-02-18</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Applicable_Platforms, Demonstrative_Examples, Terminology_Notes</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2014-06-23</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Relationships</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2014-07-30</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Detection_Factors, Relationships, Taxonomy_Mappings</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2015-12-07</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Relationships</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2017-11-08</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Modes_of_Introduction, References, Relationships, Taxonomy_Mappings, White_Box_Definitions</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2018-03-27</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Relationships</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2019-01-03</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated References, Relationships, Taxonomy_Mappings</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2019-06-20</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Relationships</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2019-09-19</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Relationships</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2020-02-24</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Potential_Mitigations, Relationships</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2020-06-25</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Observed_Examples, Potential_Mitigations</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2020-08-20</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Relationships</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2020-12-10</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Potential_Mitigations, Relationships</td></tr><tr><td valign="top" nowrap rowspan="2" style="border-bottom:1px solid #BAC5E3">2021-07-20</td><td valign="top">CWE Content Team</td><td valign="top">MITRE</td></tr><tr><td valign="top" colspan="2" style="border-bottom:1px solid #BAC5E3; font-size:90%; background-color:#eeeeee">updated Observed_Examples, Relationships</td></tr></tbody><thead class="Previous_Entry_Names"><tr><th valign="top" colspan="3" class="title"><span id="script"><a href="javascript:toggleblocksOC('78_Previous_Entry_Names');"><img id="ocimg_78_Previous_Entry_Names" src="/images/head_less.gif" border="0" alt="+"></a> </span>Previous Entry Names</th></tr></thead><tbody id="oc_78_Previous_Entry_Names" class="collapseblock"><tr><th valign="top" nowrap>Change Date</th><th valign="top" nowrap colspan="3">Previous Entry Name</th></tr><tr><td valign="top" nowrap>2008-04-11</td><td valign="top" colspan="2">OS Command Injection</td></tr><tr><td style="border-bottom:1px solid #BAC5E3" colspan="3"></td></tr><tr><td valign="top" nowrap>2009-01-12</td><td valign="top" colspan="2">Failure to Sanitize Data into an OS Command (aka 'OS Command Injection')</td></tr><tr><td style="border-bottom:1px solid #BAC5E3" colspan="3"></td></tr><tr><td valign="top" nowrap>2009-05-27</td><td valign="top" colspan="2">Failure to Preserve OS Command Structure (aka 'OS Command Injection')</td></tr><tr><td style="border-bottom:1px solid #BAC5E3" colspan="3"></td></tr><tr><td valign="top" nowrap>2009-07-27</td><td valign="top" colspan="2">Failure to Preserve OS Command Structure ('OS Command Injection')</td></tr><tr><td style="border-bottom:1px solid #BAC5E3" colspan="3"></td></tr><tr><td valign="top" nowrap>2010-06-21</td><td valign="top" colspan="2">Improper Sanitization of Special Elements used in an OS Command ('OS Command Injection')</td></tr><tr><td style="border-bottom:1px solid #BAC5E3" colspan="3"></td></tr></tbody></table></div></div></div></div></div></div></html>            	<div id="More_Message">
<div style="background-color:#798795; padding:2px; color:#ffffff; font-size:95%; text-align:center" >More information is available &mdash; Please select a different filter.</div></div>

	</td>
	<!-- end content pane -->
  </tr>
</table>
<div id="FootPane" class="noprint">
  <div id="footbar">
    <b>Page Last Updated: </b>

            October 26, 2021              </div>
  <div class="Footer noprint">
    <table width="100%" cellpadding="0" cellspacing="0" border="0" class="ltgreybackground" style="clear:both">
      <tr>
        <td colspan="3" id="line"><div class="line">&nbsp;</div></td>
      </tr>
      <tr>
        <td valign="middle" nowrap="nowrap">
          <div id="footerlinks" class="footlogo">
            <a href="http://www.mitre.org" target="_blank" rel="noopener noreferrer"><img src="/images/mitre_logo.gif" height="36" border="0" alt="MITRE" title="MITRE"/></a>
          </div>
        </td>
        <td width="100%" valign="top" style="padding:6px 0px;">
          <div id="footerlinks">
            <a href="/sitemap.html">Site Map</a> | 
            <a href="/about/termsofuse.html">Terms of Use</a> | 
            <a href="/about/privacy_policy.html">Privacy Policy</a> | 
            <a href="mailto:cwe@mitre.org">Contact Us</a> | 
            <a target="_blank" href="https://twitter.com/CweCapec"><img src="/images/twitter.jpg" width="20" height="20" style="border:0;vertical-align:right;" alt="Twitter" title="Twitter"></a>
            <a target="_blank" href="https://www.linkedin.com/showcase/cve-cwe-capec"><img src="/images/linkedin_sm.jpg" width="20" height="20" style="border:0;vertical-align:right;" alt="LinkedIn" title="LinkedIn"></a>
      <a target="_blank" href="https://www.youtube.com/channel/UCpY9VIpRmFK4ebD6orssifA"><img src="/images/youtube.png" width="20" height="20" style="border:0;vertical-align:right;" alt="YouTube channel" title="YouTube"></a>  
			<a target="_blank" href="https://medium.com/@CWE_CAPEC"><img src="/images/medium.png" width="20" height="20" style="border:0;vertical-align:right;" alt="Medium blog" title="Medium"></a>   
          </div>
          <p>Use of the Common Weakness Enumeration (CWE) and the associated references from this website are subject to the <a href="/about/termsofuse.html">Terms of Use</a>. CWE is sponsored by the <a target="_blank" rel="noopener noreferrer" href="https://www.dhs.gov/">U.S. Department of Homeland Security</a> (DHS) <a target="_blank" rel="noopener noreferrer" href="https://www.dhs.gov/cisa/cybersecurity-division">Cybersecurity and Infrastructure Security Agency</a> (CISA) and managed by the <a href="https://www.dhs.gov/science-and-technology/hssedi" target="_blank" rel="noopener noreferrer">Homeland Security Systems Engineering and Development Institute</a> (HSSEDI) which is operated by <a target="_blank" rel="noopener noreferrer" href="http://www.mitre.org/">The MITRE Corporation</a> (MITRE). Copyright &copy; 2006-2021, The MITRE Corporation. CWE, CWSS, CWRAF, and the CWE logo are trademarks of The MITRE Corporation.</p>
        </td>
        <td valign="middle" nowrap="nowrap">
          <div id="footerlinks" class="footlogo">
            <a href="https://www.dhs.gov/science-and-technology/hssedi" target="_blank" rel="noopener noreferrer"><img src="/images/hssedi.png" height="36" border="0" alt="HSSEDI" title="HSSEDI"/></a>
          </div>
        </td>
      </tr>
    </table>
  </div>
</div>
<!-- Google Analytics Code -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-5164081-1");
pageTracker._trackPageview();
</script>

</body>
</html>

            
            