<!DOCTYPE html>
<html lang="en">
  <head>
    <title>98165 &ndash; (CVE-2016-9082) DoS attack based on using SVG to generate invalid pointers from a _cairo_image_surface in write_png</title>

      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<link href="data/assets/c60deb3d48830179eae269c9e65a7506.css?1462892334" rel="stylesheet" type="text/css">



    
<script type="text/javascript" src="data/assets/a7c2f3a028f17a9aa60f56dc9d6e732d.js?1462892331"></script>

    <script type="text/javascript">
    <!--
        YAHOO.namespace('bugzilla');
        YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
               if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
               var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
               return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
         };
        if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
            YAHOO.util.Event._simpleRemove(window, "unload", 
                                           YAHOO.util.Event._unload);
        }
        
        function unhide_language_selector() { 
            YAHOO.util.Dom.removeClass(
                'lang_links_container', 'bz_default_hidden'
            ); 
        } 
        YAHOO.util.Event.onDOMReady(unhide_language_selector);

        
        var BUGZILLA = {
            param: {
                cookiepath: '\/',
                maxusermatches: 1000
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    "You must enter a Description for this attachment.",
                component_required:
                    "You must select a Component for this bug.",
                description_required:
                    "You must enter a Description for this bug.",
                short_desc_required:
                    "You must enter a Summary for this bug.",
                version_required:
                    "You must select a Version for this bug."
            }
              , api_token: ''
        };

    if (history && history.replaceState) {
      if(!document.location.href.match(/show_bug\.cgi/)) {
        history.replaceState( null,
                             "98165 – (CVE-2016-9082) DoS attack based on using SVG to generate invalid pointers from a _cairo_image_surface in write_png",
                             "show_bug.cgi?id=98165" );
        document.title = "98165 – (CVE-2016-9082) DoS attack based on using SVG to generate invalid pointers from a _cairo_image_surface in write_png";
      }
      if (document.location.href.match(/show_bug\.cgi\?.*list_id=/)) {
        var href = document.location.href;
        href = href.replace(/[\?&]+list_id=(\d+|cookie)/, '');
        history.replaceState(null, "98165 – (CVE-2016-9082) DoS attack based on using SVG to generate invalid pointers from a _cairo_image_surface in write_png", href);
      }
    }
    YAHOO.util.Event.onDOMReady(function() {
      initDirtyFieldTracking();

    });
    // -->
    </script>
<script type="text/javascript" src="data/assets/daf5e0fb6826e6a35280e622913f0c4a.js?1462892334"></script>

    

    
    <link rel="search" type="application/opensearchdescription+xml"
                       title="Bugzilla" href="./search_plugin.cgi">
    <link rel="shortcut icon" href="images/favicon.ico">
  </head>

  <body 
        class="bugs-freedesktop-org
                 bz_bug
                 bz_status_RESOLVED
                 bz_product_cairo
                 bz_component_general
                 bz_bug_98165 yui-skin-sam">

  <div id="header"><div id="banner">
  </div>

    <div id="titles">
      <span id="title">Bugzilla &ndash; Bug&nbsp;98165</span>

        <span id="subtitle" class="subheader">DoS attack based on using SVG to generate invalid pointers from a _cairo_image_surface in write_png</span>

        <span id="information" class="header_addl_info">Last modified: 2019-07-20 00:47:28 UTC</span>
    </div>


    <div id="common_links"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_top" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_top");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_top" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_top"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>


</ul>
    </div>
  </div>

  <div id="bugzilla-body">


<script type="text/javascript">
<!--

//-->
</script>

<form name="changeform" id="changeform" method="post" action="process_bug.cgi">

  <input type="hidden" name="delta_ts" value="2019-07-20 00:47:28">
  <input type="hidden" name="id" value="98165">
  <input type="hidden" name="token" value="1635619170-hPlI5Vv_Ekwk4jsknHdzhAXCZl0XDKx670t1L9drTBA">
<div class="bz_short_desc_container edit_form">
     <a href="show_bug.cgi?id=98165"><b>Bug&nbsp;98165</b></a> <span id="summary_container" class="bz_default_hidden">
        (<span id="alias_nonedit_display">CVE-2016-9082</span>)
      - <span id="short_desc_nonedit_display">DoS attack based on using SVG to generate invalid pointers from a _cairo_image_surface in write_png</span>
     </span>

    <div id="summary_input"><span class="field_label "
    id="field_label_short_desc">


  <a 
      title="The bug summary is a short sentence which succinctly describes what the bug is about."
      class="field_help_link"
      href="page.cgi?id=fields.html#short_desc"
  >Summary:</a>

</span><span title="DoS attack based on using SVG to generate invalid pointers from a _cairo_image_surface in write_png">DoS attack based on using SVG to generate invalid pointers from a _cairo_imag...
        </span>
    </div>
  </div>
  <script type="text/javascript">
    hideEditableField('summary_container',
                      'summary_input',
                      'summary_edit_action',
                      'short_desc',
                      'DoS attack based on using SVG to generate invalid pointers from a _cairo_image_surface in write_png' );
  </script>
  <table class="edit_form">
    <tr>
      
      <td id="bz_show_bug_column_1" class="bz_show_bug_column">     
        <table>
          <tr>
    <th class="field_label">
      <a href="page.cgi?id=fields.html#bug_status">Status</a>:
    </th>
    <td id="bz_field_status">
      <span id="static_bug_status">RESOLVED
          MOVED
      </span>
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_alias">


  <a 
      title="A short, unique name assigned to a bug in order to assist with looking it up and referring to it in other places in Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#alias"
  >Alias:</a>

</th>
    <td>CVE-2016-9082
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_product">


  <a 
      title="Bugs are categorised into Products and Components."
      class="field_help_link"
      href="describecomponents.cgi"
  >Product:</a>

</th>
  <td class="field_value "
      id="field_container_product" >cairo

</td>
    </tr>

    
    <tr class="bz_default_hidden"><th class="field_label "
    id="field_label_classification">


  <a 
      title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation."
      class="field_help_link"
      href="page.cgi?id=fields.html#classification"
  >Classification:</a>

</th>
  <td class="field_value "
      id="field_container_classification" >Unclassified

</td>
    </tr>
        
    
    
    <tr><th class="field_label "
    id="field_label_component">


  <a 
      title="Components are second-level categories; each belongs to a particular Product. Select a Product to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi?product=cairo"
  >Component:</a>

</th>
  <td class="field_value "
      id="field_container_component" >general

  (<a href="buglist.cgi?component=general&amp;product=cairo&amp;bug_status=__open__"
      target="_blank">show other bugs</a>)
</td>
    </tr>
    <tr><th class="field_label "
    id="field_label_version">


  <a 
      title="The version field defines the version of the software the bug was found in."
      class="field_help_link"
      href="page.cgi?id=fields.html#version"
  >Version:</a>

</th>
<td>unspecified
  </td>
    </tr>
        
    
        
    <tr><th class="field_label "
    id="field_label_rep_platform">


  <a 
      title="The hardware platform the bug was observed on. Note: When searching, selecting the option &quot;All&quot; only finds bugs whose value for this field is literally the word &quot;All&quot;."
      class="field_help_link"
      href="page.cgi?id=fields.html#rep_platform"
  >Hardware:</a>

</th>
      <td class="field_value">x86-64 (AMD64)
        All
      </td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          
          <tr>
      <th class="field_label">
        <label  accesskey="i">
          <a href="page.cgi?id=fields.html#importance"><u>I</u>mportance</a></label>:
      </th>
      <td>medium
       critical
      </td>
    </tr>
          
          <tr><th class="field_label "
    id="field_label_assigned_to">


  <a 
      title="The person in charge of resolving the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#assigned_to"
  >Assignee:</a>

</th>
      <td><span class="vcard"><span class="fn">Chris Wilson</span>
</span>
      </td>
    </tr>

    <tr><th class="field_label "
    id="field_label_qa_contact">


  <a 
      title="The person responsible for confirming this bug if it is unconfirmed, and for verifying the fix once the bug has been resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#qa_contact"
  >QA Contact:</a>

</th>
      <td><span class="vcard"><span class="fn">cairo-bugs mailing list</span>
</span>
      </td>
    </tr>
    <script type="text/javascript">
      assignToDefaultOnChange(['product', 'component'],
        'chris\x40chris-wilson.co.uk',
        'cairo-bugs\x40cairographics.org');
    </script>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          <tr><th class="field_label "
    id="field_label_bug_file_loc">


  <a 
      title="Bugs can have a URL associated with them - for example, a pointer to a web site where the problem is seen."
      class="field_help_link"
      href="page.cgi?id=fields.html#bug_file_loc"
  >URL:</a>

</th>
    <td>
      <span id="bz_url_input_area">
      </span>
    </td>
  </tr>

    <tr><th class="field_label "
    id="field_label_status_whiteboard">


  <a 
      title="Each bug has a free-form single line text entry box for adding tags and status information."
      class="field_help_link"
      href="page.cgi?id=fields.html#status_whiteboard"
  >Whiteboard:</a>

</th><td>  
  </td>
    </tr>

    <tr><th class="field_label "
    id="field_label_keywords">


  <a 
      title="You can add keywords from a defined list to bugs, in order to easily identify and group them."
      class="field_help_link"
      href="describekeywords.cgi"
  >Keywords:</a>

</th>
  <td class="field_value "
      id="field_container_keywords" >

</td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>

          
<tr><th class="field_label "
    id="field_label_dependson">


  <a 
      title="The bugs listed here must be resolved before this bug can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#dependson"
  >Depends on:</a>

</th>

  <td>
    <span id="dependson_input_area">
    </span>

  </td>
  </tr>
  
  <tr><th class="field_label "
    id="field_label_blocked">


  <a 
      title="This bug must be resolved before the bugs listed in this field can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#blocked"
  >Blocks:</a>

</th>

  <td>
    <span id="blocked_input_area">
    </span>

  </td>
  </tr>
          
        </table>
      </td>
      <td>
        <div class="bz_column_spacer">&nbsp;</div>
      </td>
      
      <td id="bz_show_bug_column_2" class="bz_show_bug_column">
        <table>
        <tr>
    <th class="field_label">
      Reported:
    </th>
    <td>2016-10-08 17:16 UTC by <span class="vcard"><span class="fn">John Bowler</span>
</span>
    </td>
  </tr>
  
  <tr>
    <th class="field_label">
      Modified:
    </th>
    <td>2019-07-20 00:47 UTC
      (<a href="show_activity.cgi?id=98165">History</a>)
    </td>
  
  </tr>
<tr>
      <th class="field_label">
        <label  accesskey="a">
          CC List:
        </label>
      </th>
      <td>1 
          user
          <span id="cc_edit_area_showhide_container" class="bz_default_hidden">
            (<a href="#" id="cc_edit_area_showhide">show</a>)
          </span>
        <div id="cc_edit_area">
          <br>
            <select id="cc" multiple="multiple" size="5" >
                <option value="vcunat">vcunat</option>
            </select>
        </div>
          <script type="text/javascript">
            hideEditableField( 'cc_edit_area_showhide_container', 
                               'cc_edit_area', 
                               'cc_edit_area_showhide', 
                               '', 
                               '');  
          </script>
      </td>
    </tr>

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_see_also">


  <a 
      title="This allows you to refer to bugs in other installations. You can enter a URL to a bug in the 'Add Bug URLs' field to note that that bug is related to this one. You can enter multiple URLs at once by separating them with whitespace. You should normally use this field to refer to bugs in other installations. For bugs in this installation, it is better to use the Depends on and Blocks fields."
      class="field_help_link"
      href="page.cgi?id=fields.html#see_also"
  >See Also:</a>

</th>
  <td class="field_value "
      id="field_container_see_also" >

</td>
    </tr> 
<tr>
      <th class="field_label  bz_hidden_field"
    id="field_label_cf_i915_platform">


  <a 
      title="Intel platforms affected by the bug"
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_i915_platform"
  >i915 platform:</a>

</th>
  <td class="field_value  bz_hidden_field"
      id="field_container_cf_i915_platform" >

</td>
    </tr>
    <tr>
      <th class="field_label  bz_hidden_field"
    id="field_label_cf_i915_features">


  <a 
      title="Features of the i915 driver affected by the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_i915_features"
  >i915 features:</a>

</th>
  <td class="field_value  bz_hidden_field"
      id="field_container_cf_i915_features" >

</td>
    </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>



        </table>
      </td>
    </tr>
    <tr>
      <td colspan="3">
          <hr id="bz_top_half_spacer">
      </td>
    </tr>
  </table>

  <table id="bz_big_form_parts">
  <tr>
  <td>

    
<script type="text/javascript">
<!--
function toggle_display(link) {
    var table = document.getElementById("attachment_table");
    var view_all = document.getElementById("view_all");
    var hide_obsolete_url_parameter = "&hide_obsolete=1";
    // Store current height for scrolling later
    var originalHeight = table.offsetHeight;
    var rows = YAHOO.util.Dom.getElementsByClassName(
        'bz_tr_obsolete', 'tr', table);

    for (var i = 0; i < rows.length; i++) {
        bz_toggleClass(rows[i], 'bz_default_hidden');
    }

    if (YAHOO.util.Dom.hasClass(rows[0], 'bz_default_hidden')) {
        link.innerHTML = "Show Obsolete";
        view_all.href = view_all.href + hide_obsolete_url_parameter 
    }
    else {
        link.innerHTML = "Hide Obsolete";
        view_all.href = view_all.href.replace(hide_obsolete_url_parameter,"");
    }

    var newHeight = table.offsetHeight;
    // This scrolling makes the window appear to not move at all.
    window.scrollBy(0, newHeight - originalHeight);

    return false;
}
//-->
</script>

<br>
<table id="attachment_table">
  <tr id="a0">
    <th colspan="2" class="left">
      Attachments
    </th>
  </tr>


      <tr id="a1" class="bz_contenttype_text_plain bz_patch bz_tr_obsolete bz_default_hidden">
        <td>
            <a href="attachment.cgi?id=127211"
               title="View the content of the attachment">
          <b><span class="bz_obsolete">fix integer overflow</span></b></a>

          <span class="bz_attach_extra_info">
              (1.08 KB,
                patch)

            <br>
            <a href="#attach_127211"
               title="Go to the comment associated with the attachment">2016-10-11 12:38 UTC</a>,

            <span class="vcard"><span class="fn">Adrian Johnson</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=127211&amp;action=edit">Details</a>&#x0020; |
    <a href="https://bugs.freedesktop.org/page.cgi?id=splinter.html&amp;bug=98165&amp;attachment=127211">
      Splinter Review</a>
        </td>
      </tr>
      <tr id="a2" class="bz_contenttype_text_plain bz_patch">
        <td>
            <a href="attachment.cgi?id=127421"
               title="View the content of the attachment">
          <b>prevent invalid ptr access</b></a>

          <span class="bz_attach_extra_info">
              (3.78 KB,
                patch)

            <br>
            <a href="#attach_127421"
               title="Go to the comment associated with the attachment">2016-10-20 11:06 UTC</a>,

            <span class="vcard"><span class="fn">Adrian Johnson</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=127421&amp;action=edit">Details</a>&#x0020; |
    <a href="https://bugs.freedesktop.org/page.cgi?id=splinter.html&amp;bug=98165&amp;attachment=127421">
      Splinter Review</a>
        </td>
      </tr>

  <tr class="bz_attach_footer">
    <td colspan="2">
        <span class="bz_attach_view_hide">
            <a href="#a0" onclick="return toggle_display(this);">Show
              Obsolete</a> (1)
            <a id="view_all" href="attachment.cgi?bugid=98165&amp;action=viewall&amp;hide_obsolete=1">View All</a>
        </span>
    </td>
  </tr>
</table>
<br>
  </td>
  <td>
  </td>
  </tr></table>

  
  <div id="comments"><script src="js/comments.js?1462891770" type="text/javascript">
</script>

<script type="text/javascript">
<!--
  /* Adds the reply text to the 'comment' textarea */
  function replyToComment(id, real_id, name) {
      var prefix = "(In reply to " + name + " from comment #" + id + ")\n";
      var replytext = "";
        /* pre id="comment_name_N" */
        var text_elem = document.getElementById('comment_text_'+id);
        var text = getText(text_elem);
        replytext = prefix + wrapReplyText(text);


      /* <textarea id="comment"> */
      var textarea = document.getElementById('comment');
      if (textarea.value != replytext) {
          textarea.value += replytext;
      }

      textarea.focus();
  } 
//-->
</script>


<!-- This auto-sizes the comments and positions the collapse/expand links 
     to the right. -->
<table class="bz_comment_table">
<tr>
<td>
<div id="c0" class="bz_comment bz_first_comment">

      <div class="bz_first_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=98165#c0">Description</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">John Bowler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-10-08 17:16:15 UTC
        </span>

      </div>




<pre class="bz_comment_text">This is in cairo-1.14.6

This has already been reported on oss-security, although there is no analysis there and as yet there is no CVE:

<a href="http://www.openwall.com/lists/oss-security/2016/10/06/1">http://www.openwall.com/lists/oss-security/2016/10/06/1</a>

The repro uses:

rsvg-convert -o crash.png crash.svg

The crash happens because write_png passes invalid (off by 4GByte) pointers to libpng.  The bug is in the declaration of _cairo_image_surface which obviously won't work on a machine with a 64-bit address space and 32-bit (int) values.

The crash is 'just' a read from the invalid pointer inside libpng, however there is at least one other case of the loop in read_png where the crash would be a memory overwrite with data from the PNG; that version has been semi-fixed.

I'm not posting a detailed analysis because I'm not sure how many places the bug is exposed and it is pretty clear given the fact that the loop in read_png is different that you already know about one instance of this bug.

The libpng maintainer has a copy of my complete analysis and the original SVG, I suggest not posting it at the moment because it took me about 4 minutes to find the problem given the SVG.

I also suspect it isn't specific to SVG; I assume the read_png change came from test jockeys hitting Cairo with various obvious PNG files, they tend to not test SVG anywhere near as much.

The fix is to change 'stride' in the surface to (size_t), and preferably width/height to (uint32_t) and depth to (unsigned).  Doing that will reveal all cases of the bug given a sufficiently high warning level.</pre>
    </div>

    <div id="c1" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=98165#c1">Comment 1</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">John Bowler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-10-11 07:30:52 UTC
        </span>

      </div>




<pre class="bz_comment_text">This bug is also reported here:

<a href="https://bugzilla.redhat.com/show_bug.cgi?id=1382656">https://bugzilla.redhat.com/show_bug.cgi?id=1382656</a>

The referenced bug:

<a href="http://seclists.org/oss-sec/2016/q4/44">http://seclists.org/oss-sec/2016/q4/44</a>

isn't up to date but is, unfortunately, publicly readable.</pre>
    </div>

    <div id="c2" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=98165#c2">Comment 2</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Adrian Johnson</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-10-11 12:38:11 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class="bz_obsolete"><a href="attachment.cgi?id=127211" name="attach_127211" title="fix integer overflow">attachment 127211</a> <a href="attachment.cgi?id=127211&amp;action=edit" title="fix integer overflow">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=98165&amp;attachment=127211'>[review]</a>
fix integer overflow</pre>
    </div>

    <div id="c3" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=98165#c3">Comment 3</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">John Bowler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-10-11 16:43:50 UTC
        </span>

      </div>




<pre class="bz_comment_text">Well, yes, stride should be (size_t), but there may be other instances of this.

If you change the type of stride in the struct to (unsigned int), from (int) and run with the correct compiler warning options it will warn about:

    (int) * (unsigned int)

because the (int) gets converted silently to (unsigned int).  GCC probably ignores this by default, but the -Wconversion stuff is meant to detect it.  Coverity certainly can.

Doing the above temporarily will tell you if any other code in libcairo does this.  It doesn't catch all the potential problems; for example read_png already has 'i' as (unsigned int) and does (IRC):

    i * stride

That still overflows on a 64-bit system, it just requires a bigger SVG and it is a 'safe' overflow because all the pointers are still inside the image buffer.

This is why I suggested changing the struct member; it is difficult to detect potential 32-bit overflow.  I don't think even Coverity warns about 32-bit arithmetic being used inside a 64-bit address calculation and it is extremely common and normally safe.

The other approach you could use is to check when the cairo surface is created to make sure it doesn't require more than a 31, or 32-bit sized buffer.  However there are some devices out there which can exceed a 4GByte image; think of a 72&quot; poster printer running at 1200dpi.  That has 86400 dots (bytes) per row so a 42&quot; high printout would exceed the limit.</pre>
    </div>

    <div id="c4" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=98165#c4">Comment 4</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Adrian Johnson</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-10-13 11:36:08 UTC
        </span>

      </div>




<pre class="bz_comment_text">I don't like the idea of making stride unsigned. Maybe ptrdiff_t would be a better type for stride.</pre>
    </div>

    <div id="c5" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=98165#c5">Comment 5</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">John Bowler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-10-13 14:54:46 UTC
        </span>

      </div>




<pre class="bz_comment_text">If cairo does support bottom-up surfaces, as are typically used in engineering analysis (where 'z' comes out of the page) then that is the correct solution.  Indeed, the change made to write_png (the cast to (size_t)) does not work because the surface is not made inside cairo-png.c (as in read_png).

Internally libpng uses ptrdiff_t because the libpng &quot;simplified API&quot; accepts an image buffer with a negative stride; stride is 31-bit signed in the API but the local variables initialized using it are ptrdiff_t.

With hindsight it would have been better to use ptrdiff_t in the API, but the CVEs only started rolling in after the API had been in use for a while.</pre>
    </div>

    <div id="c6" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=98165#c6">Comment 6</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Adrian Johnson</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-10-20 11:06:45 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=127421" name="attach_127421" title="prevent invalid ptr access">attachment 127421</a> <a href="attachment.cgi?id=127421&amp;action=edit" title="prevent invalid ptr access">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=98165&amp;attachment=127421'>[review]</a>
prevent invalid ptr access</pre>
    </div>

    <div id="c7" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=98165#c7">Comment 7</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Seth Arnold</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-11-10 00:35:26 UTC
        </span>

      </div>




<pre class="bz_comment_text">Is this patch sufficient? There's more cases of 'int stride', including e.g.:

static cairo_surface_t *
_cairo_boilerplate_image_create_similar (cairo_surface_t *other,
                                         cairo_content_t content,
                                         int width, int height)
{
    cairo_format_t format;
    cairo_surface_t *surface;
    int stride;
    void *ptr;

    switch (content) {
    case CAIRO_CONTENT_ALPHA:
        format = CAIRO_FORMAT_A8;
        break;
    case CAIRO_CONTENT_COLOR:
        format = CAIRO_FORMAT_RGB24;
        break;
    case CAIRO_CONTENT_COLOR_ALPHA:
    default:
        format = CAIRO_FORMAT_ARGB32;
        break;
    }
    
    stride = cairo_format_stride_for_width(format, width);
    ptr = malloc (stride* height);

    surface = cairo_image_surface_create_for_data (ptr, format,
                                                   width, height, stride);
    cairo_surface_set_user_data (surface, &amp;key, ptr, free);

    return surface;
}   

I know the malloc (stride * height) looks unsafe, but I think cairo_format_stride_for_width() will return -1 in cases that might cause the stride*height parameter to overflow, which causes the malloc() to fail, and the subsequent functions fail 'safely' in that case.

In any event, this code looks fairly closely tied to stride being an 'int' rather than ptrdiff_t.


Here's another example:

static cairo_status_t
_cairo_image_spans_and_zero (void *abstract_renderer,
                             int y, int height,
                             const cairo_half_open_span_t *spans,
                             unsigned num_spans)
{
    cairo_image_span_renderer_t *r = abstract_renderer;
    uint8_t *mask;
    int len;

    mask = r-&gt;u.mask.data;
    if (y &gt; r-&gt;u.mask.extents.y) {
        len = (y - r-&gt;u.mask.extents.y) * r-&gt;u.mask.stride;
        memset (mask, 0, len);
        mask += len;
    }


The u.mask.stride would be a ptrdiff_t after this patch, but 'len' is still only an 'int'.

Any advice appreciated.

Thanks</pre>
    </div>

    <div id="c8" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=98165#c8">Comment 8</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">John Bowler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-11-10 01:33:33 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Seth Arnold from <a href="show_bug.cgi?id=98165#c7">comment #7</a>)
<span class="quote">&gt;     stride = cairo_format_stride_for_width(format, width);</span >

I think that function should return a ptrdiff_t.  If it does so the compiler will start issuing warnings on 64-bit builds where the result is truncated to 32 bits, as in the above assignment.

I believe that in general it is ok for 'width' and 'height' to be (int), assuming you don't support 16-bit systems, but any multiplication has to be done with care:

<span class="quote">&gt;     ptr = malloc (stride* height);</span >

That strikes me as bogus.  Images with rows as long as 2^31 bytes are rare; pretty much limited to people trying to break libpng!  However images with 2^31 or more bytes in total can happen and it is perfectly possible on a modern desktop/laptop/tablet to end up with one in memory.  (Maybe it's a little dumb, but it is possible.)

In any case if cairo_format_stride_for_width uses (-1) as an error return (I'm not that was what you are saying) the callers need to check for it.

<span class="quote">&gt;     surface = cairo_image_surface_create_for_data (ptr, format,
&gt;                                                    width, height, stride);</span >

The last (stride) parameter should have type ptrdiff_t.  I think the point I was trying to make before is that if the change is done in the struct and places that use the 'stride' member it will force a lot of other changes (int to ptrdiff_t) but a GNU 64-bit compiler with -Wall -Wextra should show the vast majority of the issues.

<span class="quote">&gt; Here's another example:
&gt; 
&gt; static cairo_status_t
&gt; _cairo_image_spans_and_zero (void *abstract_renderer,
&gt;                              int y, int height,
&gt;                              const cairo_half_open_span_t *spans,
&gt;                              unsigned num_spans)
&gt; {
&gt;     cairo_image_span_renderer_t *r = abstract_renderer;
&gt;     uint8_t *mask;
&gt;     int len;
&gt; 
&gt;     mask = r-&gt;u.mask.data;
&gt;     if (y &gt; r-&gt;u.mask.extents.y) {
&gt;         len = (y - r-&gt;u.mask.extents.y) * r-&gt;u.mask.stride;
&gt;         memset (mask, 0, len);
&gt;         mask += len;
&gt;     }
&gt; 
&gt; 
&gt; The u.mask.stride would be a ptrdiff_t after this patch, but 'len' is still
&gt; only an 'int'.</span >

Right; that should result in a compiler warning for the assignment to 'len', so then the next step is to change 'len' to ptrdiff_t.  Fixing the warnings forces the change through to all the required places.  The only way to stop the warning without fixing the problem is to use an explicit cast; a static_cast in C++ terms.  casts are evil ;-)</pre>
    </div>

    <div id="c9" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=98165#c9">Comment 9</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard">zhouzhen1
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2017-01-05 14:49:28 UTC
        </span>

      </div>




<pre class="bz_comment_text">It's been a while since this thread was last updated. Is there any plan to fix this and make a new release?</pre>
    </div>

    <div id="c10" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=98165#c10">Comment 10</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Bryce Harrington</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2017-11-08 01:09:59 UTC
        </span>

      </div>




<pre class="bz_comment_text">Yes agreed, this fix looks ok, and this is already being carried by Debian Sid.  Carrying this in the devel tree seems like the next logical step, and if no issues arise from the extra testing and review, it looks suitable for landing in 1.14 stable too.

Landed:
To ssh://git.freedesktop.org/git/cairo
   35fccff..38fbe62  master -&gt; master

Given the feedback in comments 7 &amp; 8 I'm going to leave this report open for now as reminder to investigate further, although it might be worthwhile to break those out as a separate bug report or two so this one can be closed.</pre>
    </div>

    <div id="c11" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=98165#c11">Comment 11</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">GitLab Migration User</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2018-08-25 13:35:06 UTC
        </span>

      </div>




<pre class="bz_comment_text">-- GitLab Migration Automatic Message --

This bug has been migrated to freedesktop.org's GitLab instance and has been closed from further activity.

You can subscribe and participate further through the new bug through this link to our GitLab instance: <a href="https://gitlab.freedesktop.org/cairo/cairo/issues/81">https://gitlab.freedesktop.org/cairo/cairo/issues/81</a>.</pre>
    </div>

    <div id="c12" class="bz_comment bz_default_collapsed">

      <div class="bz_comment_head">
          <span class="bz_comment_actions">
            <script type="text/javascript">
              addCollapseLink(12, 1, 'Toggle comment display');
            </script>
          </span>


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=98165#c12">Comment 12</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">emadyassen1998&#64;yahoo.com (Spammer; Account disabled)</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2019-07-20 00:47:28 UTC
        </span>

          <span id="cr12" class="bz_comment_collapse_reason"
             title="emadyassen1998&#64;yahoo.com (Spammer; Account disabled) [2019-07-20 00:47:28 UTC]">
            Comment hidden (spam)
          </span>
      </div>




<pre class="bz_comment_text collapsed"
    id="comment_text_12">great post.
<a href="http://www.winmilliongame.com">http://www.winmilliongame.com</a>
<a href="http://www.gtagame100.com">http://www.gtagame100.com</a>
<a href="http://www.subway-game.com">http://www.subway-game.com</a>
<a href="http://www.zumagame100.com">http://www.zumagame100.com</a></pre>
    </div>


  

</td>
<td>
</td>
</tr></table>
  </div>

</form>

<hr>
<ul class="related_actions">
    <li><a href="show_bug.cgi?format=multiple&amp;id=98165">Format For Printing</a></li>
    
    <li>&nbsp;-&nbsp;<a href="#">Top of page </a></li>
    </ul>

<br>
</div>

    <div id="footer">
      <div class="intro"></div>
<ul id="useful-links">
  <li id="links-actions"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_bottom" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_bottom" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_bottom"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>


</ul>
  </li>

  




  
</ul>

      <div class="outro"></div>
    </div>
<p align="center">
  Use of freedesktop.org services, including Bugzilla, is subject to our <a href="https://www.freedesktop.org/wiki/CodeOfConduct/">Code of Conduct</a>. How we collect and use information is described in our <a href="https://www.freedesktop.org/wiki/PrivacyPolicy">Privacy Policy</a>.
</p>
  </body>
</html>