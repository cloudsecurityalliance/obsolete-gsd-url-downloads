<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>[Tech Story] Codoforum 4.8.7: Critical Code Vulnerabilities Explained - Announcements - SonarSource Community</title>
    <meta name="description" content="In the SonarSource R&amp;amp;D team we are equally driven by studying and understanding real-world vulnerabilities, then by helping the open-source community secure their projects. This recently led us to uncover and report mult&amp;hellip;">
    <meta name="generator" content="Discourse 2.8.0.beta7 - https://github.com/discourse/discourse version 436edbb51a15c634e65c0d7cdccdb4ce9aecd8f1">
<link rel="icon" type="image/png" href="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/1X/ff44d3420ff75b165450e91f11d2166da2c43528_2_32x32.png">
<link rel="apple-touch-icon" type="image/png" href="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/1X/ff44d3420ff75b165450e91f11d2166da2c43528_2_180x180.png">
<meta name="theme-color" content="#ffffff">
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, user-scalable=yes, viewport-fit=cover">
<link rel="canonical" href="https://community.sonarsource.com/t/tech-story-codoforum-4-8-7-critical-code-vulnerabilities-explained/28297" />
<script type="application/ld+json">{"@context":"http://schema.org","@type":"WebSite","url":"https://community.sonarsource.com","potentialAction":{"@type":"SearchAction","target":"https://community.sonarsource.com/search?q={search_term_string}","query-input":"required name=search_term_string"}}</script>
<link rel="search" type="application/opensearchdescription+xml" href="https://community.sonarsource.com/opensearch.xml" title="SonarSource Community Search">

      <link href="https://sea1.discourse-cdn.com/sonarsource/stylesheets/desktop_ae8ba362a1a3544030f0a1a8b1d8003cb7b4e6f5.css?__ws=community.sonarsource.com" media="all" rel="stylesheet" data-target="desktop"  />
      <link href="https://sea1.discourse-cdn.com/sonarsource/stylesheets/desktop_theme_4_5b39782676586f5e07dfb6a4e91c89dcea989e12.css?__ws=community.sonarsource.com" media="all" rel="stylesheet" data-target="desktop_theme" data-theme-id="4" data-theme-name="discourse-tag-sidebars"/>
<link href="https://sea1.discourse-cdn.com/sonarsource/stylesheets/desktop_theme_2_d53ffb271c7fe0f5c1bc6f2bce4d958671b321a3.css?__ws=community.sonarsource.com" media="all" rel="stylesheet" data-target="desktop_theme" data-theme-id="2" data-theme-name="default"/>
    
    <meta id="data-ga-universal-analytics" data-tracking-code="UA-1880045-17" data-json="{&quot;cookieDomain&quot;:&quot;auto&quot;}" data-auto-link-domains="">

  <link rel="preload" href="https://aws1.discourse-cdn.com/sonarsource/assets/google-universal-analytics-v3-706f1d28f0a97f67a47515c96189277240ec4940d968955042066d7873fd1fe8.gz.js" as="script">
<script src="https://aws1.discourse-cdn.com/sonarsource/assets/google-universal-analytics-v3-706f1d28f0a97f67a47515c96189277240ec4940d968955042066d7873fd1fe8.gz.js"></script>


        <link rel="alternate" type="application/rss+xml" title="RSS feed of &#39;[Tech Story] Codoforum 4.8.7: Critical Code Vulnerabilities Explained&#39;" href="https://community.sonarsource.com/t/tech-story-codoforum-4-8-7-critical-code-vulnerabilities-explained/28297.rss" />
    <meta property="og:site_name" content="SonarSource Community" />
<meta property="og:type" content="website" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:image" content="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/b/b0a81d62a5622257e9d4e092a7cd3e9feabdf6f1.png" />
<meta property="og:image" content="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/b/b0a81d62a5622257e9d4e092a7cd3e9feabdf6f1.png" />
<meta property="og:url" content="https://community.sonarsource.com/t/tech-story-codoforum-4-8-7-critical-code-vulnerabilities-explained/28297" />
<meta name="twitter:url" content="https://community.sonarsource.com/t/tech-story-codoforum-4-8-7-critical-code-vulnerabilities-explained/28297" />
<meta property="og:title" content="[Tech Story] Codoforum 4.8.7: Critical Code Vulnerabilities Explained" />
<meta name="twitter:title" content="[Tech Story] Codoforum 4.8.7: Critical Code Vulnerabilities Explained" />
<meta property="og:description" content="In the SonarSource R&amp;D team we are equally driven by studying and understanding real-world vulnerabilities, then by helping the open-source community secure their projects. This recently led us to uncover and report multiple security vulnerabilities in Codoforum, an open source forum software developed in PHP. The vulnerabilities enable different attack vectors for a complete take over of any Codoforum board with version &lt;4.9 and are rated as critical. No prior knowledge or privileges are requir..." />
<meta name="twitter:description" content="In the SonarSource R&amp;D team we are equally driven by studying and understanding real-world vulnerabilities, then by helping the open-source community secure their projects. This recently led us to uncover and report multiple security vulnerabilities in Codoforum, an open source forum software developed in PHP. The vulnerabilities enable different attack vectors for a complete take over of any Codoforum board with version &lt;4.9 and are rated as critical. No prior knowledge or privileges are requir..." />
<meta name="twitter:label1" value="Reading time" />
<meta name="twitter:data1" value="4 mins 🕑" />
<meta name="twitter:label2" value="Likes" />
<meta name="twitter:data2" value="9 ❤" />
<meta property="article:published_time" content="2020-07-17T13:59:08+00:00" />
<meta property="og:ignore_canonical" content="true" />


    <script type="application/ld+json">{"@context":"http://schema.org","@type":"QAPage","name":"[Tech Story] Codoforum 4.8.7: Critical Code Vulnerabilities Explained","mainEntity":{"@type":"Question","name":"[Tech Story] Codoforum 4.8.7: Critical Code Vulnerabilities Explained","text":"In the SonarSource R&amp;D team we are equally driven by studying and understanding real-world vulnerabilities, then by helping the open-source community secure their projects. This recently led us to uncover and report multiple security vulnerabilities in Codoforum, an open source forum software develo&hellip;","upvoteCount":9,"answerCount":0,"dateCreated":"2020-07-17T13:59:08.214Z","author":{"@type":"Person","name":"Dennis Brinkrolf"}}}</script>
  </head>
  <body class="crawler">
    


<script src="https://sea1.discourse-cdn.com/sonarsource/theme-javascripts/bc007180b95ee0e1fec54c128e39f8d823c609bb.js?__ws=community.sonarsource.com"></script>
    <header>
      <a href="/">
          <img src="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/1X/a8aed7efb19660a9f1689591fae48cdc563dc195.png" alt="SonarSource Community" id="site-logo" style="max-width: 150px;">
      </a>
    </header>
    <div id="main-outlet" class="wrap">
        <div id="topic-title">
    <h1>
      <a href="/t/tech-story-codoforum-4-8-7-critical-code-vulnerabilities-explained/28297">[Tech Story] Codoforum 4.8.7: Critical Code Vulnerabilities Explained</a>
    </h1>

      <div class="topic-category" itemscope itemtype="http://schema.org/BreadcrumbList">
          <span itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
            <a href="https://community.sonarsource.com/c/announce/20" class="badge-wrapper bullet" itemprop="item">
              <span class='badge-category-bg' style='background-color: #808281'></span>
              <span class='badge-category clear-badge'>
                <span class='category-name' itemprop='name'>SonarSource Updates</span>
              </span>
            </a>
            <meta itemprop="position" content="1" />
          </span>
          <span itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
            <a href="https://community.sonarsource.com/c/announce/announcements/21" class="badge-wrapper bullet" itemprop="item">
              <span class='badge-category-bg' style='background-color: #DF323A'></span>
              <span class='badge-category clear-badge'>
                <span class='category-name' itemprop='name'>Announcements</span>
              </span>
            </a>
            <meta itemprop="position" content="2" />
          </span>
      </div>

      <div class="topic-category">
        <div class='discourse-tags list-tags'>
            <a href='https://community.sonarsource.com/tag/php' class='discourse-tag' rel="tag">php</a>, 
            <a href='https://community.sonarsource.com/tag/security' class='discourse-tag' rel="tag">security</a>
        </div>
      </div>
  </div>

  


      <div itemscope itemtype='http://schema.org/DiscussionForumPosting' class='topic-body crawler-post'>
        <div class='crawler-post-meta'>
          <div itemprop='publisher' itemscope itemtype="http://schema.org/Organization">
            <meta itemprop='name' content='SonarSource SA'>
              <div itemprop='logo' itemscope itemtype="http://schema.org/ImageObject">
                <meta itemprop='url' content='https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/1X/a8aed7efb19660a9f1689591fae48cdc563dc195.png'>
              </div>
          </div>
          <span class="creator" itemprop="author" itemscope itemtype="http://schema.org/Person">
            <a itemprop="url" href='https://community.sonarsource.com/u/SmashIts'><span itemprop='name'>SmashIts</span></a>
            (Dennis Brinkrolf)
          </span>

          <link itemprop="mainEntityOfPage" href="https://community.sonarsource.com/t/tech-story-codoforum-4-8-7-critical-code-vulnerabilities-explained/28297">

            <link itemprop="image" href="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/b/b0a81d62a5622257e9d4e092a7cd3e9feabdf6f1.png">

          <span class="crawler-post-infos">
              <time itemprop='datePublished' datetime='2020-07-17T13:59:08Z' class='post-time'>
                July 17, 2020,  1:59pm
              </time>
              <meta itemprop='dateModified' content='2021-08-12T18:15:16Z'>
          <span itemprop='position'>#1</span>
          </span>
        </div>
        <div class='post' itemprop='articleBody'>
          <p>In the SonarSource R&amp;D team we are equally driven by studying and understanding real-world vulnerabilities, then by helping the open-source community secure their projects. This recently led us to uncover and report multiple security vulnerabilities in Codoforum, an open source forum software developed in PHP. The vulnerabilities enable different attack vectors for a complete take over of any Codoforum board with version &lt;4.9 and are rated as critical. No prior knowledge or privileges are required by a remote attacker. We reported all issues responsibly to the affected vendor who released a security patch immediately.</p>
<p>In this tech story we analyze the technical root cause of three vulnerabilities, what security measures were found and bypassed, and how to correctly prevent these in your code. We will look at the vulnerabilities from an attacker’s perspective and demonstrate how various exploitation techniques are used in an attack to sharpen your defender’s mindset.</p>
<h1>
<a name="sql-injection-cve-2020-13873-1" class="anchor" href="#sql-injection-cve-2020-13873-1"></a>SQL Injection (CVE-2020-13873)</h1>
<p>We found two SQL Injection vulnerabilities and one of these can be exploited as an unauthenticated forum user to extract data from the database. These allow an attacker to fully compromise an administrator account by retrieving a password reset token. Once an administrator account is accessed, the attacker can gain Remote Code Execution on the targeted web server and compromise the system’s host and data.</p>
<p>For demonstration purposes we’ve created a short video that shows the most critical SQL injection vulnerability and its impact.</p>
<p><a href="https://www.youtube.com/watch?v=PNjDkhfuGBo">Codoforum 4.8.7: SQL Injection (CVE-2020-13873)</a></p>
<h2>
<a name="technical-analysis-2" class="anchor" href="#technical-analysis-2"></a>Technical Analysis</h2>
<p>The vulnerability hides in the API call for fetching forum posts. Its code is defined in file routes.php. Here, a dispatch function maps a route to a function that processes certain URL parameters. As shown in line 165, a topic ID <code>$tid (:tid)</code> is processed from the route that can be modified by a malicious user.</p>
<p>This route has neither CSRF protection nor a permission check and can be accessed from any visitor without authentication. The user input <code>$tid</code> is then passed to the <code>get_topic_info()</code> function without any sanitization.</p>
<p><strong>routes.php</strong></p>
<pre><code class="lang-auto">
165 function dispatch_get('Ajax/topic/:tid/:from/get_posts', function ($tid, $from) {
⋮
168    $topic = new \CODOF\Forum\Topic(\DB::getPDO());
169    $topic_info = $topic-&gt;get_topic_info($tid);
179 }
</code></pre>
<p>In the <code>get_topic_info()</code> function, the user controlled variable <code>$tid</code> is concatenated directly into a SQL query in line 462 which is executed in line 464. This is a textbook SQL injection that allows an attacker to malform the SQL query in order to access other SQL tables and columns than intended. Erroneously, the developer assumed that the parameter <code>$tid</code> is an integer before it is included into the query as we can see from the comment in line 461.</p>
<p><strong>sys/CODOF/Forum/Topic.php</strong></p>
<pre><code class="lang-auto">458 public function get_topic_info($tid) {
⋮
461    // $tid is converted to integer so its safe
462    $qry = "SELECT t.redirect_to,t.topic_id,t.post_id, t.no_posts, t.no_views,t.uid," . "t.title, c.cat_name,t.post_id, c.cat_alias, c.cat_id," . "t.topic_created, t.topic_updated, t.topic_status " . "FROM codo_topics AS t " . "INNER JOIN codo_categories AS c ON c.cat_id=t.cat_id " . "WHERE t.topic_id=$tid AND t.topic_status&lt;&gt;0 LIMIT 1 OFFSET 0";
463
464    $res = $this-&gt;db-&gt;query($qry);
⋮
</code></pre>
<p>Although the SQL injection is easily triggered via the get_posts route, the challenge for an attacker is that there is no access to the SQL query’s result (blind SQL injection). Worst-case, an attacker would need to extract data character by character by using timing techniques. However, there is the possibility to extract the result via an uncaught PDOException because error reporting is enabled by default in Codoforum. This requires less HTTP requests and the data can be extracted in chunks.</p>
<p>The MySQL function <code>extractvalue()</code> can be abused during a SQL injection attack for this purpose. It constructs an XPath query and checks for correct syntax. When we define a faulty XPath that includes information that we want to read, e.g. the MySQL version number, then this is leaked as part of the error message.</p>
<p><strong><code>EXTRACTVALUE(RAND(),CONCAT(0x3a,(SELECT VERSION() LIMIT 0,1))</code></strong></p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/b/b0a81d62a5622257e9d4e092a7cd3e9feabdf6f1.png" data-download-href="/uploads/short-url/pcMdA60LniSjpQFm73jeRMVidDb.png?dl=1" title="sqli"><img src="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/2X/b/b0a81d62a5622257e9d4e092a7cd3e9feabdf6f1_2_690x264.png" alt="sqli" data-base62-sha1="pcMdA60LniSjpQFm73jeRMVidDb" width="690" height="264" srcset="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/2X/b/b0a81d62a5622257e9d4e092a7cd3e9feabdf6f1_2_690x264.png, https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/b/b0a81d62a5622257e9d4e092a7cd3e9feabdf6f1.png 1.5x, https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/b/b0a81d62a5622257e9d4e092a7cd3e9feabdf6f1.png 2x" data-small-upload="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/2X/b/b0a81d62a5622257e9d4e092a7cd3e9feabdf6f1_2_10x10.png"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">sqli</span><span class="informations">943×362 67.8 KB</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>With the help of this error-based technique, an attacker can extract data from the database quickly and efficiently. For example, the attacker could extract all passwords from the users table. This is very inefficient though because Codoforum stores only the hashes of all passwords using the bcrypt algorithm. The attacker would need to make the effort of cracking these hashes in order to login.</p>
<p>There is a more clever way. By requesting a password reset for a user, for example the forum’s administrator, a password reset token is generated and stored in the database. Although the attacker does not have access to the admin’s email to receive this token, he can now abuse the SQL injection to extract that token directly from the database. As a result, the attacker can reset the admin’s password with that token and then login as administrator. From here, the attacker can abuse administrator features to compromise the server as we will see in Part 3.</p>
<h2>
<a name="patch-3" class="anchor" href="#patch-3"></a>Patch</h2>
<p>By using prepared statements or an integer typecast it is prevented that an attacker can inject arbitrary SQL syntax and mix user input with the SQL query. This way, the attacker cannot modify the SQL query to its advantage anymore.</p>
<p><strong>sys/CODOF/Forum/Topic.php</strong></p>
<pre><code class="lang-auto">458 public function get_topic_info($tid) {
⋮
461    $tid = (int)$tid;
462    $qry = "SELECT t.redirect_to,t.topic_id,t.post_id, t.no_posts, t.no_views,t.uid," . "t.title, c.cat_name,t.post_id, c.cat_alias, c.cat_id," . "t.topic_created, t.topic_updated, t.topic_status " . "FROM codo_topics AS t " . "INNER JOIN codo_categories AS c ON c.cat_id=t.cat_id " . "WHERE t.topic_id=$tid AND t.topic_status&lt;&gt;0 LIMIT 1 OFFSET 0";
463
464    $res = $this-&gt;db-&gt;query($qry);
⋮
</code></pre>
<p>But there were alternative ways for an attacker to compromise the Codoforum board software.</p>
<h1>
<a name="path-traversal-cve-2020-13874-4" class="anchor" href="#path-traversal-cve-2020-13874-4"></a>Path Traversal (CVE-2020-13874)</h1>
<p>The second vulnerability type found was a Path Traversal that allows an unauthenticated attacker to download arbitrary files from the server, such as sensitive configuration files. Although the developers tried to prevent this vulnerability with input sanitization, the filter could be bypassed. Let’s have a look at the details.<br>
<div class="lightbox-wrapper"><a class="lightbox" href="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/2/28a727cf2cd8ef9fea8fcd826fcc168b9fd48a23.png" data-download-href="/uploads/short-url/5NDe7NDng1iHgTQorMD1hnue37l.png?dl=1" title="fd_codo"><img src="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/2X/2/28a727cf2cd8ef9fea8fcd826fcc168b9fd48a23_2_690x304.png" alt="fd_codo" data-base62-sha1="5NDe7NDng1iHgTQorMD1hnue37l" width="690" height="304" srcset="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/2X/2/28a727cf2cd8ef9fea8fcd826fcc168b9fd48a23_2_690x304.png, https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/2/28a727cf2cd8ef9fea8fcd826fcc168b9fd48a23.png 1.5x, https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/2/28a727cf2cd8ef9fea8fcd826fcc168b9fd48a23.png 2x" data-small-upload="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/2X/2/28a727cf2cd8ef9fea8fcd826fcc168b9fd48a23_2_10x10.png"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">fd_codo</span><span class="informations">930×410 75.6 KB</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<h2>
<a name="technical-details-5" class="anchor" href="#technical-details-5"></a>Technical Details</h2>
<p>The vulnerability resides in the file attachment feature of the forum. Via the route <code>serve/attachment</code> the <code>attachment()</code> function is called as shown in the code below. Here, in line 64, it calls the constructor <code>Serve()</code>. Note that there are several routes that lead to the vulnerable <code>Serve()</code> function and this route can be used as an unauthenticated user.</p>
<p><strong>routes.php</strong></p>
<pre><code class="lang-auto">
62 dispatch_get('serve/attachment', function () {
63
64    $serve = new \Controller\Serve();
65    $serve-&gt;attachment();
66 });
</code></pre>
<p>We now inspect what happens in this <code>serve()</code> function. In line 37, a user controlled input <code>$_GET['path']</code> is retrieved and sanitized. It is concatenated with other strings and then used as a file path in line 42 to open a file that is offered for download. The whole security is based on the <code>sanitize()</code> function in line 37 which is supposed to prevent a path traversal attack.</p>
<p><strong>sys/Controller/Serve.php</strong></p>
<pre><code class="lang-auto">35 private function serve($path) {
36
37    $name = $this-&gt;sanitize($_GET['path']);
38    $dir = DATA_PATH . $path;
39
40    $path = $this-&gt;setBasicheaders($name, $dir);
41    header('Content-Disposition: attachment; filename="' . $this-&gt;getRealFileName($name) . '"');
42    @readfile($path);
43    exit;
44 }
</code></pre>
<p>The following code listing shows the sanitization approach. In line 123, the characters <code>..</code> are removed and then the url encoded representation %2e%2e is also removed in the next line.</p>
<p><strong>sys/Controller/Serve.php</strong></p>
<pre><code class="lang-auto">121 private function sanitize($name) {
122
123    $name = str_replace("..", "", $name);
124    $name = str_replace("%2e%2e", "", $name);
125
126    return $name;
127 }
</code></pre>
<p>The problem is that the PHP function <code>str_replace()</code> does <strong>not</strong> replace the string recursively and is only processed once from left to right. This means that if the variable <code>$name</code> contains something like <code>/.%2e%2e./</code> the sanitization is insufficient.</p>
<div class="md-table">
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Before</td>
<td>After</td>
<td>Line</td>
</tr>
<tr>
<td>/.%2e%2e./</td>
<td>/.%2e%2e./</td>
<td>123</td>
</tr>
<tr>
<td>/.%2e%2e./</td>
<td>/…/</td>
<td>124</td>
</tr>
</tbody>
</table>
</div><p>Thus a path traversal attack is possible and an unauthenticated attacker can read arbitrary files from the server by traversing in the file system and accessing sensitive files (…/…/…/other/path/file). This can lead to a full takeover of certain servers hosted with Codoforum.</p>
<p>The faulty sanitization can be fixed by first using <code>urldecode()</code> and then using <code>str_replace("..")</code> or by removing the second replacement altogether.</p>
<h1>
<a name="persistent-cross-site-scripting-cve-2020-13876-6" class="anchor" href="#persistent-cross-site-scripting-cve-2020-13876-6"></a>Persistent Cross-Site Scripting (CVE-2020-13876)</h1>
<p>Last but not least, we uncovered Persistent XSS vulnerability in Codoforum. It enables a low privileged, malicious user to inject a JavaScript payload into the admin backend. When an admin then visits an infected user profile, the XSS payload is executed and the attacker can perform any action as authenticated admin, including the execution of arbitrary code on the targeted web server.</p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/8/84b9d2a9557883f90816b1c01bb4e4debf782c2c.png" data-download-href="/uploads/short-url/iW99hTX0tJGruvx2nUagCWn9Bhi.png?dl=1" title="xss_codo"><img src="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/2X/8/84b9d2a9557883f90816b1c01bb4e4debf782c2c_2_690x385.png" alt="xss_codo" data-base62-sha1="iW99hTX0tJGruvx2nUagCWn9Bhi" width="690" height="385" srcset="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/2X/8/84b9d2a9557883f90816b1c01bb4e4debf782c2c_2_690x385.png, https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/2X/8/84b9d2a9557883f90816b1c01bb4e4debf782c2c_2_1035x577.png 1.5x, https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/8/84b9d2a9557883f90816b1c01bb4e4debf782c2c.png 2x" data-small-upload="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/2X/8/84b9d2a9557883f90816b1c01bb4e4debf782c2c_2_10x10.png"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">xss_codo</span><span class="informations">1098×613 23.8 KB</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>Let’s have a look at how this works. When registering a new user, we can specify an e-mail address which is then reflected in the admin backend. In the following code snippet, in line 679, the registration process is initialized.</p>
<p><strong>routes.php</strong></p>
<pre><code class="lang-auto">675  dispatch_post('/user/register', function () {
676   
677     if (Request::valid($_POST['token'])) {
678         $user = new \Controller\user();
679         $user-&gt;register(true);
680  
681         CODOF\Smarty\Layout::load($user-&gt;view, $user-&gt;css_files, $user-&gt;js_files);
682     }
683  });
</code></pre>
<p>The following code shows the simplified <code>register()</code> function. Here, in line 3, the user input <code>$_REQUEST['mail']</code> is retrieved and checked with other information in line 4. If there is no error, such as an invalid or already existing email address, the user will be registered.</p>
<p><strong>sys/Controller/user.php</strong></p>
<pre><code class="lang-auto">1 public function register($do) {
⋮
3    $register-&gt;mail = $_REQUEST['mail'];
4    $errors = $register-&gt;get_errors();
5
6    if (empty($errors)) {
7       //register user
8    }
⋮
</code></pre>
<p>For this purpose, the user controlled <code>$mail</code> variable is checked with the PHP built-in function <code>filter_var()</code> and its filter option <code>FILTER_VADLIDATE_EMAIL</code> in line 108. If <code>$mail</code> is a valid email and does not exist, the registration will work without problems (see above).</p>
<p>According to the PHP documentation, the <code>FILTER_VADLIDATE_EMAIL</code> generally validates the email address against the syntax defined in <em>RFC 822</em>. Hence, malicious HTML characters that can be used to construct a JavaScript payload can be used within an email address. Something like <code>"&gt;&lt;script&gt;alert(1)&lt;/script&gt;x@foo.com</code> is valid and will not be rejected by the filter.</p>
<p><strong>sys/CODOF/Constraints/User.php</strong></p>
<pre><code class="lang-auto">105 public function mail($mail) {
106
107    $errors = array();
108    if (!filter_var($mail, FILTER_VALIDATE_EMAIL)) {
109       $errors[] = _t("email address not formatted correctly");
110    }
111
112    if (\CODOF\User\User::mailExists($mail)) {
113       $errors[] = _t("email address is already registered");
114    }
115
116    $this-&gt;errors = array_merge($errors, $this-&gt;errors);
⋮
</code></pre>
<p><strong>admin/layout/templates/users/edit.tpl</strong></p>
<pre><code class="lang-auto">50 Email:&lt;br&gt;
51 &lt;input type="text" name="email" value="{$user.mail}" class="form-control" placeholder="" required /&gt;
52 &lt;br/&gt;
</code></pre>
<p>Since CODOFORUM uses the PHP template engine smarty, the escape modifier of smarty can be used as a patch by replacing line 51 with the following content:</p>
<pre><code class="lang-auto">51 &lt;input type="text" name="email" value="{$user.mail|escape:'html'}" class="form-control" placeholder="" required /&gt;
</code></pre>
<p>If an admin looks at the user profile to edit (block/delete) our registered user, the XSS payload is rendered in the admin’s web browser and we can perform any action as admin on the page. For example, administrator features can be abused to upload a PHP shell and to execute arbitrary code on the server. A <a href="https://portswigger.net/daily-swig/codoforum-software-patched-against-stored-xss-vulnerability">similar XSS issue</a> was found earlier that affected the user name.</p>
<p>As a result, an attacker can smuggle an XSS payload within the email address of a new user, which is reflected unfiltered in the HTML response of the admin backend.</p>
<h1>
<a name="timeline-7" class="anchor" href="#timeline-7"></a>Timeline</h1>
<div class="md-table">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Date</td>
<td>What</td>
</tr>
<tr>
<td>07.02.2020</td>
<td>First contact with vendor</td>
</tr>
<tr>
<td>08.02.2020</td>
<td>Response of vendor</td>
</tr>
<tr>
<td>10.02.2020</td>
<td>Vulnerability details sent</td>
</tr>
<tr>
<td>15.03.2020</td>
<td>Fix with version 4.9 released</td>
</tr>
</tbody>
</table>
</div><h1>
<a name="summary-8" class="anchor" href="#summary-8"></a>Summary</h1>
<p>In this story we analyzed three different security vulnerabilities in Codoforum, a popular board software. Each of these issues could lead to a complete takeover of the application. We’ve learned that a malicious user can take multiple paths when attacking an application and that finding only one single vulnerability is enough to fully compromise its security. Hence it is our task to make our applications as robust and secure as possible. Checking all user inputs properly and leveraging existing and proven sanitization and validation mechanisms is the first step towards a solid defense.<br>
Due to the severity of the issues we’ve postponed the release of our story since the release of a fix in March. If you are hosting a Codoforum and didn’t update your installation yet, we highly recommend to do so now. Thanks to the Codoforum team, a patch version was quickly released after our reports.</p>
        </div>

        <meta itemprop='headline' content='[Tech Story] Codoforum 4.8.7: Critical Code Vulnerabilities Explained'>
          <meta itemprop='keywords' content='php, security'>

        <div itemprop="interactionStatistic" itemscope itemtype="http://schema.org/InteractionCounter">
           <meta itemprop="interactionType" content="http://schema.org/LikeAction"/>
           <meta itemprop="userInteractionCount" content="9" />
           <span class='post-likes'>9 Likes</span>
         </div>

         <div itemprop="interactionStatistic" itemscope itemtype="http://schema.org/InteractionCounter">
            <meta itemprop="interactionType" content="http://schema.org/CommentAction"/>
            <meta itemprop="userInteractionCount" content="0" />
          </div>

      </div>






    </div>
    <footer class="container wrap">
      <nav class='crawler-nav'>
        <ul>
        <li itemscope itemtype='http://schema.org/SiteNavigationElement'>
          <span itemprop='name'>
            <a href='/' itemprop="url">Home </a>
          </span>
        </li>
        <li itemscope itemtype='http://schema.org/SiteNavigationElement'>
          <span itemprop='name'>
            <a href='/categories' itemprop="url">Categories </a>
          </span>
        </li>
        <li itemscope itemtype='http://schema.org/SiteNavigationElement'>
          <span itemprop='name'>
            <a href='/guidelines' itemprop="url">FAQ/Guidelines </a>
          </span>
        </li>
        <li itemscope itemtype='http://schema.org/SiteNavigationElement'>
          <span itemprop='name'>
            <a href='/tos' itemprop="url">Terms of Service </a>
          </span>
        </li>
        <li itemscope itemtype='http://schema.org/SiteNavigationElement'>
          <span itemprop='name'>
            <a href='/privacy' itemprop="url">Privacy Policy </a>
          </span>
        </li>
        </ul>
      </nav>
      <p class='powered-by-link'>Powered by <a href="https://www.discourse.org">Discourse</a>, best viewed with JavaScript enabled</p>
    </footer>
    
    
  </body>
  
</html>
