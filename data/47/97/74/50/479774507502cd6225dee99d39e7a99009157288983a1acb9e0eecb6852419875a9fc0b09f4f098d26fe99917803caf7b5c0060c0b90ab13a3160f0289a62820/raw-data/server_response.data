<!doctype html>
<!--[if lt IE 7 ]> <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7 ]>    <html class="no-js lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8 ]>    <html class="no-js lt-ie9" lang="en"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
    <meta charset="UTF-8">
    <title>Fuzzing Math - miscalculations in OpenSSL's BN_mod_exp (CVE-2015-3193) | The Fuzzing Project</title>
    <meta name="generator" content="Serendipity v.2.3.5">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="robots" content="index,follow">
    <link rel="canonical" href="https://blog.fuzzing-project.org/31-Fuzzing-Math-miscalculations-in-OpenSSLs-BN_mod_exp-CVE-2015-3193.html">
    <link rel="stylesheet" href="https://blog.fuzzing-project.org/serendipity.css?v=">
    <script src="/templates/2k11/js/modernizr-2.7.1.min.js"></script>
    <link rel="alternate" type="application/rss+xml" title="The Fuzzing Project RSS feed" href="https://blog.fuzzing-project.org/feeds/index.rss2">
    <link rel="alternate" type="application/x.atom+xml"  title="The Fuzzing Project Atom feed"  href="https://blog.fuzzing-project.org/feeds/atom.xml">
    <link rel="trackback" type="application/x-www-form-urlencoded" href="https://blog.fuzzing-project.org/comment.php?type=trackback&amp;entry_id=31">
    <link rel="pingback" href="https://blog.fuzzing-project.org/comment.php?type=pingback&amp;entry_id=31">
    <script src="/templates/jquery.js"></script>
    <script>jQuery.noConflict();</script>

    <script src="https://blog.fuzzing-project.org/serendipity.js?v="></script>
</head>
<body>
<a class="visuallyhidden" href="#content"><span lang="en">Skip to content</span></a>
<div id="page" class="clearfix">
    <header id="banner" class="clearfix col2r">
        <div id="identity">
            <a href="https://blog.fuzzing-project.org/">
                <h1>The Fuzzing Project</h1>
                <p>Blog and Advisories</p>            </a>
        </div>

        <form id="searchform" action="/index.php" method="get">
        <div>
            <input type="hidden" name="serendipity[action]" value="search">
            <label for="serendipityQuickSearchTermField">Quicksearch</label>
            <input id="serendipityQuickSearchTermField" name="serendipity[searchTerm]" type="search" placeholder="Search term(s)" value="">
            <input id="searchsend" name="serendipity[searchButton]" type="submit" value="Go!">
        </div>
        </form>
        
            </header>
        <nav id="primary-nav">
        <h2 class="visuallyhidden">Navigation</h2>

        <ul class="clearfix"><li><a href="https://fuzzing-project.org/">Back to main page</a></li><li><a href="https://fuzzing-project.org/software.html">Software list</a></li></ul>
    </nav>
        <div class="clearfix col2r">
        <main id="content"  class="plain-images">
        
            <article id="post_31" class="clearfix serendipity_entry">
        <header class="clearfix">
            <h2><a href="/31-Fuzzing-Math-miscalculations-in-OpenSSLs-BN_mod_exp-CVE-2015-3193.html">Fuzzing Math - miscalculations in OpenSSL's BN_mod_exp (CVE-2015-3193)</a></h2>

            <span class="serendipity_byline block_level"><span class="single_user">Posted by <a href="https://blog.fuzzing-project.org/authors/1-Hanno-Boeck">Hanno BÃ¶ck</a> on </span><time datetime="2015-12-03T23:47:00+01:00">Thursday, December  3. 2015</time></span>
        </header>

        <div class="clearfix content serendipity_entry_body">
                Today <a href="https://openssl.org/news/secadv/20151203.txt">OpenSSL released a security advisory</a> and updates for a carry propagation bug that I discovered in the BN_mod_exp() function. The bug is in the 1.0.2 branch of OpenSSL and is fixed in 1.0.2e. It only affects the x86_64 assembly optimizations. Other architectures and older versions are not affected.<br />
<br />
The bug was introduced in commit <a href="https://github.com/openssl/openssl/commit/72a158703bf2b33f4eba6920302941560f7a848d">this commit</a> and fixed in <a href="https://github.com/openssl/openssl/commit/29851264f11ccc70c6c0140d7e3d8d93ef5c9b11">this one</a>. It got <a href="https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0860">CVE-2015-0860</a> assigned. A simple <a href="https://github.com/hannob/bignum-fuzz/blob/master/CVE-2015-3193-openssl-vs-gcrypt-modexp.c">proof of concept test can be found here</a>.<br />
<br />
<b>Fuzzing Bignum libraries</b><br />
<br />
This is not the first time a miscalculation bug was found in the bignum library of OpenSSL. In January OpenSSL already had to fix a <a href="https://www.openssl.org/news/secadv/20150108.txt">bug in the squaring function BN_sqr()</a>. Back then I already asked myself if it would be worthwhile to use fuzzing to find such bugs. The BN_sqr() bug was special that it only occurred on very rare occasions. Only one out of 2^128 inputs would produce a wrong result. That effectively means random testing will never find such a bug. However american fuzzy lop has shown to be surprisingly successful in finding hard to find bugs. In a <a href="https://www.youtube.com/watch?v=PqW8-MUu09c">talk given at the Black Hat conference</a> Ralph-Philipp Weinmann showed that with a very simple test tool he was able to re-find the BN_sqr() bug in OpenSSL with american fuzzy lop.<br />
<br />
Finding bugs we already know may give interesting insights, but what we really want to do is to find new bugs. I tried various strategies to fuzz bignum libraries. There are two basic options to do so:<br />
<br />
1. Do a calculation with one bignum library and check it for consistencies. This depends on the calculation you do. An example would be a division function. If you divide a by b, store the result in r and the remainder in s then r*b+s must be a again. In case of the BN_sqr() bug a possibility is simply to compare the result of the squaring with a multiplication of a number by itself. They should produce the same result.<br />
2. Do differential testing with two different implementations. You simply take two different bignum libraries, do the same operation and compare the results.<br />
<br />
One small challenge is how you structure the input data. When you have a single input value it is easy: Just take the whole file and interpret it as a number. But for most functions you will have different input values. What I did was that I simply took the first two bytes and used them to decide how to split the rest of the file in pieces. To compare the results I used a simple assert call. In case an assert failure happens american fuzzy lop will detect that.<br />
<br />
The BN_mod_exp() bug was found by comparing libgcrypt with OpenSSL. Unfortunately I have been sloppy with archiving my code and I lost the exact code that I used to fuzz the bug. But I think I <a href="https://github.com/hannob/bignum-fuzz/blob/master/openssl-vs-gcrypt-modexp.c">recreated an almost functionally equivalent example</a>. (I should mention that <a href="http://llvm.org/docs/LibFuzzer.html">libfuzzer</a> might be the better tool for this job, but I still haven't gotten around trying it out.)<br />
<br />
Fuzzing is usually associated with typical memory corruption bugs. What these examples show is that you can use fuzzing to target entirely different classes of bugs. Essentially fuzz testing can target any kind of bug class that depends on an input and that has a testable failure state. For mathematics the failure state is pretty obvious: If the result of a calculation is wrong then there is a bug.<br />
<br />
<b>Fuzzing versus branch-free code</b><br />
<br />
After reporting the bug I was asked by the OpenSSL developers if I could do a similar test on their HMAC implementation. I did that and the result is interesting. At first I was confused: A while after the fuzzing started american fuzzy lop was only reporting two code paths. Usually it finds dozends of code paths within seconds.<br />
<br />
This happens because cryptographic code is often implemented in a branch-free way. That means that there are no if-blocks that will execute different parts of the code depending on the input. The reason this is done is to protect against all sorts of sidechannel attacks. This conflicts with the way modern fuzzers like american fuzzy lop or libfuzzer work. They use the detection of new code paths as a way to be smart about their inputs.<br />
<br />
I don't want to suggest here that branch-free code is bad. I think the advantages of branch-free code are undisputed, but it's interesting to see that it can make fuzz testing harder.<br />
<br />
In case you wonder why american fuzzy lop still found two code paths: The reason is likely the input length. The HMAC code is branch-free for each block, but if the block number changes you will get a different code path.<br />
<br />
<b>What's the impact?</b><br />
<br />
Finally you may ask what the impact of the BN_mod_exp() bug is. This is in part still unknown and I can only offer a preliminary analysis.<br />
<br />
The BN_mod_exp() function is used to exponentiate a number in a modulus (a^b mod m) and is used in many algorithms. It is the core of both RSA and Diffie Hellman. In the case of RSA I think it's unlikely that there is a vulnerability. A potential attacker has basically no control over the input values. The base is either random (RSA exchange) or a hash (DHE/ECDHE exchange). The exponent and the modulus are part of the key. I haven't looked into DSA, because nobody uses it.<br />
<br />
Diffie Hellman looks more interesting. I first thought it's not interesting, because usually in a Diffie Hellman key exchange the secret key is only used for one connection. Therefore the only thing an attacker could do is attacking a connection that he himself is part of. That is unlikely to give him anything interesting. But Juraj Somorovsky pointed out to me that OpenSSL caches and reuses the ephemeral key for several Diffie Hellman exchanges until the application restarts. So it might be possible to construct an oracle that will extract this cached ephemeral key. I leave it to people who know more about cryptography and x64 assembly to decide whether that is the case.<br />
<br />
The conclusions of the OpenSSl team in the advisory are similar to mine.<br />
<br />
OpenSSL has an option to disable this key caching. This can be done by passing the SSL_OP_SINGLE_DH_USE (for classic Diffie Hellman) and SSL_OP_SINGLE_ECDH_USE (for Elliptic Curve Diffie Hellman) values to SSL_CTX_set_options(). In my opinion this should be the default, reusing the ephemeral key seems quite dangerous. Many popular applications, including the Apache web server, already set this option.<br />
<br />
I invite everyone to analyze this further and try to come up with a practical attack.<br />
<br />
<i>Thanks to Tom Ritter, Ralph-Philipp Weinmann and Juraj Somorovsky for valuable discussions on the topic.</i>
                </div>
                
        <footer class="clearfix">
                    <span class="visuallyhidden">Categories: </span><a href="https://blog.fuzzing-project.org/categories/1-advisories">advisories</a>                 |                             <a href="/31-Fuzzing-Math-miscalculations-in-OpenSSLs-BN_mod_exp-CVE-2015-3193.html#comments" title="2 Comments, 1 Trackback">2 Comments</a>
                                                    
        </footer>

        <!--
        <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                 xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"
                 xmlns:dc="http://purl.org/dc/elements/1.1/">
        <rdf:Description
                 rdf:about="https://blog.fuzzing-project.org/feeds/ei_31.rdf"
                 trackback:ping="https://blog.fuzzing-project.org/comment.php?type=trackback&amp;entry_id=31"
                 dc:title="Fuzzing Math - miscalculations in OpenSSL's BN_mod_exp (CVE-2015-3193)"
                 dc:identifier="https://blog.fuzzing-project.org/31-Fuzzing-Math-miscalculations-in-OpenSSLs-BN_mod_exp-CVE-2015-3193.html" />
        </rdf:RDF>
        -->

                                            
        <section id="trackbacks" class="serendipity_comments serendipity_section_trackbacks">
            <h3>Trackbacks</h3>

            <div id="trackback_url" class="block_level"><a rel="nofollow" href="https://blog.fuzzing-project.org/comment.php?type=trackback&amp;entry_id=31" title="This link is not meant to be clicked. It contains the trackback URI for this entry. You can use this URI to send ping- &amp; trackbacks from your own blog to this entry. To copy the link, right click and select &quot;Copy Shortcut&quot; in Internet Explorer or &quot;Copy Link Location&quot; in Mozilla.">Trackback specific URI for this entry</a></div>

            <article id="c712" class="clearfix serendipity_comment odd">
    <h4><cite>The Fuzzing Project</cite> on <time datetime="2016-01-29T14:09:48+01:00">Friday, January 29. 2016</time>: <a href="http://blog.fuzzing-project.org/37-nss-Wrong-calculation-results-in-mp_div-and-mp_exptmod.html">nss: Wrong calculation results in mp_div() and mp_exptmod()</a></h4>
    <details>
        <summary>Show preview</summary>
        <div class="content serendipity_commentBody">A bug in the nss library can cause certain cryptographic calculations to produce wrong results. The bug is in the function mp_div(), this function gets used by the function mp_exptmod(), a combination of an exponentiation and a modulo operation. The mp_ex</div>
    </details>
</article>

        </section>

        <section id="comments" class="serendipity_comments serendipity_section_comments">
            <h3>Comments</h3>

            <p class="manage_comments">Display comments as
                           <a rel="nofollow" href="/index.php?url=31-Fuzzing-Math-miscalculations-in-OpenSSLs-BN_mod_exp-CVE-2015-3193.html&amp;serendipity[cview]=linear#comments">Linear</a> | Threaded
                        </p>

            <article id="c708" class="serendipity_comment even commentlevel-0">
    <header class="clearfix">
        <h4>Pascal Cuoq on <time datetime="2015-12-04T14:10:25+01:00">Friday, December  4. 2015</time>:</h4>
        </header>

    <div class="serendipity_commentBody clearfix content">
                You can re-introduce, for the purpose of fuzzing, the if-then-elses that, for the purpose of avoiding timing attacks, have been made into constant-time selections with a patch similar to the one shown here for an old version of OpenSSL:<br />
<br />
http://pastebin.com/rdLyQRVU<br />
<br />
I think that the code is clearer once the patch is applied (the title of the blog post that goes with the patch is âWhen in doubt, express intent, and leave the rest to the compilerâ), and it remains in my queue of patches to discuss when all null pointer dereferences from failed malloc() calls in OpenSSL are fixed.
        </div>

    <footer>
        <time>14:10</time>
        | <a class="comment_source_trace" href="#c708" title="Permanent link for this comment">Link</a>
            | <a class="comment_reply" href="#serendipity_CommentForm" id="serendipity_reply_708">Reply</a>
        <div id="serendipity_replyform_708"></div>
    </footer>
</article>
<article id="c710" class="serendipity_comment odd commentlevel-0">
    <header class="clearfix">
        <h4>Richard KÃ¶nning on <time datetime="2015-12-04T21:43:47+01:00">Friday, December  4. 2015</time>:</h4>
        </header>

    <div class="serendipity_commentBody clearfix content">
                OpenSSL also doesn't cache the ephemeral key when the DH parameters are provided via the callback functions set by SSL_CTX_set_tmp_dh_callback() or SSL_set_tmp_dh_callback(), the option SSL_OP_SINGLE_DH_USE is only necessary for preventing caching when SSL_CTX_set_tmp_dh() or SSL_set_tmp_dh() is used, see e.g. http://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_tmp_dh_callback.html.
        </div>

    <footer>
        <time>21:43</time>
        | <a class="comment_source_trace" href="#c710" title="Permanent link for this comment">Link</a>
            | <a class="comment_reply" href="#serendipity_CommentForm" id="serendipity_reply_710">Reply</a>
        <div id="serendipity_replyform_710"></div>
    </footer>
</article>

                </section>
            <a id="feedback"></a>
                        <section id="respond" class="serendipity_section_commentform">
            <h3>Add Comment</h3>
            <div id="serendipityCommentFormC" class="serendipityCommentForm">
    <div id="serendipity_replyform_0"></div>
    <a id="serendipity_CommentForm"></a>
    <form id="serendipity_comment" action="/index.php?url=31-Fuzzing-Math-miscalculations-in-OpenSSLs-BN_mod_exp-CVE-2015-3193.html#feedback" method="post">
    <div><input type="hidden" name="serendipity[entry_id]" value="31"></div>
    <div class="form_field">
        <label for="serendipity_commentform_name">Name*</label>
        <input id="serendipity_commentform_name" name="serendipity[name]" type="text" value="" placeholder="e.g. John Doe" required>
    </div>
    <div class="form_field">
        <label for="serendipity_commentform_email">Email</label>
        <input id="serendipity_commentform_email" name="serendipity[email]" type="email" value="" placeholder="e.g. mail@example.org">
    </div>
    <div class="form_field">
        <label for="serendipity_commentform_url">Homepage</label>
        <input id="serendipity_commentform_url" name="serendipity[url]" type="url" value="" placeholder="e.g. http://example.org">
    </div>
    <div class="form_tarea">
        <label for="serendipity_commentform_comment">Comment*</label>
        <textarea id="serendipity_commentform_comment" name="serendipity[comment]" rows="10" placeholder="What do you want to say?" required></textarea>
    </div>
    <div class="form_field">
        <label id="reply-to-hint" for="serendipity_replyTo">In reply to</label>
        <select id="serendipity_replyTo" onchange="" name="serendipity[replyTo]"><option value="0">[ Top level ]</option><option value="708">#1: Pascal Cuoq on 2015-12-04 14:10</option>
<option value="710">#2: Richard KÃ¶nning on 2015-12-04 21:43</option>
</select>
    </div>
    <div id="serendipity_comment_phone" class="serendipity_commentDirection comment_phone_input">
    <label for="serendipity_commentform_phone">Phone*</label>
    <input id="serendipity_commentform_phone" class="comment_phone_input" type="text" name="serendipity[phone]" value="" size="50" maxlength="60" placeholder="You don't want to give me your number, do you? ;)"/>
</div>
<div id="serendipity_comment_beecaptcha" class="form_field">
    <label for="bee_captcha">What is five plus one?</label>
    <input class="" type="text" id="bee_captcha" name="serendipity[beecaptcha]" size="10" value="" placeholder=""/>
</div>
<div class="serendipity_commentDirection serendipity_comment_s9ymarkup">Enclosing asterisks marks text as bold (*word*), underscore are made via _word_.</div><div class="serendipity_commentDirection serendipity_comment_emoticate">Standard emoticons like :-) and ;-) are converted to images.</div><div class="serendipity_commentDirection serendipity_comment_spamblock">E-Mail addresses will not be displayed and will only be used for E-Mail notifications.</div><input type="hidden" name="serendipity[token]" value="6e3a1084f212162d29a0cd6490e2d628" />
<div class="serendipity_commentDirection serendipity_comment_captcha"><br />To prevent automated Bots from commentspamming, please enter the string you see in the image below in the appropriate input box. Your comment will only be submitted if the strings match. Please ensure that your browser supports and accepts cookies, or your comment cannot be verified correctly.<br /><img src="https://blog.fuzzing-project.org/plugin/captcha_5adc2166712c99e1e79a6f2e0e650a5e" onclick="this.src=this.src + '1'" title="Enter the string you see here in the input box!" alt="CAPTCHA" class="captcha" /><br /><label for="captcha">Enter the string from the spam-prevention image above: </label><br /><input class="input_textbox" type="text" size="5" name="serendipity[captcha]" value="" id="captcha" /></div>
    <fieldset class="form_toolbar">
        <legend class="visuallyhidden">Form options</legend>
        <div class="form_box">
            <input id="checkbox_remember" name="serendipity[remember]" type="checkbox" ><label for="checkbox_remember">Remember Information? </label>
        </div>
          <div class="form_box">
            <input id="checkbox_subscribe" name="serendipity[subscribe]" type="checkbox"  ><label for="checkbox_subscribe">Subscribe to this entry</label>
        </div>
      </fieldset>
    <div class="form_button">
        <input id="serendipity_preview" name="serendipity[preview]" type="submit" value="Preview">
        <input id="serendipity_submit" name="serendipity[submit]" type="submit" value="Submit Comment">
    </div>
</form>
</div>

        </section>

        
    </article>
        



        </main>
                <aside id="sidebar_right">
            <h2 class="visuallyhidden">Sidebar</h2>
                <section class="sidebar_plugin clearfix even serendipity_plugin_html_nugget">
                <h3>The Fuzzing Project</h3>
                <div class="sidebar_content clearfix">You  may want to go <a href="https://fuzzing-project.org/">back to the Fuzzing Project's main page</a> or <a href="https://fuzzing-project.org/software/">software list</a>.</div>
    </section>
    <section class="sidebar_plugin clearfix odd serendipity_plugin_archives">
                <h3>Archives</h3>
                <div class="sidebar_content clearfix"><ul class="plainList">
    <li><a href="/archives/2021/10.html" title="October 2021">October 2021</a></li>
    <li><a href="/archives/2021/09.html" title="September 2021">September 2021</a></li>
    <li><a href="/archives/2021/08.html" title="August 2021">August 2021</a></li>
    <li><a href="/index.php?frontpage">Recent...</a></li>
    <li><a href="https://blog.fuzzing-project.org/archive">Older...</a></li>
</ul>
</div>
    </section>
    <section class="sidebar_plugin clearfix even serendipity_plugin_categories">
                <h3>Categories</h3>
                <div class="sidebar_content clearfix"><form action="https://blog.fuzzing-project.org/index.php?frontpage" method="post">
              <div id="serendipity_category_form_content">
<ul id="serendipity_categories_list" style="list-style: none; margin: 0px; padding: 0px">
<li class="category_depth0 category_1" style="display: block;"><input style="width: 15px" type="checkbox" name="serendipity[multiCat][]" value="1" /><a class="serendipity_xml_icon" href="/feeds/categories/1-advisories.rss"><img src="/templates/2k11/img/xml.gif" alt="XML" style="border: 0px" /></a> <a href="/categories/1-advisories" title="" style="padding-left: 0px">advisories</a></li>
</ul>
<div class="category_submit"><input type="submit" name="serendipity[isMultiCat]" value="Go!" /></div>
</div>
</form>
</div>
    </section>
    <section class="sidebar_plugin clearfix odd serendipity_plugin_syndication">
                <h3>Syndicate This Blog</h3>
                <div class="sidebar_content clearfix">
<ul id="serendipity_syndication_list" class="plainList"><li><a class="subtome" href="https://blog.fuzzing-project.org/feeds/index.rss2" onclick="document.subtomeBtn=this;document.subtomeBtn.dataset['subtomeFeeds']='https%3A%2F%2Fblog.fuzzing-project.org%2Ffeeds%2Findex.rss2';var s=document.createElement('script');s.src='https://www.subtome.com/load.js';document.body.appendChild(s);return false;"><img src="/templates/2k11/img/subtome.png" alt="XML" style="border: 0px" /></a>
</li>
<li><a class="subtome" href="https://blog.fuzzing-project.org/feeds/comments.rss2" onclick="document.subtomeBtn=this;document.subtomeBtn.dataset['subtomeFeeds']='https%3A%2F%2Fblog.fuzzing-project.org%2Ffeeds%2Fcomments.rss2';var s=document.createElement('script');s.src='https://www.subtome.com/load.js';document.body.appendChild(s);return false;"><img src="/templates/2k11/img/xml.gif" alt="XML" style="border: 0px" /></a>
 <a href="https://blog.fuzzing-project.org/feeds/comments.rss2" onclick="document.subtomeBtn=this;document.subtomeBtn.dataset['subtomeFeeds']='https%3A%2F%2Fblog.fuzzing-project.org%2Ffeeds%2Fcomments.rss2';var s=document.createElement('script');s.src='https://www.subtome.com/load.js';document.body.appendChild(s);return false;">Comments</a>
</li>
</ul>
</div>
    </section>

        </aside>
        </div>

    <footer id="colophon">
        <p><span lang="en">Powered by <a href="http://s9y.org">Serendipity</a> &amp; the <i>2k11</i> theme.</span></p>
    </footer>
</div>

<script src="/templates/2k11/js/2k11.min.js"></script>

<script>var spamBeeData = function() { var PMtR_ = {};var BTsRO = unescape('%25%45%31%25%39%35%25%38%37');var dUzik = unescape('%64%65%66%61%75%6c%74');var HoBTR = unescape('%31%33%37%33%33%37%37%39%30%35');PMtR_['answer'] = BTsRO;PMtR_['method'] = dUzik;PMtR_['scrambleKey'] = HoBTR;return PMtR_; }();</script>
<script src="/plugins/serendipity_event_spamblock_bee/serendipity_event_spamblock_bee.js"></script>

</body>
</html>
