<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <meta name="viewport" content="width=device-width">

        <title>BigBlueButton : API</title>
        <meta name="description" content="Open Source Web Conferencing">

		<link href="https://fonts.googleapis.com/css?family=Roboto:400,400i,700,700i&display=swap" rel="stylesheet">
        <link href="//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.no-icons.min.css" rel="stylesheet">
        <link rel="stylesheet" href="/css/syntax.css">
        <link rel="stylesheet" href="/css/main.css">
        <link rel="stylesheet" href="/css/anchor.css">

	<script src="/js/anchor.js"></script>
<script>
 addAnchors('h1, h2, h3');
</script>

        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
        <script src="/js/jquery.toc.min.js"></script>
    </head>
    <body>

        <div class="container">
            <div class=row-fluid>
                <div id=header class=span12>
                    <h4><a class=brand href="/">BigBlueButton</a>
     &#8278; <small>Open Source Web Conferencing</small>
</h4>


                </div>
            </div>

            <div class=row-fluid>
                
                
                    <div id=navigation class=span2>
                        <ul class="nav nav-list">
    <li><a href="/">Home</a></li>
    
        
        

        
    
        
        

        
            
                <li class=nav-header>2.3 Latest Version</li>
            
            <li data-order="6"><a href="/2.3/release-tests.html">Testing a release</a></li>
        
            
            <li data-order="3"><a href="/2.3/dev.html">Development</a></li>
        
            
            <li data-order="1"><a href="/2.3/new.html">What's New</a></li>
        
            
            <li data-order="2"><a href="/2.3/install.html">Install</a></li>
        
            
            <li data-order="4"><a href="/2.3/architecture.html">Architecture</a></li>
        
            
            <li data-order=""><a href="/2.3/html5-tests.html">HTML5 Tests</a></li>
        
            
            <li data-order="9"><a href="/2.3/html5-accessibility.html">Accessibility</a></li>
        
    
        
        

        
            
                <li class=nav-header>Develop</li>
            
            <li data-order="7"><a href="/dev/design.html">Design</a></li>
        
            
            <li data-order=""><a href="/dev/webhooks.html">WebHooks</a></li>
        
            
            <li data-order=""><a href="/dev/localization.html">Localization</a></li>
        
            
            <li data-order=""><a href="/dev/api.html">API</a></li>
        
            
            <li data-order=""><a href="/dev/recording.html">Recording</a></li>
        
    
        
        

        
            
                <li class=nav-header>Administration</li>
            
            <li data-order=""><a href="/admin/monitoring.html">Monitoring</a></li>
        
            
            <li data-order=""><a href="/admin/privacy.html">Privacy</a></li>
        
            
            <li data-order="4"><a href="/admin/setup-turn-server.html">Configure TURN</a></li>
        
            
            <li data-order="3"><a href="/admin/customize.html">Customize</a></li>
        
            
            <li data-order="5"><a href="/admin/configure-firewall.html">Configure Firewall</a></li>
        
            
            <li data-order=""><a href="/admin/bbb-conf.html">bbb-conf</a></li>
        
            
            <li data-order="11"><a href="/admin/lti.html">LTI</a></li>
        
            
            <li data-order=""><a href="/admin/configuration-files.html">Configuration Files</a></li>
        
    
        
        

        
            
                <li class=nav-header>Greenlight</li>
            
            <li data-order=""><a href="/greenlight/gl-overview.html">Overview</a></li>
        
            
            <li data-order=""><a href="/greenlight/gl-install.html">Install</a></li>
        
            
            <li data-order=""><a href="/greenlight/gl-customize.html">Customize</a></li>
        
            
            <li data-order=""><a href="/greenlight/gl-config.html">Configure</a></li>
        
            
            <li data-order=""><a href="/greenlight/gl-admin.html">Admin</a></li>
        
    
        
        

        
            
                <li class=nav-header>2.4 Under Development</li>
            
            <li data-order="2"><a href="/2.4/install.html">Install</a></li>
        
            
            <li data-order="3"><a href="/2.4/dev.html">Development</a></li>
        
            
            <li data-order="6"><a href="/2.4/release-tests.html">Testing a release</a></li>
        
            
            <li data-order="1"><a href="/2.4/new.html">What's New</a></li>
        
    
        
        

        
            
                <li class=nav-header>Support</li>
            
            <li data-order="2"><a href="/support/getting-help.html">Getting help</a></li>
        
            
            <li data-order="10"><a href="/support/troubleshooting.html">Troubleshooting</a></li>
        
            
            <li data-order=""><a href="/support/road-map.html">Road Map</a></li>
        
            
            <li data-order=""><a href="/support/faq.html">FAQ</a></li>
        
            
            <li data-order=""><a href="/support/release-notes.html">Release Notes</a></li>
        
    
        
        

        
    
        
        

        
            
                <li class=nav-header>2.2 Legacy</li>
            
            <li data-order="1"><a href="/2.2/install.html">Install</a></li>
        
            
            <li data-order="2"><a href="/2.2/dev.html">Development</a></li>
        
            
            <li data-order=""><a href="/2.2/html5-tests.html">HTML5 Tests</a></li>
        
            
            <li data-order="3"><a href="/2.2/architecture.html">Architecture</a></li>
        
            
            <li data-order="9"><a href="/2.2/html5-accessibility.html">Accessibility</a></li>
        
    
        
        

        
    
        
        

        
    
        
        

        
    
        
        

        
    
        
        

        
    
        
        

        
    
        
        

        
    
<!-- List additional links. It is recommended to add a divider
    e.g. <li class=divider></li> first to break up the content. -->
</ul>

                    </div>

                    <div id=content class=span10>
                        <div class=page-header>
    <h2>API
        
    </h2>
</div>

<ul data-toc></ul>
<!---
To disable automatic links, change : in the URL to &#58;
E.g. http&#58;//yourserver.com
-->

<h1 id="overview">Overview</h1>

<p>This document describes the BigBlueButton application programming interface (API).</p>

<p>For developers, this API enables you to</p>

<ul>
  <li>create meetings</li>
  <li>join meetings</li>
  <li>end meetings</li>
  <li>get recordings for past meetings (and delete them)</li>
  <li>upload closed caption files for meetings</li>
</ul>

<p>To make an API call to your BigBlueButton server, your application makes HTTPS requests to the BigBlueButton server API endpoint (usually the server’s hostname followed by <code class="language-plaintext highlighter-rouge">/bigbluebutton/api</code>). All API calls must include checksum computed with a secret shared with the BigBlueButton server.</p>

<p>The BigBlueButton server returns an XML response to all API calls.</p>

<h2 id="updates-to-api-in-bigbluebutton">Updates to API in BigBlueButton</h2>

<p>Updated in 0.9.0:</p>

<ul>
  <li><strong>join</strong> - <code class="language-plaintext highlighter-rouge">configToken</code> can now reference a file in <code class="language-plaintext highlighter-rouge">/var/bigbluebutton/configs</code>, such as <code class="language-plaintext highlighter-rouge">myconfig.xml</code>.</li>
  <li><strong>create</strong> - Added three parameters: <code class="language-plaintext highlighter-rouge">moderatorOnlyMessage</code> to display message only visible to moderators and <code class="language-plaintext highlighter-rouge">autoStartRecording</code>/<code class="language-plaintext highlighter-rouge">allowStartStopRecording</code> to provide finer control over recordings.</li>
</ul>

<p>Updated in 1.0:</p>

<ul>
  <li><strong>getMeetings</strong> - Added fields on the returned XML</li>
  <li><strong>getMeetingInfo</strong> - Added fields on the returned XML and deprecated parameters</li>
  <li><strong>getRecordings</strong> - Added meta parameter and state parameter to filter returned results</li>
</ul>

<p>Updated in 1.1:</p>

<ul>
  <li><strong>create</strong> - Added fields on the returned XML</li>
  <li><strong>getMeetings</strong> - Added fields on the returned XML</li>
  <li><strong>getMeetingInfo</strong> - Added fields on the returned XML</li>
  <li><strong>getRecordings</strong> - Returns an XML block with thumbnails from the slides as well as a <code class="language-plaintext highlighter-rouge">&lt;participants&gt;N&lt;/participants&gt;</code> element with number of participants who attend the meeting.</li>
  <li><strong>updateRecordings</strong> - Meta parameters can be edited</li>
</ul>

<p>Updated in 2.0:</p>

<ul>
  <li><strong>create</strong> - Added <code class="language-plaintext highlighter-rouge">bannerText</code>, <code class="language-plaintext highlighter-rouge">bannerColor</code>, <code class="language-plaintext highlighter-rouge">logo</code>, <code class="language-plaintext highlighter-rouge">copyright</code>, and <code class="language-plaintext highlighter-rouge">muteOnStart</code>.</li>
  <li><strong>getMeetings</strong> - Now returns all the fields in <strong>getMeetingInfo</strong>.</li>
  <li><strong>getMeetingInfo</strong> - Added <code class="language-plaintext highlighter-rouge">&lt;client&gt;</code> field to return client type (FLASH, or HTML5).</li>
</ul>

<p>Updated in 2.2:</p>

<ul>
  <li><strong>create</strong> - Added <code class="language-plaintext highlighter-rouge">endWhenNoModerator</code></li>
  <li><strong>getRecordingTextTracks</strong> - Get a list of the caption/subtitle files currently available for a recording.</li>
  <li><strong>putRecordingTextTrack</strong> - Upload a caption or subtitle file to add it to the recording. If there is any existing track with the same values for kind and lang, it will be replaced.</li>
</ul>

<p>Updated in 2.3:</p>

<ul>
  <li><strong>create</strong> - Renamed <code class="language-plaintext highlighter-rouge">keepEvents</code> to <code class="language-plaintext highlighter-rouge">meetingKeepEvents</code>, removed <code class="language-plaintext highlighter-rouge">joinViaHtml5</code>, added <code class="language-plaintext highlighter-rouge">endWhenNoModeratorDelayInMinutes</code></li>
  <li><strong>getDefaultConfigXML</strong> obsolete, not used in HTML5 client</li>
  <li><strong>setConfigXML</strong> obsolete, not used in HTML5 client</li>
</ul>

<p>Updated in 2.4 (under development):</p>

<ul>
  <li><strong>getDefaultConfigXML</strong> Removed, not used in HTML5 client</li>
  <li><strong>setConfigXML</strong> Removed, not used in HTML5 client</li>
  <li><strong>create</strong> - Added <code class="language-plaintext highlighter-rouge">meetingLayout</code>, <code class="language-plaintext highlighter-rouge">learningDashboardEnabled</code>, <code class="language-plaintext highlighter-rouge">learningDashboardCleanupDelayInMinutes</code></li>
</ul>

<h1 id="api-data-types">API Data Types</h1>

<p>There are three types in the API.</p>

<dl>
  <dt>String</dt>
  <dd>
    <p>This data type indicates a (UTF-8) encoded string. When passing String values to BigBlueButton API calls, make sure that you use correctly URL-encoded UTF-8 values so international text will show up correctly. The string must not contain control characters (values 0x00 through 0x1F).</p>
  </dd>
</dl>

<p>Some BigBlueButton API parameters put additional restrictions on which characters are allowed, or on the lengths of the string. These restrictions are described in the parameter documentation.</p>

<dl>
  <dt>Number</dt>
  <dd>
    <p>This data type indicates a non-negative integer value. The parameter value must only contain the digits <code class="language-plaintext highlighter-rouge">0</code> through <code class="language-plaintext highlighter-rouge">9</code>. There should be no leading sign (<code class="language-plaintext highlighter-rouge">+</code> or <code class="language-plaintext highlighter-rouge">-</code>), and no comma or period characters.</p>
  </dd>
  <dt>Boolean</dt>
  <dd>
    <p>A true/false value. The value must be specified as the literal string <code class="language-plaintext highlighter-rouge">true</code> or <code class="language-plaintext highlighter-rouge">false</code> (all lowercase), other values may be misinterpreted.</p>
  </dd>
</dl>

<h1 id="api-security-model">API Security Model</h1>

<p>The BigBlueButton API security model enables 3rd-party applications to make API calls (if they have the shared secret), but not allow other people (end users) to make API calls.</p>

<p>The BigBlueButton API calls are almost all made server-to-server. If you installed the package <code class="language-plaintext highlighter-rouge">bbb-demo</code> on your BigBlueButton server, you get a set of API examples, written in Java Server Pages (JSP), that demonstrate how to use the BigBlueButton API. These demos run as a web application in tomcat7. The web application makes HTTPS requests to the BigBlueButton server’s API end point.</p>

<p>You can retrieve your BigBlueButton API parameters (API endpoint and shared secret) using the command</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>bbb-conf <span class="nt">--secret</span>
</code></pre></div></div>

<p>Here’s a sample return</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    URL: http://bbb.example.com/bigbluebutton/
    Secret: ECCJZNJWLPEA3YB6Y2LTQGQD3GJZ3F93
</code></pre></div></div>

<p>You should <em>not</em> embed the shared secret within a web page and make BigBlueButton API calls within JavaScript running within a browser. The built-in debugging tools for modern browser would make this secret easily accessibile to any user. Once someone has the shared secret for your BigBlueButton server, they could create their own API calls. The shared secret should only be accessibile to the server-side components of your application (and thus not visible to end users).</p>

<h2 id="configuration">Configuration</h2>

<p>The shared secret is located in the <code class="language-plaintext highlighter-rouge">bigbluebutton.properties</code> file. On a BigBlueButton 2.0 server, this file is located at</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/var/lib/tomcat7/webapps/bigbluebutton/WEB-INF/classes/bigbluebutton.properties
</code></pre></div></div>

<p>On BigBlueButton 2.2 server, this file is located at</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/usr/share/bbb-web/WEB-INF/classes/bigbluebutton.properties
</code></pre></div></div>

<p>Look for the parameter <code class="language-plaintext highlighter-rouge">securitySalt</code> (it’s called <code class="language-plaintext highlighter-rouge">securitySalt</code> due to legacy naming of the string)</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">securitySalt</span><span class="p">=</span><span class="s">&lt;your_salt&gt;</span>
</code></pre></div></div>

<p>We’ll refer to this value as <code class="language-plaintext highlighter-rouge">sharedSecret</code>. When you first <a href="2.2/install.html">install BigBlueButton</a> on a server, the packaging scripts create a random 32 character <code class="language-plaintext highlighter-rouge">sharedSecret</code>. You can also change the <code class="language-plaintext highlighter-rouge">sharedSecret</code> at anytime using the command <code class="language-plaintext highlighter-rouge">bbb-conf --setsecret</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>bbb-conf <span class="nt">--setsecret</span> &lt;new_shared_secret&gt;
</code></pre></div></div>

<p>The following command will create a new 32 character shared secret for your server</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">sudo </span>bbb-conf <span class="nt">--setsecret</span> <span class="se">\$</span><span class="o">(</span>openssl rand <span class="nt">-base64</span> 32 | <span class="nb">sed</span> <span class="s1">'s/=//g'</span> | <span class="nb">sed</span> <span class="s1">'s/+//g'</span> | <span class="nb">sed</span> <span class="s1">'s/\///g'</span><span class="o">)</span>
</code></pre></div></div>

<p><strong>IMPORTANT: DO NOT ALLOW END USERS TO KNOW YOUR SHARED SECRET OR ELSE YOUR SECURITY WILL BE COMPROMISED.</strong></p>

<p>There are other configuration values <code class="language-plaintext highlighter-rouge">bigbluebutton.properties</code> related to the lifecycle of a meeting. You don’t need to understand all of these to start using the BigBlueButton API. For most BigBlueButton servers, you can leave the default values.</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#----------------------------------------------------
# Default dial access number
</span><span class="py">defaultDialAccessNumber</span><span class="p">=</span><span class="s">613-555-1234</span>

<span class="c"># Default Guest Policy
# Valid values are ALWAYS_ACCEPT, ALWAYS_DENY, ASK_MODERATOR
#
</span><span class="py">defaultGuestPolicy</span><span class="p">=</span><span class="s">ALWAYS_ACCEPT</span>

<span class="c">#
#----------------------------------------------------
# Default welcome message to display when the participant joins the web
# conference. This is only used for the old scheduling which will be
# removed in the future. Use the API to create a conference.
#
# If the message contains characters not in ISO-8859-1 character sets
# they must be properly escaped to unicode characters. An easy way to
# do this is running the native2ascii command setting UTF8 encoding and
# passing this file's path as input and output parameters, e.g.:
#
# native2ascii -encoding UTF8 bigbluebutton.properties bigbluebutton.properties
#
</span><span class="py">defaultWelcomeMessage</span><span class="p">=</span><span class="s">Welcome to &lt;b&gt;%%CONFNAME%%&lt;/b&gt;!&lt;br&gt;&lt;br&gt;For help on using BigBlueButton see these (short) &lt;a href="event:http://www.bigbluebutton.org/html5"&gt;&lt;u&gt;tutorial videos&lt;/u&gt;&lt;/a&gt;.&lt;br&gt;&lt;br&gt;To join the audio bridge click the phone button.  Use a headset to avoid causing background noise for others.</span>
<span class="py">defaultWelcomeMessageFooter</span><span class="p">=</span><span class="s">This server is running &lt;a href="http://docs.bigbluebutton.org/" target="_blank"&gt;&lt;u&gt;BigBlueButton&lt;/u&gt;&lt;/a&gt;.</span>

<span class="c"># Default maximum number of users a meeting can have.
# Current default is 0 (meeting doesn't have a user limit).
</span><span class="py">defaultMaxUsers</span><span class="p">=</span><span class="s">0</span>

<span class="c"># Default duration of the meeting in minutes.
# Current default is 0 (meeting doesn't end).
</span><span class="py">defaultMeetingDuration</span><span class="p">=</span><span class="s">0</span>

<span class="c"># Number of minutes elapse of no activity before
# ending the meeting. Default zero (0) to disable
# check.
</span><span class="py">maxInactivityTimeoutMinutes</span><span class="p">=</span><span class="s">0</span>

<span class="c"># Number of minutes to logout client if user
# isn't responsive
</span><span class="py">clientLogoutTimerInMinutes</span><span class="p">=</span><span class="s">0</span>

<span class="c"># Send warning to moderators to warn that
# meeting would be ended due to inactivity
</span><span class="py">warnMinutesBeforeMax</span><span class="p">=</span><span class="s">5</span>

<span class="c"># End meeting if no user joined within
# a period of time after meeting created.
</span><span class="py">meetingExpireIfNoUserJoinedInMinutes</span><span class="p">=</span><span class="s">5</span>

<span class="c"># Number of minutes to end meeting when
# the last user left.
</span><span class="py">meetingExpireWhenLastUserLeftInMinutes</span><span class="p">=</span><span class="s">1</span>

<span class="c"># User inactivity audit timer interval.
</span><span class="py">userInactivityInspectTimerInMinutes</span><span class="p">=</span><span class="s">0</span>

<span class="c"># Number of minutes to consider a user inactive.
# iSend warning message to client to check if really inactive.
</span><span class="py">userInactivityThresholdInMinutes</span><span class="p">=</span><span class="s">30</span>

<span class="c"># Number of minutes for user to respond to inactivity
# warning before being logged out.
</span><span class="py">userActivitySignResponseDelayInMinutes</span><span class="p">=</span><span class="s">5</span>

<span class="c"># Disable recording by default.
#   true - don't record even if record param in the api call is set to record
#   false - when record param is passed from api, override this default
</span><span class="py">disableRecordingDefault</span><span class="p">=</span><span class="s">false</span>

<span class="c"># Start recording when first user joins the meeting.
# For backward compatibility with 0.81 where whole meeting
# is recorded.
</span><span class="py">autoStartRecording</span><span class="p">=</span><span class="s">false</span>

<span class="c"># Allow the user to start/stop recording.
</span><span class="py">allowStartStopRecording</span><span class="p">=</span><span class="s">true</span>

<span class="c"># Allow webcams streaming reception only to and from moderators
</span><span class="py">webcamsOnlyForModerator</span><span class="p">=</span><span class="s">false</span>

<span class="c"># Mute the meeting on start
</span><span class="py">muteOnStart</span><span class="p">=</span><span class="s">false</span>

<span class="c"># Unmute users
# Gives moderators permisson to unmute other users
</span><span class="py">allowModsToUnmuteUsers</span><span class="p">=</span><span class="s">false</span>

<span class="c"># Saves meeting events even if the meeting is not recorded
</span><span class="py">defaultKeepEvents</span><span class="p">=</span><span class="s">false</span>

<span class="c"># Default Lock Settings
</span><span class="py">lockSettingsDisableCam</span><span class="p">=</span><span class="s">false</span>
<span class="py">lockSettingsDisableMic</span><span class="p">=</span><span class="s">false</span>
<span class="py">lockSettingsDisablePrivateChat</span><span class="p">=</span><span class="s">false</span>
<span class="py">lockSettingsDisablePublicChat</span><span class="p">=</span><span class="s">false</span>
<span class="py">lockSettingsDisableNote</span><span class="p">=</span><span class="s">false</span>
<span class="py">lockSettingsLockedLayout</span><span class="p">=</span><span class="s">false</span>
<span class="py">lockSettingsLockOnJoin</span><span class="p">=</span><span class="s">true</span>
<span class="py">lockSettingsLockOnJoinConfigurable</span><span class="p">=</span><span class="s">false</span>

<span class="c">#----------------------------------------------------
# This URL is where the BBB client is accessible. When a user sucessfully
# enters a name and password, she is redirected here to load the client.
</span><span class="py">bigbluebutton.web.serverURL</span><span class="p">=</span><span class="s">https://bbb.example.com</span>


<span class="c"># Param to end the meeting when there are no moderators after a certain period of time.
# Needed for classes where teacher gets disconnected and can't get back in. Prevents
# students from running amok.
</span><span class="py">endWhenNoModerator</span><span class="p">=</span><span class="s">false</span>

<span class="c"># Number of minutes to wait for moderator rejoin before end meeting (if `endWhenNoModerator` enabled)
</span><span class="py">endWhenNoModeratorDelayInMinutes</span><span class="p">=</span><span class="s">1</span>

</code></pre></div></div>

<h2 id="usage">Usage</h2>

<p>The implementation of BigBlueButton’s security model lies in the controller <code class="language-plaintext highlighter-rouge">ApiController.groovy</code>. For each incoming API request, the controller computes a checksum out of the combination of the entire HTTPS query string and the server’s shared secret. It then matches the incoming checksum against the computed checksum. If they match, the controller accepts the incoming request.</p>

<p>To use the security model, you must be able to create an SHA-1 checksum out of the call name <em>plus</em> the query string <em>plus</em> the shared secret that you configured on your server. To do so, follow these steps:</p>

<ol>
  <li>Create the entire query string for your API call without the checksum parameter.
    <ul>
      <li>Example for create meeting API call: <code class="language-plaintext highlighter-rouge">name=Test+Meeting&amp;meetingID=abc123&amp;attendeePW=111222&amp;moderatorPW=333444</code></li>
    </ul>
  </li>
  <li>Prepend the API call name to your string
    <ul>
      <li>Example for above query string:
        <ul>
          <li>API call name is <code class="language-plaintext highlighter-rouge">create</code></li>
          <li>String becomes: <code class="language-plaintext highlighter-rouge">createname=Test+Meeting&amp;meetingID=abc123&amp;attendeePW=111222&amp;moderatorPW=333444</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Now, append the shared secret to your string
    <ul>
      <li>Example for above query string:
        <ul>
          <li>shared secret is <code class="language-plaintext highlighter-rouge">639259d4-9dd8-4b25-bf01-95f9567eaf4b</code></li>
          <li>String becomes: <code class="language-plaintext highlighter-rouge">createname=Test+Meeting&amp;meetingID=abc123&amp;attendeePW=111222&amp;moderatorPW=333444639259d4-9dd8-4b25-bf01-95f9567eaf4b</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Now, find the SHA-1 sum for that string (implementation varies based on programming language).
    <ul>
      <li>the SHA-1 sum for the above string is: <code class="language-plaintext highlighter-rouge">1fcbb0c4fc1f039f73aa6d697d2db9ba7f803f17</code></li>
    </ul>
  </li>
  <li>Add a checksum parameter to your query string that contains this checksum.
    <ul>
      <li>Above example becomes: <code class="language-plaintext highlighter-rouge">name=Test+Meeting&amp;meetingID=abc123&amp;attendeePW=111222&amp;moderatorPW=333444&amp;checksum=1fcbb0c4fc1f039f73aa6d697d2db9ba7f803f17</code></li>
    </ul>
  </li>
</ol>

<p>You <strong>MUST</strong> send this checksum with <strong>EVERY</strong> API call. Since end users do not know your shared secret, they can not fake calls to the server, and they can not modify any API calls since changing a single parameter name or value by only one character will completely change the checksum required to validate the call.</p>

<p>Implementations of the SHA-1 functionality exist in nearly all programming languages. Here are example methods or links to example implementations for various languages:</p>

<ul>
  <li><a href="http://pajhome.org.uk/crypt/md5/">JavaScript</a>
    <ul>
      <li>describes MD5 also</li>
    </ul>
  </li>
  <li><a href="http://commons.apache.org/codec/">Java</a>
    <ul>
      <li>You can use <code class="language-plaintext highlighter-rouge">org.apache.commons.codec.digest.DigestUtils</code> and call <code class="language-plaintext highlighter-rouge">DigestUtils.shaHex(string + sharedSecret)</code></li>
    </ul>
  </li>
  <li><a href="http://php.net/manual/en/function.sha1.php">PHP</a>
    <ul>
      <li>simply call <code class="language-plaintext highlighter-rouge">sha1(string . sharedSecret)</code></li>
    </ul>
  </li>
</ul>

<h2 id="error-handling">Error handling</h2>

<p>In the case of an error, all API calls make a best-effort attempt to return a properly formatted XML that contains enough information for the caller to determine the source of the error.</p>

<p>Errors are returned with a <code class="language-plaintext highlighter-rouge">returncode</code> value of <code class="language-plaintext highlighter-rouge">FAILED</code> and a <code class="language-plaintext highlighter-rouge">message</code> and <code class="language-plaintext highlighter-rouge">messageKey</code> value. We will try very hard to keep the messageKey stable (unchanging) throughout the life of the API. However, the <code class="language-plaintext highlighter-rouge">message</code> value is a plain text (English) value that may change with time.</p>

<p>You can use the <code class="language-plaintext highlighter-rouge">messageKey</code> to determine the type of error and look up internationalized text within your own system if needed. For example, an invalid request may return an error message of “No conference with that meeting ID exists”, but the messageKey is simple “invalidMeetingIdentifier”.</p>

<h1 id="api-resources">API Resources</h1>

<h2 id="administration">Administration</h2>

<p>The following section describes the administration calls</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Resource</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">create</td>
      <td style="text-align: left">Creates a new meeting.</td>
    </tr>
    <tr>
      <td style="text-align: left">getDefaultConfigXML</td>
      <td style="text-align: left">Gets the default config.xml (these settings configure the BigBlueButton client for each user).</td>
    </tr>
    <tr>
      <td style="text-align: left">setConfigXML</td>
      <td style="text-align: left">Add a custom config.xml to an existing meeting.</td>
    </tr>
    <tr>
      <td style="text-align: left">join</td>
      <td style="text-align: left">Join a new user to an existing meeting.</td>
    </tr>
    <tr>
      <td style="text-align: left">end</td>
      <td style="text-align: left">Ends meeting.</td>
    </tr>
  </tbody>
</table>

<h2 id="monitoring">Monitoring</h2>

<p>The following section describes the monitoring calls</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Resource</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">isMeetingRunning</td>
      <td style="text-align: left">Checks whether if a specified meeting is running.</td>
    </tr>
    <tr>
      <td style="text-align: left">getMeetings</td>
      <td style="text-align: left">Get the list of Meetings.</td>
    </tr>
    <tr>
      <td style="text-align: left">getMeetingInfo</td>
      <td style="text-align: left">Get the details of a Meeting.</td>
    </tr>
  </tbody>
</table>

<h2 id="recording">Recording</h2>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Resource</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">getRecordings</td>
      <td style="text-align: left">Get a list of recordings.</td>
    </tr>
    <tr>
      <td style="text-align: left">publishRecordings</td>
      <td style="text-align: left">Enables publishing or unpublishing of a recording.</td>
    </tr>
    <tr>
      <td style="text-align: left">deleteRecordings</td>
      <td style="text-align: left">Deletes an existing recording</td>
    </tr>
    <tr>
      <td style="text-align: left">updateRecordings</td>
      <td style="text-align: left">Updates metadata in a recording.</td>
    </tr>
    <tr>
      <td style="text-align: left">getRecordingTextTracks</td>
      <td style="text-align: left">Get a list of the caption/subtitle.</td>
    </tr>
    <tr>
      <td style="text-align: left">putRecordingTextTrack</td>
      <td style="text-align: left">Upload a caption or subtitle file to add it to the recording.</td>
    </tr>
  </tbody>
</table>

<h1 id="api-calls">API Calls</h1>

<p>The following response parameters are standard to every call and may be returned from any call.</p>

<p><strong>Parameters:</strong></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Param Name</th>
      <th style="text-align: left">Required / Optional</th>
      <th style="text-align: left">Type</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">checksum</td>
      <td style="text-align: left">Varies</td>
      <td style="text-align: left">String</td>
      <td style="text-align: left">See the <a href="#api-security-model">API Security ModelAnchor</a> section for more details on the usage for this parameter.<br />This is basically a SHA-1 hash of <code class="language-plaintext highlighter-rouge">callName + queryString + sharedSecret</code>. The security salt will be configured into the application at deploy time. All calls to the API must include the checksum parameter.</td>
    </tr>
  </tbody>
</table>

<p><strong>Response:</strong></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Param Name</th>
      <th style="text-align: left">When Returned</th>
      <th style="text-align: left">Type</th>
      <th style="text-align: left">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">returncode</td>
      <td style="text-align: left">Always</td>
      <td style="text-align: left">String</td>
      <td style="text-align: left">Indicates whether the intended function was successful or not. Always one of two values:<br /><br /><code class="language-plaintext highlighter-rouge">FAILED</code> – There was an error of some sort – look for the message and messageKey for more information. Note that if the <code class="language-plaintext highlighter-rouge">returncode</code> is FAILED, the call-specific response parameters marked as “always returned” will not be returned. They are only returned as part of successful responses.<br /><br /><code class="language-plaintext highlighter-rouge">SUCCESS</code> – The call succeeded – the other parameters that are normally associated with this call will be returned.</td>
    </tr>
    <tr>
      <td style="text-align: left">message</td>
      <td style="text-align: left">Sometimes</td>
      <td style="text-align: left">String</td>
      <td style="text-align: left">A message that gives additional information about the status of the call. A message parameter will always be returned if the returncode was <code class="language-plaintext highlighter-rouge">FAILED</code>. A message may also be returned in some cases where returncode was <code class="language-plaintext highlighter-rouge">SUCCESS</code> if additional information would be helpful.</td>
    </tr>
    <tr>
      <td style="text-align: left">messageKey</td>
      <td style="text-align: left">Sometimes</td>
      <td style="text-align: left">String</td>
      <td style="text-align: left">Provides similar functionality to the message and follows the same rules. However, a message key will be much shorter and will generally remain the same for the life of the API whereas a message may change over time. If your third party application would like to internationalize or otherwise change the standard messages returned, you can look up your own custom messages based on this messageKey.</td>
    </tr>
  </tbody>
</table>

<h2 id="create">create</h2>

<p>Creates a BigBlueButton meeting.</p>

<p>The create call is idempotent: you can call it multiple times with the same parameters without side effects. This simplifies the logic for joining a user into a session as your application can always call create before returning the join URL to the user. This way, regardless of the order in which users join, the meeting will always exist when the user tries to join (the first <code class="language-plaintext highlighter-rouge">create</code> call actually creates the meeting; subsequent calls to <code class="language-plaintext highlighter-rouge">create</code> simply return <code class="language-plaintext highlighter-rouge">SUCCESS</code>).</p>

<p>The BigBlueButton server will automatically remove empty meetings that were created but have never had any users after a number of minutes specified by <code class="language-plaintext highlighter-rouge">meetingExpireIfNoUserJoinedInMinutes</code> defined in <a href="https://github.com/bigbluebutton/bigbluebutton/blob/master/bigbluebutton-web/grails-app/conf/bigbluebutton.properties">bigbluebutton.properties</a>.</p>

<p><strong>Resource URL:</strong></p>

<p>http://yourserver.com/bigbluebutton/api/create?[parameters]&amp;checksum=[checksum]</p>

<p><strong>Parameters:</strong></p>

<table class="api-params">
    
    <thead>
        <tr class="header">
            <th>Param Name</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
    
        <tr>
          <td>
            
                <code>name</code>
            
            </td>
          <td>String</td>
          <td>A name for the meeting.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>meetingID</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>A meeting ID that can be used to identify this meeting by the 3rd-party application. <br /><br /> This must be unique to the server that you are calling: different active meetings can not have the same meeting ID. <br /><br /> If you supply a non-unique meeting ID (a meeting is already in progress with the same meeting ID), then if the other parameters in the create call are identical, the create call will succeed (but will receive a warning message in the response). The create call is idempotent: calling multiple times does not have any side effect.  This enables a 3rd-party applications to avoid checking if the meeting is running and always call create before joining each user.<br /><br /> Meeting IDs should only contain upper/lower ASCII letters, numbers, dashes, or underscores.  A good choice for the meeting ID is to generate a <a href="http://en.wikipedia.org/wiki/Globally_unique_identifier">GUID</a> value as this all but guarantees that different meetings will not have the same meetingID.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>attendeePW</code>
            
            
                
                    <p class="api-required">(recommended)</p>
                
            </td>
          <td>String</td>
          <td>The password that the <a href="#join">join</a> URL can later provide as its <code class="language-plaintext highlighter-rouge">password</code> parameter to indicate the user will join as a viewer.  If no <code class="language-plaintext highlighter-rouge">attendeePW</code> is provided, the <code class="language-plaintext highlighter-rouge">create</code> call will return a randomly generated <code class="language-plaintext highlighter-rouge">attendeePW</code> password for the meeting.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>moderatorPW</code>
            
            
                
                    <p class="api-required">(recommended)</p>
                
            </td>
          <td>String</td>
          <td>The password that will <a href="#join">join</a> URL can later provide as its <code class="language-plaintext highlighter-rouge">password</code> parameter to indicate the user will as a moderator.  if no <code class="language-plaintext highlighter-rouge">moderatorPW</code> is provided, <code class="language-plaintext highlighter-rouge">create</code> will return a randomly generated <code class="language-plaintext highlighter-rouge">moderatorPW</code> password for the meeting.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>welcome</code>
            
            </td>
          <td>String</td>
          <td>A welcome message that gets displayed on the chat window when the participant joins. You can include keywords (<code class="language-plaintext highlighter-rouge">%%CONFNAME%%</code>, <code class="language-plaintext highlighter-rouge">%%DIALNUM%%</code>, <code class="language-plaintext highlighter-rouge">%%CONFNUM%%</code>) which will be substituted automatically.<br /><br /> This parameter overrides the default <code class="language-plaintext highlighter-rouge">defaultWelcomeMessage</code> in <code class="language-plaintext highlighter-rouge">bigbluebutton.properties</code>.<br /><br /> The welcome message has limited support for HTML formatting. Be careful about copy/pasted HTML from e.g. MS Word, as it can easily exceed the maximum supported URL length when used on a GET request.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>dialNumber</code>
            
            </td>
          <td>String</td>
          <td>The dial access number that participants can call in using regular phone. You can set a default dial number via <code class="language-plaintext highlighter-rouge">defaultDialAccessNumber</code> in <a href="https://github.com/bigbluebutton/bigbluebutton/blob/master/bigbluebutton-web/grails-app/conf/bigbluebutton.properties">bigbluebutton.properties</a>
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>voiceBridge</code>
            
            </td>
          <td>String</td>
          <td>Voice conference number for the FreeSWITCH voice conference associated with this meeting.  This must be a 5-digit number in the range 10000 to 99999.  If you <a href="/2.2/customize.html#add-a-phone-number-to-the-conference-bridge">add a phone number</a> to your BigBlueButton server, This parameter sets the personal identification number (PIN) that FreeSWITCH will prompt for a phone-only user to enter.  If you want to change this range, edit FreeSWITCH dialplan and <code class="language-plaintext highlighter-rouge">defaultNumDigitsForTelVoice</code> of <a href="https://github.com/bigbluebutton/bigbluebutton/blob/master/bigbluebutton-web/grails-app/conf/bigbluebutton.properties">bigbluebutton.properties</a>.<br /><br />The <code class="language-plaintext highlighter-rouge">voiceBridge</code> number must be different for every meeting.<br /><br />This parameter is optional. If you do not specify a <code class="language-plaintext highlighter-rouge">voiceBridge</code> number, then BigBlueButton will assign a random unused number for the meeting.<br /><br />If do you pass a <code class="language-plaintext highlighter-rouge">voiceBridge</code> number, then you must ensure that each meeting has a unique <code class="language-plaintext highlighter-rouge">voiceBridge</code> number; otherwise, reusing same <code class="language-plaintext highlighter-rouge">voiceBridge</code> number for two different meetings will cause users from one meeting to appear as phone users in the other, which will be very confusing to users in both meetings.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>maxParticipants</code>
            
            </td>
          <td>Number</td>
          <td>Set the maximum number of users allowed to joined the conference at the same time.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>logoutURL</code>
            
            </td>
          <td>String</td>
          <td>The URL that the BigBlueButton client will go to after users click the OK button on the ‘You have been logged out message’.  This overrides the value for <code class="language-plaintext highlighter-rouge">bigbluebutton.web.logoutURL</code> in <a href="https://github.com/bigbluebutton/bigbluebutton/blob/master/bigbluebutton-web/grails-app/conf/bigbluebutton.properties">bigbluebutton.properties</a>.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>record</code>
            
            </td>
          <td>Boolean</td>
          <td>Setting ‘record=true’ instructs the BigBlueButton server to record the media and events in the session for later playback. The default is false.<br /><br /> In order for a playback file to be generated, a moderator must click the Start/Stop Recording button at least once during the sesssion; otherwise, in the absence of any recording marks, the record and playback scripts will not generate a playback file. See also the <code class="language-plaintext highlighter-rouge">autoStartRecording</code> and <code class="language-plaintext highlighter-rouge">allowStartStopRecording</code> parameters in <a href="https://github.com/bigbluebutton/bigbluebutton/blob/master/bigbluebutton-web/grails-app/conf/bigbluebutton.properties">bigbluebutton.properties</a>.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>duration</code>
            
            </td>
          <td>Number</td>
          <td>The maximum length (in minutes) for the meeting.<br /><br /> Normally, the BigBlueButton server will end the meeting when either (a) the last person leaves (it takes a minute or two for the server to clear the meeting from memory) or when the server receives an <a href="#end">end</a> API request with the associated meetingID (everyone is kicked and the meeting is immediately cleared from memory).<br /><br /> BigBlueButton begins tracking the length of a meeting when it is created.  If duration contains a non-zero value, then when the length of the meeting exceeds the duration value the server will immediately end the meeting (equivalent to receiving an end API request at that moment).
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>isBreakout</code>
            
            </td>
          <td>Boolean</td>
          <td>Must be set to <code class="language-plaintext highlighter-rouge">true</code> to create a breakout room.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>parentMeetingID</code>
            
            
                
                    <p class="api-required">(required for breakout room)</p>
                
            </td>
          <td>String</td>
          <td>Must be provided when creating a breakout room, the parent room must be running.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>sequence</code>
            
            
                
                    <p class="api-required">(required for breakout room)</p>
                
            </td>
          <td>Number</td>
          <td>The sequence number of the breakout room.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>freeJoin</code>
            
            
                
                    <p class="api-required">(only breakout room)</p>
                
            </td>
          <td>Boolean</td>
          <td>If set to true, the client will give the user the choice to choose the breakout rooms he wants to join.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>breakoutRoomsEnabled</code>
            
            
                
                    <p class="api-required">Optional(Breakout Room)</p>
                
            </td>
          <td>Boolean</td>
          <td>If set to false, breakout rooms will be disabled.
            <p class="api-default">Default: <code>true</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>breakoutRoomsPrivateChatEnabled</code>
            
            
                
                    <p class="api-required">Optional(Breakout Room)</p>
                
            </td>
          <td>Boolean</td>
          <td>If set to false, the private chat will be disabled in breakout rooms.
            <p class="api-default">Default: <code>true</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>breakoutRoomsRecord</code>
            
            
                
                    <p class="api-required">Optional(Breakout Room)</p>
                
            </td>
          <td>Boolean</td>
          <td>If set to false, breakout rooms will not be recorded.
            <p class="api-default">Default: <code>true</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>meta</code>
            
            </td>
          <td>String</td>
          <td>This is a special parameter type (there is no parameter named just <code class="language-plaintext highlighter-rouge">meta</code>).<br /><br /> You can pass one or more metadata values when creating a meeting. These will be stored by BigBlueButton can be retrieved later via the getMeetingInfo and getRecordings calls.<br /><br /> Examples of the use of the meta parameters are <code class="language-plaintext highlighter-rouge">meta_Presenter=Jane%20Doe</code>, <code class="language-plaintext highlighter-rouge">meta_category=FINANCE</code>, and <code class="language-plaintext highlighter-rouge">meta_TERM=Fall2016</code>.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>moderatorOnlyMessage</code>
            
            </td>
          <td>String</td>
          <td>Display a message to all moderators in the public chat.<br /><br /> The value is interpreted in the same way as the <code class="language-plaintext highlighter-rouge">welcome</code> parameter.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>autoStartRecording</code>
            
            </td>
          <td>Boolean</td>
          <td>Whether to automatically start recording when first user joins (default <code class="language-plaintext highlighter-rouge">false</code>).<br /><br /> When this parameter is <code class="language-plaintext highlighter-rouge">true</code>, the recording UI in BigBlueButton will be initially active. Moderators in the session can still pause and restart recording using the UI control.&lt;br/<br /> NOTE: Don’t pass <code class="language-plaintext highlighter-rouge">autoStartRecording=false</code> and <code class="language-plaintext highlighter-rouge">allowStartStopRecording=false</code> - the moderator won’t be able to start recording!
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>allowStartStopRecording</code>
            
            </td>
          <td>Boolean</td>
          <td>Allow the user to start/stop recording. (default true)<br /><br /> If you set both <code class="language-plaintext highlighter-rouge">allowStartStopRecording=false</code> and <code class="language-plaintext highlighter-rouge">autoStartRecording=true</code>, then the entire length of the session will be recorded, and the moderators in the session will not be able to pause/resume the recording.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>webcamsOnlyForModerator</code>
            
            </td>
          <td>Boolean</td>
          <td>Setting <code class="language-plaintext highlighter-rouge">webcamsOnlyForModerator=true</code> will cause all webcams shared by viewers during this meeting to only appear for moderators (added 1.1)
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>logo</code>
            
            </td>
          <td>String</td>
          <td>Setting <code class="language-plaintext highlighter-rouge">logo=http://www.example.com/my-custom-logo.png</code> will replace the default logo in the Flash client. (added 2.0)
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>bannerText</code>
            
            </td>
          <td>String</td>
          <td>Will set the banner text in the client. (added 2.0)
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>bannerColor</code>
            
            </td>
          <td>String</td>
          <td>Will set the banner background color in the client. The required format is color hex #FFFFFF. (added 2.0)
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>copyright</code>
            
            </td>
          <td>String</td>
          <td>Setting <code class="language-plaintext highlighter-rouge">copyright=My custom copyright</code> will replace the default copyright on the footer of the Flash client. (added 2.0)
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>muteOnStart</code>
            
            </td>
          <td>Boolean</td>
          <td>Setting <code class="language-plaintext highlighter-rouge">true</code> will mute all users when the meeting starts. (added 2.0)
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>allowModsToUnmuteUsers</code>
            
            </td>
          <td>Boolean</td>
          <td>Setting to <code class="language-plaintext highlighter-rouge">true</code> will allow moderators to unmute other users in the meeting. (added 2.2)
            <p class="api-default">Default: <code>false</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>lockSettingsDisableCam</code>
            
            </td>
          <td>Boolean</td>
          <td>Setting <code class="language-plaintext highlighter-rouge">true</code> will prevent users from sharing their camera in the meeting. (added 2.2)
            <p class="api-default">Default: <code>false</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>lockSettingsDisableMic</code>
            
            </td>
          <td>Boolean</td>
          <td>Setting to <code class="language-plaintext highlighter-rouge">true</code> will only allow user to join listen only. (added 2.2)
            <p class="api-default">Default: <code>false</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>lockSettingsDisablePrivateChat</code>
            
            </td>
          <td>Boolean</td>
          <td>Setting to <code class="language-plaintext highlighter-rouge">true</code> will disable private chats in the meeting. (added 2.2)
            <p class="api-default">Default: <code>false</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>lockSettingsDisablePublicChat</code>
            
            </td>
          <td>Boolean</td>
          <td>Setting to <code class="language-plaintext highlighter-rouge">true</code> will disable public chat in the meeting. (added 2.2)
            <p class="api-default">Default: <code>false</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>lockSettingsDisableNote</code>
            
            </td>
          <td>Boolean</td>
          <td>Setting to <code class="language-plaintext highlighter-rouge">true</code> will disable notes in the meeting. (added 2.2)
            <p class="api-default">Default: <code>false</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>lockSettingsLockedLayout</code>
            
            </td>
          <td>Boolean</td>
          <td>Setting to <code class="language-plaintext highlighter-rouge">true</code> will lock the layout in the meeting. (added 2.2)
            <p class="api-default">Default: <code>false</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>lockSettingsLockOnJoin</code>
            
            </td>
          <td>Boolean</td>
          <td>Setting to <code class="language-plaintext highlighter-rouge">false</code> will not apply lock setting to users when they join. (added 2.2)
            <p class="api-default">Default: <code>true</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>lockSettingsLockOnJoinConfigurable</code>
            
            </td>
          <td>Boolean</td>
          <td>Setting to <code class="language-plaintext highlighter-rouge">lockSettingsLockOnJoinConfigurable=true` will allow applying of `lockSettingsLockOnJoin</code>.
            <p class="api-default">Default: <code>false</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>guestPolicy</code>
            
            </td>
          <td>Enum</td>
          <td>Will set the guest policy for the meeting. The guest policy determines whether or not users who send a join request with <code class="language-plaintext highlighter-rouge">guest=true</code> will be allowed to join the meeting. Possible values are ALWAYS_ACCEPT, ALWAYS_DENY, and ASK_MODERATOR.
            <p class="api-default">Default: <code>ALWAYS_ACCEPT</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code class="api-deprecated">keepEvents</code>
            
            </td>
          <td>Boolean</td>
          <td>Removed in 2.3 in favor of <code class="language-plaintext highlighter-rouge">meetingKeepEvents</code> and bigbluebutton.properties <code class="language-plaintext highlighter-rouge">defaultKeepEvents</code>.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>meetingKeepEvents</code>
            
            </td>
          <td>Boolean</td>
          <td>Defaults to the value of <code class="language-plaintext highlighter-rouge">defaultKeepEvents</code>. If <code class="language-plaintext highlighter-rouge">meetingKeepEvents</code> is true BigBlueButton saves meeting events even if the meeting is not recorded (added in 2.3)
            <p class="api-default">Default: <code>false</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>endWhenNoModerator</code>
            
            </td>
          <td>Boolean</td>
          <td>Default <code class="language-plaintext highlighter-rouge">endWhenNoModerator=false</code>. If <code class="language-plaintext highlighter-rouge">endWhenNoModerator</code> is true the meeting will end automatically after a delay - see <code class="language-plaintext highlighter-rouge">endWhenNoModeratorDelayInMinutes</code> (added in 2.3)
            <p class="api-default">Default: <code>false</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>endWhenNoModeratorDelayInMinutes</code>
            
            </td>
          <td>Number</td>
          <td>Defaults to the value of <code class="language-plaintext highlighter-rouge">endWhenNoModeratorDelayInMinutes=1</code>. If <code class="language-plaintext highlighter-rouge">endWhenNoModerator</code> is true, the meeting will be automatically ended after this many minutes (added in 2.2)
            <p class="api-default">Default: <code>1</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>meetingLayout</code>
            
            </td>
          <td>Enum</td>
          <td>Will set the default layout for the meeting. Possible values are: CUSTOM_LAYOUT, SMART_LAYOUT, PRESENTATION_FOCUS, VIDEO_FOCUS. (added 2.4)
            <p class="api-default">Default: <code>SMART_LAYOUT</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>learningDashboardEnabled</code>
            
            </td>
          <td>Boolean</td>
          <td>Default <code class="language-plaintext highlighter-rouge">learningDashboardEnabled=true</code>. When this option is enabled BigBlueButton generates a Dashboard where moderators can view a summary of the activities of the meeting. (added 2.4)
            <p class="api-default">Default: <code>true</code></p>
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>learningDashboardCleanupDelayInMinutes</code>
            
            </td>
          <td>Number</td>
          <td>Default <code class="language-plaintext highlighter-rouge">learningDashboardCleanupDelayInMinutes=2</code>. This option set the delay (in minutes) before the Learning Dashboard become unavailable after the end of the meeting. If this value is zero, the Learning Dashboard will keep available permanently. (added 2.4)
            <p class="api-default">Default: <code>2</code></p>
            </td>
        </tr>
    
    </tbody>
</table>

<!--
$('#tbody-foo tr').map(function() {
    let tr = $(this);
    let name = tr.find('td:eq(0)').text().trim();
    let isRequired = tr.find('td:eq(1)').text().trim() === 'Required';
    let type = tr.find('td:eq(2)').text().trim();
    let description = tr.find('td:eq(3)').html().replaceAll('"', '\\"');

    return `- name: "${name}"
  required: ${isRequired}
  type: "${type}"
  description: "${description}"`
}).get().join('\n\n')
-->

<p><strong>Example Requests:</strong></p>

<ul>
  <li>http://yourserver.com/bigbluebutton/api/create?name=Test&amp;meetingID=test01&amp;checksum=1234</li>
  <li>http://yourserver.com/bigbluebutton/api/create?name=Test&amp;meetingID=test01&amp;moderatorPW=mp&amp;attendeePW=ap&amp;checksum=wxyz</li>
  <li>http://yourserver.com/bigbluebutton/api/create?name=Test&amp;meetingID=test01&amp;moderatorPW=mp&amp;attendeePW=ap&amp;meta_presenter=joe&amp;meta_category=education&amp;checksum=abcd</li>
</ul>

<p><strong>Example Response:</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;response&gt;</span>
  <span class="nt">&lt;returncode&gt;</span>SUCCESS<span class="nt">&lt;/returncode&gt;</span>
  <span class="nt">&lt;meetingID&gt;</span>Test<span class="nt">&lt;/meetingID&gt;</span>
  <span class="nt">&lt;internalMeetingID&gt;</span>640ab2bae07bedc4c163f679a746f7ab7fb5d1fa-1531155809613<span class="nt">&lt;/internalMeetingID&gt;</span>
  <span class="nt">&lt;parentMeetingID&gt;</span>bbb-none<span class="nt">&lt;/parentMeetingID&gt;</span>
  <span class="nt">&lt;attendeePW&gt;</span>ap<span class="nt">&lt;/attendeePW&gt;</span>
  <span class="nt">&lt;moderatorPW&gt;</span>mp<span class="nt">&lt;/moderatorPW&gt;</span>
  <span class="nt">&lt;createTime&gt;</span>1531155809613<span class="nt">&lt;/createTime&gt;</span>
  <span class="nt">&lt;voiceBridge&gt;</span>70757<span class="nt">&lt;/voiceBridge&gt;</span>
  <span class="nt">&lt;dialNumber&gt;</span>613-555-1234<span class="nt">&lt;/dialNumber&gt;</span>
  <span class="nt">&lt;createDate&gt;</span>Mon Jul 09 17:03:29 UTC 2018<span class="nt">&lt;/createDate&gt;</span>
  <span class="nt">&lt;hasUserJoined&gt;</span>false<span class="nt">&lt;/hasUserJoined&gt;</span>
  <span class="nt">&lt;duration&gt;</span>0<span class="nt">&lt;/duration&gt;</span>
  <span class="nt">&lt;hasBeenForciblyEnded&gt;</span>false<span class="nt">&lt;/hasBeenForciblyEnded&gt;</span>
  <span class="nt">&lt;messageKey&gt;</span>duplicateWarning<span class="nt">&lt;/messageKey&gt;</span>
  <span class="nt">&lt;message&gt;</span>This conference was already in existence and may currently be in progress.<span class="nt">&lt;/message&gt;</span>
<span class="nt">&lt;/response&gt;</span>
</code></pre></div></div>

<h3 id="pre-upload-slides">Pre-upload Slides</h3>

<p>You can upload slides within the create call. If you do this, the BigBlueButton server will immediately download and process the slides.</p>

<p>You can pass the slides as a URL or embed the slides in base64 as part of the POST request. For embedding the slides, you have to send a HTTPS POST request (by default, the total size of the POST request can’t exceed 2MB, so embedding very large slides won’t work). The URL Resource has to be the same as the previously described.</p>

<p>In the body part, you would append a simple XML like the example below:</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;modules&gt;</span>
   <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">"presentation"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;document</span> <span class="na">url=</span><span class="s">"http://www.sample-pdf.com/sample.pdf"</span> <span class="na">filename=</span><span class="s">"report.pdf"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;document</span> <span class="na">name=</span><span class="s">"sample-presentation.pdf"</span><span class="nt">&gt;</span>JVBERi0xLjQKJ....
        [clipped here]
        ....0CiUlRU9GCg==
      <span class="nt">&lt;/document&gt;</span>
   <span class="nt">&lt;/module&gt;</span>
<span class="nt">&lt;/modules&gt;</span>
</code></pre></div></div>

<p>When you need to provide a document using a URL, and the document URL does not contain an extension, you can use the <code class="language-plaintext highlighter-rouge">filename</code> parameter, such as <code class="language-plaintext highlighter-rouge">filename=test-results.pdf</code> to help the BigBlueButton server determine the file type (in this example it would be a PDF file).</p>

<p>In the case more than a single document is provided, the first one will be loaded in the client, the processing of the other documents will continue in the background and they will be available for display when the user select one of them from the client.</p>

<p>For more information about the pre-upload slides check the following <a href="http://groups.google.com/group/bigbluebutton-dev/browse_thread/thread/d36ba6ff53e4aa79">link</a>. For a complete example of the pre-upload slides check the following demos: <a href="https://github.com/bigbluebutton/bigbluebutton/blob/master/bbb-api-demo/src/main/webapp/demo7.jsp">demo7</a> and <a href="https://github.com/bigbluebutton/bigbluebutton/blob/master/bbb-api-demo/src/main/webapp/demo8.jsp">demo8</a></p>

<h3 id="end-meeting-callback-url">End meeting callback URL</h3>

<p>You can ask the BigBlueButton server to make a callback to your application when the meeting ends. Upon receiving the callback your application could, for example, change the interface for the user to hide the ‘join’ button.</p>

<p>To specify the callback to BigBlueButton, pass a URL using the meta-parameter <code class="language-plaintext highlighter-rouge">meta_endCallbackUrl</code> on the <code class="language-plaintext highlighter-rouge">create</code> command. When the BigBlueButton server ends the meeting, it will check if <code class="language-plaintext highlighter-rouge">meta_endCallbackUrl</code> is sent URL and, if so, make a HTTP GET request to the given URL.</p>

<p>For example, to specify the callback URL as</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  https://myapp.example.com/callback?meetingID=test01
</code></pre></div></div>

<p>add the following parameter to the <code class="language-plaintext highlighter-rouge">create</code> API call: <code class="language-plaintext highlighter-rouge">&amp;meta_endCallbackUrl=https%3A%2F%2Fmyapp.example.com%2Fcallback%3FmeetingID%3Dtest01</code> (note the callback URL needs to be URLEncoded).</p>

<p>Later, when the meeting ends, BigBlueButton will make an HTTPS GET request to this URL (HTTPS is supported and recommended) and to the URL add an additional parameter: <code class="language-plaintext highlighter-rouge">recordingmarks=true|false</code>.</p>

<p>The value for <code class="language-plaintext highlighter-rouge">recordingmarks</code> will be <code class="language-plaintext highlighter-rouge">true</code> if (a) the meeting was set to be recorded (<code class="language-plaintext highlighter-rouge">record=true</code> was passed on the create API call), and (b) a moderator clicked the Start/Stop Record button during the meeting (which places recording marks in the events). Given the example URL above, here’s the final callback if both (a) and (b) are true:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://myapp.example.com/callback?meetingID=test01&amp;recordingmarks=true
</code></pre></div></div>

<p>Another param is the <code class="language-plaintext highlighter-rouge">meetingEndedURL</code> create param. This create param is a callback to indicate the meeting has ended. This is a duplicate of the endCallbackUrl meta param. We have this separate as we want this param to stay on the server and not propagated to client and recordings. Can be used by scalelite to be notified right away when meeting ends. The meta callback url can be used to inform third parties.</p>

<h3 id="recording-ready-callback-url">Recording ready callback URL</h3>

<p>You can ask the BigBlueButton server to make a callback to your application when the recording for a meeting is ready for viewing. Upon receiving the callback your application could, for example, send the presenter an e-mail to notify them that their recording is ready.</p>

<p>To specify the callback to BigBlueButton, pass a URL using the meta-parameter <code class="language-plaintext highlighter-rouge">meta_bbb-recording-ready-url</code> on the <code class="language-plaintext highlighter-rouge">create</code> command. Later, when the BigBlueButton server finishes processing the recording, it will check if <code class="language-plaintext highlighter-rouge">meta_bbb-recording-ready-url</code> is set and, if so, make a HTTP POST request to the given URL.</p>

<p>For example, given the callback URL</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://example.com/api/v1/recording_status
</code></pre></div></div>

<p>to pass this to BigBlueButton add the following parameter to the <code class="language-plaintext highlighter-rouge">create</code> API call: <code class="language-plaintext highlighter-rouge">&amp;meta_bbb-recording-ready-url=https%3A%2F%2Fexample.com%2Fapi%2Fv1%2Frecording_status</code> (note the callback URL needs to be URLEncoded).</p>

<p>Later, when the recording is ready, the BigBlueButton server will make an HTTPS POST request to this URL (https is supported and recommended).</p>

<p>The POST request body will be in the standard <code class="language-plaintext highlighter-rouge">application/x-www-form-urlencoded</code> format. The body will contain one parameter, named <code class="language-plaintext highlighter-rouge">signed_parameters</code>. The value of this parameter is a JWT (JSON Web Tokens) encoded string.</p>

<p>The JWT will be encoded using the “HS256” method. (i.e. the header should be <code class="language-plaintext highlighter-rouge">{ "typ": "JWT", "alg": "HS256" }</code> ). The payload will contain a the following JSON keys:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">meeting_id</code> - The value will be the meeting_id (as provided on the BigBlueButton create API call).</li>
  <li><code class="language-plaintext highlighter-rouge">record_id</code> - The identifier of the specific recording to which the notification applies. This corresponds to the IDs returned in the getRecordings api, and the <code class="language-plaintext highlighter-rouge">internalMeetingId</code> field on the getMeetingInfo request.</li>
</ul>

<p>The secret used to sign the JWT message will be the shared secret of the BigBlueButton API endpoint that was used to create the original meeting.</p>

<p>The receiving endpoint should respond with one of the following HTTP codes to indicate status, as described below. Any response body provided will be ignored, although it may be logged as part of error handling.</p>

<table>
  <thead>
    <tr>
      <th>Response Code</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2XX</td>
      <td>All HTTP 2XX codes are treated the same way - the endpoint has received the notification, and the recording system will consider the callback completed. I suggest using the 200, 202, or 204 codes as appropriate to your application.</td>
    </tr>
    <tr>
      <td>3XX</td>
      <td>Redirections are not supported, and will be treated as an error.</td>
    </tr>
    <tr>
      <td>401</td>
      <td>The shared secret does not match.</td>
    </tr>
    <tr>
      <td>410</td>
      <td>The callback is for a meeting/session/recording that has been deleted in the application. This code may in the future trigger the recording system to cancel the recording processing or unpublish and delete the recording.</td>
    </tr>
  </tbody>
</table>

<p>All other HTTP response codes will be treated as transient errors.</p>

<h2 id="join">join</h2>

<p>Joins a user to the meeting specified in the meetingID parameter.</p>

<p><strong>Resource URL:</strong></p>

<p>http://yourserver.com/bigbluebutton/api/join?[parameters]&amp;checksum=[checksum]</p>

<p><strong>Parameters:</strong></p>

<table class="api-params">
    
    <thead>
        <tr class="header">
            <th>Param Name</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
    
        <tr>
          <td>
            
                <code>fullName</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>The full name that is to be used to identify this user to other conference attendees.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>meetingID</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>The meeting ID that identifies the meeting you are attempting to join.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>password</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>The password that this attendee is using. If the moderator password is supplied, he will be given moderator status (and the same for attendee password, etc)
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>createTime</code>
            
            </td>
          <td>String</td>
          <td>Third-party apps using the API can now pass createTime parameter (which was created in the create call), BigBlueButton will ensure it matches the ‘createTime’ for the session.  If they differ, BigBlueButton will not proceed with the join request. This prevents a user from reusing their join URL for a subsequent session with the same meetingID.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>userID</code>
            
            </td>
          <td>String</td>
          <td>An identifier for this user that will help your application to identify which person this is.  This user ID will be returned for this user in the getMeetingInfo API call so that you can check
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>webVoiceConf</code>
            
            </td>
          <td>String</td>
          <td>If you want to pass in a custom voice-extension when a user joins the voice conference using voip. This is useful if you want to collect more info in you Call Detail Records about the user joining the conference. You need to modify your /etc/asterisk/bbb-extensions.conf to handle this new extensions.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>configToken</code>
            
            </td>
          <td>String</td>
          <td>The token returned by a setConfigXML API call.  This causes the BigBlueButton client to load the config.xml associated with the token (not the default config.xml)
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>defaultLayout</code>
            
            </td>
          <td>String</td>
          <td>The layout name to be loaded first when the application is loaded.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>avatarURL</code>
            
            </td>
          <td>String</td>
          <td>The link for the user’s avatar to be displayed (default can be enabled/disabled and set with “useDefaultAvatar“ and “defaultAvatarURL“ in bbb-web.properties).
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>redirect</code>
            
            </td>
          <td>String</td>
          <td>The default behaviour of the JOIN API is to redirect the browser to the Flash client when the JOIN call succeeds. There have been requests if it’s possible to embed the Flash client in a “container” page and that the client starts as a hidden DIV tag which becomes visible on the successful JOIN. Setting this variable to FALSE will not redirect the browser but returns an XML instead whether the JOIN call has succeeded or not. The third party app is responsible for displaying the client to the user.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>clientURL</code>
            
            </td>
          <td>String</td>
          <td>Some third party apps what to display their own custom client. These apps can pass the URL containing the custom client and when redirect is not set to false, the browser will get redirected to the value of clientURL.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code class="api-deprecated">joinViaHtml5</code>
            
            </td>
          <td>String</td>
          <td>Set to “true” to force the HTML5 client to load for the user. (removed in 2.3 since HTML5 is the only client)
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>guest</code>
            
            </td>
          <td>String</td>
          <td>Set to “true” to indicate that the user is a guest, otherwise do NOT send this parameter.
            
            </td>
        </tr>
    
    </tbody>
</table>

<!--
$('#tbody-foo tr').map(function() {
    let tr = $(this);
    let name = tr.find('td:eq(0)').text().trim();
    let isRequired = tr.find('td:eq(1)').text().trim() === 'Required';
    let type = tr.find('td:eq(2)').text().trim();
    let description = tr.find('td:eq(3)').html().replaceAll('"', '\\"');

    return `- name: "${name}"
  required: ${isRequired}
  type: "${type}"
  description: "${description}"`
}).get().join('\n\n')
-->

<p><strong>Example Requests:</strong></p>

<ul>
  <li>http://yourserver.com/bigbluebutton/api/join?meetingID=test01&amp;password=mp&amp;fullName=John&amp;checksum=1234</li>
  <li>http://yourserver.com/bigbluebutton/api/join?meetingID=test01&amp;password=ap&amp;fullName=Mark&amp;checksum=wxyz</li>
  <li>http://yourserver.com/bigbluebutton/api/join?meetingID=test01&amp;password=ap&amp;fullName=Chris&amp;createTime=273648&amp;checksum=abcd</li>
</ul>

<p><strong>Example Response:</strong></p>

<p>There is only an XML response for this call if the <code class="language-plaintext highlighter-rouge">redirect</code> parameter is set to <code class="language-plaintext highlighter-rouge">true</code>. You should simply redirect the user to the call URL, and they will be entered into the meeting.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;response&gt;</span>
  <span class="nt">&lt;returncode&gt;</span>SUCCESS<span class="nt">&lt;/returncode&gt;</span>
  <span class="nt">&lt;messageKey&gt;</span>successfullyJoined<span class="nt">&lt;/messageKey&gt;</span>
  <span class="nt">&lt;message&gt;</span>You have joined successfully.<span class="nt">&lt;/message&gt;</span>
  <span class="nt">&lt;meeting_id&gt;</span>640ab2bae07bedc4c163f679a746f7ab7fb5d1fa-1531155809613<span class="nt">&lt;/meeting_id&gt;</span>
  <span class="nt">&lt;user_id&gt;</span>w_euxnssffnsbs<span class="nt">&lt;/user_id&gt;</span>
  <span class="nt">&lt;auth_token&gt;</span>14mm5y3eurjw<span class="nt">&lt;/auth_token&gt;</span>
  <span class="nt">&lt;session_token&gt;</span>ai1wqj8wb6s7rnk0<span class="nt">&lt;/session_token&gt;</span>
  <span class="nt">&lt;url&gt;</span>https://yourserver.com/client/BigBlueButton.html?sessionToken=ai1wqj8wb6s7rnk0<span class="nt">&lt;/url&gt;</span>
<span class="nt">&lt;/response&gt;</span>
</code></pre></div></div>

<h2 id="ismeetingrunning">isMeetingRunning</h2>

<p>This call enables you to simply check on whether or not a meeting is running by looking it up with your meeting ID.</p>

<p><strong>Resource URL:</strong></p>

<p>http://yourserver.com/bigbluebutton/api/isMeetingRunning?[parameters]&amp;checksum=[checksum]</p>

<p><strong>Parameters:</strong></p>

<table class="api-params">
    
    <thead>
        <tr class="header">
            <th>Param Name</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
    
        <tr>
          <td>
            
                <code>meetingID</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>The meeting ID that identifies the meeting you are attempting to check on.
            
            </td>
        </tr>
    
    </tbody>
</table>

<!--
$('#tbody-foo tr').map(function() {
    let tr = $(this);
    let name = tr.find('td:eq(0)').text().trim();
    let isRequired = tr.find('td:eq(1)').text().trim() === 'Required';
    let type = tr.find('td:eq(2)').text().trim();
    let description = tr.find('td:eq(3)').html().replaceAll('"', '\\"');

    return `- name: "${name}"
  required: ${isRequired}
  type: "${type}"
  description: "${description}"`
}).get().join('\n\n')
-->

<p><strong>Example Requests:</strong></p>

<p>http://yourserver.com/bigbluebutton/api/isMeetingRunning?meetingID=test01&amp;checksum=1234</p>

<p><strong>Example Response:</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;response&gt;</span>
  <span class="nt">&lt;returncode&gt;</span>SUCCESS<span class="nt">&lt;/returncode&gt;</span>
  <span class="nt">&lt;running&gt;</span>true<span class="nt">&lt;/running&gt;</span>
<span class="nt">&lt;/response&gt;</span>
</code></pre></div></div>

<p>running can be “true” or “false” that signals whether a meeting with this ID is currently running.</p>

<h2 id="end">end</h2>

<p>Use this to forcibly end a meeting and kick all participants out of the meeting.</p>

<p><strong>Resource URL:</strong></p>

<ul>
  <li>http://yourserver.com/bigbluebutton/api/end?[parameters]&amp;checksum=[checksum]</li>
</ul>

<p><strong>Parameters:</strong></p>

<table class="api-params">
    
    <thead>
        <tr class="header">
            <th>Param Name</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
    
        <tr>
          <td>
            
                <code>meetingID</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>The meeting ID that identifies the meeting you are attempting to end.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>password</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>The moderator password for this meeting. You can not end a meeting using the attendee password.
            
            </td>
        </tr>
    
    </tbody>
</table>

<!--
$('#tbody-foo tr').map(function() {
    let tr = $(this);
    let name = tr.find('td:eq(0)').text().trim();
    let isRequired = tr.find('td:eq(1)').text().trim() === 'Required';
    let type = tr.find('td:eq(2)').text().trim();
    let description = tr.find('td:eq(3)').html().replaceAll('"', '\\"');

    return `- name: "${name}"
  required: ${isRequired}
  type: "${type}"
  description: "${description}"`
}).get().join('\n\n')
-->

<p><strong>Example Requests:</strong></p>

<ul>
  <li>http://yourserver.com/bigbluebutton/api/end?meetingID=1234567890&amp;password=mp&amp;checksum=1234</li>
</ul>

<p><strong>Example Response:</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;response&gt;</span>
  <span class="nt">&lt;returncode&gt;</span>SUCCESS<span class="nt">&lt;/returncode&gt;</span>
  <span class="nt">&lt;messageKey&gt;</span>sentEndMeetingRequest<span class="nt">&lt;/messageKey&gt;</span>
  <span class="nt">&lt;message&gt;</span>
    A request to end the meeting was sent.  Please wait a few seconds, and then use the getMeetingInfo or isMeetingRunning API calls to verify that it was ended
  <span class="nt">&lt;/message&gt;</span>
<span class="nt">&lt;/response&gt;</span>
</code></pre></div></div>

<p><strong>IMPORTANT NOTE:</strong> You should note that when you call end meeting, it is simply sending a request to the backend (Red5) server that is handling all the conference traffic. That backend server will immediately attempt to send every connected client a logout event, kicking them from the meeting. It will then disconnect them, and the meeting will be ended. However, this may take several seconds, depending on network conditions. Therefore, the end meeting call will return a success as soon as the request is sent. But to be sure that it completed, you should then check back a few seconds later by using the <code class="language-plaintext highlighter-rouge">getMeetingInfo</code> or <code class="language-plaintext highlighter-rouge">isMeetingRunning</code> calls to verify that all participants have left the meeting and that it successfully ended.</p>

<h2 id="getmeetinginfo">getMeetingInfo</h2>

<p>This call will return all of a meeting’s information, including the list of attendees as well as start and end times.</p>

<p>Resource URL:</p>

<ul>
  <li>http://yourserver.com/bigbluebutton/api/getMeetingInfo?[parameters]&amp;checksum=[checksum]</li>
</ul>

<p><strong>Parameters:</strong></p>

<table class="api-params">
    
    <thead>
        <tr class="header">
            <th>Param Name</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
    
        <tr>
          <td>
            
                <code>meetingID</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>The meeting ID that identifies the meeting you are attempting to check on.
            
            </td>
        </tr>
    
    </tbody>
</table>

<!--
$('#tbody-foo tr').map(function() {
    let tr = $(this);
    let name = tr.find('td:eq(0)').text().trim();
    let isRequired = tr.find('td:eq(1)').text().trim() === 'Required';
    let type = tr.find('td:eq(2)').text().trim();
    let description = tr.find('td:eq(3)').html().replaceAll('"', '\\"');

    return `- name: "${name}"
  required: ${isRequired}
  type: "${type}"
  description: "${description}"`
}).get().join('\n\n')
-->

<p><strong>Example Requests:</strong></p>

<ul>
  <li>http://yourserver.com/bigbluebutton/api/getMeetingInfo?meetingID=test01&amp;checksum=1234</li>
</ul>

<p><strong>Example Response:</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;response&gt;</span>
  <span class="nt">&lt;returncode&gt;</span>SUCCESS<span class="nt">&lt;/returncode&gt;</span>
  <span class="nt">&lt;meetingName&gt;</span>Demo Meeting<span class="nt">&lt;/meetingName&gt;</span>
  <span class="nt">&lt;meetingID&gt;</span>Demo Meeting<span class="nt">&lt;/meetingID&gt;</span>
  <span class="nt">&lt;internalMeetingID&gt;</span>183f0bf3a0982a127bdb8161e0c44eb696b3e75c-1531240585189<span class="nt">&lt;/internalMeetingID&gt;</span>
  <span class="nt">&lt;createTime&gt;</span>1531240585189<span class="nt">&lt;/createTime&gt;</span>
  <span class="nt">&lt;createDate&gt;</span>Tue Jul 10 16:36:25 UTC 2018<span class="nt">&lt;/createDate&gt;</span>
  <span class="nt">&lt;voiceBridge&gt;</span>70066<span class="nt">&lt;/voiceBridge&gt;</span>
  <span class="nt">&lt;dialNumber&gt;</span>613-555-1234<span class="nt">&lt;/dialNumber&gt;</span>
  <span class="nt">&lt;attendeePW&gt;</span>ap<span class="nt">&lt;/attendeePW&gt;</span>
  <span class="nt">&lt;moderatorPW&gt;</span>mp<span class="nt">&lt;/moderatorPW&gt;</span>
  <span class="nt">&lt;running&gt;</span>true<span class="nt">&lt;/running&gt;</span>
  <span class="nt">&lt;duration&gt;</span>0<span class="nt">&lt;/duration&gt;</span>
  <span class="nt">&lt;hasUserJoined&gt;</span>true<span class="nt">&lt;/hasUserJoined&gt;</span>
  <span class="nt">&lt;recording&gt;</span>false<span class="nt">&lt;/recording&gt;</span>
  <span class="nt">&lt;hasBeenForciblyEnded&gt;</span>false<span class="nt">&lt;/hasBeenForciblyEnded&gt;</span>
  <span class="nt">&lt;startTime&gt;</span>1531240585239<span class="nt">&lt;/startTime&gt;</span>
  <span class="nt">&lt;endTime&gt;</span>0<span class="nt">&lt;/endTime&gt;</span>
  <span class="nt">&lt;participantCount&gt;</span>2<span class="nt">&lt;/participantCount&gt;</span>
  <span class="nt">&lt;listenerCount&gt;</span>1<span class="nt">&lt;/listenerCount&gt;</span>
  <span class="nt">&lt;voiceParticipantCount&gt;</span>1<span class="nt">&lt;/voiceParticipantCount&gt;</span>
  <span class="nt">&lt;videoCount&gt;</span>1<span class="nt">&lt;/videoCount&gt;</span>
  <span class="nt">&lt;maxUsers&gt;</span>20<span class="nt">&lt;/maxUsers&gt;</span>
  <span class="nt">&lt;moderatorCount&gt;</span>1<span class="nt">&lt;/moderatorCount&gt;</span>
  <span class="nt">&lt;attendees&gt;</span>
    <span class="nt">&lt;attendee&gt;</span>
      <span class="nt">&lt;userID&gt;</span>w_2wzzszfaptsp<span class="nt">&lt;/userID&gt;</span>
      <span class="nt">&lt;fullName&gt;</span>stu<span class="nt">&lt;/fullName&gt;</span>
      <span class="nt">&lt;role&gt;</span>VIEWER<span class="nt">&lt;/role&gt;</span>
      <span class="nt">&lt;isPresenter&gt;</span>false<span class="nt">&lt;/isPresenter&gt;</span>
      <span class="nt">&lt;isListeningOnly&gt;</span>true<span class="nt">&lt;/isListeningOnly&gt;</span>
      <span class="nt">&lt;hasJoinedVoice&gt;</span>false<span class="nt">&lt;/hasJoinedVoice&gt;</span>
      <span class="nt">&lt;hasVideo&gt;</span>false<span class="nt">&lt;/hasVideo&gt;</span>
      <span class="nt">&lt;clientType&gt;</span>FLASH<span class="nt">&lt;/clientType&gt;</span>
    <span class="nt">&lt;/attendee&gt;</span>
    <span class="nt">&lt;attendee&gt;</span>
      <span class="nt">&lt;userID&gt;</span>w_eo7lxnx3vwuj<span class="nt">&lt;/userID&gt;</span>
      <span class="nt">&lt;fullName&gt;</span>mod<span class="nt">&lt;/fullName&gt;</span>
      <span class="nt">&lt;role&gt;</span>MODERATOR<span class="nt">&lt;/role&gt;</span>
      <span class="nt">&lt;isPresenter&gt;</span>true<span class="nt">&lt;/isPresenter&gt;</span>
      <span class="nt">&lt;isListeningOnly&gt;</span>false<span class="nt">&lt;/isListeningOnly&gt;</span>
      <span class="nt">&lt;hasJoinedVoice&gt;</span>true<span class="nt">&lt;/hasJoinedVoice&gt;</span>
      <span class="nt">&lt;hasVideo&gt;</span>true<span class="nt">&lt;/hasVideo&gt;</span>
      <span class="nt">&lt;clientType&gt;</span>HTML5<span class="nt">&lt;/clientType&gt;</span>
    <span class="nt">&lt;/attendee&gt;</span>
  <span class="nt">&lt;/attendees&gt;</span>
  <span class="nt">&lt;metadata</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;isBreakout&gt;</span>false<span class="nt">&lt;/isBreakout&gt;</span>
<span class="nt">&lt;/response&gt;</span>
</code></pre></div></div>

<p>If a meeting has spawned breakout rooms, then <code class="language-plaintext highlighter-rouge">getMeetingInfo</code> will also a list of meetingIDs for the breakout rooms.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> &lt;response&gt;
  &lt;returncode&gt;success&lt;/returncode&gt;
  ...
     &lt;breakoutRooms&gt;
        &lt;breakout&gt;breakout-room-id-1&lt;/breakout&gt;
        &lt;breakout&gt;breakout-room-id-2&lt;/breakout&gt;
        &lt;breakout&gt;breakout-room-id-3&lt;/breakout&gt;
     &lt;/breakoutRooms&gt;
 &lt;/response&gt;
</code></pre></div></div>

<p>If a meeting is a breakout room itself, then <code class="language-plaintext highlighter-rouge">getMeetingInfo</code> will also return a link to the parent meetingID.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;response&gt;
  &lt;returncode&gt;success&lt;/returncode&gt;
  ...
    &lt;breakout&gt;
     &lt;parentMeetingID&gt;ParentMeetingId&lt;/parentMeetingID&gt;
     &lt;sequence&gt;1&lt;/sequence&gt;
     &lt;freeJoin&gt;false&lt;/freeJoin&gt;
    &lt;/breakout&gt;
 &lt;/response&gt;
</code></pre></div></div>

<h2 id="getmeetings">getMeetings</h2>

<p>This call will return a list of all the meetings found on this server.</p>

<p><strong>Resource URL:</strong></p>

<p>http://yourserver.com/bigbluebutton/api/getMeetings?checksum=[checksum]</p>

<p><strong>Parameters:</strong></p>

<p>Since BigBlueButton 0.80, it is no more required to pass any parameter for this call.</p>

<p><strong>Example Requests:</strong></p>

<p>http://yourserver.com/bigbluebutton/api/getMeetings?checksum=1234</p>

<p><strong>Example Response:</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;response&gt;</span>
  <span class="nt">&lt;returncode&gt;</span>SUCCESS<span class="nt">&lt;/returncode&gt;</span>
  <span class="nt">&lt;meetings&gt;</span>
    <span class="nt">&lt;meeting&gt;</span>
      <span class="nt">&lt;meetingName&gt;</span>Demo Meeting<span class="nt">&lt;/meetingName&gt;</span>
      <span class="nt">&lt;meetingID&gt;</span>Demo Meeting<span class="nt">&lt;/meetingID&gt;</span>
      <span class="nt">&lt;internalMeetingID&gt;</span>183f0bf3a0982a127bdb8161e0c44eb696b3e75c-1531241258036<span class="nt">&lt;/internalMeetingID&gt;</span>
      <span class="nt">&lt;createTime&gt;</span>1531241258036<span class="nt">&lt;/createTime&gt;</span>
      <span class="nt">&lt;createDate&gt;</span>Tue Jul 10 16:47:38 UTC 2018<span class="nt">&lt;/createDate&gt;</span>
      <span class="nt">&lt;voiceBridge&gt;</span>70066<span class="nt">&lt;/voiceBridge&gt;</span>
      <span class="nt">&lt;dialNumber&gt;</span>613-555-1234<span class="nt">&lt;/dialNumber&gt;</span>
      <span class="nt">&lt;attendeePW&gt;</span>ap<span class="nt">&lt;/attendeePW&gt;</span>
      <span class="nt">&lt;moderatorPW&gt;</span>mp<span class="nt">&lt;/moderatorPW&gt;</span>
      <span class="nt">&lt;running&gt;</span>false<span class="nt">&lt;/running&gt;</span>
      <span class="nt">&lt;duration&gt;</span>0<span class="nt">&lt;/duration&gt;</span>
      <span class="nt">&lt;hasUserJoined&gt;</span>false<span class="nt">&lt;/hasUserJoined&gt;</span>
      <span class="nt">&lt;recording&gt;</span>false<span class="nt">&lt;/recording&gt;</span>
      <span class="nt">&lt;hasBeenForciblyEnded&gt;</span>false<span class="nt">&lt;/hasBeenForciblyEnded&gt;</span>
      <span class="nt">&lt;startTime&gt;</span>1531241258074<span class="nt">&lt;/startTime&gt;</span>
      <span class="nt">&lt;endTime&gt;</span>0<span class="nt">&lt;/endTime&gt;</span>
      <span class="nt">&lt;participantCount&gt;</span>0<span class="nt">&lt;/participantCount&gt;</span>
      <span class="nt">&lt;listenerCount&gt;</span>0<span class="nt">&lt;/listenerCount&gt;</span>
      <span class="nt">&lt;voiceParticipantCount&gt;</span>0<span class="nt">&lt;/voiceParticipantCount&gt;</span>
      <span class="nt">&lt;videoCount&gt;</span>0<span class="nt">&lt;/videoCount&gt;</span>
      <span class="nt">&lt;maxUsers&gt;</span>0<span class="nt">&lt;/maxUsers&gt;</span>
      <span class="nt">&lt;moderatorCount&gt;</span>0<span class="nt">&lt;/moderatorCount&gt;</span>
      <span class="nt">&lt;attendees</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;metadata</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;isBreakout&gt;</span>false<span class="nt">&lt;/isBreakout&gt;</span>
    <span class="nt">&lt;/meeting&gt;</span>
  <span class="nt">&lt;/meetings&gt;</span>
<span class="nt">&lt;/response&gt;</span>
</code></pre></div></div>

<h2 id="getrecordings">getRecordings</h2>

<p>Retrieves the recordings that are available for playback for a given meetingID (or set of meeting IDs).</p>

<p><strong>Resource URL:</strong></p>

<p>http://yourserver.com/bigbluebutton/api/getRecordings?[parameters]&amp;checksum=[checksum]</p>

<p><strong>Parameters:</strong></p>

<table class="api-params">
    
    <thead>
        <tr class="header">
            <th>Param Name</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
    
        <tr>
          <td>
            
                <code>meetingID</code>
            
            </td>
          <td>String</td>
          <td>A meeting ID for get the recordings. It can be a set of meetingIDs separate by commas. If the meeting ID is not specified, it will get ALL the recordings. If a recordID is specified, the meetingID is ignored.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>recordID</code>
            
            </td>
          <td>String</td>
          <td>A record ID for get the recordings. It can be a set of recordIDs separate by commas. If the record ID is not specified, it will use meeting ID as the main criteria. If neither the meeting ID is specified, it will get ALL the recordings. The recordID can also be used as a wildcard by including only the first characters in the string.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>state</code>
            
            </td>
          <td>String</td>
          <td>Since version 1.0 the recording has an attribute that shows a state that Indicates if the recording is [processing|processed|published|unpublished|deleted]. The parameter state can be used to filter results. It can be a set of states separate by commas. If it is not specified only the states [published|unpublished] are considered (same as in previous versions). If it is specified as “any”, recordings in all states are included.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>meta</code>
            
            </td>
          <td>String</td>
          <td>You can pass one or more metadata values to filter the recordings returned. The format of these parameters is the same as the metadata passed to the <code class="language-plaintext highlighter-rouge">create</code> call. For more information see <a href="http://docs.bigbluebutton.org/dev/api.html#create">the docs for the create call</a>.
            
            </td>
        </tr>
    
    </tbody>
</table>

<!--
$('#tbody-foo tr').map(function() {
    let tr = $(this);
    let name = tr.find('td:eq(0)').text().trim();
    let isRequired = tr.find('td:eq(1)').text().trim() === 'Required';
    let type = tr.find('td:eq(2)').text().trim();
    let description = tr.find('td:eq(3)').html().replaceAll('"', '\\"');

    return `- name: "${name}"
  required: ${isRequired}
  type: "${type}"
  description: "${description}"`
}).get().join('\n\n')
-->

<p><strong>Example Requests:</strong></p>

<ul>
  <li>http://yourserver.com/bigbluebutton/api/getRecordings?checksum=1234</li>
  <li>http://yourserver.com/bigbluebutton/api/getRecordings?meetingID=CS101&amp;checksum=abcd</li>
  <li>http://yourserver.com/bigbluebutton/api/getRecordings?meetingID=CS101,CS102&amp;checksum=wxyz</li>
  <li>http://yourserver.com/bigbluebutton/api/getRecordings?recordID=652c9eb4c07ad49283554c76301d68770326bd93-1462283509434&amp;checksum=wxyz</li>
  <li>http://yourserver.com/bigbluebutton/api/getRecordings?recordID=652c9eb4c07ad49283554c76301d68770326bd93-1462283509434,9e359d17635e163c4388281567601d7fecf29df8-1461882579628&amp;checksum=wxyz</li>
  <li>http://yourserver.com/bigbluebutton/api/getRecordings?recordID=652c9eb4c07ad49283554c76301d68770326bd93&amp;checksum=wxyz</li>
  <li>http://yourserver.com/bigbluebutton/api/getRecordings?recordID=652c9eb4c07ad49283554c76301d68770326bd93,9e359d17635e163c4388281567601d7fecf29df8&amp;checksum=wxyz</li>
</ul>

<p><strong>Example Response:</strong></p>

<p>Here the <code class="language-plaintext highlighter-rouge">getRecordings</code> API call returned back two recordings for the meetingID <code class="language-plaintext highlighter-rouge">c637ba21adcd0191f48f5c4bf23fab0f96ed5c18</code>. Each recording had two formats: <code class="language-plaintext highlighter-rouge">podcast</code> and <code class="language-plaintext highlighter-rouge">presentation</code>.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;response&gt;</span>
   <span class="nt">&lt;returncode&gt;</span>SUCCESS<span class="nt">&lt;/returncode&gt;</span>
   <span class="nt">&lt;recordings&gt;</span>
      <span class="nt">&lt;recording&gt;</span>
         <span class="nt">&lt;recordID&gt;</span>ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124<span class="nt">&lt;/recordID&gt;</span>
         <span class="nt">&lt;meetingID&gt;</span>c637ba21adcd0191f48f5c4bf23fab0f96ed5c18<span class="nt">&lt;/meetingID&gt;</span>
         <span class="nt">&lt;internalMeetingID&gt;</span>ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124<span class="nt">&lt;/internalMeetingID&gt;</span>
         <span class="nt">&lt;name&gt;</span>Fred's Room<span class="nt">&lt;/name&gt;</span>
         <span class="nt">&lt;isBreakout&gt;</span>false<span class="nt">&lt;/isBreakout&gt;</span>
         <span class="nt">&lt;published&gt;</span>true<span class="nt">&lt;/published&gt;</span>
         <span class="nt">&lt;state&gt;</span>published<span class="nt">&lt;/state&gt;</span>
         <span class="nt">&lt;startTime&gt;</span>1530718721124<span class="nt">&lt;/startTime&gt;</span>
         <span class="nt">&lt;endTime&gt;</span>1530718810456<span class="nt">&lt;/endTime&gt;</span>
         <span class="nt">&lt;participants&gt;</span>3<span class="nt">&lt;/participants&gt;</span>
         <span class="nt">&lt;metadata&gt;</span>
            <span class="nt">&lt;isBreakout&gt;</span>false<span class="nt">&lt;/isBreakout&gt;</span>
            <span class="nt">&lt;meetingName&gt;</span>Fred's Room<span class="nt">&lt;/meetingName&gt;</span>
            <span class="nt">&lt;gl-listed&gt;</span>false<span class="nt">&lt;/gl-listed&gt;</span>
            <span class="nt">&lt;meetingId&gt;</span>c637ba21adcd0191f48f5c4bf23fab0f96ed5c18<span class="nt">&lt;/meetingId&gt;</span>
         <span class="nt">&lt;/metadata&gt;</span>
         <span class="nt">&lt;playback&gt;</span>
            <span class="nt">&lt;format&gt;</span>
               <span class="nt">&lt;type&gt;</span>podcast<span class="nt">&lt;/type&gt;</span>
               <span class="nt">&lt;url&gt;</span>https://demo.bigbluebutton.org/podcast/ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124/audio.ogg<span class="nt">&lt;/url&gt;</span>
               <span class="nt">&lt;processingTime&gt;</span>0<span class="nt">&lt;/processingTime&gt;</span>
               <span class="nt">&lt;length&gt;</span>0<span class="nt">&lt;/length&gt;</span>
            <span class="nt">&lt;/format&gt;</span>
            <span class="nt">&lt;format&gt;</span>
               <span class="nt">&lt;type&gt;</span>presentation<span class="nt">&lt;/type&gt;</span>
               <span class="nt">&lt;url&gt;</span>https://demo.bigbluebutton.org/playback/presentation/2.0/playback.html?meetingId=ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124<span class="nt">&lt;/url&gt;</span>
               <span class="nt">&lt;processingTime&gt;</span>7177<span class="nt">&lt;/processingTime&gt;</span>
               <span class="nt">&lt;length&gt;</span>0<span class="nt">&lt;/length&gt;</span>
               <span class="nt">&lt;preview&gt;</span>
                  <span class="nt">&lt;images&gt;</span>
                     <span class="nt">&lt;image</span> <span class="na">alt=</span><span class="s">"Welcome to"</span> <span class="na">height=</span><span class="s">"136"</span> <span class="na">width=</span><span class="s">"176"</span><span class="nt">&gt;</span>https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530718721134/thumbnails/thumb-1.png<span class="nt">&lt;/image&gt;</span>
                     <span class="nt">&lt;image</span> <span class="na">alt=</span><span class="s">"(this slide left blank for use as a whiteboard)"</span> <span class="na">height=</span><span class="s">"136"</span> <span class="na">width=</span><span class="s">"176"</span><span class="nt">&gt;</span>https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530718721134/thumbnails/thumb-2.png<span class="nt">&lt;/image&gt;</span>
                     <span class="nt">&lt;image</span> <span class="na">alt=</span><span class="s">"(this slide left blank for use as a whiteboard)"</span> <span class="na">height=</span><span class="s">"136"</span> <span class="na">width=</span><span class="s">"176"</span><span class="nt">&gt;</span>https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530718721124/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530718721134/thumbnails/thumb-3.png<span class="nt">&lt;/image&gt;</span>
                  <span class="nt">&lt;/images&gt;</span>
               <span class="nt">&lt;/preview&gt;</span>
            <span class="nt">&lt;/format&gt;</span>
         <span class="nt">&lt;/playback&gt;</span>
      <span class="nt">&lt;/recording&gt;</span>
      <span class="nt">&lt;recording&gt;</span>
         <span class="nt">&lt;recordID&gt;</span>ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111<span class="nt">&lt;/recordID&gt;</span>
         <span class="nt">&lt;meetingID&gt;</span>c637ba21adcd0191f48f5c4bf23fab0f96ed5c18<span class="nt">&lt;/meetingID&gt;</span>
         <span class="nt">&lt;internalMeetingID&gt;</span>ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111<span class="nt">&lt;/internalMeetingID&gt;</span>
         <span class="nt">&lt;name&gt;</span>Fred's Room<span class="nt">&lt;/name&gt;</span>
         <span class="nt">&lt;isBreakout&gt;</span>false<span class="nt">&lt;/isBreakout&gt;</span>
         <span class="nt">&lt;published&gt;</span>true<span class="nt">&lt;/published&gt;</span>
         <span class="nt">&lt;state&gt;</span>published<span class="nt">&lt;/state&gt;</span>
         <span class="nt">&lt;startTime&gt;</span>1530278898111<span class="nt">&lt;/startTime&gt;</span>
         <span class="nt">&lt;endTime&gt;</span>1530281194326<span class="nt">&lt;/endTime&gt;</span>
         <span class="nt">&lt;participants&gt;</span>7<span class="nt">&lt;/participants&gt;</span>
         <span class="nt">&lt;metadata&gt;</span>
            <span class="nt">&lt;meetingName&gt;</span>Fred's Room<span class="nt">&lt;/meetingName&gt;</span>
            <span class="nt">&lt;isBreakout&gt;</span>false<span class="nt">&lt;/isBreakout&gt;</span>
            <span class="nt">&lt;gl-listed&gt;</span>true<span class="nt">&lt;/gl-listed&gt;</span>
            <span class="nt">&lt;meetingId&gt;</span>c637ba21adcd0191f48f5c4bf23fab0f96ed5c18<span class="nt">&lt;/meetingId&gt;</span>
         <span class="nt">&lt;/metadata&gt;</span>
         <span class="nt">&lt;playback&gt;</span>
            <span class="nt">&lt;format&gt;</span>
               <span class="nt">&lt;type&gt;</span>podcast<span class="nt">&lt;/type&gt;</span>
               <span class="nt">&lt;url&gt;</span>https://demo.bigbluebutton.org/podcast/ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111/audio.ogg<span class="nt">&lt;/url&gt;</span>
               <span class="nt">&lt;processingTime&gt;</span>0<span class="nt">&lt;/processingTime&gt;</span>
               <span class="nt">&lt;length&gt;</span>33<span class="nt">&lt;/length&gt;</span>
            <span class="nt">&lt;/format&gt;</span>
            <span class="nt">&lt;format&gt;</span>
               <span class="nt">&lt;type&gt;</span>presentation<span class="nt">&lt;/type&gt;</span>
               <span class="nt">&lt;url&gt;</span>https://demo.bigbluebutton.org/playback/presentation/2.0/playback.html?meetingId=ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111<span class="nt">&lt;/url&gt;</span>
               <span class="nt">&lt;processingTime&gt;</span>139458<span class="nt">&lt;/processingTime&gt;</span>
               <span class="nt">&lt;length&gt;</span>33<span class="nt">&lt;/length&gt;</span>
               <span class="nt">&lt;preview&gt;</span>
                  <span class="nt">&lt;images&gt;</span>
                     <span class="nt">&lt;image</span> <span class="na">width=</span><span class="s">"176"</span> <span class="na">height=</span><span class="s">"136"</span> <span class="na">alt=</span><span class="s">"Welcome to"</span><span class="nt">&gt;</span>https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530278898120/thumbnails/thumb-1.png<span class="nt">&lt;/image&gt;</span>
                     <span class="nt">&lt;image</span> <span class="na">width=</span><span class="s">"176"</span> <span class="na">height=</span><span class="s">"136"</span> <span class="na">alt=</span><span class="s">"(this slide left blank for use as a whiteboard)"</span><span class="nt">&gt;</span>https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530278898120/thumbnails/thumb-2.png<span class="nt">&lt;/image&gt;</span>
                     <span class="nt">&lt;image</span> <span class="na">width=</span><span class="s">"176"</span> <span class="na">height=</span><span class="s">"136"</span> <span class="na">alt=</span><span class="s">"(this slide left blank for use as a whiteboard)"</span><span class="nt">&gt;</span>https://demo.bigbluebutton.org/presentation/ffbfc4cc24428694e8b53a4e144f414052431693-1530278898111/presentation/d2d9a672040fbde2a47a10bf6c37b6a4b5ae187f-1530278898120/thumbnails/thumb-3.png<span class="nt">&lt;/image&gt;</span>
                  <span class="nt">&lt;/images&gt;</span>
               <span class="nt">&lt;/preview&gt;</span>
            <span class="nt">&lt;/format&gt;</span>
         <span class="nt">&lt;/playback&gt;</span>
      <span class="nt">&lt;/recording&gt;</span>
   <span class="nt">&lt;/recordings&gt;</span>
<span class="nt">&lt;/response&gt;</span>
</code></pre></div></div>

<h2 id="publishrecordings">publishRecordings</h2>

<p>Publish and unpublish recordings for a given recordID (or set of record IDs).</p>

<p><strong>Resource URL:</strong></p>

<ul>
  <li>http://yourserver.com/bigbluebutton/api/publishRecordings?[parameters]&amp;checksum=[checksum]</li>
</ul>

<p><strong>Parameters:</strong></p>

<table class="api-params">
    
    <thead>
        <tr class="header">
            <th>Param Name</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
    
        <tr>
          <td>
            
                <code>recordID</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>A record ID for specify the recordings to apply the publish action. It can be a set of record IDs separated by commas.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>publish</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>The value for publish or unpublish the recording(s). Available values: true or false.
            
            </td>
        </tr>
    
    </tbody>
</table>

<!--
$('#tbody-foo tr').map(function() {
    let tr = $(this);
    let name = tr.find('td:eq(0)').text().trim();
    let isRequired = tr.find('td:eq(1)').text().trim() === 'Required';
    let type = tr.find('td:eq(2)').text().trim();
    let description = tr.find('td:eq(3)').html().replaceAll('"', '\\"');

    return `- name: "${name}"
  required: ${isRequired}
  type: "${type}"
  description: "${description}"`
}).get().join('\n\n')
-->

<p><strong>Example Requests:</strong></p>

<ul>
  <li>http://yourserver.com/bigbluebutton/api/publishRecordings?recordID=record123&amp;publish=true&amp;checksum=1234</li>
  <li>http://yourserver.com/bigbluebutton/api/publishRecordings?recordID=record123,recordABC&amp;publish=true&amp;checksum=wxyz</li>
</ul>

<p><strong>Example Response:</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;response&gt;</span>
  <span class="nt">&lt;returncode&gt;</span>SUCCESS<span class="nt">&lt;/returncode&gt;</span>
  <span class="nt">&lt;published&gt;</span>true<span class="nt">&lt;/published&gt;</span>
<span class="nt">&lt;/response&gt;</span>
</code></pre></div></div>

<h2 id="deleterecordings">deleteRecordings</h2>

<p>Delete one or more recordings for a given recordID (or set of record IDs).</p>

<p><strong>Resource URL:</strong></p>

<p>http://yourserver.com/bigbluebutton/api/deleteRecordings?[parameters]&amp;checksum=[checksum]</p>

<p><strong>Parameters:</strong></p>

<table class="api-params">
    
    <thead>
        <tr class="header">
            <th>Param Name</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
    
        <tr>
          <td>
            
                <code>recordID</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>A record ID for specify the recordings to delete. It can be a set of record IDs separated by commas.
            
            </td>
        </tr>
    
    </tbody>
</table>

<!--
$('#tbody-foo tr').map(function() {
    let tr = $(this);
    let name = tr.find('td:eq(0)').text().trim();
    let isRequired = tr.find('td:eq(1)').text().trim() === 'Required';
    let type = tr.find('td:eq(2)').text().trim();
    let description = tr.find('td:eq(3)').html().replaceAll('"', '\\"');

    return `- name: "${name}"
  required: ${isRequired}
  type: "${type}"
  description: "${description}"`
}).get().join('\n\n')
-->

<p><strong>Example Requests:</strong></p>

<ul>
  <li>http://yourserver.com/bigbluebutton/api/deleteRecordings?recordID=record123&amp;checksum=1234</li>
  <li>http://yourserver.com/bigbluebutton/api/deleteRecordings?recordID=record123,recordABC&amp;checksum=wxyz</li>
</ul>

<p><strong>Example Response:</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;response&gt;</span>
  <span class="nt">&lt;returncode&gt;</span>SUCCESS<span class="nt">&lt;/returncode&gt;</span>
  <span class="nt">&lt;deleted&gt;</span>true<span class="nt">&lt;/deleted&gt;</span>
<span class="nt">&lt;/response&gt;</span>
</code></pre></div></div>

<h2 id="updaterecordings">updateRecordings</h2>

<p>Update metadata for a given recordID (or set of record IDs). Available since version 1.1</p>

<p><strong>Resource URL:</strong></p>

<ul>
  <li>http://yourserver.com/bigbluebutton/api/updateRecordings?[parameters]&amp;checksum=[checksum]</li>
</ul>

<p><strong>Parameters:</strong></p>

<table class="api-params">
    
    <thead>
        <tr class="header">
            <th>Param Name</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
    
        <tr>
          <td>
            
                <code>recordID</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>A record ID for specify the recordings to apply the publish action. It can be a set of record IDs separated by commas.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>meta</code>
            
            </td>
          <td>String</td>
          <td>You can pass one or more metadata values to be updated. The format of these parameters is the same as the metadata passed to the <code class="language-plaintext highlighter-rouge">create</code> call. For more information see <a href="http://docs.bigbluebutton.org/dev/api.html#create">the docs for the create call</a>. When meta_parameter=NOT EMPTY and meta_parameter exists its value is updated, if it doesn’t exist, the parameter is added. When meta_parameter=, and meta_parameter exists the key is removed, when it doesn’t exist the action is ignored.
            
            </td>
        </tr>
    
    </tbody>
</table>

<!--
$('#tbody-foo tr').map(function() {
    let tr = $(this);
    let name = tr.find('td:eq(0)').text().trim();
    let isRequired = tr.find('td:eq(1)').text().trim() === 'Required';
    let type = tr.find('td:eq(2)').text().trim();
    let description = tr.find('td:eq(3)').html().replaceAll('"', '\\"');

    return `- name: "${name}"
  required: ${isRequired}
  type: "${type}"
  description: "${description}"`
}).get().join('\n\n')
-->

<p><strong>Example Requests:</strong></p>

<ul>
  <li>http://yourserver.com/bigbluebutton/api/updateRecordings?recordID=record123&amp;meta_Presenter=Jane%20Doe,meta_category=FINANCE,meta_TERM=Fall2016&amp;checksum=1234</li>
</ul>

<p><strong>Example Response:</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;response&gt;</span>
  <span class="nt">&lt;returncode&gt;</span>SUCCESS<span class="nt">&lt;/returncode&gt;</span>
  <span class="nt">&lt;updated&gt;</span>true<span class="nt">&lt;/updated&gt;</span>
<span class="nt">&lt;/response&gt;</span>
</code></pre></div></div>

<h2 id="getdefaultconfigxml">getDefaultConfigXML</h2>

<p>Retrieve the default <code class="language-plaintext highlighter-rouge">config.xml</code>. This call enables a 3rd party application to get the current <code class="language-plaintext highlighter-rouge">config.xml</code>, modify it’s parameters, and use <code class="language-plaintext highlighter-rouge">setConfigXML</code> to store it on the BigBlueButton server (getting a reference token to the new <code class="language-plaintext highlighter-rouge">config.xml</code>), then using the token in as a parameter in the join URL to override the default <code class="language-plaintext highlighter-rouge">config.xml</code>.</p>

<p><strong>Resource URL:</strong></p>

<p>http://yourserver.com/bigbluebutton/api/getDefaultConfigXML?[parameters]&amp;checksum=[checksum]</p>

<h2 id="setconfigxml">setConfigXML</h2>

<p>Associate a custom <code class="language-plaintext highlighter-rouge">config.xml</code> file with the current session. This call returns a token that can later be passed as a parameter to a join URL. When passed as a parameter, the BigBlueButton client will use the associated <code class="language-plaintext highlighter-rouge">config.xml</code> for the user instead of using the default <code class="language-plaintext highlighter-rouge">config.xml</code>. This enables 3rd party applications to provide user-specific <code class="language-plaintext highlighter-rouge">config.xml</code> files.</p>

<p><strong>Resource URL:</strong></p>

<p><code class="language-plaintext highlighter-rouge">POST http://yourserver.com/bigbluebutton/api/setConfigXML</code></p>

<p><strong>Parameters:</strong></p>

<table>
  <thead>
    <tr>
      <th style="text-align: left"><strong>Param Name</strong></th>
      <th style="text-align: left"><strong>Required / Optional</strong></th>
      <th style="text-align: left"><strong>Type</strong></th>
      <th style="text-align: left"><strong>Description</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">meetingID</td>
      <td style="text-align: left">Required</td>
      <td style="text-align: left">String</td>
      <td style="text-align: left">A meetingID to an active meeting</td>
    </tr>
    <tr>
      <td style="text-align: left">configXML</td>
      <td style="text-align: left">Required</td>
      <td style="text-align: left">String</td>
      <td style="text-align: left">A valid config.xml file</td>
    </tr>
  </tbody>
</table>

<p><strong>Parameter Encoding:</strong></p>

<p>This API request encodes the parameters in the body of a post request, using the content type <code class="language-plaintext highlighter-rouge">application/x-www-form-urlencoded</code> (The Content-Type header must be present or the parameters will not be processed). As a result, the calculation for the checksum parameter is done differently than in other types of requests.</p>

<p>Similarly like for GET requests, the checksum is calculated by taking the SHA-1 hash of a string generated by concatenating the <em>method name</em>, <em>parameter string</em>, and <em>shared secret</em>. However, the <em>parameter string</em> must be generated in a very specific format to ensure that changes in the body encoding won’t invalidate the checksum.</p>

<p>To generate the <em>parameter string</em> field, do the following steps:</p>

<ul>
  <li>Sort the parameters in ASCII order by the parameter name. (Parameters with duplicate names are not permitted.)</li>
  <li>URL-encode the parameter values according to the following specification: The characters “<code class="language-plaintext highlighter-rouge">a</code>” through “<code class="language-plaintext highlighter-rouge">z</code>”, “<code class="language-plaintext highlighter-rouge">A</code>” through “<code class="language-plaintext highlighter-rouge">Z</code>”, “<code class="language-plaintext highlighter-rouge">0</code>” through “<code class="language-plaintext highlighter-rouge">9</code>”, and “<code class="language-plaintext highlighter-rouge">.</code>”, “<code class="language-plaintext highlighter-rouge">-</code>”, “<code class="language-plaintext highlighter-rouge">*</code>”, “<code class="language-plaintext highlighter-rouge">_</code>” remain the same. The space character “<code class="language-plaintext highlighter-rouge"> </code>” is encoded as a plus sign “<code class="language-plaintext highlighter-rouge">+</code>”. All other characters must be encoded as UTF-8, and then are converted bytewise to percent-encoding. This matches the default encoding method of <a href="https://docs.oracle.com/javase/7/docs/api/java/net/URLEncoder.html"><code class="language-plaintext highlighter-rouge">java.net.URLEncoder</code></a> and <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/uri/rdoc/URI.html#method-c-encode_www_form_component">Ruby’s <code class="language-plaintext highlighter-rouge">URI.encode_www_form_component</code></a>. Other languages probably also have functions which match this specification.</li>
  <li>Join the parameter name and URL-encoded parameter value together with the “=” character.</li>
  <li>Concatenate all the parameter name/value pairs in order, separating them with the “&amp;” character.</li>
</ul>

<p>To verify the checksum, the BigBlueButton server will decode the parameters from the message body, then use the same algorithm as described above to calculate the checksum. As a result:</p>

<ul>
  <li>You are not required to have parameters in the same order in the message body as they were in the encoded <em>parameter string</em>.</li>
  <li>The <code class="language-plaintext highlighter-rouge">checksum</code> parameter can be in any position.</li>
  <li>You are not required to use the same URL-encoding method in the message body as the encoded <em>parameter string</em>. For example, using <code class="language-plaintext highlighter-rouge">%20</code> instead of <code class="language-plaintext highlighter-rouge">+</code> for a space is OK.</li>
</ul>

<p><strong>Example Requests:</strong></p>

<p>The <code class="language-plaintext highlighter-rouge">config.xml</code> is sent as part of a POST request. The body of the POST request must contain three parameters: <code class="language-plaintext highlighter-rouge">meetingID</code>, <code class="language-plaintext highlighter-rouge">configXML</code> and <code class="language-plaintext highlighter-rouge">checksum</code>. The <code class="language-plaintext highlighter-rouge">meetingID</code> is the meeting to which this config.xml will be associated to (the meeting must have been created previously), the <code class="language-plaintext highlighter-rouge">configXML</code> is the content of the config.xml file, and the <code class="language-plaintext highlighter-rouge">checksum</code> is the signature of this call, calculated as described above. An example showing how to calculate the checksum:</p>

<ul>
  <li>Method name: <code class="language-plaintext highlighter-rouge">setConfigXML</code></li>
  <li>Parameters: <code class="language-plaintext highlighter-rouge">meetingID=random-8228800</code> and <code class="language-plaintext highlighter-rouge">configXML=&lt;config&gt;&lt;modules&gt;&lt;localeversion supressWarning="false"&gt;0.9.0&lt;/localeversion&gt;&lt;/modules&gt;&lt;/config&gt;</code></li>
  <li>Encoded parameter string: <code class="language-plaintext highlighter-rouge">configXML=%3Cconfig%3E%3Clocaleversion+suppressWarning%3D%22false%22%3E0.9.0%3C%2Flocaleversion%3E%3C%2Fmodules%3E%3C%2Fconfig%3E&amp;meetingID=random-8228800</code></li>
  <li>Shared secret: <code class="language-plaintext highlighter-rouge">aae06642a13942004fd83b3ba6e4o9s8</code></li>
  <li>Final string: <code class="language-plaintext highlighter-rouge">setConfigXMLconfigXML=%3Cconfig%3E%3Clocaleversion+suppressWarning%3D%22false%22%3E0.9.0%3C%2Flocaleversion%3E%3C%2Fmodules%3E%3C%2Fconfig%3E&amp;meetingID=random-8228800aae06642a13942004fd83b3ba6e4o9s8</code></li>
  <li>The calculated checksum is <code class="language-plaintext highlighter-rouge">51db6f55ffa080f42f5727386beb66adb4e5cf81</code></li>
  <li>The final parameter string that will be used in the message body is <code class="language-plaintext highlighter-rouge">checksum=51db6f55ffa080f42f5727386beb66adb4e5cf81&amp;configXML=%3Cconfig%3E%3Clocaleversion+suppressWarning%3D%22false%22%3E0.9.0%3C%2Flocaleversion%3E%3C%2Fmodules%3E%3C%2Fconfig%3E&amp;meetingID=random-8228800</code> (Note that the order of the parameters does not matter here.)</li>
</ul>

<p>See also this <a href="https://github.com/bigbluebutton/bigbluebutton/blob/09c4ffcbe16fcf4fc79ae8979641f5ffdc4bf17a/bbb-api-demo/src/main/webapp/bbb_api.jsp#L335">API source example</a> from the API demos for making a call to setConfigXML.</p>

<p><strong>Example Response:</strong></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;response&gt;</span>
  <span class="nt">&lt;returncode&gt;</span>SUCCESS<span class="nt">&lt;/returncode&gt;</span>
  <span class="nt">&lt;token&gt;</span>6lwBf1TX<span class="nt">&lt;/token&gt;</span>
<span class="nt">&lt;/response&gt;</span>
</code></pre></div></div>

<h2 id="getrecordingtexttracks">getRecordingTextTracks</h2>

<p>Get a list of the caption/subtitle files currently available for a recording. It will include information about the captions (language, etc.), as well as a download link. This may be useful to retrieve live or automatically transcribed subtitles from a recording for manual editing.</p>

<p><strong>Resource URL:</strong></p>

<p><code class="language-plaintext highlighter-rouge">GET http://yourserver.com/bigbluebutton/api/getRecordingTextTracks?[parameters]&amp;checksum=[checksum]</code></p>

<p><strong>Parameters:</strong></p>

<table class="api-params">
    
    <thead>
        <tr class="header">
            <th>Param Name</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
    
        <tr>
          <td>
            
                <code>recordID</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>A single recording ID to retrieve the available captions for. (Unlike other recording APIs, you cannot provide a comma-separated list of recordings.)
            
            </td>
        </tr>
    
    </tbody>
</table>

<!--
$('#tbody-foo tr').map(function() {
    let tr = $(this);
    let name = tr.find('td:eq(0)').text().trim();
    let isRequired = tr.find('td:eq(1)').text().trim() === 'Required';
    let type = tr.find('td:eq(2)').text().trim();
    let description = tr.find('td:eq(3)').html().replaceAll('"', '\\"');

    return `- name: "${name}"
  required: ${isRequired}
  type: "${type}"
  description: "${description}"`
}).get().join('\n\n')
-->

<p><strong>Example Response:</strong></p>

<p>An example response looks like the following:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"response"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"returncode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SUCCESS"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"tracks"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://captions.example.com/textTrack/0ab39e419c9bcb63233168daefe390f232c71343/183f0bf3a0982a127bdb8161e0c44eb696b3e75c-1554230749920/subtitles_en-US.vtt"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"kind"</span><span class="p">:</span><span class="w"> </span><span class="s2">"subtitles"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="s2">"English"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"lang"</span><span class="p">:</span><span class="w"> </span><span class="s2">"en-US"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="s2">"upload"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"href"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://captions.example.com/textTrack/95b62d1b762700b9d5366a9e71d5fcc5086f2723/183f0bf3a0982a127bdb8161e0c44eb696b3e75c-1554230749920/subtitles_pt-BR.vtt"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"kind"</span><span class="p">:</span><span class="w"> </span><span class="s2">"subtitles"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"label"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Brazil"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"lang"</span><span class="p">:</span><span class="w"> </span><span class="s2">"pt-BR"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="s2">"upload"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>The track object has the following attributes:</p>

<dl>
  <dt>kind</dt>
  <dd>
    <p>Indicates the intended use of the text track. The value will be one of the following strings:
subtitles</p>
  </dd>
  <dt>captions</dt>
  <dd>
    <p>The meaning of these values is defined by the HTML5 video element, see the MDN docs for details. Note that the HTML5 specification defines additional values which are not currently used here, but may be added at a later date.</p>
  </dd>
  <dt>lang</dt>
  <dd>The language of the text track, as a language tag. See RFC 5646 for details on the format, and the Language subtag lookup for assistance using them. It will usually consist of a 2 or 3 letter language code in lowercase, optionally followed by a dash and a 2-3 letter geographic region code (country code) in uppercase.</dd>
  <dt>label</dt>
  <dd>A human-readable label for the text track. This is the string displayed in the subtitle selection list during recording playback.</dd>
  <dt>source</dt>
  <dd>Indicates where the track came from. The value will be one of the following strings:</dd>
</dl>

<ul>
  <li>live - A caption track derived from live captioning performed in a BigBlueButton.</li>
  <li>automatic - A caption track generated automatically via computer voice recognition.</li>
  <li>upload - A caption track uploaded by a 3rd party.</li>
</ul>

<dl>
  <dt>href</dt>
  <dd>A link to download this text track file. The format will always be WebVTT (text/vtt mime type), which is similar to the SRT format.</dd>
</dl>

<p>The timing of the track will match the current recording playback video and audio files. Note that if the recording is edited (adjusting in/out markers), tracks from live or automatic sources will be re-created with the new timing. Uploaded tracks will be edited, but this may result in data loss if sections of the recording are removed during edits.</p>

<dl>
  <dt>Errors</dt>
  <dd>In addition to the standard BigBlueButton checksum error, this API call can return the following errors in <messageKey> when returncode is FAILED:</messageKey></dd>
  <dt>missingParameter</dt>
  <dd>A required parameter is missing.</dd>
  <dt>noRecordings</dt>
  <dd>No recording was found matching the provided recording ID.</dd>
</dl>

<h2 id="putrecordingtexttrack">putRecordingTextTrack</h2>

<p>Upload a caption or subtitle file to add it to the recording. If there is any existing track with the same values for kind and lang, it will be replaced.</p>

<p>Note that this api requires using a POST request. The parameters listed as GET parameters must be included in the request URI, and the actual uploaded file must be included in the body of the request in the multipart/form-data format.</p>

<p>Note that the standard BigBlueButton checksum algorithm must be performed on the GET parameters, but that the body of the request (the subtitle file) is not checksummed.</p>

<p>This design is such that a web application could generate a form with a signed url, and display it in the browser with a file upload selection box. When the user submits the form, it will upload the track directly to the recording api. The API may be used programmatically as well, of course.</p>

<p>This API is asynchronous. It can take several minutes for the uploaded file to be incorporated into the published recording, and if an uploaded file contains unrecoverable errors, it may never appear.</p>

<p><strong>Resource URL:</strong></p>

<p><code class="language-plaintext highlighter-rouge">POST http://yourserver.com/bigbluebutton/api/putRecordingTextTrack</code></p>

<p><strong>Parameters:</strong></p>

<table class="api-params">
    
    <thead>
        <tr class="header">
            <th>Param Name</th>
            <th>Type</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
    
        <tr>
          <td>
            
                <code>recordID</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>A single recording ID to retrieve the available captions for. (Unlike other recording APIs, you cannot provide a comma-separated list of recordings.)
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>kind</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>Indicates the intended use of the text track. See the <a href="#getrecordingtexttracks">getRecordingTextTracks</a> description for details. Using a value other than one listed in this document will cause an error to be returned.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>lang</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>Indicates the intended use of the text track. See the <a href="#getrecordingtexttracks">getRecordingTextTracks</a> description for details. Using a value other than one listed in this document will cause an error to be returned.
            
            </td>
        </tr>
    
        <tr>
          <td>
            
                <code>label</code>
            
            
                
                    <p class="api-required">(required)</p>
                
            </td>
          <td>String</td>
          <td>A human-readable label for the text track. If not specified, the system will automatically generate a label containing the name of the language identified by the lang parameter.
            
            </td>
        </tr>
    
    </tbody>
</table>

<!--
$('#tbody-foo tr').map(function() {
    let tr = $(this);
    let name = tr.find('td:eq(0)').text().trim();
    let isRequired = tr.find('td:eq(1)').text().trim() === 'Required';
    let type = tr.find('td:eq(2)').text().trim();
    let description = tr.find('td:eq(3)').html().replaceAll('"', '\\"');

    return `- name: "${name}"
  required: ${isRequired}
  type: "${type}"
  description: "${description}"`
}).get().join('\n\n')
-->

<dl>
  <dt>POST Body</dt>
  <dd>If the request has a body, the Content-Type header must specify multipart/form-data. The following parameters may be encoded in the post body.</dd>
  <dt>file</dt>
  <dd>(Type Binary Data, Optional) Contains the uploaded subtitle or caption file. If this parameter is missing, or if the POST request has no body, then any existing text track matching the kind and lang specified will be deleted. If known, the uploading application should set the <code class="language-plaintext highlighter-rouge">Content-Type</code> to a value appropriate to the file format. If Content-Type is unset, or does not match a known subtitle format, the uploaded file will be probed to automatically detect the type.</dd>
</dl>

<p>Multiple types of subtitles are accepted for upload, but they will be converted to the WebVTT format for display.</p>

<p>The size of the request is limited (TODO: determine the limit maybe 8MB?)</p>

<p>The following types of subtitle files are accepted:</p>

<ul>
  <li>SRT (SubRip Text), including basic formatting.</li>
  <li>SRT does not have a standard mime type, but application/x-subrip is accepted.</li>
  <li>SSA or ASS (Sub Station Alpha, Advanced Sub Station). Most formatting will be discarded, but basic inline styles (bold, italic, etc.) may be preserved.</li>
  <li>SSA/ASS does not have a standard mime type.</li>
  <li>WebVTT. Uploaded WebVTT files will be used as-is, but note that browser support varies, so including REGION or STYLE blocks is not recommended.</li>
</ul>

<p>The WebVTT mime type is <code class="language-plaintext highlighter-rouge">text/vtt</code>.</p>

<p><strong>Errors</strong></p>

<p>In addition to the standard BigBlueButton checksum error, this API call can return the following errors in <messageKey> when returncode is FAILED:</messageKey></p>

<dl>
  <dt>missingParameter</dt>
  <dd>A required parameter is missing.</dd>
  <dt>noRecordings</dt>
  <dd>No recording was found matching the provided recording ID.</dd>
  <dt>invalidKind</dt>
  <dd>The kind parameter is not set to a permitted value.</dd>
  <dt>invalidLang</dt>
  <dd>The lang parameter is not a well-formed language tag.</dd>
</dl>

<p>The uploaded text track is not validated during upload. If it is invalid, it will be ignored and the existing subtitles will not be replaced.</p>

<p>Success</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"response"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"messageKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"upload_text_track_success"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"message"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Text track uploaded successfully"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"recordId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"baz"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"returncode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SUCCESS"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Failed</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"response"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"messageKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"upload_text_track_failed"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"message"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Text track upload failed."</span><span class="p">,</span><span class="w">
    </span><span class="nl">"recordId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"baz"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"returncode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SUCCESS"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Or</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"response"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"message"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Empty uploaded text track."</span><span class="p">,</span><span class="w">
    </span><span class="nl">"messageKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"empty_uploaded_text_track"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"returncode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"FAILED"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Missing parameter error</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"response"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"messageKey"</span><span class="p">:</span><span class="w"> </span><span class="s2">"paramError"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"message"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Missing param checksum."</span><span class="p">,</span><span class="w">
    </span><span class="nl">"returncode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"FAILED"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h1 id="api-sample-code">API Sample Code</h1>

<p>BigBlueButton provides API Sample Codes so you can integrated easily with your application. Feel free to contribute and post your implementation of the API in other language code in the bigbluebutton-dev mailing list.</p>

<h2 id="jsp">JSP</h2>

<p>The JSP library included with the BigBlueButton API demos is the reference implementation of the BigBlueButton API. We use this library to test and demonstrate how to use the API. You can try out the demos on the <a href="http://demo.bigbluebutton.org/demo/demo1.jsp">BigBlueButton demo server</a>. See <a href="https://github.com/bigbluebutton/bigbluebutton/tree/master/bbb-api-demo/src/main/webapp/">full source for the API demos</a></p>

<h2 id="php">PHP</h2>

<p>There is stable PHP library in <a href="https://github.com/bigbluebutton/bigbluebutton-api-php">BigBlueButton PHP API</a>.</p>

<p>You need to enable the “allow_url_fopen” to “On” in your php.ini file so this example can work. Simply add/replace to your php.ini file:</p>

<p><code>allow_url_fopen = On</code></p>

<p>For more examples of using PHP, see the source for the <a href="https://github.com/blindsidenetworks/moodle-mod_bigbluebuttonbn">Moodle</a> and <a href="https://github.com/blindsidenetworks/wordpress-plugin_bigbluebutton">WordPress</a> integrations.</p>

<h2 id="ruby">Ruby</h2>

<p>See the following <a href="https://github.com/mconf/bigbluebutton-api-ruby">bigbluebutton-api-ruby</a> gem created by the good folks at <a href="http://mconf.org">Mconf</a>.</p>

<h2 id="testing-api-calls">Testing API Calls</h2>

<p>To help you create/test valid API calls against your BigBlueButton server, use the excellent <a href="http://mconf.github.io/api-mate/">API Mate</a> to interactively create API calls. API Mate generates the checksums within the browser (no server component needed) so you can use it to test API calls against a local BigBlueButton server.</p>

<p>If you’re developing new API calls or adding parameters on API calls, you can still use the API Mate to test them. Just scroll the page down or type “custom” in the parameter filter and you’ll see the inputs where you can add custom API calls or custom parameters. New API calls will appear in the list of API links and new parameters will be added to all the API links.</p>

<h1 id="desired-future-features">Desired Future Features</h1>

<h2 id="support-for-jsonjsonp">Support for JSON/JSONP</h2>

<ul>
  <li>It would be very nice to optionally allow JSON responses, and to support JSONP. This might allow for simpler integrations, even within static or almost-static webpages using JavaScript as the primary integration language. It should not be assumed that all users will be running custom software on a server and be able to process XML responses, etc.<br /></li>
  <li>This being said, even within JavaScript there are simple ways to make the API call and process the returned XML (using jQuery and $.xml2json, for example)<br /></li>
</ul>

<h2 id="meeting-event-callbacks">Meeting event callbacks</h2>

<p>This may actually even be called a “reverse API” - where we define an interface that the third- party application can implement to be notified of events. This would not be necessary for the first version of the API, but would be a nice feature for future enhancements. More details:</p>

<p>When major events happen within meetings, it would be very helpful to provide a way for third-party applications to be notified of these events. For instance, when a user joins a conference, they will presumably be joining through the third-party app. However, when they leave the conference, the app may have certain auditing that it needs to do to record their disconnect time, etc. If BigBlueButton could make some callback to the application, this would assist in such scenarios.</p>

<p>For example, the application may be able to register a URL that BigBlueButton would call with status updates. BigBlueButton would define an API that such an app would be required to implement at that URL. For example, BigBlueButton could call:</p>

<ul>
  <li>http://third-party-app/bbb-integ.php?event=meetingEnded&amp;meetingID=abcd</li>
  <li>http://third-party-app/bbb-integ.php?event=userLeft&amp;userID=1234</li>
  <li>http://third-party-app/bbb-integ.php?event=meetingEnded&amp;meetingID=abcd</li>
</ul>

<p>We are already announcing events such as this within BigBlueButton through Redis Pubsub to communicate between the Red5 apps where these events originate and the API. It would probably not be very difficult to register additional listeners through the Spring Integration configuration that will make these HTTP calls for us for each event.</p>



                    </div>
                
            </div>

            

            <div class=row-fluid>
                <div id=footer class=span12>
                    <!-- Documentation for <a href="https://github.com/bruth/jekyll-docs-template">BigBlueButton</a> -->
&copy; 2021 <a href="http://bigbluebutton.org/">BigBlueButton Inc.</a> &middot; <a href="http://bigbluebutton.org/trademark/">Trademark</a> &middot; <a href="http://bigbluebutton.org/open-source-license/">License<a/>

                </div>
            </div>
        </div>

        <script>
            function orderNav() {
                var list,
                    section,
                    header,
                    sections = [],
                    lists = {},
                    headers = {};

                var navUl = document.querySelectorAll('#navigation ul')[0],
                    navLis = document.querySelectorAll('#navigation ul li');

                if (!navUl) return;

                for (var i = 0; i < navLis.length; i++) {
                    var order, li = navLis[i];

                    if (li.classList.contains('nav-header')) {
                        section = li.textContent || li.innerText;
                        sections.push(section);
                        headers[section] = li;
                        continue;
                    }

                    if (!lists[section]) {
                        lists[section] = [];
                    }

                    order = parseFloat(li.getAttribute('data-order'))
                    lists[section].push([order, li]);
                }

                for (var i = 0; i < sections.length; i++) {
                    section = sections[i];
                    list = lists[section].sort(function(a, b) {
                        return a[0] - b[0];
                    });

                    if (header = headers[section]) {
                        navUl.appendChild(header);
                    }
                    for (var j = 0; j < list.length; j++) {
                        navUl.appendChild(list[j][1]);
                    }
                }
            }

            if (document.querySelectorAll) orderNav();
	    // addAnchors('h1, h2, h3');
        </script>
        
        <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-4901813-1', 'auto');
  ga('send', 'pageview');
</script>

        

	<script>
	$( document ).ready(function() {
  		addAnchors('h1, h2, h3');
	});
	</script>

    </body>
</html>
