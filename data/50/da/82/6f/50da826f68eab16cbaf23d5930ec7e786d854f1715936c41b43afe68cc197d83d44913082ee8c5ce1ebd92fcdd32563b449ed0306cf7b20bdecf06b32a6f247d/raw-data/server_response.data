
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>
Issue 31530: CVE-2018-1000030: Python 2.7 readahead feature of file objects is not thread safe - Python tracker

</title>
<link rel="shortcut icon" href="@@file/favicon.ico" />
<link rel="stylesheet" type="text/css" href="@@file/main.css" />
<link rel="stylesheet" type="text/css" href="@@file/style.css" />
<link rel="search" type="application/opensearchdescription+xml" href="@@file/osd.xml" title="Python bug tracker search" />
<meta http-equiv="Content-Type"
      content="text/html; charset=utf-8" />

<script nonce="10cd8111061f5efdb0cda197f23c8771b885964cde01e754997e45c30136e930" type="text/javascript">
submitted = false;
function submit_once() {
    if (submitted) {
        alert("Your request is being processed.\nPlease be patient.");
        return false;
    }
    submitted = true;
    return true;
}

function help_window(helpurl, width, height) {
    HelpWin = window.open('https://bugs.python.org/' + helpurl, 'RoundupHelpWindow', 'scrollbars=yes,resizable=yes,toolbar=no,height='+height+',width='+width);
    HelpWin.focus ()
}
</script>


<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"></script>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.15/jquery-ui.js"></script>
<script type="text/javascript" src="@@file/issue.item.js"></script>
<link rel="stylesheet" type="text/css" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/smoothness/jquery-ui.css" />


</head>
<body>
  <!--  Logo  -->
  <h1 id="logoheader">
    <a accesskey="1" href="." id="logolink">
       <img src="@@file/python-logo.gif" alt="homepage" border="0" id="logo" /></a>
  </h1>

<div id="utility-menu">
<!-- Search Box -->
<div id="searchbox">
    <form name="searchform" method="get" action="issue" id="searchform">
      <div id="search">
       <input type="hidden" name="@columns"
              value="id,activity,title,creator,assignee,status,type" />
       <input type="hidden" name="@sort" value="-activity" />
       <input type="hidden" name="@filter" value="status" />
       <input type="hidden" name="@action" value="searchid" />
       <input type="hidden" name="ignore" value="file:content" />
       <input class="input-text" id="search-text"
              name="@search_text" size="10" />
       <input type="submit" id="submit" value="search" name="submit" class="input-button" />
       <input type="radio" name="status"
              id="status_notresolved" value="-1,1,3" />
       <label for="status_notresolved">open</label>
       <input type="radio" name="status" checked="checked"
              id="status_all" value="-1,1,2,3" />
       <label for="status_all">all</label>
      </div>
     </form>
</div>
</div>


<div id="left-hand-navigation">
<!--  Main Menu NEED LEVEL TWO HEADER AND FOOTER -->
<div id="menu">
  <ul class="level-one">
    <li><a href="https://www.python.org/" title="Go to the Python homepage">Python Home</a></li>
    <li><a href="https://www.python.org/about/" title="About The Python Language">About</a></li>
    <li><a href="https://www.python.org/blogs/" title="">News</a></li>
    <li><a href="https://www.python.org/doc/" title="">Documentation</a></li>
    <li><a href="https://www.python.org/downloads/" title="">Downloads</a></li>
    <li><a href="https://www.python.org/community/" title="">Community</a></li>
    <li><a href="https://www.python.org/psf/" title="Python Software Foundation">Foundation</a></li>
    <li><a href="https://devguide.python.org/" title="Python Developer's Guide">Developer's Guide</a></li>
    <li class="selected"><a href="." class="selected" title="Python Issue Tracker">Issue Tracker</a>
      <ul class="level-two">
        <li>
          <strong>Issues</strong>
          <ul class="level-three">
            
            <li><a href="issue?@template=search&amp;status=1">Search</a></li>
            <li><a href="issue?@action=random">Random Issue</a></li>
            <li>
              <form method="post" action="issue31530">
                <input type="submit" class="form-small"
                       value="Show issue:" />
                <input class="form-small" size="4" type="text" name="@number" />
                <input type="hidden" name="@type" value="issue" />
                <input type="hidden" name="@action" value="show" />
              </form>
            </li>
          </ul>
        </li>


        <li>
          <strong>Summaries</strong>
          <ul class="level-three">
            

            

            

            <li>
              <a href="issue?status=1&amp;@sort=-activity&amp;@columns=id%2Cactivity%2Ctitle%2Ccreator%2Cstatus&amp;@dispname=Issues%20with%20patch&amp;@startwith=0&amp;@group=priority&amp;keywords=2&amp;@action=search&amp;@filter=&amp;@pagesize=50">Issues with patch</a>
            </li>

            <li>
              <a href="issue?status=1&amp;@sort=-activity&amp;@columns=id%2Cactivity%2Ctitle%2Ccreator%2Cstatus&amp;@dispname=Easy%20issues&amp;@startwith=0&amp;@group=priority&amp;keywords=6&amp;@action=search&amp;@filter=&amp;@pagesize=50">Easy issues</a>
            </li>

            <li>
              <a href="issue?@template=stats">Stats</a>
            </li>

          </ul>
        </li>


        <li>
          <strong>User</strong>
          <form method="post" action="issue31530">
          <ul class="level-three">
            <li>
                Login&nbsp;(OpenID&nbsp;possible)<br />
	         <a style="display:inline;width:0;margin:0"
             href="issue31530?@action=oic_login&amp;provider=Google">
                  <img hspace="0" vspace="0" width="16"
                       height="16"
                       src="https://www.google.com/favicon.ico"
                       alt="Google" title="Google" /></a>
	         <a style="display:inline;width:0;margin:0"
             href="issue31530?@action=oic_login&amp;provider=GitHub">
                  <img hspace="0" vspace="0" width="16"
                       height="16"
                       src="https://www.github.com/favicon.ico"
                       alt="GitHub" title="GitHub" /></a>
	         <a style="display:inline;width:0;margin:0"
             href="issue31530?@action=openid_login&amp;provider=Launchpad">
                  <img hspace="0" vspace="0" width="16"
                       height="16"
                       src="https://launchpad.net/favicon.ico"
                       alt="Launchpad" title="Launchpad" /></a>
                <input size="10" name="openid_identifier" style="background:url(@@file/openid-16x16.gif)
                  center left no-repeat;padding-left:16px" /><br />
                <input size="10" type="password" name="__login_password" /><br />
                <input type="hidden" name="@action" value="Login" />
                <input type="checkbox" name="remember" id="remember" />
                <label for="remember">Remember me?</label><br />
                <input class="form-small" type="submit"
                       value="Login" /><br />
                <input type="hidden" name="__came_from"
                       value="https://bugs.python.org/issue31530?">
                
                <input type="hidden" name="@sort" value=""/>
<input type="hidden" name="@group" value=""/>
<input type="hidden" name="@pagesize" value="50"/>
<input type="hidden" name="@startwith" value="0"/>
            </li>
            <li>
                <a href="user?@template=register">Register</a>
            </li>
            <li><a href="user?@template=forgotten">Lost&nbsp;your&nbsp;login?</a></li>
          </ul>
          </form>
        </li>

        

        

        <li>
          <strong>Administration</strong>
          <ul class="level-three">
            
            <li>
                <a href="user?@sort=username">User List</a></li>
            <li>
                <a href="user?iscommitter=1&amp;@action=search&amp;@sort=username&amp;@pagesize=300">Committer List</a></li>
            
            
            
          </ul>
        </li>

        <li>
          <strong>Help</strong>
          <ul class="level-three">
            <li><a href="http://docs.python.org/devguide/triaging.html">
                Tracker Documentation</a></li>
            <li><a href="http://wiki.python.org/moin/TrackerDevelopment">
                Tracker Development</a></li>
            <li><a href="https://github.com/python/psf-infra-meta/issues">
                Report Tracker Problem</a></li>
          </ul>
        </li>

      </ul>
    </li>
  </ul>
</div> <!-- menu -->
</div> <!-- left-hand-navigation -->

<div id="content-body">
<div id="body-main">
<div id="content">
<div id="breadcrumb">
 
 
 Issue31530
 
</div>
 
 





<div>

<form method="post" name="itemSynopsis"
      onsubmit="return submit_once()"
      enctype="multipart/form-data" action="issue31530">

<fieldset><legend>classification</legend>
<table class="form">
<tr>
 <th class="required"><a href="http://docs.python.org/devguide/triaging.html#title" target="_blank">Title</a>:</th>
 
 <td colspan="3">
  <span>CVE-2018-1000030: Python 2.7 readahead feature of file objects is not thread safe</span>
  <input type="hidden" name="title"
         value="CVE-2018-1000030: Python 2.7 readahead feature of file objects is not thread safe">
 </td>
</tr>

<tr>
 <th class="required"><a href="http://docs.python.org/devguide/triaging.html#type" target="_blank">Type</a>:</th>
 <td>security</td>
 <th><a href="http://docs.python.org/devguide/triaging.html#stage" target="_blank">Stage</a>:</th>
 <td>resolved</td>
</tr>

<tr>
 <th><a href="http://docs.python.org/devguide/triaging.html#components" target="_blank">Components</a>:</th>
 <td>Interpreter Core</td>
 <th><a href="http://docs.python.org/devguide/triaging.html#versions" target="_blank">Versions</a>:</th>
 <td>Python 2.7</td>
</tr>
</table>
</fieldset>

<fieldset><legend>process</legend>
<table class="form">
<tr>
  <th><a href="http://docs.python.org/devguide/triaging.html#status" target="_blank">Status</a>:</th>
  <td>closed</td>
  <th><a href="http://docs.python.org/devguide/triaging.html#resolution" target="_blank">Resolution</a>:</th>
  <td>fixed</td>
</tr>

<tr>
 <th>
    <a href="http://docs.python.org/devguide/triaging.html#dependencies"
       target="_blank">Dependencies</a>:
 </th>
 <td>
  
  
 </td>
 <th><a href="http://docs.python.org/devguide/triaging.html#superseder" target="_blank">Superseder</a>:</th>
 <td>
  
 
 </td>
 </tr>
 <tr>
 <th>
   <a href="http://docs.python.org/devguide/triaging.html#assigned-to"
      target="_blank">Assigned To</a>:
 </th>
 
 <td>
  
 </td>
 <th>
   <a href="http://docs.python.org/devguide/triaging.html#nosy-list"
      target="_blank">Nosy List</a><!--
        <span tal:condition="context/nosy_count" tal:replace="python: ' (%d)' % context.nosy_count" /> -->:
 </th>
 <td>
     benjamin.peterson, gvanrossum, lemburg, pitrou, serhiy.storchaka, vstinner
     
 </td>
</tr>
<tr>
 <th>
   <a href="http://docs.python.org/devguide/triaging.html#priority"
      target="_blank">Priority</a>:
 </th>
 <td>normal</td>
 <th>
    <a href="http://docs.python.org/devguide/triaging.html#keywords"
       target="_blank">Keywords</a>:
 </th>
 <td>patch</td>


</tr>









</table>
</fieldset>

</form>

<p>Created on <strong>2017-09-20 13:27</strong> by <strong>vstinner</strong>, last changed <strong>2018-06-21 15:00</strong> by <strong>vstinner</strong>. This issue is now <strong style="color:#00F; background-color:inherit;">closed</strong>.</p>

<table class="files">
 <tr><th colspan="5" class="header">Files</th></tr>
 <tr>
  <th>File name</th>
  <th>Uploaded</th>
  <th>Description</th>
  <th>Edit</th>
 </tr>
 <tr>
  <td>
   <a href="file47156/readahead.py">readahead.py</a>
  </td>
  <td>
   <span>vstinner</span>,
   <span>2017-09-20 13:27</span>
  </td>
  <td></td>
  <td>
      
      
      
  </td>
 </tr>
 <tr>
  <td>
   <a href="file47157/0001-stop-crashes-when-iterating-over-a-file-on-multiple-.patch">0001-stop-crashes-when-iterating-over-a-file-on-multiple-.patch</a>
  </td>
  <td>
   <span>vstinner</span>,
   <span>2017-09-20 13:28</span>
  </td>
  <td></td>
  <td>
      
      
      
  </td>
 </tr>
</table>

<table class="files">
 <tr><th class="header" colspan="4">Pull Requests</th></tr>
 <tr>
  <th>URL</th>
  <th>Status</th>
  <th>Linked</th>
  <th>Edit</th>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/3670" title="bpo-31530: stop crashes when iterating over a file on multiple threads">PR 3670</a></td>
  <td>closed</td>
  <td>
   <span>benjamin.peterson</span>,
   <span>2017-09-20 14:35</span>
  </td>
  <td>
    
  </td>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/3672" title="[2.7] bpo-31530: Stop crashes when iterating over a file on multiple threads.">PR 3672</a></td>
  <td>merged</td>
  <td>
   <span>serhiy.storchaka</span>,
   <span>2017-09-20 15:31</span>
  </td>
  <td>
    
  </td>
 </tr>
 <tr>
  <td><a href="https://github.com/python/cpython/pull/5060" title="bpo-31530: fix crash when multiple threads iterate over a file, round 2">PR 5060</a></td>
  <td>merged</td>
  <td>
   <span>benjamin.peterson</span>,
   <span>2017-12-31 05:27</span>
  </td>
  <td>
    
  </td>
 </tr>
</table>





<table class="messages">
 <tr><th colspan="4" class="header">Messages (25)</th></tr>
 
  <tr>
    <th>
     <a href="#msg302610" id="msg302610">msg302610</a> - <a
    href="msg302610">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 13:27</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Reading from the same file object in different threads does crash Python 2.7. The readahead feature of <a href="https://github.com/python/cpython/blob/master/Objects/fileobject.c">Objects/fileobject.c</a> is not thread safe.

Try attached script to reproduce the crash.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302611" id="msg302611">msg302611</a> - <a
    href="msg302611">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 13:28</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Benjamin Peterson proposed attached patch.

@Benjamin: Would you mind to convert this patch to a PR to ease review?</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302613" id="msg302613">msg302613</a> - <a
    href="msg302613">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 13:36</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>The bug was first reported to the private Python security mailing list. The PSRT decided that it's a regular bug and doesn't need to be categorized as a vulnerability, since the attacker has to be able to run arbitrary code in practice.

The PSRT considers that no Python 2.7 application currently rely on reading from the same file object "at the same time" from different thread, since it currently crashs.

So an attacker would have to run his/her own code... but if an attacker can already run arbitrary code, why relying on an unstable race condition and inject machine code (so not portable), whereas Python standard library is full of nice features to write your portable exploit?

For more information, see the Python security model:
<a href="https://python-security.readthedocs.io/security.html#security-model">https://python-security.readthedocs.io/security.html#security-model</a></pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302614" id="msg302614">msg302614</a> - <a
    href="msg302614">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 13:39</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Python 3 is not affected by this bug.

In Python 3, the full I/O stack was rewritten from scratchn, the new io module has a different design. Reading ahead still exists in the io module, but it is now done by a dedicated object: io.BufferedReader, and this object uses a lock to prevent concurrent reads. A single thread controls the file position at the same time. (Except if a different thread uses directly the file descriptor, but that's a different story.)</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302615" id="msg302615">msg302615</a> - <a
    href="msg302615">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 13:53</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>In Python 3, reading ahead is implemented by _io.BufferedReader. This object uses a lock to provide a prevent race condition: it's not only to prevent crashes, but also provide warranties on how the file is read.

If thread A calls read() first, it gets the next bytes. If thread B calls read() while thread A is filling the internal file buffer ("readahead buffer"?), the second read is queued. The file position is only controlled by a single thread at the same time.

_PyOS_URandom() uses a similar strategy than Benjamin's proposed patch for the cached file descriptor of /dev/urandom:

    fd = _Py_open("/dev/urandom", O_RDONLY);
    if (fd &lt; 0) {
        ...
        return -1;
    }
    if (urandom_cache.fd &gt;= 0) {
        /* urandom_fd was initialized by another thread while we were
           not holding the GIL, keep it. */
        close(fd);
        fd = urandom_cache.fd;
    }
    else {
        ...
        urandom_cache.fd = fd;
    }

The difference is that opening /dev/urandom multiple times in parallel is safe, whereas reading from the same file descriptor in parellel... using the buffered fread()... is not safe. readahead() can require multiple fread() calls, so multiple read() syscalls. Interlaced reads in parallel is likely to return scrambled data.

Adding a lock in Python 2.7.15 can impact performances even on single threaded applications.

I'm not sure what whaters more here: performance or correctness?

Note: Even the awesome Python 3 io module has same flaws! <a href="https://bugs.python.org/issue12215">https://bugs.python.org/issue12215</a> "TextIOWrapper: issues with interlaced read-write"

The question is more *who* reads from the same file object in parallel? Does it make sense? :-) Do you expect that file.read(n) is "atomic" in term of parallelism?

Note 2: the io module is also available in Python 2.7, just not used by default by the builtin open() function ;-) io.open() must be used explicitly.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302616" id="msg302616">msg302616</a> - <a
    href="msg302616">(view)</a></th>
   <th>Author: Serhiy Storchaka (serhiy.storchaka) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 13:53</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>The patch is complex. What if just deny reentrant reads? Set a flag while read into a buffer, check it before reading in other thread, and raise RuntimeError.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302618" id="msg302618">msg302618</a> - <a
    href="msg302618">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 14:04</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Serhiy: "What if just deny reentrant reads? Set a flag while read into a buffer, check it before reading in other thread, and raise RuntimeError."

io.BufferedReader/io.BufferedWriter raises a RuntimeError exception for reentrant call, but only in the same thread. For example, it ease debug for signal handlers which trigger such reentrant call.

I'm not sure about 0001-stop-crashes-when-iterating-over-a-file-on-multiple-.patch since it doesn't fix the consistency: two parallel readline() calls can return the same line, instead of being mutual exclusive and only return different lines.

I'm not sure about adding a new lock. "Lock" sounds like "dead locks". I dislike the risk of introducing dead locks very late in the Python 2.7 development cycle.

I like the idea of a simple exception on concurrent operations. But I'm not sure how much code it will break :-/ Crazy idea: would it make sense to raise an exception by default, but add an opt-in option to ignore the exception? I wrote "crazy" since it became clear that the code is not thread-safe and so that parallel operations on the same file object is likely to corrupt data in various funny ways.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302619" id="msg302619">msg302619</a> - <a
    href="msg302619">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 14:05</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>@Serhiy: Would you like to propose a PR to implement your RuntimeError. Maybe we can test a few popular Python projects to see if the change would break them?

Which popular applications use threads (and files)? :-)</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302621" id="msg302621">msg302621</a> - <a
    href="msg302621">(view)</a></th>
   <th>Author: Guido van Rossum (gvanrossum) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 14:28</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>@benjamin can you post your patch as a PR so you'll get credit for it?</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302623" id="msg302623">msg302623</a> - <a
    href="msg302623">(view)</a></th>
   <th>Author: Marc-Andre Lemburg (lemburg) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 14:38</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Why not simply document the fact that read ahead in Python 2.7
is not thread-safe and leave it at that ?

.next() and .readline() already don't work well together, so this
would just add one more case.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302625" id="msg302625">msg302625</a> - <a
    href="msg302625">(view)</a></th>
   <th>Author: Marc-Andre Lemburg (lemburg) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 14:40</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Ah, didn't see Benjamin's patch: much better solution :-)</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302626" id="msg302626">msg302626</a> - <a
    href="msg302626">(view)</a></th>
   <th>Author: Guido van Rossum (gvanrossum) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 15:22</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>&gt; Why not simply document the fact that read ahead in Python 2.7
&gt; is not thread-safe and leave it at that ?

Program bugs should not crash the interpreter. (ctypes excepted.)</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302627" id="msg302627">msg302627</a> - <a
    href="msg302627">(view)</a></th>
   <th>Author: Serhiy Storchaka (serhiy.storchaka) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 15:33</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Actually such flag already exists. It is unlocked_count.

There is also similar issue with seek().</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302631" id="msg302631">msg302631</a> - <a
    href="msg302631">(view)</a></th>
   <th>Author: Marc-Andre Lemburg (lemburg) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-20 15:59</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>On 20.09.2017 17:22, Guido van Rossum wrote:
&gt; 
&gt;&gt; Why not simply document the fact that read ahead in Python 2.7
&gt;&gt; is not thread-safe and leave it at that ?
&gt; 
&gt; Program bugs should not crash the interpreter. (ctypes excepted.)

Ideally not, agreed :-)</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302932" id="msg302932">msg302932</a> - <a
    href="msg302932">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-25 09:14</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>It's difficult to make a choice between Benjamin's <a href="https://github.com/python/cpython/pull/3670" class="closed" title="GitHub PR 3670: [merged] [3.8] bpo-42508: Keep IDLE running on macOS (GH-23577)">PR 3670</a> and Serhiy's <a href="https://github.com/python/cpython/pull/3672" class="closed" title="GitHub PR 3672: [merged] [3.8] bpo-41889: [Enum] fix multiple-inheritance regression (GH-22487)">PR 3672</a>.

Benjamin wrote that about his PR:

&gt; No attempt is made to define or provide "reasonable" semantics for iterating
&gt; over a file on multiple threads. (Non-crashing) races are still
&gt; present. Duplicated, corrupt, and missing data will happen.

I'm not confortable with the idea of data corruption. I'm not confortable with breaking backward compatibility neither. IMHO the key question is if anyone actually use a file object at the same time in multiple threads. Since, it's likely that iterating on the same object crash, I'm not sure that anyone do it.

If someone rely on the feature, we should maybe explain how to handle properly the issue: use a lock.

I have a preference for Serhiy's <a href="https://github.com/python/cpython/pull/3672" class="closed" title="GitHub PR 3672: [merged] [3.8] bpo-41889: [Enum] fix multiple-inheritance regression (GH-22487)">PR 3672</a>. It's simple, the error is easy to understand. Maybe his PR just lacks a mention in "Porting to Python 2.7" section of What's New in Python 2.7 and/or the NEWS entry. Suggest to use a lock for example.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302938" id="msg302938">msg302938</a> - <a
    href="msg302938">(view)</a></th>
   <th>Author: Antoine Pitrou (pitrou) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-25 09:38</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>I'm wary of raising an exception.  Assuming Benjamin's patch is correct, I vote for it.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302939" id="msg302939">msg302939</a> - <a
    href="msg302939">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-25 09:39</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Antoine: "I'm wary of raising an exception.  Assuming Benjamin's patch is correct, I vote for it."

Can you please elaborate? You are fine with the fact that iter(file) in two thread can return the same line?</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302940" id="msg302940">msg302940</a> - <a
    href="msg302940">(view)</a></th>
   <th>Author: Antoine Pitrou (pitrou) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-25 09:45</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Le 25/09/2017 à 11:39, STINNER Victor a écrit :
&gt; 
&gt; Antoine: "I'm wary of raising an exception.  Assuming Benjamin's patch is correct, I vote for it."
&gt; 
&gt; Can you please elaborate? You are fine with the fact that iter(file) in two thread can return the same line?

AFAIU it already could.  Iteration on Python 2 files is fragile, now is
not the time to fix fundamental bugs in Python 2.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302973" id="msg302973">msg302973</a> - <a
    href="msg302973">(view)</a></th>
   <th>Author: Guido van Rossum (gvanrossum) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-25 19:14</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>It should be like 'if key in dct: del dct[key]'. It may fail when two
threads do this but the *internal* state of dct should not be compromised.

On Sep 25, 2017 2:45 AM, "Antoine Pitrou" &lt;<a href="mailto:report@bugs.python.org">report@bugs.python.org</a>&gt; wrote:

&gt;
&gt; Antoine Pitrou added the comment:
&gt;
&gt; Le 25/09/2017 à 11:39, STINNER Victor a écrit :
&gt; &gt;
&gt; &gt; Antoine: "I'm wary of raising an exception.  Assuming Benjamin's patch
&gt; is correct, I vote for it."
&gt; &gt;
&gt; &gt; Can you please elaborate? You are fine with the fact that iter(file) in
&gt; two thread can return the same line?
&gt;
&gt; AFAIU it already could.  Iteration on Python 2 files is fragile, now is
&gt; not the time to fix fundamental bugs in Python 2.
&gt;
&gt; ----------
&gt;
&gt; _______________________________________
&gt; Python tracker &lt;<a href="mailto:report@bugs.python.org">report@bugs.python.org</a>&gt;
&gt; &lt;<a href="https://bugs.python.org/issue31530">https://bugs.python.org/issue31530</a>&gt;
&gt; _______________________________________
&gt;</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg302977" id="msg302977">msg302977</a> - <a
    href="msg302977">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-09-25 19:52</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>&gt; Iteration on Python 2 files is fragile, now is not the time to fix fundamental bugs in Python 2.

Right. I don't have a strong preference for Serhiy's <a href="https://github.com/python/cpython/pull/3672" class="closed" title="GitHub PR 3672: [merged] [3.8] bpo-41889: [Enum] fix multiple-inheritance regression (GH-22487)">PR 3672</a>.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg306021" id="msg306021">msg306021</a> - <a
    href="msg306021">(view)</a></th>
   <th>Author: Serhiy Storchaka (serhiy.storchaka) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-11-10 10:58</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>
New changeset <a href="https://hg.python.org/lookup/6401e5671781eb217ee1afb4603cc0d1b0367ae6">6401e5671781eb217ee1afb4603cc0d1b0367ae6</a> by Serhiy Storchaka in branch '2.7':
[2.7] <a class="closed" title="[closed] CVE-2018-1000030: Python 2.7 readahead feature of file objects is not thread safe" href="issue31530">bpo-31530</a>: Stop crashes when iterating over a file on multiple threads. (<a class="closed" title="[closed] Ill-formed surrogates not treated as errors during encoding/decoding" href="issue3672">#3672</a>)
<a href="https://github.com/python/cpython/commit/6401e5671781eb217ee1afb4603cc0d1b0367ae6">https://github.com/python/cpython/commit/6401e5671781eb217ee1afb4603cc0d1b0367ae6</a>
</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg309265" id="msg309265">msg309265</a> - <a
    href="msg309265">(view)</a></th>
   <th>Author: Benjamin Peterson (benjamin.peterson) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2017-12-31 05:24</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>Unfortunately, it looks like this fix causes a regression. Some programs rely on being able to seek() and write to a file on multiple threads. For example, py.test captures the standard streams by redirecting them to a tmpfile and then truncating+seeking to 0 after every test. This change broke that situation when multiple threads are logging. Anyway, there's no real fundamental reason to prevent concurrent access, since the underlying stdio implementation is threadsafe. I think we'll have to resurrect my PR.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg309386" id="msg309386">msg309386</a> - <a
    href="msg309386">(view)</a></th>
   <th>Author: Benjamin Peterson (benjamin.peterson) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2018-01-02 17:25</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>
New changeset <a href="https://hg.python.org/lookup/dbf52e02f18dac6f5f0a64f78932f3dc6efc056b">dbf52e02f18dac6f5f0a64f78932f3dc6efc056b</a> by Benjamin Peterson in branch '2.7':
<a class="closed" title="[closed] CVE-2018-1000030: Python 2.7 readahead feature of file objects is not thread safe" href="issue31530">bpo-31530</a>: fix crash when multiple threads iterate over a file, round 2 (<a class="closed" title="[closed] gcc profile guided optimization" href="issue5060">#5060</a>)
<a href="https://github.com/python/cpython/commit/dbf52e02f18dac6f5f0a64f78932f3dc6efc056b">https://github.com/python/cpython/commit/dbf52e02f18dac6f5f0a64f78932f3dc6efc056b</a>
</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg320189" id="msg320189">msg320189</a> - <a
    href="msg320189">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2018-06-21 14:48</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>This bug has been fixed in Python 2.7.15.</pre>
   </td>
  </tr>
 
 
  <tr>
    <th>
     <a href="#msg320190" id="msg320190">msg320190</a> - <a
    href="msg320190">(view)</a></th>
   <th>Author: STINNER Victor (vstinner) <span title="Contributor form received">*</span> <img src="@@file/committer.png" title="Python committer" alt="(Python committer)" /></th>
   <th>Date: 2018-06-21 15:00</th>
  </tr>
  <tr>
   <td colspan="4" class="content">
    
    <pre>I added this issue to my python-security page since the issue got a CVE number: CVE-2018-1000030

* <a href="http://python-security.readthedocs.io/vuln/cve-2018-1000030_python_2.7_readahead_is_not_thread_safe.html">http://python-security.readthedocs.io/vuln/cve-2018-1000030_python_2.7_readahead_is_not_thread_safe.html</a>
* <a href="https://access.redhat.com/security/cve/cve-2018-1000030">https://access.redhat.com/security/cve/cve-2018-1000030</a></pre>
   </td>
  </tr>
 
</table>

<table class="history table table-condensed table-striped"><tr><th colspan="4" class="header">
History
</th></tr><tr>
<th>Date</th>
<th>User</th>
<th>Action</th>
<th>Args</th>
</tr>
<tr><td>2018-06-21&nbsp;15:00:21</td><td>vstinner</td><td>set</td><td>type: security<br />messages:
  + <a rel="nofollow" href="msg320190">msg320190</a><br />title: Python 2.7 readahead feature of file objects is not thread safe -> CVE-2018-1000030: Python 2.7 readahead feature of file objects is not thread safe</td></tr>
<tr><td>2018-06-21&nbsp;14:48:42</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg320189">msg320189</a></td></tr>
<tr><td>2018-01-02&nbsp;17:31:30</td><td>benjamin.peterson</td><td>set</td><td>status: open -> closed<br />resolution: fixed<br />stage: patch review -> resolved</td></tr>
<tr><td>2018-01-02&nbsp;17:25:49</td><td>benjamin.peterson</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg309386">msg309386</a></td></tr>
<tr><td>2017-12-31&nbsp;05:27:48</td><td>benjamin.peterson</td><td>set</td><td>stage: resolved -> patch review<br />pull_requests:
  + <a rel="nofollow" href="pull_request4936">pull_request4936</a></td></tr>
<tr><td>2017-12-31&nbsp;05:25:00</td><td>benjamin.peterson</td><td>set</td><td>status: closed -> open<br />resolution: fixed -> (no value)<br />messages:
  + <a rel="nofollow" href="msg309265">msg309265</a><br /></td></tr>
<tr><td>2017-11-10&nbsp;10:59:55</td><td>serhiy.storchaka</td><td>set</td><td>status: open -> closed<br />resolution: fixed<br />stage: patch review -> resolved</td></tr>
<tr><td>2017-11-10&nbsp;10:58:58</td><td>serhiy.storchaka</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg306021">msg306021</a></td></tr>
<tr><td>2017-09-25&nbsp;19:52:04</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302977">msg302977</a></td></tr>
<tr><td>2017-09-25&nbsp;19:14:43</td><td>gvanrossum</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302973">msg302973</a></td></tr>
<tr><td>2017-09-25&nbsp;09:45:03</td><td>pitrou</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302940">msg302940</a></td></tr>
<tr><td>2017-09-25&nbsp;09:39:54</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302939">msg302939</a></td></tr>
<tr><td>2017-09-25&nbsp;09:38:46</td><td>pitrou</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302938">msg302938</a></td></tr>
<tr><td>2017-09-25&nbsp;09:14:35</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302932">msg302932</a></td></tr>
<tr><td>2017-09-20&nbsp;15:59:59</td><td>lemburg</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302631">msg302631</a><br />title: [2.7] Python 2.7 readahead feature of file objects is not thread safe -> Python 2.7 readahead feature of file objects is not thread safe</td></tr>
<tr><td>2017-09-20&nbsp;15:33:08</td><td>serhiy.storchaka</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302627">msg302627</a></td></tr>
<tr><td>2017-09-20&nbsp;15:31:15</td><td>serhiy.storchaka</td><td>set</td><td>pull_requests:
  + <a rel="nofollow" href="pull_request3661">pull_request3661</a></td></tr>
<tr><td>2017-09-20&nbsp;15:22:24</td><td>gvanrossum</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302626">msg302626</a></td></tr>
<tr><td>2017-09-20&nbsp;14:40:54</td><td>lemburg</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302625">msg302625</a></td></tr>
<tr><td>2017-09-20&nbsp;14:38:01</td><td>lemburg</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user4">lemburg</a><br />messages:
  + <a rel="nofollow" href="msg302623">msg302623</a><br /></td></tr>
<tr><td>2017-09-20&nbsp;14:35:05</td><td>benjamin.peterson</td><td>set</td><td>stage: patch review<br />pull_requests:
  + <a rel="nofollow" href="pull_request3660">pull_request3660</a></td></tr>
<tr><td>2017-09-20&nbsp;14:28:59</td><td>gvanrossum</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user5">gvanrossum</a><br />messages:
  + <a rel="nofollow" href="msg302621">msg302621</a><br /></td></tr>
<tr><td>2017-09-20&nbsp;14:05:29</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302619">msg302619</a></td></tr>
<tr><td>2017-09-20&nbsp;14:04:17</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302618">msg302618</a></td></tr>
<tr><td>2017-09-20&nbsp;13:53:57</td><td>serhiy.storchaka</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302616">msg302616</a></td></tr>
<tr><td>2017-09-20&nbsp;13:53:06</td><td>vstinner</td><td>set</td><td>nosy:
  + <a rel="nofollow" href="user2040">pitrou</a><br />messages:
  + <a rel="nofollow" href="msg302615">msg302615</a><br /></td></tr>
<tr><td>2017-09-20&nbsp;13:39:52</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302614">msg302614</a></td></tr>
<tr><td>2017-09-20&nbsp;13:36:42</td><td>vstinner</td><td>set</td><td>messages:
  + <a rel="nofollow" href="msg302613">msg302613</a></td></tr>
<tr><td>2017-09-20&nbsp;13:28:32</td><td>vstinner</td><td>set</td><td>files:
  + <a rel="nofollow" href="file47157">0001-stop-crashes-when-iterating-over-a-file-on-multiple-.patch</a><br /><br />nosy:
  + <a rel="nofollow" href="user4455">benjamin.peterson</a>, <a rel="nofollow" href="user15623">serhiy.storchaka</a><br />messages:
  + <a rel="nofollow" href="msg302611">msg302611</a><br /><br />keywords:
  + <a rel="nofollow" href="keyword2">patch</a></td></tr>
<tr><td>2017-09-20&nbsp;13:27:12</td><td>vstinner</td><td>create</td><td></td></tr>
</table>

</div>


</div> <!-- content-body -->
<div id="footer">
<div id="credits">
  Hosted on <a href="https://m.do.co/c/783434964889" title="Hosted on DigitalOcean">DigitalOcean</a>,
  <br>
  Supported by <a href="https://python.org/psf-landing/" title="The Python Software Foundation">The Python Software Foundation</a>,
  <br>
  Powered by <a href="http://roundup.sourceforge.net" title="Powered by the Roundup Issue Tracker">Roundup</a>
</div> <!-- credits -->
Copyright &copy; 1990-2020, <a href="http://python.org/psf">Python Software Foundation</a><br />
<a href="http://python.org/about/legal">Legal Statements</a>
</div> <!-- footer -->
</div> <!-- body-main -->
</div> <!-- content -->



</body>
</html>

