<!doctype html><html lang=en-us><head><meta charset=utf-8><meta http-equiv=x-ua-compatible content="chrome=1"><meta name=HandheldFriendly content=True><meta name=MobileOptimized content=320><meta name=viewport content="width=device-width,initial-scale=1"><meta name=referrer content=no-referrer><meta name=author content=bnbdr><meta name=description content="*slaps NAS* This baby fits so many CVEs"><meta property=og:site_name content=https://bnbdr.github.io/><meta property=og:type content=object><meta property=og:image content=https://bnbdr.github.io/posts/wd/previcon.png?1><meta property=og:title content="WD My Cloud RCE"><meta property=og:url content=https://bnbdr.github.io/posts/wd/><meta property=og:description content="*slaps NAS* This baby fits so many CVEs"><title>WD My Cloud RCE</title><link rel=canonical href=https://bnbdr.github.io/posts/wd/><link rel=stylesheet href="https://fonts.googleapis.com/css?family=Open+Sans:400,700|Ubuntu+Mono:400,400i,700,700i|Raleway:500"><link rel=stylesheet href=https://bnbdr.github.io/css/reset.min.css><link rel=stylesheet href=https://bnbdr.github.io/css/pygments.min.css><link rel=stylesheet href=https://bnbdr.github.io/css/main.min.css><link rel="shortcut icon" href=https://bnbdr.github.io/img/icon.png></head><body lang=en><section class=header><div class=container><div class=content><div class=author_name>bnbdr</div><div class=profpic_container><a href=https://bnbdr.github.io/ class=profpic_anchor><img id=profpic src=https://bnbdr.github.io/img/avatar.png></a></div><div class=icons_wrapper><a href=//github.com/bnbdr target=_blank rel=noopener><div class=backicon id=githubicon></div></a><a href=//twitter.com/bnbdr target=_blank rel=noopener><div class=backicon id=twittericon></div></a></div></div></div></section><section class=main><div class=container><div class=content><div class=page-heading>WD My Cloud RCE<br><div class=sub-title>*slaps NAS* This baby fits so many CVEs</div></div><div class=inpost-date>May 22, 2019</div><ul id=tags-single><li class=posttag><a class=tag href=https://bnbdr.github.io/tags/exploit>#exploit</a></li><li class=posttag><a class=tag href=https://bnbdr.github.io/tags/write-up>#write-up</a></li></ul><div class=markdown><p>In this post I&rsquo;ll explain how I discoverd several vulnerabilities in Western Digital NAS devices<sup class=footnote-ref id=fnref:1><a href=#fn:1>1</a></sup> and used them together to execute code remotely, as root.</p><p>To take control of the NAS an attacker needs to be in the same network and know its IP address.</p><p><a href=//github.com/bnbdr/wd-rce/>The PoC is available here</a>.</p><h3 id=a-smelly-smell-that-smells-smelly>a smelly smell that smells&hellip; smelly</h3><p>It all began after I decided to splurge and purchase the rather techy-oriented NAS option available by WD - the EX2 Ultra. Unlike other models this one gives the consumer the option to switch out the hard-drives, lets you use it without installing dedicated applications, and even works without internet connectivity.</p><p>While setting up the device I decided to open up the browser inspector and discovered an authentication bypass(by setting <code>&quot;isAdmin&quot;</code> cookie to <code>1</code>). But alas, after updating my NAS I realized it had been fixed in a firmware update<sup class=footnote-ref id=fnref:2><a href=#fn:2>2</a></sup>.</p><p>I wanted to dig a little further because this bug had quite a stentch to it. After downloading the <a href="https://support.wdc.com/downloads.aspx?p=270&amp;lang=en%EF%BC%89">source code from WD&rsquo;s website</a> and foraging for the logic in charge of checking users&rsquo; credentials I located the coveted piece of code- It no longer relies on the user-supplied cookie:</p><div class=highlight style=background:#272822><pre style=line-height:125%><code class=language-javascript data-lang=javascript><span></span><span style=color:#75715e>/* fixed code in </span>
<span style=color:#75715e>      firmware/module/crfs/web/pages/lib/login_checker.php </span>
<span style=color:#75715e>*/</span>

<span style=color:#66d9ef>function</span> <span style=color:#a6e22e>login_check</span><span style=color:#f8f8f2>()</span>
<span style=color:#f8f8f2>{</span>
    <span style=color:#a6e22e>$ret</span> <span style=color:#f92672>=</span> <span style=color:#ae81ff>0</span><span style=color:#f8f8f2>;</span>
    
    <span style=color:#66d9ef>if</span> <span style=color:#f8f8f2>(</span><span style=color:#f92672>!</span><span style=color:#a6e22e>csrf_token_check</span><span style=color:#f8f8f2>())</span> <span style=color:#75715e>/* this check can be bypassed easily as well */</span>
        <span style=color:#66d9ef>return</span> <span style=color:#a6e22e>$ret</span><span style=color:#f8f8f2>;</span>

    <span style=color:#66d9ef>if</span> <span style=color:#f8f8f2>(</span><span style=color:#a6e22e>isset</span><span style=color:#f8f8f2>(</span><span style=color:#a6e22e>$_SESSION</span><span style=color:#f8f8f2>[</span><span style=color:#e6db74>&#39;username&#39;</span><span style=color:#f8f8f2>]))</span>
    <span style=color:#f8f8f2>{</span>
        <span style=color:#66d9ef>if</span> <span style=color:#f8f8f2>(</span><span style=color:#a6e22e>isset</span><span style=color:#f8f8f2>(</span><span style=color:#a6e22e>$_SESSION</span><span style=color:#f8f8f2>[</span><span style=color:#e6db74>&#39;username&#39;</span><span style=color:#f8f8f2>])</span> <span style=color:#f92672>&amp;&amp;</span> <span style=color:#a6e22e>$_SESSION</span><span style=color:#f8f8f2>[</span><span style=color:#e6db74>&#39;username&#39;</span><span style=color:#f8f8f2>]</span> <span style=color:#f92672>!=</span> <span style=color:#e6db74>&quot;&quot;</span><span style=color:#f8f8f2>)</span>
            <span style=color:#a6e22e>$ret</span> <span style=color:#f92672>=</span> <span style=color:#ae81ff>2</span><span style=color:#f8f8f2>;</span> <span style=color:#75715e>//login, normal user</span>

        <span style=color:#66d9ef>if</span> <span style=color:#f8f8f2>(</span><span style=color:#a6e22e>$_SESSION</span><span style=color:#f8f8f2>[</span><span style=color:#e6db74>&#39;isAdmin&#39;</span><span style=color:#f8f8f2>]</span> <span style=color:#f92672>==</span> <span style=color:#ae81ff>1</span><span style=color:#f8f8f2>)</span>
            <span style=color:#a6e22e>$ret</span> <span style=color:#f92672>=</span> <span style=color:#ae81ff>1</span><span style=color:#f8f8f2>;</span> <span style=color:#75715e>//login, admin</span>
    <span style=color:#f8f8f2>}</span>

    <span style=color:#66d9ef>return</span> <span style=color:#a6e22e>$ret</span><span style=color:#f8f8f2>;</span>
<span style=color:#f8f8f2>}</span>
</code></pre></div><h3 id=unauthenticated-file-upload-cve-2019-9951-https-cve-mitre-org-cgi-bin-cvename-cgi-name-cve-2019-9951>Unauthenticated file upload (<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9951">CVE-2019-9951</a>)</h3><p>By looking around all that &ldquo;lovely&rdquo; PHP code I stumbled upon one web-accessible file that failed to use the above <code>login_check</code> function correctly, allowing unauthenticated file uploads to the device:</p><div class=highlight style=background:#272822><pre style=line-height:125%><code class=language-javascript data-lang=javascript><span></span><span style=color:#75715e>/* found in:</span>
<span style=color:#75715e>    firmware/module/crfs/web/pages/jquery/uploader/uploadify.php </span>
<span style=color:#75715e>*/</span>

<span style=color:#a6e22e>include</span> <span style=color:#f8f8f2>(</span><span style=color:#e6db74>&quot;../../lib/login_checker.php&quot;</span><span style=color:#f8f8f2>);</span>

<span style=color:#66d9ef>if</span> <span style=color:#f8f8f2>(</span><span style=color:#a6e22e>login_check</span><span style=color:#f8f8f2>()</span> <span style=color:#f92672>!=</span> <span style=color:#ae81ff>1</span><span style=color:#f8f8f2>)</span> <span style=color:#75715e>/* i.e not-authenticated / admin */</span>
<span style=color:#f8f8f2>{</span>
    <span style=color:#75715e>/* user-controlled */</span>
    <span style=color:#66d9ef>if</span> <span style=color:#f8f8f2>(</span><span style=color:#a6e22e>$_SERVER</span><span style=color:#f8f8f2>[</span><span style=color:#e6db74>&#39;HTTP_USER_AGENT&#39;</span><span style=color:#f8f8f2>]</span> <span style=color:#f92672>==</span> <span style=color:#e6db74>&#39;Shockwave Flash&#39;</span><span style=color:#f8f8f2>)</span> 
    <span style=color:#f8f8f2>{</span>
        <span style=color:#a6e22e>$headers</span> <span style=color:#f92672>=</span>  <span style=color:#a6e22e>getallheaders</span><span style=color:#f8f8f2>();</span>

        <span style=color:#75715e>/* also user-controlled */</span>
        <span style=color:#66d9ef>if</span> <span style=color:#f8f8f2>(</span><span style=color:#a6e22e>$_GET</span><span style=color:#f8f8f2>[</span><span style=color:#e6db74>&#39;WD-CSRF-TOKEN&#39;</span><span style=color:#f8f8f2>]</span> <span style=color:#f92672>!==</span> <span style=color:#a6e22e>$_POST</span><span style=color:#f8f8f2>[</span><span style=color:#e6db74>&#39;X-CSRF-Token&#39;</span><span style=color:#f8f8f2>]</span> <span style=color:#f92672>||</span> 
            <span style=color:#a6e22e>strrpos</span><span style=color:#f8f8f2>(</span><span style=color:#a6e22e>$headers</span><span style=color:#f8f8f2>[</span><span style=color:#e6db74>&#39;Content-Type&#39;</span><span style=color:#f8f8f2>],</span> <span style=color:#e6db74>&#39;multipart/form-data;&#39;</span><span style=color:#f8f8f2>))</span>
        <span style=color:#f8f8f2>{</span>
            <span style=color:#a6e22e>echo</span> <span style=color:#a6e22e>json_encode</span><span style=color:#f8f8f2>(</span><span style=color:#a6e22e>$r</span><span style=color:#f8f8f2>);</span>
            <span style=color:#a6e22e>exit</span><span style=color:#f8f8f2>;</span>
        <span style=color:#f8f8f2>}</span>
        <span style=color:#75715e>/* &gt;&gt; by reaching this line, you bypassed the authentication for this page*/</span>
    <span style=color:#f8f8f2>}</span>
    <span style=color:#66d9ef>else</span>
    <span style=color:#f8f8f2>{</span>
        <span style=color:#a6e22e>echo</span> <span style=color:#a6e22e>json_encode</span><span style=color:#f8f8f2>(</span><span style=color:#a6e22e>$r</span><span style=color:#f8f8f2>);</span>
        <span style=color:#a6e22e>exit</span><span style=color:#f8f8f2>;</span>
    <span style=color:#f8f8f2>}</span>
<span style=color:#f8f8f2>}</span>
<span style=color:#75715e>/* upload logic here */</span>
</code></pre></div><p>However, this is not enough for exploitation since the aptly named <code>uploadify.php</code> will perform a (somewhat buggy) check on the target path and will only allow writes to specific locations:</p><div class=highlight style=background:#272822><pre style=line-height:125%><code class=language-javascript data-lang=javascript><span></span><span style=color:#75715e>/* found in:</span>
<span style=color:#75715e>      firmware/module/crfs/web/pages/lib/login_checker.php </span>
<span style=color:#75715e>*/</span>

<span style=color:#66d9ef>function</span> <span style=color:#a6e22e>check_path</span><span style=color:#f8f8f2>(</span><span style=color:#a6e22e>$path</span><span style=color:#f8f8f2>)</span>
<span style=color:#f8f8f2>{</span>
    <span style=color:#a6e22e>$file_path</span> <span style=color:#f92672>=</span> <span style=color:#a6e22e>realpath</span><span style=color:#f8f8f2>(</span><span style=color:#a6e22e>$path</span><span style=color:#f8f8f2>);</span>
    <span style=color:#66d9ef>if</span> <span style=color:#f8f8f2>(</span><span style=color:#f92672>!</span><span style=color:#a6e22e>$file_path</span><span style=color:#f8f8f2>)</span> <span style=color:#66d9ef>return</span> <span style=color:#66d9ef>false</span><span style=color:#f8f8f2>;</span>

    <span style=color:#66d9ef>if</span> <span style=color:#f8f8f2>(</span><span style=color:#a6e22e>strncmp</span><span style=color:#f8f8f2>(</span><span style=color:#a6e22e>$file_path</span><span style=color:#f8f8f2>,</span> <span style=color:#e6db74>&quot;/mnt/HD&quot;</span><span style=color:#f8f8f2>,</span> <span style=color:#ae81ff>7</span><span style=color:#f8f8f2>)</span> <span style=color:#f92672>!=</span> <span style=color:#ae81ff>0</span> <span style=color:#f92672>&amp;&amp;</span>
        <span style=color:#a6e22e>strncmp</span><span style=color:#f8f8f2>(</span><span style=color:#a6e22e>$file_path</span><span style=color:#f8f8f2>,</span> <span style=color:#e6db74>&quot;/mnt/USB&quot;</span><span style=color:#f8f8f2>,</span> <span style=color:#ae81ff>8</span><span style=color:#f8f8f2>)</span> <span style=color:#f92672>!=</span> <span style=color:#ae81ff>0</span> <span style=color:#f92672>&amp;&amp;</span>
        <span style=color:#a6e22e>strncmp</span><span style=color:#f8f8f2>(</span><span style=color:#a6e22e>$file_path</span><span style=color:#f8f8f2>,</span> <span style=color:#e6db74>&quot;/mnt/isoMount&quot;</span><span style=color:#f8f8f2>,</span> <span style=color:#ae81ff>13</span><span style=color:#f8f8f2>)</span> <span style=color:#f92672>!=</span> <span style=color:#ae81ff>0</span><span style=color:#f8f8f2>)</span>
        <span style=color:#66d9ef>return</span> <span style=color:#66d9ef>false</span><span style=color:#f8f8f2>;</span>

    <span style=color:#66d9ef>return</span> <span style=color:#66d9ef>true</span><span style=color:#f8f8f2>;</span>
<span style=color:#f8f8f2>}</span>
</code></pre></div><h3 id=authentication-bypass-cve-2019-9950-https-cve-mitre-org-cgi-bin-cvename-cgi-name-cve-2019-9950>Authentication bypass (<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9950">CVE-2019-9950</a>)</h3><p>The management of credentials is handled by <code>firmware/module/crfs/cgi/login_mgr.cgi</code> in the <code>cgiMain</code> exported function.</p><p>As it turns out the control-panel utilizes the built-in OS credentials management. This lets the control panel check the supplied username and password against the ones stored in <code>/etc/shadow</code>:</p><p><img src=shadow_open.png alt></p><p>Taking a look at said file shows that the <a href=https://en.wikipedia.org/wiki/Nobody_(username)><code>nobody</code></a> account&rsquo;s password is encrypted using the old <a href=https://en.wikipedia.org/wiki/Crypt_(C)><code>CRYPT</code></a> algorithm:</p><pre><code>nobody:pACwI1fCXYNw6:0:0:99999:7:::
</code></pre><p>One could use <code>John the Ripper</code> or <code>hashcat</code> to try and crack that hash, but nothing beats a good ol&rsquo; fashioned hunch:
<img src=crypt.png alt>
Ironically, thanks to the fact that the user is configured on the NAS with <strong>an empty password by default</strong>, anybody could easily receive a session token:</p><div class=highlight style=background:#272822><pre style=line-height:125%><code class=language-bash data-lang=bash><span></span>POST http://WD/cgi-bin/login_mgr.cgi
<span style=color:#f92672>{</span>
    <span style=color:#e6db74>&quot;cmd&quot;</span>: <span style=color:#e6db74>&quot;wd_login&quot;</span>,
    <span style=color:#e6db74>&quot;username&quot;</span>: <span style=color:#e6db74>&quot;nobody&quot;</span>,
    <span style=color:#e6db74>&quot;pwd&quot;</span>: <span style=color:#e6db74>&quot;&quot;</span>,
    <span style=color:#e6db74>&quot;port&quot;</span>: <span style=color:#e6db74>&quot;&quot;</span>,
<span style=color:#f92672>}</span>
</code></pre></div><h3 id=root-rce-using-low-privilege-token-cve-2019-9949-https-cve-mitre-org-cgi-bin-cvename-cgi-name-cve-2019-9949>Root-RCE using low-privilege token (<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-9949">CVE-2019-9949</a>)</h3><p>Armed with a standard privileges token, one can now access a broader set of <del>features</del> attack vectors. One such feature is a file-manager (implemented mostly by <code>webfile_mgr.cgi</code>), and whilst limited in functionality, it does support opening zip/tar archives.
<img src=web_file_mgr.png alt></p><p>Clicking the button showed in the picture above triggers an HTTP request to <code>webfile_mgr.cgi</code>, with the sub-commnad <code>cgi_unzip</code>:</p><div class=highlight style=background:#272822><pre style=line-height:125%><code class=language-js data-lang=js><span></span><span style=color:#a6e22e>Request</span> <span style=color:#a6e22e>URL</span><span style=color:#f92672>:</span>    <span style=color:#e6db74>&quot;http://wd/cgi-bin/webfile_mgr.cgi&quot;</span>
<span style=color:#a6e22e>Request</span> <span style=color:#a6e22e>method</span><span style=color:#f92672>:</span> <span style=color:#e6db74>&quot;POST&quot;</span>

<span style=color:#a6e22e>cmd</span><span style=color:#f92672>:</span>    <span style=color:#e6db74>&quot;cgi_unzip&quot;</span>
<span style=color:#a6e22e>path</span><span style=color:#f92672>:</span>   <span style=color:#e6db74>&quot;/mnt/HD/HD_a2/Public/test&quot;</span>
<span style=color:#a6e22e>name</span><span style=color:#f92672>:</span>   <span style=color:#e6db74>&quot;myfile.zip&quot;</span>
</code></pre></div><p>After passing through the necessary routing and permission checks in <code>firmware/module/crfs/web/pages/cgi_api.php</code> the cgi module forces some validation on the input by escaping the paths and executing <code>unzip</code>, passing it the <code>-t</code> command-line option:</p><div class=highlight style=background:#272822><pre style=line-height:125%><code class=language-javascript data-lang=javascript><span></span><span style=color:#75715e>/* ... in  webfile_mgr.cgi */</span>
<span style=color:#a6e22e>fix_path_special_char_inline</span><span style=color:#f8f8f2>(</span><span style=color:#a6e22e>archive_name</span><span style=color:#f8f8f2>);</span>  <span style=color:#75715e>// user controlled</span>
<span style=color:#75715e>// target_dir is checked to exist in the PHP code </span>
<span style=color:#a6e22e>sprintf</span><span style=color:#f8f8f2>(</span><span style=color:#a6e22e>cmdline</span><span style=color:#f8f8f2>,</span> <span style=color:#e6db74>&quot;cd %s;/usr/bin/unzip -t %s&quot;</span><span style=color:#f8f8f2>,</span> <span style=color:#a6e22e>target_dir</span><span style=color:#f8f8f2>,</span> <span style=color:#a6e22e>archive_name</span><span style=color:#f8f8f2>);</span> 
<span style=color:#a6e22e>ret</span> <span style=color:#f92672>=</span> <span style=color:#a6e22e>popen</span><span style=color:#f8f8f2>(</span><span style=color:#a6e22e>cmdline</span><span style=color:#f8f8f2>,</span> <span style=color:#e6db74>&quot;r&quot;</span><span style=color:#f8f8f2>);</span>
<span style=color:#75715e>/* ... */</span>
</code></pre></div><p>The <code>fix_path_special_char_inline</code> function loosely translates to:</p><div class=highlight style=background:#272822><pre style=line-height:125%><code class=language-python data-lang=python><span></span><span style=color:#66d9ef>def</span> <span style=color:#a6e22e>fix_path_special_char_inline</span><span style=color:#f8f8f2>(input_str):</span>
    <span style=color:#f8f8f2>out_str</span> <span style=color:#f92672>=</span> <span style=color:#e6db74>&#39;&#39;</span>
    <span style=color:#66d9ef>for</span> <span style=color:#f8f8f2>c</span> <span style=color:#f92672>in</span> <span style=color:#f8f8f2>input_str:</span>
        <span style=color:#66d9ef>if</span> <span style=color:#f8f8f2>c</span> <span style=color:#f92672>in</span> <span style=color:#e6db74>&#39;`$#%^&amp;()+{};[]\=&#39;</span><span style=color:#f8f8f2>:</span> <span style=color:#75715e># much secure</span>
            <span style=color:#f8f8f2>out_str</span> <span style=color:#f92672>+=</span> <span style=color:#e6db74>&#39;</span><span style=color:#ae81ff>\\</span><span style=color:#e6db74>&#39;</span>
        <span style=color:#f8f8f2>out_str</span> <span style=color:#f92672>+=</span> <span style=color:#f8f8f2>c</span>
        
    <span style=color:#66d9ef>return</span> <span style=color:#f8f8f2>out_str</span>
</code></pre></div><p>One character, egregiously missing from the above code, is the pipe(<code>|</code>) character. For those less verse in the bash/batch world, When double pipe (<code>||</code>) is used inbetween two commands the shell will execute the latter command if the former fails.</p><p>In this scenario, by using an archive &ldquo;name&rdquo; that would result in <code>unzip</code> returning an error code (e.g. a non-existent path), an attacker could inject a shell command that would run as <strong>root</strong>. For example:</p><div class=highlight style=background:#272822><pre style=line-height:125%><code class=language-shell data-lang=shell><span></span><span style=color:#f8f8f2>cd</span> %s<span style=color:#f8f8f2>;</span>/usr/bin/unzip -t <span style=color:#ae81ff>1</span><span style=color:#f92672>||</span>%MY_EVIL_COMMAND%
</code></pre></div><h3 id=zip-me-baby-one-more-time>zip me baby one more time</h3><p>As it turns out the file manager is susceptible to other attacks. Specifically, extracting an archive with symbolic links would create them with no further validation, allowing future filesystem operations to abuse them with impunity.</p><p>For example: if two consecutive <code>cgi_untar</code> commands are performed on two specially crafted archives, an attacker can cause the file-manager to write anywhere(as root). This vulnerability also requires a normal user-session.</p><p>This happens because the code that extracts archives will simply untar the archive using <code>cgi_untar</code> command, even if it contains symlinks. Then, when extracting a second archive, an attacker can use the previously created symlink to write into any arbitrary path.</p><p>Since the NAS uses <code>squashfs</code> not all the paths are actually writeable, however, <code>/bin/</code> is. For maximum amusement I decided to overwrite <code>tar</code> itself, thus achieving RCE by performing the following:</p><ul><li>upload first archive, containing symlink</li><li>send <code>cgi_untar</code> command: <strong>create symlink to</strong> <code>/bin/</code></li><li>upload second archive, containing payload</li><li>send <code>cgi_untar</code> command: <strong>overwrite</strong> <code>/bin/tar</code></li><li>send <code>cgi_untar</code> command: <strong>execute my payload 😈</strong></li></ul><blockquote><p>This second vulnerability was not deemed worthy of its own CVE-ID despite its severity.</p></blockquote><h2 id=disclosure-timeline>Disclosure Timeline</h2><ul><li><strong>2019-01-20</strong> 🍄 reported to <a href=mailto:psirt@wdc.com>psirt@wdc.com</a> with 30-day deadline</li><li><strong>2019-01-22</strong> <code>ᴡᴅ</code> sent an automated(?) response</li><li><strong>2019-02-05</strong> 🍄 requested comfirmation of issues</li><li><strong>2019-02-06</strong> <code>ᴡᴅ</code> asked for 90 days to fix the issues</li><li><strong>2019-03-05</strong> 🍄 requested status update</li><li><strong>2019-03-15</strong> <code>ᴡᴅ</code> asked for <em>additional</em> 90-day extension</li><li><strong>2019-03-16</strong> 🍄 agreed on 30-day extension</li><li><strong>2019-03-27</strong> <code>ᴡᴅ</code> <em>released first patch (CVE-2019-9950, CVE-2019-9951)</em><sup class=footnote-ref id=fnref:3><a href=#fn:3>3</a></sup></li><li><strong>2019-05-20</strong> <code>ᴡᴅ</code> <em>release of second patch (CVE-2019-9949)</em><sup class=footnote-ref id=fnref:4><a href=#fn:4>4</a></sup></li><li><strong>2019-05-22</strong> 🍄 public disclosure</li></ul><div class=footnotes><hr><ol><li id=fn:1>Tested on <code>My Cloud EX2 Ultra</code> version <code>2.31.149_20181015</code>
<a class=footnote-return href=#fnref:1>↑</a></li><li id=fn:2>and unbeknownst to me at the time, already discovered by <a href=https://blog.exploitee.rs/2017/hacking_wd_mycloud/>the exploiteers</a>
<a class=footnote-return href=#fnref:2>↑</a></li><li id=fn:3><a href=https://community.wd.com/t/new-release-my-cloud-firmware-versions-2-31-174-3-26-19/235932>https://community.wd.com/t/new-release-my-cloud-firmware-versions-2-31-174-3-26-19/235932</a>
<a class=footnote-return href=#fnref:3>↑</a></li><li id=fn:4><a href=https://community.wd.com/t/new-release-my-cloud-firmware-versions-2-31-183-05-20-2019/237717>https://community.wd.com/t/new-release-my-cloud-firmware-versions-2-31-183-05-20-2019/237717</a>
<a class=footnote-return href=#fnref:4>↑</a></li></ol></div></div></div></div></section></body></html>