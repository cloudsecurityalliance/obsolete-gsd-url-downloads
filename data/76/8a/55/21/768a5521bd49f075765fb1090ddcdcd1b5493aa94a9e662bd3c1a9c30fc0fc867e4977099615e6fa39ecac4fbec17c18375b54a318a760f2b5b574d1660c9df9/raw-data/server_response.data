<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>[Tech Story] Apache Kylin 3.0.1 Command Injection Vulnerability - Announcements - SonarSource Community</title>
    <meta name="description" content="Apache Kylin is an open source, distributed Analytical Data Warehouse for Big Data written in Java. It was originally developed by eBay and is used by global enterprises such as Cisco, Baidu and Xiaomi to analyze extreme&amp;hellip;">
    <meta name="generator" content="Discourse 2.8.0.beta7 - https://github.com/discourse/discourse version 436edbb51a15c634e65c0d7cdccdb4ce9aecd8f1">
<link rel="icon" type="image/png" href="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/1X/ff44d3420ff75b165450e91f11d2166da2c43528_2_32x32.png">
<link rel="apple-touch-icon" type="image/png" href="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/1X/ff44d3420ff75b165450e91f11d2166da2c43528_2_180x180.png">
<meta name="theme-color" content="#ffffff">
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, user-scalable=yes, viewport-fit=cover">
<link rel="canonical" href="https://community.sonarsource.com/t/tech-story-apache-kylin-3-0-1-command-injection-vulnerability/25706" />
<script type="application/ld+json">{"@context":"http://schema.org","@type":"WebSite","url":"https://community.sonarsource.com","potentialAction":{"@type":"SearchAction","target":"https://community.sonarsource.com/search?q={search_term_string}","query-input":"required name=search_term_string"}}</script>
<link rel="search" type="application/opensearchdescription+xml" href="https://community.sonarsource.com/opensearch.xml" title="SonarSource Community Search">

      <link href="https://sea1.discourse-cdn.com/sonarsource/stylesheets/desktop_ae8ba362a1a3544030f0a1a8b1d8003cb7b4e6f5.css?__ws=community.sonarsource.com" media="all" rel="stylesheet" data-target="desktop"  />
      <link href="https://sea1.discourse-cdn.com/sonarsource/stylesheets/desktop_theme_4_5b39782676586f5e07dfb6a4e91c89dcea989e12.css?__ws=community.sonarsource.com" media="all" rel="stylesheet" data-target="desktop_theme" data-theme-id="4" data-theme-name="discourse-tag-sidebars"/>
<link href="https://sea1.discourse-cdn.com/sonarsource/stylesheets/desktop_theme_2_d53ffb271c7fe0f5c1bc6f2bce4d958671b321a3.css?__ws=community.sonarsource.com" media="all" rel="stylesheet" data-target="desktop_theme" data-theme-id="2" data-theme-name="default"/>
    
    <meta id="data-ga-universal-analytics" data-tracking-code="UA-1880045-17" data-json="{&quot;cookieDomain&quot;:&quot;auto&quot;}" data-auto-link-domains="">

  <link rel="preload" href="https://aws1.discourse-cdn.com/sonarsource/assets/google-universal-analytics-v3-706f1d28f0a97f67a47515c96189277240ec4940d968955042066d7873fd1fe8.gz.js" as="script">
<script src="https://aws1.discourse-cdn.com/sonarsource/assets/google-universal-analytics-v3-706f1d28f0a97f67a47515c96189277240ec4940d968955042066d7873fd1fe8.gz.js"></script>


        <link rel="alternate" type="application/rss+xml" title="RSS feed of &#39;[Tech Story] Apache Kylin 3.0.1 Command Injection Vulnerability&#39;" href="https://community.sonarsource.com/t/tech-story-apache-kylin-3-0-1-command-injection-vulnerability/25706.rss" />
    <meta property="og:site_name" content="SonarSource Community" />
<meta property="og:type" content="website" />
<meta name="twitter:card" content="summary" />
<meta name="twitter:image" content="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/5/5420987d2afe84642b3c4a47ca77d97836878ab0.png" />
<meta property="og:image" content="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/5/5420987d2afe84642b3c4a47ca77d97836878ab0.png" />
<meta property="og:url" content="https://community.sonarsource.com/t/tech-story-apache-kylin-3-0-1-command-injection-vulnerability/25706" />
<meta name="twitter:url" content="https://community.sonarsource.com/t/tech-story-apache-kylin-3-0-1-command-injection-vulnerability/25706" />
<meta property="og:title" content="[Tech Story] Apache Kylin 3.0.1 Command Injection Vulnerability" />
<meta name="twitter:title" content="[Tech Story] Apache Kylin 3.0.1 Command Injection Vulnerability" />
<meta property="og:description" content="Apache Kylin is an open source, distributed Analytical Data Warehouse for Big Data written in Java. It was originally developed by eBay and is used by global enterprises such as Cisco, Baidu and Xiaomi to analyze extremely large datasets. After a SQL injection (CVE-2020-1937) was announced in Apache Kylin on 23 Feb 2020, our team @ RIPS Technologies (who is now joining forces with SonarSource) decided to evaluate what our static analysis engine could find in this project. This is how we discover..." />
<meta name="twitter:description" content="Apache Kylin is an open source, distributed Analytical Data Warehouse for Big Data written in Java. It was originally developed by eBay and is used by global enterprises such as Cisco, Baidu and Xiaomi to analyze extremely large datasets. After a SQL injection (CVE-2020-1937) was announced in Apache Kylin on 23 Feb 2020, our team @ RIPS Technologies (who is now joining forces with SonarSource) decided to evaluate what our static analysis engine could find in this project. This is how we discover..." />
<meta name="twitter:label1" value="Reading time" />
<meta name="twitter:data1" value="2 mins 🕑" />
<meta name="twitter:label2" value="Likes" />
<meta name="twitter:data2" value="10 ❤" />
<meta property="article:published_time" content="2020-06-02T18:42:22+00:00" />
<meta property="og:ignore_canonical" content="true" />


    <script type="application/ld+json">{"@context":"http://schema.org","@type":"QAPage","name":"[Tech Story] Apache Kylin 3.0.1 Command Injection Vulnerability","mainEntity":{"@type":"Question","name":"[Tech Story] Apache Kylin 3.0.1 Command Injection Vulnerability","text":"Apache Kylin is an open source, distributed Analytical Data Warehouse for Big Data written in Java. It was originally developed by eBay and is used by global enterprises such as Cisco, Baidu and Xiaomi to analyze extremely large datasets. After a SQL injection (<a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1937\">CVE-2020-1937<\/a>) was announced in Apache&hellip;","upvoteCount":10,"answerCount":0,"dateCreated":"2020-06-02T18:42:22.216Z","author":{"@type":"Person","name":"Johannes Dahse"}}}</script>
  </head>
  <body class="crawler">
    


<script src="https://sea1.discourse-cdn.com/sonarsource/theme-javascripts/bc007180b95ee0e1fec54c128e39f8d823c609bb.js?__ws=community.sonarsource.com"></script>
    <header>
      <a href="/">
          <img src="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/1X/a8aed7efb19660a9f1689591fae48cdc563dc195.png" alt="SonarSource Community" id="site-logo" style="max-width: 150px;">
      </a>
    </header>
    <div id="main-outlet" class="wrap">
        <div id="topic-title">
    <h1>
      <a href="/t/tech-story-apache-kylin-3-0-1-command-injection-vulnerability/25706">[Tech Story] Apache Kylin 3.0.1 Command Injection Vulnerability</a>
    </h1>

      <div class="topic-category" itemscope itemtype="http://schema.org/BreadcrumbList">
          <span itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
            <a href="https://community.sonarsource.com/c/announce/20" class="badge-wrapper bullet" itemprop="item">
              <span class='badge-category-bg' style='background-color: #808281'></span>
              <span class='badge-category clear-badge'>
                <span class='category-name' itemprop='name'>SonarSource Updates</span>
              </span>
            </a>
            <meta itemprop="position" content="1" />
          </span>
          <span itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
            <a href="https://community.sonarsource.com/c/announce/announcements/21" class="badge-wrapper bullet" itemprop="item">
              <span class='badge-category-bg' style='background-color: #DF323A'></span>
              <span class='badge-category clear-badge'>
                <span class='category-name' itemprop='name'>Announcements</span>
              </span>
            </a>
            <meta itemprop="position" content="2" />
          </span>
      </div>

      <div class="topic-category">
        <div class='discourse-tags list-tags'>
            <a href='https://community.sonarsource.com/tag/java' class='discourse-tag' rel="tag">java</a>, 
            <a href='https://community.sonarsource.com/tag/security' class='discourse-tag' rel="tag">security</a>
        </div>
      </div>
  </div>

  


      <div itemscope itemtype='http://schema.org/DiscussionForumPosting' class='topic-body crawler-post'>
        <div class='crawler-post-meta'>
          <div itemprop='publisher' itemscope itemtype="http://schema.org/Organization">
            <meta itemprop='name' content='SonarSource SA'>
              <div itemprop='logo' itemscope itemtype="http://schema.org/ImageObject">
                <meta itemprop='url' content='https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/1X/a8aed7efb19660a9f1689591fae48cdc563dc195.png'>
              </div>
          </div>
          <span class="creator" itemprop="author" itemscope itemtype="http://schema.org/Person">
            <a itemprop="url" href='https://community.sonarsource.com/u/Johannes.Dahse'><span itemprop='name'>Johannes.Dahse</span></a>
            (Johannes Dahse)
          </span>

          <link itemprop="mainEntityOfPage" href="https://community.sonarsource.com/t/tech-story-apache-kylin-3-0-1-command-injection-vulnerability/25706">

            <link itemprop="image" href="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/5/5420987d2afe84642b3c4a47ca77d97836878ab0.png">

          <span class="crawler-post-infos">
              <time itemprop='datePublished' datetime='2020-06-02T18:42:22Z' class='post-time'>
                June 2, 2020,  6:42pm
              </time>
              <meta itemprop='dateModified' content='2021-08-12T18:15:29Z'>
          <span itemprop='position'>#1</span>
          </span>
        </div>
        <div class='post' itemprop='articleBody'>
          <p>Apache Kylin is an open source, distributed Analytical Data Warehouse for Big Data written in Java. It was originally developed by eBay and is used by global enterprises such as Cisco, Baidu and Xiaomi to analyze extremely large datasets. After a SQL injection (<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1937">CVE-2020-1937</a>) was announced in Apache Kylin on 23 Feb 2020, our team @ RIPS Technologies (who is now <a href="https://blog.sonarsource.com/sonarsource-acquires-rips-technologies">joining forces with SonarSource</a>) decided to evaluate what our static analysis engine could find in this project. This is how we discovered another, even more severe vulnerability (<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1956">CVE-2020-1956</a>) in the Kylin code base that allows malicious users to execute arbitrary OS commands and to take over the host system. In this tech story we will analyze the root cause of such vulnerabilities and how to prevent these in your Java applications.</p>
<h1>
<a name="impact-1" class="anchor" href="#impact-1"></a>Impact</h1>
<p>The vulnerability was introduced in March 2018 with Apache Kylin version 2.3.0. It affects all releases up to version 2.6.5 and 3.0.1. An authenticated user with MANAGEMENT or ADMIN permissions on any project can inject arbitrary system commands during Cube migration via the Kylin web interface. The attacker’s system commands are then executed on the targeted web server and allow to fully compromise the system and its data. Apache rates the severity of this vulnerability as <a href="https://kylin.apache.org/docs/security.html">important</a>.</p>
<h1>
<a name="technical-analysis-2" class="anchor" href="#technical-analysis-2"></a>Technical Analysis</h1>
<p>Apache Kylin handles large data sets in Cubes. The vulnerability hides in the Cube migration feature which is located in the <code>migrateCube()</code> method of the <code>CubeService</code> class code. A Cube migration is initiated via REST API endpoint in the <code>CubeController</code> (<em>/kylin/api/cubes/{cube}/<strong>{project}</strong>/migrate</em>). The CubeController handles the migrate POST request and passes a project name from the URL to the <code>CubeService</code>.</p>
<p><strong>/server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java</strong></p>
<pre><code class="lang-auto">@RequestMapping(value="/{cube}/{project}/migrate", method={ RequestMethod.POST })
…
public void migrateCube(@PathVariable String cube, @PathVariable String project) {
         …
         cubeService.migrateCube(cubeInstance, project);
</code></pre>
<p>In the CubeService, the project name from the URL is concatenated unsanitized into a system command string. This allows authenticated attackers to malform the API request and to inject malicious commands into the project name which are then executed on the system.</p>
<p><strong>/server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java</strong></p>
<pre><code class="lang-auto">public void migrateCube(CubeInstance cube, String projectName) {
…
       String srcCfgUri = config.getAutoMigrateCubeSrcConfig();
       String dstCfgUri = config.getAutoMigrateCubeDestConfig();
       …
       String stringBuilder = ("%s/bin/kylin.sh org.apache.kylin.tool.CubeMigrationCLI %s %s %s %s %s %s true true");
       String cmd = String.format(Locale.ROOT, stringBuilder,  
               KylinConfig.getKylinHome(),
               srcCfgUri, 
               dstCfgUri, 
               cube.getName(), 
               projectName,
               config.isAutoMigrateCubeCopyAcl(),
               config.isAutoMigrateCubePurge());
       …
       exec.execute(cmd, patternedLogger);
</code></pre>
<p>For example, the attacker can invoke a separate system command by injecting backtick characters into the project name:</p>
<p><em><a href="http://target/kylin/api/cubes/kylin_streaming_cube/">http://target/kylin/api/cubes/kylin_streaming_cube/</a><strong>`sleep+10`</strong>/migrate</em></p>
<p>When looking at the <code>stringBuilder</code> above we can see that additional data is concatenated into the system command. In the first lines, a source and destination URI for a config file (<code>srcCfgUri</code> and <code>dstCfgUri</code>) is retrieved and then appended to the <em>kylin.sh</em> command. These configuration settings can be permanently modified by using the Cube Designer as shown in the Figure below. When system commands are injected into the configuration settings by a malicious user, these are executed during Cube migration as well.</p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/5/5420987d2afe84642b3c4a47ca77d97836878ab0.png" data-download-href="/uploads/short-url/c0dWupV405RUnzsxysC3WXbeere.png?dl=1" title="kylin_set_config"><img src="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/2X/5/5420987d2afe84642b3c4a47ca77d97836878ab0_2_690x478.png" alt="kylin_set_config" data-base62-sha1="c0dWupV405RUnzsxysC3WXbeere" width="690" height="478" srcset="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/2X/5/5420987d2afe84642b3c4a47ca77d97836878ab0_2_690x478.png, https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/5/5420987d2afe84642b3c4a47ca77d97836878ab0.png 1.5x, https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/original/2X/5/5420987d2afe84642b3c4a47ca77d97836878ab0.png 2x" data-small-upload="https://aws1.discourse-cdn.com/sonarsource/uploads/sscommunity/optimized/2X/5/5420987d2afe84642b3c4a47ca77d97836878ab0_2_10x10.png"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">kylin_set_config</span><span class="informations">949×658 52.1 KB</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<h1>
<a name="patch-3" class="anchor" href="#patch-3"></a>Patch</h1>
<p>In order to mitigate this vulnerability, all inputs have to be validated which can be modified by a malicious user and are used in a security-sensitive operation, such as a system command.</p>
<p>The <a href="https://github.com/apache/kylin/commit/9cc3793ab2f2f0053c467a9b3f38cb7791cd436a">initial patch</a> of the Apache Kylin team based on a <em>denylist</em> approach. It removes malicious characters that could be used for exploitation in input parameters. However, it is difficult to define all malicious characters for all different kinds of OS environments. A special character is easily missed and hence this approach is error prone and should be avoided whenever possible. For example, the Windows operating system allows a newline character <code>\n</code> to separate two system commands which would bypass this denylist.</p>
<p><strong>Error-prone patch - denylist</strong></p>
<pre><code class="lang-auto">public static final String COMMAND_DENY_LIST = "[ &amp;`&gt;|{}()$;\\-#~!+*”\\\\]+";

public static String checkParameter(String commandParameter) {
        String repaired = commandParameter.replaceAll(COMMAND_DENY_LIST, "");
        if (repaired.length() != commandParameter.length()) {
            logger.info("Detected illegal character in command.");
        }
        return repaired;
}
</code></pre>
<p>An <a href="https://github.com/apache/kylin/commit/335d61b62517006d7e7b55638bb6fd305dffbea1">alternative patch</a> has been implemented which uses an <em>allowlist</em> approach. Here, a fixed set of allowed characters is defined. Ideally, this list should contain only alpha-numerical characters but in the case of Kylin project names additional characters are required.</p>
<p><strong>Corrected patch - allowlist</strong></p>
<pre><code class="lang-auto">public static final String COMMAND_ALLOW_LIST = "[^\\w%,@/:=?.\"\\[\\]]";

public static String checkParameter(String commandParameter) {
        String repaired = commandParameter.replaceAll(COMMAND_ALLOW_LIST, "");
        if (repaired.length() != commandParameter.length()) {
            logger.info("Detected illegal character in command.");
        }
        return repaired;
}
</code></pre>
<p>One important thing to keep in mind is that the parameters are now sanitized against breaking out of the current command and invoking new commands. But the original command <em>kylin.sh</em> is still executed with these user-controlled parameters. Thus the developer needs to ensure that the shell script <em>kylin.sh</em> itself does not perform security-sensitive operations with these parameters. For example, the allowlist allows the character sequence <code>../</code> which could be used for a path traversal attack when the project name is used in a file path.</p>
<p>The patch was implemented in Apache Kylin 3.0.2 and 2.6.6 and all users are encouraged to upgrade. Alternatively, Kylin administrators can set the configuration <em>kylin.tool.auto-migrate-cube.enabled</em> to <em>false</em> in order to disable Cube migrations and to prevent exploitation.</p>
<h1>
<a name="timeline-4" class="anchor" href="#timeline-4"></a>Timeline</h1>
<div class="md-table">
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Date</td>
<td>What</td>
</tr>
<tr>
<td>08.03.2020</td>
<td>Reported vulnerability to Apache Security Team</td>
</tr>
<tr>
<td>09.03.2020</td>
<td>Apache Security Team passed report on to Kylin Team</td>
</tr>
<tr>
<td>29.03.2020</td>
<td>Asked for status update</td>
</tr>
<tr>
<td>01.04.2020</td>
<td>Apache Kylin Team drafts initial patch</td>
</tr>
<tr>
<td>16.04.2020</td>
<td>Apache Kylin Team improves patch</td>
</tr>
<tr>
<td>22.04.2020</td>
<td>Apache Kylin Team starts release process</td>
</tr>
<tr>
<td>20.05.2020</td>
<td>Apache Kylin Team releases patch version</td>
</tr>
</tbody>
</table>
</div><h1>
<a name="summary-5" class="anchor" href="#summary-5"></a>Summary</h1>
<p>In this tech story we analyzed a security vulnerability in Apache Kylin that allows malicious, authenticated users to compromise the underlying system by abusing features of the Kylin web application. We looked at the root cause of this code vulnerability which can be easily introduced in any code base and evaluated different ways how to patch such an issue. With the help of static code analysis, these types of injection flaws can be automatically found early in the development lifecycle. The security vulnerability was reported to the vendor who quickly released a <a href="http://kylin.apache.org/download/">fixed version</a> to protect its users. We would like to thank the Apache Security and Apache Kylin Team for the professional collaboration on fixing this issue in a timely manner.</p>
        </div>

        <meta itemprop='headline' content='[Tech Story] Apache Kylin 3.0.1 Command Injection Vulnerability'>
          <meta itemprop='keywords' content='java, security'>

        <div itemprop="interactionStatistic" itemscope itemtype="http://schema.org/InteractionCounter">
           <meta itemprop="interactionType" content="http://schema.org/LikeAction"/>
           <meta itemprop="userInteractionCount" content="10" />
           <span class='post-likes'>10 Likes</span>
         </div>

         <div itemprop="interactionStatistic" itemscope itemtype="http://schema.org/InteractionCounter">
            <meta itemprop="interactionType" content="http://schema.org/CommentAction"/>
            <meta itemprop="userInteractionCount" content="0" />
          </div>

      </div>






    </div>
    <footer class="container wrap">
      <nav class='crawler-nav'>
        <ul>
        <li itemscope itemtype='http://schema.org/SiteNavigationElement'>
          <span itemprop='name'>
            <a href='/' itemprop="url">Home </a>
          </span>
        </li>
        <li itemscope itemtype='http://schema.org/SiteNavigationElement'>
          <span itemprop='name'>
            <a href='/categories' itemprop="url">Categories </a>
          </span>
        </li>
        <li itemscope itemtype='http://schema.org/SiteNavigationElement'>
          <span itemprop='name'>
            <a href='/guidelines' itemprop="url">FAQ/Guidelines </a>
          </span>
        </li>
        <li itemscope itemtype='http://schema.org/SiteNavigationElement'>
          <span itemprop='name'>
            <a href='/tos' itemprop="url">Terms of Service </a>
          </span>
        </li>
        <li itemscope itemtype='http://schema.org/SiteNavigationElement'>
          <span itemprop='name'>
            <a href='/privacy' itemprop="url">Privacy Policy </a>
          </span>
        </li>
        </ul>
      </nav>
      <p class='powered-by-link'>Powered by <a href="https://www.discourse.org">Discourse</a>, best viewed with JavaScript enabled</p>
    </footer>
    
    
  </body>
  
</html>
