<!doctype html><html lang=en-us><head><title>PL/SQL Developer: Nonexistent Encryption - Adam Caudill</title><meta charset=utf-8><meta name=viewport content="width=device-width,initial-scale=1"><meta name=description content="Adam Caudill: Security Engineer, Researcher, & Developer"><meta name=author content="Adam Caudill"><meta property="og:title" content="PL/SQL Developer: Nonexistent Encryption"><meta property="og:description" content="(See here for another issue discovered during this research; Updates over HTTP & Command Execution.)
PL/SQL Developer by Allround Automations has an option to store the user&rsquo;s logon history with passwords – the passwords are encrypted with a proprietary algorithm. At this point, you should know how this is going to go.
For those that don&rsquo;t know, PL/SQL Developer is a tool for developers and database administrators to access Oracle – an essential tool in many enterprise environments."><meta property="og:type" content="article"><meta property="og:url" content="https://adamcaudill.com/2016/02/02/plsql-developer-nonexistent-encryption/"><meta property="og:image" content="https://adamcaudill.com/header_images/broken-2.jpg"><meta property="article:section" content="posts"><meta property="article:published_time" content="2016-02-02T23:45:01+00:00"><meta property="article:modified_time" content="2021-10-22T23:31:04-04:00"><meta name=twitter:card content="summary_large_image"><meta name=twitter:image content="https://adamcaudill.com/header_images/broken-2.jpg"><meta name=twitter:title content="PL/SQL Developer: Nonexistent Encryption"><meta name=twitter:description content="(See here for another issue discovered during this research; Updates over HTTP & Command Execution.)
PL/SQL Developer by Allround Automations has an option to store the user&rsquo;s logon history with passwords – the passwords are encrypted with a proprietary algorithm. At this point, you should know how this is going to go.
For those that don&rsquo;t know, PL/SQL Developer is a tool for developers and database administrators to access Oracle – an essential tool in many enterprise environments."><meta name=twitter:site content="@adamcaudill"><meta name=twitter:creator content="@adamcaudill"><meta name=gitLastUpdated content="2021-10-22 23:31:04 -0400 -0400"><meta name=gitRevision content="5af35878cf0769a3377e309d3bcda097720af7eb"><link rel=preconnect href=https://fonts.gstatic.com/><link rel=stylesheet type=text/css href=https://adamcaudill.com/css/bundle.min.fe6d11c0d67a12f344f8e52d0f810cfcd29d51f5f0ce78618772e5c5238f1540.css><link rel=apple-touch-icon sizes=180x180 href=https://adamcaudill.com/apple-touch-icon.png><link rel=icon type=image/png sizes=32x32 href=https://adamcaudill.com/favicon-32x32.png><link rel=icon type=image/png sizes=16x16 href=https://adamcaudill.com/favicon-16x16.png></head><body><div id=container><header><h1><a href=https://adamcaudill.com/>Adam Caudill</a></h1><ul id=social-media><li><a href=https://adamcaudill.com/rss/ title="RSS Feed"><i class="fas fa-rss-square fa-lg"></i></a></li><li><a href=https://github.com/adamcaudill title=GitHub><i class="fab fa-github fa-lg"></i></a></li><li><a href=https://twitter.com/adamcaudill title=Twitter><i class="fab fa-twitter fa-lg"></i></a></li><li><a href=https://linkedin.com/in/adamcaudill title=LinkedIn><i class="fab fa-linkedin fa-lg"></i></a></li><li><a href=https://500px.com/adamcaudill title=500px><i class="fab fa-500px fa-lg"></i></a></li></ul><p><em>Security Engineer, Researcher, & Developer</em></p></header><nav><ul><li><a href=https://adamcaudill.com/><i class="fa-li fa fa-lg"></i><span>Home</span></a></li><li><a href=https://adamcaudill.com/blog/><i class="fa-li fa fa-lg"></i><span>Blog</span></a></li><li><a href=https://adamcaudill.com/research/><i class="fa-li fa fa-lg"></i><span>Research</span></a></li><li><a href=https://adamcaudill.com/speaking/><i class="fa-li fa fa-lg"></i><span>Speaking</span></a></li><li><a href=https://adamcaudill.com/photo/><i class="fa-li fa fa-lg"></i><span>Photography</span></a></li><li><a href=https://adamcaudill.com/writing/><i class="fa-li fa fa-lg"></i><span>Writing</span></a></li><li><a href=https://adamcaudill.com/about/><i class="fa-li fa fa-lg"></i><span>About</span></a></li></ul></nav><div class=main-row><div id=main class=main-column><main><article><h1>PL/SQL Developer: Nonexistent Encryption</h1><aside><ul><p><time class=post-date datetime=2016-02-02T23:45:01Z>February 2, 2016</time>
|
4 minute read
|
<a href=https://adamcaudill.com/categories/security-research>Security Research</a></p></ul></aside><div class=featured_image><img src=https://adamcaudill.com/header_images/broken-2.jpg></div><aside><details><summary>Table of Contents</summary><nav id=TableOfContents><ol><li><a href=#the-algorithm>The Algorithm</a></li><li><a href=#the-data>The Data</a></li><li><a href=#the-proof-of-concept>The Proof of Concept</a></li><li><a href=#credit>Credit</a></li></ol></nav></details></aside><div class=article-content><p><em>(See <a href=https://adamcaudill.com/2016/05/01/plsql-developer-http-to-command-execution/>here</a> for another issue discovered during this research; Updates over HTTP & Command Execution.)</em></p><p>PL/SQL Developer by <a href=https://www.allroundautomations.com/plsqldev.html>Allround Automations</a> has an option to store the user&rsquo;s logon history with passwords – the passwords are encrypted with a proprietary algorithm. At this point, you should know how this is going to go.</p><p>For those that don&rsquo;t know, PL/SQL Developer is a tool for developers and database administrators to access Oracle – an essential tool in many enterprise environments. Instead of using something that provides some actual security like <a href=https://en.wikipedia.org/wiki/Data_Protection_API>DPAPI</a> (which itself is far from perfect, as we saw with the <a href=https://adamcaudill.com/2012/10/07/upek-windows-password-decryption/>UPEK fiasco</a>), they opted to use a proprietary &ldquo;encryption&rdquo; algorithm to protect these passwords – making it trivial to recover the passwords for any attacker that can access the preferences file(s).</p><p>Some time ago I asked the vendor about the security of the password storage – they are aware of the lack of security, but don&rsquo;t make it clear to their customers.</p><pre class="lang:default highlight:0 decode:true">From: Allround Automations Support [support@allroundautomations.com]
Sent: Monday, February 09, 2015 12:37 PM
To: Adam Caudill
Subject: RE: PL/SQL Developer - Password Storage

Hello Adam,

The encryption is proprietary. If a user copies the config file,
the passwords are also copied, so it's not secure.

Greetings,
Marco Kalter
Allround Automations (https://www.allroundautomations.com)</pre><p>The fact that they are aware that it isn&rsquo;t secure, yet this issue has existed for years – nor made it clear to users what they are risking by activating the option is extremely disappointing. Vendors have a responsibility to protect customer information, and broken features like this completely ignore that.</p><div class=hide-anchor><h2 id=the-algorithm>The Algorithm <a href=#the-algorithm class=h-anchor>#</a></h2></div><p>The encryption algorithm is quite simple, primarily consisting of a bit shift and xor – let&rsquo;s take a closer look at how it works. The ciphertext produced looks like this:</p><p><code>273645624572423045763066456443024120413041724566408044424900...</code></p><p>The first group of four digits (<code>2736</code>) is the key – it&rsquo;s generated based on the system uptime, producing an integer between 0 and 999, then 2,000 is added. This means that the key is has 1,000 possible values, or just under 10 bits. Of course, when you store the key with the encrypted data – key size really doesn&rsquo;t matter.</p><p>After the key at the beginning, each group of four digits represents one byte – this simple code is all that&rsquo;s needed to encrypt:</p><pre class="lang:c# decode:true">for (int i = 0; i &lt; plaintext.Length; i++)
{
  var mask = plaintext[i] &lt;&lt; 4;
  var n = (mask ^ (key + (i + 1)*10)) + 1000;

  ret += Convert.ToString(n).PadLeft(4, '0');
}</pre><p>When you encrypt the string <code>user/password@server</code>, here&rsquo;s what the encrypted data breaks down to:</p><ul><li><code>2736</code> = Key</li><li><code>4562</code> = <code>u</code></li><li><code>4572</code> = <code>s</code></li><li><code>4230</code> = <code>e</code></li><li><code>4576</code> = <code>r</code></li><li><code>3066</code> = <code>/</code></li><li><code>4564</code> = <code>p</code></li><li><code>4302</code> = <code>a</code></li><li><code>4120</code> = <code>s</code></li><li><code>4130</code> = <code>s</code></li><li><code>4172</code> = <code>w</code></li><li><code>4566</code> = <code>o</code></li><li><code>4080</code> = <code>r</code></li><li><code>4442</code> = <code>d</code></li><li><code>4900</code> = <code>@</code></li><li><code>4190</code> = <code>s</code></li><li><code>4328</code> = <code>e</code></li><li><code>4194</code> = <code>r</code></li><li><code>4076</code> = <code>v</code></li><li><code>4390</code> = <code>e</code></li><li><code>4160</code> = <code>r</code></li></ul><div class=hide-anchor><h2 id=the-data>The Data <a href=#the-data class=h-anchor>#</a></h2></div><p>The login information is stored in an INI-like file called <code>user.prefs</code> – under the headings of <code>[LogonHistory]</code> and <code>[CurrentConnections]</code>; storage of passwords is an option that is turned off by default, though storage of history is turned on by default. All data stored in these sections is encrypted using this method, so the presence of data in these sections does not necessarily mean that passwords are present.</p><p>These files can be stored in a number of locations (the latter are more common with older versions of the application):</p><ul><li><code>C:\Users\&lt;username>\AppData\Roaming\PLSQL Developer\Preferences\&lt;username>\</code></li><li><code>C:\Program Files\PLSQL Developer\Preferences\&lt;username>\</code></li><li><code>C:\Program Files (x86)\PLSQL Developer\Preferences\&lt;username>\</code></li></ul><p>The data format for the two sections is somewhat different, in <code>[LogonHistory]</code>, the data is in the following format:</p><p><code>&lt;username>/&lt;password>@&lt;server></code></p><p>In <code>[CurrentConnections]</code>, the format is <code>&lt;username>,&lt;password>,&lt;server>,,,</code>; the login can also be stored in <code>C:\Users\&lt;username>\AppData\Roaming\PLSQL Developer\PLS-Recovery\*.cfg</code>, in this same format.</p><p>This encryption method is also used in other files, though in less predictable locations.</p><div class=hide-anchor><h2 id=the-proof-of-concept>The Proof of Concept <a href=#the-proof-of-concept class=h-anchor>#</a></h2></div><p>We have <a href=https://github.com/adamcaudill/PLSQLDevPass/releases>released</a> a proof of concept tool to decrypt these logins, and as is typical, it&rsquo;s <a href=https://github.com/adamcaudill/PLSQLDevPass>open source</a>. Simply run the executable from the command line, and it will search for the preference files and print any information it&rsquo;s able to retrieve.</p><pre class="lang:default highlight:0 decode:true">PL/SQL Developer: Password 'Decrypter'
  Copyright 2016 Adam Caudill & Brandon Wilson
  v1.0.0.0 - https://github.com/adamcaudill/PLSQLDevPass

Found 1 config files...
Result! 'user/password@server'
Done.</pre><p>You can also pass in the name of a remote machine, and it will attempt to use the administrative (<code>c$</code>) share.</p><div class=hide-anchor><h2 id=credit>Credit <a href=#credit class=h-anchor>#</a></h2></div><p>Special thanks to my frequent research partner, <a href=https://brandonw.net/>Brandon Wilson</a>, for his help with this project.</p></div><div class=signature><p>Adam Caudill</p></div><hr><h2>Related Posts</h2><small><ul><li><h3><a href=https://adamcaudill.com/2017/07/12/breaking-nemucodaes-ransomware/ title="Breaking the NemucodAES Ransomware">Breaking the NemucodAES Ransomware</a></h3><p>The Nemucod ransomware has been around, in various incarnations, for some time. Recently a new variant started spreading via email claiming to be from UPS. This new version changed how files are encrypted, clearly in an attempt to fix its prior issue of being able to decrypt files without paying the ransom, and as this is a new version, no decryptor was available1. My friends at Savage Security contacted me to help save the data of one of their clients; I immediately began studying the cryptography related portions of the software, while the Savage Security team was busy looking at other portions.</p></li><li><h3><a href=https://adamcaudill.com/2016/05/23/when-hashing-isnt-hashing/ title="When Hashing isn’t Hashing">When Hashing isn’t Hashing</a></h3><p>Anyone working in application security has found themselves saying something like this a thousand times: &ldquo;always hash passwords with a secure password hashing function.&rdquo; I&rsquo;ve said this phrase at nearly all of the developer events I&rsquo;ve spoken at, it&rsquo;s become a mantra of sorts for many of us that try to improve the security of applications. We tell developers to hash passwords, then we have to qualify it to explain that it isn&rsquo;t normal hashing.</p></li><li><h3><a href=https://adamcaudill.com/2016/05/01/plsql-developer-http-to-command-execution/ title="PL/SQL Developer: HTTP to Command Execution">PL/SQL Developer: HTTP to Command Execution</a></h3><p>While looking into PL/SQL Developer – a very popular tool for working with Oracle databases, to see how it encrypts passwords I noticed something interesting. When testing Windows applications, I make it a habit to have Fiddler running, to see if there is any interesting traffic – and in this case, there certainly was.
PL/SQL Developer has an update mechanism which retrieves a file containing information about available updates to PL/SQL Developer and other components; this file is retrieved via HTTP, meaning that an attacker in a privileged network position could modify this file.</p></li><li><h3><a href=https://adamcaudill.com/2016/03/12/crypto-crisis-fear-over-freedom/ title="Crypto Crisis: Fear over Freedom">Crypto Crisis: Fear over Freedom</a></h3><p>Yesterday, President Obama spoke at SXSW on topics including the oft-discussed fight between Apple and the FBI – what he called for, while more thoughtful than some of the other comments that we have been hearing from Washington, was still tragically misinformed. He repeated the call for a compromise, and by compromise, he meant backdoors.
Here, I feel I must paraphrase one of my favorite authors to properly express the magnitude of what&rsquo;s being discussed here:</p></li><li><h3><a href=https://adamcaudill.com/2021/08/22/win-by-building-for-failure/ title="Win by Building for Failure">Win by Building for Failure</a></h3><p>Systems fail; it doesn&rsquo;t matter what the system is. Something will fail sooner or later. When you design a system, are you focused on the happy path, or are you building with the possibility of failure in mind?
If you suffered a data breach tomorrow, what would the impact be? Does the system prevent loss by design, or does it just fall apart? Can you easily minimize loss and damage, or would an attacker have free rein once they get in?</p></li></ul></small></article><section class=post-nav><ul><li><a href=https://adamcaudill.com/2016/01/08/rance-goodbye-friend/><i class="fa fa-chevron-circle-left"></i> Rance, Goodbye Friend</a></li><li><a href=https://adamcaudill.com/2016/03/12/crypto-crisis-fear-over-freedom/>Crypto Crisis: Fear over Freedom <i class="fa fa-chevron-circle-right"></i></a></li></ul></section></main></div><div id=sidebar class=main-column><h4>About Me</h4><p><img id=portrait src="https://1.gravatar.com/avatar/49e14cf9f67c48aad082dec4f106f19a?size=500" loading=lazy></p><p>Director of Security at <a href=https://1password.com/>1Password</a>, researcher and software developer with more than 20 years of experience.</p><p>I primarily focus on application security, secure communications, and cryptography, though often research new areas if I get too bored. I write about my research and security in general, development and software design, and whatever hobby has my attention at the moment.</p><p><a href=https://adamcaudill.com/pgp/>Contact</a></p></div></div><footer><div class=footer-row><div class=footer-column><h5>Disclaimer</h5><p>Opinions expressed here are solely those of Adam Caudill, and do not represent the views of his employer, or any other person or entity.</p></div><div class=footer-column><h5>Contact & Media</h5><p>If you have any questions, please feel free to <a href=https://adamcaudill.com/pgp/>contact me</a>, I will try to respond as quickly as possible.</p></div><div class=footer-column><h5>Copyright</h5><p>Copyright &copy; 2003 – 2021 Adam Caudill. Fair use is respected; though please provide proper attribution.</p></div></div></footer></div><script src=https://adamcaudill.com/js/scripts.js></script><script type=application/javascript>var doNotTrack=!1;doNotTrack||(window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)},ga.l=+new Date,ga('create','UA-106942-2','auto'),ga('send','pageview'))</script><script async src=https://www.google-analytics.com/analytics.js></script><script defer src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon='{"token": "b7c021ad68ff4c9bba9e8508a4c6017b"}'></script><script defer src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon='{"rayId":"6a62489ff8fef4a6","version":"2021.10.0","r":1,"token":"8567dd3b3f684008b874879a0b6aa1c6","si":100}'></script>
</body></html>