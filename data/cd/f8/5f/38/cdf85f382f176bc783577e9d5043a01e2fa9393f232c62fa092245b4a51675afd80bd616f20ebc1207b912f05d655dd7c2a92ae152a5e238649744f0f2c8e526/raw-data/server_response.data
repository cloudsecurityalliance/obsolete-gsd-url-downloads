<!DOCTYPE html>
<html lang="en">
  <head>
    <title>8382 &ndash; MS-MMS dissector crash</title>

      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">


<link href="data/assets/64b49332a92937374625c24ed9a89c85.css?1635022386" rel="stylesheet" type="text/css">

<link href="data/assets/f6911ed8e5a97f108734d9324cb6bd67.css?1635022386" rel="stylesheet" type="text/css">

    
<script type="text/javascript" src="data/assets/a7c2f3a028f17a9aa60f56dc9d6e732d.js?1635022386"></script>

    <script type="text/javascript">
    <!--
        YAHOO.namespace('bugzilla');
        YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
               if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
               var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
               return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
         };
        if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
            YAHOO.util.Event._simpleRemove(window, "unload", 
                                           YAHOO.util.Event._unload);
        }
        
        function unhide_language_selector() { 
            YAHOO.util.Dom.removeClass(
                'lang_links_container', 'bz_default_hidden'
            ); 
        } 
        YAHOO.util.Event.onDOMReady(unhide_language_selector);

        
        var BUGZILLA = {
            param: {
                cookiepath: '\/',
                maxusermatches: 1000
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    "You must enter a Description for this attachment.",
                component_required:
                    "You must select a Component for this bug.",
                description_required:
                    "You must enter a Description for this bug.",
                short_desc_required:
                    "You must enter a Summary for this bug.",
                version_required:
                    "You must select a Version for this bug."
            }
              , api_token: ''
        };

    if (history && history.replaceState) {
      if(!document.location.href.match(/show_bug\.cgi/)) {
        history.replaceState( null,
                             "8382 – MS-MMS dissector crash",
                             "show_bug.cgi?id=8382" );
        document.title = "8382 – MS-MMS dissector crash";
      }
      if (document.location.href.match(/show_bug\.cgi\?.*list_id=/)) {
        var href = document.location.href;
        href = href.replace(/[\?&]+list_id=(\d+|cookie)/, '');
        history.replaceState(null, "8382 – MS-MMS dissector crash", href);
      }
    }
    YAHOO.util.Event.onDOMReady(function() {
      initDirtyFieldTracking();

    });
    // -->
    </script>
<script type="text/javascript" src="data/assets/daf5e0fb6826e6a35280e622913f0c4a.js?1635022386"></script>

    

    
    <link rel="search" type="application/opensearchdescription+xml"
                       title="Bugzilla" href="./search_plugin.cgi">
    <link rel="shortcut icon" href="images/favicon.ico">
  </head>

  <body 
        class="bugs-wireshark-org-bugzilla
                 bz_bug
                 bz_status_RESOLVED
                 bz_product_Wireshark
                 bz_component_Dissection_engine_&#X28;libwireshark&#X29;
                 bz_bug_8382 yui-skin-sam">

  <div id="header"><div id="banner">
      <a href="/bugzilla/"><img id="badge" src="/image/wsbadge-bug@186x57.png"></a>
      <span id="banner-text">
        Wireshark Bug Database &ndash; Bug&nbsp;8382
      </span>
      <div id="subtitle">
        <p class="subheader">MS-MMS dissector crash</p>
      </div>

       <div id="motd_yellow">

<p>
This Bugzilla instance was migrated to <a href="https://gitlab.com/wireshark/wireshark">GitLab</a> on Sunday, August 23.
</p>


<p>
This bug has been migrated to <a href="https://gitlab.com/wireshark/wireshark/-/issues/8382">issue 8382</a> in the <a href="https://gitlab.com/wireshark/wireshark/-/issues">GitLab issue tracker</a>.
It can be viewed and updated there.
</p>


</p>

<p>
See the <a href="https://gitlab.com/wireshark/gitlab-migration/wikis/home">migration wiki</a> for more details.
</p>

       </div>


    </div>

<!-- WS: Title info is in the banner
    <div id="titles">
      <span id="title">Bugzilla &ndash; Bug&nbsp;8382</span>
  
        <span id="subtitle" class="subheader">MS-MMS dissector crash</span>

        <span id="information" class="header_addl_info">Last modified: 2016-06-21 13:09:09 UTC</span>
    </div>
  -->


    <div id="common_links"><ul class="links">
  <li><a href="https://www.wireshark.org/">Wireshark Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_top" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_top");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_top" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_top"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/5.0/using/understanding.html" target="_blank">Help</a>
      </li>
    

    <li id="mini_login_container_top">
  <span class="separator">| </span>
  <a id="login_link_top" href="show_bug.cgi?id=8382&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_top')">Log In</a>

  <form action="show_bug.cgi?id=8382" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_top">
    <input id="Bugzilla_login_top" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_top" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_top">
    <a href="#" onclick="return hide_mini_login_form('_top')">[x]</a>
  </form>
</li>


  <li id="forgot_container_top">
    <span class="separator">| </span>
    <a id="forgot_link_top" href="show_bug.cgi?id=8382&amp;GoAheadAndLogIn=1#forgot"
       onclick="return show_forgot_form('_top')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_top"
          class="mini_forgot bz_default_hidden">
      <label for="login_top">Login:</label>
      <input name="loginname" size="20" id="login_top" required
          type="email" placeholder="Your Email Address">
      <input id="forgot_button_top" value="Reset Password" type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_top" name="token"
             value="1635621897-9E9cH-5qB0T5FlBKpP4gSSViPuh01DqtjaOT39MnlFU">
      <a href="#" onclick="return hide_forgot_form('_top')">[x]</a>
    </form>
  </li>
</ul>
    </div>
  </div>

  <div id="bugzilla-body">


<script type="text/javascript">
<!--

//-->
</script>

<form name="changeform" id="changeform" method="post" action="process_bug.cgi">

  <input type="hidden" name="delta_ts" value="2016-06-21 13:09:09">
  <input type="hidden" name="id" value="8382">
  <input type="hidden" name="token" value="1635621897-hQ7Z6b8QKjax97KmO1WvXPl_7vCTrZkmbAq2oi75Rj8">
<div class="bz_short_desc_container edit_form">
     <a href="show_bug.cgi?id=8382"><b>Bug&nbsp;8382</b></a> <span id="summary_container" class="bz_default_hidden">
      - <span id="short_desc_nonedit_display">MS-MMS dissector crash</span>
     </span>

    <div id="summary_input"><span class="field_label "
    id="field_label_short_desc">


  <a 
      title="The bug summary is a short sentence which succinctly describes what the bug is about."
      class="field_help_link"
      href="page.cgi?id=fields.html#short_desc"
  >Summary:</a>

</span>MS-MMS dissector crash
    </div>
  </div>
  <script type="text/javascript">
    hideEditableField('summary_container',
                      'summary_input',
                      'summary_edit_action',
                      'short_desc',
                      'MS-MMS dissector crash' );
  </script>
  <table class="edit_form">
    <tr>
      
      <td id="bz_show_bug_column_1" class="bz_show_bug_column">     
        <table>
          <tr>
    <th class="field_label">
      <a href="page.cgi?id=fields.html#bug_status">Status</a>:
    </th>
    <td id="bz_field_status">
      <span id="static_bug_status">RESOLVED
          FIXED
      </span>
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_alias">


  <a 
      title="A short, unique name assigned to a bug in order to assist with looking it up and referring to it in other places in Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#alias"
  >Alias:</a>

</th>
    <td>
        None
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_product">


  <a 
      title="Bugs are categorised into Products and Components."
      class="field_help_link"
      href="describecomponents.cgi"
  >Product:</a>

</th>
  <td class="field_value "
      id="field_container_product" >Wireshark

</td>
    </tr>

    
    <tr class="bz_default_hidden"><th class="field_label "
    id="field_label_classification">


  <a 
      title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation."
      class="field_help_link"
      href="page.cgi?id=fields.html#classification"
  >Classification:</a>

</th>
  <td class="field_value "
      id="field_container_classification" >Unclassified

</td>
    </tr>
        
    
    
    <tr><th class="field_label "
    id="field_label_component">


  <a 
      title="Components are second-level categories; each belongs to a particular Product. Select a Product to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi?product=Wireshark"
  >Component:</a>

</th>
  <td class="field_value "
      id="field_container_component" >Dissection engine (libwireshark)

  (<a href="buglist.cgi?component=Dissection%20engine%20(libwireshark)&amp;product=Wireshark&amp;bug_status=__open__"
      target="_blank">show other bugs</a>)
</td>
    </tr>
    <tr><th class="field_label "
    id="field_label_version">


  <a 
      title="The version field defines the version of the software the bug was found in."
      class="field_help_link"
      href="page.cgi?id=fields.html#version"
  >Version:</a>

</th>
<td>Git
  </td>
    </tr>
        
    
        
    <tr><th class="field_label "
    id="field_label_rep_platform">


  <a 
      title="The hardware platform the bug was observed on. Note: When searching, selecting the option &quot;All&quot; only finds bugs whose value for this field is literally the word &quot;All&quot;."
      class="field_help_link"
      href="page.cgi?id=fields.html#rep_platform"
  >Hardware:</a>

</th>
      <td class="field_value">All
        All
      </td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          
          <tr>
      <th class="field_label">
        <label  accesskey="i">
          <a href="page.cgi?id=fields.html#importance"><u>I</u>mportance</a></label>:
      </th>
      <td>High
       Enhancement<span id="votes_container">
    (<a href="page.cgi?id=voting/user.html&amp;bug_id=8382#vote_8382">vote</a>)
  </span>
      </td>
    </tr>

      <tr><th class="field_label "
    id="field_label_target_milestone">


  <a 
      title="The Target Milestone field is used to define when the engineer the bug is assigned to expects to fix it."
      class="field_help_link"
      href="page.cgi?id=fields.html#target_milestone"
  >Target Milestone:</a>

</th><td>---
  </td>
      </tr>
          
          <tr><th class="field_label "
    id="field_label_assigned_to">


  <a 
      title="The person in charge of resolving the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#assigned_to"
  >Assignee:</a>

</th>
      <td><span class="vcard"><span class="fn">Bugzilla Administrator</span>
</span>
      </td>
    </tr>

    <script type="text/javascript">
      assignToDefaultOnChange(['product', 'component'],
        'bugzilla-admin\x40wireshark.org',
        '');
    </script>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          <tr><th class="field_label "
    id="field_label_bug_file_loc">


  <a 
      title="Bugs can have a URL associated with them - for example, a pointer to a web site where the problem is seen."
      class="field_help_link"
      href="page.cgi?id=fields.html#bug_file_loc"
  >URL:</a>

</th>
    <td>
      <span id="bz_url_input_area">
      </span>
    </td>
  </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>

          <tr>
    <th class="field_label">
      <label>Duplicates (12)</label>:
    </th>
    <td class="field_value">
      <span id="duplicates"><a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-23-5699.pcap"
   href="show_bug.cgi?id=8384">8384</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-23-18347.pcap"
   href="show_bug.cgi?id=8388">8388</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-24-13096.pcap"
   href="show_bug.cgi?id=8391">8391</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-25-21435.pcap"
   href="show_bug.cgi?id=8394">8394</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-25-6302.pcap"
   href="show_bug.cgi?id=8398">8398</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-26-3935.pcap"
   href="show_bug.cgi?id=8399">8399</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-26-5175.pcap"
   href="show_bug.cgi?id=8403">8403</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-27-20739.pcap"
   href="show_bug.cgi?id=8406">8406</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-27-22589.pcap"
   href="show_bug.cgi?id=8411">8411</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-28-30230.pcap"
   href="show_bug.cgi?id=8412">8412</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-28-31564.pcap"
   href="show_bug.cgi?id=8417">8417</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-03-01-7471.pcap"
   href="show_bug.cgi?id=8419">8419</a> 
      </span>
      (<a href="buglist.cgi?bug_id=8384,8388,8391,8394,8398,8399,8403,8406,8411,8412,8417,8419">view as bug list</a>)
    </td>
  </tr>
<tr><th class="field_label "
    id="field_label_dependson">


  <a 
      title="The bugs listed here must be resolved before this bug can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#dependson"
  >Depends on:</a>

</th>

  <td>
    <span id="dependson_input_area">
    </span>

  </td>
  </tr>
  
  <tr><th class="field_label "
    id="field_label_blocked">


  <a 
      title="This bug must be resolved before the bugs listed in this field can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#blocked"
  >Blocks:</a>

</th>

  <td>
    <span id="blocked_input_area">
    </span>

  </td>
  </tr>
          
        </table>
      </td>
      <td>
        <div class="bz_column_spacer">&nbsp;</div>
      </td>
      
      <td id="bz_show_bug_column_2" class="bz_show_bug_column">
        <table>
        <tr>
    <th class="field_label">
      Reported:
    </th>
    <td>2013-02-22 06:17 UTC by <span class="vcard"><span class="fn">Laurent Butti</span>
</span>
    </td>
  </tr>
  
  <tr>
    <th class="field_label">
      Modified:
    </th>
    <td>2016-06-21 13:09 UTC
      (<a href="show_activity.cgi?id=8382">History</a>)
    </td>
  
  </tr>
<tr>
      <th class="field_label">
        <label  accesskey="a">
          CC List:
        </label>
      </th>
      <td>5 
          users
          <span id="cc_edit_area_showhide_container" class="bz_default_hidden">
            (<a href="#" id="cc_edit_area_showhide">show</a>)
          </span>
        <div id="cc_edit_area">
          <br>
            <select id="cc" multiple="multiple" size="5" >
                <option value="buildbot-do-not-reply">buildbot-do-not-reply</option>
                <option value="eapache">eapache</option>
                <option value="lomato">lomato</option>
                <option value="mmann78">mmann78</option>
                <option value="Sdried7">Sdried7</option>
            </select>
        </div>
          <script type="text/javascript">
            hideEditableField( 'cc_edit_area_showhide_container', 
                               'cc_edit_area', 
                               'cc_edit_area_showhide', 
                               '', 
                               '');  
          </script>
      </td>
    </tr>

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_see_also">


  <a 
      title="This allows you to refer to bugs in other installations. You can enter a URL to a bug in the 'Add Bug URLs' field to note that that bug is related to this one. You can enter multiple URLs at once by separating them with whitespace. You should normally use this field to refer to bugs in other installations. For bugs in this installation, it is better to use the Depends on and Blocks fields."
      class="field_help_link"
      href="page.cgi?id=fields.html#see_also"
  >See Also:</a>

</th>
  <td class="field_value "
      id="field_container_see_also" ><ul class="bug_urls">
          <li><a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED FIXED - Buildbot crash output: fuzz-2013-10-25-12569.pcap"
   href="show_bug.cgi?id=9323">9323</a>
          </li></ul>

</td>
    </tr> 

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>



        </table>
      </td>
    </tr>
    <tr>
      <td colspan="3">
          <hr id="bz_top_half_spacer">
      </td>
    </tr>
  </table>

  <table id="bz_big_form_parts">
  <tr>
  <td>

    
<script type="text/javascript">
<!--
function toggle_display(link) {
    var table = document.getElementById("attachment_table");
    var view_all = document.getElementById("view_all");
    var hide_obsolete_url_parameter = "&hide_obsolete=1";
    // Store current height for scrolling later
    var originalHeight = table.offsetHeight;
    var rows = YAHOO.util.Dom.getElementsByClassName(
        'bz_tr_obsolete', 'tr', table);

    for (var i = 0; i < rows.length; i++) {
        bz_toggleClass(rows[i], 'bz_default_hidden');
    }

    if (YAHOO.util.Dom.hasClass(rows[0], 'bz_default_hidden')) {
        link.innerHTML = "Show Obsolete";
        view_all.href = view_all.href + hide_obsolete_url_parameter 
    }
    else {
        link.innerHTML = "Hide Obsolete";
        view_all.href = view_all.href.replace(hide_obsolete_url_parameter,"");
    }

    var newHeight = table.offsetHeight;
    // This scrolling makes the window appear to not move at all.
    window.scrollBy(0, newHeight - originalHeight);

    return false;
}
//-->
</script>

<br>
<table id="attachment_table">
  <tr id="a0">
    <th colspan="2" class="left">
      Attachments
    </th>
  </tr>


      <tr id="a1" class="bz_contenttype_application_cap">
        <td>
            <a href="attachment.cgi?id=10092"
               title="View the content of the attachment">
          <b>packet-ms-mss.pcap</b></a>

          <span class="bz_attach_extra_info">
              (240 bytes,
                application/cap)

            <br>
            <a href="#attach_10092"
               title="Go to the comment associated with the attachment">2013-02-22 06:17 UTC</a>,

            <span class="vcard"><span class="fn">Laurent Butti</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=10092&amp;action=edit">Details</a>
        </td>
      </tr>
      <tr id="a2" class="bz_contenttype_text_plain bz_patch">
        <td>
            <a href="attachment.cgi?id=10149"
               title="View the content of the attachment">
          <b>Remove format_text</b></a>

          <span class="bz_attach_extra_info">
              (1.05 KB,
                patch)

            <br>
            <a href="#attach_10149"
               title="Go to the comment associated with the attachment">2013-03-01 08:24 UTC</a>,

            <span class="vcard"><span class="fn">Michael Mann</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=10149&amp;action=edit">Details</a>
        </td>
      </tr>

  <tr class="bz_attach_footer">
    <td colspan="2">
        <span class="bz_attach_view_hide">
        </span>
        <a href="attachment.cgi?bugid=8382&amp;action=enter">Add an attachment</a>
        (proposed patch, testcase, etc.)
    </td>
  </tr>
</table>
<br>
<div id="add_comment" class="bz_section_additional_comments">
      <table>
        <tr>
          <td>
            <fieldset>
              <legend>Note</legend>
              You need to
              <a href="show_bug.cgi?id=8382&amp;GoAheadAndLogIn=1">log in</a>
              before you can comment on or make changes to this bug.
            </fieldset>
          </td>
        </tr> 
      </table>
  </div>
  </td>
  <td>
  </td>
  </tr></table>

  
  <div id="comments"><script src="js/comments.js?1490378926" type="text/javascript">
</script>

<script type="text/javascript">
<!--
  /* Adds the reply text to the 'comment' textarea */
  function replyToComment(id, real_id, name) {
      var prefix = "(In reply to " + name + " from comment #" + id + ")\n";
      var replytext = "";
        /* pre id="comment_name_N" */
        var text_elem = document.getElementById('comment_text_'+id);
        var text = getText(text_elem);
        replytext = prefix + wrapReplyText(text);


      /* <textarea id="comment"> */
      var textarea = document.getElementById('comment');
      if (textarea.value != replytext) {
          textarea.value += replytext;
      }

      textarea.focus();
  } 
//-->
</script>


<!-- This auto-sizes the comments and positions the collapse/expand links 
     to the right. -->
<table class="bz_comment_table">
<tr>
<td>
<div id="c0" class="bz_comment bz_first_comment">

      <div class="bz_first_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c0">Description</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laurent Butti</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-22 06:17:45 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=10092" name="attach_10092" title="packet-ms-mss.pcap">attachment 10092</a> <a href="attachment.cgi?id=10092&amp;action=edit" title="packet-ms-mss.pcap">[details]</a></span>
packet-ms-mss.pcap

Build Information:
TShark 1.8.5 (SVN Rev Unknown from unknown)

Copyright 1998-2013 Gerald Combs &lt;<a href="/cdn-cgi/l/email-protection#781f1d0a19141c5e5b4e4c430f110a1d0b10190a1356170a1f">gerald&#64;wireshark.org</a>&gt; and contributors.
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Compiled (64-bit) with GLib 2.32.3, with libpcap, with libz 1.2.3.4, without
POSIX capabilities, without SMI, without c-ares, without ADNS, with Lua 5.1,
without Python, with GnuTLS 2.12.14, with Gcrypt 1.5.0, with MIT Kerberos,
without GeoIP.

Running on Linux 3.2.0-30-generic, with locale en_US.UTF-8, with libpcap version
1.1.1, with libz 1.2.3.4.

Built using gcc 4.6.3.
--
Hi,

Here is a PCAP file triggering a SIGSEGV that could enable (at least) a remote
party to trigger a denial of service.

This file was generated thanks to a fuzz testing campaign.

Laurent Butti.

--

Program received signal SIGSEGV, Segmentation fault.
format_text (string=0x7fffe908d000 &quot;&quot;, len=&lt;optimized out&gt;) at strutil.c:188
188     c = *string++;
(gdb) bt
#0  format_text (string=0x7fffe908d000 &quot;&quot;, len=&lt;optimized out&gt;) at strutil.c:188
#1  0x00007ffff5562490 in dissect_server_info (tree=0x0, tvb=0x1d1b400, pinfo=&lt;optimized out&gt;, offset=&lt;optimized out&gt;) at packet-ms-mms.c:888
#2  dissect_msmms_command (tree=&lt;optimized out&gt;, pinfo=&lt;optimized out&gt;, tvb=0x1d1b400) at packet-ms-mms.c:546
#3  dissect_msmms_pdu (tvb=0x1d1b400, pinfo=&lt;optimized out&gt;, tree=&lt;optimized out&gt;) at packet-ms-mms.c:334
#4  0x00007ffff51794eb in call_dissector_through_handle (handle=0x102e150, tvb=0x1d1b400, pinfo=0x7fffffffd610, tree=0x0) at packet.c:429
#5  0x00007ffff5179b95 in call_dissector_work (handle=0x102e150, tvb=0x1d1b400, pinfo_arg=0x7fffffffd610, tree=0x0, add_proto_name=1) at packet.c:524
#6  0x00007ffff517a30e in dissector_try_uint_new (sub_dissectors=&lt;optimized out&gt;, uint_val=1755, tvb=0x1d1b400, pinfo=0x7fffffffd610, tree=0x0, 
    add_proto_name=1) at packet.c:943
#7  0x00007ffff5764912 in decode_tcp_ports (tvb=&lt;optimized out&gt;, offset=&lt;optimized out&gt;, pinfo=0x7fffffffd610, tree=0x0, src_port=1755, dst_port=51312, 
    tcpd=0x7fffe60f3820) at packet-tcp.c:3874
#8  0x00007ffff5764d4e in process_tcp_payload (tvb=0x1c84cc0, offset=32, pinfo=0x7fffffffd610, tree=0x0, tcp_tree=0x0, src_port=1755, dst_port=51312, seq=0, 
    nxtseq=0, is_tcp_segment=0, tcpd=0x7fffe60f3820) at packet-tcp.c:3933
#9  0x00007ffff57652f1 in desegment_tcp (tcpd=0x7fffe60f3820, tcp_tree=0x0, tree=0x0, dport=51312, sport=1755, nxtseq=145, seq=1, offset=32, 
    pinfo=0x7fffffffd610, tvb=0x1c84cc0) at packet-tcp.c:1799
#10 dissect_tcp_payload (tvb=0x1c84cc0, pinfo=0x7fffffffd610, offset=&lt;optimized out&gt;, seq=&lt;optimized out&gt;, nxtseq=145, sport=1755, dport=51312, tree=0x0, 
    tcp_tree=0x0, tcpd=0x7fffe60f3820) at packet-tcp.c:4000
#11 0x00007ffff576673f in dissect_tcp (tvb=&lt;optimized out&gt;, pinfo=0x7fffffffd610, tree=0x0) at packet-tcp.c:4748
#12 0x00007ffff51794b0 in call_dissector_through_handle (handle=0x138bf70, tvb=0x1c84cc0, pinfo=0x7fffffffd610, tree=0x0) at packet.c:433
#13 0x00007ffff5179b95 in call_dissector_work (handle=0x138bf70, tvb=0x1c84cc0, pinfo_arg=0x7fffffffd610, tree=0x0, add_proto_name=1) at packet.c:524
#14 0x00007ffff517a30e in dissector_try_uint_new (sub_dissectors=&lt;optimized out&gt;, uint_val=6, tvb=0x1c84cc0, pinfo=0x7fffffffd610, tree=0x0, add_proto_name=1)
    at packet.c:943
#15 0x00007ffff54bd27b in dissect_ip (tvb=0x1d1ba40, pinfo=&lt;optimized out&gt;, parent_tree=0x0) at packet-ip.c:2396
#16 0x00007ffff51794b0 in call_dissector_through_handle (handle=0xf19fe0, tvb=0x1d1ba40, pinfo=0x7fffffffd610, tree=0x0) at packet.c:433
#17 0x00007ffff5179b95 in call_dissector_work (handle=0xf19fe0, tvb=0x1d1ba40, pinfo_arg=0x7fffffffd610, tree=0x0, add_proto_name=1) at packet.c:524
#18 0x00007ffff517a30e in dissector_try_uint_new (sub_dissectors=&lt;optimized out&gt;, uint_val=33, tvb=0x1d1ba40, pinfo=0x7fffffffd610, tree=0x0, 
    add_proto_name=1) at packet.c:943
#19 0x00007ffff56264e2 in dissect_ppp_common (tvb=&lt;optimized out&gt;, pinfo=0x7fffffffd610, tree=0x0, fh_tree=0x0, ti=0x0, proto_offset=2) at packet-ppp.c:3935
#20 0x00007ffff51794b0 in call_dissector_through_handle (handle=0x116e300, tvb=0x1d209e0, pinfo=0x7fffffffd610, tree=0x0) at packet.c:433
#21 0x00007ffff5179b95 in call_dissector_work (handle=0x116e300, tvb=0x1d209e0, pinfo_arg=0x7fffffffd610, tree=0x0, add_proto_name=1) at packet.c:524
#22 0x00007ffff517a30e in dissector_try_uint_new (sub_dissectors=&lt;optimized out&gt;, uint_val=4, tvb=0x1d209e0, pinfo=0x7fffffffd610, tree=0x0, add_proto_name=1)
    at packet.c:943
#23 0x00007ffff53dc8cb in dissect_frame (tvb=0x1d209e0, pinfo=0x7fffffffd610, parent_tree=0x0) at packet-frame.c:383
#24 0x00007ffff51794b0 in call_dissector_through_handle (handle=0xdabf40, tvb=0x1d209e0, pinfo=0x7fffffffd610, tree=0x0) at packet.c:433
#25 0x00007ffff5179b95 in call_dissector_work (handle=0xdabf40, tvb=0x1d209e0, pinfo_arg=0x7fffffffd610, tree=0x0, add_proto_name=1) at packet.c:524
#26 0x00007ffff517b7e1 in call_dissector (handle=&lt;optimized out&gt;, tvb=0x1d209e0, pinfo=0x7fffffffd610, tree=0x0) at packet.c:2002
#27 0x00007ffff517bbf4 in dissect_packet (edt=0x7fffffffd600, pseudo_header=0x0, pd=0x1c5b6b0 &quot;\377\003&quot;, fd=0x1cfa570, cinfo=0x0) at packet.c:364
#28 0x0000000000441481 in add_packet_to_packet_list (fdata=0x1cfa570, cf=0x7fc5c0, dfcode=0x0, filtering_tap_listeners=0, tap_flags=&lt;optimized out&gt;, 
    pseudo_header=0x1c561c8, buf=0x1c5b6b0 &quot;\377\003&quot;, add_to_packet_list=1, refilter=1) at file.c:1121
#29 0x000000000044198c in read_packet (cf=0x7fc5c0, dfcode=0x0, filtering_tap_listeners=0, tap_flags=4, offset=&lt;optimized out&gt;) at file.c:1228
#30 0x0000000000441fca in cf_read (cf=0x7fc5c0, reloading=0) at file.c:623
#31 0x0000000000431341 in main (argc=0, argv=0x7fffffffdef8) at main.c:3048
(gdb) python import exploitable
(gdb) exploitable -v
'exploitable' version 1.04
Linux nitro 3.2.0-30-generic #48-Ubuntu SMP Fri Aug 24 16:52:48 UTC 2012 x86_64
Signal si_signo: 11 Signal si_addr: 0x7fffe908d000
Nearby code:
   0x00007ffff51a0489 &lt;+121&gt;:   je     0x7ffff51a0518 &lt;format_text+264&gt;
   0x00007ffff51a048f &lt;+127&gt;:   mov    esi,DWORD PTR [r9+r13*4]
   0x00007ffff51a0493 &lt;+131&gt;:   lea   <a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=14">r14</a>d,[r12+0x4]
   0x00007ffff51a0498 &lt;+136&gt;:   cmp   <a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=14">r14</a>d,esi
   0x00007ffff51a049b &lt;+139&gt;:   jge    0x7ffff51a0538 &lt;format_text+296&gt;
=&gt; 0x00007ffff51a04a1 &lt;+145&gt;:   movzx  eax,BYTE PTR [rbx]
   0x00007ffff51a04a4 &lt;+148&gt;:   add    rbx,0x1
   0x00007ffff51a04a8 &lt;+152&gt;:   lea    ecx,[rax-0x20]
   0x00007ffff51a04ab &lt;+155&gt;:   cmp    cl,0x5e
   0x00007ffff51a04ae &lt;+158&gt;:   jbe    0x7ffff51a0478 &lt;format_text+104&gt;
Stack trace:
#  0 format_text at 0x7ffff51a04a1 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
#  1 dissect_server_info at 0x7ffff5562490 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
#  2 dissect_msmms_command at 0x7ffff5562490 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
#  3 dissect_msmms_pdu at 0x7ffff5562490 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
#  4 call_dissector_through_handle at 0x7ffff51794eb in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
#  5 call_dissector_work at 0x7ffff5179b95 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
#  6 dissector_try_uint_new at 0x7ffff517a30e in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
#  7 decode_tcp_ports at 0x7ffff5764912 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
#  8 process_tcp_payload at 0x7ffff5764d4e in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
#  9 desegment_tcp at 0x7ffff57652f1 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 10 dissect_tcp_payload at 0x7ffff57652f1 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 11 dissect_tcp at 0x7ffff576673f in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 12 call_dissector_through_handle at 0x7ffff51794b0 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 13 call_dissector_work at 0x7ffff5179b95 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 14 dissector_try_uint_new at 0x7ffff517a30e in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 15 dissect_ip at 0x7ffff54bd27b in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 16 call_dissector_through_handle at 0x7ffff51794b0 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 17 call_dissector_work at 0x7ffff5179b95 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 18 dissector_try_uint_new at 0x7ffff517a30e in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 19 dissect_ppp_common at 0x7ffff56264e2 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 20 call_dissector_through_handle at 0x7ffff51794b0 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 21 call_dissector_work at 0x7ffff5179b95 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 22 dissector_try_uint_new at 0x7ffff517a30e in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 23 dissect_frame at 0x7ffff53dc8cb in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 24 call_dissector_through_handle at 0x7ffff51794b0 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 25 call_dissector_work at 0x7ffff5179b95 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 26 call_dissector at 0x7ffff517b7e1 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 27 dissect_packet at 0x7ffff517bbf4 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
# 28 add_packet_to_packet_list at 0x441481 in /home/laurent/fuzzing/bin/wireshark-1.8.5/bin/wireshark
# 29 read_packet at 0x44198c in /home/laurent/fuzzing/bin/wireshark-1.8.5/bin/wireshark
# 30 cf_read at 0x441fca in /home/laurent/fuzzing/bin/wireshark-1.8.5/bin/wireshark
# 31 main at 0x431341 in /home/laurent/fuzzing/bin/wireshark-1.8.5/bin/wireshark
Faulting frame: #  0 format_text at 0x7ffff51a04a1 in /home/laurent/fuzzing/bin/wireshark-1.8.5/lib/libwireshark.so.2.0.5
Description: Access violation on source operand
Short description: SourceAv (18/21)
Hash: 83994d27233225301d31a29cf2949922.0ab287d0690b6cc76b825e831fc42c3b
Exploitability Classification: UNKNOWN
Explanation: The target crashed on an access violation at an address matching the source operand of the current instruction. This likely indicates a read access violation.
Other tags: AccessViolation (20/21)</pre>
    </div>

    <div id="c1" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c1">Comment 1</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Michael Mann</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-22 10:44:11 UTC
        </span>

      </div>




<pre class="bz_comment_text">I'm going to guess this is the same issue as <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED FIXED - MS-MMC dissector crash"
   href="show_bug.cgi?id=8112">bug 8112</a> with a different (but similar) dissector.</pre>
    </div>

    <div id="c2" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c2">Comment 2</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-23 07:23:01 UTC
        </span>

      </div>




<pre class="bz_comment_text">Fixed in<a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=47839">r47839</a>.</pre>
    </div>

    <div id="c3" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c3">Comment 3</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-23 07:25:09 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c1">comment #1</a>)
<span class="quote">&gt; I'm going to guess this is the same issue as <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED FIXED - MS-MMC dissector crash"
   href="show_bug.cgi?id=8112">bug 8112</a> with a different (but
&gt; similar) dissector.</span >

Yes, I believe so.</pre>
    </div>

    <div id="c4" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c4">Comment 4</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-23 07:26:27 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c3">comment #3</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=8382#c1">comment #1</a>)
&gt; &gt; I'm going to guess this is the same issue as <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED FIXED - MS-MMC dissector crash"
   href="show_bug.cgi?id=8112">bug 8112</a> with a different (but
&gt; &gt; similar) dissector.
&gt; 
&gt; Yes, I believe so.</span >

The length field was overflowing to exactly 0 when doubled, so the tvb function was returning an empty string but not throwing an exception.</pre>
    </div>

    <div id="c5" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c5">Comment 5</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Christopher Maynard</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-23 07:30:27 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-23-5699.pcap"
   href="show_bug.cgi?id=8384">Bug 8384</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c6" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c6">Comment 6</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-23 07:31:38 UTC
        </span>

      </div>




<pre class="bz_comment_text">There are other potential instances of this bug (for example see server_version_length a few lines previous).

I think we need a better fix, not sure what it is. The problem is that the tvb_get_string functions are not guaranteed to return the exact number of bytes that were requested...</pre>
    </div>

    <div id="c7" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c7">Comment 7</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Christopher Maynard</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-24 09:41:04 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-23-18347.pcap"
   href="show_bug.cgi?id=8388">Bug 8388</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c8" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c8">Comment 8</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Christopher Maynard</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-24 20:26:36 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-24-13096.pcap"
   href="show_bug.cgi?id=8391">Bug 8391</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c9" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c9">Comment 9</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Christopher Maynard</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-25 07:52:24 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-25-21435.pcap"
   href="show_bug.cgi?id=8394">Bug 8394</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c10" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c10">Comment 10</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Christopher Maynard</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-26 06:59:08 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-25-6302.pcap"
   href="show_bug.cgi?id=8398">Bug 8398</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c11" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c11">Comment 11</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Christopher Maynard</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-26 07:00:23 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-26-3935.pcap"
   href="show_bug.cgi?id=8399">Bug 8399</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c12" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c12">Comment 12</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Michael Mann</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-27 06:49:01 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-27-20739.pcap"
   href="show_bug.cgi?id=8406">Bug 8406</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c13" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c13">Comment 13</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Christopher Maynard</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-27 07:20:11 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-26-5175.pcap"
   href="show_bug.cgi?id=8403">Bug 8403</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c14" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c14">Comment 14</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Michael Mann</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-28 06:09:37 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-28-30230.pcap"
   href="show_bug.cgi?id=8412">Bug 8412</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c15" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c15">Comment 15</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Michael Mann</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-28 06:10:50 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-27-22589.pcap"
   href="show_bug.cgi?id=8411">Bug 8411</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c16" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c16">Comment 16</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Christopher Maynard</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-02-28 22:36:13 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-02-28-31564.pcap"
   href="show_bug.cgi?id=8417">Bug 8417</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c17" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c17">Comment 17</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Christopher Maynard</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-01 08:22:01 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2013-03-01-7471.pcap"
   href="show_bug.cgi?id=8419">Bug 8419</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c18" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c18">Comment 18</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Michael Mann</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-01 08:24:15 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=10149" name="attach_10149" title="Remove format_text">attachment 10149</a> <a href="attachment.cgi?id=10149&amp;action=edit" title="Remove format_text">[details]</a></span>
Remove format_text

Why is the format_text even necessary?  Can we just provide the string returned from tvb_get_ephemeral_unicode_string() directly?  We already know the value is going to be bogus/garbage because length &gt; packet length.  expert_info may be overkill.

I think a &quot;better&quot; solution would be to support &quot;unicode&quot; through proto_tree_add_item so some of these extra steps aren't necessary, but you'd still have this issue with server_version.</pre>
    </div>

    <div id="c19" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c19">Comment 19</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-01 09:02:14 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c18">comment #18</a>)
<span class="quote">&gt; Created <span class=""><a href="attachment.cgi?id=10149" name="attach_10149" title="Remove format_text">attachment 10149</a> <a href="attachment.cgi?id=10149&amp;action=edit" title="Remove format_text">[details]</a></span>
&gt; Remove format_text
&gt; 
&gt; Why is the format_text even necessary?  Can we just provide the string
&gt; returned from tvb_get_ephemeral_unicode_string() directly?  We already know
&gt; the value is going to be bogus/garbage because length &gt; packet length. 
&gt; expert_info may be overkill.</span >

I believe the format_text is necessary in the case that the string contains null-terminators so that they get escaped properly instead of the string getting truncated.

Yes, my initial fix breaks that as well.

<span class="quote">&gt; I think a &quot;better&quot; solution would be to support &quot;unicode&quot; through
&gt; proto_tree_add_item so some of these extra steps aren't necessary, but you'd
&gt; still have this issue with server_version.</span >

Yes. I think my complaint about tvb_get_string_unicode still stands though: the calling function has no way to determine the size of the buffer it gets back. The buffer may contain embedded null-terminators so strlen is unreliable, and 1/2 the requested length is only valid assuming there are no multi-byte characters.</pre>
    </div>

    <div id="c20" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c20">Comment 20</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-01 09:14:30 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c19">comment #19</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=8382#c18">comment #18</a>)
&gt; &gt; Created <span class=""><a href="attachment.cgi?id=10149" name="attach_10149" title="Remove format_text">attachment 10149</a> <a href="attachment.cgi?id=10149&amp;action=edit" title="Remove format_text">[details]</a></span>
&gt; &gt; Remove format_text
&gt; &gt; 
&gt; &gt; Why is the format_text even necessary?  Can we just provide the string
&gt; &gt; returned from tvb_get_ephemeral_unicode_string() directly?  We already know
&gt; &gt; the value is going to be bogus/garbage because length &gt; packet length. 
&gt; &gt; expert_info may be overkill.
&gt; 
&gt; I believe the format_text is necessary in the case that the string contains
&gt; null-terminators so that they get escaped properly instead of the string
&gt; getting truncated.</span >

Or other non-printing characters, since I don't know exactly how tvb_get_ephemeral_unicode_string is expected to behave when the string contains embedded nulls. It's possible nobody ever considered that case.

<span class="quote">&gt; Yes, my initial fix breaks that as well.
&gt; 
&gt; &gt; I think a &quot;better&quot; solution would be to support &quot;unicode&quot; through
&gt; &gt; proto_tree_add_item so some of these extra steps aren't necessary, but you'd
&gt; &gt; still have this issue with server_version.
&gt; 
&gt; Yes. I think my complaint about tvb_get_string_unicode still stands though:
&gt; the calling function has no way to determine the size of the buffer it gets
&gt; back. The buffer may contain embedded null-terminators so strlen is
&gt; unreliable, and 1/2 the requested length is only valid assuming there are no
&gt; multi-byte characters.</span >

Generally: the behaviour of tvb_get_string_* functions is undefined or inconsistent with respect to embedded nulls. The unknown length problem may end up being irrelevant if we consistently strip embedded nulls, because then strlen will be usable.</pre>
    </div>

    <div id="c21" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c21">Comment 21</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-01 09:31:33 UTC
        </span>

      </div>




<pre class="bz_comment_text">Ugh, this is getting messy. Stepping back for a moment, I think the following is what *should* be; if we agree on this then we can start identifying places where we don't do what we should:

- tvb_get_string_* functions should preserve embedded nulls, as they should be just dumb getters from the tvb

- tvb_get_string_* functions should provide the length of the returned string, since with multi-byte characters and embedded nulls, the caller has no other way of determining this value

- the ms-mms dissector should be checking for overflow when doubling a value it gets from the packet

- the ms-mms dissector should be using proto_tree_add_unicode_string for strings it gets via tvb_get_ephemeral_unicode_string

- it should be possible to add multibyte unicode strings (UCS-2, UTF-16, UCS-4, etc) to the tree with proto_tree_add_item and the appropriate encoding arguments

- calling format_str is necessary when passing a packet-derived string into proto_tree_add_string, col_append_fstr and friends. These functions could potentially call format_str themselves on every string they get, but the performance hit would be big. Faster to continue calling it only where needed.

Can you think of anything else?</pre>
    </div>

    <div id="c22" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c22">Comment 22</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Michael Mann</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-01 09:55:19 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c21">comment #21</a>)
<span class="quote">&gt; Can you think of anything else?</span >

Yea, this is where my mind was going too, but I didn't know enough about current &quot;unicode&quot; support to know how deep the hole was.

Should we put some length checks + expert info temporarily to keep the buildbots happy? 

Also, while I agree with the &quot;should&quot;, I'm not sure you want to backport this all to the 1.8 trunk where this was originally reported.</pre>
    </div>

    <div id="c23" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c23">Comment 23</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-01 10:27:29 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c22">comment #22</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=8382#c21">comment #21</a>)
&gt; &gt; Can you think of anything else?
&gt; 
&gt; Yea, this is where my mind was going too, but I didn't know enough about
&gt; current &quot;unicode&quot; support to know how deep the hole was.</span >

I'm not too clear on all of it either - some of my list may already be done, but clearly not most of it.

<span class="quote">&gt; Should we put some length checks + expert info temporarily to keep the
&gt; buildbots happy? </span >

Will do that.

<span class="quote">&gt; Also, while I agree with the &quot;should&quot;, I'm not sure you want to backport
&gt; this all to the 1.8 trunk where this was originally reported.</span >

I'll list for backport the simpler length checks to keep everything from crashing in most cases.</pre>
    </div>

    <div id="c24" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c24">Comment 24</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-01 10:49:27 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c23">comment #23</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=8382#c22">comment #22</a>)
&gt; &gt; Also, while I agree with the &quot;should&quot;, I'm not sure you want to backport
&gt; &gt; this all to the 1.8 trunk where this was originally reported.
&gt; 
&gt; I'll list for backport the simpler length checks to keep everything from
&gt; crashing in most cases.</span >

Also note: 1.6 trunk crashes in a rather different way because it uses tvb_get_ephemeral_faked_unicode instead. Backport will have to be fully manual.</pre>
    </div>

    <div id="c25" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c25">Comment 25</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-01 11:10:35 UTC
        </span>

      </div>




<pre class="bz_comment_text">Better workaround added in<a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=47979">r47979</a>, old workaround reverted in<a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=47980">r47980</a>.</pre>
    </div>

    <div id="c26" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c26">Comment 26</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-01 11:22:02 UTC
        </span>

      </div>




<pre class="bz_comment_text">Workaround manually backported to 1.8 in<a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=47981">r47981</a> and 1.6 in<a href="http://anonsvn.wireshark.org/viewvc?view=revision&revision=47982">r47982</a>.</pre>
    </div>

    <div id="c27" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c27">Comment 27</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-01 12:34:57 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c21">comment #21</a>)
<span class="quote">&gt; Ugh, this is getting messy. Stepping back for a moment, I think the
&gt; following is what *should* be; if we agree on this then we can start
&gt; identifying places where we don't do what we should:
&gt; 
&gt; - tvb_get_string_* functions should preserve embedded nulls, as they should
&gt; be just dumb getters from the tvb
&gt; 
&gt; - tvb_get_string_* functions should provide the length of the returned
&gt; string, since with multi-byte characters and embedded nulls, the caller has
&gt; no other way of determining this value</span >

Once 1.10 branches, we should simplify to only two public tvb string functions:

wmem_strbuf tvb_get_string(wmem_allocator, tvb, offset, length, encoding)
wmem_strbuf tvb_get_stringz(wmem_allocator, tvb, offset, encoding)

Behaviour would be similar to tvb_get_*_enc except using the passed-in wmem allocator instead. These two functions would be able to subsume at least 12 existing ones by my count. (Note that these functions would still support manually managed memory if desired, since passing a NULL allocator to wmem will automatically use manual glib memory).

Thoughts?</pre>
    </div>

    <div id="c28" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c28">Comment 28</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-01 12:36:39 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c27">comment #27</a>)
<span class="quote">&gt; wmem_strbuf tvb_get_string(wmem_allocator, tvb, offset, length, encoding)
&gt; wmem_strbuf tvb_get_stringz(wmem_allocator, tvb, offset, encoding)</span >

tvb_get_string would preserve embedded nulls.
tvb_get_stringz wouldn't have to, since it stops at the first null.</pre>
    </div>

    <div id="c29" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c29">Comment 29</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-02 09:56:15 UTC
        </span>

      </div>




<pre class="bz_comment_text">Change priority now that the actual crash is fixed.</pre>
    </div>

    <div id="c30" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c30">Comment 30</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Guy Harris</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-02 18:22:36 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c21">comment #21</a>)
<span class="quote">&gt; - tvb_get_string_* functions should preserve embedded nulls, as they should
&gt; be just dumb getters from the tvb</span >

If so, then the string might not be usable by the dissector in, for example, comparisons, as the string won't be guaranteed to be in a C-string-style representation (string of octets, all ASCII characters represented as single octets containing the ASCII value of the character).

If the dissector is just adding a string value, without needing to look at the value, it should use proto_tree_add_item().

If it needs to look at the value, it should use a tvb_get_string_* routine that takes an encoding argument, and either:

    1) the routine should return a C string (null-terminated, meaning we can't handle embedded nulls)

or

    2) the routine should return something such as a counted string, so that we can handle embedded nulls, and we should provide routines that handle that type of string

and the string's encoding should be UTF-8.

<span class="quote">&gt; - tvb_get_string_* functions should provide the length of the returned
&gt; string, since with multi-byte characters and embedded nulls, the caller has
&gt; no other way of determining this value</span >

&quot;Length&quot; in octets or &quot;length&quot; in characters?

That sounds like case 2), where we use counted strings.

<span class="quote">&gt; - the ms-mms dissector should be checking for overflow when doubling a value
&gt; it gets from the packet
&gt; 
&gt; - the ms-mms dissector should be using proto_tree_add_unicode_string for
&gt; strings it gets via tvb_get_ephemeral_unicode_string</span >

<span class="quote">&gt; - it should be possible to add multibyte unicode strings (UCS-2, UTF-16,
&gt; UCS-4, etc) to the tree with proto_tree_add_item and the appropriate
&gt; encoding arguments</span >

Yes.

This raises the question of how the value of a string should be stored in the protocol tree.

Two options I see are:

    1) store it as some Unicode encoding (UTF-8, UTF-16, or UCS-4);

    2) store it as a raw collection of octets, along with the encoding used, and convert it to some Unicode encoding when needed.

&quot;When needed&quot; would include:

    when presenting it in human-readable form;

    when presenting it in PDML or some other form intended for machine reading;

    when providing it to code for use in, for example, a tap;

    when comparing with it in a display filter.

If there's anything in the string that *can't* be converted (e.g., an invalid UTF-8 sequence, or a character in some non-Unicode set that has no Unicode equivalent, if any such characters exist), then:

    when presenting it in human-readable form, we'd have to convert it to something to show to the user (Unicode REPLACEMENT CHARACTER?);

    when presenting in PDML, we'd have to do something;

    when providing it for code to use, we'd have to do something (REPLACEMENT CHARACTER plus a &quot;sorry, I couldn't convert this completely&quot; indication?);

    when comparing it in a display filter, cause all comparisons other than &quot;not equal&quot; to fail (unless we have a way to specify comparison against arbitrary octet strings).

<span class="quote">&gt; - calling format_str is necessary when passing a packet-derived string into
&gt; proto_tree_add_string, col_append_fstr and friends. These functions could
&gt; potentially call format_str themselves on every string they get, but the
&gt; performance hit would be big. Faster to continue calling it only where
&gt; needed.</span >

When presenting strings in human-readable form, we need to figure out what to do about non-printable characters.  The format_str mechanism of showing them as C string escapes might work, although would we then have to escape all backslashes in the string?  That'd look Really Weird in the SMB dissector, for example, with pathnames filled up with \\.  Perhaps string fields should have a display option indicating whether to use C string escapes (complete with escaping of backslashes) or to just show non-printable characters either as REPLACEMENT CHARACTER or, at least for C0 control characters, as the SYMBOL FOR xxx characters (0x2400+{value} for 0x00 through 0x1F and 0x2421 for 0x7F).

It might also be useful to have some way in the UI to look at the raw bytes corresponding to individual glyphs, in case, for example, you're trying to debug a problem with a client that's sending bad UTF-8 sequences over the wire, or a problem with decomposed vs. composed accented characters.

My personal inclination is to store string values as encoding+raw bytes, doing the conversion to UTF-8 lazily, and:

Having

    protocol.string {comparison} &quot;hello&quot;

being done either by converting protocol.string to UTF-8 and comparing the UTF-8 strings or converting &quot;hello&quot; to the encoding, caching the result, and failing if the conversion fails (&gt;, &gt;=, &lt;, and &lt;= might be done by converting to UTF-8; they're probably less common, and they raise questions about what order to impose on strings in any case).  The latter would probably involve fewer conversions.

Having

    protocol.string {==,!=} xx:xx:xx:xx:xx:xx:xx:xx...

be done by comparing the sequence of octets with the raw bytes.

Having the &quot;apply as filter&quot; and &quot;prepare as filter&quot; stuff, when you try to construct a filter from a string field, use the sequence-of-octets form if the value can't be converted to Unicode and the string form otherwise (although that would get tricky if the Unicode string contains non-printable characters).</pre>
    </div>

    <div id="c31" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c31">Comment 31</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-02 19:40:44 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c30">comment #30</a>)
<span class="quote">&gt; If it needs to look at the value, it should use a tvb_get_string_* routine
&gt; that takes an encoding argument, and either:
&gt; 
&gt;     1) the routine should return a C string (null-terminated, meaning we
&gt; can't handle embedded nulls)
&gt; 
&gt; or
&gt; 
&gt;     2) the routine should return something such as a counted string, so that
&gt; we can handle embedded nulls, and we should provide routines that handle
&gt; that type of string</span >

I was thinking counted string, as the emem/wmem strbufs are (although they also provide a null-terminator at the end).

<span class="quote">&gt; and the string's encoding should be UTF-8.
&gt; 
&gt; &gt; - tvb_get_string_* functions should provide the length of the returned
&gt; &gt; string, since with multi-byte characters and embedded nulls, the caller has
&gt; &gt; no other way of determining this value
&gt; 
&gt; &quot;Length&quot; in octets or &quot;length&quot; in characters?</span >

Octets, I think, so that unicode-ignorant code will continue to not crash, at least.

<span class="quote">&gt; &gt; - calling format_str is necessary when passing a packet-derived string into
&gt; &gt; proto_tree_add_string, col_append_fstr and friends. These functions could
&gt; &gt; potentially call format_str themselves on every string they get, but the
&gt; &gt; performance hit would be big. Faster to continue calling it only where
&gt; &gt; needed.
&gt; 
&gt; When presenting strings in human-readable form, we need to figure out what
&gt; to do about non-printable characters.  The format_str mechanism of showing
&gt; them as C string escapes might work, although would we then have to escape
&gt; all backslashes in the string?  That'd look Really Weird in the SMB
&gt; dissector, for example, with pathnames filled up with \\.  Perhaps string
&gt; fields should have a display option indicating whether to use C string
&gt; escapes (complete with escaping of backslashes) or to just show
&gt; non-printable characters either as REPLACEMENT CHARACTER or, at least for C0
&gt; control characters, as the SYMBOL FOR xxx characters (0x2400+{value} for
&gt; 0x00 through 0x1F and 0x2421 for 0x7F).</span >

I suspect for now the current method is satisfactory, being that whatever the UI toolkit does is what we get unless the dissector manually calls format_str. I agree we'll want a flag for string fields at some point, though I'm not sure if it should be on the hf field or in the encoding arg of the tree_add call.

<span class="quote">&gt; It might also be useful to have some way in the UI to look at the raw bytes
&gt; corresponding to individual glyphs, in case, for example, you're trying to
&gt; debug a problem with a client that's sending bad UTF-8 sequences over the
&gt; wire, or a problem with decomposed vs. composed accented characters.</span >

That would be handy, but unless Qt does something nice for us I suspect it would turn into a lot of work.

<span class="quote">&gt; My personal inclination is to store string values as encoding+raw bytes,
&gt; doing the conversion to UTF-8 lazily, and:</span >

My worry would be storage space, since running a filter that forced conversion of all cases would double the memory used by these strings. Not a particularly strong objection though.

<span class="quote">&gt; Having
&gt; 
&gt;     protocol.string {comparison} &quot;hello&quot;
&gt; 
&gt; being done either by converting protocol.string to UTF-8 and comparing the
&gt; UTF-8 strings or converting &quot;hello&quot; to the encoding, caching the result, and
&gt; failing if the conversion fails (&gt;, &gt;=, &lt;, and &lt;= might be done by
&gt; converting to UTF-8; they're probably less common, and they raise questions
&gt; about what order to impose on strings in any case).  The latter would
&gt; probably involve fewer conversions.
&gt; 
&gt; Having
&gt; 
&gt;     protocol.string {==,!=} xx:xx:xx:xx:xx:xx:xx:xx...
&gt; 
&gt; be done by comparing the sequence of octets with the raw bytes.
&gt; 
&gt; Having the &quot;apply as filter&quot; and &quot;prepare as filter&quot; stuff, when you try to
&gt; construct a filter from a string field, use the sequence-of-octets form if
&gt; the value can't be converted to Unicode and the string form otherwise
&gt; (although that would get tricky if the Unicode string contains non-printable
&gt; characters).</span ></pre>
    </div>

    <div id="c32" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c32">Comment 32</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Guy Harris</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-02 19:49:43 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c18">comment #18</a>)
<span class="quote">&gt; I think a &quot;better&quot; solution would be to support &quot;unicode&quot; through
&gt; proto_tree_add_item so some of these extra steps aren't necessary, but you'd
&gt; still have this issue with server_version.</span >

You mean like

    proto_tree_add_item(tree, field, tvb, offset, length,
        {ENC_UTF_8|ENC_NA, ENC_UCS_2|ENC_{BIG,LITTLE}_ENDIAN,
         ENC_UTF_16|ENC_{BIG,LITTLE}_ENDIAN});

(&quot;Unicode&quot; isn't the same thing as UCS-2 or UTF-16; UTF-8, UTF-16, and UCS-4 are all encodings of Unicode, and UCS-2 is an encoding of a subset of Unicode).

That should work now for counted strings, although it's currently not doing very hard work, in that

    1) it doesn't do anything about invalid UTF-8 sequences;

    2) it doesn't do anything about UTF-16 surrogate pairs;

    3) it doesn't do anything about surrogates appearing in UCS-2 strings.

It doesn't currently work for null-terminated strings; tvb_get_stringz_enc() needs to be enhanced to handle that.</pre>
    </div>

    <div id="c33" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c33">Comment 33</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Guy Harris</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-02 19:52:39 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c18">comment #18</a>)
<span class="quote">&gt; Created <span class=""><a href="attachment.cgi?id=10149" name="attach_10149" title="Remove format_text">attachment 10149</a> <a href="attachment.cgi?id=10149&amp;action=edit" title="Remove format_text">[details]</a></span>
&gt; Remove format_text
&gt; 
&gt; Why is the format_text even necessary?  Can we just provide the string
&gt; returned from tvb_get_ephemeral_unicode_string() directly?  We already know
&gt; the value is going to be bogus/garbage because length &gt; packet length. 
&gt; expert_info may be overkill.</span >

format_text()'s job is to convert character strings using 8-bit-octet encodings (such as UTF-8) into something &quot;printable&quot;. Currently, it just cheats and shows all octets with the 8th bit set, and non-printable ASCII, as C-style escape sequences, but it should do something better (where there may be more than one flavor of &quot;something better&quot; as per my comment - C string, or use REPLACEMENT CHARACTER etc.).</pre>
    </div>

    <div id="c34" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c34">Comment 34</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Guy Harris</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-02 20:15:11 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c31">comment #31</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=8382#c30">comment #30</a>)
&gt; I suspect for now the current method is satisfactory, being that whatever
&gt; the UI toolkit does is what we get unless the dissector manually calls
&gt; format_str.</span >

What GTK+ does, and what I think Qt does, is assume strings are UTF-8.  That works fine for UTF-8 strings displayed on-screen in Wireshark; it doesn't work so well for, for example, strings in some other flavor of extended ASCII (ISO 8859/n, various double-byte EUCs, various DOS/Windows code pages, various pre-OS X Mac encodings, etc.), and doesn't necessarily work so well when writing to a text file or to the terminal (on UN*Xes, it works fine if the user has UTF-8 as their character encoding, but would require a little iconv assistance if it's not; on Windows, we'd probably want *some* Unicode encoding, but would it be UTF-8, for which Windows *does* have a code page, or UTF-16?).

<span class="quote">&gt; I agree we'll want a flag for string fields at some point,
&gt; though I'm not sure if it should be on the hf field or in the encoding arg
&gt; of the tree_add call.</span >

The encoding arg says what character encoding is used for the string in the packet.

The formatting arg says how it should be presented, and the same string might be presented in different ways in different contexts:

    for XML, we'd probably want to encode all non-printable characters as entities, except that the 1.1 spec says in section 4.1 &quot;Character and Entity References&quot;:

        <a href="http://www.w3.org/TR/xml11/#sec-references">http://www.w3.org/TR/xml11/#sec-references</a>

    that &quot;Characters referred to using character references must match the production for Char.&quot;, and the production for Char is

        Char ::= [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]

    which excludes NUL, the surrogate blocks, U+FFFE, and U+FFFF, so I'm not sure how you say, in XML, &quot;this string has the value &quot;hi\0mom\xFFFE&quot;&quot;;

    for JSON, we can encode anything (RFC 4627 says &quot;All Unicode characters may be placed within the quotation marks except for the characters that must be escaped: quotation mark, reverse solidus, and the control characters (U+0000 through U+001F)&quot;, which sure sounds as if a JSON string can have an embedded NUL);

    for humans, we'd sometimes want something C-string like (e.g., when showing stuff encoded as text, such as HTML requests and responses) and sometimes want something using REPLACEMENT CHARACTER etc. (e.g., when showing strings encoded in binary representations, such as what you see in XDR, SMB messages, etc.).

For the latter, that *might* be something we could make a property of the field.</pre>
    </div>

    <div id="c35" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c35">Comment 35</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-03-03 06:42:44 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=8382#c34">comment #34</a>)
<span class="quote">&gt; &gt; I agree we'll want a flag for string fields at some point,
&gt; &gt; though I'm not sure if it should be on the hf field or in the encoding arg
&gt; &gt; of the tree_add call.
&gt; 
&gt; The encoding arg says what character encoding is used for the string in the
&gt; packet.
&gt; 
&gt; The formatting arg says how it should be presented, and the same string
&gt; might be presented in different ways in different contexts:</span >

OK, makes sense.

<span class="quote">&gt;     for XML, we'd probably want to encode all non-printable characters as
&gt; entities, except that the 1.1 spec says in section 4.1 &quot;Character and Entity
&gt; References&quot;:
&gt; 
&gt;         <a href="http://www.w3.org/TR/xml11/#sec-references">http://www.w3.org/TR/xml11/#sec-references</a>
&gt; 
&gt;     that &quot;Characters referred to using character references must match the
&gt; production for Char.&quot;, and the production for Char is
&gt; 
&gt;         Char ::= [#x1-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]
&gt; 
&gt;     which excludes NUL, the surrogate blocks, U+FFFE, and U+FFFF, so I'm not
&gt; sure how you say, in XML, &quot;this string has the value &quot;hi\0mom\xFFFE&quot;&quot;;</span >

Interesting, I'd never dug that deep into XML. If that's the production for char, perhaps those characters aren't permitted in XML strings? So XML strings can't have embedded nulls in any form, escaped or not? If this is the case then I'm not sure what the appropriate thing to do is. Strip them? Invent our own escape format?

<span class="quote">&gt;     for JSON, we can encode anything (RFC 4627 says &quot;All Unicode characters
&gt; may be placed within the quotation marks except for the characters that must
&gt; be escaped: quotation mark, reverse solidus, and the control characters
&gt; (U+0000 through U+001F)&quot;, which sure sounds as if a JSON string can have an
&gt; embedded NUL);</span >

Unicode null is U+0000, so it's included in the control characters set as needing to be escaped, but it does sound permitted as long as you escape it.</pre>
    </div>

    <div id="c36" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=8382#c36">Comment 36</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laurent Butti</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2013-08-02 08:19:03 UTC
        </span>

      </div>




<pre class="bz_comment_text">Tested against 1.10.1, no more crash.</pre>
    </div>


  

</td>
<td>
</td>
</tr></table>
  </div>
        

</form>

<hr>
<ul class="related_actions">
    <li><a href="show_bug.cgi?format=multiple&amp;id=8382">Format For Printing</a></li>
    <li>&nbsp;-&nbsp;<a href="show_bug.cgi?ctype=xml&amp;id=8382">XML</a></li>
    <li>&nbsp;-&nbsp;<a href="enter_bug.cgi?cloned_bug_id=8382">Clone This Bug</a></li>
    
    <li>&nbsp;-&nbsp;<a href="#">Top of page </a></li>
    </ul>

<br>
</div>

    <div id="footer">
      <div class="intro"></div>
<ul id="useful-links">
  <li id="links-actions"><ul class="links">
  <li><a href="https://www.wireshark.org/">Wireshark Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_bottom" name="no_redirect" value="0">
    <script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_bottom" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_bottom"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/5.0/using/understanding.html" target="_blank">Help</a>
      </li>
    

    <li id="mini_login_container_bottom">
  <span class="separator">| </span>
  <a id="login_link_bottom" href="show_bug.cgi?id=8382&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_bottom')">Log In</a>

  <form action="show_bug.cgi?id=8382" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_bottom">
    <input id="Bugzilla_login_bottom" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_bottom" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_bottom">
    <a href="#" onclick="return hide_mini_login_form('_bottom')">[x]</a>
  </form>
</li>


  <li id="forgot_container_bottom">
    <span class="separator">| </span>
    <a id="forgot_link_bottom" href="show_bug.cgi?id=8382&amp;GoAheadAndLogIn=1#forgot"
       onclick="return show_forgot_form('_bottom')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_bottom"
          class="mini_forgot bz_default_hidden">
      <label for="login_bottom">Login:</label>
      <input name="loginname" size="20" id="login_bottom" required
          type="email" placeholder="Your Email Address">
      <input id="forgot_button_bottom" value="Reset Password" type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_bottom" name="token"
             value="1635621897-9E9cH-5qB0T5FlBKpP4gSSViPuh01DqtjaOT39MnlFU">
      <a href="#" onclick="return hide_forgot_form('_bottom')">[x]</a>
    </form>
  </li>
</ul>
  </li>

  




  
</ul>

      <div class="outro"></div>
    </div>

  </body>
</html>