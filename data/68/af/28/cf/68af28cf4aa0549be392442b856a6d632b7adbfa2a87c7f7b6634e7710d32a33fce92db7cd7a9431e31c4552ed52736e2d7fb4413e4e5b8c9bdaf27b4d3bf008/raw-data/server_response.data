<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    
        <link rel='alternate' type='application/rss+xml' title='Performance problem Bug #73807 - RDF' href='rss/bug.php?id=73807'>
        <link rel='alternate' type='application/rss+xml' title='Performance problem Bug #73807 - RSS 2.0' href='rss/bug.php?id=73807&format=rss2'>
        <base href="https://bugs.php.net/">
    <title>PHP :: Sec Bug #73807 :: Performance problem with processing post request over 2000000 chars</title>
    <link rel="shortcut icon" href="https://bugs.php.net/images/favicon.ico">
    <link rel="stylesheet" href="https://bugs.php.net/css/style.css">
</head>

<body>

<table id="top" class="head" cellspacing="0" cellpadding="0">
    <tr>
        <td class="head-logo">
            <a href="/"><img src="images/logo.png" alt="Bugs" vspace="2" hspace="2"></a>
        </td>

        <td class="head-menu">
            <a href="https://php.net/">php.net</a>&nbsp;|&nbsp;
            <a href="https://php.net/support.php">support</a>&nbsp;|&nbsp;
            <a href="https://php.net/docs.php">documentation</a>&nbsp;|&nbsp;
            <a href="report.php">report a bug</a>&nbsp;|&nbsp;
            <a href="search.php">advanced search</a>&nbsp;|&nbsp;
            <a href="search-howto.php">search howto</a>&nbsp;|&nbsp;
            <a href="stats.php">statistics</a>&nbsp;|&nbsp;
            <a href="random">random bug</a>&nbsp;|&nbsp;
            <a href="login.php">login</a>
        </td>
    </tr>

    <tr>
        <td class="head-search" colspan="2">
            <form method="get" action="search.php">
                <p class="head-search">
                    <input type="hidden" name="cmd" value="display">
                    <small>go to bug id or search bugs for</small>
                    <input class="small" type="text" name="search_for" value="" size="30">
                    <input type="image" src="images/small_submit_white.gif" alt="search" style="vertical-align: middle;">
                </p>
            </form>
        </td>
    </tr>
</table>

<table class="middle" cellspacing="0" cellpadding="0">
    <tr>
        <td class="content">
<div id="bugheader">
    <table id="details">
        <tr id="title">
            <th class="details" id="number"><a href="bug.php?id=73807">Sec Bug</a>&nbsp;#73807</th>
            <td id="summary" colspan="5">Performance problem with processing post request over 2000000 chars</td>
        </tr>
        <tr id="submission">
            <th class="details">Submitted:</th>
            <td style="white-space: nowrap;">2016-12-23 12:52 UTC</td>
            <th class="details">Modified:</th>
            <td style="white-space: nowrap;">2018-01-15 12:19 UTC</td>
            <td rowspan="6">

                <table id="votes">
                    <tr><th class="details">Votes:</th><td>6</td></tr>
                    <tr><th class="details">Avg. Score:</th><td>3.7 &plusmn; 1.4</td></tr>
                    <tr><th class="details">Reproduced:</th><td>5 of 5 (100.0%)</td></tr>
                    <tr><th class="details">Same Version:</th><td>5 (100.0%)</td></tr>
                    <tr><th class="details">Same OS:</th><td>5 (100.0%)</td></tr>
                </table>

            </td>
        </tr>

        <tr id="submitter">
            <th class="details">From:</th>
            <td>pparadowski &#x61;&#116; media4u &#x64;&#111;&#x74; pl</td>
            <th class="details">Assigned:</th>
            <td><a href="search.php?cmd=display&amp;assign=stas">stas</a> (<a href="https://people.php.net/stas">profile</a>)</td>
        </tr>

        <tr id="categorization">
            <th class="details">Status:</th>
            <td>Closed</td>
            <th class="details">Package:</th>
            <td><a href="search.php?cmd=display&amp;package_name[]=Performance+problem">Performance problem</a></td>
        </tr>

        <tr id="situation">
            <th class="details">PHP Version:</th>
            <td>5.6.29, 7.0,7.1</td>
            <th class="details">OS:</th>
            <td>FreeBSD 9.4-11.0</td>
        </tr>

        <tr id="private">
            <th class="details">Private report:</th>
            <td>No</td>
            <th class="details">CVE-ID:</th>
            <td><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11142" target="_blank">2017-11142</a></td>
        </tr>
    </table>
</div>

<div class="controls">
<span id='control_0' class='control active'>View</span>
<span id='control_3' class='control'><a href='bug.php?id=73807&amp;edit=3'>Add Comment</a></span>
<span id='control_1' class='control'><a href='bug.php?id=73807&amp;edit=1'>Developer</a></span>
<span id='control_2' class='control'><a href='bug.php?id=73807&amp;edit=2'>Edit</a></span>
</div>
<div class="clear"></div>



<div class='comment type_comment' ><a name="1482497570">&nbsp;</a><strong>[2016-12-23 12:52 UTC] pparadowski &#x61;&#116; media4u &#x64;&#111;&#x74; pl</strong>
<pre class='note'>Description:
------------
	 	 	
Since php 5.6.x an issue with data sending using POST method is noticeable only on FreeBSD servers. When we try to send long text post with over 2000000 characters to FreeBSD server we got a long running request

With the number of characters the processing time substantially increases as can be seen below in the tests that we carried out:

with 2000000 characters the time is as follows:
FreeBSD - 2,5s
Ubuntu/Linux - 64ms

with 10000000 characters the time is as follows:
FreeBSD - 50,71s
Ubuntu/Linux - 100ms

Please note that we used Apache 2.4 and PHP with the same configurations on the servers.

The problem was not present in the previous PHP 5.4 on FreeBSD.


Configure Command

	'./configure' '--with-layout=GNU' '--localstatedir=/var' '--with-config-file-scan-dir=/usr/local/etc/php' '--disable-all' '--enable-libxml' '--enable-mysqlnd' '--with-libxml-dir=/usr/local' '--with-pcre-regex=/usr/local' '--with-zlib-dir=/usr' '--program-prefix=' '--disable-cli' '--disable-cgi' '--with-apxs2=/usr/local/sbin/apxs' '--with-regex=php' '--with-zend-vm=CALL' '--disable-ipv6' '--prefix=/usr/local' '--mandir=/usr/local/man' '--infodir=/usr/local/info/' '--build=amd64-portbld-freebsd9.3' 'build_alias=amd64-portbld-freebsd9.3' 'CC=cc' 'CFLAGS=-O2 '-pipe' '-fstack-protector' '-fno-strict-aliasing'' 'LDFLAGS= '-fstack-protector'' 'LIBS=-lpthread' 'CPPFLAGS=' 'CPP=cpp' 'CXX=c++' 'CXXFLAGS=-O2 '-pipe' '-fstack-protector' '-fno-strict-aliasing''

Loaded Modules
core mod_so http_core mod_authn_file mod_authn_dbm mod_authn_anon mod_authn_core mod_authz_host mod_authz_groupfile mod_authz_user mod_authz_dbm mod_authz_owner mod_authz_core mod_access_compat mod_auth_basic mod_auth_digest mod_file_cache mod_cache mod_cache_disk mod_reqtimeout mod_include mod_filter mod_charset_lite mod_deflate mod_proxy_html mod_mime mod_log_config mod_logio mod_env mod_mime_magic mod_cern_meta mod_expires mod_headers mod_usertrack mod_unique_id mod_setenvif mod_version mod_proxy mod_proxy_http mod_ssl prefork mod_unixd mod_status mod_autoindex mod_asis mod_info mod_cgi mod_vhost_alias mod_negotiation mod_dir mod_imagemap mod_actions mod_speling mod_userdir mod_alias mod_rewrite mod_php5

PHP.ini changes:
post_max_size	256M	256M



Test script:
---------------
&lt;?php
if (!empty($_POST)) {
	if (isset($_POST['data'])) {
		echo &quot;OK!&quot;;
		die();
	} else {
		echo &quot;NOPE!&quot;;
		die();
	}
}
$imagedata = file_get_contents(&quot;1.csv&quot;);
$base64 = base64_encode($imagedata);
?&gt;

&lt;form method=&quot;post&quot;&gt;
	&lt;input type=&quot;hidden&quot; name=&quot;data&quot; value=&quot;&lt;?php echo substr($base64, 0, 10000000); ?&gt;&quot;&gt;
	&lt;button&gt;SEND&lt;/button&gt;
&lt;/form&gt;


</pre>
</div><h2>Patches</h2>
<p><a href='patch-add.php?bug_id=73807'>Add a Patch</a></p><h2>Pull Requests</h2>
<div>
Pull requests:<br>
<ul>
  <li><a href="https://github.com/php/systems/pull/1">Remove inactive languages from rsync (bug #67629)</a>
      (systems/1)</li>
</ul>
</div>
<p><a href='gh-pull-add.php?bug_id=73807'>Add a Pull Request</a></p><h2 style="border-bottom:2px solid #666;margin-bottom:0;padding:5px 0;">History</h2><div id='comment_filter' class='controls comments'><span id='type_all' class='control active' onclick='do_comment(this);'>All</span><span id='type_comment' class='control ' onclick='do_comment(this);'>Comments</span><span id='type_log' class='control ' onclick='do_comment(this);'>Changes</span><span id='type_svn' class='control ' onclick='do_comment(this);'>Git/SVN commits</span><span id='type_related' class='control ' onclick='do_comment(this);'>Related reports</span>            </div>
            <div id='comments_view' style='clear:both;'>
<div class='comment type_log' ><a name="1484910215">&nbsp;</a><strong>[2017-01-20 11:03 UTC] pparadowski &#x61;&#116; media4u &#x64;&#111;&#x74; pl</strong>
<div class='log_note'><div class="changeset">
<span class="removed">-PHP Version: 5.6.29</span>
<span class="added">+PHP Version: 5.6.29, 7.0</span>
</div></div></div><div class='comment type_comment' ><a name="1484910215">&nbsp;</a><strong>[2017-01-20 11:03 UTC] pparadowski &#x61;&#116; media4u &#x64;&#111;&#x74; pl</strong>
<pre class='note'>same on PHP 7.0
</pre>
</div><div class='comment type_comment' ><a name="1485380531">&nbsp;</a><strong>[2017-01-25 21:42 UTC] t &#x64;&#111;&#x74; knaur &#x61;&#116; media4u &#x64;&#111;&#x74; pl</strong>
<pre class='note'>Also, this issue causes high cpu usage so in specific situation may result in denial of service.

Anyone could help us?
</pre>
</div><div class='comment type_log' ><a name="1485773939">&nbsp;</a><strong>[2017-01-30 10:58 UTC] pparadowski &#x61;&#116; media4u &#x64;&#111;&#x74; pl</strong>
<div class='log_note'><div class="changeset">
<span class="removed">-PHP Version: 5.6.29, 7.0</span>
<span class="added">+PHP Version: 5.6.29, 7.0,7.1</span>
</div></div></div><div class='comment type_comment' ><a name="1485773939">&nbsp;</a><strong>[2017-01-30 10:58 UTC] pparadowski &#x61;&#116; media4u &#x64;&#111;&#x74; pl</strong>
<pre class='note'>same problem on php 7.1.
</pre>
</div><div class='comment type_log' ><a name="1485800444">&nbsp;</a><strong>[2017-01-30 18:20 UTC] <a href="//people.php.net/rasmus">rasmus@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Status: Open</span>
<span class="added">+Status: Analyzed</span>
</div></div></div><div class='comment type_comment' ><a name="1485800444">&nbsp;</a><strong>[2017-01-30 18:20 UTC] <a href="//people.php.net/rasmus">rasmus@php.net</a></strong>
<pre class='note'>This sounds like an interesting bug. Since it happens on FreeBSD and not on Linux it might be related to FreeBSD's accf_http &quot;httpready&quot; feature which buffers incoming HTTP requests before triggering the accept. Could you have a look at your /boot/loader.conf file and try disabling accf_http_load if it is enabled there and see if that makes a difference? Note that it triggers a kernel module to be loaded, so you will need to reboot, or manually &quot;kldunload accf_http&quot;
</pre>
</div><div class='comment type_comment' ><a name="1485845598">&nbsp;</a><strong>[2017-01-31 06:53 UTC] pparadowski &#x61;&#116; media4u &#x64;&#111;&#x74; pl</strong>
<pre class='note'>my /boot/loader.conf is empty. In defaults loader.conf I've got

accf_data_load=&quot;NO&quot;
accf_nds_load=&quot;NO&quot;
accf_http_load=&quot;NO&quot;
</pre>
</div><div class='comment type_comment' ><a name="1485846022">&nbsp;</a><strong>[2017-01-31 07:00 UTC] pparadowski &#x61;&#116; media4u &#x64;&#111;&#x74; pl</strong>
<pre class='note'>While testing accf_http module is disabled
</pre>
</div><div class='comment type_comment' ><a name="1485846729">&nbsp;</a><strong>[2017-01-31 07:12 UTC] <a href="//people.php.net/rasmus">rasmus@php.net</a></strong>
<pre class='note'>Ok, so it isn't accf_http doing it. It still feels like something along those lines. Like a socket buffer being too small and the resulting context switching causing it to slow down. Perhaps try playing around with pmcstat or dtrace and see if you can get a picture of what one of these slow requests is doing compared to a smaller fast one.
</pre>
</div><div class='comment type_comment' ><a name="1485859381">&nbsp;</a><strong>[2017-01-31 10:43 UTC] <a href="//people.php.net/nikic">nikic@php.net</a></strong>
<pre class='note'>Another cause might be FreeBSD's *extremely* slow realloc() implementation. I remember this causing performance issues in other places.
</pre>
</div><div class='comment type_comment' ><a name="1486036237">&nbsp;</a><strong>[2017-02-02 11:50 UTC] pstef &#x61;&#116; freebsd &#x64;&#111;&#x74; org</strong>
<pre class='note'>This has nothing to do with realloc(). php_std_post_handler() spends 92% in memchr() and 7% in memmove().
</pre>
</div><div class='comment type_comment' ><a name="1486042173">&nbsp;</a><strong>[2017-02-02 13:29 UTC] <a href="//people.php.net/nikic">nikic@php.net</a></strong>
<pre class='note'>@pstef: Thanks! That was just a wild guess, based on usage of smart_str API, which was previously reported to be slow on FreeBSD due to slow realloc(). (Thinking again that can't be, as it's used with non-persistent strings and as such uses our own allocator anyway.)

I just took a look at the php_std_post_handler() code: <a href="https://github.com/php/php-src/blob/7cba31535cbf24c0b8a24ae094afd9ed670435b0/main/php_variables.c#L339" rel="nofollow">https://github.com/php/php-src/blob/7cba31535cbf24c0b8a24ae094afd9ed670435b0/main/php_variables.c#L339</a>

I think the problem is that, in the case where POST form-urlencoded key-value pairs are significantly larger than the stream buffer size, the current implementation will keep appending to the buffer and rescan it in its entirety every time. This results in quadratic time complexity. (It does not rescan parts where it already detected a complete key-value pair, only if there's an unfinished one.)

This is probably caused by this commit: <a href="https://github.com/php/php-src/commit/2438490addfbfba51e12246a74588b2382caa08a#diff-28ccb3aa37e01a68f5510ad6de4ab738L231" rel="nofollow">https://github.com/php/php-src/commit/2438490addfbfba51e12246a74588b2382caa08a#diff-28ccb3aa37e01a68f5510ad6de4ab738L231</a> Looks like this changed the code from buffering everything upfront to using a stream. As such, this issue could not occur previously.

What leaves me stumped here is why this issue would only occur on FreeBSD, rather than on all platforms.
</pre>
</div><div class='comment type_comment' ><a name="1486046357">&nbsp;</a><strong>[2017-02-02 14:39 UTC] <a href="//people.php.net/nikic">nikic@php.net</a></strong>
<pre class='note'>Just tried this on Ubuntu. I measured using a stop-watch (REQUEST_TIME_FLOAT does not seem to give a useful value in cli-server), so rough numbers are:

8M: ~0s
16M: ~2s
32M: ~7s
64M: ~25s

Clearly the increase isn't linear, so this isn't just a FreeBSD problem. It might be that FreeBSD suffers more because it uses a smaller BUFSIZ.
</pre>
</div><div class='comment type_log' ><a name="1486046520">&nbsp;</a><strong>[2017-02-02 14:42 UTC] <a href="//people.php.net/nikic">nikic@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Status:      Analyzed</span>
<span class="added">+Status:      Assigned</span>
<span class="removed">-Assigned To:</span>
<span class="added">+Assigned To: nikic</span>
</div></div></div><div class='comment type_log' ><a name="1486048272">&nbsp;</a><strong>[2017-02-02 15:11 UTC] <a href="//people.php.net/nikic">nikic@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Type:           Bug</span>
<span class="added">+Type:           Security</span>
<span class="removed">-Private report: No</span>
<span class="added">+Private report: Yes</span>
</div></div></div><div class='comment type_comment' ><a name="1486048272">&nbsp;</a><strong>[2017-02-02 15:11 UTC] <a href="//people.php.net/nikic">nikic@php.net</a></strong>
<pre class='note'>PR up at <a href="https://github.com/php/php-src/pull/2362" rel="nofollow">https://github.com/php/php-src/pull/2362</a>.

This time with more accurate measurements (end-to-end, request from PHP)...

Before:
 8M:  0.2s
16M:  1.0s
32M:  4.5s
64M: 18.4s

After:
 8M: 0.04s
16M: 0.06s
32M: 0.12s
64M: 0.24s

Due to DOS potential on servers with high post_max_size, marking as security issue.
</pre>
</div><div class='comment type_comment' ><a name="1486105842">&nbsp;</a><strong>[2017-02-03 07:10 UTC] pparadowski &#x61;&#116; media4u &#x64;&#111;&#x74; pl</strong>
<pre class='note'>Thank You very much. Could You tell me if this fix will be on php 5.6 too?
</pre>
</div><div class='comment type_log' ><a name="1486392830">&nbsp;</a><strong>[2017-02-06 14:53 UTC] <a href="//people.php.net/nikic">nikic@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Assigned To: nikic</span>
<span class="added">+Assigned To: stas</span>
</div></div></div><div class='comment type_comment' ><a name="1486392831">&nbsp;</a><strong>[2017-02-06 14:53 UTC] <a href="//people.php.net/nikic">nikic@php.net</a></strong>
<pre class='note'>As this bug is a potential DOS vector, I believe PHP 5.6 should be fixed as well. Assigning to @stas for confirmation. (The patch should be exactly the same as for PHP 7.)
</pre>
</div><div class='comment type_log' ><a name="1486621158">&nbsp;</a><strong>[2017-02-09 06:19 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Assigned To: stas</span>
<span class="added">+Assigned To: nikic</span>
</div></div></div><div class='comment type_comment' ><a name="1486621159">&nbsp;</a><strong>[2017-02-09 06:19 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Sure, let's merge it into 5.6 too. Not sure why it's private - the fix is public and merged.
</pre>
</div><div class='comment type_comment' ><a name="1486648319">&nbsp;</a><strong>[2017-02-09 13:51 UTC] pparadowski &#x61;&#116; media4u &#x64;&#111;&#x74; pl</strong>
<pre class='note'>We had network and system administrators ran series of tests with the patch (<a href="https://github.com/php/php-src/pull/2362" rel="nofollow">https://github.com/php/php-src/pull/2362</a>) using php, php7.0, 7.1 i 5.6  specifically under FreeBSD system. 
Alas, those tests did not yield positive results and the processing time for the POST method was still very long.Then it is quite right to assume that the  problem could lie elsewhere.
</pre>
</div><div class='comment type_comment' ><a name="1486652828">&nbsp;</a><strong>[2017-02-09 15:07 UTC] <a href="//people.php.net/nikic">nikic@php.net</a></strong>
<pre class='note'>Thanks for testing. Would it be possible for you to provide a profile of where most of the time is spent? On Linux this is done using perf record + perf report, I'm not familiar with that the equivalent tool in FreeBSD would be. @pstef indicated that 90% of the time is spent in memchr(), which is the issue that the patch is supposed to solve, but maybe there is another problem here.
</pre>
</div><div class='comment type_comment' ><a name="1487767217">&nbsp;</a><strong>[2017-02-22 12:40 UTC] pstef &#x61;&#116; freebsd &#x64;&#111;&#x74; org</strong>
<pre class='note'>The change definitely helped. I tested PHP 5.4, 5.6, 7.0 (git 570a), and 7.0 (git a15b) installed from source. For a ~5 MB file it took php in server mode this much time (in seconds) to respond:
5.4: 0.4
5.6: 10.9
570a: 10.9
a15b: 1.9.

1.9 seconds is still roughly 4 times more than what it was in 5.4. I saw that most of the php's CPU time was spent in memmove(), so I followed the suggestion that it might have something to do with BUFSIZ. Under FreeBSD BUFSIZ is still 1 KB, while the Linux distribution I use (and probably every other Linux distro) has it at 8 KB. When I changed SAPI_POST_HANDLER_BUFSIZ to 8*1024, the time went further down to ~0.3 seconds.

BUFSIZ shouldn't be used here. It's the size of stdio.h buffers, for use with functions like setbuf(). php_variables.c as of PHP 5.4 didn't depend on either, later it was changed to use BUFSIZ but not setbuf().
</pre>
</div><div class='comment type_comment' ><a name="1488022987">&nbsp;</a><strong>[2017-02-25 11:43 UTC] <a href="//people.php.net/nikic">nikic@php.net</a></strong>
<pre class='note'>I just played around with different buffer sizes on Ubuntu. For a 64M payload buffer sizes of 16 and 16K execute in 0.40s and 0.25s respectively. So the buffer size is not the underlying issue, it just exacerbates quadratic behavior.

Going by your observation that a lot of time is now spent in memmove(), the culprit is probably this memmove(): <a href="https://github.com/php/php-src/blob/7cba31535cbf24c0b8a24ae094afd9ed670435b0/main/php_variables.c#L329" rel="nofollow">https://github.com/php/php-src/blob/7cba31535cbf24c0b8a24ae094afd9ed670435b0/main/php_variables.c#L329</a> In the case of a long POST variable, this will perform a memmove() with src==dst.

Looking at the FreeBSD implementation of bcopy(), the variant short-circuits if src==dst: <a href="https://svnweb.freebsd.org/base/head/lib/libc/string/bcopy.c?view=markup#l76" rel="nofollow">https://svnweb.freebsd.org/base/head/lib/libc/string/bcopy.c?view=markup#l76</a> However, the AMD64 implementation does not: <a href="https://svnweb.freebsd.org/base/head/lib/libc/amd64/string/bcopy.S?view=markup" rel="nofollow">https://svnweb.freebsd.org/base/head/lib/libc/amd64/string/bcopy.S?view=markup</a>

As such, we end up doing a quadratic memmove() here. We can avoid this by explicitly checking for src==dst on our side.
</pre>
</div><div class='comment type_comment' ><a name="1488024160">&nbsp;</a><strong>[2017-02-25 12:02 UTC] <a href="//people.php.net/nikic">nikic@php.net</a></strong>
<pre class='note'>Just added the additional check in <a href="https://github.com/php/php-src/commit/bbfa1b64192fe3ccd2898e6e1f997387b4f210d1" rel="nofollow">https://github.com/php/php-src/commit/bbfa1b64192fe3ccd2898e6e1f997387b4f210d1</a>. Hopefully this will fix the issue on FreeBSD completely.
</pre>
</div><div class='comment type_comment' ><a name="1488545347">&nbsp;</a><strong>[2017-03-03 12:49 UTC] pparadowski &#x61;&#116; media4u &#x64;&#111;&#x74; pl</strong>
<pre class='note'>@nikic after applying your amendments to php 5.6 the problem appears to be solved and with no BUFSIZ altered. Thank you very much for the involvement in solving this issue. Are you able to share the information on when the official release with this fix of php 5.6 and 7 is scheduled?
</pre>
</div><div class='comment type_comment' ><a name="1489091179">&nbsp;</a><strong>[2017-03-09 20:26 UTC] <a href="//people.php.net/nikic">nikic@php.net</a></strong>
<pre class='note'>@stas: Can you please apply <a href="https://gist.github.com/nikic/da218d8fbbefceda946850395bfe5f16" rel="nofollow">https://gist.github.com/nikic/da218d8fbbefceda946850395bfe5f16</a> to PHP-5.6? I don't have commit access to that branch.
</pre>
</div><div class='comment type_comment' ><a name="1489579532">&nbsp;</a><strong>[2017-03-15 12:05 UTC] killing &#x61;&#116; multiplay &#x64;&#111;&#x74; co &#x64;&#111;&#x74; uk</strong>
<pre class='note'>Confirmed fixed for us by applying to 5.6:
<a href="https://gist.github.com/nikic/da218d8fbbefceda946850395bfe5f16" rel="nofollow">https://gist.github.com/nikic/da218d8fbbefceda946850395bfe5f16</a>

It would be good to see this merged into 5.6 as its causes quite serious a problem, in our case a 30M POST data without the patch php_std_post_handler takes 6 mins 52 seconds and with the patch it takes just 316 ms

During this time the CPU is 100% and as its before any script its definitely an easy DOS vector.

Dtrace script for testing:
pid$target:php-fpm:php_std_post_handler:entry
{
        self-&gt;ts = timestamp
}

pid$target:php-fpm:php_std_post_handler:return
/self-&gt;ts != 0/
{
        printf(&quot;php_std_post_handler() %d ms\n&quot;, (timestamp - self-&gt;ts) / 1000000);
}
</pre>
</div><div class='comment type_log' ><a name="1489591386">&nbsp;</a><strong>[2017-03-15 15:23 UTC] <a href="//people.php.net/rasmus">rasmus@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Assigned To: nikic</span>
<span class="added">+Assigned To: stas</span>
</div></div></div><div class='comment type_comment' ><a name="1494571903">&nbsp;</a><strong>[2017-05-12 06:51 UTC] pparadowski &#x61;&#116; media4u &#x64;&#111;&#x74; pl</strong>
<pre class='note'>Hi.
There is still no added patch to php5.6. Is there any chance to add this patch in the near future?
</pre>
</div><div class='comment type_svn' ><a name="1497943445">&nbsp;</a><strong>[2017-06-20 07:24 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of nikita.ppv@gmail.com
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=0f8cf3b8497dc45c010c44ed9e96518e11e19fc3" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=0f8cf3b8497dc45c010c44ed9e96518e11e19fc3</a>
Log: Fix <a href='bug.php?id=73807'>bug #73807</a>
</pre>
</div><div class='comment type_log' ><a name="1497943446">&nbsp;</a><strong>[2017-06-20 07:24 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Status: Assigned</span>
<span class="added">+Status: Closed</span>
</div></div></div><div class='comment type_log' ><a name="1497943657">&nbsp;</a><strong>[2017-06-20 07:27 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-CVE-ID:</span>
<span class="added">+CVE-ID: needed</span>
</div></div></div><div class='comment type_svn' ><a name="1499228623">&nbsp;</a><strong>[2017-07-05 04:23 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Automatic comment on behalf of nikita.ppv@gmail.com
Revision: <a href="http://git.php.net/?p=php-src.git;a=commit;h=0f8cf3b8497dc45c010c44ed9e96518e11e19fc3" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=0f8cf3b8497dc45c010c44ed9e96518e11e19fc3</a>
Log: Fix <a href='bug.php?id=73807'>bug #73807</a>
</pre>
</div><div class='comment type_log' ><a name="1516018740">&nbsp;</a><strong>[2018-01-15 12:19 UTC] <a href="//people.php.net/kaplan">kaplan@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-CVE-ID: needed</span>
<span class="added">+CVE-ID: 2017-11142</span>
</div></div></div></div>
        </td>
    </tr>
</table>

<script src='js/util.js'></script>
<script src='https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js'></script>
<script src="js/jquery.cookie.js"></script>
<script>
function do_comment(nd)
{
    $('#comment_filter > .control.active').removeClass("active");
    $(nd).addClass("active");

    $.cookie('history_tab', nd.id, { expires: 365 });

    if (nd.id == 'type_all') {
        $('#comments_view > .comment:hidden').show('slow');
    } else {
        $('#comments_view > .comment').each(function(i) {
            if ($(this).hasClass(nd.id)) {
                $(this).show('slow');
            } else {
                $(this).hide('slow');
            }
        });
    }
    return false;
}
</script>
<table class="foot" cellspacing="0" cellpadding="0">
    <tr>
        <td class="foot-bar" colspan="2">&nbsp;</td>
    </tr>

    <tr>
        <td class="foot-copy">
            <small>
                <a href="https://php.net/"><img src="images/logo-small.gif" align="left" valign="middle" hspace="3" alt="PHP"></a>
                <a href="https://php.net/copyright.php">Copyright &copy; 2001-2021 The PHP Group</a><br>
                All rights reserved.
            </small>
        </td>
        <td class="foot-source">
            <small>Last updated: Sat Oct 30 19:03:34 2021 UTC</small>
        </td>
    </tr>
</table>
</body>
</html>
