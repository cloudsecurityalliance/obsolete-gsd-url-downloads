<!DOCTYPE html>
<html lang="en">
  <head>
    <title>107301 &ndash; system hang during ext4 xattr operation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<link href="data/assets/51af664f3910b417cf7544987d29336d.css" rel="stylesheet" type="text/css">



      

    
<script type="text/javascript" src="data/assets/aae018547291cb399f8ae4d70aa29abc.js"></script>

    <script type="text/javascript">
    <!--
          YAHOO.namespace('bugzilla');
          YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
              if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
              var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
              return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
          };
          if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
              YAHOO.util.Event._simpleRemove(window, "unload",
                                             YAHOO.util.Event._unload);
          }

        
        function unhide_language_selector() {
            $('#lang_links_container').removeClass('bz_default_hidden');
        } 
        $(document).ready(unhide_language_selector);

        // This sets the default parameters for all calendar fields.
        $.datepicker.setDefaults({
            dateFormat: "yy-mm-dd", // this is the YYYY-MM-DD format
            showButtonPanel: true,  // permits to easily select "Today"
            // These 3 parameters are useful for localization.
            firstDay: 0,            // 0 = Sunday, 1 = Monday, etc...
            dayNamesMin: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ],
            monthNames: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ]
        });

        
        var BUGZILLA = {
            param: {
                maxusermatches: 1000
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    "You must enter a Description for this attachment.",
                component_required:
                    "You must select a Component for this bug.",
                description_required:
                    "You must enter a Description for this bug.",
                short_desc_required:
                    "You must enter a Summary for this bug.",
                version_required:
                    "You must select a Version for this bug."
            }
              , api_token: ''
        };


    if (history && history.replaceState) {
      if(!document.location.href.match(/show_bug\.cgi/)) {
        history.replaceState( null,
                             "107301 – system hang during ext4 xattr operation",
                             "show_bug.cgi?id=107301" );
        document.title = "107301 – system hang during ext4 xattr operation";
      }
      if (document.location.href.match(/show_bug\.cgi\?.*list_id=/)) {
        var href = document.location.href;
        href = href.replace(/[\?&]+list_id=(\d+|cookie)/, '');
        history.replaceState(null, "107301 – system hang during ext4 xattr operation", href);
      }
    }
    YAHOO.util.Event.onDOMReady(function() {
      initDirtyFieldTracking();

    });
    // -->
    </script>
<script type="text/javascript" src="data/assets/b0e9f412b1f97bb1ae7ecfce91ab62bb.js"></script>

    
    <!--[if lt IE 9]>
      <script>
        document.createElement('header');
        document.createElement('nav');
        document.createElement('main');
        document.createElement('footer');
      </script>
    <![endif]-->

    

    
    <link rel="search" type="application/opensearchdescription+xml"
                       title="Kernel.org Bugzilla" href="./search_plugin.cgi">
    <link rel="shortcut icon" href="images/favicon.ico"><meta name="robots" content="noarchive">
  </head>

  <body 
        class="bugzilla-kernel-org
                 bz_bug
                 bz_status_NEEDINFO
                 bz_product_File_System
                 bz_component_ext4
                 bz_bug_107301 yui-skin-sam">

  <header id="header"><div id="banner">
  </div>

    <div id="titles">
      <span id="title">Kernel.org Bugzilla &ndash; Bug&nbsp;107301</span>

        <span id="subtitle" class="subheader">system hang during ext4 xattr operation</span>

        <span id="information" class="header_addl_info">Last modified: 2016-04-13 09:07:35 UTC</span>
    </div>


    <nav id="common_links"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_top" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_top");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_top" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_top"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/latest/using/understanding.html" target="_blank">Help</a>
      </li>
    
      <li id="new_account_container_top">
        <span class="separator">| </span>
        <a href="createaccount.cgi">New&nbsp;Account</a>
      </li>

    <li id="mini_login_container_top">
  <span class="separator">| </span>
  <a id="login_link_top" href="show_bug.cgi?id=107301&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_top')">Log In</a>

  <form action="show_bug.cgi?id=107301" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_top">
    <input id="Bugzilla_login_top" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_top" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_top">
    <a href="#" onclick="return hide_mini_login_form('_top')">[x]</a>
  </form>
</li>


  <li id="forgot_container_top">
    <span class="separator">| </span>
    <a id="forgot_link_top" href="createaccount.cgi?request_new_password=1"
       onclick="return show_forgot_form('_top')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_top"
          class="mini_forgot bz_default_hidden">
      <label for="login_top">Login:</label>
      <input name="email" size="20" id="login_top" required
             type="email" placeholder="Your Email Address">
      <input id="forgot_button_top" value="Reset Password"
             type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_top" name="token"
             value="1635622124-gs2osmHnyBUXjj5HkAfXJallEqqAbkJ0is0z7t9bTLs">
      <a href="#" onclick="return hide_forgot_form('_top')">[x]</a>
    </form>
  </li>
</ul>
    </nav>
  </header>

  <main role="main" id="bugzilla-body">


<script type="text/javascript">
<!--

//-->
</script>

<form name="changeform" id="changeform" method="post" action="process_bug.cgi">

  <input type="hidden" name="delta_ts" value="2016-04-13 09:07:35">
  <input type="hidden" name="id" value="107301">
  <input type="hidden" name="token" value="1635622124-vYBlL5EpqLPZt0yPUacFo74QfEtIHV1GC0tFpuDu8FA">
<div class="bz_short_desc_container edit_form">
     <a href="show_bug.cgi?id=107301"><b>Bug&nbsp;107301</b></a> <span id="summary_container" class="bz_default_hidden">
      - <span id="short_desc_nonedit_display">system hang during ext4 xattr operation</span>
     </span>

    <div id="summary_input"><span class="field_label "
    id="field_label_short_desc">


  <a 
      title="The bug summary is a short sentence which succinctly describes what the bug is about."
      class="field_help_link"
      href="page.cgi?id=fields.html#short_desc"
  >Summary:</a>

</span>system hang during ext4 xattr operation
    </div>
  </div>
  <script type="text/javascript">
    hideEditableField('summary_container',
                      'summary_input',
                      'summary_edit_action',
                      'short_desc',
                      'system hang during ext4 xattr operation' );
  </script>
  <table class="edit_form">
    <tr>
      
      <td id="bz_show_bug_column_1" class="bz_show_bug_column">
        <table>
          <tr id="field_tablerow_status">
    <th class="field_label">
      <a href="page.cgi?id=fields.html#bug_status">Status</a>:
    </th>
    <td id="bz_field_status">
      <span id="static_bug_status">NEEDINFO
      </span>
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr id="field_tablerow_alias"><th class="field_label "
    id="field_label_alias">


  <a 
      title="A short, unique name assigned to a bug in order to assist with looking it up and referring to it in other places in Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#alias"
  >Alias:</a>

</th>
    <td>
        None
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr id="field_tablerow_product"><th class="field_label "
    id="field_label_product">


  <a 
      title="Bugs are categorised into Products and Components."
      class="field_help_link"
      href="describecomponents.cgi"
  >Product:</a>

</th>
  <td class="field_value "
      id="field_container_product" >File System

</td>
    </tr>

    
    <tr id="field_tablerow_classification" class="bz_default_hidden"><th class="field_label "
    id="field_label_classification">


  <a 
      title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation."
      class="field_help_link"
      href="page.cgi?id=fields.html#classification"
  >Classification:</a>

</th>
  <td class="field_value "
      id="field_container_classification" >Unclassified

</td>
    </tr>
    
    
    
    <tr id="field_tablerow_component"><th class="field_label "
    id="field_label_component">


  <a 
      title="Components are second-level categories; each belongs to a particular Product. Select a Product to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi?product=File System"
  >Component:</a>

</th>
  <td class="field_value "
      id="field_container_component" >ext4

  (<a href="buglist.cgi?component=ext4&amp;product=File%20System&amp;bug_status=__open__"
      target="_blank">show other bugs</a>)
</td>
    </tr>
    
    
    
    <tr id="field_tablerow_rep_platform"><th class="field_label "
    id="field_label_rep_platform">


  <a 
      title="The hardware platform the bug was observed on. Note: When searching, selecting the option &quot;All&quot; only finds bugs whose value for this field is literally the word &quot;All&quot;."
      class="field_help_link"
      href="page.cgi?id=fields.html#rep_platform"
  >Hardware:</a>

</th>
      <td class="field_value">All
        Linux
      </td>
    </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>

          <tr id="field_tablerow_importance">
      <th class="field_label">
        <label  accesskey="i">
          <a href="page.cgi?id=fields.html#importance"><u>I</u>mportance</a></label>:
      </th>
      <td>P1
       high
      </td>
    </tr>

          <tr id="field_tablerow_assigned_to"><th class="field_label "
    id="field_label_assigned_to">


  <a 
      title="The person in charge of resolving the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#assigned_to"
  >Assignee:</a>

</th>
      <td><span class="vcard"><span class="fn">fs_ext4&#64;kernel-bugs.osdl.org</span>
</span>
      </td>
    </tr>

    <script type="text/javascript">
      assignToDefaultOnChange(['product', 'component'],
        'fs_ext4\x40kernel-bugs.osdl.org',
        '');
    </script>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr id="field_tablerow_bug_file_loc"><th class="field_label "
    id="field_label_bug_file_loc">


  <a 
      title="Bugs can have a URL associated with them - for example, a pointer to a web site where the problem is seen."
      class="field_help_link"
      href="page.cgi?id=fields.html#bug_file_loc"
  >URL:</a>

</th>
    <td>
      <span id="bz_url_input_area">
      </span>
    </td>
  </tr>


    <tr id="field_tablerow_keywords"><th class="field_label "
    id="field_label_keywords">


  <a 
      title="You can add keywords from a defined list to bugs, in order to easily identify and group them."
      class="field_help_link"
      href="describekeywords.cgi"
  >Keywords:</a>

</th>
  <td class="field_value "
      id="field_container_keywords" >

</td>
    </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>

          
<tr id="field_tablerow_dependson"><th class="field_label "
    id="field_label_dependson">


  <a 
      title="The bugs listed here must be resolved before this bug can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#dependson"
  >Depends on:</a>

</th>

  <td>
    <span id="dependson_input_area">
    </span>

  </td>
  </tr>

  <tr><th class="field_label "
    id="field_label_blocked">


  <a 
      title="This bug must be resolved before the bugs listed in this field can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#blocked"
  >Blocks:</a>

</th>

  <td>
    <span id="blocked_input_area">
    </span>

  </td>
  </tr>

        </table>
      </td>
      <td>
        <div class="bz_column_spacer">&nbsp;</div>
      </td>
      
      <td id="bz_show_bug_column_2" class="bz_show_bug_column">
        <table>
        <tr id="field_tablerow_reported">
    <th class="field_label">
      Reported:
    </th>
    <td>2015-11-05 13:54 UTC by <span class="vcard"><span class="fn">Mehdi Abaakouk</span>
</span>
    </td>
  </tr>

  <tr id="field_tablerow_modified">
    <th class="field_label">
      Modified:
    </th>
    <td>2016-04-13 09:07 UTC
      (<a href="show_activity.cgi?id=107301">History</a>)
    </td>

  </tr>
<tr id="field_tablerow_cclist">
      <th class="field_label">
        <label  accesskey="a">
          CC List:
        </label>
      </th>
      <td>9
          users
          <span id="cc_edit_area_showhide_container" class="bz_default_hidden">
            (<a href="#" id="cc_edit_area_showhide">show</a>)
          </span>
        <div id="cc_edit_area">
          <br>
            <select id="cc" multiple="multiple" size="5" >
                <option value="adilger.kernelbugzilla">adilger.kernelbugzilla</option>
                <option value="agruen">agruen</option>
                <option value="erwan">erwan</option>
                <option value="jack">jack</option>
                <option value="laurent">laurent</option>
                <option value="pmhahn">pmhahn</option>
                <option value="sage">sage</option>
                <option value="szg00000">szg00000</option>
                <option value="tytso">tytso</option>
            </select>
        </div>
          <script type="text/javascript">
            hideEditableField( 'cc_edit_area_showhide_container',
                               'cc_edit_area',
                               'cc_edit_area_showhide',
                               '',
                               '');
          </script>
      </td>
    </tr>

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr id="field_tablerow_see_also"><th class="field_label "
    id="field_label_see_also">


  <a 
      title="This allows you to refer to bugs in other installations. You can enter a URL to a bug in the 'Add Bug URLs' field to note that that bug is related to this one. You can enter multiple URLs at once by separating them with whitespace. You should normally use this field to refer to bugs in other installations. For bugs in this installation, it is better to use the Depends on and Blocks fields."
      class="field_help_link"
      href="page.cgi?id=fields.html#see_also"
  >See Also:</a>

</th>
  <td class="field_value "
      id="field_container_see_also" >

</td>
    </tr>
<tr>
      <th class="field_label "
    id="field_label_cf_kernel_version">


  <a 
      title="A custom Free Text field in this installation of Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_kernel_version"
  >Kernel Version:</a>

</th>
  <td class="field_value "
      id="field_container_cf_kernel_version" >4.2.3 3.19 3.16

</td>
    </tr>
    <tr>
      <th class="field_label "
    id="field_label_cf_tree">


  <a 
      title="A custom Drop Down field in this installation of Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_tree"
  >Tree:</a>

</th>
  <td class="field_value "
      id="field_container_cf_tree" >Mainline

</td>
    </tr>
    <tr>
      <th class="field_label "
    id="field_label_cf_regression">


  <a 
      title="A custom Drop Down field in this installation of Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_regression"
  >Regression:</a>

</th>
  <td class="field_value "
      id="field_container_cf_regression" >No

</td>
    </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>



        </table>
      </td>
    </tr>
    <tr>
      <td colspan="3">
          <hr id="bz_top_half_spacer">
      </td>
    </tr>
  </table>

  <table id="bz_big_form_parts">
  <tr>
  <td>

    
<script type="text/javascript">
<!--
function toggle_display(link) {
    var table = document.getElementById("attachment_table");
    var view_all = document.getElementById("view_all");
    var hide_obsolete_url_parameter = "&hide_obsolete=1";
    // Store current height for scrolling later
    var originalHeight = table.offsetHeight;
    var rows = YAHOO.util.Dom.getElementsByClassName(
        'bz_tr_obsolete', 'tr', table);

    for (var i = 0; i < rows.length; i++) {
        bz_toggleClass(rows[i], 'bz_default_hidden');
    }

    if (YAHOO.util.Dom.hasClass(rows[0], 'bz_default_hidden')) {
        link.innerHTML = "Show Obsolete";
        view_all.href = view_all.href + hide_obsolete_url_parameter 
    }
    else {
        link.innerHTML = "Hide Obsolete";
        view_all.href = view_all.href.replace(hide_obsolete_url_parameter,"");
    }

    var newHeight = table.offsetHeight;
    // This scrolling makes the window appear to not move at all.
    window.scrollBy(0, newHeight - originalHeight);

    return false;
}
//-->
</script>

<br>
<table id="attachment_table">
  <tr id="a0">
    <th colspan="2" class="left">
      Attachments
    </th>
  </tr>


      <tr id="a1" class="bz_contenttype_text_plain">
        <td>
            <a href="attachment.cgi?id=192191"
               title="View the content of the attachment">
          <b>dmesg received via netconsole before the system hang
          </b></a>

          <span class="bz_attach_extra_info">
              (158.93 KB,
                text/plain)

            <br>
            <a href="#attach_192191"
               title="Go to the comment associated with the attachment">2015-11-05 13:54 UTC</a>,

            <span class="vcard"><span class="fn">Mehdi Abaakouk</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=192191&amp;action=edit">Details</a>
        </td>
      </tr>
      <tr id="a2" class="bz_contenttype_text_html">
        <td>
            <a href="attachment.cgi?id=192211"
               title="View the content of the attachment">
          <b>attachment-4900-0.html
          </b></a>

          <span class="bz_attach_extra_info">
              (1.47 KB,
                text/html)

            <br>
            <a href="#attach_192211"
               title="Go to the comment associated with the attachment">2015-11-05 17:41 UTC</a>,

            <span class="vcard"><span class="fn">Mehdi Abaakouk</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=192211&amp;action=edit">Details</a>
        </td>
      </tr>
      <tr id="a3" class="bz_contenttype_text_plain bz_patch">
        <td>
            <a href="attachment.cgi?id=192351"
               title="View the content of the attachment">
          <b>Remove ext4 mbcache
          </b></a>

          <span class="bz_attach_extra_info">
              (10.69 KB,
                patch)

            <br>
            <a href="#attach_192351"
               title="Go to the comment associated with the attachment">2015-11-07 17:58 UTC</a>,

            <span class="vcard"><span class="fn">Laurent GUERBY</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=192351&amp;action=edit">Details</a>
            | <a href="attachment.cgi?id=192351&amp;action=diff">Diff</a>
        </td>
      </tr>
      <tr id="a4" class="bz_contenttype_text_plain">
        <td>
            <a href="attachment.cgi?id=192491"
               title="View the content of the attachment">
          <b>xattr -l on random ceph files
          </b></a>

          <span class="bz_attach_extra_info">
              (15.40 KB,
                text/plain)

            <br>
            <a href="#attach_192491"
               title="Go to the comment associated with the attachment">2015-11-09 09:24 UTC</a>,

            <span class="vcard"><span class="fn">Laurent GUERBY</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=192491&amp;action=edit">Details</a>
        </td>
      </tr>
      <tr id="a5" class="bz_contenttype_text_plain bz_patch">
        <td>
            <a href="attachment.cgi?id=192551"
               title="View the content of the attachment">
          <b>add &quot;no_mbcache
          </b></a>

          <span class="bz_attach_extra_info">
              (5.80 KB,
                patch)

            <br>
            <a href="#attach_192551"
               title="Go to the comment associated with the attachment">2015-11-09 18:13 UTC</a>,

            <span class="vcard"><span class="fn">Andreas Dilger</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=192551&amp;action=edit">Details</a>
            | <a href="attachment.cgi?id=192551&amp;action=diff">Diff</a>
        </td>
      </tr>
      <tr id="a6" class="bz_contenttype_text_plain">
        <td>
            <a href="attachment.cgi?id=212131"
               title="View the content of the attachment">
          <b>Multiple NMI watchdog: BUG: soft lockup - CPU#1 stuck for 22s! [smbd:8822]
          </b></a>

          <span class="bz_attach_extra_info">
              (14.26 KB,
                text/plain)

            <br>
            <a href="#attach_212131"
               title="Go to the comment associated with the attachment">2016-04-08 10:09 UTC</a>,

            <span class="vcard"><span class="fn">Philipp Matthias Hahn</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=212131&amp;action=edit">Details</a>
        </td>
      </tr>

  <tr class="bz_attach_footer">
    <td colspan="2">
        <span class="bz_attach_view_hide">
        </span>
        <a href="attachment.cgi?bugid=107301&amp;action=enter">Add an attachment</a>
        (proposed patch, testcase, etc.)
    </td>
  </tr>
</table>
<br>

  </td>
  <td>
  </td>
  </tr></table>

  
  <div id="comments"><script type="text/javascript">
  var replyCommentConfig = {
      quote_replies : "quoted_reply",
      is_insider : 0,
      markdown_fetching_comment : "Fetching comment..."
  };
</script>


<!-- This auto-sizes the comments and positions the collapse/expand links 
     to the right. -->
<table class="bz_comment_table">
<tr>
<td>
<div id="c0" class="bz_comment bz_first_comment">

      <div class="bz_first_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c0">Description</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Mehdi Abaakouk</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-05 13:54:24 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=192191" name="attach_192191" title="dmesg received via netconsole before the system hang">attachment 192191</a> <a href="attachment.cgi?id=192191&amp;action=edit" title="dmesg received via netconsole before the system hang">[details]</a></span>
dmesg received via netconsole before the system hang

Hi,

We are running a ceph cluster on ext4 filesystem, we recently got a hardware failure, the ceph recovery process provokes a huge amount of data write on all our ext4 filesystems (~40 disks).

Now, we are experienced random nodes hang, we catch some partial backtrace (that can be found on the ceph bug tracker). And recently we got the full dmesg log via netconsole (attached to this BZ).

When the freeze occurs, it seems ceph processes lockup all the CPUs, each CPUs backtrace is related to a xattr operation. 

bug report on ceph side: <a href="http://tracker.ceph.com/issues/13662">http://tracker.ceph.com/issues/13662</a>

We have some nodes on debian and some other on ubuntu, we tried kernels 3.16, 3.19, 4.2.3. The issue occurs with all of them. 

Cheers,</pre>
    </div>

    <div id="c1" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c1">Comment 1</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jan Kara</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-05 17:02:57 UTC
        </span>

      </div>




<pre class="bz_comment_text">Hum, from the stack traces in the log it seems mb_cache_entry_alloc() is racing with other operations on the LRU and restarting all the time. Another possibility is that there are lots of entries in the LRU and it takes a long time to scan (if I remember right ceph is a heavy user of xattrs).

The first problem would be easily fixed by adding cond_resched() at appropriate place, the second problem would require more intrusive changes in how LRU is handled.

Can you reproduce the issue?</pre>
    </div>

    <div id="c2" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c2">Comment 2</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Mehdi Abaakouk</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-05 17:41:54 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=192211" name="attach_192211" title="attachment-4900-0.html">attachment 192211</a> <a href="attachment.cgi?id=192211&amp;action=edit" title="attachment-4900-0.html">[details]</a></span>
attachment-4900-0.html

Yes ceph heavy uses xattr

I don't have a 'step by step to reproduce' list. But I have the issue ~4-5 times per day on a ceph cluster since the first incident.

On November 5, 2015 6:02:57 PM GMT+01:00, <a href="mailto:bugzilla-daemon&#64;bugzilla.kernel.org">bugzilla-daemon&#64;bugzilla.kernel.org</a> wrote:
<span class="quote">&gt;<a class="bz_bug_link           bz_status_NEEDINFO "   title="NEEDINFO - system hang during ext4 xattr operation"   href="show_bug.cgi?id=107301">https://bugzilla.kernel.org/show_bug.cgi?id=107301</a></span >
&gt;
<span class="quote">&gt;Jan Kara &lt;<a href="mailto:jack&#64;suse.cz">jack&#64;suse.cz</a>&gt; changed:</span >
&gt;
<span class="quote">&gt;           What    |Removed                     |Added
&gt;----------------------------------------------------------------------------
&gt;             Status|NEW                         |NEEDINFO</span >
&gt;
<span class="quote">&gt;--- <a href="show_bug.cgi?id=107301#c1">Comment #1</a> from Jan Kara &lt;<a href="mailto:jack&#64;suse.cz">jack&#64;suse.cz</a>&gt; ---
&gt;Hum, from the stack traces in the log it seems mb_cache_entry_alloc()
&gt;is racing
&gt;with other operations on the LRU and restarting all the time. Another
&gt;possibility is that there are lots of entries in the LRU and it takes a
&gt;long
&gt;time to scan (if I remember right ceph is a heavy user of xattrs).</span >
&gt;
<span class="quote">&gt;The first problem would be easily fixed by adding cond_resched() at
&gt;appropriate
&gt;place, the second problem would require more intrusive changes in how
&gt;LRU is
&gt;handled.</span >
&gt;
<span class="quote">&gt;Can you reproduce the issue?</span >
&gt;
<span class="quote">&gt;-- 
&gt;You are receiving this mail because:
&gt;You reported the bug.</span ></pre>
    </div>

    <div id="c3" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c3">Comment 3</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Theodore Tso</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-06 02:43:17 UTC
        </span>

      </div>




<pre class="bz_comment_text">If Ceph is using xattrs that are all different for each inode, the mbcache is not really useful at all.   So I wonder if we should have a mount option which disables the mbcache.   This will prove the scalability of the xattr functions, and should be a pretty big performance win for Ceph.</pre>
    </div>

    <div id="c4" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c4">Comment 4</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laurent GUERBY</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-06 20:29:15 UTC
        </span>

      </div>




<pre class="bz_comment_text">Don't know if this is still around:

<a href="https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/fs/mbcache.c?id=335e92e8a515420bd47a6b0f01cb9a206c0ed6e4">https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/fs/mbcache.c?id=335e92e8a515420bd47a6b0f01cb9a206c0ed6e4</a></pre>
    </div>

    <div id="c5" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c5">Comment 5</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laurent GUERBY</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-07 15:24:34 UTC
        </span>

      </div>




<pre class="bz_comment_text">My reading of the mbcache code is that

cache-&gt;c_max_entries = bucket_count &lt;&lt; 4

is limiting to on average 16 entries per bucket. For ext4 bucket_bits is 10 so 1024 buckets.

Once the cache is full which is very likely situation given ceph use of xattr with differing values all ceph threads will compete for the global mbcache locks on *each* xattr operation.

Am I correct here?

ceph is designed to have one process managing one non shared device the mbcache design is very likely limiting scalability here by having global locks. Plus probably has a locking bug.</pre>
    </div>

    <div id="c6" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c6">Comment 6</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laurent GUERBY</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-07 17:58:55 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=192351&amp;action=diff" name="attach_192351" title="Remove ext4 mbcache">attachment 192351</a> <a href="attachment.cgi?id=192351&amp;action=edit" title="Remove ext4 mbcache">[details]</a></span>
Remove ext4 mbcache

Would this (untested/mechanical) patch be ok to test mbcache removal?</pre>
    </div>

    <div id="c7" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c7">Comment 7</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jan Kara</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-09 08:50:58 UTC
        </span>

      </div>




<pre class="bz_comment_text">Yeah, that would test what the performance would look like without mbcache. BTW: Among xattrs ceph is using how many of them are the same? Mbcache is a win for the common case where xattrs are mostly used for ACLs or SE Linux labels and thus the reuse is big (mbcache is essentially a deduplication layer for xattrs). 

And yes, it is in a need of some updates to meet current scalability demands (I don't think what you hit is a bug as such, rather an inefficiency that becomes lethal at your scale) - other users than ceph occasionally report issues as well. Probably we should track things per-fs, not globally, hook each per-fs mbcache into the shrinker framework and don't introduce artificial upper bounds on the number of entries and instead let natural memory pressure deal with it.

For now I'm not convinced adding a mount option to disable mbcache is the right way to go. Rather we should make it lightweight enough that it doesn't add too much overhead for the cases where it is not needed. With the mount option there is always the trouble that someone has to know it to turn it on/off and sometimes there even isn't a good choice as you can have heavy xattr reuse for some inodes and also quite a few unique xattrs for other inodes...</pre>
    </div>

    <div id="c8" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c8">Comment 8</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laurent GUERBY</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-09 09:24:04 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=192491" name="attach_192491" title="xattr -l on random ceph files">attachment 192491</a> <a href="attachment.cgi?id=192491&amp;action=edit" title="xattr -l on random ceph files">[details]</a></span>
xattr -l on random ceph files

I ran xattr on various ceph files on our cluster and there are small ones that look mostly constant (or small value set), but the big ones &quot;user.ceph._&quot; are clearly all differents (beginning common but there's probably hash or something inside near the end).</pre>
    </div>

    <div id="c9" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c9">Comment 9</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laurent GUERBY</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-09 10:11:07 UTC
        </span>

      </div>




<pre class="bz_comment_text">Note: ceph files are all big in our use case since we use it for rbd, about 4 Mbyte each, so two or three additional xattr blocks per file won't change disk usage in volume for us. For people using ceph as object store and with their own use of xattr the situation could be different.</pre>
    </div>

    <div id="c10" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c10">Comment 10</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Sage Weil</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-09 14:31:37 UTC
        </span>

      </div>




<pre class="bz_comment_text">The most common Ceph xattr is ~270 bytes and always has a unique value.  There are also a couple that are a few bytes each (and always the same), but i would expect the little ones get inlined in the inode?

Anyway, it sounds like disabling mbcache would be a win!</pre>
    </div>

    <div id="c11" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c11">Comment 11</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jan Kara</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-09 15:22:23 UTC
        </span>

      </div>




<pre class="bz_comment_text">Actually if most of inodes have xattrs like this, then the biggest win would probably be to create filesystem with 512-byte inodes where the ~270-byte xattr will fit into the inode as well. Then you save on extra block lookup etc.

WRT disabling mbcache, it seems disabling it would really help your usecase. However I'm not a big fan of mount options for disabling/enabling various functionality in the filesystem as it blows up a test matrix and tends to be a usability issue as well (people don't know the option or don't know when to enable / disable it). So I'd prefer if we just fixed mbcache...</pre>
    </div>

    <div id="c12" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c12">Comment 12</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Andreas Dilger</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-09 18:13:16 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=192551&amp;action=diff" name="attach_192551" title="add &quot;no_mbcache">attachment 192551</a> <a href="attachment.cgi?id=192551&amp;action=edit" title="add &quot;no_mbcache">[details]</a></span>
add &quot;no_mbcache

We have a patch for Lustre ldiskfs (ext4 modified with Lustre patches) to disable mbcache, since it has similar performance impact for Lustre servers, and provides no value because the xattrs Lustre stores on each file are unique and cannot be shared.  

Canonical patch location:
<a href="http://git.hpdd.intel.com/fs/lustre-release.git/blob_plain/HEAD:/ldiskfs/kernel_patches/patches/rhel7/ext4-disable-mb-cache.patch">http://git.hpdd.intel.com/fs/lustre-release.git/blob_plain/HEAD:/ldiskfs/kernel_patches/patches/rhel7/ext4-disable-mb-cache.patch</a>

While the referenced patch is for RHEL 7, it is small enough to port easily to the upstream kernel.

This patch adds a &quot;no_mbcache&quot; mount option, which Lustre automatically adds to the filesystem options when the servers are mounted.  There was a patch to improve mbcache performance in ext4 by making the cache per-sb, but that doesn't improve the contention within a filesystem, and doesn't avoid the fact that mbcache provides absolutely no value for Lustre (or Ceph, it seems).  Doing no work at all is better than doing it somewhat more efficiently.

The only way I could see this working automatically is if mbcache disabled itself after having a low/zero cache hit ratio within a certain number of inserts, and if not finding any shared xattr blocks when reading from disk.  In the meantime, I think having a mount option is a viable alternative for those people who know better than the auto-detection heuristics.</pre>
    </div>

    <div id="c13" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c13">Comment 13</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laurent GUERBY</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-10 11:16:37 UTC
        </span>

      </div>




<pre class="bz_comment_text">We restarted all of our cluster machines with ubuntu 3.19 + my ext4 mbcache removal patch: so far no data loss, no new freeze and no visible change in performance (production too noisy to detect small changes).</pre>
    </div>

    <div id="c14" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c14">Comment 14</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Theodore Tso</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-11 02:37:59 UTC
        </span>

      </div>




<pre class="bz_comment_text">In response to Jan's concerns in <a href="show_bug.cgi?id=107301#c11">comment #11</a>, I wonder if we can use some hueristics to decide when to use mbcache and when to skip it.   So if there are ways that we can identify certain xattr's by name or type as being almost always unique, then if there are any of those xattrs in the external xattr block, there's no point using the mbcache.   If we had such a function, we could also use it to bias putting the unique xattrs in the extended inode space, which might increase the chance that the external xattr block is more likely to be shareable.

The final thing I'll note is that because of the mbcache locking, it can turn into a real scalability bottlencheck for ext4, and it's not clear this is a soluble problem.   So if you are running on a high-CPU count machine, and you are using xattrs, and (for example) the SELinux xattr is so piggy that it won't fit in your 256-byte inodes, things can get pretty painful.</pre>
    </div>

    <div id="c15" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c15">Comment 15</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jan Kara</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-11 10:28:17 UTC
        </span>

      </div>




<pre class="bz_comment_text">So I guess there are two separate issues:
1) mbcache scales poorly - that is worth addressing regardless of whether ceph / lustre really need it or not since as you mention there are cases where mbcache helps and scalability is an issue.
2) some usecases do not benefit from mbache much (or at all) and so we could possibly have a heuristic to disable mbcache altogether.

My current feeling is that if mbcache is implemented properly, then the overhead of it is a hash-table insertion / deletion when creating / removing xattr and that should be pretty cheap compared to all the other work we do to create external xattr (although cache line contention could be an issue here to some degree).</pre>
    </div>

    <div id="c16" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c16">Comment 16</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Andreas Dilger</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-11 11:37:33 UTC
        </span>

      </div>




<pre class="bz_comment_text">I think that regardless of how efficient mbcache can be made, it is not as efficient (both CPU and RAM) as not using it at all in cases where it is not providing any benefit.  I'm not against improving the efficiency, but I think it still makes sense to have an option to disable it completely. Since mbcache is already a per-sb cache, having a per-sb mount option makes sense and doesn't interfere with other improvements to mbcache.</pre>
    </div>

    <div id="c17" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c17">Comment 17</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jan Kara</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-11 14:53:10 UTC
        </span>

      </div>




<pre class="bz_comment_text">Ultimately it is Ted's call but your argument is like (randomly taken out of top of my head): &quot;Proper locking to protect from hole punching costs us some performance and our workload doesn't use hole punching so let's create mount option to disable the locking&quot;. Sure it can be done and it will benefit your workload but how much you gain? And how many users need this? This has to be weighted against the cost of the new mount option in terms of testing and usability (and code complexity but that is fairly small in this case so I'm not that concerned).</pre>
    </div>

    <div id="c18" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c18">Comment 18</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Laurent GUERBY</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-18 20:48:49 UTC
        </span>

      </div>




<pre class="bz_comment_text">Should I formally submit the mbcache removal patch?</pre>
    </div>

    <div id="c19" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c19">Comment 19</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Andreas Dilger</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-19 00:49:16 UTC
        </span>

      </div>




<pre class="bz_comment_text">Jan, your example is a red herring, because the removal of mbcache at most affects the performance and space efficiency, not correctness. 

I agree that making mbcache more efficient is a good goal, but I don't think that ot should block the landing of this patch. Rather, it makes sense to land the patch and we can still fix mbcache performance if anyone actually wants to use it. It will also serve as the basis for any heuristic to turn mbcache on and off dynamically instead of (or in addition to) the mount option.

Laurent, I'd be greatful if you pushed the patch upstream for the latest kernel as I'm traveling this week.</pre>
    </div>

    <div id="c20" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c20">Comment 20</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Theodore Tso</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-11-19 15:11:22 UTC
        </span>

      </div>




<pre class="bz_comment_text">Apologies for not responding right away.  I'm currently on vacation.
So this also means that if someone sends me a patch right away, I'm
not likely to have time to look at it for a week or two.

As far as trying to make mbcache more scalable, this would be great,
but I suspect it's not going to be very easy because it requires a
global data structure, which is fundamentally hard to scale.  I can
imagine some schemes that sacrifice some of mbcache's ability to spot
duplicate xattr sets --- for example, you could just use a trylock,
and if there is lock contention just give up on detecting duplicate
xattrs.

Or maybe we could use some hueristics based on the xattr type/key to
decide whether using mbcache is likely to be successful.  So if we
know that Posix ACL's are very likely to be shared, and ceph xattrs
are very unlikely to be shared, this could be used to decide whether
or not to use mbcache automatically, without requiring a mount option.

Even better would be one where for unknonw xattr type/key
combinations, we use some learning algorithm which determines after
using mbcache for N instances of that xattr, if the percentage of
cache hits is too low, we stop using mbcache for that type/key
combination.</pre>
    </div>

    <div id="c21" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c21">Comment 21</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Andreas Gruenbacher</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-12-10 02:51:52 UTC
        </span>

      </div>




<pre class="bz_comment_text">As far as ceph is concerned, are there reasons for not using 512-byte inodes? In-inode xattrs are generally much faster.</pre>
    </div>

    <div id="c22" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c22">Comment 22</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Theodore Tso</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2015-12-10 16:51:43 UTC
        </span>

      </div>




<pre class="bz_comment_text">Using 512 byte inodes for Ceph is a really good idea.

Before folks go there, can people give Jan Kara's mbcache rewrite a try?

<a href="http://thread.gmane.org/gmane.comp.file-systems.ext4/51094">http://thread.gmane.org/gmane.comp.file-systems.ext4/51094</a>

I'd really appreciate comments and any performance numbers you could give me on your workloads.

Thanks!!</pre>
    </div>

    <div id="c23" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c23">Comment 23</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Erwan Velu</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-03-31 13:53:44 UTC
        </span>

      </div>




<pre class="bz_comment_text">I'm making a short review on that issue that Ceph user could trigger.

Regarding the current state, it seems that Jan got his work to be present in the 4.6.x series.

Laurent, Medhi, could you make a try with Jan's patch to confirm that its ok for you too ?

Testing the 4.6-rc1 would be ideal as we could tell Ceph's users then that 4.6 is fixing the issue you had.

Thanks,</pre>
    </div>

    <div id="c24" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c24">Comment 24</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Philipp Matthias Hahn</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-04-08 10:09:28 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=212131" name="attach_212131" title="Multiple NMI watchdog: BUG: soft lockup - CPU#1 stuck for 22s! [smbd:8822]">attachment 212131</a> <a href="attachment.cgi?id=212131&amp;action=edit" title="Multiple NMI watchdog: BUG: soft lockup - CPU#1 stuck for 22s! [smbd:8822]">[details]</a></span>
Multiple NMI watchdog: BUG: soft lockup - CPU#1 stuck for 22s! [smbd:8822]

We have a similar situation with Samba4, which also heavily uses xattr to store the NTACLs.

From OCR (may contain errors):

[281537.032878] Call Trace:
[281537.032882]  [&lt;ffffffffa0117c7c&gt;] ? mb_cache_entry_get+0x1ac/0x1f0 [mbcache]
[281537.032883]  [&lt;ffffffff81208f1f&gt;] ? __find_get_block+0xef/0x120
[281537.032889]  [&lt;ffffffffa033de70&gt;] ? ext4_xattr_block_set+0x80/0xa50 [ext4]
[281537.032890]  [&lt;ffffffff81208f1f&gt;] ? __find_get_block+0xef/0x120
[281537.032896]  [&lt;ffffffffa033d1da&gt;] ? ext4_xattr_set_entrg+0x2a/0x350 [ext4]
[281537.032901]  [&lt;ffffffffa033f3e6&gt;] ? ext4_xattr_set_handle+0x376/0x4d0 [ext4]
[281537.032907]  [&lt;ffffffffa033f614&gt;] ? ext4_xattr_set+0xd4/0x130 [ext4]
[281537.032909]  [&lt;ffffffff811f917e&gt;] ? generic_setxattr+0x6e/0xa0
[281537.032910]  [&lt;ffffffff811f9d91&gt;] ? __ufs_setxattr_noperm+0x71/0x1d0
[281537.032912]  [&lt;ffffffff811f9fb4&gt;] ? ufs_setxattr+0xc4/0xd0
[281537.032914]  [&lt;ffffffff811fa0f4&gt;] ? setxattr+0x134/0x1f0
[281537.032916]  [&lt;ffffffff811e1301&gt;] ? filenane_lookup+0x31/0xd0
[281537.032917]  [&lt;ffffffff811e50bc&gt;] ? user_path_at_emptg+0x60/0xc0
[281537.032918]  [&lt;ffffffff811d7473&gt;] ? __sb_start_urite+0x53/0x100
[281537.032919]  [&lt;ffffffff811fa240&gt;] ? path_setxattr+0x90/0xc0
[281537.032921]  [&lt;ffffffff811fa314&gt;] ? SgS_setxattr+0x14/0x20
[281537.032922]  [&lt;ffffffff8159de72&gt;] ? system_call_fast_compare_end+0x0/0x6b
[281537.032933] Code: f0 0f c1 07 89 02 c1 ea 10 66 39 02 75 01 03 0f b7 f2 b8 00 80 00 00 0f b7 0f 41 89 08 41 31 d0 41 81 e0 f
e ff 00 00 74 10 f3 90 &lt;83&gt; e8 01 75 e7 0f 1f 80 00 00 00 00 eb d9 0f b7 f1 e8 08 75 ff</pre>
    </div>

    <div id="c25" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c25">Comment 25</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jan Kara</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-04-08 20:46:12 UTC
        </span>

      </div>




<pre class="bz_comment_text">Phillip, I see you are using some variant of 4.1 kernel. As <a href="show_bug.cgi?id=107301#c23">comment 23</a> mentions, fixes for the problem have landed in 4.6-rc1. So is it possible for you to test that kernel?</pre>
    </div>

    <div id="c26" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c26">Comment 26</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Philipp Matthias Hahn</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-04-12 12:52:24 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Jan Kara from <a href="show_bug.cgi?id=107301#c25">comment #25</a>)
<span class="quote">&gt; Phillip, I see you are using some variant of 4.1 kernel. As <a href="show_bug.cgi?id=107301#c23">comment 23</a>
&gt; mentions, fixes for the problem have landed in 4.6-rc1. So is it possible
&gt; for you to test that kernel?</span >

As that problem happend in production, I'm unwilling to install an -rc kernel there.
Currently I don't have the time to try to reproduce it in my development environment, but that may change if that lockup happens again.
Can you be more specific on which change in 4.6-rc1 you're referencing?</pre>
    </div>

    <div id="c27" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=107301#c27">Comment 27</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jan Kara</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2016-04-13 09:07:35 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to Philipp Matthias Hahn from <a href="show_bug.cgi?id=107301#c26">comment #26</a>)
<span class="quote">&gt; Can you be more specific on which change in 4.6-rc1 you're referencing?</span >

Well, it is a series of changes, commits:
f9a61eb4e2471c56a63cd804c7474128138c38ac
82939d7999dfc1f1998c4b1c12e2f19edbdff272
be0726d33cb8f411945884664924bed3cb8c70ee
ecd1e64412d5242b8afdef58a714bab3c5464f79
c2f3140fe2eceb3a6c1615b2648b9471544881c6
f0c8b46238db9d51ef9ea0858259958d0c601cec
7a2508e1b657cfc7e1371550f88c7a7bc4288f32
2335d05f3a83f5290ec28c1ed30c1c742a37edc9
dc8d5e565f00c9442fa1cbf9acc115475628527c
3fd164629d25b04f291a79a013dcc7ce1a301269
6048c64b26097a0ffbd966866b599f990e674e9b</pre>
    </div>


  

</td>
<td>
</td>
</tr></table>
  </div>

    <hr><div id="add_comment" class="bz_section_additional_comments">
      <table>
        <tr>
          <td>
            <fieldset>
              <legend>Note</legend>
              You need to
              <a href="show_bug.cgi?id=107301&amp;GoAheadAndLogIn=1">log in</a>
              before you can comment on or make changes to this bug.
            </fieldset>
          </td>
        </tr>
      </table>
  </div>

</form>

<hr>
<ul class="related_actions">
    <li><a href="show_bug.cgi?format=multiple&amp;id=107301">Format For Printing</a></li>
    <li>&nbsp;-&nbsp;<a href="show_bug.cgi?ctype=xml&amp;id=107301">XML</a></li>
    <li>&nbsp;-&nbsp;<a href="enter_bug.cgi?cloned_bug_id=107301">Clone This Bug</a></li>
    
    <li>&nbsp;-&nbsp;<a href="#">Top of page </a></li>
    </ul>

<br>
</main>

    <footer id="footer">
      <div class="intro"></div>

      <nav><ul id="useful-links">
  <li id="links-actions"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_bottom" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_bottom" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_bottom"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/latest/using/understanding.html" target="_blank">Help</a>
      </li>
    
      <li id="new_account_container_bottom">
        <span class="separator">| </span>
        <a href="createaccount.cgi">New&nbsp;Account</a>
      </li>

    <li id="mini_login_container_bottom">
  <span class="separator">| </span>
  <a id="login_link_bottom" href="show_bug.cgi?id=107301&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_bottom')">Log In</a>

  <form action="show_bug.cgi?id=107301" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_bottom">
    <input id="Bugzilla_login_bottom" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_bottom" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_bottom">
    <a href="#" onclick="return hide_mini_login_form('_bottom')">[x]</a>
  </form>
</li>


  <li id="forgot_container_bottom">
    <span class="separator">| </span>
    <a id="forgot_link_bottom" href="createaccount.cgi?request_new_password=1"
       onclick="return show_forgot_form('_bottom')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_bottom"
          class="mini_forgot bz_default_hidden">
      <label for="login_bottom">Login:</label>
      <input name="email" size="20" id="login_bottom" required
             type="email" placeholder="Your Email Address">
      <input id="forgot_button_bottom" value="Reset Password"
             type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_bottom" name="token"
             value="1635622124-gs2osmHnyBUXjj5HkAfXJallEqqAbkJ0is0z7t9bTLs">
      <a href="#" onclick="return hide_forgot_form('_bottom')">[x]</a>
    </form>
  </li>
</ul>
  </li>

  




  
</ul>
      </nav>

      <div class="outro"></div>
    </footer>

  </body>
</html>