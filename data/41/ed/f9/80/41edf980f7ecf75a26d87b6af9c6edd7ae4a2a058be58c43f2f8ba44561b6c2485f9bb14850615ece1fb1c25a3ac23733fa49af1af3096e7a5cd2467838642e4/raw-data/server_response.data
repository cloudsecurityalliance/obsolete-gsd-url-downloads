
<!doctype html>
<html lang="en-US">
  <head>
  <meta charset="utf-8">
  <meta http-equiv="x-ua-compatible" content="ie=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Drop-by-Drop: Bleeding through libvips &#8211; Silent Signal Techblog</title>
<script>(function(d, s, id){
				 var js, fjs = d.getElementsByTagName(s)[0];
				 if (d.getElementById(id)) {return;}
				 js = d.createElement(s); js.id = id;
				 js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.6";
				 fjs.parentNode.insertBefore(js, fjs);
			   }(document, 'script', 'facebook-jssdk'));</script><meta name='robots' content='max-image-preview:large' />
<link rel='dns-prefetch' href='//ws.sharethis.com' />
<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel='dns-prefetch' href='//maxcdn.bootstrapcdn.com' />
<link rel='dns-prefetch' href='//s.w.org' />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/blog.silentsignal.eu\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.7.1"}};
			!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode;p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([55357,56424,8205,55356,57212],[55357,56424,8203,55356,57212])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(n=t.source||{}).concatemoji?c(n.concatemoji):n.wpemoji&&n.twemoji&&(c(n.twemoji),c(n.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='wp-block-library-css'  href='https://blog.silentsignal.eu/wp-includes/css/dist/block-library/style.min.css?ver=5.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='simple-share-buttons-adder-indie-css'  href='//fonts.googleapis.com/css?family=Indie+Flower&#038;ver=5.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='simple-share-buttons-adder-font-awesome-css'  href='//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css?ver=5.7.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-syntax-css-css'  href='https://blog.silentsignal.eu/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0' type='text/css' media='all' />
<link rel='stylesheet' id='sage/css-css'  href='https://blog.silentsignal.eu/wp-content/themes/silentsignal-theme/dist/styles/main.css' type='text/css' media='all' />
<link rel='stylesheet' id='fancybox-css'  href='https://blog.silentsignal.eu/wp-content/plugins/easy-fancybox/fancybox/jquery.fancybox-1.3.8.min.css?ver=1.5.8.2' type='text/css' media='screen' />
<script id='st_insights_js' type='text/javascript' src='https://ws.sharethis.com/button/st_insights.js?publisher=4d48b7c5-0ae3-43d4-bfbe-3ff8c17a8ae6&#038;product=simpleshare' id='ssba-sharethis-js'></script>
<script type='text/javascript' src='https://blog.silentsignal.eu/wp-includes/js/jquery/jquery.min.js?ver=3.5.1' id='jquery-core-js'></script>
<script type='text/javascript' src='https://blog.silentsignal.eu/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.3.2' id='jquery-migrate-js'></script>
<link rel="https://api.w.org/" href="https://blog.silentsignal.eu/wp-json/" /><link rel="alternate" type="application/json" href="https://blog.silentsignal.eu/wp-json/wp/v2/posts/1227" /><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://blog.silentsignal.eu/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://blog.silentsignal.eu/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress 5.7.1" />
<link rel="canonical" href="https://blog.silentsignal.eu/2019/04/18/drop-by-drop-bleeding-through-libvips/" />
<link rel='shortlink' href='https://blog.silentsignal.eu/?p=1227' />
<link rel="alternate" type="application/json+oembed" href="https://blog.silentsignal.eu/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblog.silentsignal.eu%2F2019%2F04%2F18%2Fdrop-by-drop-bleeding-through-libvips%2F" />
<link rel="alternate" type="text/xml+oembed" href="https://blog.silentsignal.eu/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fblog.silentsignal.eu%2F2019%2F04%2F18%2Fdrop-by-drop-bleeding-through-libvips%2F&#038;format=xml" />
<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-46332272-1', 'auto');
ga('send', 'pageview');
</script>

<!-- Easy FancyBox 1.5.8.2 using FancyBox 1.3.8 - RavanH (http://status301.net/wordpress-plugins/easy-fancybox/) -->
<script type="text/javascript">
/* <![CDATA[ */
var fb_timeout = null;
var fb_opts = { 'overlayShow' : true, 'hideOnOverlayClick' : true, 'showCloseButton' : true, 'margin' : 20, 'centerOnScroll' : true, 'enableEscapeButton' : true, 'autoScale' : true };
var easy_fancybox_handler = function(){
	/* IMG */
	var fb_IMG_select = 'a[href*=".jpg"]:not(.nolightbox,li.nolightbox>a), area[href*=".jpg"]:not(.nolightbox), a[href*=".jpeg"]:not(.nolightbox,li.nolightbox>a), area[href*=".jpeg"]:not(.nolightbox), a[href*=".png"]:not(.nolightbox,li.nolightbox>a), area[href*=".png"]:not(.nolightbox)';
	jQuery(fb_IMG_select).addClass('fancybox image');
	var fb_IMG_sections = jQuery('div.gallery');
	fb_IMG_sections.each(function() { jQuery(this).find(fb_IMG_select).attr('rel', 'gallery-' + fb_IMG_sections.index(this)); });
	jQuery('a.fancybox, area.fancybox, li.fancybox a').fancybox( jQuery.extend({}, fb_opts, { 'transitionIn' : 'elastic', 'easingIn' : 'easeOutBack', 'transitionOut' : 'elastic', 'easingOut' : 'easeInBack', 'opacity' : false, 'hideOnContentClick' : false, 'titleShow' : false, 'titlePosition' : 'over', 'titleFromAlt' : false, 'showNavArrows' : true, 'enableKeyboardNav' : true, 'cyclic' : false }) );
}
var easy_fancybox_auto = function(){
	/* Auto-click */
	setTimeout(function(){jQuery('#fancybox-auto').trigger('click')},1000);
}
/* ]]> */
</script>
<style type="text/css">
#fancybox-overlay{background-attachment:fixed;background-image:url("https://blog.silentsignal.eu/wp-content/plugins/easy-fancybox/images/light-mask.png");background-position:center;background-repeat:no-repeat;background-size:100% 100%}
#fancybox-content{background-color:#fff}
#fancybox-content{border-color:#fff}#fancybox-outer{background-color:#fff}
#fancybox-content{color:inherit}
</style>
</head>
  <body class="post-template-default single single-post postid-1227 single-format-standard drop-by-drop-bleeding-through-libvips sidebar-primary">
    <div class="body-wrapper">
      <!--[if IE]>
        <div class="alert alert-warning">
          You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.        </div>
      <![endif]-->
      <div class="header">
  <div class="banner">
    <div class="container">
      <div class="wrapper">
        <a class="brand" href="https://blog.silentsignal.eu/">
          <img src="https://blog.silentsignal.eu/wp-content/themes/silentsignal-theme/dist/images/orange-white-logo.png">
        </a>
        <h1 class="no-margin brand-color">TECHBLOG</h1>
      </div>
    </div>
  </div>
  <div class="nav-wrapper">
    <div class="container">
      <div class="row">
        <div class="col-sm-6">
          <div class="menu-wrp">
            <ul id="menu-menu-1" class=""><li id="menu-item-12" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-12"><a href="https://blog.silentsignal.eu/">Home</a></li>
<li id="menu-item-119" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-119"><a href="https://github.com/silentsignal">GitHub</a></li>
<li id="menu-item-120" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-120"><a href="https://twitter.com/SilentSignalHU">Twitter</a></li>
<li id="menu-item-134" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-134"><a href="https://vimeo.com/silentsignal">Vimeo</a></li>
<li id="menu-item-14" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-14"><a title="silentsignal.eu" href="https://silentsignal.eu">silentsignal.eu</a></li>
</ul>          </div>
        </div>
        <div class="col-sm-6">
          <div class="search-wrp">
            <form name="search" method="post" action="">
              <input type="submit" class="hidden-xs hidden-sm hidden-md hidden-lg" name="submit-search"/>
              <img src="https://blog.silentsignal.eu/wp-content/themes/silentsignal-theme/dist/images/search.png" class="search-logo" id="search-toggle"/>
              <input id="search-input" type="search" name="s" class="form-control brand-light-bg"/>
              <a target="_blank" class="social-button" href="https://www.facebook.com/silentsignal.hu/?fref=ts">
                <img src="https://blog.silentsignal.eu/wp-content/themes/silentsignal-theme/dist/images/fb-btn.png" />
              </a>
              <a target="_blank" class="social-button" href="https://twitter.com/silentsignalhu">
                <img src="https://blog.silentsignal.eu/wp-content/themes/silentsignal-theme/dist/images/twitter-btn.png" />
              </a>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
      <main class="main">
        <div class="container">
          <div class="blog-articles-wrapper">
            
  <div class="single-article">
    <div class="entry-thumbnail">
      <img width="658" height="281" src="https://blog.silentsignal.eu/wp-content/uploads/2019/04/leak0_gray_cut.jpg" class="attachment-post-thumbnail size-post-thumbnail wp-post-image" alt="" loading="lazy" srcset="https://blog.silentsignal.eu/wp-content/uploads/2019/04/leak0_gray_cut.jpg 658w, https://blog.silentsignal.eu/wp-content/uploads/2019/04/leak0_gray_cut-300x128.jpg 300w" sizes="(max-width: 658px) 100vw, 658px" />    </div>
    <div class="clearfix"></div>
    <div class="article-header">
      <a class="article-title" href="https://blog.silentsignal.eu/2019/04/18/drop-by-drop-bleeding-through-libvips/">
        <h1 class="brand-color">Drop-by-Drop: Bleeding through libvips</h1>
      </a>
      <div class="clearfix"></div>
             <a class="article-date" href="https://blog.silentsignal.eu/2019/04/18/">April 18, 2019</a>

      <ul class="list-unstyled list-inline article-tags"><li><a href="https://blog.silentsignal.eu/tag/cve-2019-6976/" rel="tag">CVE-2019-6976</a></li><li><a href="https://blog.silentsignal.eu/tag/file-upload/" rel="tag">file upload</a></li><li><a href="https://blog.silentsignal.eu/tag/libvips/" rel="tag">libvips</a></li><li><a href="https://blog.silentsignal.eu/tag/memory-leak/" rel="tag">memory leak</a></li><li><a href="https://blog.silentsignal.eu/tag/vulnerability/" rel="tag">vulnerability</a></li><li><a href="https://blog.silentsignal.eu/tag/yahoobleed/" rel="tag">yahoobleed</a></li></ul>
      <div class="author">
        Author: <a href="https://blog.silentsignal.eu/author/b/">b</a>
      </div>
    </div>

    <div class="article-content">
      <p>During a recent engagement we encountered a quite common web application feature: profile image uploads. One of the tools we used for the tests was the <a href="https://github.com/modzero/mod0BurpUploadScanner">UploadScanner</a> Burp Suite extension, that reported no vulnerabilities. However, we noticed that the profile picture of our test user showed seemingly random pixels. This reminded us to the <a href="https://scarybeastsecurity.blogspot.com/2017/05/bleed-continues-18-byte-file-14k-bounty.html">Yahoobleed</a><a href="https://scarybeastsecurity.blogspot.com/2017/05/bleed-more-powerful-dumping-yahoo.html"> bugs</a> published by Chris Evans  so we decided to investigate further.</p>
<p><span id="more-1227"></span></p>
<p>When we downloaded the suspicious profile image it looked like this (compressed and converted to grayscale):</p>
<p><a href="https://blog.silentsignal.eu/wp-content/uploads/2019/01/leak0_gray.jpg"><img loading="lazy" class="size-medium wp-image-1228 aligncenter" src="https://blog.silentsignal.eu/wp-content/uploads/2019/01/leak0_gray-300x300.jpg" alt="" width="300" height="300" srcset="https://blog.silentsignal.eu/wp-content/uploads/2019/01/leak0_gray-300x300.jpg 300w, https://blog.silentsignal.eu/wp-content/uploads/2019/01/leak0_gray-150x150.jpg 150w, https://blog.silentsignal.eu/wp-content/uploads/2019/01/leak0_gray.jpg 500w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>What we see seems partially &#8220;structured noise&#8221; (with large blank areas and repeating patterns), some large parts of homogeneous fields of color, and even some readable characters! To figure out what&#8217;s going on, we looked up the URL of the final profile image in Logger++. It turned out that the profile image was generated after UploadScanner uploaded an image called idat_zlib_invalid_window.png. This turned out to be part of the test image set of the <a href="https://github.com/0xcite/fingerping">fingerping</a> utility that UploadScanner relies on. This image set contains a number of corrupted PNG files, and fortunately it also includes their valid originals &#8211; here&#8217;s how control.png from the fingerping set looks:</p>
<p><a href="https://blog.silentsignal.eu/wp-content/uploads/2019/01/control.png"><img loading="lazy" class="size-full wp-image-1230 aligncenter" src="https://blog.silentsignal.eu/wp-content/uploads/2019/01/control.png" alt="" width="253" height="253" srcset="https://blog.silentsignal.eu/wp-content/uploads/2019/01/control.png 253w, https://blog.silentsignal.eu/wp-content/uploads/2019/01/control-150x150.png 150w" sizes="(max-width: 253px) 100vw, 253px" /></a></p>
<p>What we saw on the first, noisy image was parts of this control picture.</p>
<h3>Estimating impact</h3>
<p>At this point we had no idea why and how the &#8220;noisy&#8221; images were generated: we didn&#8217;t know the software stack, we didn&#8217;t know if the noise was the result of a memory leak or just the thumbnailer generating incomprehensible data out of the corrupted input. Being optimists we created a script that uploaded a control image as the profile picture for one test user and the corrupted test image for another. After a couple of hundred tries we saw parts of the control image appearing on the thumbnails generated from the corrupted PNG. This confirmed two important suspicions:</p>
<ul>
<li>The implementation does leak uninitialized memory, what we see is not the result of the compression/conversion algorithm running wild</li>
<li>The uninitialized memory is read from a process address space shared between different user sessions, allowing cross-session data leaks</li>
</ul>
<h3>Tracking the source</h3>
<p>At this point we still didn&#8217;t know what software causes this behavior. We ran the fingerping utility, but it gave no convincing results. Luckily an unrelated interface of the application leaked the name of one of the libraries used by the application, a well-known package for Node.js. A quick internet search for Node.js image processing libraries showed that one of the most popular candidates is <a href="https://github.com/lovell/sharp">Sharp</a>, that is built-on<a href="https://jcupitt.github.io/libvips/"> libvips</a>, a low-level, high performance library implemented in C.</p>
<p>We downloaded  the 8.4.3 release of libvips, compiled it, and ran against the fingerping sample set. The results matched perfectly with the ones obtained from our target, although uninitialized memory leaks appeared like mostly black images with a few colored pixels on them, since the address space of the thumbnailer didn&#8217;t contain too much previously used data. When compiling libvips with ASAN, patterns of marked memory regions became clearly visible:</p>
<p><a href="https://blog.silentsignal.eu/wp-content/uploads/2019/01/output_asan.png"><img loading="lazy" class="size-medium wp-image-1234 aligncenter" src="https://blog.silentsignal.eu/wp-content/uploads/2019/01/output_asan-300x300.png" alt="" width="300" height="300" srcset="https://blog.silentsignal.eu/wp-content/uploads/2019/01/output_asan-300x300.png 300w, https://blog.silentsignal.eu/wp-content/uploads/2019/01/output_asan-150x150.png 150w, https://blog.silentsignal.eu/wp-content/uploads/2019/01/output_asan.png 500w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<h3>Accuracy</h3>
<p>Our target resized uploaded images with libvips that resulted in individual pixels &#8220;blurred&#8221; with the surronding ones, making the output decoding inaccurate. An obvious solution to this was to upload input files with identical dimensions to the application. To create such an image that also causes memory leak we needed to track down the issue with our test file, idat_zlib_invalid_window.png (several other test files triggered the same issue, we just stuck with our first finding). The filename indicates an &#8220;invalid window&#8221; size related to &#8220;zlib&#8221;. Looking up the <a href="https://tools.ietf.org/html/rfc2083#section-5">RFC</a> it can be quickly found that PNG uses deflate compression, while <a href="https://tools.ietf.org/html/rfc1950">zlib&#8217;s RFC</a> states the following related to the deflate Compression Method (CM=8):</p>
<blockquote><p>For CM = 8, CINFO is the base-2 logarithm of the LZ77 window size, minus eight (CINFO=7 indicates a 32K window size). Values of CINFO above 7 are not allowed in this version of the specification.</p></blockquote>
<p>The CMF byte, consisting of the CM and CINFO fields start the deflate stream right after the IDAT chunk header in the PNG file. Loading the test image to the <a href="http://kaitai.io/">Kaitai</a> Web IDE clearly shows that both CM and CINFO are set to 8, that is an invalid value in case of CINFO:</p>
<p><a href="https://blog.silentsignal.eu/wp-content/uploads/2019/01/screen1548145538.png"><img loading="lazy" class="size-medium wp-image-1236 aligncenter" src="https://blog.silentsignal.eu/wp-content/uploads/2019/01/screen1548145538-300x176.png" alt="" width="300" height="176" srcset="https://blog.silentsignal.eu/wp-content/uploads/2019/01/screen1548145538-300x176.png 300w, https://blog.silentsignal.eu/wp-content/uploads/2019/01/screen1548145538-768x449.png 768w, https://blog.silentsignal.eu/wp-content/uploads/2019/01/screen1548145538-1024x599.png 1024w, https://blog.silentsignal.eu/wp-content/uploads/2019/01/screen1548145538.png 1408w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>We created a test image with the appropriate size and edited the CINFO field in a hex editor to corrupt the window size. We also modified the source of the vipsthumbnail utility to allocate and initialize with known values a number of memory regions, then free them all:</p>
<pre><code>void* allocs[10240];
int asizes[4] = {6088,95000,775,6088}; // Sizes determined after some hours of debugging...
for(int i = 0; i&lt;10240; i++){
    allocs[i] = g_malloc(asizes[i % 4]);
    memset(allocs[i], 0xf1 + (i % 4), asizes[i % 4]);
}

for(int i=0;i&lt;10240;i++){
    if ( 1|| i % 4 == 0 || i % 4 == 2 ){
        g_free(allocs[i]);
    }
}</code></pre>
<p>When running our local thumbnailer against the newly created test image we saw nice white(ish) patterns appearing, with the expected #f1f1f1 &#8211; #f4f4f4 values, proving the possibility of bit-correct memory extraction:</p>
<p><a href="https://blog.silentsignal.eu/wp-content/uploads/2019/01/output_sprayed_asan.png"><img loading="lazy" class="alignnone size-full wp-image-1238" src="https://blog.silentsignal.eu/wp-content/uploads/2019/01/output_sprayed_asan.png" alt="" width="253" height="253" srcset="https://blog.silentsignal.eu/wp-content/uploads/2019/01/output_sprayed_asan.png 253w, https://blog.silentsignal.eu/wp-content/uploads/2019/01/output_sprayed_asan-150x150.png 150w" sizes="(max-width: 253px) 100vw, 253px" /></a></p>
<h3>Fixing things</h3>
<p>After confirming the issue we alerted our client, and immediately notified the maintainers of libvips and Sharp. Both of them responded within hours, the <a href="https://github.com/libvips/libvips/commit/dcba364efa7b9a0ca7cf3fc3a85444436feafa6e">fix</a> landed in libvips the same day. Fortunately the code needed just a minor change, since bitmap buffer allocations went through the same two wrapper functions around g_malloc():</p>
<pre><code>
 @@ -173,7 +173,7 @@ vips_malloc( VipsObject *object, size_t size )
 {
	void *buf;

-	buf = g_malloc( size );
+	buf = g_malloc0( size );

        if( object ) {
		g_signal_connect( object, "postclose", 
 @@ -317,7 +317,7 @@ vips_tracked_malloc( size_t size )
	 */
	size += 16;

-       if( !(buf = g_try_malloc( size )) ) {
+       if( !(buf = g_try_malloc0( size )) ) {
 #ifdef DEBUG
		g_assert_not_reached();
 #endif /*DEBUG*/
</code></pre>
<p>However this is not the end of the story. Since we are taking about an open-source library, in order to get the actual applications fixed, all downstream packages and distributions must adopt the patch. As you can see in the timeline below, this took several days and the work of close to a dozen people! While distros were generally quick to adopt the patch in their most recent distributions, getting the fixes to stable/LTS releases took an extended period of time &#8211; at the time of writing Debian stable for example is still unfixed. On the bright side, our original target, Sharp even <a href="https://github.com/lovell/sharp/blob/master/docs/changelog.md#v0213---19th-january-2019">enabled</a> <a href="https://jcupitt.github.io/libvips/API/current/VipsForeignSave.html#VipsForeignLoad--fail">a defense-in-depth measure in libvips</a> that halts processing if corrupt data is encountered.</p>
<p>To help with the coordination we allocated a CVE number for this issue at MITRE. Unfortunately, this seemingly trivial part didn&#8217;t quite go as planned: <a href="https://cveform.mitre.org/">MITRE&#8217;s CVE form</a> clearly states that &#8220;[CVE&#8217;s] will not be published in the CVE List until you have submitted a URL pointing to public information about the vulnerability&#8221;. We wanted to request a CVE so package and distro maintainers can use it before details go public, so we gave minimal information on the CVE form, omitting any URL&#8217;s. Still, MITRE looked up the corresponding commit, added the URL to the ticket, and published the CVE with a non-sense description, that was later automatically fetched by numerous other trackers:</p>
<p><a href="https://blog.silentsignal.eu/wp-content/uploads/2019/02/cve-2019-6976_nist.png"><img loading="lazy" class="alignnone size-medium wp-image-1257" src="https://blog.silentsignal.eu/wp-content/uploads/2019/02/cve-2019-6976_nist-300x74.png" alt="" width="300" height="74" srcset="https://blog.silentsignal.eu/wp-content/uploads/2019/02/cve-2019-6976_nist-300x74.png 300w, https://blog.silentsignal.eu/wp-content/uploads/2019/02/cve-2019-6976_nist-768x189.png 768w, https://blog.silentsignal.eu/wp-content/uploads/2019/02/cve-2019-6976_nist.png 1002w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>But all in all, we were assigned CVE-2019-6976 for this issue&#8230;</p>
<h3>Offensive contributions</h3>
<p>To improve the accuracy and efficiency of future black-box tests we contributed the following to offensive open-source tools:</p>
<ul>
<li>We <a href="https://github.com/0xcite/fingerping/pull/2">added</a> the fingerprint of libvips to the fingerping library</li>
<li>We <a href="https://github.com/silentsignal/upload-scanner/tree/entropy">added</a> an additional test to the UploadScanner extension that detects noise on the images retrieved via ReDownloader by trying to compress the raw bitmap data. Low compression rate indicates high entropy data that needs to be investigated. According to our internal tests memory leaks result in ~10x worse compression ratios than normal images. The current implementation is proof-of-concept level, community feedback is much appreciated!</li>
</ul>
<p>As for white-box approaches, detecting similar bugs in libraries looks like a difficult task: although libvips has <a href="https://github.com/jcupitt/vips-libfuzzer">infrastructure</a> for <a href="https://github.com/libvips/libvips/issues/695">fuzzing</a>, uninitialized memory issues generally don&#8217;t result in illegal memory access, and are thus not caught by most fuzzers. As we saw above, ASAN didn&#8217;t notice the problem either, although it made it more apparent for human inspection. After some experimentation Valgrind was able to detect the problem &#8211; the differences of the output for fixed and unfixed versions can be seen on the screenshot below (outputs were sanitized for clarity):</p>
<p><a href="https://blog.silentsignal.eu/wp-content/uploads/2019/02/valgrind_cleaned_diff.png"><img loading="lazy" class="alignnone size-medium wp-image-1258" src="https://blog.silentsignal.eu/wp-content/uploads/2019/02/valgrind_cleaned_diff-300x127.png" alt="" width="300" height="127" srcset="https://blog.silentsignal.eu/wp-content/uploads/2019/02/valgrind_cleaned_diff-300x127.png 300w, https://blog.silentsignal.eu/wp-content/uploads/2019/02/valgrind_cleaned_diff-768x325.png 768w, https://blog.silentsignal.eu/wp-content/uploads/2019/02/valgrind_cleaned_diff-1024x433.png 1024w, https://blog.silentsignal.eu/wp-content/uploads/2019/02/valgrind_cleaned_diff.png 1834w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<h3>Conclusions</h3>
<p>In this post we gave a detailed description of identifying and assessing a previously unknown vulnerability. Taking into the account the difficulties of detection, we believe that numerous similar issues are still lurking in applications big and small.</p>
<p>Image processing libraries are prone to bugs related to unsafe memory handling due to the complexity of their tasks. While in case of large-scale image processing tasks choosing a low-level, high-performance implementation may reasonable, most (web) applications don&#8217;t need to perform that much processing, so choosing less performant, but memory-safe <a href="https://github.com/oliver-moran/jimp">implementations</a> to handle untrusted image data seems generally reasonable. We have to note a couple of things though:</p>
<ul>
<li>First of all, it&#8217;s currently not easy to tell if a particular library has any components implemented as native code. We wish more libraries declare this explicitly in their documentation.</li>
<li>Managed runtimes and built-in libraries can also suffer from vulnerabilities. Nonetheless, they still can be considered much safer than any new C/C++ code written from scratch.</li>
</ul>
<p>From disclosure point of view, the handling of this vulnerability was ideal, with fast and professional responses from each affected party. This example also shows how much work it takes to deliver even the smallest fixes in a coordinated fashion &#8211; something people in security often forget. We&#8217;d like to thank John Cupitt and and Lovell Fuller for their outstanding response, the provided technical insight and helping with the coordination of the fixes! We also thank everyone involved in delivering the fixes to users in time!</p>
<h3>Timeline</h3>
<p>2019-01-18: Vulnerability reported to libvips and Sharp<br />
2019-01-18: <a href="https://github.com/libvips/libvips/releases/tag/v8.7.4">libvips 8.7.4</a> released, fixing the issue<br />
2019-01-18: Debian, RedHat and net-vips notified<br />
2019-01-18: <a href="https://github.com/lovell/sharp/commit/fa69ff773a18c599ddd95ee2d246cac7ac529521">Sharp</a> changes to fail fast<br />
2019-01-18: libvips version bumped in <a href="https://github.com/Homebrew/homebrew-core/commit/591d0350bd9cb4455163a65a0e081ff8afdc78cb">Homebrew<br />
</a>2019-01-18: <a href="https://metadata.ftp-master.debian.org/changelogs//main/v/vips/vips_8.7.4-1_changelog">Debian</a> updated<br />
2019-01-18: <a href="https://www.nuget.org/packages/NetVips/1.0.7">NetVips</a> updated<br />
2019-01-18: <a href="https://src.fedoraproject.org/rpms/vips/c/2b3571d4025bde15f2436b44d83e9fdbc1579558?branch=master">Fedora</a> and <a href="https://git.remirepo.net/cgit/rpms/lib/vips.git/commit/?id=da7e98f815feef0818d7a71f1d6b667824181db8">Remi&#8217;s</a> RPM updated<br />
2019-01-18: <a href="https://github.com/macports/macports-ports/commit/95b3b2dfa2e29f526e9f589a047bcdddc7f3fd36#diff-8fae97472fb24942c43c49047b38411d">MacPorts</a> updated<br />
2019-01-19: libvips version bumped in <a href="https://github.com/alpinelinux/aports/pull/6074">Alpine Linux aports<br />
</a>2019-01-26: MITRE assigns CVE-2019-6976 and publishes inaccurate vulnerability information<br />
2019-03-31: Patch for Debian stable <a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=924145">uploaded</a><br />
2019-04-04: Patch for Debian stable <a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=924145">accepted<br />
2</a>019-04-18: Blog post published in blog.silentsignal.eu<br />
2019-04-18: Requested CVE update from MITRE<br />
2019-04-24: MITRE updates CVE information</p>
<!-- Simple Share Buttons Adder (7.5.19) simplesharebuttons.com --><div class="ssba-classic-2 ssba ssbp-wrap left ssbp--theme-1"><div style="text-align:left"><a href="https://simplesharebuttons.com" target="_blank" class="ssba-share-text">Share this, because you can!</a><a data-site="" class="ssba_facebook_share" href="http://www.facebook.com/sharer.php?u=https://blog.silentsignal.eu/2019/04/18/drop-by-drop-bleeding-through-libvips/"  target="_blank" ><img src="https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/buttons/simple/facebook.png" style="width: 35px;" title="Facebook" class="ssba ssba-img" alt="Share on Facebook" /><div title="Facebook" class="ssbp-text">Facebook</div></a><a data-site="" class="ssba_twitter_share" href="http://twitter.com/share?url=https://blog.silentsignal.eu/2019/04/18/drop-by-drop-bleeding-through-libvips/&amp;text=Drop-by-Drop%3A%20Bleeding%20through%20libvips%20"  target=&quot;_blank&quot; ><img src="https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/buttons/simple/twitter.png" style="width: 35px;" title="Twitter" class="ssba ssba-img" alt="Tweet about this on Twitter" /><div title="Twitter" class="ssbp-text">Twitter</div></a><a data-site="reddit" class="ssba_reddit_share" href="http://reddit.com/submit?url=https://blog.silentsignal.eu/2019/04/18/drop-by-drop-bleeding-through-libvips/&amp;title=Drop-by-Drop: Bleeding through libvips"  target=&quot;_blank&quot; ><img src="https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/buttons/simple/reddit.png" style="width: 35px;" title="Reddit" class="ssba ssba-img" alt="Share on Reddit" /><div title="Reddit" class="ssbp-text">Reddit</div></a><a data-site="digg" class="ssba_diggit_share ssba_share_link" href="http://www.digg.com/submit?url=https://blog.silentsignal.eu/2019/04/18/drop-by-drop-bleeding-through-libvips/"  target=&quot;_blank&quot; ><img src="https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/buttons/simple/diggit.png" style="width: 35px;" title="Digg" class="ssba ssba-img" alt="Digg this" /><div title="Digg" class="ssbp-text">Digg</div></a><a data-site="tumblr" class="ssba_tumblr_share" href="http://www.tumblr.com/share/link?url=https://blog.silentsignal.eu/2019/04/18/drop-by-drop-bleeding-through-libvips/"  target=&quot;_blank&quot; ><img src="https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/buttons/simple/tumblr.png" style="width: 35px;" title="tumblr" class="ssba ssba-img" alt="Share on Tumblr" /><div title="Tumblr" class="ssbp-text">Tumblr</div></a><a data-site="linkedin" class="ssba_linkedin_share ssba_share_link" href="http://www.linkedin.com/shareArticle?mini=true&amp;url=https://blog.silentsignal.eu/2019/04/18/drop-by-drop-bleeding-through-libvips/"  target=&quot;_blank&quot; ><img src="https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/buttons/simple/linkedin.png" style="width: 35px;" title="LinkedIn" class="ssba ssba-img" alt="Share on LinkedIn" /><div title="Linkedin" class="ssbp-text">Linkedin</div></a><a data-site="flattr" class="ssba_flattr_share" href="https://flattr.com/submit/auto?user_id=&amp;title=Drop-by-Drop: Bleeding through libvips&amp;url=https://blog.silentsignal.eu/2019/04/18/drop-by-drop-bleeding-through-libvips/"  target=&quot;_blank&quot; ><img src="https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/buttons/simple/flattr.png" style="width: 35px;" title="Flattr" class="ssba ssba-img" alt="Flattr the author" /><div title="Flattr" class="ssbp-text">Flattr</div></a></div></div>    </div>

  </div>


  <hr class="dotted" />

          </div>
        </div>

      </main><!-- /.main -->

      <link rel='stylesheet' id='simple-share-buttons-adder-ssba-css'  href='https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/css/ssba.css?ver=5.7.1' type='text/css' media='all' />
<style id='simple-share-buttons-adder-ssba-inline-css' type='text/css'>
	.ssba {
									
									
									
									
								}
								.ssba img
								{
									width: 35px !important;
									padding: 6px;
									border:  0;
									box-shadow: none !important;
									display: inline !important;
									vertical-align: middle;
									box-sizing: unset;
								}
								
								.ssba-classic-2 .ssbp-text {
									display: none!important;
								}
								
								.ssba .fb-save
								{
								padding: 6px;
								line-height: 30px; }
								.ssba, .ssba a
								{
									text-decoration:none;
									background: none;
									font-family: Indie Flower;
									font-size: 20px;
									
									
								}
								

			   #ssba-bar-2 .ssbp-bar-list {
					max-width: 48px!important;;
			   }
			   #ssba-bar-2 .ssbp-bar-list li a {height: 48px!important; width: 48px!important; 
				}
				#ssba-bar-2 .ssbp-bar-list li a:hover {
				}
					
				#ssba-bar-2 .ssbp-bar-list li a::before {line-height: 48px!important;; font-size: 18px;}
				#ssba-bar-2 .ssbp-bar-list li a:hover::before {}
				#ssba-bar-2 .ssbp-bar-list li {
				margin: 0px 0!important;
				}@media only screen and ( max-width: 750px ) {
				#ssba-bar-2 {
				display: block;
				}
			}
@font-face {
				font-family: 'ssbp';
				src:url('https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/fonts/ssbp.eot?xj3ol1');
				src:url('https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/fonts/ssbp.eot?#iefixxj3ol1') format('embedded-opentype'),
					url('https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/fonts/ssbp.woff?xj3ol1') format('woff'),
					url('https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/fonts/ssbp.ttf?xj3ol1') format('truetype'),
					url('https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/fonts/ssbp.svg?xj3ol1#ssbp') format('svg');
				font-weight: normal;
				font-style: normal;

				/* Better Font Rendering =========== */
				-webkit-font-smoothing: antialiased;
				-moz-osx-font-smoothing: grayscale;
			}
</style>
<script type='text/javascript' src='https://blog.silentsignal.eu/wp-content/plugins/simple-share-buttons-adder/js/ssba.js?ver=5.7.1' id='simple-share-buttons-adder-ssba-js'></script>
<script type='text/javascript' id='simple-share-buttons-adder-ssba-js-after'>
Main.boot( [] );
</script>
<script type='text/javascript' src='https://blog.silentsignal.eu/wp-content/themes/silentsignal-theme/dist/scripts/main.js' id='sage/js-js'></script>
<script type='text/javascript' src='https://blog.silentsignal.eu/wp-includes/js/wp-embed.min.js?ver=5.7.1' id='wp-embed-js'></script>
<script type='text/javascript' src='https://blog.silentsignal.eu/wp-content/plugins/easy-fancybox/fancybox/jquery.fancybox-1.3.8.min.js?ver=1.5.8.2' id='jquery-fancybox-js'></script>
<script type='text/javascript' src='https://blog.silentsignal.eu/wp-content/plugins/easy-fancybox/js/jquery.easing.min.js?ver=1.3.2' id='jquery-easing-js'></script>
<script type='text/javascript' src='https://blog.silentsignal.eu/wp-content/plugins/easy-fancybox/js/jquery.mousewheel.min.js?ver=3.1.12' id='jquery-mousewheel-js'></script>
<script type="text/javascript">
jQuery(document).on('ready post-load', function(){ jQuery('.nofancybox,a.pin-it-button,a[href*="pinterest.com/pin/create/button"]').addClass('nolightbox'); });
jQuery(document).on('ready post-load',easy_fancybox_handler);
jQuery(document).on('ready',easy_fancybox_auto);</script>
    </div>
  </body>
</html>
