<!DOCTYPE html>
<html lang="en">
  <head>
    <title>80163 &ndash; CVE-2014-3532: kick any connection off the bus with fdpassing: denial of service</title>

      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<link href="data/assets/c60deb3d48830179eae269c9e65a7506.css?1462892334" rel="stylesheet" type="text/css">



    
<script type="text/javascript" src="data/assets/a7c2f3a028f17a9aa60f56dc9d6e732d.js?1462892331"></script>

    <script type="text/javascript">
    <!--
        YAHOO.namespace('bugzilla');
        YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
               if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
               var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
               return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
         };
        if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
            YAHOO.util.Event._simpleRemove(window, "unload", 
                                           YAHOO.util.Event._unload);
        }
        
        function unhide_language_selector() { 
            YAHOO.util.Dom.removeClass(
                'lang_links_container', 'bz_default_hidden'
            ); 
        } 
        YAHOO.util.Event.onDOMReady(unhide_language_selector);

        
        var BUGZILLA = {
            param: {
                cookiepath: '\/',
                maxusermatches: 1000
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    "You must enter a Description for this attachment.",
                component_required:
                    "You must select a Component for this bug.",
                description_required:
                    "You must enter a Description for this bug.",
                short_desc_required:
                    "You must enter a Summary for this bug.",
                version_required:
                    "You must select a Version for this bug."
            }
              , api_token: ''
        };

    if (history && history.replaceState) {
      if(!document.location.href.match(/show_bug\.cgi/)) {
        history.replaceState( null,
                             "80163 – CVE-2014-3532: kick any connection off the bus with fdpassing: denial of service",
                             "show_bug.cgi?id=80163" );
        document.title = "80163 – CVE-2014-3532: kick any connection off the bus with fdpassing: denial of service";
      }
      if (document.location.href.match(/show_bug\.cgi\?.*list_id=/)) {
        var href = document.location.href;
        href = href.replace(/[\?&]+list_id=(\d+|cookie)/, '');
        history.replaceState(null, "80163 – CVE-2014-3532: kick any connection off the bus with fdpassing: denial of service", href);
      }
    }
    YAHOO.util.Event.onDOMReady(function() {
      initDirtyFieldTracking();

    });
    // -->
    </script>
<script type="text/javascript" src="data/assets/daf5e0fb6826e6a35280e622913f0c4a.js?1462892334"></script>

    

    
    <link rel="search" type="application/opensearchdescription+xml"
                       title="Bugzilla" href="./search_plugin.cgi">
    <link rel="shortcut icon" href="images/favicon.ico">
  </head>

  <body 
        class="bugs-freedesktop-org
                 bz_bug
                 bz_status_RESOLVED
                 bz_product_dbus
                 bz_component_core
                 bz_bug_80163 yui-skin-sam">

  <div id="header"><div id="banner">
  </div>

    <div id="titles">
      <span id="title">Bugzilla &ndash; Bug&nbsp;80163</span>

        <span id="subtitle" class="subheader">CVE-2014-3532: kick any connection off the bus with fdpassing: denial of service</span>

        <span id="information" class="header_addl_info">Last modified: 2014-07-02 16:12:43 UTC</span>
    </div>


    <div id="common_links"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_top" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_top");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_top" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_top"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>


</ul>
    </div>
  </div>

  <div id="bugzilla-body">


<script type="text/javascript">
<!--

//-->
</script>

<form name="changeform" id="changeform" method="post" action="process_bug.cgi">

  <input type="hidden" name="delta_ts" value="2014-07-02 16:12:43">
  <input type="hidden" name="id" value="80163">
  <input type="hidden" name="token" value="1635619159-TdtngR_E2sAebtnrjBOnDYmWYPN6BUZEpkTFz-z4GZc">
<div class="bz_short_desc_container edit_form">
     <a href="show_bug.cgi?id=80163"><b>Bug&nbsp;80163</b></a> <span id="summary_container" class="bz_default_hidden">
      - <span id="short_desc_nonedit_display">CVE-2014-3532: kick any connection off the bus with fdpassing: denial of service</span>
     </span>

    <div id="summary_input"><span class="field_label "
    id="field_label_short_desc">


  <a 
      title="The bug summary is a short sentence which succinctly describes what the bug is about."
      class="field_help_link"
      href="page.cgi?id=fields.html#short_desc"
  >Summary:</a>

</span>CVE-2014-3532: kick any connection off the bus with fdpassing: denial of service
    </div>
  </div>
  <script type="text/javascript">
    hideEditableField('summary_container',
                      'summary_input',
                      'summary_edit_action',
                      'short_desc',
                      'CVE-2014-3532: kick any connection off the bus with fdpassing: denial of service' );
  </script>
  <table class="edit_form">
    <tr>
      
      <td id="bz_show_bug_column_1" class="bz_show_bug_column">     
        <table>
          <tr>
    <th class="field_label">
      <a href="page.cgi?id=fields.html#bug_status">Status</a>:
    </th>
    <td id="bz_field_status">
      <span id="static_bug_status">RESOLVED
          FIXED
      </span>
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_alias">


  <a 
      title="A short, unique name assigned to a bug in order to assist with looking it up and referring to it in other places in Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#alias"
  >Alias:</a>

</th>
    <td>
        None
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_product">


  <a 
      title="Bugs are categorised into Products and Components."
      class="field_help_link"
      href="describecomponents.cgi"
  >Product:</a>

</th>
  <td class="field_value "
      id="field_container_product" >dbus

</td>
    </tr>

    
    <tr class="bz_default_hidden"><th class="field_label "
    id="field_label_classification">


  <a 
      title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation."
      class="field_help_link"
      href="page.cgi?id=fields.html#classification"
  >Classification:</a>

</th>
  <td class="field_value "
      id="field_container_classification" >Unclassified

</td>
    </tr>
        
    
    
    <tr><th class="field_label "
    id="field_label_component">


  <a 
      title="Components are second-level categories; each belongs to a particular Product. Select a Product to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi?product=dbus"
  >Component:</a>

</th>
  <td class="field_value "
      id="field_container_component" >core

  (<a href="buglist.cgi?component=core&amp;product=dbus&amp;bug_status=__open__"
      target="_blank">show other bugs</a>)
</td>
    </tr>
    <tr><th class="field_label "
    id="field_label_version">


  <a 
      title="The version field defines the version of the software the bug was found in."
      class="field_help_link"
      href="page.cgi?id=fields.html#version"
  >Version:</a>

</th>
<td>unspecified
  </td>
    </tr>
        
    
        
    <tr><th class="field_label "
    id="field_label_rep_platform">


  <a 
      title="The hardware platform the bug was observed on. Note: When searching, selecting the option &quot;All&quot; only finds bugs whose value for this field is literally the word &quot;All&quot;."
      class="field_help_link"
      href="page.cgi?id=fields.html#rep_platform"
  >Hardware:</a>

</th>
      <td class="field_value">Other
        Linux (All)
      </td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          
          <tr>
      <th class="field_label">
        <label  accesskey="i">
          <a href="page.cgi?id=fields.html#importance"><u>I</u>mportance</a></label>:
      </th>
      <td>medium
       normal
      </td>
    </tr>
          
          <tr><th class="field_label "
    id="field_label_assigned_to">


  <a 
      title="The person in charge of resolving the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#assigned_to"
  >Assignee:</a>

</th>
      <td><span class="vcard"><span class="fn">Simon McVittie</span>
</span>
      </td>
    </tr>

    <tr><th class="field_label "
    id="field_label_qa_contact">


  <a 
      title="The person responsible for confirming this bug if it is unconfirmed, and for verifying the fix once the bug has been resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#qa_contact"
  >QA Contact:</a>

</th>
      <td><span class="vcard"><span class="fn">Sjoerd Simons</span>
</span>
      </td>
    </tr>
    <script type="text/javascript">
      assignToDefaultOnChange(['product', 'component'],
        'dbus\x40maint.invalid',
        'dbus\x40maint.invalid');
    </script>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          <tr><th class="field_label "
    id="field_label_bug_file_loc">


  <a 
      title="Bugs can have a URL associated with them - for example, a pointer to a web site where the problem is seen."
      class="field_help_link"
      href="page.cgi?id=fields.html#bug_file_loc"
  >URL:</a>

</th>
    <td>
      <span id="bz_url_input_area">
      </span>
    </td>
  </tr>

    <tr><th class="field_label "
    id="field_label_status_whiteboard">


  <a 
      title="Each bug has a free-form single line text entry box for adding tags and status information."
      class="field_help_link"
      href="page.cgi?id=fields.html#status_whiteboard"
  >Whiteboard:</a>

</th><td>  
  </td>
    </tr>

    <tr><th class="field_label "
    id="field_label_keywords">


  <a 
      title="You can add keywords from a defined list to bugs, in order to easily identify and group them."
      class="field_help_link"
      href="describekeywords.cgi"
  >Keywords:</a>

</th>
  <td class="field_value "
      id="field_container_keywords" >security

</td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>

          
<tr><th class="field_label "
    id="field_label_dependson">


  <a 
      title="The bugs listed here must be resolved before this bug can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#dependson"
  >Depends on:</a>

</th>

  <td>
    <span id="dependson_input_area">
    </span>

  </td>
  </tr>
  
  <tr><th class="field_label "
    id="field_label_blocked">


  <a 
      title="This bug must be resolved before the bugs listed in this field can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#blocked"
  >Blocks:</a>

</th>

  <td>
    <span id="blocked_input_area">
    </span>
<a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED MOVED - followup for CVE-2014-3532: messages with abusive recursion are silently dropped"
   href="show_bug.cgi?id=80817">80817</a> 
  </td>
  </tr>

    <tr>
      <th>&nbsp;</th>

      <td id="show_dependency_tree_or_graph">
        Show dependency <a href="showdependencytree.cgi?id=80163&amp;hide_resolved=1">tree</a>

          /&nbsp;<a href="showdependencygraph.cgi?id=80163">graph</a>
      </td>
    </tr>
          
        </table>
      </td>
      <td>
        <div class="bz_column_spacer">&nbsp;</div>
      </td>
      
      <td id="bz_show_bug_column_2" class="bz_show_bug_column">
        <table>
        <tr>
    <th class="field_label">
      Reported:
    </th>
    <td>2014-06-17 20:17 UTC by <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
    </td>
  </tr>
  
  <tr>
    <th class="field_label">
      Modified:
    </th>
    <td>2014-07-02 16:12 UTC
      (<a href="show_activity.cgi?id=80163">History</a>)
    </td>
  
  </tr>
<tr>
      <th class="field_label">
        <label  accesskey="a">
          CC List:
        </label>
      </th>
      <td>4 
          users
          <span id="cc_edit_area_showhide_container" class="bz_default_hidden">
            (<a href="#" id="cc_edit_area_showhide">show</a>)
          </span>
        <div id="cc_edit_area">
          <br>
            <select id="cc" multiple="multiple" size="5" >
                <option value="kay">kay</option>
                <option value="lennart">lennart</option>
                <option value="thiago">thiago</option>
                <option value="walters">walters</option>
            </select>
        </div>
          <script type="text/javascript">
            hideEditableField( 'cc_edit_area_showhide_container', 
                               'cc_edit_area', 
                               'cc_edit_area_showhide', 
                               '', 
                               '');  
          </script>
      </td>
    </tr>

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_see_also">


  <a 
      title="This allows you to refer to bugs in other installations. You can enter a URL to a bug in the 'Add Bug URLs' field to note that that bug is related to this one. You can enter multiple URLs at once by separating them with whitespace. You should normally use this field to refer to bugs in other installations. For bugs in this installation, it is better to use the Depends on and Blocks fields."
      class="field_help_link"
      href="page.cgi?id=fields.html#see_also"
  >See Also:</a>

</th>
  <td class="field_value "
      id="field_container_see_also" >

</td>
    </tr> 
<tr>
      <th class="field_label  bz_hidden_field"
    id="field_label_cf_i915_platform">


  <a 
      title="Intel platforms affected by the bug"
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_i915_platform"
  >i915 platform:</a>

</th>
  <td class="field_value  bz_hidden_field"
      id="field_container_cf_i915_platform" >

</td>
    </tr>
    <tr>
      <th class="field_label  bz_hidden_field"
    id="field_label_cf_i915_features">


  <a 
      title="Features of the i915 driver affected by the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_i915_features"
  >i915 features:</a>

</th>
  <td class="field_value  bz_hidden_field"
      id="field_container_cf_i915_features" >

</td>
    </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>



        </table>
      </td>
    </tr>
    <tr>
      <td colspan="3">
          <hr id="bz_top_half_spacer">
      </td>
    </tr>
  </table>

  <table id="bz_big_form_parts">
  <tr>
  <td>

    
<script type="text/javascript">
<!--
function toggle_display(link) {
    var table = document.getElementById("attachment_table");
    var view_all = document.getElementById("view_all");
    var hide_obsolete_url_parameter = "&hide_obsolete=1";
    // Store current height for scrolling later
    var originalHeight = table.offsetHeight;
    var rows = YAHOO.util.Dom.getElementsByClassName(
        'bz_tr_obsolete', 'tr', table);

    for (var i = 0; i < rows.length; i++) {
        bz_toggleClass(rows[i], 'bz_default_hidden');
    }

    if (YAHOO.util.Dom.hasClass(rows[0], 'bz_default_hidden')) {
        link.innerHTML = "Show Obsolete";
        view_all.href = view_all.href + hide_obsolete_url_parameter 
    }
    else {
        link.innerHTML = "Hide Obsolete";
        view_all.href = view_all.href.replace(hide_obsolete_url_parameter,"");
    }

    var newHeight = table.offsetHeight;
    // This scrolling makes the window appear to not move at all.
    window.scrollBy(0, newHeight - originalHeight);

    return false;
}
//-->
</script>

<br>
<table id="attachment_table">
  <tr id="a0">
    <th colspan="2" class="left">
      Attachments
    </th>
  </tr>


      <tr id="a1" class="bz_contenttype_image_jpeg">
        <td>
            <a href="attachment.cgi?id=101289"
               title="View the content of the attachment">
          <b>dbus-dos-recursive-fdpass.jpg</b></a>

          <span class="bz_attach_extra_info">
              (125.81 KB,
                image/jpeg)

            <br>
            <a href="#attach_101289"
               title="Go to the comment associated with the attachment">2014-06-18 09:27 UTC</a>,

            <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=101289&amp;action=edit">Details</a>
        </td>
      </tr>
      <tr id="a2" class="bz_contenttype_text_plain bz_patch">
        <td>
            <a href="attachment.cgi?id=101748"
               title="View the content of the attachment">
          <b>[PATCH] Handle ETOOMANYREFS</b></a>

          <span class="bz_attach_extra_info">
              (12.76 KB,
                patch)

            <br>
            <a href="#attach_101748"
               title="Go to the comment associated with the attachment">2014-06-25 14:20 UTC</a>,

            <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=101748&amp;action=edit">Details</a>&#x0020; |
    <a href="https://bugs.freedesktop.org/page.cgi?id=splinter.html&amp;bug=80163&amp;attachment=101748">
      Splinter Review</a>
        </td>
      </tr>
      <tr id="a3" class="bz_contenttype_text_plain bz_patch bz_tr_obsolete bz_default_hidden">
        <td>
            <a href="attachment.cgi?id=101754"
               title="View the content of the attachment">
          <b><span class="bz_obsolete">[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)</span></b></a>

          <span class="bz_attach_extra_info">
              (4.04 KB,
                patch)

            <br>
            <a href="#attach_101754"
               title="Go to the comment associated with the attachment">2014-06-25 17:51 UTC</a>,

            <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=101754&amp;action=edit">Details</a>&#x0020; |
    <a href="https://bugs.freedesktop.org/page.cgi?id=splinter.html&amp;bug=80163&amp;attachment=101754">
      Splinter Review</a>
        </td>
      </tr>
      <tr id="a4" class="bz_contenttype_text_plain bz_patch">
        <td>
            <a href="attachment.cgi?id=101811"
               title="View the content of the attachment">
          <b>[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)</b></a>

          <span class="bz_attach_extra_info">
              (4.17 KB,
                patch)

            <br>
            <a href="#attach_101811"
               title="Go to the comment associated with the attachment">2014-06-26 15:40 UTC</a>,

            <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=101811&amp;action=edit">Details</a>&#x0020; |
    <a href="https://bugs.freedesktop.org/page.cgi?id=splinter.html&amp;bug=80163&amp;attachment=101811">
      Splinter Review</a>
        </td>
      </tr>

  <tr class="bz_attach_footer">
    <td colspan="2">
        <span class="bz_attach_view_hide">
            <a href="#a0" onclick="return toggle_display(this);">Show
              Obsolete</a> (1)
            <a id="view_all" href="attachment.cgi?bugid=80163&amp;action=viewall&amp;hide_obsolete=1">View All</a>
        </span>
    </td>
  </tr>
</table>
<br>
  </td>
  <td>
  </td>
  </tr></table>

  
  <div id="comments"><script src="js/comments.js?1462891770" type="text/javascript">
</script>

<script type="text/javascript">
<!--
  /* Adds the reply text to the 'comment' textarea */
  function replyToComment(id, real_id, name) {
      var prefix = "(In reply to " + name + " from comment #" + id + ")\n";
      var replytext = "";
        /* pre id="comment_name_N" */
        var text_elem = document.getElementById('comment_text_'+id);
        var text = getText(text_elem);
        replytext = prefix + wrapReplyText(text);


      /* <textarea id="comment"> */
      var textarea = document.getElementById('comment');
      if (textarea.value != replytext) {
          textarea.value += replytext;
      }

      textarea.focus();
  } 
//-->
</script>


<!-- This auto-sizes the comments and positions the collapse/expand links 
     to the right. -->
<table class="bz_comment_table">
<tr>
<td>
<div id="c0" class="bz_comment bz_first_comment">

      <div class="bz_first_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c0">Description</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-17 20:17:23 UTC
        </span>

      </div>




<pre class="bz_comment_text">Since Linux commit 25888e (from 2.6.37-rc4, Nov 2010), sendmsg() on Unix
sockets returns -1 errno=ETOOMANYREFS (&quot;Too many references: cannot splice&quot;)
when the passfd mechanism (SCM_RIGHTS) is &quot;abusively&quot; used recursively by
applications:

<span class="quote">&gt;    commit 25888e30319f8896fc656fc68643e6a078263060
&gt;    Author: Eric Dumazet &lt;<a href="mailto:eric.dumazet&#64;gmail.com">eric.dumazet&#64;gmail.com</a>&gt;
&gt;    Date:   Thu Nov 25 04:11:39 2010 +0000</span >

An original fd can be inserted in the ancillary data of a message. While that
message is waiting in the socket queue of the other end, the fd of the other
end can itself be inserted in the ancillary data of another message. This
commit considers that doing that recursively more than 4 times is abusive:
#define MAX_RECURSION_LEVEL 4

This is to avoid eating all the kernel memory and internal file descriptors in
the kernel: the memory used by the socket queue are not part of processes'
memory and cannot be limited by ulimit / cgroups.

The kernel does not have an API to check whether a file descriptor is used
recursively as described. Therefore dbus-daemon has no way to check whether a
received fd will trigger a ETOOMANYREFS when forwarding the D-Bus message to
recipients. Moreover, the ability to forward the file descriptor changes
asynchronously when other processes append messages on the fd's delivery queue.

dbus-daemon does not handle ETOOMANYREFS: only EINTR is checked by
dbus/dbus-sysdeps-unix.c:_dbus_write_socket_with_unix_fds_two():

<span class="quote">&gt;   bytes_written = sendmsg (fd, &amp;m, 0
&gt; #if HAVE_DECL_MSG_NOSIGNAL
&gt;                            |MSG_NOSIGNAL
&gt; #endif
&gt;                            );
&gt; 
&gt;   if (bytes_written &lt; 0 &amp;&amp; errno == EINTR)
&gt;     goto again;
&gt; [...]
&gt;   return bytes_written;</span >

This causes the caller to handle ETOOMANYREFS the same way as EPIPE. Then,
dbus-daemon believes that the socket was closed and closes its end of the
socket.

I wrote a program 'e' to demonstrate the security issue:
$ ./e org.pulseaudio.Server

It causes dbus-daemon to disconnect whoever owns that D-Bus name. Since D-Bus
libraries terminate programs when their D-Bus socket is closed, 'e' can kill
any target programs on the bus.

I can send 'e' to D-Bus maintainers by private email in order to test fixes.

Mitigation 1: if 'e' is not allowed to send a D-Bus message to the target due
to SCMs or due to the D-Bus policy, then 'e' will not be able to kill the
target.

Mitigation 2: Linux kernels older than 2.6.37-rc4 are not affected.</pre>
    </div>

    <div id="c1" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c1">Comment 1</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Thiago Macieira</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-17 21:09:54 UTC
        </span>

      </div>




<pre class="bz_comment_text">I'm not sure I understand what the problem is. Is someone trying to pass the file descriptor of the D-Bus connection itself?</pre>
    </div>

    <div id="c2" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c2">Comment 2</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-18 09:27:34 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=101289" name="attach_101289" title="dbus-dos-recursive-fdpass.jpg">attachment 101289</a> <a href="attachment.cgi?id=101289&amp;action=edit" title="dbus-dos-recursive-fdpass.jpg">[details]</a></span>
dbus-dos-recursive-fdpass.jpg

(In reply to <a href="show_bug.cgi?id=80163#c1">comment #1</a>)
<span class="quote">&gt; I'm not sure I understand what the problem is. Is someone trying to pass the
&gt; file descriptor of the D-Bus connection itself?</span >

No, fds of D-Bus connections are not passed around. I am attaching a schema to show this.

The malicious program creates 5 socket pairs with socketpair(2):
(fd1, fd2), (fd3, fd4), (fd5, fd6), (fd7, fd8), (fd9, fd10)

The kernel initializes all unix_sk(sk)-&gt;recursion_level to 0.

And it passes fds around in this way:
- A packet containing fd2 is sent through fd3 to reach fd4's delivery queue
  (fd4's recursion level is 1)
- A packet containing fd4 is sent through fd5 to reach fd6's delivery queue
  (fd6's recursion level is 2)
- A packet containing fd6 is sent through fd7 to reach fd8's delivery queue
  (fd8's recursion level is 3)
- A packet containing fd8 is sent through fd9 to reach fd10's delivery queue
  (fd10's recursion level is MAX_RECURSION_LEVEL=4 so it cannot be passed)

So far, D-Bus socket fd11 was not involved. Then:
- A D-Bus message containing fd8 is sent through D-Bus socket fd11 to reach
  fd12's delivery queue in the dbus-daemon process.
- dbus-daemon receives the message and fd8. fd8's recursion level is still 3,
  so it could forward it to another D-Bus client. Unfortunately, fd8's
  recursion level can change at any time, because the malicious program still
  has a copy of fd8.
- The malicious program now sends a packet containing fd8 through fd7 to
  reach fd8's delivery queue. fd8's recursion level is now
  MAX_RECURSION_LEVEL=4 and fd8 cannot be passed anymore.
- dbus-daemon is scheduled and tries to forward the D-Bus message containing
  fd8 through fd13 for another client. It fails with ETOOMANYREFS.
- dbus-daemon close(fd13)
- another_client is notified on fd14 that the D-Bus connection is shutdown and
  it terminates. The malicious program managed to kill another_client in this
  way.</pre>
    </div>

    <div id="c3" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c3">Comment 3</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-18 10:54:44 UTC
        </span>

      </div>




<pre class="bz_comment_text">While we're looking at file descriptor passing, <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED FIXED - Misbehaviour reading a message with passing file descriptors (duplicate/missing fds)"
   href="show_bug.cgi?id=79694">Bug #79694</a> is not a security vulnerability, but is fairly fundamental and only avoided being a buffer overflow by luck (one bug compensated for another) so it would be good to review + fix.

The obvious solution here is to catch ETOOMANYREFS. Unfortunately, by the time we start calling sendmsg(), it's too late to refuse to forward the message, so the only thing we can do is to drop it on the floor (possibly with a best-effort notification back to the sender, but if the sender is doing this maliciously, they don't deserve for dbus-daemon to go to extra effort to notify them that they have failed).

It's unfortunate that we can't ask the kernel &quot;is this OK to forward?&quot; but that would be a TOCTOU (time of check / time of use) vulnerability in any case - as Alban points out, this attack only works if the malicious sender alters the recursion depth of the fd after dbus-daemon has already received it.

Catching ETOOMANYREFS in the same way as EINTR would not be correct: we'd busy-loop forever. EINTR is the thing that's special here: you can get it in otherwise normal operation.

The least bad solution I can think of is for do_writing() in dbus-transport-socket.c to distinguish between *three* categories of error:

* Those that are ignored: currently EAGAIN, EWOULDBLOCK, EPIPE

* Those that are fatal to the connection: currently the default for
  unknown errno; ECONNRESET certainly needs to be in this category

* New category: those that cause the rest of this message to be skipped,
  but do not disconnect the connection entirely:
  ETOOMANYREFS

I suppose another possibility would be to re-send the message without the fd, and let the recipient deal with the missing fd; but that's only viable if major D-Bus implementations (libdbus, GDBus, systemd-bus) don't treat that as fatal.

I would welcome better ideas...</pre>
    </div>

    <div id="c4" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c4">Comment 4</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-18 10:56:05 UTC
        </span>

      </div>




<pre class="bz_comment_text">Adding Lennart to Cc since iirc he wrote this stuff in the first place, so he might have ideas for how to solve it.</pre>
    </div>

    <div id="c5" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c5">Comment 5</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-18 12:34:44 UTC
        </span>

      </div>




<pre class="bz_comment_text">(For completeness, another possibility would be to read things from the passed file descriptor to remove all packets from the delivery queue and to reduce the recursion depth to zero. dbus-daemon could check the content with recvfrom(MSG_PEEK) before removing them. But it would be intrusive for no good reason.)

I think dropping the message on the floor, with an error logged, and without notifying the sender is the best option.

I don't see any good reason to support more than 1 recursion depth in fd passing anyway.</pre>
    </div>

    <div id="c6" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c6">Comment 6</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Thiago Macieira</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-18 14:46:42 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=80163#c5">comment #5</a>)
<span class="quote">&gt; I think dropping the message on the floor, with an error logged, and without
&gt; notifying the sender is the best option.</span >

I actually think we should report an error if we can, since this might not be malicious at all.

<span class="quote">&gt; I don't see any good reason to support more than 1 recursion depth in fd
&gt; passing anyway.</span >

That breaks abstractions. Sometimes, the level passing the fds doesn't know what the fds are. They may be other sockets that are doing work and happen to be passing file descriptors by themselves.

In any case, we can't detect 1 level any more than we can detect max-level. We can only try to pass and see what happens if we do.

For method calls, we should report the error back to the caller (if we can), if this isn't an eavasdropping delivery. For everything else, we drop the message and syslog an error.</pre>
    </div>

    <div id="c7" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c7">Comment 7</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-18 16:32:13 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=80163#c6">comment #6</a>)
<span class="quote">&gt; For method calls, we should report the error back to the caller (if we can),
&gt; if this isn't an eavasdropping delivery. For everything else, we drop the
&gt; message and syslog an error.</span >

Unfortunately this is in generic libdbus code to send messages, not in dbus-daemon; so as far as I can see, this would require adding something like

void _dbus_connection_set_unable_to_send_callback (DBusConnection *conn,
    void (*callback) (DBusConnection *, DBusMessage *, DBusError *,
        void *data),
    void *data)

or maybe

void _dbus_connection_set_unable_to_send_callback (DBusConnection *conn,
    void (*callback) (DBusConnection *, DBusMessage *, int errno_, void *),
    void *)

so that dbus-daemon could set that callback to an implementation of &quot;syslog an error and maybe send an error back to the caller&quot;.</pre>
    </div>

    <div id="c8" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c8">Comment 8</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-24 11:17:37 UTC
        </span>

      </div>




<pre class="bz_comment_text">Alban, are you able to spend some time writing a patch for this?</pre>
    </div>

    <div id="c9" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c9">Comment 9</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-24 11:56:19 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=80163#c8">comment #8</a>)
<span class="quote">&gt; Alban, are you able to spend some time writing a patch for this?</span >

Yes, I will write a patch for this.</pre>
    </div>

    <div id="c10" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c10">Comment 10</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-25 14:20:48 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=101748" name="attach_101748" title="[PATCH] Handle ETOOMANYREFS">attachment 101748</a> <a href="attachment.cgi?id=101748&amp;action=edit" title="[PATCH] Handle ETOOMANYREFS">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=80163&amp;attachment=101748'>[review]</a>
[PATCH] Handle ETOOMANYREFS

(In reply to <a href="show_bug.cgi?id=80163#c7">comment #7</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=80163#c6">comment #6</a>)
&gt; &gt; For method calls, we should report the error back to the caller (if we can),
&gt; &gt; if this isn't an eavasdropping delivery. For everything else, we drop the
&gt; &gt; message and syslog an error.
&gt; 
&gt; Unfortunately this is in generic libdbus code to send messages, not in
&gt; dbus-daemon; so as far as I can see, this would require adding something like
&gt; 
&gt; void _dbus_connection_set_unable_to_send_callback (DBusConnection *conn,
&gt;     void (*callback) (DBusConnection *, DBusMessage *, DBusError *,
&gt;         void *data),
&gt;     void *data)
&gt; 
&gt; or maybe
&gt; 
&gt; void _dbus_connection_set_unable_to_send_callback (DBusConnection *conn,
&gt;     void (*callback) (DBusConnection *, DBusMessage *, int errno_, void *),
&gt;     void *)
&gt; 
&gt; so that dbus-daemon could set that callback to an implementation of &quot;syslog
&gt; an error and maybe send an error back to the caller&quot;.</span >

I wrote the libdbus part of this, see attached patch. It is already big:
 7 files changed, 130 insertions(+), 7 deletions(-)

But the bus part seems more difficult and intrusive.

In bus/dispatch.c::bus_dispatch(), dbus-daemon uses bus_transaction_execute_and_free() to forward the message to the recipients.

The distinction between the main recipient (addressed recipient) and the additional recipients (match rules or eavesdropping) does not exist in the BusTransaction because bus_transaction_execute_and_free() is not supposed to fail and report errors to the caller.

Moreover, when this function returns, the messages might not have been sent on the sockets yet: if the sockets are not ready (no POLLOUT yet) it will merely add the D-Bus message in the DBusConnection outgoing queue. By the time the message is sent through the socket, the BusTransaction will have been freed. BusTransaction also does not have a reference to the DBusConnection of the sender, but only of its BusContext.

The attached patch + the changes for the bus part (not written yet) seem excessively big for a security fix.

So I suggest I write a simpler patch to just drop the unsendable message without telling the sender; this will turn this denial-of-service bug into a simple non-security bug. And after the security fix is released, I can open a new non-security bug for returning an error message to the sender. However I am still not convinced that a non-malicious application sending fds into fds with a recursion level greater than 4 could exist so my preference for that additional bug would be WONTFIX.</pre>
    </div>

    <div id="c11" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c11">Comment 11</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-25 17:51:40 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class="bz_obsolete"><a href="attachment.cgi?id=101754" name="attach_101754" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">attachment 101754</a> <a href="attachment.cgi?id=101754&amp;action=edit" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=80163&amp;attachment=101754'>[review]</a>
[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)

This patch fixes the security issue but does not send an error to the sender. It is also smaller:

 3 files changed, 46 insertions(+), 1 deletion(-)</pre>
    </div>

    <div id="c12" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c12">Comment 12</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-26 13:29:15 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=80163#c10">comment #10</a>)
<span class="quote">&gt; The attached patch + the changes for the bus part (not written yet) seem
&gt; excessively big for a security fix.</span >

I agree.

<span class="quote">&gt; The distinction between the main recipient (addressed recipient) and the
&gt; additional recipients (match rules or eavesdropping) does not exist in the
&gt; BusTransaction because bus_transaction_execute_and_free() is not supposed to
&gt; fail and report errors to the caller.</span >

I expected this would cause difficulty. Indeed, bus_transaction_execute_and_free() exists *because* it isn't meant to fail at this point: it is meant to either all succeed (modulo disconnected connections), or not get this far (hence &quot;transaction&quot;).

<span class="quote">&gt; By the
&gt; time the message is sent through the socket, the BusTransaction will have
&gt; been freed. BusTransaction also does not have a reference to the
&gt; DBusConnection of the sender, but only of its BusContext.</span >

I think the best we can possibly do here is best-effort. Perhaps for method calls, bus/ could attach user-data to the addressed recipient's DBusMessage with a reference to the sending DBusConnection, and the function called on ETOOMANYREFS could attempt to push an error message into that connection, but if there is an OOM or other error (including a full queue), just give up instead?

Additional can of worms: you can attach fds to a signal. I'm not sure why you'd want to, but you can. We can't do anything better than dropping the message on the floor in that case.

Additional additional can of worms: replying to a method reply (or an error, which could theoretically carry a fd, although in practice nobody sends a payload of signature != 's') is not a well-defined action, so I don't think we can/should synthesize an error reply for that either.

I'm starting to think Alban was right about WONTFIXing Thiago's request to send back an error reply: too much implementation, too little gain.

Lennart, Kay: how does kdbus deal with the equivalent of this?</pre>
    </div>

    <div id="c13" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c13">Comment 13</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-26 13:30:03 UTC
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class="bz_obsolete"><a href="attachment.cgi?id=101754" name="attach_101754" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">attachment 101754</a> <a href="attachment.cgi?id=101754&amp;action=edit" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=80163&amp;attachment=101754'>[review]</a>
[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)

Review of <span class="bz_obsolete"><a href="attachment.cgi?id=101754" name="attach_101754" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">attachment 101754</a> <a href="attachment.cgi?id=101754&amp;action=edit" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=80163&amp;attachment=101754'>[review]</a>:
-----------------------------------------------------------------

I am broadly in favour of this patch, although there are some minor issues.

I'll ask on distros&#64; for CVE IDs for this and <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED FIXED - CVE-2014-3533: Security implications of Bug #79694 Misbehaviour reading a message with fdpassing"
   href="show_bug.cgi?id=80469">Bug #80469</a> (either one or two CVEs, depending).

::: dbus/dbus-sysdeps.c
&#64;&#64; +767,5 &#64;&#64;
<span class="quote">&gt; + */
&gt; +dbus_bool_t
&gt; +_dbus_get_is_errno_toomanyrefs (void)
&gt; +{
&gt; +  return errno == ETOOMANYREFS;</span >

For portability, I think this has to be:

#ifdef ETOOMANYREFS
  return errno == ETOOMANYREFS;
#else
  return FALSE;
#endif

(Check that on GNU/Linux, ETOOMANYREFS is actually a #define - I think it is. I don't think we really consider non-GNU Linuxes like Android to be security-supported.)

::: dbus/dbus-sysdeps.h
&#64;&#64; +384,4 &#64;&#64;
<span class="quote">&gt;  dbus_bool_t _dbus_get_is_errno_enomem                (void);
&gt;  dbus_bool_t _dbus_get_is_errno_eintr                 (void);
&gt;  dbus_bool_t _dbus_get_is_errno_epipe                 (void);
&gt; +dbus_bool_t _dbus_get_is_errno_toomanyrefs           (void);</span >

For consistency with the others this should ideally be ...is_errno_etoomanyrefs()

::: dbus/dbus-transport-socket.c
&#64;&#64; +669,5 &#64;&#64;
<span class="quote">&gt; +               * ETOOMANYREFS cannot happen after.
&gt; +               */
&gt; +              _dbus_assert (socket_transport-&gt;message_bytes_written == 0);
&gt; +
&gt; +              _dbus_verbose (&quot; discard message of %d bytes\n&quot;,</span >

&quot;...bytes due to ETOOMANYREFS\n&quot;

&#64;&#64; +672,5 &#64;&#64;
<span class="quote">&gt; +
&gt; +              _dbus_verbose (&quot; discard message of %d bytes\n&quot;,
&gt; +                             total_bytes_to_write);
&gt; +
&gt; +              total += bytes_written;</span >

bytes_written is -1 here. I don't think you want that?

(All this throws off is tracking of how many total bytes of messages we have sent without returning to the main loop, though.)

&#64;&#64; +682,5 &#64;&#64;
<span class="quote">&gt; +              /* The message was not actually sent but it needs to be removed
&gt; +               * from the outgoing queue
&gt; +               */
&gt; +              _dbus_connection_message_sent_unlocked (transport-&gt;connection,
&gt; +                                                      message);</span >

I agree with your reasoning that this is about the most that is feasible to do as a security fix, and that we can handle the rest as an ordinary bug later.

Other maintainers, what do you think? (I'm particularly interested in opinions/ideas from those who wrote this stuff.)</pre>
    </div>

    <div id="c14" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c14">Comment 14</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-26 15:36:45 UTC
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class="bz_obsolete"><a href="attachment.cgi?id=101754" name="attach_101754" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">attachment 101754</a> <a href="attachment.cgi?id=101754&amp;action=edit" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=80163&amp;attachment=101754'>[review]</a>
[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)

Review of <span class="bz_obsolete"><a href="attachment.cgi?id=101754" name="attach_101754" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">attachment 101754</a> <a href="attachment.cgi?id=101754&amp;action=edit" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=80163&amp;attachment=101754'>[review]</a>:
-----------------------------------------------------------------

::: dbus/dbus-sysdeps.c
&#64;&#64; +767,5 &#64;&#64;
<span class="quote">&gt; + */
&gt; +dbus_bool_t
&gt; +_dbus_get_is_errno_toomanyrefs (void)
&gt; +{
&gt; +  return errno == ETOOMANYREFS;</span >

It is a #define:

$ grep ETOOMANYREFS /usr/include/asm-generic/errno.h
#define	ETOOMANYREFS	109	/* Too many references: cannot splice */

Changed.

::: dbus/dbus-sysdeps.h
&#64;&#64; +384,4 &#64;&#64;
<span class="quote">&gt;  dbus_bool_t _dbus_get_is_errno_enomem                (void);
&gt;  dbus_bool_t _dbus_get_is_errno_eintr                 (void);
&gt;  dbus_bool_t _dbus_get_is_errno_epipe                 (void);
&gt; +dbus_bool_t _dbus_get_is_errno_toomanyrefs           (void);</span >

Updated.

::: dbus/dbus-transport-socket.c
&#64;&#64; +669,5 &#64;&#64;
<span class="quote">&gt; +               * ETOOMANYREFS cannot happen after.
&gt; +               */
&gt; +              _dbus_assert (socket_transport-&gt;message_bytes_written == 0);
&gt; +
&gt; +              _dbus_verbose (&quot; discard message of %d bytes\n&quot;,</span >

Updated.

&#64;&#64; +672,5 &#64;&#64;
<span class="quote">&gt; +
&gt; +              _dbus_verbose (&quot; discard message of %d bytes\n&quot;,
&gt; +                             total_bytes_to_write);
&gt; +
&gt; +              total += bytes_written;</span >

Oops. I removed that line. So It will check the limit per write iteration counting only effectively written message and not discarded messages.</pre>
    </div>

    <div id="c15" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c15">Comment 15</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-26 15:40:47 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=101811" name="attach_101811" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">attachment 101811</a> <a href="attachment.cgi?id=101811&amp;action=edit" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=80163&amp;attachment=101811'>[review]</a>
[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)

Patch updated following Simon's review. I added a small paragraph in the commit message too.

I tested the patch on top of 1.8.0 and it fixed the issue. I could see with strace that despite receiving ETOOMANYREFS, dbus-daemon does not close the target connection and the target application survives.</pre>
    </div>

    <div id="c16" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c16">Comment 16</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Thiago Macieira</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-06-27 00:49:33 UTC
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class=""><a href="attachment.cgi?id=101811" name="attach_101811" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">attachment 101811</a> <a href="attachment.cgi?id=101811&amp;action=edit" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=80163&amp;attachment=101811'>[review]</a>
[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)

Review of <span class=""><a href="attachment.cgi?id=101811" name="attach_101811" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">attachment 101811</a> <a href="attachment.cgi?id=101811&amp;action=edit" title="[PATCH] Handle ETOOMANYREFS when sending recursive fds (SCM_RIGHTS)">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=80163&amp;attachment=101811'>[review]</a>:
-----------------------------------------------------------------

Looks good.</pre>
    </div>

    <div id="c17" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=80163#c17">Comment 17</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-07-02 16:07:32 UTC
        </span>

      </div>




<pre class="bz_comment_text">Removing embargo. Fixed in dbus 1.8.6 and 1.6.22 which I just released.</pre>
    </div>


  

</td>
<td>
</td>
</tr></table>
  </div>

</form>

<hr>
<ul class="related_actions">
    <li><a href="show_bug.cgi?format=multiple&amp;id=80163">Format For Printing</a></li>
    
    <li>&nbsp;-&nbsp;<a href="#">Top of page </a></li>
    </ul>

<br>
</div>

    <div id="footer">
      <div class="intro"></div>
<ul id="useful-links">
  <li id="links-actions"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_bottom" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_bottom" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_bottom"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>


</ul>
  </li>

  




  
</ul>

      <div class="outro"></div>
    </div>
<p align="center">
  Use of freedesktop.org services, including Bugzilla, is subject to our <a href="https://www.freedesktop.org/wiki/CodeOfConduct/">Code of Conduct</a>. How we collect and use information is described in our <a href="https://www.freedesktop.org/wiki/PrivacyPolicy">Privacy Policy</a>.
</p>
  </body>
</html>