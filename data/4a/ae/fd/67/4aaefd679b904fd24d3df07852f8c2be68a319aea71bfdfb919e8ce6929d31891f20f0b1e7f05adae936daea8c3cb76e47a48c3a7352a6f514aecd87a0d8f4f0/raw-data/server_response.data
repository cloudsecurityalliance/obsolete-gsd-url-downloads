<!DOCTYPE html>
<html lang="en">
  <head>
      <meta charset="UTF-8">

      <meta name="referrer" content="origin">
<script type="text/javascript" src="page.cgi?1635466132&amp;id=bayotbase/fielddefs.js"></script>




<script type="text/javascript">var BB_CONFIG = ({"defaults":{"bugentry_fields":["summary","product","component","rh_sub_components","severity","priority","comment"],"platform":"Unspecified","severity":"Unspecified","priority":"Unspecified","op_sys":"Unspecified"},"user":{"logged_in":false,"groups":[],"enterable_products":[]}});</script><script type="text/javascript">
var classifications = '[ { "name": "Red Hat", "description": "Red Hat Products"},{ "name": "Workflows", "description": "User driven workflows"},{ "name": "JBoss", "description": "JBoss Products"},{ "name": "CentOS", "description": "CentOS Projects"},{ "name": "Fedora", "description": "Fedora Products"},{ "name": "Community", "description": "Community Projects"},{ "name": "oVirt", "description": "oVirt Virtualization Management Projects"},{ "name": "Internal", "description": "Internal Projects."},{ "name": "Other", "description": "Other Miscellaneous Products"},{ "name": "Unclassified", "description": "Not assigned to any classification"},{ "name": "Retired", "description": "Products that have reached end of life, or were never released."} ]';
var c_optgroups = JSON.parse(classifications);
</script>
    <title>771764 &ndash; (CVE-2012-0028) CVE-2012-0028 kernel: futex: clear robust_list on execve</title>

      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<link href="js/yui/assets/skins/sam/autocomplete.css" rel="stylesheet" type="text/css"><link href="js/yui/assets/skins/sam/calendar.css" rel="stylesheet" type="text/css"><link href="skins/standard/global.css" rel="stylesheet" type="text/css"><link href="extensions/BayotBase/web/css/base.css" rel="stylesheet" type="text/css"><link href="extensions/BayotBase/web/jquery-ui-1.12.1.custom/jquery-ui.min.css" rel="stylesheet" type="text/css"><link href="skins/standard/bug.css" rel="stylesheet" type="text/css"><link href="extensions/Voting/web/style.css" rel="stylesheet" type="text/css"><link href="extensions/ExternalBugs/web/css/global.css" rel="stylesheet" type="text/css"><link href="extensions/FontAwesome/web/css/all.min.css" rel="stylesheet" type="text/css"><link href="extensions/RedHat/web/css/redhat.css" rel="stylesheet" type="text/css"><link href="extensions/RedHat/web/DataTables/datatables.min.css" rel="stylesheet" type="text/css"><link href="extensions/RedHat/web/alertify/css/alertify.min.css" rel="stylesheet" type="text/css"><link href="extensions/RedHat/web/alertify/css/themes/bootstrap.min.css" rel="stylesheet" type="text/css"><link href="extensions/SelectizeJS/web/css/selectize.bootstrap3.css" rel="stylesheet" type="text/css"><link href="extensions/SelectizeJS/web/css/SelectizeJS.css" rel="stylesheet" type="text/css">



    
<script type="text/javascript" src="js/yui/yahoo-dom-event/yahoo-dom-event.js"></script><script type="text/javascript" src="js/yui/cookie/cookie-min.js"></script><script type="text/javascript" src="extensions/BayotBase/web/js/jquery-3.6.0.min.js"></script><script type="text/javascript" src="extensions/BayotBase/web/jquery-ui-1.12.1.custom/jquery-ui.min.js"></script><script type="text/javascript" src="extensions/BayotBase/web/js/jquery.cookie.js"></script><script type="text/javascript" src="extensions/BayotBase/web/js/jquery.jsonrpc.js"></script><script type="text/javascript" src="extensions/BayotBase/web/js/Base.js"></script><script type="text/javascript" src="extensions/BayotBase/web/js/bayot.util.js"></script><script type="text/javascript" src="js/yui/datasource/datasource-min.js"></script><script type="text/javascript" src="js/yui/connection/connection-min.js"></script><script type="text/javascript" src="js/yui/json/json-min.js"></script><script type="text/javascript" src="js/yui/autocomplete/autocomplete-min.js"></script><script type="text/javascript" src="js/yui/calendar/calendar-min.js"></script><script type="text/javascript" src="js/global.js"></script>

    <script type="text/javascript">
    <!--
        YAHOO.namespace('bugzilla');
        YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
               if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
               var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
               return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
         };
        if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
            YAHOO.util.Event._simpleRemove(window, "unload", 
                                           YAHOO.util.Event._unload);
        }
        
        function unhide_language_selector() { 
            YAHOO.util.Dom.removeClass(
                'lang_links_container', 'bz_default_hidden'
            ); 
        } 
        YAHOO.util.Event.onDOMReady(unhide_language_selector);

        
        var BUGZILLA = {
            param: {
                cookiepath: '\/',
                maxusermatches: 5,
                maxattachmentsize: 20000
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    "You must enter a Description for this attachment.",
                component_required:
                    "You must select a Component for this bug.",
                description_required:
                    "You must enter a Description for this bug.",
                short_desc_required:
                    "You must enter a Summary for this bug.",
                version_required:
                    "You must select a Version for this bug.",
                group_required:
                    "You must select at least one group for bugs in this product."
            }
            
              , api_token: ''
            
        };

    if (history && history.replaceState) {
      if(!document.location.href.match(/show_bug\.cgi/)) {
        history.replaceState( null,
                             "771764 – (CVE-2012-0028) CVE-2012-0028 kernel: futex: clear robust_list on execve",
                             "show_bug.cgi?id=771764" );
        document.title = "771764 – (CVE-2012-0028) CVE-2012-0028 kernel: futex: clear robust_list on execve";
      }
      if (document.location.href.match(/show_bug\.cgi\?.*list_id=/)) {
        var href = document.location.href;
        href = href.replace(/[\?&]+list_id=(\d+|cookie)/, '');
        history.replaceState(null, "771764 – (CVE-2012-0028) CVE-2012-0028 kernel: futex: clear robust_list on execve", href);
      }
    }
    YAHOO.util.Event.onDOMReady(function() {
      initDirtyFieldTracking();

    });
    // -->
    </script>
<script type="text/javascript" src="js/util.js"></script><script type="text/javascript" src="js/field.js"></script><script type="text/javascript" src="extensions/ExternalBugs/web/js/external_bugs.js"></script><script type="text/javascript" src="extensions/RedHat/web/DataTables/datatables.min.js"></script><script type="text/javascript" src="extensions/RedHat/web/alertify/alertify.min.js"></script><script type="text/javascript" src="extensions/RedHat/web/colResize/dataTables.colResize.js"></script><script type="text/javascript" src="extensions/RedHat/web/js/redhat.js"></script><script type="text/javascript" src="extensions/SelectizeJS/web/js/standalone/selectize.min.js"></script><script type="text/javascript" src="extensions/SelectizeJS/web/js/SelectizeJS.js"></script>

    

    
    <link rel="search" type="application/opensearchdescription+xml"
                       title="Red Hat Bugzilla" href="./search_plugin.cgi">
    <link rel="shortcut icon" href="/extensions/RedHat/web/css/favicons/production.ico?v=0">
  </head>

  <body 
        class="bugzilla-redhat-com status_colours_pastel
                 bz_bug
                 bz_status_CLOSED
                 bz_product_Security_Response
                 bz_component_vulnerability
                 bz_bug_771764 yui-skin-sam">

  <div id="header"><div id="banner">
   <ul id="loginin_launcher"><a href="#" onclick="$('#loginin_launcher').addClass('bz_default_hidden');$('#login_container').removeClass('bz_default_hidden');"><i class="fa fa-user" aria-hidden="true"></i>&nbsp;&nbsp;Login</a></ul>
   <ul id="login_container" class="bz_default_hidden">
    <a href="#" id="hide_mini_login" onclick="$('#login_container').addClass('bz_default_hidden');$('#loginin_launcher').removeClass('bz_default_hidden');">[x]</a>
     
    <li id="mini_login_container"><div id="saml2_container">
    Log in using an account from:
  <div id="saml2auth_login_Fedora Account System">
    <a href="saml2_login.cgi?idp=Fedora%20Account%20System&amp;target=show_bug.cgi%3Fid%3D771764"><i class="fa fa-cogs" aria-hidden="true"></i>&nbsp;&nbsp;Fedora Account System</a>
  </div>
  <div id="saml2auth_login_Red Hat Associate">
    <a href="saml2_login.cgi?idp=Red%20Hat%20Associate&amp;target=show_bug.cgi%3Fid%3D771764"><i class="fa fa-user-secret" aria-hidden="true"></i>&nbsp;&nbsp;Red Hat Associate</a>
  </div>
  <div id="saml2auth_login_Red Hat Customer">
    <a href="saml2_login.cgi?idp=Red%20Hat%20Customer&amp;target=show_bug.cgi%3Fid%3D771764"><i class="fa fa-user" aria-hidden="true"></i>&nbsp;&nbsp;Red Hat Customer</a>
  </div>
  Or login using a Red Hat Bugzilla account
  <div>

  <form action="show_bug.cgi?id=771764" method="POST"
        class="mini_login "
        id="mini_login">
    <input id="Bugzilla_login" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in">
  </form>
</li>
<li id="forgot_container">
  <a id="forgot_link" href="#forgot"
     onclick="return show_forgot_form('')"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i>&nbsp;&nbsp;Forgot&nbsp;Password</a>
  <form action="token.cgi" method="post" id="forgot_form"
        class="mini_forgot bz_default_hidden">
    <label for="login">Login:</label>
    <input name="loginname" size="20" id="login" required
        type="email" placeholder="Your Email Address">
    <input id="forgot_button" value="Reset Password" 
           type="submit">
    <input type="hidden" name="a" value="reqpw">
    <input type="hidden" id="token" name="token"
           value="1635628299-wr3UhldSgCAfySXR06vS2cQ1LhII-7LDVgi8I7DV418">
    <p>
    <a href="#" onclick="return hide_forgot_form('')"><i class="fa fa-exclamation-triangle" aria-hidden="true"></i>&nbsp;&nbsp;Hide Forgot</a>
  </form>
</li>
<li>
  <a href="createaccount.cgi"><span><i class="fas fa-plus" aria-hidden="true"></i>&nbsp;&nbsp;Create an Account</span></a>
</li>
    
   </ul>
  </div>

    <div id="titles">
      <span id="title">Red Hat Bugzilla &ndash; Bug&nbsp;771764</span>


    </div>


    <div id="common_links"><ul class="links">
  <li class="form">
    
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_top" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_top");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_top" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_top"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>
  <li><a href="./" title="Home"><i class="fas fa-home"></i></a></li>
  <li><a href="enter_bug.cgi">New</a></li>
  <li class="submenu">
    <a href="#" title="Search"><i class="fas fa-search"></i> <span class="fa fa-caret-down"></span></a>
    <div>
      <ul>
        <li><a href="query.cgi?format=specific">Simple Search</a></li>
        <li><a href="query.cgi?format=advanced">Advanced Search</a></li>
      </ul>
    </div>
  </li>
  <li class="submenu">
   <a href="#">My Links <span class="fa fa-caret-down"></span></a>
   <div>
    <ul>
      <li><a href="describecomponents.cgi">Browse</a></li>
      <li>
            <a href="request.cgi">Requests</a></li>
      <li class="submenu">
        <a  href="report.cgi">Reports <span class="fa fa-caret-right"></span></a>
        <div>
          <ul>
            </li>
            <li class="submenu">
              <a  href="#">Current State <span class="fa fa-caret-right"></span></a>
              <div>
                <ul>
                  <li id="report_search">
                    <a href="query.cgi">Search</a>
                  </li>
                  <li id="report_tabular">
                      <a href="query.cgi?format=report-table">Tabular reports</a>
                  </li>
                    <li id="report_graphical">
                        <a href="query.cgi?format=report-graph">Graphical reports</a>
                    </li>
                  <li id="report_duplicates">
                    <a href="duplicates.cgi">Duplicates</a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="submenu">
              <a  href="#">Other Reports <span class="fa fa-caret-right"></span></a>
              <div>
                <ul>
                  <li>
                      <a href="https://bugzilla.redhat.com/page.cgi?id=user_activity.html">User Changes</a>
                  </li>
                </ul>
              </div>
            </li>
            <li class="submenu">
              <a  href="#">Plotly Reports <span class="fa fa-caret-right"></span></a>
              <div>
                <ul>
                  <li>
                      <a href="https://bugzilla.redhat.com/page.cgi?id=bug_status.html">Bug Status</a>
                  </li>
                  <li>
                      <a href="https://bugzilla.redhat.com/page.cgi?id=bug_severity.html">Bug Severity</a>
                  </li>
                  <li>
                      <a href="https://bugzilla.redhat.com/page.cgi?id=non_defaults.html">Non-Defaults</a>
                  </li>
                </ul>
              </div>
            </li>
          </ul>
        </div>
      </li><li><span class="separator"> | </span><a href="page.cgi?id=productdashboard.html">Product Dashboard</a></li>
    </ul>
   </div>
  </li>

  <li class="submenu">
   <a href="#">Help <span class="fa fa-caret-down"></span></a>
   <div>
    <ul><li><a href="docs/en/html/using/understanding.html" >Page Help!</a></li>
      <li><a href="page.cgi?id=bug-writing.html">Bug Writing Guidelines</a></li> 
      <li><a href="page.cgi?id=whats-new.html">What's new</a></li>
      <li><a href="https://access.redhat.com/help/browsers">Browser Support Policy</a></li>
      <li><a href="page.cgi?id=release-notes.html">5.0.4.rh64 Release notes</a></li>
      <li><a href="page.cgi?id=faq.html">FAQ</a></li>
      <li><a href="docs/en/html/index.html">Guides index</a></li>
      <li><a href="docs/en/html/using/index.html">User guide</a></li>
      <li><a href="docs/en/html/integrating/api/Bugzilla/WebService/Bug.html">Web Services</a></li>
      <li><a href="page.cgi?id=redhat/contact.html" >Contact</a></li> 
      <li><a href="page.cgi?id=terms-conditions.html" >Legal</a></li> 
    </ul>
   </div>
  </li>



</ul>
    </div>
  </div>


  <div id="bugzilla-body">



<noscript>
      <div id="no-js-message">This site requires JavaScript to be enabled to function correctly, please enable it.</div>
</noscript>

<ul class="related_actions">
    <li><a href="show_bug.cgi?format=multiple&amp;id=771764" title="Format For Printing"><i class="fa fa-print"></i></a></li>
    <li><a href="show_bug.cgi?ctype=xml&amp;id=771764" title="Export as XML"><i class="far fa-file-excel"></i></a></li>
    <li><a href="enter_bug.cgi?cloned_bug_id=771764" title="Clone This Bug"><i class="fa fa-clone"></i></a></li>
    <li>
      <a href="enter_bug.cgi?cloned_bug_id=771764&lite=1" title="Copy is a lite weight clone that only copies the summary &amp; description">
       <i class="far fa-clone"></i>
      </a>
    </li>


          
    <li>
      <a href="#c9" title="Last Comment">
         <i class="fas fa-arrow-down" aria-hidden="true"></i>
      </a>
    </li><li>
  <a href="buglist.cgi?bug_id=771764&amp;bug_id_type=anddependson&amp;format=tvp" title="TreeView+">
    <i class="fa fa-tree"></i>
  </a>
</li>
    </ul>
<script type="text/javascript">
<!--

//-->
</script>




<form name="changeform" id="changeform" method="post" action="process_bug.cgi">





  <input type="hidden" name="delta_ts" value="2021-02-24 13:32:24">
  <input type="hidden" name="id" value="771764">
  <input type="hidden" name="token" value="1635628299-T3ByFYd97O71Rddw4tKkJZVybdY8govKktKaD04ySv4">
<div class="bz_short_desc_container edit_form">
    
    

     <a href="show_bug.cgi?id=771764"><b>Bug&nbsp;771764</b></a> <span id="summary_container" class="bz_default_hidden">
        (<span id="alias_nonedit_display">CVE-2012-0028</span>)
      - <span id="short_desc_nonedit_display"><a href="https://access.redhat.com/security/cve/CVE-2012-0028">CVE-2012-0028</a> kernel: futex: clear robust_list on execve</span>
     </span>

    
    

    <div id="summary_input"><span class="field_label "
    id="field_label_short_desc">


  <a 
      title="The bug summary is a short sentence which succinctly describes what the bug is about."
      class="field_help_link"
      href="page.cgi?id=fields.html#short_desc"
  >Summary:</a>

  
  
</span>CVE-2012-0028 kernel: futex: clear robust_list on execve
    </div>
  </div>
  <script type="text/javascript">
    hideEditableField('summary_container',
                      'summary_input',
                      'summary_edit_action',
                      'short_desc',
                      'CVE-2012-0028 kernel: futex: clear robust_list on execve' );
  </script>
  <table class="edit_form">
    <tr>
      
      <td id="bz_show_bug_column_1" class="bz_show_bug_column">     
        <table>
          <tr>
      <th class="field_label">
        <a href="describekeywords.cgi">Keywords</a>:
      </th>
      <td>
        <div class="keywords_select">
          <select id="keywords" name="keywords"  disabled="disabled" multiple="multiple">
              <option value="Security"
                      title="Bugs with the &quot;Security&quot; keyword are those that relate to a security vulnerability with a Red Hat product or service. For further information on how to report a security vulnerability to Red Hat please see the &quot;Security Contacts and Procedures&quot; page at http://www.redhat.com/security/team/contact/"
                      selected="selected"
              >Security
              </option>
          </select>
        </div>
      </td>
    </tr>

  <tr>
    <th class="field_label">
      <a href="page.cgi?id=fields.html#bug_status">Status</a>:
    </th>
    <td id="bz_field_status">
      <span id="static_bug_status">CLOSED
          ERRATA
      </span>
    </td>
  </tr>

<tr><th class="field_label "
    id="field_label_alias">


  <a 
      title="A short, unique name assigned to a bug in order to assist with looking it up and referring to it in other places in Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#alias"
  >Alias:</a>

  
  
</th>
    <td>CVE-2012-0028
    </td>
  </tr>

<tr>

<th class="field_label "
    id="field_label_product">


  <a 
      title="Bugs are categorised into Products and Components. Select a Classification to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi"
  >Product:</a>

  
  
</th>
  <td class="field_value "
      id="field_container_product" >Security Response

</td>


    </tr>

    
    <tr class="bz_default_hidden"><th class="field_label "
    id="field_label_classification">


  <a 
      title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation."
      class="field_help_link"
      href="page.cgi?id=fields.html#classification"
  >Classification:</a>

  
  
</th>
  <td class="field_value "
      id="field_container_classification" >Other

</td>
    </tr>
        
    
    
    <tr><th class="field_label "
    id="field_label_component">


  <a 
      title="Components are second-level categories; each belongs to a particular Product. Select a Product to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi?product=Security Response"
  >Component:</a>

  
  
</th>
      <td>
        

            <input type="hidden" id="component" name="component" value="vulnerability">vulnerability
        
        
        <span class="show_others">
          <a href="buglist.cgi?component=vulnerability&amp;product=Security%20Response"
            title="Show other bugs for this component"><i class="fas fa-th-list"></i></a>
        
        
          <a href="enter_bug.cgi?component=vulnerability&amp;product=Security%20Response&amp;version=unspecified"
            title="Create a new bug for this component"><i class="fas fa-plus-circle"></i></a>
        
        </span>
      </td>
    </tr>
    <tr>
        <th id="bz_rh_sub_component_input_th"
            class="field_label bz_default_hidden">
          <label for="rh_sub_component">
            <a class="field_help_link" href="page.cgi?id=fields.html#rh_sub_components" title="The sub component of a specific component">Sub Component:</a>
          </label>
        </th>
        <td id="bz_rh_sub_component_input_td" class="bz_default_hidden">
          <input type="hidden" name="defined_rh_sub_component" id="defined_rh_sub_component" value="0">
          <select name="rh_sub_component" id="rh_sub_component"  disabled="disabled" onchange="assign_to_default();" >
            <option value="">---</option>
          </select>
          <script>
            $(document).ready(function () {
              init_sub_components();
            });
          </script>
        
          <span class="show_others">
            <a href="buglist.cgi?component=vulnerability&amp;product=Security%20Response" title="Show other bugs for this sub-component"><i class="fas fa-th-list"></i></a>
          
          </span>
        </td>
      </tr>

<script>
  function rh_check_sub_components () {
    var ret = '';
      var sub_comp_obj = document.getElementById('rh_sub_component');
        if ($('#defined_rh_sub_component').val() == 1 && !$("#rh_sub_component").selectize()[0].selectize.getValue()) {
          if (!ret) ret = sub_comp_obj;
          _sub_comps_errorFor(
            sub_comp_obj,
            "You must specify the sub component"
          );
      }

    return ret;
  }

  function _sub_comps_errorFor(field, error_text) {
      var new_node = document.createElement('div');
      YAHOO.util.Dom.addClass(new_node, 'validation_error_text');
      new_node.innerHTML = error_text;
      YAHOO.util.Dom.insertAfter(new_node, field);
      YAHOO.util.Dom.addClass(field, 'validation_error_field');
      new_node.scrollIntoView();
  }
</script>
    <tr><th class="field_label "
    id="field_label_version">


  <a 
      title="The version field defines the version of the software the bug was found in."
      class="field_help_link"
      href="page.cgi?id=fields.html#version"
  >Version:</a>

  
  
</th>
<td>
      <span id="version">unspecified
      </span></td>
    </tr>
        
    
        
    <tr><th class="field_label "
    id="field_label_rep_platform">


  <a 
      title="The hardware platform the bug was observed on. Note: When searching, selecting the option &quot;All&quot; only finds bugs whose value for this field is literally the word &quot;All&quot;."
      class="field_help_link"
      href="page.cgi?id=fields.html#rep_platform"
  >Hardware:</a>

  
  
</th>
      <td class="field_value">All
      </td>
    </tr>
    <tr><th class="field_label "
    id="field_label_op_sys">


  <a 
      title="The operating system the bug was observed on. Note: When searching, selecting the option &quot;All&quot; only finds bugs whose value for this field is literally the word &quot;All&quot;."
      class="field_help_link"
      href="page.cgi?id=fields.html#op_sys"
  >OS:</a>

  
  
</th>
      <td class="field_value">
        Linux
      </td>
    </tr>
          
          
          <tr>
      <th class="field_label">
        <label  accesskey="i">
          <a href="page.cgi?id=fields.html#priority">Priority:</a></label>
      </th>
      <td>high
      </td>
    </tr>
    <tr>
      <th class="field_label">
        <label ><a href="page.cgi?id=fields.html#bug_severity">Severity:</a>
        </label>
      </th>
      <td>
       high
      </td>
    </tr>

      <tr><th class="field_label "
    id="field_label_target_milestone">


  <a 
      title="The Target Milestone field is used to define when the engineer the bug is assigned to expects to fix it."
      class="field_help_link"
      href="page.cgi?id=fields.html#target_milestone"
  >Target Milestone:</a>

  
  
</th><td>
      <span id="target_milestone">---
      </span></td>
      </tr>
          
          <tr><th class="field_label "
    id="field_label_assigned_to">


  <a 
      title="The person in charge of resolving the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#assigned_to"
  >Assignee:</a>

  
  
</th>
      <td><span class="vcard redhat_user"><span class="fn">Red Hat Product Security</span>
</span>
      </td>
    </tr>

    <tr><th class="field_label "
    id="field_label_qa_contact">


  <a 
      title="The person responsible for confirming this bug if it is unconfirmed, and for verifying the fix once the bug has been resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#qa_contact"
  >QA Contact:</a>

  
  
</th>
      <td><span class="vcard ">
</span>
      </td>
    </tr>
    
    <tr><th class="field_label "
    id="field_label_docs_contact">

    <label for="docs_contact" accesskey="q">

  <a 
      title="The person responsible for documenting once the bug has been resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#docs_contact"
  >Docs Contact:</a>
</label>
  
  
</th>
      <td><span class="vcard ">
</span>
      </td>
    </tr>
    
    <script type="text/javascript">
      assignToDefaultOnChange(['product', 'component'],
        'security-response-team\x40redhat.com',
        '',
        '');
    </script>
          
          
          <tr><th class="field_label "
    id="field_label_bug_file_loc">


  <a 
      title="Bugs can have a URL associated with them - for example, a pointer to a web site where the problem is seen."
      class="field_help_link"
      href="page.cgi?id=fields.html#bug_file_loc"
  >URL:</a>

  
  
</th>
    <td>
      <span id="bz_url_input_area">
      </span>
    </td>
  </tr>

    <tr><th class="field_label "
    id="field_label_status_whiteboard">


  <a 
      title="Each bug has a free-form single line text entry box for adding tags and status information."
      class="field_help_link"
      href="page.cgi?id=fields.html#status_whiteboard"
  >Whiteboard:</a>

  
  
</th><td>  
  </td>
    </tr>
          

          
<tr><th class="field_label "
    id="field_label_dependson">


  <a 
      title="The bugs listed here must be resolved before this bug can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#dependson"
  >Depends On:</a>

  
  
</th>

  <td>
    <span id="dependson_input_area">
    </span>
<a class="bz_bug_link
          bz_secure
    "
   title=""
   href="show_bug.cgi?id=750283">750283</a> <a class="bz_bug_link
          bz_secure
    "
   title=""
   href="show_bug.cgi?id=771774">771774</a> <a class="bz_bug_link
          bz_secure
    "
   title=""
   href="show_bug.cgi?id=789370">789370</a> 
  </td>
  </tr>
  
  <tr><th class="field_label "
    id="field_label_blocked">


  <a 
      title="This bug must be resolved before the bugs listed in this field can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#blocked"
  >Blocks:</a>

  
  
</th>

  <td>
    <span id="blocked_input_area">
    </span>
<a class="bz_bug_link
          bz_secure
    "
   title=""
   href="show_bug.cgi?id=770893">770893</a> 
  </td>
  </tr>

          <tr>
    <th class="field_label">TreeView+</th>
    <td>
        <a href="buglist.cgi?bug_id=771764&amp;bug_id_type=anddependson&amp;format=tvp">
        depends on</a> /
        <a href="buglist.cgi?bug_id=771764&amp;bug_id_type=andblocked&amp;format=tvp&amp;tvp_dir=blocked">
        blocked</a>
    </td>
    <td></td>
</tr>
          
          
        </table>
      </td>
      <td>
        <div class="bz_column_spacer">&nbsp;</div>
      </td>
      
      <td id="bz_show_bug_column_2" class="bz_show_bug_column">
        <table>
        <tr>
    <th class="field_label">
      <a href="page.cgi?id=fields.html#reporter">Reported:</a>
    </th>
    <td>2012-01-04 22:08 UTC by <span class="vcard redhat_user"><span class="fn">Petr Matousek</span>
</span>
    </td>
  </tr>
  
  <tr>
    <th class="field_label">
      <a href="page.cgi?id=fields.html#modified">Modified:</a>
    </th>
    <td>2021-02-24 13:32 UTC
      (<a href="show_activity.cgi?id=771764">History</a>)
    </td>
  
  </tr>
<tr>
      <th class="field_label">
        <label  accesskey="a">
          <a href="page.cgi?id=fields.html#cclist">CC List:</a>
        </label>
      </th>
      <td>22 
          users
          <span id="cc_edit_area_showhide_container" class="bz_default_hidden">
            (<a href="#" id="cc_edit_area_showhide">show</a>)
          </span>
        <div id="cc_edit_area">
          <br>
            <select id="cc" multiple="multiple" size="5" >
                <option value="agordeev">agordeev</option>
                <option value="anton">anton</option>
                <option value="arozansk">arozansk</option>
                <option value="bhu">bhu</option>
                <option value="davej">davej</option>
                <option value="dhoward">dhoward</option>
                <option value="fhrbata">fhrbata</option>
                <option value="gansalmon">gansalmon</option>
                <option value="itamar">itamar</option>
                <option value="jkacur">jkacur</option>
                <option value="jonathan">jonathan</option>
                <option value="jwboyer">jwboyer</option>
                <option value="kernel-maint">kernel-maint</option>
                <option value="kernel-mgr">kernel-mgr</option>
                <option value="lgoncalv">lgoncalv</option>
                <option value="lwang">lwang</option>
                <option value="madhu.chinakonda">madhu.chinakonda</option>
                <option value="plougher">plougher</option>
                <option value="rt-maint">rt-maint</option>
                <option value="sforsber">sforsber</option>
                <option value="vgoyal">vgoyal</option>
                <option value="williams">williams</option>
            </select>
        </div>
          <script type="text/javascript">
            hideEditableField( 'cc_edit_area_showhide_container', 
                               'cc_edit_area', 
                               'cc_edit_area_showhide', 
                               '', 
                               '');  
          </script>
      </td>
    </tr>


 
<tr>
      <th class="field_label "
    id="field_label_cf_fixed_in">


  <a 
      title="The full package version. PGM uses to check if brew ..."
  >Fixed In Version:</a>

  
  
</th>
  <td class="field_value "
      id="field_container_cf_fixed_in"  colspan="2">

</td>
    </tr>
    
    

    <tr>
      <th class="field_label "
    id="field_label_cf_doc_type">


  <a 
      title="Click the information icon to the right to see the description"
  >Doc Type:</a>

  
  <i class="fas fa-info-circle pop-text" onclick="alertify.alert('Doc Type', BB_FIELDS['cf_doc_type'].long_desc)" title="Click to see full description"></i>

  
</th>
  <td class="field_value "
      id="field_container_cf_doc_type"  colspan="2">Bug Fix

<span id="cf_doc_warn"></span></td>
    </tr>
    
    

    <tr>
      <th class="field_label "
    id="field_label_cf_release_notes">


  <a 
      title="Click the information icon to the right to see the description"
  >Doc Text:</a>

  
  <i class="fas fa-info-circle pop-text" onclick="alertify.alert('Doc Text', BB_FIELDS['cf_release_notes'].long_desc)" title="Click to see full description"></i>

  
</th>
  <td class="field_value "
      id="field_container_cf_release_notes"  colspan="2">
      <div class="uneditable_textarea"></div>

</td>
    </tr>
    
    

    
    

    <tr>
      <th class="field_label "
    id="field_label_cf_clone_of">


  <a 
      title="The bug listed here was the bug cloned to create thi..."
  >Clone Of:</a>

  
  
</th>
  <td class="field_value "
      id="field_container_cf_clone_of"  colspan="2">

</td>
    </tr>
    
    

    <tr>
      <th class="field_label "
    id="field_label_cf_environment">


  <a 
      title="This field is used for unformatted text that helps t..."
  >Environment:</a>

  
  
</th>
  <td class="field_value "
      id="field_container_cf_environment"  colspan="2">
      <div class="uneditable_textarea"></div>

</td>
    </tr>
    
    

    <tr>
      <th class="field_label "
    id="field_label_cf_last_closed">


  <a 
      title="When this bug was last marked as closed. Used for st..."
  >Last Closed:</a>

  
  
</th>
  <td class="field_value "
      id="field_container_cf_last_closed"  colspan="2">2012-05-04 08:48:04 UTC
    

</td>
    </tr>




        </table>
      </td>
    </tr>
    <tr>
      <td colspan="3">
          <hr id="bz_top_half_spacer">
      </td>
    </tr>
  </table>

  <table id="bz_big_form_parts">
  <tr>
  <td>

    
<script type="text/javascript">
<!--
function toggle_display(link) {
    var table = document.getElementById("attachment_table");
    var view_all = document.getElementById("view_all");
    var hide_obsolete_url_parameter = "&hide_obsolete=1";
    // Store current height for scrolling later
    var originalHeight = table.offsetHeight;
    var rows = YAHOO.util.Dom.getElementsByClassName(
        'bz_tr_obsolete', 'tr', table);

    for (var i = 0; i < rows.length; i++) {
        bz_toggleClass(rows[i], 'bz_default_hidden');
    }

    if (YAHOO.util.Dom.hasClass(rows[0], 'bz_default_hidden')) {
        link.innerHTML = "Show Obsolete";
        view_all.href = view_all.href + hide_obsolete_url_parameter 
    }
    else {
        link.innerHTML = "Hide Obsolete";
        view_all.href = view_all.href.replace(hide_obsolete_url_parameter,"");
    }

    var newHeight = table.offsetHeight;
    // This scrolling makes the window appear to not move at all.
    window.scrollBy(0, newHeight - originalHeight);

    return false;
}
//-->
</script>

<br>
<table id="attachment_table">
  <tr id="a0">
    
    <th align="left">
      Attachments
    </th>
    <th colspan="2" align="right">
      <a href="page.cgi?id=terms-conditions.html">(Terms of Use)</a>
    </th>
    
  </tr>



  <tr class="bz_attach_footer">
    <td colspan="3">
        <a href="attachment.cgi?bugid=771764&amp;action=enter">Add an attachment</a>
        (proposed patch, testcase, etc.)
    </td>
  </tr>
</table>
<br>

    

    <script>
  YAHOO.ExternalBugs.sUrlYUI = 'https://bugzilla.redhat.com/jsonrpc.cgi';
  YAHOO.ExternalBugs.sUrlRPC = 'https://bugzilla.redhat.com/xmlrpc.cgi';
  YAHOO.ExternalBugs.extRefreshList = [];
function _extbz_errorFor(field, error_text) {
    var new_node = document.createElement('div');
    YAHOO.util.Dom.addClass(new_node, 'validation_error_text');
    new_node.innerHTML = error_text;
    YAHOO.util.Dom.insertAfter(new_node, field);
    YAHOO.util.Dom.addClass(field, 'validation_error_field');
    return new_node;
}

function check_external_bugs (f) {
    var focus_me;
    var external_bugs = YAHOO.util.Dom.getElementsByClassName(
        'external_bug_id', null, f);
    for (var i = 0; i < external_bugs.length; i++) {
        var bug_id_key   = external_bugs[i].name;
        var bug_type_key = 'external_' + bug_id_key.substr(13);
        if($('#' + bug_id_key).length > 0) {
            var bug_id       = document.getElementById(bug_id_key).value;
            var bug_type     = document.getElementById(bug_type_key).value;
            if ((bug_type == '' || bug_type == '0') && bug_id != '') {
                focus_me = _extbz_errorFor(
                    document.getElementById(bug_type_key),
                    'You specified the external tracker id, but not the type'
                );
            }
            else if (bug_type != '' && bug_type != '0' && bug_id == '') {
                focus_me = _extbz_errorFor(
                    external_bugs[i],
                    'You specified the external tracker type, but not the id'
                );
            }
            else if (bug_type != '' && bug_id != '') {
            }
        }
    }

    return focus_me;
}

var bz_no_validate_enter_bug = false;
function validateChangeBug(changeform) {
    // This is for the "bookmarkable templates" button.
    if (bz_no_validate_enter_bug) {
        // Set it back to false for people who hit the "back" button
        bz_no_validate_enter_bug = false;
        return true;
    }

    var current_errors = YAHOO.util.Dom.getElementsByClassName(
        'validation_error_text', null, changeform);
    for (var i = 0; i < current_errors.length; i++) {
        current_errors[i].parentNode.removeChild(current_errors[i]);
    }
    var current_error_fields = YAHOO.util.Dom.getElementsByClassName(
        'validation_error_field', null, changeform);
    for (var i = 0; i < current_error_fields.length; i++) {
        var field = current_error_fields[i];
        YAHOO.util.Dom.removeClass(field, 'validation_error_field');
    }

    var focus_me;

    // REDHAT EXTENSION 1000743
    focus_me = check_external_bugs(changeform);

    if (focus_me) {
        focus_me.scrollIntoView(false);
        return false;
    }

    return true;
}

changeform.onsubmit = function() { return validateChangeBug(changeform)};
</script>

<br>
<table id="external_bugs_table" cellspacing="0" cellpadding="4">
  <caption name="et0" id="et0">Links</caption>
    <tr>
      <th>System</th>
      <th>ID</th>
      <th>Private</th>
      <th>Priority</th>
      <th>Status</th>
      <th>Summary</th>
      <th>Last Updated</th>
    </tr>

    
    <tr id="ext_row_693920" >
      <td>Red Hat Product Errata
      </td>
      <td>
        <a href="https://access.redhat.com/errata/RHSA-2012:0107">RHSA-2012:0107</a>
      </td>
      <td>
        <span id="ext_is_private_693920">0
        </span>
      </td>
      <td>
        <span id="ext_priority_693920">normal
        </span>
      </td>
      <td>
        <span id="ext_status_693920">SHIPPED_LIVE
        </span>
      </td>
      <td>
        <span id="ext_description_693920"
              title="Important: kernel security and bug fix update">Important: kernel security and bug fix update
        </span>
      </td>
      <td>
        <span id="ext_last_updated_693920">2012-02-09 21:37:09 UTC
        </span>
      </td>
    </tr>
    
    <tr id="ext_row_694726" >
      <td>Red Hat Product Errata
      </td>
      <td>
        <a href="https://access.redhat.com/errata/RHSA-2012:0358">RHSA-2012:0358</a>
      </td>
      <td>
        <span id="ext_is_private_694726">0
        </span>
      </td>
      <td>
        <span id="ext_priority_694726">normal
        </span>
      </td>
      <td>
        <span id="ext_status_694726">SHIPPED_LIVE
        </span>
      </td>
      <td>
        <span id="ext_description_694726"
              title="Important: kernel security and bug fix update">Important: kernel security and bug fix update
        </span>
      </td>
      <td>
        <span id="ext_last_updated_694726">2012-03-06 22:42:05 UTC
        </span>
      </td>
    </tr>

</table>

<br>
    

  </td>

  <td class="groups">
  </td>
  </tr></table>

  
  <div id="comments"><script type="text/javascript">
<!--
  /* Adds the reply text to the 'comment' textarea */
  function replyToComment(id, real_id, name) {
      var prefix = "(In reply to " + name + " from comment #" + id + ")\n";
      var replytext = "";
        /* pre id="comment_name_N" */
        var text_elem = document.getElementById('comment_text_'+id);
        var text = getText(text_elem);
        replytext = prefix + wrapReplyText(text);


      /* <textarea id="comment"> */
      var textarea = document.getElementById('comment');
      if (textarea.value != replytext) {
          textarea.value += replytext;
      }

      textarea.focus();
  } 
//-->
</script>






<!-- This auto-sizes the comments and positions the collapse/expand links 
     to the right. -->
<table class="bz_comment_table">
<tr>
<td>
<div id="c0" class="bz_comment bz_first_comment
            "
    >

      <div class="bz_first_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=771764#c0">Description</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard redhat_user"><span class="fn">Petr Matousek</span>
</span>
        </span>

        
        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-01-04 22:08:20 UTC
        </span>

      </div>

      


      
      



<pre class="bz_comment_text">Move &quot;exit_robust_list&quot; into mm_release() and clear them

We don't want to get rid of the futexes just at exit() time, we want to
drop them when doing an execve() too, since that gets rid of the
previous VM image too.

Doing it at mm_release() time means that we automatically always do it
when we disassociate a VM map from the task.

Upstream patches:
8141c7f3e7aee618312fa1c15109e1219de784a7
fc6b177dee33365ccb29fe6d2092223cf8d679f9

</pre>
    </div>

    <div id="c1" class="bz_comment
            "
    >

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=771764#c1">Comment 1</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard "><span class="fn">Kurt Seifried</span>
</span>
        </span>

        
        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-01-04 22:20:23 UTC
        </span>

      </div>

      


      
      



<pre class="bz_comment_text">Assigned <a href="https://access.redhat.com/security/cve/CVE-2012-0028">CVE-2012-0028</a> as per <a href="http://www.openwall.com/lists/oss-security/2012/01/04/18">http://www.openwall.com/lists/oss-security/2012/01/04/18</a>

</pre>
    </div>

    <div id="c4" class="bz_comment
            "
    >

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=771764#c4">Comment 4</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard redhat_user"><span class="fn">Petr Matousek</span>
</span>
        </span>

        
        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-02-01 16:40:24 UTC
        </span>

      </div>

      


      
      



<pre class="bz_comment_text">Below are the most relevant comments that were extracted from our per product tracking bug (which we do not open to the public). These comments describe the steps that were undertaken to find the root cause of the problem.

---------------------------------------------------------------------------

Description of problem:

On ia64 HVM guest I see this: 

1) after the guest is installed and rebooted virt-manager's UI will show the guest console in a VNC window
2) I can see the console messages before firstboot. 
3) Then firstboot starts and I go through all the steps
4) At the end firstboot exits and the OS should load GDM login window
5) At this point the vnc widget disconnects from the guest and can't connect anymore.

Version-Release number of selected component (if applicable):
2.6.18-294

How reproducible:
1/1

Steps to Reproduce:
1. See above. Tried with 5.7 Server ia64 host and 5.8 Beta 1.0 guest. 
2. Created HVM guest and used NFS iso as the source.
3.
  

Additional info:
Booting in runlevel 3 has no issues, I can see the login prompt. 

After logged into runlevel 3 and doing init 5 - loads Xorg + GDM just fine. 

I'm not sure if this has something to do with the guest (kernel or Xorg drivers) or with the host (VNC widget).

This is on host hp-rx2660-01.rhts.eng.brq.redhat.com.

--- Additional comment from <a href="mailto:mrezanin&#64;redhat.com">mrezanin&#64;redhat.com</a> on 2011-12-13 09:05:23 EST ---

Problem is, that qemu crash. So guest is on from xen point of view but not running. You can verify this by 'xm list' - there should be no state for guest.

--- Additional comment from <a href="mailto:mrezanin&#64;redhat.com">mrezanin&#64;redhat.com</a> on 2011-12-16 10:23:21 EST ---

I retested the problem with RHEL 5.7 guest - it's working ok and without problems. I updated guest kernel to RHEL 5.8 Beta version and it is still ok. So this is definitely regression but not xen one.  


As logs show, problem is in bad io request - addr: 33a8 size: 8. Package bisecting revealed the problem to be in glibc update (glibc, glibc-common,nscd). Futher bisecting in this is needed to find out the cause of problem. Problem is somewhere between glibc 2.5-66 and 2.5-72. I was unable to test older glibc than 2.5-72. 

Reassign to glibc for bisecting.

--- Additional comment from <a href="mailto:drjones&#64;redhat.com">drjones&#64;redhat.com</a> on 2011-12-21 07:52:03 EST ---

glibc changelog for -67

* Wed Aug 17 2011 Andreas Schwab &lt;<a href="mailto:schwab&#64;redhat.com">schwab&#64;redhat.com</a>&gt; - 2.5-67
- ldd: never run file directly (#531160)
- Implement greedy matching of weekday and month names (#657570)
- Fix incorrect numeric settings (#675259)
- Implement new mode for NIS passwd.adjunct.byname table (#678318)
- Query NIS domain only when needed (#703345)
- Count total processors using sysfs (#706894)
- Translate clone error if necessary (#707998)
- Workaround kernel clobbering robust list (#711531)

Back on the xen side, Miro says he found a qemu log

inp: bad size: 4004 8

which means that something in the guest attempted to read ioport 0x4004, and attempted to read 8 bytes at once, which isn't legal. That I/O address isn't mapped in the guest either, see the guest's ioports below.

Now we also see that the reason qemu exits is because it was designed to do so in this case

unsigned long do_inp(CPUState *env, unsigned long addr, unsigned long size)
{
    switch(size) {
    case 1:
        return cpu_inb(env, addr);
    case 2:
        return cpu_inw(env, addr);
    case 4:
        return cpu_inl(env, addr);
    default:
        fprintf(logfile, &quot;inp: bad size: %lx %lx\n&quot;, addr, size);
        exit(-1);
    }
}   

I don't see how that error is related to the glibc version unless the _inb() function and friends (which are written in C for ia64) are somehow compiled differently with -67. Would &quot;ldd: never run file directly (#531160)&quot; have changed anything like that?

---

# cat /proc/ioports 
00000000-00000cf7 : PCI Bus 0000:00
  00000170-00000177 : ide1
  000001f0-000001f7 : ide0
  00000376-00000376 : ide1
  000003c0-000003df : vga+
  000003f6-000003f6 : ide0
  000003f8-000003ff : serial
00000d00-0000ffff : PCI Bus 0000:00
  00001f40-00001f7f : 0000:00:01.2
    00001f40-00001f43 : ACPI PM1a_EVT_BLK
    00001f44-00001f45 : ACPI PM1a_CNT_BLK
    00001f48-00001f4b : ACPI PM_TMR
  00002000-000020ff : 0000:00:04.0
    00002000-000020ff : 8139cp
  00002100-000021ff : 0000:00:03.0
    00002100-000021ff : xen-platform-pci
  00002200-0000220f : 0000:00:01.1
    00002200-00002207 : ide0
    00002208-0000220f : ide1

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2011-12-22 06:19:45 EST ---

(In reply to <a href="show_bug.cgi?id=771764#c23">comment #23</a>)

<span class="quote">&gt; If that's true, can we use the qemu state to map back to the executing code in
&gt; the guest kernel?</span >

We discussed this with Drew yesterday. Let me build a xen package that hangs (pauses) qemu-dm instead of exiting on that error path. This way the insn emulation will take very long for the guest, and we should have a chance to dump the guest's core for analysis with crash.

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2011-12-22 09:23:09 EST ---

Guys in the CC, any help would be greatly appreciated. Thanks!

Analysing the guest coredump. Looking at &quot;docs/misc/dump-core-format.txt&quot; and
&quot;tools/libxc/xc_core.c&quot; in xen-userspace:

    +--------------------------------------------------------+
    |ELF header                                              |
    +--------------------------------------------------------+
    |section headers                                         |
    |    [...]                                               |
    +--------------------------------------------------------+
    |.note.Xen:note section                                  |
    |    [...]                                               |
    +--------------------------------------------------------+
    |.xen_prstatus                                           |
    |       vcpu_guest_context_t[nr_vcpus]                   |
    +--------------------------------------------------------+


Hypervisor source, &quot;include/public/arch-ia64.h&quot;, extract:

    struct vcpu_guest_context {
        unsigned long flags;       /* VGCF_* flags */
        struct cpu_user_regs user_regs;

    struct cpu_user_regs {
        /* The following registers are saved by SAVE_MIN: */
        unsigned long b6;  /* scratch */
        unsigned long b7;  /* scratch */

        unsigned long ar_csd; /* used by cmp8xchg16 (scratch) */
        unsigned long ar_ssd; /* reserved for future use (scratch) */

        unsigned long r8;  /* scratch (return value register 0) */
        unsigned long r9;  /* scratch (return value register 1) */
        unsigned long r10; /* scratch (return value register 2) */
        unsigned long r11; /* scratch (return value register 3) */

        unsigned long cr_ipsr; /* interrupted task's psr */
        unsigned long cr_iip;  /* interrupted task's instruction pointer */

So we have to skip 10 u64's to get at the instruction pointer.

    [root&#64;hp-rx2660-02 dump]# readelf -x \
        .xen_prstatus 2011-1222-0707.03-virt2.27.core

    Hex dump of section '.xen_prstatus':
      0x00000000 00000000 00000000 00000000 00000000 ................
      0x00000010 a0000001 000102b0 a0000001 000102e0 ................
      0x00000020 00000000 00000000 00000000 00000000 ................
      0x00000030 00000000 00000263 00000000 00000000 ........c.......
      0x00000040 20000000 018ea500 00000000 00000000 ...............
      0x00000050 a0000001 000c2160 00005010 08da6010 .`...P..`!......
      0x00000060 00000000 00000000 80000000 0000050d ................
      [...]

The instruction pointer is a0000001000c2160. In crash:

    crash&gt; dis 0xa0000001000c2160
    0xa0000001000c2160 &lt;exit_robust_list+128&gt;:      [MII]       ld8 r9=[r33]

(Also, the offending process is Xorg, according to crash.)

With addr2line:

    [root&#64;hp-rx2660-02 dump]# addr2line -ife \
        /usr/lib/debug/lib/modules/2.6.18-300.el5/vmlinux &lt;&lt;&lt; a0000001000c2160

    fetch_robust_entry
    /usr/src/debug/kernel-2.6.18/linux-2.6.18-300.el5.ia64/kernel/futex.c:1989
    exit_robust_list
    /usr/src/debug/kernel-2.6.18/linux-2.6.18-300.el5.ia64/kernel/futex.c:2016

So, the problem is triggered by the glibc commit linked in <a class="bz_bug_link
          bz_secure
    "
   title=""
   href="show_bug.cgi?id=711531">bug 711531</a> comment
4: <a href="http://repo.or.cz/w/glibc.git/commitdiff/6f8326ca">http://repo.or.cz/w/glibc.git/commitdiff/6f8326ca</a>

Due to the patch, glibc calls sys_set_robust_list() in the child after fork(),
if I understand correctly, which sets &quot;robust_list&quot; in the task_struct of the
process. This will make the kernel walk the list of unlocked robust mutexen
when the child dies (see &quot;Documentation/robust-futex-ABI.txt&quot;).

This walk is implemented by exit_robust_list(), which is exactly the function
where we die during the emulation on IA64 [kernel/kernel/futex.c]:

    /*
     * Walk curr-&gt;robust_list (very carefully, it's a userspace list!)
     * and mark any locks found there dead, and notify any waiters.
     *
     * We silently return on any sign of list-walking problem.
     */
    void exit_robust_list(struct task_struct *curr)
    {
            struct robust_list_head __user *head = curr-&gt;robust_list;
            struct robust_list __user *entry, *next_entry, *pending;
            unsigned int limit = ROBUST_LIST_LIMIT, pi, next_pi, pip;
            unsigned long futex_offset;
            int rc;

            /*
             * Fetch the list head (which was registered earlier, via
             * sys_set_robust_list()):
             */
[2016]      if (fetch_robust_entry(&amp;entry, &amp;head-&gt;list.next, &amp;pi))
                    return;

    /*
     * Fetch a robust-list pointer. Bit 0 signals PI futexes:
     */
    static inline int fetch_robust_entry(struct robust_list __user **entry,
                                         struct robust_list __user **head,
                                         int *pi)
    {
            unsigned long uentry;

[1989]      if (get_user(uentry, (unsigned long *)head))
                    return -EFAULT;

get_user() [include/asm-ia64/uaccess.h]
-&gt; __get_user_check()
  -&gt; __do_get_user()
    -&gt; __get_user_size()

__get_user_size() has two implementations, dependent on the macro
ASM_SUPPORTED. The feature test macro is defined in
[include/asm-ia64/gcc_intrin.h]. The corresponding __get_user_size()
implementation seems to use r8 and r9; my eyes sting looking at it so I won't
quote it. Anyway, refer back to the disassembly above:

    crash&gt; dis 0xa0000001000c2160
    0xa0000001000c2160 &lt;exit_robust_list+128&gt;:      [MII]       ld8 r9=[r33]

qemu-dm crashes during get_user(), with a size arg of 8 bytes. Drew says it
might be an address corruption problem -- the instruction could be decoded all
fine, but the address is frobnicated so that the emulator thinks it's in MMIO
range, and tries to translate it to port IO, and qemu-dm chokes on the 8-byte
size.

r33 is a &quot;strange&quot; register, to say the least; the IA64 manual states that
GR32 to GR127 is &quot;IA-32 code execution space&quot; and that &quot;Convetion&quot; is
&quot;undefined&quot; -- &quot;All registers in the current and prior registers frames are
left in an undefined state after IA-32 execution. Software must preserve these
values before entering the IA-32 instruction set&quot;.

OTOH I couldn't find anything above r31 in the &quot;cpu_user_regs&quot; structure in
the hypervisor's &quot;include/public/arch-ia64.h&quot; source file. Grepping the hv
tree further for &quot;r33&quot; yields hits in:

- arch/ia64/linux/memcpy_mck.S:
  &quot;Itanium 2-optimized version of memcpy and copy_user function&quot;

- arch/ia64/linux/sn/kernel/pio_phys.S:
  pio_phys_write_mmr, pio_atomic_phys_write_mmrs

- arch/ia64/xen/ivt.S:
  &quot;interruption vector table&quot;

- include/asm-ia64/dom_fw.h:
  &quot;Xen domain firmware emulation&quot;

We should figure out if this is a glibc-kernel problem (like not detecting
invalid userspace data in the kernel), or a kernel-hypervisor problem (like
misdecoding a valid kernel access in the hypervisor).

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2011-12-22 17:25:43 EST ---

I was intrigued how get_user() could blow up -- why does it trap to the hypervisor *at all*? Thankfully, &quot;include/asm-ia64/uaccess.h&quot; has an intro comment that explains __get_user_size():

/*
 * This file defines various macros to transfer memory areas across
 * the user/kernel boundary.  This needs to be done carefully because
 * this code is executed in kernel mode and uses user-specified
 * addresses.  Thus, we need to be careful not to let the user to
 * trick us into accessing kernel memory that would normally be
 * inaccessible.  This code is also fairly performance sensitive,
 * so we want to spend as little time doing safety checks as
 * possible.
 *
 * To make matters a bit more interesting, these macros sometimes also
 * called from within the kernel itself, in which case the address
 * validity check must be skipped.  The get_fs() macro tells us what
 * to do: if get_fs()==USER_DS, checking is performed, if
 * get_fs()==KERNEL_DS, checking is bypassed.
 *
 * Note that even if the memory area specified by the user is in a
 * valid address range, it is still possible that we'll get a page
 * fault while accessing it.  This is handled by filling out an
 * exception handler fixup entry for each instruction that has the
 * potential to fault.  When such a fault occurs, the page fault
 * handler checks to see whether the faulting instruction has a fixup
 * associated and, if so, sets r8 to -EFAULT and clears r9 to 0 and
 * then resumes execution at the continuation point.
 *
 * Based on &lt;asm-alpha/uaccess.h&gt;.
 *
 * Copyright (C) 1998, 1999, 2001-2004 Hewlett-Packard Co
 *	David Mosberger-Tang &lt;<a href="mailto:davidm&#64;hpl.hp.com">davidm&#64;hpl.hp.com</a>&gt;
 */

The page fault could trap to the hypervisor. Instead of giving it back to the domU fault handler, the hypervisor could try to translate it to MMIO.

Drew identified a hypervisor step -- emulate_io_inst() -- very close to qemu-dm in <a href="show_bug.cgi?id=771764#c16">comment 16</a>. It's called from the following function [arch/ia64/vmx/vmx_process.c]:

    /* We came here because the H/W VHPT walker failed to find an entry */
    IA64FAULT
    vmx_hpw_miss(u64 vadr , u64 vec, REGS* regs)

This function has two call sites, looking like:

                [ conditions snipped ]
                emulate_io_inst(v,((vadr&lt;&lt;1)&gt;&gt;1),4);   //  UC
                return IA64_FAULT;

and

                if (data-&gt;pl &gt;= ((regs-&gt;cr_ipsr &gt;&gt; IA64_PSR_CPL0_BIT) &amp; 3))
                    emulate_io_inst(v, gppa, data-&gt;ma);
                else {
                    vcpu_set_isr(v, misr.val);
                    data_access_rights(v, vadr);
                }
                return IA64_FAULT;

That is, whichever emulate_io_inst() call gets exercised, the vmx_hpw_miss() handler returns with IA64_FAULT. I'll make a big jump here, but if this returns the control to the domU kernel ultimately, then fetch_robust_entry() will return with -EFAULT, short-circuiting exit_robust_list(), and the domU simply won't care -- it's prepared for that.

This is consistent with Mirek's testing: when he removed the exit(-1) call from qemu-dm, everything worked okay. The emulated IO instruction should have turned into a NOP (because qemu-dm didn't do anything except complain), and the guest kernel happily processed the expected EFAULT in exit_robust_list().

I think this is a hypervisor (or qemu-dm problem). Either the hypervisor shouldn't interpret the access as MMIO, or qemu-dm should be able to handle it. Let's look at vmx_hpw_miss() in upstream.

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2011-12-22 19:04:51 EST ---

I believe we can get the address-to-be-fetched from the current core; the call
in <a href="show_bug.cgi?id=771764#c27">comment 27</a> should give us the starting point.

    crash&gt; struct -o robust_list_head
    struct robust_list_head {
       [0] struct robust_list list;
       [8] long int futex_offset;
      [16] struct robust_list *list_op_pending;
    }
    SIZE: 24

    crash&gt; struct -o robust_list
    struct robust_list {
      [0] struct robust_list *next;
    }
    SIZE: 8

So, 

(char *)&amp;(curr-&gt;robust_list-&gt;list.next) == (char *)curr-&gt;robust_list + 0 + 0

    crash&gt; set 1030
        PID: 1030
    COMMAND: &quot;Xorg&quot;
       TASK: e00000000d618000  [THREAD_INFO: e00000000d619040]
        CPU: 0
      STATE: TASK_RUNNING (ACTIVE)

    crash&gt; struct task_struct.robust_list e00000000d618000
      robust_list = 0x20000000018ea500

This is the (user) address we try to dereference. However:

    crash&gt; vtop -u 0x20000000018ea500
    VIRTUAL           PHYSICAL        
    20000000018ea500  (not accessible)

(Just to be sure:

    crash&gt; vtop -k 0x20000000018ea500
    VIRTUAL           PHYSICAL        
    20000000018ea500  (not a kernel virtual address)
)

This could be the cause of the fault / trap.

Side note: referring back to the .xen_prstatus ELF section dump in <a href="show_bug.cgi?id=771764#c27">comment 27</a>,
the above value is present in the dump at offset 0x40:

      0x00000040 20000000 018ea500 00000000 00000000 ...............
      
This should correspond to r11. I tried to confirm it by disassembling
exit_robust_list(), but it's greek to me.

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2011-12-23 07:46:32 EST ---

If the fault is indeed mistakenly classified as needing MMIO, then
emulate_io_inst() shouldn't be called at all. Therefore the ldfp8 instruction
is the result of a mis-parse. The disassembly from &quot;crash&quot; again (full bundle):

0xa0000001000c2160 &lt;exit_robust_list+128&gt;:      [MII]       ld8 r9=[r33]
0xa0000001000c2161 &lt;exit_robust_list+129&gt;:                  nop.i 0x0
0xa0000001000c2162 &lt;exit_robust_list+130&gt;:                  nop.i 0x0;;

crash&gt; px  *(long unsigned *)0xa0000001000c2160
$3 = 0x101842004801

crash&gt; px  *(long unsigned *)0xa0000001000c2168
$4 = 0x4000000000200

$4.$3 == 0040000000002000.0000101842004801

In binary, from left to right:

00000000000001000000000000000000000000000 -- 41 bits, slot 2
00000000000001000000000000000000000000000 -- 41 bits, slot 1
01000000011000010000100000000001001000000 -- 41 bits, slot 0
00001                                     -- 5 bits, template

The template value determines MII (M-Unit for slot 0, I unit for the others),
plus there are no stops between the slots. Slot 1 and slot 2 have identical
contents, corresponding to &quot;nop.i&quot;. They probably only pad the bundle to three
slots.

0000 0 000 000001 0 00000000000000000000 000000
 I18 i  x3   x6   y        imm20a          qp

(&quot;y&quot; distinguishes between &quot;nop.i&quot; and &quot;hint.i&quot;.)

slot 0:

0100 0 000011 00 0 0100001 0000000 0001001 000000
M1/2 m   x6   h. x    r3      r2     r1      qp

opcode: 4              --&gt; M1 or M2
m     : 0
x6    : 0000.11 binary --&gt; ld8 M2
hint  : 00 binary      --&gt; no load hint
x     : 0
r3    : 33 decimal
r1    : 9 decimal

That is, the disassembler in &quot;crash&quot; does not lie.

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2011-12-23 13:17:06 EST ---

emulate_io_inst() does not misparse the ld8 instruction as ldfp8 actually -- it recognizes it correctly. Refer back to the previous comment (<a href="show_bug.cgi?id=771764#c40">comment 40</a>) for data. The branch is not easy to find because the transfer size (8 bytes) is not specified in cleartext, it is expressed as &quot;1 &lt;&lt; (x6 &amp; 0x03)&quot;.

    // Integer Load/Store
    if(inst.M1.major==4&amp;&amp;inst.M1.m==0&amp;&amp;inst.M1.x==0){
        inst_type = SL_INTEGER;  //
        size=(inst.M1.x6&amp;0x3);
        if((inst.M1.x6&gt;&gt;2)&gt;0xb){      // write
            dir=IOREQ_WRITE;     //write
            vcpu_get_gr_nat(vcpu,inst.M4.r2,&amp;data);
        }else if((inst.M1.x6&gt;&gt;2)&lt;0xb){   //  read
            dir=IOREQ_READ;
        }
    }

[... a bunch of else-if branches, then ...]

    size = 1 &lt;&lt; size;
    if(dir==IOREQ_WRITE){
        mmio_access(vcpu, padr, &amp;data, size, ma, dir);
    }else{
        mmio_access(vcpu, padr, &amp;data, size, ma, dir);
        if(inst_type==SL_INTEGER){       //gp
            vcpu_set_gr(vcpu,inst.M1.r1,data,0);
        }else{
            panic_domain(NULL, &quot;Don't support ldfd now !&quot;);
        }
    }
    vcpu_increment_iip(vcpu);

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2011-12-23 15:31:51 EST ---

Created <span class="bz_obsolete"><a href="attachment.cgi?id=549385&amp;action=diff" name="attach_549385" title="">attachment 549385</a> <a href="attachment.cgi?id=549385&amp;action=edit" title="">[details]</a></span>
add debug logging to ia64 fault handler and mmio insn decoder

The output of this patch seems to confirm the above. The last three hv dmesg
lines before the hang are:

(XEN) mmio.c:458:d1 callsite=2 vadr=0x20000000018ea500
                    ^                 ^
                    |                 Xorg.robust_list, see <a href="show_bug.cgi?id=771764#c36">comment 36</a>
                    |
                    2nd emulate_io_inst() call in vmx_hpw_miss()
                    (<a href="show_bug.cgi?id=771764#c32">comment 32</a>, but see here too, with the debug patch:)

(XEN) mmio.c:463:d1 gppa=0xe0cea500 vec=2 d_ppn=0xe0ce8 d_ma=4 d_ps=14

 313  /* We came here because the H/W VHPT walker failed to find an entry */
 314  IA64FAULT
 315  vmx_hpw_miss(u64 vadr , u64 vec, REGS* regs)
 316  {

 330    else if (vec == 2)
 331      type = DSIDE_TLB;

vec == 2, data TLB.

 351    if((data=vtlb_lookup(v, vadr,type))!=0){

vadr is found in the data TLB.

 352      if (v-&gt;domain != dom0 &amp;&amp; type == DSIDE_TLB) {
 353        if (misr.sp) { /* Refer to SDM Vol2 Table 4-10,4-12 */
 354          if ((data-&gt;ma == VA_MATTR_UC) || (data-&gt;ma == VA_MATTR_UCE))
 355            return vmx_handle_lds(regs);
 356        }
 357        gppa = (vadr &amp; ((1UL &lt;&lt; data-&gt;ps) - 1)) +
 358               (data-&gt;ppn &gt;&gt; (data-&gt;ps - 12) &lt;&lt; data-&gt;ps);

&quot;gppa&quot; -- guest physical page address -- is computed as follows. The data TLB
entry specifies a page size (d_ps == 14, 16KB). The lower 14 bits are taken
from the virtual address (-&gt;0x2500). The low 2 bits in the physical page number
(d_ppn == 0xe0ce8) are cleared, and then it is shifted 12 bits to the left
(-&gt;0xe0ce8000). Finally they are combined to gppa == 0xe0cea500.

 359        if (__gpfn_is_io(v-&gt;domain, gppa &gt;&gt; PAGE_SHIFT)) {

PAGE_SHIFT is 14 in our configuration, the guest page frame number is 0x3833A.
It is found to be an IO mapped page. I'll have to see why. An interesting
tidbit is that qemu-dm logs:

    inp: bad size: 33a8 8 -- pausing

&quot;33a8&quot; looks awfully similar to 0x3833A -- keep the low 16 bits of the latter
and do a 4-bit ROL in those 16 bits, and you end up with 33A8.

 360          if (misr.sp)
 361            panic_domain(NULL, &quot;ld.s on I/O page not with UC attr.&quot;
 362                         &quot; pte=0x%lx\n&quot;, data-&gt;page_flags);

So misr.sp was false above too (at line 353).

 363          if (data-&gt;pl &gt;= ((regs-&gt;cr_ipsr &gt;&gt; IA64_PSR_CPL0_BIT) &amp; 3)) {

This is a privilege level check.

 364            scratch.callsite = 2;
 365            scratch.vadr = vadr;
 366            scratch.gppa = gppa;
 367            scratch.vec = vec;
 368            scratch.d_ppn = data-&gt;ppn;
 369            scratch.d_ma = data-&gt;ma;
 370            scratch.d_ps = data-&gt;ps;
 371            emulate_io_inst(v, gppa, data-&gt;ma);

(XEN) mmio.c:467:d1 padr=0xe0cea500 ma=4 cr_iip=0xa0000001000c2160 slot=0
                    ^                    ^                         ^
                    gppa                 domU get_user(),          slot in
                                         see <a href="show_bug.cgi?id=771764#c27">comment 27</a>            bundle

      bundle=0x00040000000002000000101842004801
               ^
               the insn bundle containing the ld8 and the two NOPs, see
               <a href="show_bug.cgi?id=771764#c40">comment 40</a>.

&quot;ma&quot; is &quot;memory attribute&quot;, 4 means VA_MATTR_UC, uncacheable (see table 4-11).

----o----

&quot;callsite == 1&quot; was never hit. The guest hit &quot;callsite == 2&quot; 2201 times
(including the fatal, last one). The first 2200 occasions (that succeeded) were
all like this:

(XEN) mmio.c:458:d1 callsite=2 vadr=0xc0000000000b....
(XEN) mmio.c:463:d1 gppa=0xb.... vec=2 d_ppn=0xb8 d_ma=4 d_ps=24
(XEN) mmio.c:467:d1 padr=0xb.... ma=4 cr_iip=0xa0000001002e9... slot=0
      bundle=[whatever]

cr_iip always points into __copy_user() in the domU, and the physical address /
physical frame number suggests it's video RAM. Logging depends on the transfer
size being 8, so it's interesting why qemu-dm satisfies the first 2200 read
requests.

... I believe because they have a different path already in the hypervisor -- 
mmio_access() special-cases GPFN_LOW_MMIO:

low_mmio_access()
-&gt; hvm_buffered_io_intercept()

static struct hvm_buffered_io_range buffered_stdvga_range = {0xA0000, 0x20000};

All 2200 successful requests fall into this buffered range.

----o----

So, is the problem that &quot;vadr&quot; is found in the virtual data TLB? Or is it that
the retrieved frame number qualifies as (high) MMIO?

The virtual address in Xorg's robust_list definitely shouldn't be recognized as
MMIO. Again, gppa is 0xe0cea500, which is above 3596 MB (decimal). The HVM
guest in question has 1 GB RAM, so I'm inclined to believe the hypervisor will
consider such a physical address as MMIO. Therefore I suspect the data TLB has
a bogus entry. We're doomed.

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2011-12-25 06:20:52 EST ---

Created <span class="bz_obsolete"><a href="attachment.cgi?id=549475&amp;action=diff" name="attach_549475" title="">attachment 549475</a> <a href="attachment.cgi?id=549475&amp;action=edit" title="">[details]</a></span>
hv debug logging v2

... in ia64 fault handler and mmio insn decoder, mmio_access(),
lookup_domain_mpa()

(In reply to <a href="show_bug.cgi?id=771764#c42">comment #42</a>)

<span class="quote">&gt; the guest page frame number is 0x3833A.
&gt; It is found to be an IO mapped page. I'll have to see why. An interesting
&gt; tidbit is that qemu-dm logs:</span >
&gt;
<span class="quote">&gt;     inp: bad size: 33a8 8 -- pausing</span >
&gt;
<span class="quote">&gt; &quot;33a8&quot; looks awfully similar to 0x3833A -- keep the low 16 bits of the latter
&gt; and do a 4-bit ROL in those 16 bits, and you end up with 33A8.</span >

(XEN) mmio.c:472:d1 callsite=2 vadr=0x20000000018ea500
(XEN) mmio.c:479:d1 gppa=0xe0cea500 vec=2 d_ppn=0xe0ce8 d_ma=4 d_ps=14
      misr_rs=0 vpsr_dt=1 vpsr_rt=1
(XEN) mmio.c:483:d1 padr=0xe0cea500 ma=4 cr_iip=0xa0000001000c2160 slot=0
      bundle=0x00040000000002000000101842004801
(XEN) mmio.c:242:d1 mmio_access(): entry
(XEN) mm.c:712:d1 lookup_domain_mpa(): entry
(XEN) mm.c:718:d1 lookup_domain_mpa(): ptep=f000000181c699d0
(XEN) mm.c:726:d1 lookup_domain_mpa(): pte=0x5010000000000761
(XEN) mm.c:731:d1 lookup_domain_mpa(): pte present
(XEN) mmio.c:248:d1 mmio_access(): iot=0x5000000000000000

vmx_hpw_miss() -- non-phys mode call, <a href="show_bug.cgi?id=771764#c42">comment 42</a>
-&gt; emulate_io_inst() -- for ld8, <a href="show_bug.cgi?id=771764#c41">comment 41</a>
  -&gt; mmio_access()
    -&gt; __gpfn_is_io -- returns GPFN_LEGACY_IO == 0x5000000000000000
    -&gt; legacy_io_access()

legacy_io_access() is the one to turn 0xE0CEA500 into 0x33A8 when composing the
ioreq for qemu-dm:

    #define TO_LEGACY_IO(pa)  (((pa)&gt;&gt;12&lt;&lt;2)|((pa)&amp;0x3))

    p-&gt;addr = TO_LEGACY_IO(pa&amp;0x3ffffffUL);

11100000110011101010010100000000 bin = 0xE0CEA500
      ^^^^^^^^^^^^^^          ^^
      00110011101010          00 bin = 0x33A8

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2011-12-26 06:17:44 EST ---

Created <span class=""><a href="attachment.cgi?id=549579&amp;action=diff" name="attach_549579" title="">attachment 549579</a> <a href="attachment.cgi?id=549579&amp;action=edit" title="">[details]</a></span>
hv debug logging v3

debug patch:
- ia64 fault handler and mmio insn decoder
- mmio_access(), lookup_domain_mpa()
- vmx_vcpu_thash() -- log &quot;vhpt_adr&quot; output
- guest_vhpt_lookup()

(In reply to <a href="show_bug.cgi?id=771764#c42">comment #42</a>)

<span class="quote">&gt;  351    if((data=vtlb_lookup(v, vadr,type))!=0){</span >
&gt;
<span class="quote">&gt; vadr is found in the data TLB.</span >
&gt;
<span class="quote">&gt;  352      if (v-&gt;domain != dom0 &amp;&amp; type == DSIDE_TLB) {
&gt;  353        if (misr.sp) { /* Refer to SDM Vol2 Table 4-10,4-12 */
&gt;  354          if ((data-&gt;ma == VA_MATTR_UC) || (data-&gt;ma == VA_MATTR_UCE))
&gt;  355            return vmx_handle_lds(regs);
&gt;  356        }
&gt;  357        gppa = (vadr &amp; ((1UL &lt;&lt; data-&gt;ps) - 1)) +
&gt;  358               (data-&gt;ppn &gt;&gt; (data-&gt;ps - 12) &lt;&lt; data-&gt;ps);</span >
&gt;
<span class="quote">&gt; &quot;gppa&quot; -- guest physical page address -- is computed as follows. The data TLB
&gt; entry specifies a page size (d_ps == 14, 16KB). The lower 14 bits are taken
&gt; from the virtual address (-&gt;0x2500). The low 2 bits in the physical page
&gt; number (d_ppn == 0xe0ce8) are cleared, and then it is shifted 12 bits to the
&gt; left (-&gt;0xe0ce8000). Finally they are combined to gppa == 0xe0cea500.</span >

(In reply to <a href="show_bug.cgi?id=771764#c44">comment #44</a>)

<span class="quote">&gt; I may have to catch all references to the faulting vaddr (Xorg's robust_list)
&gt; in the virtual TLB.</span >

So, why does vtlb_lookup() return 0xe0ce8 for the PPN? This patch helps track
that back a bit more.

There are three mentions of guest iip=0xa0000001000c2160 in the log (which is
the problematic ld8 of *robust_list, virtual address 0x20000000018ea500).
There's a big gap between the 1st and (2nd+3rd), the latter two are adjacent.

The first DTLB miss (translation failure):

(XEN) vtlb.c:275:d1 guest_vhpt_lookup(): data=f000000180274100
(XEN) vmx_process.c:444:d1 vmx_hpw_miss(): vhpt_adr=0x3ffe0000000031d0
(XEN) vtlb.c:555:d1 thash_purge_and_insert(): pte=0x1000000e3181a1
      itir=0x3ab938 ifa=0x20000000018ea500 type=1 iip=0xa0000001000c2160
      caller=vmx_hpw_miss

vmx_hpw_miss() is called for a DTLB miss.
- We're not in physical mode,
- the vadr is not found in the vtlb,
- we advance through vmx_hpw_miss() until we reach the following:

        vmx_vcpu_thash(v, vadr, &amp;vhpt_adr);

The virtual address is hashed to vhpt_addr (= 0x3ffe0000000031d0).

        if (!guest_vhpt_lookup(vhpt_adr, &amp;pteval)) {

It is looked up in the guest VHPT, and found; a PTE is returned, containing a
PPN (here 0xe318, corresponding to about 227 MB),

            /* VHPT successfully read.  */
            if (!(pteval &amp; _PAGE_P)) {
                if (vpsr.ic) {
                    vcpu_set_isr(v, misr.val);
                    dtlb_fault(v, vadr);
                    return IA64_FAULT;
                } else {
                    nested_dtlb(v);
                    return IA64_FAULT;
                }
            } else if ((pteval &amp; _PAGE_MA_MASK) != _PAGE_MA_ST) {
                vcpu_get_rr(v, vadr, &amp;rr);
                itir = rr &amp; (RR_RID_MASK | RR_PS_MASK);

                if (0x20000000018ea500 == vadr) {
                    gdprintk(XENLOG_DEBUG, &quot;vmx_hpw_miss(): vhpt_adr=0x%lx\n&quot;,
                             vhpt_adr);
                }

                thash_purge_and_insert(v, pteval, itir, vadr, DSIDE_TLB,
                                       __FUNCTION__);
                return IA64_NO_FAULT;

and then inserted in the vtlb.

I think, what happens is basically: translation fails at first, we copy it from
the guest VHPT to the TLB, and then we make progress. All good.

The second &amp; third misses are our problem -- actually I think the same guest
instruction faults twice in quick succession. Of those, the first happens just
like above:

(XEN) vtlb.c:275:d1 guest_vhpt_lookup(): data=f000000180276100
(XEN) vmx_process.c:444:d1 vmx_hpw_miss(): vhpt_adr=0x3ffe0000000031d0
(XEN) vtlb.c:555:d1 thash_purge_and_insert(): pte=0x100000e0ce85b1
      itir=0x3bc138 ifa=0x20000000018ea500 type=1 iip=0xa0000001000c2160
      caller=vmx_hpw_miss

The vadr that fails to translate is the same (0x20000000018ea500, contents of
robust_list), at the same domU instruction. The vadr hashes to the same
vhpt_adr (0x3ffe0000000031d0), and it is again found in the guest VHPT, but
with different contents: the PTE returned this time specifies PPN 0xe0ce8,
which is what we copy in the VTLB.

Then the fault kicks again immediately (... probably), we retrieve the PPN from
the VTLB we just copied over from the guest VHPT:

(XEN) mmio.c:472:d1 callsite=2 vadr=0x20000000018ea500
(XEN) mmio.c:479:d1 gppa=0xe0cea500 vec=2 d_ppn=0xe0ce8 d_ma=4 d_ps=14
      misr_rs=0 vpsr_dt=1 vpsr_rt=1
(XEN) mmio.c:483:d1 padr=0xe0cea500 ma=4 cr_iip=0xa0000001000c2160 slot=0
      bundle=0x00040000000002000000101842004801
(XEN) mmio.c:242:d1 mmio_access(): entry
(XEN) mm.c:712:d1 lookup_domain_mpa(): entry
(XEN) mm.c:718:d1 lookup_domain_mpa(): ptep=f000000181c699d0
(XEN) mm.c:726:d1 lookup_domain_mpa(): pte=0x5010000000000761
(XEN) mm.c:731:d1 lookup_domain_mpa(): pte present
(XEN) mmio.c:248:d1 mmio_access(): iot=0x5000000000000000

and we decide the PPN is IO-mapped.

In short, the source of the problematic PPN is the guest VHPT; it's there where
we copy the PPN from, into the VTLB. We retrieve the PPN from the VTLB finally,
and it causes us to compose a bogus ioreq for qemu-dm.

I believe this code implements (virtualizes) the algorithm described in chapter
&quot;4.1 Virtual Addressing&quot; of the Itanium SDM vol2.

I backported the fixed assembly from c/s 17086 to guest_vhpt_lookup(), assuming
guest_vhpt_lookup() returned a garbage PTE (and so PPN) because of the messed
up gcc assembly template. Unfortunately, the backport didn't help at all, it
seems the guest VHPT indeed specifies the bad PPN.

An interesting point is the difference in the VCPU's ITIR (&quot;Interruption TLB
Insertion Register&quot;), which is basically an input param to the vmx_hpw_miss()
handler.

first (valid) thash insertion case:    itir=0x3ab938 
second (bad) thash insertion case:     itir=0x3bc138 

The difference is in the subsequence called &quot;key&quot; (bits 8 to 31). &quot;On an
instruction or data translation fault, this field is set to the accessed Region
Identifier (RR.rid)&quot; (Table 3-8.)

Why on earth does the VCPU think it is accessing a different Region? The vadr
is the same, so the Virtual Region Number (the most significant 3 bits in the
vadr) is the same, selecting the same (0th) region register. So, the contents
of that region register must have changed. In that case, however, the hash of
the virtual address (vhpt_adr, computed by vmx_vcpu_thash(), see above) should
have changed as well, because the region ID is an input to the hash as well.
However, vhpt_adr is identical (0x3ffe0000000031d0).

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2011-12-26 14:30:23 EST ---

I'm stuck figuring out where the guest VHPT is populated.

This could be the data flow:

guest VHPT ---&gt; vtlb ---&gt; HVM domU mm_struct  ---&gt; legacy MMIO
            ^         ^   (GPFN to mach. PTE)
            |         |
           1st       2nd
       translation transl.
           fault    fault

The guest page frame number 0xe0ce8 comes from the guest VHPT. I'm unable to find what writes it there (ie. more to the left on the diagram).

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2011-12-26 16:12:01 EST ---

Re-reading <a href="show_bug.cgi?id=771764#c36">comment 36</a> (the userspace virtual address is not even resolvable in the guest!) this could be a &quot;stale guest VHPT&quot; problem. If the 1st translation fault didn't find the virtual adress's hash in the guest VHPT, we wouldn't even reach the 2nd translation: vmx_hpw_miss() would return IA64_FAULT, and the get_user() call in the guest would complete.

I think when the virtual address 0x20000000018ea500 (= robust_list) is unmapped, the guest VHPT is not updated (flushed?) quickly enough. guest_vhpt_lookup() should return failure for the vadr's hashed value.

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2011-12-28 11:08:03 EST ---

I think we're making progress!

(1) I changed the guest kernel like this:

--------v--------
diff --git a/kernel/futex.c b/kernel/futex.c
index e4aa3d5..3a7d52b 100644
--- a/kernel/futex.c
+++ b/kernel/futex.c
&#64;&#64; -1992,7 +1992,8 &#64;&#64; static inline int fetch_robust_entry(struct robust_list
__user **entry,
 
 #ifdef CONFIG_IA64
        ia64_ptr(2, head, 3);
-       ia64_srlz_d();
+       ia64_ptcga(head, 3 &lt;&lt; 2);
+       ia64_srlz_i();
 #endif
        if (get_user(uentry, (unsigned long *)head))
                return -EFAULT;
--------^--------

Inserting ptc.ga (purge global translation cache) before attempting to fetch
*robust_list had the desired effect I wrote about in <a href="show_bug.cgi?id=771764#c49">comment 49</a>:

(In reply to <a href="show_bug.cgi?id=771764#c49">comment #49</a>)

<span class="quote">&gt; If the 1st translation fault didn't find the virtual adress's hash in the
&gt; guest VHPT, we wouldn't even reach the 2nd translation: vmx_hpw_miss() would
&gt; return IA64_FAULT</span >

ptc.ga is trapped by the hypervisor. It is emulated by:

vmx_emulate() [arch/ia64/vmx/vmx_virt.c]
-&gt; vmx_emul_ptc_ga()
  -&gt; vmx_vcpu_ptc_ga() [arch/ia64/vmx/vmmu.c]
    -&gt; vmx_vcpu_ptc_l()
      -&gt; thash_purge_entries() [arch/ia64/vmx/vtlb.c]
        -&gt; vhpt_purge()

which indeed kills off the virtual address from the guest VHPT: when the guest
kernel tries to dereference the vaddr, the subsequent vmx_hpw_miss() in the HV
fails to look it up in either the VTLB or the VHPT -- guest_vhpt_lookup():

(XEN) vtlb.c:275:d13 guest_vhpt_lookup(): data=0000000000000000
(XEN) vtlb.c:281:d13 guest_vhpt_lookup(): data2=0000000000000000

and vmx_hpw_miss() ends up calling dvhpt_fault() --&gt; _vhpt_fault() in
&quot;arch/ia64/vmx/vmx_interrupt.c&quot;. The latter function sets up IFA (= faulting
vadr), ITIR, IHA, and injects an IA64_VHPT_TRANS_VECTOR guest interruption:

Hypervisor: [include/asm-ia64/ia64_int.h]

    #define	IA64_VHPT_TRANS_VECTOR			0x0000

domU kernel: [arch/ia64/kernel/ivt.S]

    // 0x0000 Entry 0 (size 64 bundles) VHPT Translation (8,20,47)
    ENTRY(vhpt_miss)

The vhpt_miss() assembly-language domU function executes an &quot;itc.d r18&quot;
instruction -- &quot;insert translation cache&quot;. This traps back to the hypervisor,
and the hypervisor inserts the PTE (coming from the domU!) in the VTLB:

(XEN) mm.c:712:d13 lookup_domain_mpa(): entry
(XEN) mm.c:718:d13 lookup_domain_mpa(): ptep=f000001368dc19d0
(XEN) mm.c:726:d13 lookup_domain_mpa(): pte=0x5010000000000761
(XEN) mm.c:731:d13 lookup_domain_mpa(): pte present
(XEN) vtlb.c:555:d13 thash_purge_and_insert(): pte=0x10100000e0ce85b1
      itir=0x3c7138 ifa=0x20000000018ea500 type=1 iip=0xa000000100000130
      caller=vmx_vcpu_itc_d

(iip=0xa000000100000130 points to the itc.d in vhpt_miss() in my test kernel, I
verified it with objdump -D).

vmx_emulate() [arch/ia64/vmx/vmx_virt.c]
-&gt; vmx_emul_itc_d()
  -&gt; vmx_vcpu_itc_d() [arch/ia64/vmx/vmmu.c]
    -&gt; thash_purge_and_insert() [arch/ia64/vmx/vtlb.c]

Then the *robust_list read is retried, and resolved from the VTLB as before.

(XEN) mm.c:712:d13 lookup_domain_mpa(): entry
(XEN) mm.c:718:d13 lookup_domain_mpa(): ptep=f000001368dc19d0
(XEN) mm.c:726:d13 lookup_domain_mpa(): pte=0x5010000000000761
(XEN) mm.c:731:d13 lookup_domain_mpa(): pte present
(XEN) mmio.c:472:d13 callsite=2 vadr=0x20000000018ea500
(XEN) mmio.c:479:d13 gppa=0xe0cea500 vec=2 d_ppn=0xe0ce8 d_ma=4 d_ps=14
      misr_rs=0 vpsr_dt=1 vpsr_rt=1
(XEN) mmio.c:483:d13 padr=0xe0cea500 ma=4 cr_iip=0xa0000001000c21a0 slot=0
      bundle=0x00040000000002000000101842004801
(XEN) mmio.c:242:d13 mmio_access(): entry
(XEN) mm.c:712:d13 lookup_domain_mpa(): entry
(XEN) mm.c:718:d13 lookup_domain_mpa(): ptep=f000001368dc19d0
(XEN) mm.c:726:d13 lookup_domain_mpa(): pte=0x5010000000000761
(XEN) mm.c:731:d13 lookup_domain_mpa(): pte present
(XEN) mmio.c:248:d13 mmio_access(): iot=0x5000000000000000


Summary:
--------

(0) the &quot;robust_list&quot; userspace address is *not* in the VTLB, in either case.

(1) normally, it is in the guest VHPT, and on access it is copied from the
gVHPT to the VTLB, and resolved from there.

(2) when I force the vaddr out of the gVHPT, the miss goes &quot;deeper&quot;, ie. back
to the domU, and this time the guest kernel actively reinserts the same bogus 
pseudo-physical page number into the VTLB, originating from the *domU PTE* for
the virtual address. Then on access the address is resolved from the VTLB as
before.

It very much seems like a guest kernel problem.

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2011-12-28 14:53:22 EST ---

Created <span class=""><a href="attachment.cgi?id=549849&amp;action=diff" name="attach_549849" title="">attachment 549849</a> <a href="attachment.cgi?id=549849&amp;action=edit" title="">[details]</a></span>
walk_vadr() -- walk robust_list thorugh the pagetable (domU kernel)

Getting close.

I scavenged mapped_kernel_page_is_present() [arch/ia64/mm/fault.c] and wrote
walk_vadr(). Each time sys_set_robust_list() is called or fetch_robust_entry()
is called, the patch walks the pagetables and prints the PTE. This can be
correlated with the hypervisor debug log.

(Please excuse the stupid &quot; %16s&quot; format specifier, I meant &quot;%.16s&quot; -- I didn't
want to specify the field width (padding) but the precision for %s: the
precision puts a limit on the number of printed bytes. I wasn't sure if
task_struct.comm is NUL-terminated or not. Thankfully it is.)

Reproducing the problem again, this is the end of the hv log (see <a href="show_bug.cgi?id=771764#c52">comment 52</a>
for more):

(XEN) mmio.c:472:d21 callsite=2 vadr=0x20000000018ea500
(XEN) mmio.c:479:d21 gppa=0xe0cea500 vec=2 d_ppn=0xe0ce8 d_ma=4 d_ps=14
      misr_rs=0 vpsr_dt=1 vpsr_rt=1
(XEN) mmio.c:483:d21 padr=0xe0cea500 ma=4 cr_iip=0xa0000001000c2860 slot=0
      bundle=0x00040000000002000000101848004801

vadr=0x20000000018ea500 is the usual contents of the robust_list pointer, gppa
has the usual offender PPN (coming from the usual bad guest PTE).
cr_iip=0xa0000001000c2860 corresponds to the get_user() call in
fetch_robust_entry(), right after the walk_vadr() invocation this patch
introduced there.

So, what does the guest kernel log? A bunch of sys_set_robust_list() and
fetch_robust_entry() lines. The revelation comes when we

- grab the last line, printed right before the problematic get_user() call (see
cr_iip above), and

- check all other lines for the same PID, in order to see the original
sys_set_robust_list() for the same process:

walk_vadr(): rhgb[1084]: sys_set_robust_list(): vadr=0x20000000018ea500
    pgdp=e00000000dd10800 pgd=0xd8d4000
    pudp=e00000000dd10800 pud=0xd8d4000
    pmdp=e00000000d8d4000 pmd=0x3ce2c000
    ptep=e00000003ce2f1d0 pte=0x1000000e7485e1

walk_vadr(): Xorg[1084]: fetch_robust_entry(): vadr=0x20000000018ea500
    pgdp=e00000003c40c800 pgd=0x1e5c000
    pudp=e00000003c40c800 pud=0x1e5c000
    pmdp=e000000001e5c000 pmd=0x3cbf4000
    ptep=e00000003cbf71d0 pte=0x100000e0ce85b1

The task's name (task_struct.comm) has changed! Although PIDs are recycled,
during such a short time it must have been an exec(). The vadr is the same
(consistent with the hypervisor), and compare the guest PTE (at Xorg exit time)
against the bad PPN in the hypervisor log:

      pte=0x100000e0ce85b1
    d_ppn=0x      e0ce8

So, rhgb[1084] is *forked* by something (let's call it &quot;rhgb^&quot;), then
rhgb[1084] *executes* Xorg[1084], without resetting the &quot;robust_list&quot; pointer
in the task struct. When Xorg (a completely independent process image) exits,
the same userspace virtual address happens to be mapped in it, but the backing
PTE is completely different.

      rhgb^    -- sets robust_list

        |
        |
      fork()   -- *used* to clear robust_list, but not after the glibc patch
        |         for <a class="bz_bug_link
          bz_secure
    "
   title=""
   href="show_bug.cgi?id=711531">bug 711531</a>.
        |
        V

    rhgb[1084]

        |
        |
      exec()   -- *never* clears robust_list
        |
        |
        V

    Xorg[1084]

The patch for <a class="bz_bug_link
          bz_secure
    "
   title=""
   href="show_bug.cgi?id=711531">bug 711531</a> completed the inheritance chain from rhgb^ to
Xorg[1084]. It must be broken again by fixing exec(). Candidate patch should
follow soon.

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2012-01-02 11:21:27 EST ---

Created <span class=""><a href="attachment.cgi?id=550268&amp;action=diff" name="attach_550268" title="">attachment 550268</a> <a href="attachment.cgi?id=550268&amp;action=edit" title="">[details]</a></span>
Move &quot;exit_robust_list&quot; into mm_release(); nullify lists after cleanup (v2)

This is a backport of upstream commits 8141c7f3 &amp; fc6b177d:

    We don't want to get rid of the futexes just at exit() time, we want
    to drop them when doing an execve() too, since that gets rid of the
    previous VM image too.

    Doing it at mm_release() time means that we automatically always do it
    when we disassociate a VM map from the task.

    The robust list pointers of user space held futexes are kept intact
    over an exec() call. When the exec'ed task exits exit_robust_list() is
    called with the stale pointer. The risk of corruption is minimal, but
    still it is incorrect to keep the pointers valid. Actually glibc
    should uninstall the robust list before calling exec() but we have to
    deal with it anyway.

    Nullify the pointers after [compat_]exit_robust_list() has been
    called.

The fault caused by the stale robust_list pointer was spuriously resolved
to MMIO in Xen HVM guests on IA64.

Inclusion of &lt;linux/compat.h&gt; in kernel/fork.c depends on !__GENKSYMS__ in
order to avoid kABI breakage.

----o----

--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2012-01-06 04:17:33 EST ---

(In reply to <a href="show_bug.cgi?id=771764#c71">comment #71</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=771764#c68">comment #68</a>)
&gt;&gt; (In reply to <a href="show_bug.cgi?id=771764#c63">comment #63</a>)
&gt;&gt;&gt; ...
&gt;&gt;&gt; Can you please also test the kernel as described in <a class="bz_bug_link
          bz_secure
    "
   title=""
   href="show_bug.cgi?id=711531">bug 711531</a>
&gt;&gt;&gt; <a href="show_bug.cgi?id=771764#c0">comment 0</a>? (It doesn't matter if it's a guest or the host, or even bare
&gt;&gt;&gt; metal.)</span >

<span class="quote">&gt; Is this supposed to be tested with a privileged user?</span >

It should make no difference.

I think the test program checks if robust mutexen are indeed robust &lt;<a href="http://www.opengroup.org/onlinepubs/9699919799/functions/pthread_mutexattr_getrobust.html">http://www.opengroup.org/onlinepubs/9699919799/functions/pthread_mutexattr_getrobust.html</a>&gt;. Basically, a mutex can be shared by threads in the same process, or by threads in different processes (process-shared mutex).

If the mutex is process shared and robust, and thread T1 in process P1 locks it, and then process P1 exits or executes another image, then the next thread T2 in process P2 trying to acquire the mutex will get EOWNERDEAD. (Other contenders will block on the mutex). Then T2 can clean up the shared state, mark the mutex consistent, and unlock the mutex. This way global progress can be made.

If it's not the entire process P1 to exit, just thread T1 (which also enables the single-process case, ie. threads T1 and T2 are in the same process P1), and T1 exits while holding the mutex (returns from the thread start function or calls pthread_exit()), then returning EOWNERDEAD to T2 in pthread_mutex_lock() is optional -- preventing the deadlock in this case is not mandatory for the system.

The test program checks four cases. There are two dimensions and all variations are tested. The first dimension is the above, ie. whether T1 and T2 share P1, or belong to different processes (via fork()). Linux seems to provide (otherwise not mandated, but allowed) EOWNERDEAD even for threads sharing the same process.

The second dimension is whether the test program tries to &quot;patch up&quot; glibc dynamically, ie. if it calls the set_robust_list() syscall manually right after fork(). The test program uses pthread_atfork() for this &lt;<a href="http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_atfork.html">http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_atfork.html</a>&gt;, it copies the robust_list pointer from the parent to the child if glibc doesn't take care of that itself. The test program was originally a reproducer for the glibc bug -- when it says in case #4: &quot;forks with NO post-fork set_robust_list -- hangs (no owner-death cleanup)&quot;, it demonstrates the missing set_robust_list() call after fork() in glibc.

With the glibc patch applied this dimension should make no difference, all four test cases and the entire test run should complete.

I also executed the test program (in the HVM Xen guest that I used to debug the bug), on the brew kernel from <a href="show_bug.cgi?id=771764#c61">comment 61</a> (_gks2), after the guest booted successfully into runlevel 5. The test program exited successfully (which matches Qixiang's results in <a href="show_bug.cgi?id=771764#c68">comment 68</a>), so I think we can consider this verified.


--- Additional comment from <a href="mailto:lersek&#64;redhat.com">lersek&#64;redhat.com</a> on 2012-02-01 11:04:29 EST ---

We tracked down where gppa=0xe0cea500 comes from: why is that
(pseudo-)physical page mapped into Xorg at all?

Xorg contains a bunch of ioperm() calls
[hw/xfree86/os-support/linux/lnx_video.c]:
- xf86EnableIO()
- xf86DisableIO()
- xf86DisableInterrupts()
- xf86EnableInterrupts()

xf86EnableIO() is the most probable caller.

ioperm() is a libc function which depends on appropriate privileges (Petr
tested its EPERM condition in the IA64 HVM guest). On IA64, ioperm() is
implemented like this [sysdeps/unix/sysv/linux/ia64/ioperm.c]:

- &quot;get I/O base physical address from ar.k0 as per PRM&quot; --&gt; phys_io_base,
- open /dev/mem --&gt; this gives access to (pseudo-)physical memory,
  if the process has appropriate privileges,
- get a length from &quot;io_offset(MAX_PORT)&quot; --&gt; returns 64 MB (see also
  chapter 10.7 &quot;I/O Port Space Model&quot; in the Itanium(R) SDM rev 2.3),
- mmap offset range [phys_io_base, phys_io_base + len) from /dev/mem,
- close the file descriptor.

(Should Xorg execute another image with such a mapping: memory mappings are
dropped on execve(), and the fd is closed early enough. Xorg is not
multi-threaded, so the &quot;usual&quot; FD_CLOEXEC (or close()) race against other
threads shouldn't apply.)

The mappings of the Xorg process (from /proc/PID/maps, some fields omitted):
- virtual address range: 2000000000c00000-2000000004c00000
- consequently, size: 64 MB
- file: /dev/mem
- start offset in file: e0000000

From /proc/iomem (in the guest):
  e0000000-e033dcf7 : PCI Bus 0000:00 I/O Ports 00000000-00000cf7
  e0340d00-e3ffffff : PCI Bus 0000:00 I/O Ports 00000d00-0000ffff

Also 64 MB (e0000000 .. e3ffffff). Plus, 0x400 bytes (= 1 KB) are allocated
for each port.

Again, gppa=0xe0cea500, falling in the second iomem range. Xorg must have
attempted to access the following port:

     (gppa - iomem_range_base) / bytes_per_port + port_base
  == (0xe0cea500 - 0xe0340d00) / 0x400 + 0xD00
  == 0x9A9800 / 0x400 + 0xD00
  == 0x26A6 + 0xD00
  == 0x33A6

Which is quite close to the 0x33A8 described in <a href="show_bug.cgi?id=771764#c45">comment 45</a>. There's some
&quot;non-linearity&quot; between the two port ranges above; if we rebase the formula
onto the first range:

     (0xe0cea500 - 0xe0000000) / 0x400 + 0x0 ~= 0x33A9

In summary,
- itc.d and its dependencies are kernel-space only in the guest,
- qemu-dm's reaction to an ill-sized MMIO request could be hardened perhaps,
  but it needs more analysis,
- Xorg had the gppa mapped because that's how ioperm() works on IA64.

</pre>
    </div>

    <div id="c5" class="bz_comment
            "
    >

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=771764#c5">Comment 5</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard redhat_user"><span class="fn">errata-xmlrpc</span>
</span>
        </span>

        
        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-02-09 16:41:53 UTC
        </span>

      </div>

      


      
      



<pre class="bz_comment_text">This issue has been addressed in following products:

  Red Hat Enterprise Linux 5

Via RHSA-2012:0107 <a href="https://rhn.redhat.com/errata/RHSA-2012-0107.html">https://rhn.redhat.com/errata/RHSA-2012-0107.html</a>

</pre>
    </div>

    <div id="c7" class="bz_comment
            "
    >

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=771764#c7">Comment 7</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard "><span class="fn">Eugene Teo (Security Response)</span>
</span>
        </span>

        
        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-02-15 05:22:27 UTC
        </span>

      </div>

      


      
      



<pre class="bz_comment_text">Statement:

This issue did not affect the Linux kernel as shipped with Red Hat Enterprise Linux 4 as it did not have support for robust futexes. It did not affect Red Hat Enterprise Linux 6 and Red Hat Enterprise MRG as they have the backported fixes. This has been addressed in Red Hat Enterprise Linux 5 via <a href="https://rhn.redhat.com/errata/RHSA-2012-0107.html">https://rhn.redhat.com/errata/RHSA-2012-0107.html</a>.

</pre>
    </div>

    <div id="c9" class="bz_comment
            "
    >

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=771764#c9">Comment 9</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard redhat_user"><span class="fn">errata-xmlrpc</span>
</span>
        </span>

        
        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-03-06 17:44:00 UTC
        </span>

      </div>

      


      
      



<pre class="bz_comment_text">This issue has been addressed in following products:

  Red Hat Enterprise Linux 5.6 EUS - Server Only

Via RHSA-2012:0358 <a href="https://rhn.redhat.com/errata/RHSA-2012-0358.html">https://rhn.redhat.com/errata/RHSA-2012-0358.html</a>

</pre>
    </div>


  <script>
$(document).ready(function() {
  var mysel = document.getElementsByClassName('flag_type-415')[0];
  var relnotes = document.getElementById('cf_release_notes');
  if ( mysel && relnotes &&
      relnotes.value != '' &&
      relnotes.value != cf_doc_type_text[document.getElementById('cf_doc_type').value] &&
      mysel.options[mysel.selectedIndex].value != '+'
    )
      document.getElementById('cf_doc_warn').innerHTML = '<div class="warning "><b>Warning: Doc Text is not yet verified as correct</b></div>';
});
</script>

</td>
<td>
</td>
</tr></table>
  </div>

    <hr><div id="add_comment" class="bz_section_additional_comments">
      <table>
        <tr>
          <td>
            <fieldset>
              <legend>Note</legend>
              You need to
              <a href="show_bug.cgi?id=771764&amp;GoAheadAndLogIn=1">log in</a>
              before you can comment on or make changes to this bug.
            </fieldset>
          </td>
        </tr> 
      </table>
  </div>        

</form>

<hr>
<ul class="related_actions">
    <li><a href="show_bug.cgi?format=multiple&amp;id=771764" title="Format For Printing"><i class="fa fa-print"></i></a></li>
    <li><a href="show_bug.cgi?ctype=xml&amp;id=771764" title="Export as XML"><i class="far fa-file-excel"></i></a></li>
    <li><a href="enter_bug.cgi?cloned_bug_id=771764" title="Clone This Bug"><i class="fa fa-clone"></i></a></li>
    <li>
      <a href="enter_bug.cgi?cloned_bug_id=771764&lite=1" title="Copy is a lite weight clone that only copies the summary &amp; description">
       <i class="far fa-clone"></i>
      </a>
    </li><li>
  <a href="buglist.cgi?bug_id=771764&amp;bug_id_type=anddependson&amp;format=tvp" title="TreeView+">
    <i class="fa fa-tree"></i>
  </a>
</li>
    <li>
      <a href="#" title="Top of page">
        <i class="fa fa-arrow-up" aria-hidden="true"></i>
      </a>
    </li>
    </ul>

<br>
</div>

    <div id="footer">
      <div class="intro"></div>
<ul id="useful-links">
  <li id="links-actions"><ul class="links">
  <li class="form">
    
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_bottom" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_bottom" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_bottom"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

</ul>
  </li>

  




  
</ul>

      <div class="outro"></div>
    </div>
<script type="text/javascript">
function dt_submit() {
  var tables = $.fn.dataTable.tables( { visible: true, api: true } );
  $.each(tables.context, function() {
    var $myform = this.nTable.closest('form');

    // Checked checkboxes
    $.each(this.oInstance.$('input:checked'), function() {
      add_hidden(this.name, this.value, $myform)
    });

    // Inputs in selected rows
    $.each(this.oInstance.$('tr.selected'), function() {
      $(this).find('input').each( function() {
        add_hidden(this.name, this.value, $myform)
      });
    });

    // select boxes
    $.each(this.oInstance.$('select'), function() {
      if(($(this).val()!=="") && ($(this).val() !== 0)) {
        add_hidden(this.name, this.value, $myform);
      }
    });
  });
}

function add_hidden(nm, val, $frm) {
        $('<input />').attr('type', 'hidden')
          .attr('name', nm)
          .attr('value', val)
          .appendTo($frm);
}

$(document).ready(function() {
    $('form').submit(function( event ) {
        dt_submit();
        if( $(this).attr('id') === 'changeform') {
          return(validateEnterBug(this));
        }
    });
});

if (window.self !== window.top) {
    $('#header').addClass('bz_default_hidden');
    $('#footer').addClass('bz_default_hidden');
    $('.navigation').addClass('bz_default_hidden');
    $('body').css('background-image', 'none');
}
</script><script type="text/javascript">
$(document).ready(function() {
    $('select').not('.custom_search_condition select, #member_template select, #available_columns, #p2_component, #select_user_verify_class, #inclusion_to_remove, #exclusion_to_remove, #cc, #hide, #ack_col_edit #show, .noselectize, #j_top').each(function() {
        if(! $(this).hasClass('selectized')) {
            $(this).selectize({
                plugins: ['remove_button', 'minimum_search_length', 'extra_keys_control', 'related_fields', 'load_from_js'],
                selectOnTab: true,
                maxOptions: 'nolimit',
                minimum_search_length: 2,
                render: {
                    option: function(item, escape) {
                        var classes = "option";
                        var selected = this.items.indexOf(item.value) !== -1;
                        if(item.disabled) {
                            classes = classes + " bz_default_hidden" ;
                        }

                        return '<div class="' +  classes  + '" title="' + escape(item.title) + '" id="' + escape(item.id) + '" data-value="' + escape(item.value) + '">' +
                                    '<span>' + escape(item.text) + '</span>' +
                                '</div>';
                    }
                },
            });
        }
    });
});
</script>
  </body>
</html>