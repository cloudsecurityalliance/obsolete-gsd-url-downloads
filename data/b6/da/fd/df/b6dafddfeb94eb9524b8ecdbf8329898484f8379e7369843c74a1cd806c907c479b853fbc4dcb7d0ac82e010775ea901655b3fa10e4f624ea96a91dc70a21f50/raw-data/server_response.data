<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
  <head>
<base href="https://bugs.launchpad.net/swift/+bug/1449212/+index" />

    <meta charset="UTF-8" />
    <title>Bug #1449212 “Container level temp URLs can unintentionally leak...” : Bugs : OpenStack Object Storage (swift)</title>
    <link rel="shortcut icon" href="/@@/launchpad.png" />
    <link rel="canonical" href="https://bugs.launchpad.net/bugs/1449212" />
    
      <link rel="alternate" type="application/atom+xml" href="http://feeds.launchpad.net/bugs/1449212/bug.atom" title="Bug 1449212 Feed" />
    

    
  
  <link type="text/css" rel="stylesheet" media="screen, print" href="/+icing/rev0d8de2bfee2024772b3040d4d19f42f47395ac0d/combo.css" />


    

    
      <meta name="description" content="A user, using a container level temp URL key, can create a PUT temp URL and create a DLO/SLO that references objects in another container, potentially leaking information that was intended to be private.

Example:

# Create object in container with secrets
$ curl -i -XPUT -H'x-auth-token: AUTH_tkbfc02e65fe184fa88500de6e9293dced' http://127.0.0.1:8080/v1/AUTH_test/secrets/foo.txt --data &quot;12345&quot;
HTTP/1.1 201 Created
Last-Modified: Mon, 27 Apr 2015 18:34:45 GMT
Content-Length: 0
Etag: 827ccb0eea..." />
      <meta property="og:description" content="A user, using a container level temp URL key, can create a PUT temp URL and create a DLO/SLO that references objects in another container, potentially leaking information that was intended to be private.

Example:

# Create object in container with secrets
$ curl -i -XPUT -H'x-auth-token: AUTH_tkbfc02e65fe184fa88500de6e9293dced' http://127.0.0.1:8080/v1/AUTH_test/secrets/foo.txt --data &quot;12345&quot;
HTTP/1.1 201 Created
Last-Modified: Mon, 27 Apr 2015 18:34:45 GMT
Content-Length: 0
Etag: 827ccb0eea..." />
    

    
    
      <meta property="og:title" content="Bug #1449212 “Container level temp URLs can unintentionally leak...” : Bugs : OpenStack Object Storage (swift)" />
      <meta property="og:type" content="website" />
      <meta property="og:image" content="/@@/launchpad.png" />
      <meta property="og:url" content="https://bugs.launchpad.net/bugs/1449212" />
      <meta property="og:site_name" content="Launchpad" />
    

    

    
  

  
  
  <script type="text/javascript">
    var LP = {
        cache: {},
        links: {}
    };
  </script>

  

  <script type="text/javascript">var cookie_scope = '; Path=/; Secure; Domain=.launchpad.net';</script>

   <script type="text/javascript" src="/+combo/rev0d8de2bfee2024772b3040d4d19f42f47395ac0d/?yui/yui/yui-min.js&amp;lp/meta.js&amp;yui/loader/loader-min.js"></script>
   <script type="text/javascript">
        var raw = null;
        if (LP.devmode) {
           raw = 'raw';
        }
        YUI.GlobalConfig = {
            combine: true,
            comboBase: '/+combo/rev0d8de2bfee2024772b3040d4d19f42f47395ac0d/?',
            root: 'yui/',
            filter: raw,
            debug: false,
            fetchCSS: false,
            maxURLLength: 2000,
            groups: {
                lp: {
                    combine: true,
                    base: '/+combo/rev0d8de2bfee2024772b3040d4d19f42f47395ac0d/?lp/',
                    comboBase: '/+combo/rev0d8de2bfee2024772b3040d4d19f42f47395ac0d/?',
                    root: 'lp/',
                    // comes from including lp/meta.js
                    modules: LP_MODULES,
                    fetchCSS: false
                }
            }
        }</script>

  <script type="text/javascript">
      // we need this to create a single YUI instance all events and code
      // talks across. All instances of YUI().use should be based off of
      // LPJS instead.
      var LPJS = new YUI();
  </script>



    <script id="base-layout-load-scripts" type="text/javascript">
        //<![CDATA[
        LPJS.use('base', 'node', 'console', 'event',
            'oop', 'lp', 'lp.app.foldables','lp.app.sorttable',
            'lp.app.inlinehelp', 'lp.app.links',
            'lp.bugs.bugtask_index', 'lp.bugs.subscribers',
            'lp.app.ellipsis', 'lp.code.branchmergeproposal.diff',
            'lp.views.global',
             function(Y) {

            Y.on("domready", function () {
                var global_view = new Y.lp.views.Global();
                global_view.render();

                Y.lp.app.sorttable.SortTable.init();
                Y.lp.app.inlinehelp.init_help();
                Y.lp.activate_collapsibles();
                Y.lp.app.foldables.activate();
                Y.lp.app.links.check_valid_lp_links();
            });

            Y.on('lp:context:web_link:changed', function(e) {
                  window.location = e.new_value;
            });
        });
        //]]>
    </script>
    <script id="base-helper-functions" type="text/javascript">
         //<![CDATA[
        // This code is pulled from lp.js that needs to be available on every
        // request. Pulling here to get it outside the scope of the YUI block.
        function setFocusByName(name) {
            // Focus the first element matching the given name which can be focused.
            var nodes = document.getElementsByName(name);
            var i, node;
            for (i = 0; i < nodes.length; i++) {
                node = nodes[i];
                if (node.focus) {
                    try {
                        // Trying to focus a hidden element throws an error in IE8.
                        if (node.offsetHeight !== 0) {
                            node.focus();
                        }
                    } catch (e) {
                        LPJS.use('console', function(Y) {
                            Y.log('In setFocusByName(<' +
                                node.tagName + ' type=' + node.type + '>): ' + e);
                        });
                    }
                    break;
                }
            }
        }

        function selectWidget(widget_name, event) {
          if (event && (event.keyCode === 9 || event.keyCode === 13)) {
              // Avoid firing if user is tabbing through or simply pressing
              // enter to submit the form.
              return;
          }
          document.getElementById(widget_name).checked = true;
        }
        //]]>
    </script>

    
      
      <script type="text/javascript" id="available-official-tags-js">var available_official_tags = ["account-server", "consistency-engine", "container-server", "documentation", "ec-erasure-coding", "flakey-test", "i18n", "low-hanging-fruit", "middleware", "object-server", "ops", "proxy-server", "python3", "security", "test"];</script>
      <script type="text/javascript">
        LPJS.use('base', 'node', 'oop', 'event', 'lp.bugs.bugtask_index',
                  'lp.bugs.subscribers', 'lp.code.branchmergeproposal.diff',
                  'lp.app.comment', 'lp.services.messages.edit', function(Y) {
            Y.on('domready', function() {
                Y.lp.code.branchmergeproposal.diff.connect_diff_links();
                Y.lp.bugs.bugtask_index.setup_bugtask_index();
                Y.lp.bugs.bugtask_index.setup_bugtask_table();
                LP.cache.comment_context = LP.cache.bug;
                var cl = new Y.lp.app.comment.CommentList();
                cl.render();
                var sl = new Y.lp.bugs.subscribers.createBugSubscribersLoader({
                    container_box: '#other-bug-subscribers',
                    subscribers_details_view:
                        '/+bug-portlet-subscribers-details',
                    subscribe_someone_else_link: '.menu-link-addsubscriber'
                }, window);

                Y.lp.services.messages.edit.setup();
            });
         });
      </script>
      <style type="text/css">
        /* Align the 'add comment' link to the right of the comment box. */
        #add-comment-form textarea { width: 100%; }
        #add-comment-form { max-width: 60em; padding-bottom: 4em; }
        #add-comment-form .actions {float: right;}
        .buglink-summary dd { font-size: 10px; }
        a#privacy-link:link:hover, a#privacy-link:visited:hover {text-decoration:none;}
      </style>
      <style type="text/css">
        .yui3-overlay .value label  {
          /* It normally makes sense for form labels to be bold, but since
          this form consists only of radio buttons, there's nothing but labels
          so we just get wall-to-wall bold. */
          font-weight: normal !important;
        }
      </style>
    
    
  </head>

  <body id="document" itemscope="" itemtype="http://schema.org/WebPage" class="tab-bugs
      main_side
      public
      yui3-skin-sam">
          
          
    <div class="yui-d0">
      <div id="locationbar" class="login-logout">
        

<div id="logincontrol"><a href="https://bugs.launchpad.net/swift/+bug/1449212/+login">Log in / Register</a></div>



      </div><!--id="locationbar"-->

      <div id="watermark" class="watermark-apps-portlet">
        <div>
          <a href="https://launchpad.net/swift"><img alt="" width="64" height="64" src="https://launchpadlibrarian.net/52141984/os64.png" /></a>
        </div>
        <div class="wide">
          <h2 id="watermark-heading"><a href="https://launchpad.net/swift">OpenStack Object Storage (swift)</a></h2>
        </div>
        
  <!-- Application Menu -->
  <ul class="facetmenu">
    
      
      <li class="overview"><a href="https://launchpad.net/swift">Overview</a></li>
      
    
    
      
      <li class="branches"><a href="https://code.launchpad.net/swift">Code</a></li>
      
    
    
      <li class="bugs active"><a href="https://bugs.launchpad.net/swift">Bugs</a></li>
      
      
    
    
      
      <li class="specifications"><a href="https://blueprints.launchpad.net/swift">Blueprints</a></li>
      
    
    
      
      <li class="translations"><a href="https://translations.launchpad.net/swift">Translations</a></li>
      
    
    
      
      <li class="answers"><a href="https://answers.launchpad.net/swift">Answers</a></li>
      
    
  </ul>

      </div>

      <div class="yui-t4">
        <div id="maincontent" class="yui-main">
          <div class="yui-b" dir="ltr">
            <div class="context-publication">
              
      <h1 id="edit-title">
<span class="yui3-editable_text-text ellipsis" style="max-width: 95%;">
    Container level temp URLs can unintentionally leak data.
</span>
  
</h1>



    
              

              <div id="registration" class="registering">
                
      Bug #1449212 reported by
      <a href="https://launchpad.net/~richard-hawkins" class="sprite person">Richard Hawkins</a>
      <time title="2015-04-27 18:59:22 UTC" datetime="2015-04-27T18:59:22.603443+00:00">on 2015-04-27</time>
    
              </div>
            </div>

            
            <div id="request-notifications">
              
            </div>

            
              <div>

      

      <div id="bug-is-duplicate">
          
      </div>
      

      <div style="float: right;">
        <span><a href="/+help-bugs/bug-heat.html" target="help" class="sprite flame">262</a></span>
      </div>

      


  
  
    <div class="actions">
      <span id="affectsmetoo" style="display: inline">This bug affects 1 person</span>
    </div>
  



    <table id="affected-software" class="listing">
      <thead>
        <tr>
          <th colspan="2">Affects</th>
          <th>Status</th>
          <th>Importance</th>
          <th>Assigned to</th>
          <th>Milestone</th>
        </tr>
      </thead>

      <tbody>
        
          
  <tr class="highlight" id="tasksummary1816738">
    <td>
      <a class="bugtask-expander" href="https://bugs.launchpad.net/swift/+bug/1449212/+editstatus">
        &#8203;
      </a>
    </td>
    
    <td>
      <span id="bugtarget-picker-tasksummary1816738">
        <span class="yui3-activator-data-box">
            <a class="sprite product" href="https://bugs.launchpad.net/swift">OpenStack Object Storage (swift)</a>
        </span>
        <button class="lazr-btn yui3-activator-act yui3-activator-hidden">
          Edit
        </button>
        <div class="yui3-activator-message-box yui3-activator-hidden"></div>
        
      </span>
    </td>

    

    
    <td style="width: 20%; vertical-align: middle">
      <div class="status-content" style="width: 100%; float: left">
        
        
          <a href="https://bugs.launchpad.net/swift/+bug/1449212/+editstatus" style="float: left" class="value statusFIXRELEASED">Fix Released</a>
          <a href="https://bugs.launchpad.net/swift/+bug/1449212/+editstatus" style="margin-left: 3px">
            <img class="editicon" src="/@@/edit" />
          </a>
        
      </div>
    </td>

    
    <td style="width: 15em; vertical-align: middle">
      <div class="importance-content" style="width: 100%; float: left">
        <span style="float: left" class="value importanceCRITICAL">Critical</span>
      </div>
    </td>

    <td style="width:20%; margin: 0; padding: 0;
               vertical-align: middle; padding-left: 0.5em">
      

      
        <span id="assignee-picker-tasksummary1816738">
          <span class="yui3-activator-data-box">
            
            
              Unassigned
            
          </span>
          
          <button class="lazr-btn yui3-activator-act yui3-activator-hidden">
            Edit
          </button>
          <div class="yui3-activator-message-box yui3-activator-hidden"></div>
        </span>
      
    </td>

    <td style="width: 20%; vertical-align: middle">
      <div class="milestone-content" style="width: 100%; float: left">
        
        <a class="value" href="https://launchpad.net/swift/+milestone/2.4.0">OpenStack Object Storage (swift) 2.4.0</a>
        
      </div>
    </td>

    
  </tr>

  
    <tr class="bugtask-collapsible-content hidden" id="task1816738">
     <td colspan="7"><form action="/swift/+bug/1449212/+editstatus" method="post" enctype="multipart/form-data">
  

  <p class="error message">
    You need to log in to change this bug's status.
  </p>
  
  <table class="summary" style="float: right; margin-left: 1em;">
    <tr>
      <th>Affecting:</th>
      <td><a href="/swift">OpenStack Object Storage (swift)</a></td>
    </tr>
    <tr>
      <th>Filed here by:</th>
      <td><a href="https://launchpad.net/~richard-hawkins" class="sprite person">Richard Hawkins</a></td>
    </tr>
    <tr>
      <th>When:</th>
      <td>
        <time title="2015-04-27 18:59:22 UTC" datetime="2015-04-27T18:59:22.603443+00:00">2015-04-27</time>
      </td>
    </tr>
    <tr>
      <th>Confirmed:</th>
      <td>
        <time title="2015-04-27 20:12:37 UTC" datetime="2015-04-27T20:12:37.376677+00:00">2015-04-27</time>
      </td>
    </tr>
    
    <tr>
      <th>Started work:</th>
      <td>
        <time title="2015-08-27 10:28:41 UTC" datetime="2015-08-27T10:28:41.231981+00:00">2015-08-27</time>
      </td>
    </tr>
    <tr>
      <th>Completed:</th>
      <td>
        <time title="2015-09-01 12:25:16 UTC" datetime="2015-09-01T12:25:16.655542+00:00">2015-09-01</time>
      </td>
    </tr>
  </table>
  <div class="field">
    <table>
      <tr>
        <td>
          <label for="swift.target">Target</label>
        </td>
      </tr>
      <tr>
        <td>
          <table>
  <tr>
    <td>
      <label>
        <input class="radioType" id="swift.target.option.package" name="swift.target" type="radio" value="package" />
        Distribution
      </label>
    </td>
    <td>
      <select id="swift.target.distribution" name="swift.target.distribution" size="1" >
<option value="baltix">Baltix</option>
<option value="boss">BOSS</option>
<option value="charms">Juju Charms Collection</option>
<option value="elbuntu">Elbuntu</option>
<option value="guadalinex">Guadalinex</option>
<option value="guadalinexedu">Guadalinex Edu</option>
<option value="kiwilinux">Kiwi Linux</option>
<option value="nubuntu">nUbuntu</option>
<option value="pld-linux">PLD Linux</option>
<option value="tilix">Tilix</option>
<option value="tuxlab">tuXlab</option>
<option selected="selected" value="ubuntu">Ubuntu</option>
<option value="ubuntu-leb">Ubuntu Linaro Evaluation Build</option>
<option value="ubuntu-rtm">Ubuntu RTM</option>
</select>
<input name="swift.target.distribution-empty-marker" type="hidden" value="1" />
    </td>
  </tr>
  <tr>
    <td align="right">
      <label for="swift.target.option.package">
        Package
      </label>
    </td>
    <td>
      


    <input type="text" value="" id="swift.target.package"
                         name="swift.target.package" size="20"
                         maxlength=""
                         onKeyPress="selectWidget(&#x27;swift.target.option.package&#x27;, event)" style=""
                         class="" />

    
      
      <script type="text/javascript">
          LPJS.use('node', 'lp.app.picker', function(Y) {
              var text_input = Y.DOM.byId('swift.target.package');
              var select_menu = Y.DOM.byId('swift.target.package-suggestions');
              Y.lp.app.picker.connect_select_menu(
                  select_menu, text_input);
          });</script>
    

    <span class="hidden">(<a id="show-widget-swift-target-package" href="#">Find&hellip;</a>)</span>
    <script>
    LPJS.use('node', 'lp.app.picker', function(Y) {
        var config = {"remove_person_text": "Remove person", "picker_type": "default", "extra_no_results_message": null, "header": "Select a package", "vocabulary_filters": [], "input_element": "swift.target.package", "show_remove_button": false, "show_assign_me_button": false, "step_title": "Search by name", "show_widget_id": "show-widget-swift-target-package", "selected_value": null, "selected_value_metadata": null, "remove_team_text": "Remove team", "assign_me_text": "Pick me", "show_create_team": false, "vocabulary_name": "DistributionPackage"};
        var show_widget_id = 'show-widget-swift-target-package';
        Y.lp.app.picker.addPicker(config, show_widget_id);
    });
    </script>
  



    </td>
  </tr>

  <tr>
    <td>
      <label>
        <input class="radioType" checked="checked" id="swift.target.option.product" name="swift.target" type="radio" value="product" />
       Project
      </label>
    </td>
    <td>
      


    <input type="text" value="swift" id="swift.target.product"
                         name="swift.target.product" size="20"
                         maxlength=""
                         onKeyPress="selectWidget(&#x27;swift.target.option.product&#x27;, event)" style=""
                         class="" />

    
      
      <script type="text/javascript">
          LPJS.use('node', 'lp.app.picker', function(Y) {
              var text_input = Y.DOM.byId('swift.target.product');
              var select_menu = Y.DOM.byId('swift.target.product-suggestions');
              Y.lp.app.picker.connect_select_menu(
                  select_menu, text_input);
          });</script>
    

    <span class="hidden">(<a id="show-widget-swift-target-product" href="#">Find&hellip;</a>)</span>
    <script>
    LPJS.use('node', 'lp.app.picker', function(Y) {
        var config = {"remove_person_text": "Remove person", "picker_type": "default", "extra_no_results_message": null, "header": "Select a project", "vocabulary_filters": [], "input_element": "swift.target.product", "show_remove_button": false, "show_assign_me_button": false, "step_title": "Search", "show_widget_id": "show-widget-swift-target-product", "selected_value": "swift", "selected_value_metadata": null, "remove_team_text": "Remove team", "assign_me_text": "Pick me", "show_create_team": false, "vocabulary_name": "Product"};
        var show_widget_id = 'show-widget-swift-target-product';
        Y.lp.app.picker.addPicker(config, show_widget_id);
    });
    </script>
  



    </td>
  </tr>
</table>

          
        </td>
      </tr>
    </table>
    
    <table>
      <tr>
        <td>
          <label style="font-weight: bold" for="swift.status">Status</label>
        </td>
        <td>
          <label style="font-weight: bold" for="swift.importance">Importance</label>
        </td>
        <td>
          <label style="font-weight: bold" for="swift.milestone">Milestone</label>
        </td>
      </tr>
      <tr>
        <td><div>
<div class="value">
<select id="swift.status" name="swift.status" size="1" >
<option selected="selected" value="Fix Released">Fix Released</option>
</select>
</div>
<input name="swift.status-empty-marker" type="hidden" value="1" />
</div></td>
        <td title="Changeable only by a project maintainer or bug supervisor">
          <span class="sprite read-only"></span>
          <span class="importanceCRITICAL">Critical</span>
        </td>
        <td title="Changeable only by a project maintainer or bug supervisor">
          <span class="sprite read-only"></span>
          OpenStack Object Storage (swift) 2.4.0
        </td>
      </tr>
    </table>
    <table>
      <tr>
        <td>
          <label style="font-weight: bold" for="swift.assignee">Assigned to</label>
        </td>
      </tr>
      <tr>
        <td colspan="2" style="white-space: nowrap">

  <table>
    <tr>
      <td style="padding: 0 2px 2px 0">
        <input type="radio" checked="checked" id="swift.assignee.assign_to_nobody" name="swift.assignee.option" value="swift.assignee.assign_to_nobody" />
      </td>
      <td style="padding: 0">
        <label style="font-weight: normal" for="swift.assignee.assign_to_nobody">
          Nobody
        </label>
      </td>
    </tr>
    <tr>
      <td style="padding: 0 2px 2px 0">
        <input type="radio" id="swift.assignee.assign_to_me" name="swift.assignee.option" value="swift.assignee.assign_to_me" />
      </td>
      <td style="padding: 0">
        <label style="font-weight: normal" for="swift.assignee.assign_to_me">
          Me
        </label>
      </td>
    </tr>
    
    
  </table>


</td>
      </tr>
    </table>
    
  </div>
  <div class="field">
    <div>
      <label style="font-weight: bold" for="swift.comment_on_change">Comment on this change (optional)</label>
      <textarea cols="62" rows="4" id="swift.comment_on_change" name="swift.comment_on_change"></textarea>
    </div>
    <div>
      <label style="font-weight: normal">
        <input type="checkbox" name="subscribe" id="subscribe" value="Subscribe" />
        Email me about changes to this bug report
      </label>
    </div>
  </div>
  
</form>
</td>
    </tr>
  


        
        
          
  <tr>
    <td colspan="6">
      <div class="subordinate">
        <span>Declined</span> for
        <span>Juno</span>
        by <a href="https://launchpad.net/~notmyname" class="sprite person">John Dickinson</a>
        
          
        
    </div>
  </td>
</tr>


        
        
          
  <tr id="tasksummary1892003">
    <td>
      <a class="bugtask-expander" href="https://bugs.launchpad.net/swift/kilo/+bug/1449212/+editstatus">
        &#8203;
      </a>
    </td>
    <td style="padding: 0.3em 0em 0.3em 1.5em">
      <span class="sprite milestone"></span>
      
        <a href="https://bugs.launchpad.net/swift/kilo">Kilo</a>
      
        
    </td>
    

    

    
    <td style="width: 20%; vertical-align: middle">
      <div class="status-content" style="width: 100%; float: left">
        
        
          <a href="https://bugs.launchpad.net/swift/kilo/+bug/1449212/+editstatus" style="float: left" class="value statusFIXCOMMITTED">Fix Committed</a>
          <a href="https://bugs.launchpad.net/swift/kilo/+bug/1449212/+editstatus" style="margin-left: 3px">
            <img class="editicon" src="/@@/edit" />
          </a>
        
      </div>
    </td>

    
    <td style="width: 15em; vertical-align: middle">
      <div class="importance-content" style="width: 100%; float: left">
        <span style="float: left" class="value importanceUNDECIDED">Undecided</span>
      </div>
    </td>

    <td style="width:20%; margin: 0; padding: 0;
               vertical-align: middle; padding-left: 0.5em">
      

      
        <span id="assignee-picker-tasksummary1892003">
          <span class="yui3-activator-data-box">
            
            
              Unassigned
            
          </span>
          
          <button class="lazr-btn yui3-activator-act yui3-activator-hidden">
            Edit
          </button>
          <div class="yui3-activator-message-box yui3-activator-hidden"></div>
        </span>
      
    </td>

    <td style="width: 20%; vertical-align: middle">
      <div class="milestone-content" style="width: 100%; float: left">
        
        <a class="value" href=""></a>
        
      </div>
    </td>

    
  </tr>

  
    <tr class="bugtask-collapsible-content hidden" id="task1892003">
     <td colspan="7"><form action="/swift/kilo/+bug/1449212/+editstatus" method="post" enctype="multipart/form-data">
  

  <p class="error message">
    You need to log in to change this bug's status.
  </p>
  
  <table class="summary" style="float: right; margin-left: 1em;">
    <tr>
      <th>Affecting:</th>
      <td><a href="/swift/kilo">OpenStack Object Storage (swift) kilo</a></td>
    </tr>
    <tr>
      <th>Filed here by:</th>
      <td><a href="https://launchpad.net/~notmyname" class="sprite person">John Dickinson</a></td>
    </tr>
    <tr>
      <th>When:</th>
      <td>
        <time title="2015-08-18 06:19:40 UTC" datetime="2015-08-18T06:19:40.249677+00:00">2015-08-18</time>
      </td>
    </tr>
    <tr>
      <th>Confirmed:</th>
      <td>
        <time title="2015-09-04 10:32:19 UTC" datetime="2015-09-04T10:32:19.378895+00:00">2015-09-04</time>
      </td>
    </tr>
    
    <tr>
      <th>Started work:</th>
      <td>
        <time title="2015-09-04 10:32:19 UTC" datetime="2015-09-04T10:32:19.378895+00:00">2015-09-04</time>
      </td>
    </tr>
    
  </table>
  <div class="field">
    
    
    <table>
      <tr>
        <td>
          <label style="font-weight: bold" for="swift_kilo.status">Status</label>
        </td>
        <td>
          <label style="font-weight: bold" for="swift_kilo.importance">Importance</label>
        </td>
        
      </tr>
      <tr>
        <td><div>
<div class="value">
<select id="swift_kilo.status" name="swift_kilo.status" size="1" >
<option selected="selected" value="Fix Committed">Fix Committed</option>
</select>
</div>
<input name="swift_kilo.status-empty-marker" type="hidden" value="1" />
</div></td>
        <td title="Changeable only by a project maintainer or bug supervisor">
          <span class="sprite read-only"></span>
          <span class="importanceUNDECIDED">Undecided</span>
        </td>
        
      </tr>
    </table>
    <table>
      <tr>
        <td>
          <label style="font-weight: bold" for="swift_kilo.assignee">Assigned to</label>
        </td>
      </tr>
      <tr>
        <td colspan="2" style="white-space: nowrap">

  <table>
    <tr>
      <td style="padding: 0 2px 2px 0">
        <input type="radio" checked="checked" id="swift_kilo.assignee.assign_to_nobody" name="swift_kilo.assignee.option" value="swift_kilo.assignee.assign_to_nobody" />
      </td>
      <td style="padding: 0">
        <label style="font-weight: normal" for="swift_kilo.assignee.assign_to_nobody">
          Nobody
        </label>
      </td>
    </tr>
    <tr>
      <td style="padding: 0 2px 2px 0">
        <input type="radio" id="swift_kilo.assignee.assign_to_me" name="swift_kilo.assignee.option" value="swift_kilo.assignee.assign_to_me" />
      </td>
      <td style="padding: 0">
        <label style="font-weight: normal" for="swift_kilo.assignee.assign_to_me">
          Me
        </label>
      </td>
    </tr>
    
    
  </table>


</td>
      </tr>
    </table>
    
  </div>
  <div class="field">
    <div>
      <label style="font-weight: bold" for="swift_kilo.comment_on_change">Comment on this change (optional)</label>
      <textarea cols="62" rows="4" id="swift_kilo.comment_on_change" name="swift_kilo.comment_on_change"></textarea>
    </div>
    <div>
      <label style="font-weight: normal">
        <input type="checkbox" name="subscribe" id="subscribe" value="Subscribe" />
        Email me about changes to this bug report
      </label>
    </div>
  </div>
  
</form>
</td>
    </tr>
  


        
        
          
  <tr id="tasksummary1816751">
    <td>
      <a class="bugtask-expander" href="https://bugs.launchpad.net/ossa/+bug/1449212/+editstatus">
        &#8203;
      </a>
    </td>
    
    <td>
      <span id="bugtarget-picker-tasksummary1816751">
        <span class="yui3-activator-data-box">
            <a class="sprite product" href="https://bugs.launchpad.net/ossa">OpenStack Security Advisory</a>
        </span>
        <button class="lazr-btn yui3-activator-act yui3-activator-hidden">
          Edit
        </button>
        <div class="yui3-activator-message-box yui3-activator-hidden"></div>
        
      </span>
    </td>

    

    
    <td style="width: 20%; vertical-align: middle">
      <div class="status-content" style="width: 100%; float: left">
        
        
          <a href="https://bugs.launchpad.net/ossa/+bug/1449212/+editstatus" style="float: left" class="value statusFIXRELEASED">Fix Released</a>
          <a href="https://bugs.launchpad.net/ossa/+bug/1449212/+editstatus" style="margin-left: 3px">
            <img class="editicon" src="/@@/edit" />
          </a>
        
      </div>
    </td>

    
    <td style="width: 15em; vertical-align: middle">
      <div class="importance-content" style="width: 100%; float: left">
        <span style="float: left" class="value importanceMEDIUM">Medium</span>
      </div>
    </td>

    <td style="width:20%; margin: 0; padding: 0;
               vertical-align: middle; padding-left: 0.5em">
      

      
        <span id="assignee-picker-tasksummary1816751">
          <span class="yui3-activator-data-box">
            <a class="sprite person" href="https://launchpad.net/~tristan-cacqueray">Tristan Cacqueray</a>
            
          </span>
          
          <button class="lazr-btn yui3-activator-act yui3-activator-hidden">
            Edit
          </button>
          <div class="yui3-activator-message-box yui3-activator-hidden"></div>
        </span>
      
    </td>

    <td style="width: 20%; vertical-align: middle">
      
    </td>

    
  </tr>

  
    <tr class="bugtask-collapsible-content hidden" id="task1816751">
     <td colspan="7"><form action="/ossa/+bug/1449212/+editstatus" method="post" enctype="multipart/form-data">
  

  <p class="error message">
    You need to log in to change this bug's status.
  </p>
  
  <table class="summary" style="float: right; margin-left: 1em;">
    <tr>
      <th>Affecting:</th>
      <td><a href="/ossa">OpenStack Security Advisory</a></td>
    </tr>
    <tr>
      <th>Filed here by:</th>
      <td><a href="https://launchpad.net/~fungi" class="sprite person">Jeremy Stanley</a></td>
    </tr>
    <tr>
      <th>When:</th>
      <td>
        <time title="2015-04-27 19:22:35 UTC" datetime="2015-04-27T19:22:35.719792+00:00">2015-04-27</time>
      </td>
    </tr>
    <tr>
      <th>Confirmed:</th>
      <td>
        <time title="2015-05-05 15:23:21 UTC" datetime="2015-05-05T15:23:21.537078+00:00">2015-05-05</time>
      </td>
    </tr>
    <tr>
      <th>Assigned:</th>
      <td>
        <time title="2015-08-20 19:53:06 UTC" datetime="2015-08-20T19:53:06.717882+00:00">2015-08-20</time>
      </td>
    </tr>
    <tr>
      <th>Started work:</th>
      <td>
        <time title="2015-08-20 19:53:12 UTC" datetime="2015-08-20T19:53:12.419043+00:00">2015-08-20</time>
      </td>
    </tr>
    <tr>
      <th>Completed:</th>
      <td>
        <time title="2015-09-08 12:15:18 UTC" datetime="2015-09-08T12:15:18.808356+00:00">2015-09-08</time>
      </td>
    </tr>
  </table>
  <div class="field">
    <table>
      <tr>
        <td>
          <label for="ossa.target">Target</label>
        </td>
      </tr>
      <tr>
        <td>
          <table>
  <tr>
    <td>
      <label>
        <input class="radioType" id="ossa.target.option.package" name="ossa.target" type="radio" value="package" />
        Distribution
      </label>
    </td>
    <td>
      <select id="ossa.target.distribution" name="ossa.target.distribution" size="1" >
<option value="baltix">Baltix</option>
<option value="boss">BOSS</option>
<option value="charms">Juju Charms Collection</option>
<option value="elbuntu">Elbuntu</option>
<option value="guadalinex">Guadalinex</option>
<option value="guadalinexedu">Guadalinex Edu</option>
<option value="kiwilinux">Kiwi Linux</option>
<option value="nubuntu">nUbuntu</option>
<option value="pld-linux">PLD Linux</option>
<option value="tilix">Tilix</option>
<option value="tuxlab">tuXlab</option>
<option selected="selected" value="ubuntu">Ubuntu</option>
<option value="ubuntu-leb">Ubuntu Linaro Evaluation Build</option>
<option value="ubuntu-rtm">Ubuntu RTM</option>
</select>
<input name="ossa.target.distribution-empty-marker" type="hidden" value="1" />
    </td>
  </tr>
  <tr>
    <td align="right">
      <label for="ossa.target.option.package">
        Package
      </label>
    </td>
    <td>
      


    <input type="text" value="" id="ossa.target.package"
                         name="ossa.target.package" size="20"
                         maxlength=""
                         onKeyPress="selectWidget(&#x27;ossa.target.option.package&#x27;, event)" style=""
                         class="" />

    
      
      <script type="text/javascript">
          LPJS.use('node', 'lp.app.picker', function(Y) {
              var text_input = Y.DOM.byId('ossa.target.package');
              var select_menu = Y.DOM.byId('ossa.target.package-suggestions');
              Y.lp.app.picker.connect_select_menu(
                  select_menu, text_input);
          });</script>
    

    <span class="hidden">(<a id="show-widget-ossa-target-package" href="#">Find&hellip;</a>)</span>
    <script>
    LPJS.use('node', 'lp.app.picker', function(Y) {
        var config = {"remove_person_text": "Remove person", "picker_type": "default", "extra_no_results_message": null, "header": "Select a package", "vocabulary_filters": [], "input_element": "ossa.target.package", "show_remove_button": false, "show_assign_me_button": false, "step_title": "Search by name", "show_widget_id": "show-widget-ossa-target-package", "selected_value": null, "selected_value_metadata": null, "remove_team_text": "Remove team", "assign_me_text": "Pick me", "show_create_team": false, "vocabulary_name": "DistributionPackage"};
        var show_widget_id = 'show-widget-ossa-target-package';
        Y.lp.app.picker.addPicker(config, show_widget_id);
    });
    </script>
  



    </td>
  </tr>

  <tr>
    <td>
      <label>
        <input class="radioType" checked="checked" id="ossa.target.option.product" name="ossa.target" type="radio" value="product" />
       Project
      </label>
    </td>
    <td>
      


    <input type="text" value="ossa" id="ossa.target.product"
                         name="ossa.target.product" size="20"
                         maxlength=""
                         onKeyPress="selectWidget(&#x27;ossa.target.option.product&#x27;, event)" style=""
                         class="" />

    
      
      <script type="text/javascript">
          LPJS.use('node', 'lp.app.picker', function(Y) {
              var text_input = Y.DOM.byId('ossa.target.product');
              var select_menu = Y.DOM.byId('ossa.target.product-suggestions');
              Y.lp.app.picker.connect_select_menu(
                  select_menu, text_input);
          });</script>
    

    <span class="hidden">(<a id="show-widget-ossa-target-product" href="#">Find&hellip;</a>)</span>
    <script>
    LPJS.use('node', 'lp.app.picker', function(Y) {
        var config = {"remove_person_text": "Remove person", "picker_type": "default", "extra_no_results_message": null, "header": "Select a project", "vocabulary_filters": [], "input_element": "ossa.target.product", "show_remove_button": false, "show_assign_me_button": false, "step_title": "Search", "show_widget_id": "show-widget-ossa-target-product", "selected_value": "ossa", "selected_value_metadata": null, "remove_team_text": "Remove team", "assign_me_text": "Pick me", "show_create_team": false, "vocabulary_name": "Product"};
        var show_widget_id = 'show-widget-ossa-target-product';
        Y.lp.app.picker.addPicker(config, show_widget_id);
    });
    </script>
  



    </td>
  </tr>
</table>

          
        </td>
      </tr>
    </table>
    
    <table>
      <tr>
        <td>
          <label style="font-weight: bold" for="ossa.status">Status</label>
        </td>
        <td>
          <label style="font-weight: bold" for="ossa.importance">Importance</label>
        </td>
        
      </tr>
      <tr>
        <td><div>
<div class="value">
<select id="ossa.status" name="ossa.status" size="1" >
<option selected="selected" value="Fix Released">Fix Released</option>
</select>
</div>
<input name="ossa.status-empty-marker" type="hidden" value="1" />
</div></td>
        <td title="Changeable only by a project maintainer or bug supervisor">
          <span class="sprite read-only"></span>
          <span class="importanceMEDIUM">Medium</span>
        </td>
        
      </tr>
    </table>
    <table>
      <tr>
        <td>
          <label style="font-weight: bold" for="ossa.assignee">Assigned to</label>
        </td>
      </tr>
      <tr>
        <td colspan="2" style="white-space: nowrap">

  <table>
    
    <tr>
      <td style="padding: 0 2px 2px 0">
        <input type="radio" id="ossa.assignee.assign_to_me" name="ossa.assignee.option" value="ossa.assignee.assign_to_me" />
      </td>
      <td style="padding: 0">
        <label style="font-weight: normal" for="ossa.assignee.assign_to_me">
          Me
        </label>
      </td>
    </tr>
    
      
        <tr>
          <td style="padding: 0 2px 2px 0">
              <input type="radio" checked="checked" id="ossa.assignee.assigned_to" name="ossa.assignee.option" value="ossa.assignee.assigned_to" />
          </td>
          <td style="padding: 0">
            <label style="font-weight: normal" for="ossa.assignee.assigned_to">
              Tristan Cacqueray (tristan-cacqueray)
            </label>
          </td>
        </tr>
      
    
    
  </table>


</td>
      </tr>
    </table>
    
  </div>
  <div class="field">
    <div>
      <label style="font-weight: bold" for="ossa.comment_on_change">Comment on this change (optional)</label>
      <textarea cols="62" rows="4" id="ossa.comment_on_change" name="ossa.comment_on_change"></textarea>
    </div>
    <div>
      <label style="font-weight: normal">
        <input type="checkbox" name="subscribe" id="subscribe" value="Subscribe" />
        Email me about changes to this bug report
      </label>
    </div>
  </div>
  
</form>
</td>
    </tr>
  


        
      </tbody>

    </table>



<div class="actions">
  
    <span id="also-affects-product" class="">
    <a class="menu-link-addupstream sprite add" href="https://bugs.launchpad.net/swift/+bug/1449212/+choose-affected-product">Also affects project</a>
        <a href="/+help-bugs/also-affects-project-help.html" target="help" class="sprite maybe action-icon">(?)</a>
    </span>
    <span id="also-affects-package" class="">
    <a class="menu-link-adddistro sprite add" href="https://bugs.launchpad.net/swift/+bug/1449212/+distrotask">Also affects distribution/package</a>
    </span>
    <a class="menu-link-nominate sprite milestone" href="https://bugs.launchpad.net/swift/+bug/1449212/+nominate">Nominate for series</a>
    
  

</div>




      <div id="maincontentsub">
        <div class="top-portlet">

      <div itemprop="mainContentOfPage" class="report">
        

        <div>
  <div class="lazr-multiline-edit" id="edit-description">
  <div class="clearfix">
    

    <h3>Bug Description</h3>
  </div>

  <div class="yui3-editable_text-text"><p>A user, using a container level temp URL key, can create a PUT temp URL and create a DLO/SLO that references objects in another container, potentially leaking information that was intended to be private.</p>
<p>Example:</p>
<p># Create object in container with secrets<br />
$ curl -i -XPUT -H&#x27;x-auth-token: AUTH_tkbfc02e65<wbr />fe184fa88500de6<wbr />e9293dced&#x27; <a rel="nofollow" href="http://127.0.0.1:8080/v1/AUTH_test/secrets/foo.txt">http://<wbr />127.0.0.<wbr />1:8080/<wbr />v1/AUTH_<wbr />test/secrets/<wbr />foo.txt</a> --data &quot;12345&quot;<br />
HTTP/1.1 201 Created<br />
Last-Modified: Mon, 27 Apr 2015 18:34:45 GMT<br />
Content-Length: 0<br />
Etag: 827ccb0eea8a706<wbr />c4c34a16891f84e<wbr />7b<br />
Content-Type: text/html; charset=UTF-8<br />
X-Trans-Id: txdb50279b32684<wbr />c198a1e5-<wbr />00553e8144<br />
Date: Mon, 27 Apr 2015 18:34:44 GMT</p>
<p># Create PUT temp URL, and create DLO pointing to &quot;secret&quot; container.<br />
$ curl -i -XPUT <a rel="nofollow" href="http://127.0.0.1:8080/v1/AUTH_test/container_a/uhoh.txt">http://<wbr />127.0.0.<wbr />1:8080/<wbr />v1/AUTH_<wbr />test/container_<wbr />a/uhoh.<wbr />txt</a>\?temp_<wbr />url_sig\<wbr />=b3b1a841a9262b<wbr />baa6eb546e5c205<wbr />4be17377be5\<wbr />;temp_url_<wbr />expires\<wbr />=1430160082 -H&#x27;X-Object-<wbr />Manifest: secrets/f&#x27; -H&#x27;Content-Length: 0&#x27;<br />
HTTP/1.1 201 Created<br />
Last-Modified: Mon, 27 Apr 2015 18:37:08 GMT<br />
Content-Length: 0<br />
Etag: d41d8cd98f00b20<wbr />4e9800998ecf842<wbr />7e<br />
Content-Type: text/html; charset=UTF-8<br />
X-Trans-Id: txf89037608c7a4<wbr />61f9f6f1-<wbr />00553e81d3<br />
Date: Mon, 27 Apr 2015 18:37:07 GMT</p>
<p># GET secrets using temp URL<br />
$ curl -i <a rel="nofollow" href="http://127.0.0.1:8080/v1/AUTH_test/container_a/uhoh.txt">http://<wbr />127.0.0.<wbr />1:8080/<wbr />v1/AUTH_<wbr />test/container_<wbr />a/uhoh.<wbr />txt</a>\?temp_<wbr />url_sig\<wbr />=25d3740e42b56c<wbr />bbaae15094bfc2a<wbr />4f3ce3def86\<wbr />;temp_url_<wbr />expires\<wbr />=1430160141<br />
HTTP/1.1 200 OK<br />
Content-Length: 5<br />
Accept-Ranges: bytes<br />
X-Object-Manifest: container_b/f<br />
Last-Modified: Mon, 27 Apr 2015 18:37:08 GMT<br />
Etag: &quot;1f32aa4c9a1d2e<wbr />a010adcf2348166<wbr />a04&quot;<br />
X-Timestamp: 1430159827.15679<br />
Content-Type: text/plain<br />
Content-<wbr />Disposition: attachment; filename=<wbr />&quot;uhoh.txt&quot;<wbr />; filename*<wbr />=UTF-8&#x27;<wbr />&#x27;uhoh.txt<br />
X-Trans-Id: txbfe86e01cdef4<wbr />8caaeac2-<wbr />00553e81ea<br />
Date: Mon, 27 Apr 2015 18:37:30 GMT</p>
<p>12345%</p></div>
  </div>

  
</div>


        <div style="margin:-10px 0 20px 5px" class="clearfix">
          
        </div>

        <div id="bug-tags">
          <span id="tags-heading">
            Tags:
          </span>
          <span id="tag-list">
            <a class="unofficial-tag" href="/swift/+bugs?field.tag=in-feature-crypto">in-feature-crypto</a>
            <a class="unofficial-tag" href="/swift/+bugs?field.tag=in-feature-hummingbird">in-feature-hummingbird</a>
            <a class="unofficial-tag" href="/swift/+bugs?field.tag=tempurl">tempurl</a>
          </span>
          
          <a href="+edit" title="Edit tags" id="tags-trigger" class="sprite edit action-icon">Edit</a>
          <a href="/+help-bugs/tag-help.html" target="help" class="sprite maybe action-icon">Tag help</a>
        </div>

        <script type="text/javascript">
          LPJS.use('event', 'node', 'lp.bugs.tags_entry', function(Y) {
              Y.on('domready',
                   function(e) {
                       Y.lp.bugs.tags_entry.setup_tag_entry(
                           available_official_tags);
                   },
                   window);
          });
        </script>

        <div class="clearfix"></div>
      </div>

      <div id="branches-and-cves">
        <div id="bug-branches-container" style="float: left">
          
        </div><!-- bug-branch-container -->

        <div class="cves">
          <h2>CVE References</h2>
          <ul>
            <li class="sprite cve">
              <a href="/bugs/cve/2015-5223" title="OpenStack Object Storage (Swift) befo...">2015-5223</a>
            </li>
          </ul>
        </div>

        <div class="clearfix"></div>
      </div> <!-- branches and CVEs -->

      </div>

      <div>
      
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/1" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~fungi" class="sprite person">Jeremy Stanley (fungi)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-27T19:23:17.860485+00:00" title="2015-04-27 19:23:17 UTC">on 2015-04-27</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/1"> #1</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Since this report concerns a possible security risk, an incomplete security advisory task has been added while the core security reviewers for the affected project or projects confirm the bug and discuss the scope of any vulnerability along with potential solutions.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Since this report concerns a possible security risk, an incomplete security advisory task has been added while the core security reviewers for the affected project or projects confirm the bug and discuss the scope of any vulnerability along with potential solutions.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  <div class="boardCommentActivity">
    
      <table class="bug-activity">
  
    
      
    
    <tr>
      <td style="text-align: right;">
        <b>description</b>:
      </td>
      <td>
        updated
      </td>
    </tr>
  
  
    
      <tr>
        <td colspan="2">Changed in ossa: </td>
      </tr>
    
    <tr>
      <td style="text-align: right;">
        <b>status</b>:
      </td>
      <td>
        New &#8594; Incomplete
      </td>
    </tr>
  
  
    
      
    
    <tr>
      <td style="text-align: right;">
        <b>description</b>:
      </td>
      <td>
        updated
      </td>
    </tr>
  
</table>
    
    
  </div>
  
</div>

          

          

          

        
        
          

          
              <div class="boardComment">
  <div class="boardCommentDetails">
    
      <a href="https://launchpad.net/~cschwede" class="sprite person">Christian Schwede (cschwede)</a>
    
    <time title="2015-04-27 20:12:37 UTC" datetime="2015-04-27T20:12:37.079765+00:00">on 2015-04-27</time>
  </div>
  <div class="boardCommentActivity">
    <table class="bug-activity">
  
    
      <tr>
        <td colspan="2">Changed in swift: </td>
      </tr>
    
    <tr>
      <td style="text-align: right;">
        <b>status</b>:
      </td>
      <td>
        New &#8594; Confirmed
      </td>
    </tr>
  
</table>
  </div>
</div>
          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/2" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~cschwede" class="sprite person">Christian Schwede (cschwede)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-27T20:18:05.738476+00:00" title="2015-04-27 20:18:05 UTC">on 2015-04-27</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/2"> #2</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Tested, and I can confirm this bug.</p>
<p>A possible bugfix might be something like this:</p>
<p>- set an internal flag if tempurl middleware validates a request using a container key<br />
- check this flag in the slo/dlo middleware, and if set ensure access is only granted to segments within the same container like the original request</p>
<p>Any other ideas? Does that make sense? I can attach a patch tomorrow if this makes sense to anyone.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Tested, and I can confirm this bug.

A possible bugfix might be something like this:

- set an internal flag if tempurl middleware validates a request using a container key
- check this flag in the slo/dlo middleware, and if set ensure access is only granted to segments within the same container like the original request

Any other ideas? Does that make sense? I can attach a patch tomorrow if this makes sense to anyone.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/3" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-27T20:46:10.283331+00:00" title="2015-04-27 20:46:10 UTC">on 2015-04-27</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/3"> #3</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>You could probably get a similar effect by having tempurl set a swift.authorize callback that limits you to the appropriate scope (account or container), depending on where the key came from.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">You could probably get a similar effect by having tempurl set a swift.authorize callback that limits you to the appropriate scope (account or container), depending on where the key came from.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/4" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-27T20:56:13.747849+00:00" title="2015-04-27 20:56:13 UTC">on 2015-04-27</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/4"> #4</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>what are the privileges required to set a container tempurl key?  If you have to be a swift_owner to set or read a container tempurl key then you already have privileges that you could theoretically elevate to - and this maybe more of a documentation issue.  IIRC, account level tempurl keys allow you to grant temporary access to a manifest object regardless of the location of it&#x27;s segment - so I think there&#x27;s a strong analogy - and even if you hand out a PUT tempurl, and let someone create a cross-container manifest they&#x27;d still need to generate a GET tempurl to read cross container.</p>
<p>If we expect that container tempurl *keys* to be handed out to people that have a more restricted access than that - well that&#x27;s probably different - object versioning would be the next most likely attack vector.</p>
<p>OTOH, perhaps regardless of the privilege level of the *expected* recipient of the key if the user story is that the attack surface of a tempurl key is reduced by restricting it to the container vs the account we may have to pursue a solution to limit the &quot;pre-authorization&quot; of requests to paths under the pre-authorized container.  Perhaps leave a authorization callback in the environment and have it return 401 if the container in the path isn&#x27;t the container who matched originally matched the tempurl key?</p>
<p>It seems like we need to understand the user expectation first.  It may be surprising if you can *make* a tempurl for a segmented object - but can&#x27;t acctually *use* it because the segments were in a different container?  If we give out a tempurl for a PUT to overwrite an object in a versioned container - do we expect using the tempurl to PUT new data to be able to backup the existing object before the overwrite?</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">what are the privileges required to set a container tempurl key?  If you have to be a swift_owner to set or read a container tempurl key then you already have privileges that you could theoretically elevate to - and this maybe more of a documentation issue.  IIRC, account level tempurl keys allow you to grant temporary access to a manifest object regardless of the location of it's segment - so I think there's a strong analogy - and even if you hand out a PUT tempurl, and let someone create a cross-container manifest they'd still need to generate a GET tempurl to read cross container. 

If we expect that container tempurl *keys* to be handed out to people that have a more restricted access than that - well that's probably different - object versioning would be the next most likely attack vector.

OTOH, perhaps regardless of the privilege level of the *expected* recipient of the key if the user story is that the attack surface of a tempurl key is reduced by restricting it to the container vs the account we may have to pursue a solution to limit the "pre-authorization" of requests to paths under the pre-authorized container.  Perhaps leave a authorization callback in the environment and have it return 401 if the container in the path isn't the container who matched originally matched the tempurl key?

It seems like we need to understand the user expectation first.  It may be surprising if you can *make* a tempurl for a segmented object - but can't acctually *use* it because the segments were in a different container?  If we give out a tempurl for a PUT to overwrite an object in a versioned container - do we expect using the tempurl to PUT new data to be able to backup the existing object before the overwrite?</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/5" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~richard-hawkins" class="sprite person">Richard Hawkins (richard-hawkins)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-27T22:27:40.782183+00:00" title="2015-04-27 22:27:40 UTC">on 2015-04-27</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/5"> #5</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p><span class="foldable-quoted">&gt; what are the privileges required to set a container tempurl key?
</span></p>
<p>As far as I know, you have to be swift_owner or a sub user with admin privileges to set/read the container level keys.</p>
<p><span class="foldable-quoted">&gt; If we expect that container tempurl *keys* to be handed out to people that have a more restricted access than that - well that&#x27;s probably different - object versioning would be the next most likely attack vector.
</span></p>
<p>I personally think container level temp URLs are similar to a ACL on a container.  If I were a user, I would assume that if I created a key for a container level temp URL, and gave it out to a user, that they would only have access to read/write to that container.  Just as if I had added them to an ACL for a container.</p>
<p><span class="foldable-quoted">&gt; do we expect using the tempurl to PUT new data to be able to backup the existing object before the overwrite?
</span></p>
<p>Good question.  =)<br />
I need to check if a container level temp URL will allow you to set headers on a container.  I don&#x27;t think it does.  If that is the case, it might be ok to allow writes to the object versioned container as it would take an account owner or admin to set that header, and a user with that key would not be able to change it.  So it might make sense for a account owner to set the object version header for a container they are going to issue a container level key for.</p>
<p>I think I would prefer removing it from the release if possible as I would not want to rush to a solution that we might regret later.  But if that is not an option, then I think having container level temp URLs that make requests to other containers 4xx, that would be ok too.  At least 4xx would address security concerns, and how to improve it for cross container large objects/object versioning could be addressed at a later time, possibly extending temp URL to allow it.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">&gt; what are the privileges required to set a container tempurl key?

As far as I know, you have to be swift_owner or a sub user with admin privileges to set/read the container level keys.


&gt; If we expect that container tempurl *keys* to be handed out to people that have a more restricted access than that - well that's probably different - object versioning would be the next most likely attack vector.

I personally think container level temp URLs are similar to a ACL on a container.  If I were a user, I would assume that if I created a key for a container level temp URL, and gave it out to a user, that they would only have access to read/write to that container.  Just as if I had added them to an ACL for a container.
 

&gt; do we expect using the tempurl to PUT new data to be able to backup the existing object before the overwrite?

Good question.  =)
I need to check if a container level temp URL will allow you to set headers on a container.  I don't think it does.  If that is the case, it might be ok to allow writes to the object versioned container as it would take an account owner or admin to set that header, and a user with that key would not be able to change it.  So it might make sense for a account owner to set the object version header for a container they are going to issue a container level key for.


I think I would prefer removing it from the release if possible as I would not want to rush to a solution that we might regret later.  But if that is not an option, then I think having container level temp URLs that make requests to other containers 4xx, that would be ok too.  At least 4xx would address security concerns, and how to improve it for cross container large objects/object versioning could be addressed at a later time, possibly extending temp URL to allow it.
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/6" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~notmyname" class="sprite person">John Dickinson (notmyname)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-28T04:50:16.244213+00:00" title="2015-04-28 04:50:16 UTC">on 2015-04-28</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/6"> #6</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>container tempurls don&#x27;t let you set the headers on a container.</p>
<p>DLOs stored in a world-readable container don&#x27;t work unless the target container also is readable (ie with .listings). Therefore you cannot use a public container to probe other containers.</p>
<p>Carrying that principle through, does that mean this issue needs to be resolved such that if a tempurl for reading a manifest references a different...what? container? A tempurl is for a specific object, so it&#x27;s not like we can know if the intent is to prevent reading even objects in the same container. The reported issue isn&#x27;t any different than current behavior with account-level tempurls: a GET tempurl is able to read the full contents of the referenced objects, in the case of *LOs.</p>
<p>It seems reasonable to me that a tempurl to an object, even a *LO, is able to return the full data for that object. The difference from the above example with public objects is that tempurls are temporary, limited tokens. Maybe that&#x27;s not a reasonable assumption and we need to strictly limit all tempurl requests to *only* the specific object referenced. That would effectively kill tempurl+*LO support, though.</p>
<p>The danger seems to be with the ability for a tempurl that allows PUT to probe the rest of the account for data. (PUTs allow HEADs, even if GETs aren&#x27;t allowed). So maybe on solution is to simply prevent creating manifests via a tempurl, or at least via container tempurls.</p>
<p>Options:</p>
<p>1. Drop container tempurl feature in Kilo<br />
2. Update docs to caution about tempurls that could be used to probe an account<br />
3. Prevent container tempurls from creating *LO objects (ie prevent them from leaving their container)<br />
4. Prevent container tempurls from following *LO objects on read</p>
<p>What do you think? Is it possible to find a solution and implement it in the next 18-24 hours for Kilo? Since it affects account tempurls too[1], maybe this is something that gets patched immediately after kilo (ie not a new issue, even though container-level tempurls are new).</p>
<p>[1] depending on your assumptions about the scope of account-level vs container-level tempurls</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">container tempurls don't let you set the headers on a container.

DLOs stored in a world-readable container don't work unless the target container also is readable (ie with .listings). Therefore you cannot use a public container to probe other containers.

Carrying that principle through, does that mean this issue needs to be resolved such that if a tempurl for reading a manifest references a different...what? container? A tempurl is for a specific object, so it's not like we can know if the intent is to prevent reading even objects in the same container. The reported issue isn't any different than current behavior with account-level tempurls: a GET tempurl is able to read the full contents of the referenced objects, in the case of *LOs.

It seems reasonable to me that a tempurl to an object, even a *LO, is able to return the full data for that object. The difference from the above example with public objects is that tempurls are temporary, limited tokens. Maybe that's not a reasonable assumption and we need to strictly limit all tempurl requests to *only* the specific object referenced. That would effectively kill tempurl+*LO support, though.

The danger seems to be with the ability for a tempurl that allows PUT to probe the rest of the account for data. (PUTs allow HEADs, even if GETs aren't allowed). So maybe on solution is to simply prevent creating manifests via a tempurl, or at least via container tempurls.

Options:

1. Drop container tempurl feature in Kilo
2. Update docs to caution about tempurls that could be used to probe an account
3. Prevent container tempurls from creating *LO objects (ie prevent them from leaving their container)
4. Prevent container tempurls from following *LO objects on read



What do you think? Is it possible to find a solution and implement it in the next 18-24 hours for Kilo? Since it affects account tempurls too[1], maybe this is something that gets patched immediately after kilo (ie not a new issue, even though container-level tempurls are new).

[1] depending on your assumptions about the scope of account-level vs container-level tempurls</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/7" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~cschwede" class="sprite person">Christian Schwede (cschwede)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-28T05:20:00.205976+00:00" title="2015-04-28 05:20:00 UTC">on 2015-04-28</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/7"> #7</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>The following works for me:</p>
<p>- an account owner &quot;test:tester&quot; creates a container &quot;secret&quot; with some data in it<br />
- the account owner creates another container &quot;other&quot; and sets a container temp url key on it and a r/w ACL for user test:tester3</p>
<p>Now user test:tester3 can create a DLO in container &quot;other&quot; and uses a tempurl to access the data in container &quot;secret&quot;. Of course the object names need to be known in advance to access them.</p>
<p>I think this is not wanted. To me the best option seems to be to check if the used *container* temp url key is in the same container like the *SLO. This wouldn&#x27;t change existing behavior for account container keys.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">The following works for me:

- an account owner "test:tester" creates a container "secret" with some data in it
- the account owner creates another container "other" and sets a container temp url key on it and a r/w ACL for user test:tester3

Now user test:tester3 can create a DLO in container "other" and uses a tempurl to access the data in container "secret". Of course the object names need to be known in advance to access them.

I think this is not wanted. To me the best option seems to be to check if the used *container* temp url key is in the same container like the *SLO. This wouldn't change existing behavior for account container keys.

</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/8" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~cschwede" class="sprite person">Christian Schwede (cschwede)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-28T08:34:48.713132+00:00" title="2015-04-28 08:34:48 UTC">on 2015-04-28</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/8"> #8</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4386391/+files/tempurl_fix.patch">tempurl_fix.patch</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4386391">Edit</a>
        (5.6 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>I attached a possible patch for DLO requests including updated unittests.</p>
<p>Let me know if this approach looks feasible, I would continue with SLO then.</p>
<p>We should also check if versioned objects as well as COPY requests are affected too.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">I attached a possible patch for DLO requests including updated unittests.

Let me know if this approach looks feasible, I would continue with SLO then.

We should also check if versioned objects as well as COPY requests are affected too.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/9" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~cschwede" class="sprite person">Christian Schwede (cschwede)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-28T09:19:19.174190+00:00" title="2015-04-28 09:19:19 UTC">on 2015-04-28</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/9"> #9</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4386423/+files/tempurl_fix.patch">tempurl_fix.patch</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4386423">Edit</a>
        (8.3 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Updated patch, with some refactoring applied.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Updated patch, with some refactoring applied.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/10" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-28T15:46:41.303913+00:00" title="2015-04-28 15:46:41 UTC">on 2015-04-28</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/10"> #10</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Note: you can&#x27;t (currently) do this with SLOs since tempurl helpfully (yuck) strips off any query params other than temp_url_sig and temp_url_expires.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Note: you can't (currently) do this with SLOs since tempurl helpfully (yuck) strips off any query params other than temp_url_sig and temp_url_expires.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/11" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~david-goetz" class="sprite person">David Goetz (david-goetz)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-28T16:00:02.263294+00:00" title="2015-04-28 16:00:02 UTC">on 2015-04-28</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/11"> #11</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>I think the idea of restricting temp url requests from only hitting that single container is workable but is not a great solution. I think forcing every middleware that does sub requests to do:</p>
<p>if allowed_container and container != allowed_container:<br />
+            return HTTPUnauthorize<wbr />d(request=<wbr />req)</p>
<p>is asking for problems imo. We have to add this to DLOs, SLOs, versioning, etc. My problem with the container lvl tempurls is that it provides anonymous access to objects. This doesn&#x27;t jive all that well with container ACLs that are completely based on who is making the call. I&#x27;d want a pretty good reason to change this model and I don&#x27;t know if container level tempurls (while a neat idea) is worth it. I&#x27;d much rather pull it from the release and figure out a better way than forcing something in quickly and regretting it later.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">I think the idea of restricting temp url requests from only hitting that single container is workable but is not a great solution. I think forcing every middleware that does sub requests to do:

if allowed_container and container != allowed_container:
+            return HTTPUnauthorized(request=req)

is asking for problems imo. We have to add this to DLOs, SLOs, versioning, etc. My problem with the container lvl tempurls is that it provides anonymous access to objects. This doesn't jive all that well with container ACLs that are completely based on who is making the call. I'd want a pretty good reason to change this model and I don't know if container level tempurls (while a neat idea) is worth it. I'd much rather pull it from the release and figure out a better way than forcing something in quickly and regretting it later.  </textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/12" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~alistair-coles" class="sprite person">Alistair Coles (alistair-coles)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-28T17:31:33.840138+00:00" title="2015-04-28 17:31:33 UTC">on 2015-04-28</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/12"> #12</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>I&#x27;m so far failing to see how the vulnerability is limited to container level tempurl. Seems like if I have a tempurl to PUT to /a/c/o then I can PUT a manifest that points to a target  /a/c_other/o_other and then HEAD the target.  From staring at code it seems to me that works regardless of who generated the tempurl and using which keys.</p>
<p>*If* that is case I then reverting the container level tempurl feature would only serve to reveal the vulnerability with account level tempurl, and not really fix anything. So I&#x27;d advocate no revert and working on a fix to the problem across account and container level.</p>
<p>If I&#x27;m wrong and this vulnerability only exists with container level urls then I&#x27;m inclined to agree that rushing into a quick fix for kilo might be a mistake vs reverting the change.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">I'm so far failing to see how the vulnerability is limited to container level tempurl. Seems like if I have a tempurl to PUT to /a/c/o then I can PUT a manifest that points to a target  /a/c_other/o_other and then HEAD the target.  From staring at code it seems to me that works regardless of who generated the tempurl and using which keys.

*If* that is case I then reverting the container level tempurl feature would only serve to reveal the vulnerability with account level tempurl, and not really fix anything. So I'd advocate no revert and working on a fix to the problem across account and container level.

If I'm wrong and this vulnerability only exists with container level urls then I'm inclined to agree that rushing into a quick fix for kilo might be a mistake vs reverting the change.
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/13" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~richard-hawkins" class="sprite person">Richard Hawkins (richard-hawkins)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-28T17:55:12.290979+00:00" title="2015-04-28 17:55:12 UTC">on 2015-04-28</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/13"> #13</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>I think it is limited to container level as, if you have an account temp URL key, and you have a DLO/SLO, you could just generate a temp URL for each segment of the DLO/SLO and get the data that way.</p>
<p>With a container level temp URL, your container key would be no good to generate a temp URL for an object in a different container, unless that key was also set on that other container.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">I think it is limited to container level as, if you have an account temp URL key, and you have a DLO/SLO, you could just generate a temp URL for each segment of the DLO/SLO and get the data that way.

With a container level temp URL, your container key would be no good to generate a temp URL for an object in a different container, unless that key was also set on that other container.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/14" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-28T17:56:32.646630+00:00" title="2015-04-28 17:56:32 UTC">on 2015-04-28</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/14"> #14</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>I think reverting the feature until we figure this out is a good way to go. If we have to cut a release tomorrow, I&#x27;d rather not wedge something in there, and I don&#x27;t think we&#x27;ll figure this out in time.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">I think reverting the feature until we figure this out is a good way to go. If we have to cut a release tomorrow, I'd rather not wedge something in there, and I don't think we'll figure this out in time.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/15" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-28T19:33:06.439140+00:00" title="2015-04-28 19:33:06 UTC">on 2015-04-28</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/15"> #15</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>What about if we just make PUT tempurls not work for creating a *LO manifest?  Might break some people - but I don&#x27;t really know for what use-case?  We could even make it a &quot;enable thing that&#x27;s probably a bad idea&quot; option with default of False?</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">What about if we just make PUT tempurls not work for creating a *LO manifest?  Might break some people - but I don't really know for what use-case?  We could even make it a "enable thing that's probably a bad idea" option with default of False?</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/16" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~paul-e-luse" class="sprite person">paul luse (paul-e-luse)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-28T20:07:59.501939+00:00" title="2015-04-28 20:07:59 UTC">on 2015-04-28</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/16"> #16</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Reading through all of this, and not having gone through all of the relevant code yet, my 2 cents is worth, well whatever, but it seems like we ought to revert and, as Sam states, work on a more well thought out solution for a near term follow on release.  Releasing Kilo with a quick-attempt-fix for a security issue doesn&#x27;t feel right.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Reading through all of this, and not having gone through all of the relevant code yet, my 2 cents is worth, well whatever, but it seems like we ought to revert and, as Sam states, work on a more well thought out solution for a near term follow on release.  Releasing Kilo with a quick-attempt-fix for a security issue doesn't feel right. </textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/17" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~fungi" class="sprite person">Jeremy Stanley (fungi)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-28T20:43:14.298420+00:00" title="2015-04-28 20:43:14 UTC">on 2015-04-28</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/17"> #17</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>For what it&#x27;s worth, if this is new in Kilo and the decision is to leave it in the release, then we may need to continue working out the fix in private and issue a security advisory once it&#x27;s done. On the other hand if it&#x27;s reverted now and punted to Liberty development then there&#x27;s no need for further embargo or any advisory.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">For what it's worth, if this is new in Kilo and the decision is to leave it in the release, then we may need to continue working out the fix in private and issue a security advisory once it's done. On the other hand if it's reverted now and punted to Liberty development then there's no need for further embargo or any advisory.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/18" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~notmyname" class="sprite person">John Dickinson (notmyname)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-28T21:54:08.866860+00:00" title="2015-04-28 21:54:08 UTC">on 2015-04-28</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/18"> #18</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>After further discussion (in IRC), this will be treated as any security issue and there will not be a revert or patch for kilo (swift 2.3.0) before the release.</p>
<p>This issue has a few interesting points:</p>
<p>1) tempurls which allow PUT also allow HEAD.</p>
<p>2) tempurls follow manifests to return the entire object, regardless of where the segments are or permissions on their container</p>
<p>3) because of 1 and 2, a user with a tempurl can create a DLO and then probe the rest of the account for other objects. This is true no matter the key used to generate the tempurl</p>
<p>4) container keys are meant to be shared with subusers so that the subuser can pass out container-scoped tempurls. The subuser would have an indentity (ie token) to access the container.</p>
<p>5) Because of 1, 2, and 4 subusers can probe for objects in the account. ie the tempurl crosses the container boundary.</p>
<p>The solution has a few points:</p>
<p>1) Prevent tempurl PUTs from writing DLOs (by returning an error if x-object-manifest header is on the request).</p>
<p>2) The tempurl should tract the scope of the signed url (ie account and container) so that it cannot cross boundaries. In other words, the subrequests generated eg to fetch DLO segments should be authorized according to the original tempurl (not with a blanket &quot;allow&quot; authorize() callback).</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">After further discussion (in IRC), this will be treated as any security issue and there will not be a revert or patch for kilo (swift 2.3.0) before the release.



This issue has a few interesting points:

1) tempurls which allow PUT also allow HEAD.

2) tempurls follow manifests to return the entire object, regardless of where the segments are or permissions on their container

3) because of 1 and 2, a user with a tempurl can create a DLO and then probe the rest of the account for other objects. This is true no matter the key used to generate the tempurl

4) container keys are meant to be shared with subusers so that the subuser can pass out container-scoped tempurls. The subuser would have an indentity (ie token) to access the container.

5) Because of 1, 2, and 4 subusers can probe for objects in the account. ie the tempurl crosses the container boundary.



The solution has a few points:

1) Prevent tempurl PUTs from writing DLOs (by returning an error if x-object-manifest header is on the request).

2) The tempurl should tract the scope of the signed url (ie account and container) so that it cannot cross boundaries. In other words, the subrequests generated eg to fetch DLO segments should be authorized according to the original tempurl (not with a blanket "allow" authorize() callback).



</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/19" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~matt-0" class="sprite person">Matthew Oliver (matt-0)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-29T01:00:42.882189+00:00" title="2015-04-29 01:00:42 UTC">on 2015-04-29</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/19"> #19</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>If your going to give out a PUT tempurl then your trusting someone to put stuff. But I guess there are different levels of _trust_.</p>
<p>I see that DLO&#x27;s are an issue in this case, (someone could attempt to probe the account) and so if we go with blocking a PUT request from the tempurl middleware when X-Object-Manifiest headers exists will stop that. Noting we want a tempurl GET to support DLO as that is a valid use case.</p>
<p>If we are going to filter on X-Object-Manifest in tempurl PUT, do we need to think about x-versions-location as well (which I guess isn&#x27;t a problem until someone has PUT and DELETE tempurls)... However, will this start making TempURL middleware more coupled with others? I guess if we can find a good way to limit the scope tempurl&#x27;s have access to will solve this.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">If your going to give out a PUT tempurl then your trusting someone to put stuff. But I guess there are different levels of _trust_.

I see that DLO's are an issue in this case, (someone could attempt to probe the account) and so if we go with blocking a PUT request from the tempurl middleware when X-Object-Manifiest headers exists will stop that. Noting we want a tempurl GET to support DLO as that is a valid use case.

If we are going to filter on X-Object-Manifest in tempurl PUT, do we need to think about x-versions-location as well (which I guess isn't a problem until someone has PUT and DELETE tempurls)... However, will this start making TempURL middleware more coupled with others? I guess if we can find a good way to limit the scope tempurl's have access to will solve this.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/20" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~richard-hawkins" class="sprite person">Richard Hawkins (richard-hawkins)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-29T02:13:15.896648+00:00" title="2015-04-29 02:13:15 UTC">on 2015-04-29</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/20"> #20</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>There are different levels of trust, but I think what is at issue here is the account owner&#x27;s expectation of what a user can do with a temp url he gives out.  To me, the issue revolves around users being able to use these things to get information that is not obvious to the account owner.  If it is obvious, then the feature might become useless as it is trivial to gain access to objects that you should not have access to or to probe for the existence of objects.</p>
<p>I don&#x27;t see an issue with x-versions-<wbr />location, as you can not set headers on a container with a temp url as far as I know.  So it does not seem like it could be abused to either leak data or probe for object existence.  Even if you have a PUT and DELETE temp url, and the container has the x-versions-location set, all you would be able to do is push and pop versions of the object you have access to into and out of the x-versions-location container.  And that seems like it might be expected behavior by the account owner.  (although there might be other ways to abuse it which I can&#x27;t think of right now)</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">There are different levels of trust, but I think what is at issue here is the account owner's expectation of what a user can do with a temp url he gives out.  To me, the issue revolves around users being able to use these things to get information that is not obvious to the account owner.  If it is obvious, then the feature might become useless as it is trivial to gain access to objects that you should not have access to or to probe for the existence of objects.

I don't see an issue with x-versions-location, as you can not set headers on a container with a temp url as far as I know.  So it does not seem like it could be abused to either leak data or probe for object existence.  Even if you have a PUT and DELETE temp url, and the container has the x-versions-location set, all you would be able to do is push and pop versions of the object you have access to into and out of the x-versions-location container.  And that seems like it might be expected behavior by the account owner.  (although there might be other ways to abuse it which I can't think of right now)


</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/21" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~matt-0" class="sprite person">Matthew Oliver (matt-0)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-04-29T03:52:45.028629+00:00" title="2015-04-29 03:52:45 UTC">on 2015-04-29</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/21"> #21</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>ahh, good call Richard. (X-Versions-<wbr />Location)<wbr />.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">ahh, good call Richard. (X-Versions-Location).</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/22" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-01T00:33:30.590089+00:00" title="2015-05-01 00:33:30 UTC">on 2015-05-01</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/22"> #22</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4388691/+files/container-tempurl-scoping.diff">container-tempurl-scoping.diff</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4388691">Edit</a>
        (82.1 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Here&#x27;s a potential patch. It looks large, but it&#x27;s mostly unit-test fallout.</p>
<p>It&#x27;s the output of `git show` on a local branch of mine, so it&#x27;s got a commit comment that goes into a fair amount of detail.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Here's a potential patch. It looks large, but it's mostly unit-test fallout.

It's the output of `git show` on a local branch of mine, so it's got a commit comment that goes into a fair amount of detail.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/23" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-01T20:57:06.179393+00:00" title="2015-05-01 20:57:06 UTC">on 2015-05-01</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/23"> #23</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>so I think the mostly unit-test fallout is going to be an issue for back-porting.  The commit message is great, but it doesn&#x27;t really go into detail about why moving the env cache to the subdir was required.</p>
<p>I think I understand now that in creating a copy of the subrequest before sending it down into the app the cached values weren&#x27;t getting set on the req that originally came *into* the app - which caused some things to go south because of how crazy all that env caching get_info stuff is.  Probably should be fixed - but not 100% sure it needs to be part of this fix and backport?  Honestly the whole copy trick seems like a lot of effort to go through to avoid the swift.authorize pop?  Why can&#x27;t we just do like what we do with cross-account-copy requests and just leave the authorize callback in place?</p>
<p><a rel="nofollow" href="https://gist.github.com/clayg/11e4e9c0c3f652d82e0f">https:/<wbr />/gist.github.<wbr />com/clayg/<wbr />11e4e9c0c3f652d<wbr />82e0f</a></p>
<p>^ this mostly just steals sam&#x27;s hardwork and tries to avoid the info cache change that caused all the test fallout.</p>
<p>Also I&#x27;m not 100% sure on the precedence of container and account tempurl keys?  Maybe it was pre-existing but I don&#x27;t think it had the same effect.  Now if a tempurl matches the container key it&#x27;ll get scoped - but if that key happens to collide with the account my cross container segment object downloads don&#x27;t authorize - and there&#x27;s nothing really to tell me whats going on?  Would it be better to scope to the larger matching scope?</p>
<p>Also, I think we need functests to cover this issue.</p>
<p>Also, isn&#x27;t there a separate issue with handing out a PUT tempurl that we need to address with stripping manifest headers - or did I miss where we decided that&#x27;s a non-issue?</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">so I think the mostly unit-test fallout is going to be an issue for back-porting.  The commit message is great, but it doesn't really go into detail about why moving the env cache to the subdir was required.

I think I understand now that in creating a copy of the subrequest before sending it down into the app the cached values weren't getting set on the req that originally came *into* the app - which caused some things to go south because of how crazy all that env caching get_info stuff is.  Probably should be fixed - but not 100% sure it needs to be part of this fix and backport?  Honestly the whole copy trick seems like a lot of effort to go through to avoid the swift.authorize pop?  Why can't we just do like what we do with cross-account-copy requests and just leave the authorize callback in place?

https://gist.github.com/clayg/11e4e9c0c3f652d82e0f

^ this mostly just steals sam's hardwork and tries to avoid the info cache change that caused all the test fallout.

Also I'm not 100% sure on the precedence of container and account tempurl keys?  Maybe it was pre-existing but I don't think it had the same effect.  Now if a tempurl matches the container key it'll get scoped - but if that key happens to collide with the account my cross container segment object downloads don't authorize - and there's nothing really to tell me whats going on?  Would it be better to scope to the larger matching scope?

Also, I think we need functests to cover this issue.

Also, isn't there a separate issue with handing out a PUT tempurl that we need to address with stripping manifest headers - or did I miss where we decided that's a non-issue?
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/24" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-04T18:43:17.411015+00:00" title="2015-05-04 18:43:17 UTC">on 2015-05-04</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/24"> #24</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Going in no particular order:</p>
<p>If an account and container share a key, then the bigger scope should apply. That&#x27;ll cause the minimum confusion. I&#x27;ll fix it.</p>
<p>I will also put more words about the swift.infocache thing in the commit message.</p>
<p>I will attempt to write a functional test as well.</p>
<p>We don&#x27;t need to strip anything on tempurl PUT. Now that the authorize callback isn&#x27;t getting stepped on, you can&#x27;t use a container tempurl to GET a manifest with segments in another container, so there&#x27;s no problem letting the user make one.</p>
<p>I&#x27;d like to, someday, make all that get_info stuff a little more sane. The fact that it relies on this key existing in the response&#x27;s environment dictionary to get account or container info is pretty damn strange, and it causes all sorts of problems if you ever want to use a modified response without changing what the caller sent you. This fix makes it a little better in that you can shallow-copy the WSGI environment without breaking get_info()&#x27;s caching and basic functionality. The real fix is probably to make get_info() look at the response headers for account/container info instead of grubbing around in the response environment.</p>
<p>I&#x27;m not a fan of adding to the COPY-check for a couple reasons. First, swift.authorize<wbr />_override is really just an instruction to auth systems that says someone else is stepping in to handle auth so please don&#x27;t fail this request. Overloading that in the proxy seems like a hack that works for tempurl, but only coincidentally. Second, since Thiago is working on moving COPY to middleware, we&#x27;ll be able to get rid of that workaround for COPY too, and just always pop out swift.authorize if it has already authorized the request.</p>
<p>Besides, moving all that stuff to swift.infocache can help out the cacheability of stuff. Right now, if a middleware makes a subrequest and shallow-copies the environment to do so, any get_*_info done on that subrequest doesn&#x27;t get cached later since it only appears in the copied env. By moving all that stuff into swift.infocache, the get_*_info calls will get their results cached.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Going in no particular order:

If an account and container share a key, then the bigger scope should apply. That'll cause the minimum confusion. I'll fix it.

I will also put more words about the swift.infocache thing in the commit message.

I will attempt to write a functional test as well.

We don't need to strip anything on tempurl PUT. Now that the authorize callback isn't getting stepped on, you can't use a container tempurl to GET a manifest with segments in another container, so there's no problem letting the user make one.

I'd like to, someday, make all that get_info stuff a little more sane. The fact that it relies on this key existing in the response's environment dictionary to get account or container info is pretty damn strange, and it causes all sorts of problems if you ever want to use a modified response without changing what the caller sent you. This fix makes it a little better in that you can shallow-copy the WSGI environment without breaking get_info()'s caching and basic functionality. The real fix is probably to make get_info() look at the response headers for account/container info instead of grubbing around in the response environment.

I'm not a fan of adding to the COPY-check for a couple reasons. First, swift.authorize_override is really just an instruction to auth systems that says someone else is stepping in to handle auth so please don't fail this request. Overloading that in the proxy seems like a hack that works for tempurl, but only coincidentally. Second, since Thiago is working on moving COPY to middleware, we'll be able to get rid of that workaround for COPY too, and just always pop out swift.authorize if it has already authorized the request.

Besides, moving all that stuff to swift.infocache can help out the cacheability of stuff. Right now, if a middleware makes a subrequest and shallow-copies the environment to do so, any get_*_info done on that subrequest doesn't get cached later since it only appears in the copied env. By moving all that stuff into swift.infocache, the get_*_info calls will get their results cached.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/25" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-04T21:54:20.381010+00:00" title="2015-05-04 21:54:20 UTC">on 2015-05-04</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/25"> #25</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4390909/+files/tempurl-torgomatic-patch2.diff">tempurl-torgomatic-patch2.diff</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4390909">Edit</a>
        (86.4 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>This one includes a better explanation in the commit comment, a pair of functional tests for DLO + container tempurl, and a test that account-scope beats container-scope when they share a key (turns out that was already the case, but still good to test for).</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">This one includes a better explanation in the commit comment, a pair of functional tests for DLO + container tempurl, and a test that account-scope beats container-scope when they share a key (turns out that was already the case, but still good to test for).
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/26" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~fungi" class="sprite person">Jeremy Stanley (fungi)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-05T00:06:25.908059+00:00" title="2015-05-05 00:06:25 UTC">on 2015-05-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/26"> #26</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Here&#x27;s a first take at an impact description for this. I&#x27;ve almost certainly got some of the details and terminology wrong, so please correct me. It looks from the latest updates like any potential to exploit account tempurls in a similar fashion has been discounted, and so this is a kilo (2.3.0) only vulnerability since container tempurls were implemented after Juno/2.2.0 (and also after the 2.2.2 interim release)...</p>
<p>Title: Information leak via Swift container tempurls<br />
Reporter: Richard Hawkins from Rackspace<br />
Products: Swift<br />
Affects: 2.3.0</p>
<p>Description:<br />
Richard Hawkins from Rackspace reported a vulnerability in Swift container-scoped tempurls. When in possession of a tempurl generated using a key on a Swift container, a malicious actor may retrieve objects within any other container for the same tenant environment.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Here's a first take at an impact description for this. I've almost certainly got some of the details and terminology wrong, so please correct me. It looks from the latest updates like any potential to exploit account tempurls in a similar fashion has been discounted, and so this is a kilo (2.3.0) only vulnerability since container tempurls were implemented after Juno/2.2.0 (and also after the 2.2.2 interim release)...

Title: Information leak via Swift container tempurls
Reporter: Richard Hawkins from Rackspace
Products: Swift
Affects: 2.3.0

Description:
Richard Hawkins from Rackspace reported a vulnerability in Swift container-scoped tempurls. When in possession of a tempurl generated using a key on a Swift container, a malicious actor may retrieve objects within any other container for the same tenant environment.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/27" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~richard-hawkins" class="sprite person">Richard Hawkins (richard-hawkins)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-05T02:25:49.093640+00:00" title="2015-05-05 02:25:49 UTC">on 2015-05-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/27"> #27</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Hi Jeremy,</p>
<p>I think in addition, the discussions that resulted in me reporting this bug exposed a second vulnerability with account level temp URLs that has been around for a while.</p>
<p>Where someone with a account level PUT temp URL could potentially probe for existing objects by created DLO that references other containers/objects and HEADING the DLO created.  If they had a pair of account level PUT/GET temp URLs, could additionally retrieve data from any object found.</p>
<p>I am not sure who first figured it out, but Sam Merritt was I think the first person to explain it such that I understood this aspect of it.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Hi Jeremy,

I think in addition, the discussions that resulted in me reporting this bug exposed a second vulnerability with account level temp URLs that has been around for a while.

Where someone with a account level PUT temp URL could potentially probe for existing objects by created DLO that references other containers/objects and HEADING the DLO created.  If they had a pair of account level PUT/GET temp URLs, could additionally retrieve data from any object found.

I am not sure who first figured it out, but Sam Merritt was I think the first person to explain it such that I understood this aspect of it.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          

          
              <div class="boardComment">
  <div class="boardCommentDetails">
    
      <a href="https://launchpad.net/~tristan-cacqueray" class="sprite person">Tristan Cacqueray (tristan-cacqueray)</a>
    
    <time title="2015-05-05 15:23:21 UTC" datetime="2015-05-05T15:23:21.321114+00:00">on 2015-05-05</time>
  </div>
  <div class="boardCommentActivity">
    <table class="bug-activity">
  
    
      <tr>
        <td colspan="2">Changed in ossa: </td>
      </tr>
    
    <tr>
      <td style="text-align: right;">
        <b>status</b>:
      </td>
      <td>
        Incomplete &#8594; Confirmed
      </td>
    </tr>
  
</table>
  </div>
</div>
          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/28" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~fungi" class="sprite person">Jeremy Stanley (fungi)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-05T15:23:41.162408+00:00" title="2015-05-05 15:23:41 UTC">on 2015-05-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/28"> #28</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Richard: Thanks. I guess I&#x27;m just confused where Samuel&#x27;s commit message says &quot;A similar bug would exist for manifests referencing other accounts except that neither the X-Object-Manifest (DLO) nor the JSON manifest document (SLO) have a way of specifying a different account.&quot; I took this to mean that only container tempurls are at issue and account tempurls are not, but it may be that my shallow understanding of the topic is biting me here.</p>
<p>If account tempurls are in fact also a problem, as previously discussed, then this sounds like it also affects versions through 1.13.1 (Icehouse), and 2.0.0 through 2.2.0 (Juno), as well as 2.2.1 through 2.3.0 (Kilo). If so, I think the impact description would look more like...</p>
<p>Title: Information leak via Swift tempurls<br />
Reporter: Richard Hawkins from Rackspace<br />
Products: Swift<br />
Affects: versions through 1.13.1, 2.0.0 through 2.2.0,  2.2.1 through 2.3.0</p>
<p>Description:<br />
Richard Hawkins from Rackspace reported a vulnerability in Swift tempurls. When in possession of a tempurl generated using a key on a Swift container or account, a malicious actor may retrieve objects within any other container for the same tenant environment.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Richard: Thanks. I guess I'm just confused where Samuel's commit message says "A similar bug would exist for manifests referencing other accounts except that neither the X-Object-Manifest (DLO) nor the JSON manifest document (SLO) have a way of specifying a different account." I took this to mean that only container tempurls are at issue and account tempurls are not, but it may be that my shallow understanding of the topic is biting me here.

If account tempurls are in fact also a problem, as previously discussed, then this sounds like it also affects versions through 1.13.1 (Icehouse), and 2.0.0 through 2.2.0 (Juno), as well as 2.2.1 through 2.3.0 (Kilo). If so, I think the impact description would look more like...

Title: Information leak via Swift tempurls
Reporter: Richard Hawkins from Rackspace
Products: Swift
Affects: versions through 1.13.1, 2.0.0 through 2.2.0,  2.2.1 through 2.3.0

Description:
Richard Hawkins from Rackspace reported a vulnerability in Swift tempurls. When in possession of a tempurl generated using a key on a Swift container or account, a malicious actor may retrieve objects within any other container for the same tenant environment.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/29" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-05T18:11:00.304072+00:00" title="2015-05-05 18:11:00 UTC">on 2015-05-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/29"> #29</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Jeremy: you are correct; container tempurls have a problem, but account-level do not.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Jeremy: you are correct; container tempurls have a problem, but account-level do not.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/30" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~fungi" class="sprite person">Jeremy Stanley (fungi)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-05T20:48:09.422643+00:00" title="2015-05-05 20:48:09 UTC">on 2015-05-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/30"> #30</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Thanks Samuel! In that case, soliciting further comments on my original impact description from comment #26... is what&#x27;s there correct? Any additional details we should include with the private CVE request?</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Thanks Samuel! In that case, soliciting further comments on my original impact description from comment #26... is what's there correct? Any additional details we should include with the private CVE request?</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/31" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-05T22:30:47.541107+00:00" title="2015-05-05 22:30:47 UTC">on 2015-05-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/31"> #31</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>You need more than one tempurl to actually retrieve objects. Maybe this?</p>
<p>Description:<br />
Richard Hawkins from Rackspace reported a vulnerability in Swift container-scoped tempurls. When in possession of a tempurl key for a Swift container, a malicious actor may retrieve objects within any other container for the same Swift account (tenant) environment.</p>
<p>------</p>
<p>There are two related ways to exploit this:</p>
<p>The first way: given a tempurl for an object generated using a key on that object&#x27;s container, one can PUT a manifest (i.e. object with X-Object-Manifest) to that  URL, then HEAD the new object and, by observing the Etag and Content-Length contained within the HEAD response, learn whether an object starting with the given prefix exists.</p>
<p>For example, given two containers &quot;red&quot; and &quot;blue&quot; and a PUT tempurl for /v1/a/red/manifest, one can PUT /v1/a/red/manifest with header &quot;X-Object-Manifest: /blue/abcd&quot;. A subsequent HEAD request for /v1/a/red/manifest will receive a response with an Etag and a Content-Length; the Etag is the MD5 hash of the Etags of all objects matching /v1/a/blue/abcd*, and the Content-Length is the sum of their lengths. If the Etag is &quot;d41d8cd98f00b2<wbr />04e9800998ecf84<wbr />27e&quot; (the MD5 of the empty string), then there are no objects whose names match /v1/a/blue/abcd*. One can then overwrite the manifest with another that has a different X-Object-Manifest value, and in this way, can learn the names, lengths, and Etags of every object in container &quot;blue&quot;.</p>
<p>The second way: given a tempurl *key* for a container, you can construct a PUT tempurl and a GET tempurl for the same object. Then, using the same procedure as above, discover the name of an object in the &quot;blue&quot; container. Then, PUT a manifest with &quot;X-Object-Manifest: /blue/other-<wbr />object-<wbr />name&quot;, and finally, use the GET tempurl to download /v1/a/blue/<wbr />other-object-<wbr />name.</p>
<p>Both these exploits rely on large-object GET requests being able to examine segments outside the manifest&#x27;s container even though the request was signed with a container-level tempurl key.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">You need more than one tempurl to actually retrieve objects. Maybe this?

Description:
Richard Hawkins from Rackspace reported a vulnerability in Swift container-scoped tempurls. When in possession of a tempurl key for a Swift container, a malicious actor may retrieve objects within any other container for the same Swift account (tenant) environment.

------

There are two related ways to exploit this:

The first way: given a tempurl for an object generated using a key on that object's container, one can PUT a manifest (i.e. object with X-Object-Manifest) to that  URL, then HEAD the new object and, by observing the Etag and Content-Length contained within the HEAD response, learn whether an object starting with the given prefix exists.

For example, given two containers "red" and "blue" and a PUT tempurl for /v1/a/red/manifest, one can PUT /v1/a/red/manifest with header "X-Object-Manifest: /blue/abcd". A subsequent HEAD request for /v1/a/red/manifest will receive a response with an Etag and a Content-Length; the Etag is the MD5 hash of the Etags of all objects matching /v1/a/blue/abcd*, and the Content-Length is the sum of their lengths. If the Etag is "d41d8cd98f00b204e9800998ecf8427e" (the MD5 of the empty string), then there are no objects whose names match /v1/a/blue/abcd*. One can then overwrite the manifest with another that has a different X-Object-Manifest value, and in this way, can learn the names, lengths, and Etags of every object in container "blue".

The second way: given a tempurl *key* for a container, you can construct a PUT tempurl and a GET tempurl for the same object. Then, using the same procedure as above, discover the name of an object in the "blue" container. Then, PUT a manifest with "X-Object-Manifest: /blue/other-object-name", and finally, use the GET tempurl to download /v1/a/blue/other-object-name.

Both these exploits rely on large-object GET requests being able to examine segments outside the manifest's container even though the request was signed with a container-level tempurl key.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/32" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-06T00:57:17.208845+00:00" title="2015-05-06 00:57:17 UTC">on 2015-05-06</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/32"> #32</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Jeremy, Richard, Sam</p>
<p>Would anyone be against opening a separate security issue for the older &quot;account level PUT temp-url allows probing for object existence via DLO&#x27;s&quot; issue?</p>
<p>I have a functest that will demonstrate the issue - we could try the remove headers trick and decide if that&#x27;s how we want to address it - I don&#x27;t think it will effect this patch except that it will only work with account-level temp-url keys once we approve this change.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Jeremy, Richard, Sam

Would anyone be against opening a separate security issue for the older "account level PUT temp-url allows probing for object existence via DLO's" issue?

I have a functest that will demonstrate the issue - we could try the remove headers trick and decide if that's how we want to address it - I don't think it will effect this patch except that it will only work with account-level temp-url keys once we approve this change.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/33" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~richard-hawkins" class="sprite person">Richard Hawkins (richard-hawkins)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-06T13:54:56.806050+00:00" title="2015-05-06 13:54:56 UTC">on 2015-05-06</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/33"> #33</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Clay: I would not be against it.  Being able to probe and possibly retrieve data, even if it is only with an account level temp URL, kinda scares me.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Clay: I would not be against it.  Being able to probe and possibly retrieve data, even if it is only with an account level temp URL, kinda scares me.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/34" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~fungi" class="sprite person">Jeremy Stanley (fungi)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-06T14:33:47.395580+00:00" title="2015-05-06 14:33:47 UTC">on 2015-05-06</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/34"> #34</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Samuel: Thanks for the additional details. As far as the CVE request goes, we simply need enough detail to reasonably differentiate this vulnerability from similar potential vulnerabilities which might be discovered in Swift over a relatively short period of time (say a year, as CVEs are year-scoped based on their discovery dates). For a deeper dive into more specific facets of the vulnerability the eventual security advisory will link to the bug and the patch(es) fixing it, so we don&#x27;t need to get particularly verbose in the impact description as long as the risks and any _commonly_<wbr />occurring_ mitigating factors are mentioned.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Samuel: Thanks for the additional details. As far as the CVE request goes, we simply need enough detail to reasonably differentiate this vulnerability from similar potential vulnerabilities which might be discovered in Swift over a relatively short period of time (say a year, as CVEs are year-scoped based on their discovery dates). For a deeper dive into more specific facets of the vulnerability the eventual security advisory will link to the bug and the patch(es) fixing it, so we don't need to get particularly verbose in the impact description as long as the risks and any _commonly_occurring_ mitigating factors are mentioned.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/35" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~fungi" class="sprite person">Jeremy Stanley (fungi)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-06T14:37:15.703019+00:00" title="2015-05-06 14:37:15 UTC">on 2015-05-06</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/35"> #35</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Clay: If we open an additional bug for a related issue, unless it&#x27;s disclosed before or at the same time as this one, the publication of this bug will lay that one bare. We would either want a simultaneous publication/<wbr />advisory/<wbr />fix for both bugs, or we&#x27;d need to create two new bugs to separate the issues into and keep this original bug private until both new bugs have been disclosed.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Clay: If we open an additional bug for a related issue, unless it's disclosed before or at the same time as this one, the publication of this bug will lay that one bare. We would either want a simultaneous publication/advisory/fix for both bugs, or we'd need to create two new bugs to separate the issues into and keep this original bug private until both new bugs have been disclosed.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/36" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-06T23:02:02.083783+00:00" title="2015-05-06 23:02:02 UTC">on 2015-05-06</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/36"> #36</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  <a href="https://bugs.launchpad.net/swift/+bug/1449212/comments/36/+download">Download full text</a> (3.4 KiB)
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Jeremy: OK, well I like the idea mainly because the dlo-manifest-<wbr />with-put-<wbr />temp-url-<wbr />to-probe-<wbr />other-container<wbr />s issue will require back-ports to older releases while the container-<wbr />temp-url-<wbr />key scoping just needs to go back to kilo.</p>
<p>If we can co-ordinate the disclosure date for both it seems manageable.  You said you&#x27;re not against it right?</p>
<p>Unless someone beats me to it - or argues against it - I&#x27;ll make a separate private security bug for the use dlo-manifest-<wbr />with-put-<wbr />temp-url-<wbr />to-probe-<wbr />other-container<wbr />s issue and add my functional test that will describe the issue.</p>
<p>But I sorta wondering, if you can&#x27;t PUT SLO manifests with tempurls (because of the questionable query-arg stripping) and we decide to strip DLO headers on PUT tempurls to address the account-tempurl issue - does the container scoping issue close itself - or are we still worried about a compromised app that has write access to a container and the ability to create pre-authed GET requests with a container-temp-url key creating a manifest they wouldn&#x27;t normally authorize to cross-container read?  Still seems like a reasonable vector to close with tempurl scoping...</p>
<p>Although we need to make sure we have good docs describing the limitations of container-tempurls and segmented objects - since I think we fully plan to support account-tempurls for manifests whose segments are in another container and we&#x27;re explicitly deciding that if you have a valid cross-container SLO in a container and you try to create a container-tempurl for it - it doesn&#x27;t work - on purpose.</p>
<p>FWIW, I think sam&#x27;s swift.info patch is fine, the functests look good, I think sending a copy of the request with the swift.authorized popped into the app preserves existing behavior and expectations pretty well.  I was worried about backports of the test fallout from that patch - but since we&#x27;d only backport it to Kilo I think it&#x27;s fine - +2.</p>
<p>However, I still feel like it&#x27;s conflating all of our grief with the get_info caching and this security issue - which I&#x27;m sure we want to be as surgical of a fix as possible.  I&#x27;m ok with going the route sam has suggested (+2), but still wondering if there might be something we like better for this fix... asides from the &quot;don&#x27;t pop authorize if it&#x27;s a override authorize&quot; trick I already suggested - another way to fake out the authorize pop would be to have the scoped authorized callbacks return an 403 unless the acls have been populated on the request so you make sure you&#x27;re responding None to the delay denial callback and the not the early check.  Or only pop authorized if swift.owner has been populated into the environment would work, since the whole pop trick is just an optimization anyway.  OTOH, both of those are hacks, not modifying the request that was handed into the app seems like a reasonable and desireable behavior.  Using a copy of the request to pull the authorize callback out of seems like a reasonable way to do that (don&#x27;t modify the original request) but also still support the weird double auth check delay denial thing where we call authorize twice, ignore the denied response, but on None try to avoid calling authorize again after acl&#x27;s have been fetched since the author...</p></div>
    
    <p>
      <a href="/swift/+bug/1449212/comments/36">Read more...</a>
    </p>
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Jeremy: OK, well I like the idea mainly because the dlo-manifest-with-put-temp-url-to-probe-other-containers issue will require back-ports to older releases while the container-temp-url-key scoping just needs to go back to kilo.

If we can co-ordinate the disclosure date for both it seems manageable.  You said you're not against it right?

Unless someone beats me to it - or argues against it - I'll make a separate private security bug for the use dlo-manifest-with-put-temp-url-to-probe-other-containers issue and add my functional test that will describe the issue.

But I sorta wondering, if you can't PUT SLO manifests with tempurls (because of the questionable query-arg stripping) and we decide to strip DLO headers on PUT tempurls to address the account-tempurl issue - does the container scoping issue close itself - or are we still worried about a compromised app that has write access to a container and the ability to create pre-authed GET requests with a container-temp-url key creating a manifest they wouldn't normally authorize to cross-container read?  Still seems like a reasonable vector to close with tempurl scoping...

Although we need to make sure we have good docs describing the limitations of container-tempurls and segmented objects - since I think we fully plan to support account-tempurls for manifests whose segments are in another container and we're explicitly deciding that if you have a valid cross-container SLO in a container and you try to create a container-tempurl for it - it doesn't work - on purpose.

FWIW, I think sam's swift.info patch is fine, the functests look good, I think sending a copy of the request with the swift.authorized popped into the app preserves existing behavior and expectations pretty well.  I was worried about backports of the test fallout from that patch - but since we'd only backport it to Kilo I think it's fine - +2.

However, I still feel like it's conflating all of our grief with the get_info caching and this security issue - which I'm sure we want to be as surgical of a fix as possible.  I'm ok with going the route sam has suggested (+2), but still wondering if there might be something we like better for this fix... asides from the "don't pop authorize if it's a override authorize" trick I already suggested - another way to fake out the authorize pop would be to have the scoped authorized callbacks return an 403 unless the acls have been populated on the request so you make sure you're responding None to the delay denial callback and the not the early check.  Or only pop authorized if swift.owner has been populated into the environment would work, since the whole pop trick is just an optimization anyway.  OTOH, both of those are hacks, not modifying the request that was handed into the app seems like a reasonable and desireable behavior.  Using a copy of the request to pull the authorize callback out of seems like a reasonable way to do that (don't modify the original request) but also still support the weird double auth check delay denial thing where we call authorize twice, ignore the denied response, but on None try to avoid calling authorize again after acl's have been fetched since the authorize callback was already able to authorize the request without them originally.  Has anyone else looked at sam's patch - did the commit message update help grok the swift.info cache trick which enables the use of the copied request instead of modifying the original?  Does that look good to folks?</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/37" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~richard-hawkins" class="sprite person">Richard Hawkins (richard-hawkins)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-10T19:21:53.307212+00:00" title="2015-05-10 19:21:53 UTC">on 2015-05-10</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/37"> #37</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Sam: Sorry it took so long.</p>
<p>The only thing I found was really minor, and probably not worth holding back the patch since it&#x27;s only a doc string and could be improved at a later time.  So I will give my +1 for the patch, but maybe consider the following:</p>
<p>In swift/common/<wbr />middleware/<wbr />tempurl.<wbr />py<br />
I think the example return value for _get_keys was a little confusing due to missing &#x27;)&#x27; for *-Key-2 examples.<br />
~ 471         :returns: [<br />
~ 472             (X-Account-<wbr />Meta-Temp-<wbr />URL-Key str value, ACCOUNT_SCOPE) if set,<br />
~ 473             (X-Account-<wbr />Meta-Temp-<wbr />URL-Key-<wbr />2 str value, ACCOUNT_SCOPE if set,<br />
+ 474             (X-Container-<wbr />Meta-Temp-<wbr />URL-Key str value, CONTAINER_SCOPE) if set,<br />
+ 475             (X-Container-<wbr />Meta-Temp-<wbr />URL-Key-<wbr />2 str value, CONTAINER_SCOPE if set,<br />
+ 476         ]</p>
<p>Something like the following might be a little clearer IMO:<br />
~ 471         :returns: List of tuples for each key set.  Where the tuple<br />
~ 472             consists of the str value of *-Meta-Temp-Url-Key and<br />
~ 473             the scope of the key.<br />
+ 474             Example: [<br />
+ 475                 (X-Account-<wbr />Meta-Temp-<wbr />URL-Key value, ACCOUNT_SCOPE),<br />
+ 476                 (X-Account-<wbr />Meta-Temp-<wbr />URL-Key-<wbr />2 value, ACCOUNT_SCOPE),<br />
+ 477                 (X-Container-<wbr />Meta-Temp-<wbr />URL-Key value, CONTAINER_SCOPE),<br />
+ 478                 (X-Container-<wbr />Meta-Temp-<wbr />URL-Key-<wbr />2 value, CONTAINER_SCOPE),<br />
+ 479             ]</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Sam: Sorry it took so long.

The only thing I found was really minor, and probably not worth holding back the patch since it's only a doc string and could be improved at a later time.  So I will give my +1 for the patch, but maybe consider the following:

In swift/common/middleware/tempurl.py
I think the example return value for _get_keys was a little confusing due to missing ')' for *-Key-2 examples.
~ 471         :returns: [
~ 472             (X-Account-Meta-Temp-URL-Key str value, ACCOUNT_SCOPE) if set,
~ 473             (X-Account-Meta-Temp-URL-Key-2 str value, ACCOUNT_SCOPE if set,
+ 474             (X-Container-Meta-Temp-URL-Key str value, CONTAINER_SCOPE) if set,
+ 475             (X-Container-Meta-Temp-URL-Key-2 str value, CONTAINER_SCOPE if set,
+ 476         ]

Something like the following might be a little clearer IMO:
~ 471         :returns: List of tuples for each key set.  Where the tuple
~ 472             consists of the str value of *-Meta-Temp-Url-Key and
~ 473             the scope of the key.
+ 474             Example: [
+ 475                 (X-Account-Meta-Temp-URL-Key value, ACCOUNT_SCOPE),
+ 476                 (X-Account-Meta-Temp-URL-Key-2 value, ACCOUNT_SCOPE),
+ 477                 (X-Container-Meta-Temp-URL-Key value, CONTAINER_SCOPE),
+ 478                 (X-Container-Meta-Temp-URL-Key-2 value, CONTAINER_SCOPE),
+ 479             ]
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          

          
              <div class="boardComment">
  <div class="boardCommentDetails">
    
      <a href="https://launchpad.net/~ttx" class="sprite person">Thierry Carrez (ttx)</a>
    
    <time title="2015-05-11 14:09:06 UTC" datetime="2015-05-11T14:09:06.209293+00:00">on 2015-05-11</time>
  </div>
  <div class="boardCommentActivity">
    <table class="bug-activity">
  
    
      <tr>
        <td colspan="2">Changed in ossa: </td>
      </tr>
    
    <tr>
      <td style="text-align: right;">
        <b>importance</b>:
      </td>
      <td>
        Undecided &#8594; Medium
      </td>
    </tr>
  
</table>
  </div>
</div>
          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/38" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~tristan-cacqueray" class="sprite person">Tristan Cacqueray (tristan-cacqueray)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-11T19:21:23.156555+00:00" title="2015-05-11 19:21:23 UTC">on 2015-05-11</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/38"> #38</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Hi, so trying to understand the issue here:</p>
<p>A/ Since Kilo, container temp url allows probing and reading other containers&#x27; objects within the same account,<br />
B/ Since at least Icehouse, account temp url allows probing and reading containers&#x27; objects within different accounts.</p>
<p>Correct me if I&#x27;m wrong, but the underlying issue seems identical (lack of check for temp url), and thus we better issue a single advisory (that could cover two bugs reports and different patch sets).</p>
<p>Some questions:<br />
Comment #31 suggests the exploit needs more than one temp url. Is this for the account temp url issue ?<br />
The current proposed fix in comment #25 only fix the container temp url and does not require a backport right ?</p>
<p>So what we are missing here to move forward is a fix for account temp url to be backported up to icehouse.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Hi, so trying to understand the issue here:

A/ Since Kilo, container temp url allows probing and reading other containers' objects within the same account,
B/ Since at least Icehouse, account temp url allows probing and reading containers' objects within different accounts.

Correct me if I'm wrong, but the underlying issue seems identical (lack of check for temp url), and thus we better issue a single advisory (that could cover two bugs reports and different patch sets).

Some questions:
Comment #31 suggests the exploit needs more than one temp url. Is this for the account temp url issue ?
The current proposed fix in comment #25 only fix the container temp url and does not require a backport right ?

So what we are missing here to move forward is a fix for account temp url to be backported up to icehouse.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/39" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~fungi" class="sprite person">Jeremy Stanley (fungi)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-11T19:39:43.190687+00:00" title="2015-05-11 19:39:43 UTC">on 2015-05-11</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/39"> #39</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Tristan: Thanks, I&#x27;m still similarly confused. Samuel&#x27;s commit message on the attachment in comment #25 and reply in comment #29 indicate that account tempurls are not vulnerable, but Clay&#x27;s and Richard&#x27;s subsequent replies seem to contradict that.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Tristan: Thanks, I'm still similarly confused. Samuel's commit message on the attachment in comment #25 and reply in comment #29 indicate that account tempurls are not vulnerable, but Clay's and Richard's subsequent replies seem to contradict that.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/40" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-05-11T20:39:02.263718+00:00" title="2015-05-11 20:39:02 UTC">on 2015-05-11</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/40"> #40</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Jeremy and Tristan,</p>
<p>As Richard has pointed out the we definitely need to backport a fix for PUT tempurls (which we don&#x27;t yet have, but probably looks a lot like &quot;break all clients who are trying to create DLO&#x27;s via PUT tempurl&quot;).</p>
<p>I opened lp <a href="/bugs/1453948" class="bug-link">bug #1453948</a></p>
<p>-Clay</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Jeremy and Tristan,

As Richard has pointed out the we definitely need to backport a fix for PUT tempurls (which we don't yet have, but probably looks a lot like "break all clients who are trying to create DLO's via PUT tempurl").

I opened lp bug #1453948

-Clay</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/41" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~matt-0" class="sprite person">Matthew Oliver (matt-0)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-06-01T03:58:24.804554+00:00" title="2015-06-01 03:58:24 UTC">on 2015-06-01</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/41"> #41</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Sam,</p>
<p>I think I&#x27;ve spotted a bug in your func tests.. but am about to step into a meeting. Once out I&#x27;ll just double check to make sure and then post a follow up patch.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Sam, 

I think I've spotted a bug in your func tests.. but am about to step into a meeting. Once out I'll just double check to make sure and then post a follow up patch.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/42" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~matt-0" class="sprite person">Matthew Oliver (matt-0)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-06-01T06:21:40.014898+00:00" title="2015-06-01 06:21:40 UTC">on 2015-06-01</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/42"> #42</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4407820/+files/tempurl_fix.patch">Sam's patch with a fixed func test.</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4407820">Edit</a>
        (82.7 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Here is an updated version of Sam&#x27;s patch, except with the test_GET_<wbr />DLO_outside_<wbr />container test fixed so the manifest is in container2 and points to the segments in container.</p>
<p>&nbsp;&nbsp;+        seg1 = self.env.<wbr />container.<wbr />file(<br />
&nbsp;&nbsp;+            &quot;get-dlo-<wbr />outside-<wbr />seg1&quot; + Utils.create_<wbr />name())<br />
&nbsp;&nbsp;+        seg2 = self.env.<wbr />container.<wbr />file(<br />
&nbsp;&nbsp;+            &quot;get-dlo-<wbr />outside-<wbr />seg2&quot; + Utils.create_<wbr />name())<br />
&nbsp;&nbsp;+        seg1.write(&quot;one fish two fish &quot;)<br />
&nbsp;&nbsp;+        seg2.write(&quot;red fish blue fish&quot;)<br />
&nbsp;&nbsp;+<br />
&nbsp;&nbsp;+        container2 = self.env.<wbr />account.<wbr />container(<wbr />Utils.create_<wbr />name())<br />
&nbsp;&nbsp;+<br />
&nbsp;&nbsp;+        manifest = container2.<wbr />file(&quot;manifest&quot; + Utils.create_<wbr />name())<br />
&nbsp;&nbsp;+        manifest.write(<br />
&nbsp;&nbsp;+            &#x27;&#x27;,<br />
&nbsp;&nbsp;+            hdrs={&quot;<wbr />X-Object-<wbr />Manifest&quot;<wbr />: &quot;%s/get-<wbr />dlo-outside-<wbr />seg&quot; %<br />
&nbsp;&nbsp;+                  (self.env.<wbr />container.<wbr />name,)}<wbr />)</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Here is an updated version of Sam's patch, except with the test_GET_DLO_outside_container test fixed so the manifest is in container2 and points to the segments in container.

  +        seg1 = self.env.container.file(
  +            "get-dlo-outside-seg1" + Utils.create_name())
  +        seg2 = self.env.container.file(
  +            "get-dlo-outside-seg2" + Utils.create_name())
  +        seg1.write("one fish two fish ")
  +        seg2.write("red fish blue fish")
  +
  +        container2 = self.env.account.container(Utils.create_name())
  +
  +        manifest = container2.file("manifest" + Utils.create_name())
  +        manifest.write(
  +            '',
  +            hdrs={"X-Object-Manifest": "%s/get-dlo-outside-seg" %
  +                  (self.env.container.name,)})
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/43" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~tristan-cacqueray" class="sprite person">Tristan Cacqueray (tristan-cacqueray)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-06-10T18:58:07.213038+00:00" title="2015-06-10 18:58:07 UTC">on 2015-06-10</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/43"> #43</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>So what is the current proposed fix for this bug ?</p>
<p>Is the impact description proposed in comment #31 correct ?</p>
<p>Is there a plan for <a href="/bugs/1453948" class="bug-link">bug 1453948</a> ? Or will it be only fixed in master ?</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">So what is the current proposed fix for this bug ?

Is the impact description proposed in comment #31 correct ?

Is there a plan for bug 1453948 ? Or will it be only fixed in master ?</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/44" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~cschwede" class="sprite person">Christian Schwede (cschwede)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-06-12T12:56:48.439330+00:00" title="2015-06-12 12:56:48 UTC">on 2015-06-12</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/44"> #44</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>@Tristan: Sams patch #25 with the change from Matthew in #42 looks good to me.</p>
<p>The impact description in comment #31 is correct, however the last but one paragraph is identical with <a href="/bugs/1453948" class="bug-link">bug 1453948</a> (and might be removed if two separate OSSAs are going to be published).</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">@Tristan: Sams patch #25 with the change from Matthew in #42 looks good to me.

The impact description in comment #31 is correct, however the last but one paragraph is identical with bug 1453948 (and might be removed if two separate OSSAs are going to be published).</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/45" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~fungi" class="sprite person">Jeremy Stanley (fungi)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-06-12T14:16:08.351711+00:00" title="2015-06-12 14:16:08 UTC">on 2015-06-12</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/45"> #45</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>The impact description in comment #31 is far, far too much detail. We need something around the brevity of my impact description in comment #26 to disambiguate this report from any similar bugs which might be reported within the same calendar year, and to act as a general signal to less technically savvy downstream consumers sufficiently answering the question &quot;do I need to apply this patch on my systems?&quot; Additional technical detail can be summarized within the bug if necessary.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">The impact description in comment #31 is far, far too much detail. We need something around the brevity of my impact description in comment #26 to disambiguate this report from any similar bugs which might be reported within the same calendar year, and to act as a general signal to less technically savvy downstream consumers sufficiently answering the question "do I need to apply this patch on my systems?" Additional technical detail can be summarized within the bug if necessary.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/46" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~fungi" class="sprite person">Jeremy Stanley (fungi)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-06-12T14:17:25.685662+00:00" title="2015-06-12 14:17:25 UTC">on 2015-06-12</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/46"> #46</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Oh, I think I&#x27;m misreading comment #31 as implying that the paragraphs after the ---- should be part of the impact description. Sorry, the part above the ---- looks like a fine impact description to me too.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Oh, I think I'm misreading comment #31 as implying that the paragraphs after the ---- should be part of the impact description. Sorry, the part above the ---- looks like a fine impact description to me too.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/47" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~notmyname" class="sprite person">John Dickinson (notmyname)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-06-12T23:53:47.532946+00:00" title="2015-06-12 23:53:47 UTC">on 2015-06-12</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/47"> #47</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Tristan, this bug and <a rel="nofollow" href="https://bugs.launchpad.net/swift/+bug/1449212">https:/<wbr />/bugs.launchpad<wbr />.net/swift/<wbr />+bug/1449212</a> are closely related and should only be disclosed at the same time.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Tristan, this bug and https://bugs.launchpad.net/swift/+bug/1449212 are closely related and should only be disclosed at the same time.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/48" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~notmyname" class="sprite person">John Dickinson (notmyname)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-06-12T23:54:07.761507+00:00" title="2015-06-12 23:54:07 UTC">on 2015-06-12</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/48"> #48</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>bad paste, sorry.</p>
<p>Tristan, this bug and <a rel="nofollow" href="https://bugs.launchpad.net/swift/+bug/1453948">https:/<wbr />/bugs.launchpad<wbr />.net/swift/<wbr />+bug/1453948</a> are closely related and should only be disclosed at the same time.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">bad paste, sorry.


Tristan, this bug and https://bugs.launchpad.net/swift/+bug/1453948 are closely related and should only be disclosed at the same time.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/49" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-06-23T02:49:39.225258+00:00" title="2015-06-23 02:49:39 UTC">on 2015-06-23</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/49"> #49</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>I tried to rebase this on top of the fix I attached to lp <a href="/bugs/1453948" class="bug-link">bug #1453948</a> - but it looks like a couple of new tests assume it&#x27;s safe to create DLO&#x27;s via PUT tempurls (and then it validates you can&#x27;t download them)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;===<wbr />=======<wbr />=======<wbr />=======<wbr />=======<wbr />=======<wbr />=======<wbr />=======<wbr />=======<wbr />=======<wbr />====<br />
&nbsp;&nbsp;&nbsp;&nbsp;ERROR: test_GET_<wbr />DLO_outside_<wbr />container (test.functiona<wbr />l.tests.<wbr />TestTempurl)<br />
&nbsp;&nbsp;&nbsp;&nbsp;---<wbr />-------<wbr />-------<wbr />-------<wbr />-------<wbr />-------<wbr />-------<wbr />-------<wbr />-------<wbr />-------<wbr />----<br />
&nbsp;&nbsp;&nbsp;&nbsp;Traceback (most recent call last):<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File &quot;/vagrant/<wbr />swift/test/<wbr />functional/<wbr />tests.py&quot;<wbr />, line 2907, in test_GET_<wbr />DLO_outside_<wbr />container<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<wbr />&nbsp;(self.<wbr />env.container.<wbr />name,)}<wbr />)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File &quot;/vagrant/<wbr />swift/test/<wbr />functional/<wbr />swift_test_<wbr />client.<wbr />py&quot;, line 952, in write<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<wbr />&nbsp;self.conn.<wbr />make_path(<wbr />self.path)<wbr />)<br />
&nbsp;&nbsp;&nbsp;&nbsp;ResponseError: 404: &#x27;Not Found&#x27; (&#x27;PUT&#x27; &#x27;/v1/AUTH_<wbr />test/83790b246e<wbr />be49adb3240a944<wbr />3a15789/<wbr />manifestd6f808a<wbr />66f82410aa73646<wbr />327e8e9353&#x27;<wbr />) txid=tx91a6ef5b<wbr />1001417eae414-<wbr />005588c7ce</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;===<wbr />=======<wbr />=======<wbr />=======<wbr />=======<wbr />=======<wbr />=======<wbr />=======<wbr />=======<wbr />=======<wbr />====<br />
&nbsp;&nbsp;&nbsp;&nbsp;ERROR: test_GET_<wbr />DLO_outside_<wbr />container (test.functiona<wbr />l.tests.<wbr />TestTempurlUTF8<wbr />)<br />
&nbsp;&nbsp;&nbsp;&nbsp;---<wbr />-------<wbr />-------<wbr />-------<wbr />-------<wbr />-------<wbr />-------<wbr />-------<wbr />-------<wbr />-------<wbr />----<br />
&nbsp;&nbsp;&nbsp;&nbsp;Traceback (most recent call last):<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File &quot;/vagrant/<wbr />swift/test/<wbr />functional/<wbr />tests.py&quot;<wbr />, line 2907, in test_GET_<wbr />DLO_outside_<wbr />container<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<wbr />&nbsp;(self.<wbr />env.container.<wbr />name,)}<wbr />)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File &quot;/vagrant/<wbr />swift/test/<wbr />functional/<wbr />swift_test_<wbr />client.<wbr />py&quot;, line 952, in write<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<wbr />&nbsp;self.conn.<wbr />make_path(<wbr />self.path)<wbr />)<br />
&nbsp;&nbsp;&nbsp;&nbsp;ResponseError: 404: &#x27;Not Found&#x27; (&#x27;PUT&#x27; &#x27;/v1/AUTH_<wbr />test/%E1%<wbr />A0%83%E8%<wbr />94%89%ED%<wbr />88%8E%ED%<wbr />88%8F%E3%<wbr />9C%85%E8%<wbr />94%8A%EF%<wbr />84%91%E1%<wbr />A0%82%E0%<wbr />A4%82%E9%<wbr />90%8B%E0%<wbr />A4%81%E1%<wbr />A0%81%E8%<wbr />94%88%EF%<wbr />84%8F%E8%<wbr />94%88/manifest%<wbr />EB%8C%8E%<wbr />E0%A4%81%<wbr />E5%98%88%<wbr />E8%94%88%<wbr />EB%8C%8C%<wbr />E5%98%85%<wbr />E5%98%88%<wbr />E9%90%8C%<wbr />E0%A4%82%<wbr />EF%84%92%<wbr />E5%98%85%<wbr />EF%84%92%<wbr />E1%A0%83%<wbr />EF%84%90%<wbr />E8%94%89&#x27;<wbr />) txid=tx3971d8be<wbr />ddea439badad0-<wbr />005588c7cf</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">I tried to rebase this on top of the fix I attached to lp bug #1453948 - but it looks like a couple of new tests assume it's safe to create DLO's via PUT tempurls (and then it validates you can't download them)

    ======================================================================
    ERROR: test_GET_DLO_outside_container (test.functional.tests.TestTempurl)
    ----------------------------------------------------------------------
    Traceback (most recent call last):
      File "/vagrant/swift/test/functional/tests.py", line 2907, in test_GET_DLO_outside_container
        (self.env.container.name,)})
      File "/vagrant/swift/test/functional/swift_test_client.py", line 952, in write
        self.conn.make_path(self.path))
    ResponseError: 404: 'Not Found' ('PUT' '/v1/AUTH_test/83790b246ebe49adb3240a9443a15789/manifestd6f808a66f82410aa73646327e8e9353') txid=tx91a6ef5b1001417eae414-005588c7ce

    ======================================================================
    ERROR: test_GET_DLO_outside_container (test.functional.tests.TestTempurlUTF8)
    ----------------------------------------------------------------------
    Traceback (most recent call last):
      File "/vagrant/swift/test/functional/tests.py", line 2907, in test_GET_DLO_outside_container
        (self.env.container.name,)})
      File "/vagrant/swift/test/functional/swift_test_client.py", line 952, in write
        self.conn.make_path(self.path))
    ResponseError: 404: 'Not Found' ('PUT' '/v1/AUTH_test/%E1%A0%83%E8%94%89%ED%88%8E%ED%88%8F%E3%9C%85%E8%94%8A%EF%84%91%E1%A0%82%E0%A4%82%E9%90%8B%E0%A4%81%E1%A0%81%E8%94%88%EF%84%8F%E8%94%88/manifest%EB%8C%8E%E0%A4%81%E5%98%88%E8%94%88%EB%8C%8C%E5%98%85%E5%98%88%E9%90%8C%E0%A4%82%EF%84%92%E5%98%85%EF%84%92%E1%A0%83%EF%84%90%E8%94%89') txid=tx3971d8beddea439badad0-005588c7cf

</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/50" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~tristan-cacqueray" class="sprite person">Tristan Cacqueray (tristan-cacqueray)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-06-29T14:41:46.456460+00:00" title="2015-06-29 14:41:46 UTC">on 2015-06-29</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/50"> #50</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Adding ossg-coresec to both bugs in order to discuss if these bugs should be kept private.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Adding ossg-coresec to both bugs in order to discuss if these bugs should be kept private.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/51" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-06-29T17:55:53.837743+00:00" title="2015-06-29 17:55:53 UTC">on 2015-06-29</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/51"> #51</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Why wouldn&#x27;t they be kept private?</p>
<p>Can I get some feedback on the patch attached to lp <a href="/bugs/1453948" class="bug-link">bug #1453948</a></p>
<p>If that looks good I can work on the rebase of sam &amp; matts patch here over that - plus backports all around.</p>
<p>I think we should nail down the other fix first tho since it backports further.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Why wouldn't they be kept private?

Can I get some feedback on the patch attached to lp bug #1453948

If that looks good I can work on the rebase of sam &amp; matts patch here over that - plus backports all around.

I think we should nail down the other fix first tho since it backports further.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/52" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~tristan-cacqueray" class="sprite person">Tristan Cacqueray (tristan-cacqueray)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-06-29T19:46:47.217382+00:00" title="2015-06-29 19:46:47 UTC">on 2015-06-29</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/52"> #52</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Clay, having these bugs public would in theory get more reviewer on-board and a faster process (gerrit and gate testing).</p>
<p>It have been two months already and the exploitation of these issues seem to require a fair amount of social engineering, so unless there is something we missed, the impact is rather moderate.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Clay, having these bugs public would in theory get more reviewer on-board and a faster process (gerrit and gate testing).

It have been two months already and the exploitation of these issues seem to require a fair amount of social engineering, so unless there is something we missed, the impact is rather moderate.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/53" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~robert-clark" class="sprite person">Robert Clark (robert-clark)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-07-06T13:20:38.558780+00:00" title="2015-07-06 13:20:38 UTC">on 2015-07-06</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/53"> #53</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Although moving slowly, the issue clearly has the attention of developers from Swift. I&#x27;m not convinced that opening this up would progress the issue any faster but it may put existing deployments at risk.</p>
<p>To that end, I suggest this remains closed.</p>
<p>@Swift Developers - what, if anything, can we (Security or VMT) do to help progress this?</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Although moving slowly, the issue clearly has the attention of developers from Swift. I'm not convinced that opening this up would progress the issue any faster but it may put existing deployments at risk.

To that end, I suggest this remains closed.

@Swift Developers - what, if anything, can we (Security or VMT) do to help progress this?</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/54" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~fungi" class="sprite person">Jeremy Stanley (fungi)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-07-06T14:43:26.915615+00:00" title="2015-07-06 14:43:26 UTC">on 2015-07-06</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/54"> #54</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>I was more looking for feedback from vmt-coresec on whether this bug describes a viable, real-world exploit based on typical use cases, or whether it&#x27;s a corner case relying on unusual trust boundaries and social engineering to achieve any actual compromise.</p>
<p>I&#x27;m mostly just trying to gauge relative severity since we&#x27;re trying, within the VMT, to start pushing lower-severity vulnerability reports into the open. Keeping vulnerabilities under embargo for long periods of time is harmful both in terms of the amount of effort expended by parties involved (compared to availability of more efficient public-facing workflows), but also insofar as users of features impacted by this vulnerability don&#x27;t currently know they should avoid doing so. The default stance of &quot;keep every security vulnerability secret until it&#x27;s fixed no matter how trivial&quot; is a bad habit of which we&#x27;re attempting to break ourselves going forward.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">I was more looking for feedback from vmt-coresec on whether this bug describes a viable, real-world exploit based on typical use cases, or whether it's a corner case relying on unusual trust boundaries and social engineering to achieve any actual compromise.

I'm mostly just trying to gauge relative severity since we're trying, within the VMT, to start pushing lower-severity vulnerability reports into the open. Keeping vulnerabilities under embargo for long periods of time is harmful both in terms of the amount of effort expended by parties involved (compared to availability of more efficient public-facing workflows), but also insofar as users of features impacted by this vulnerability don't currently know they should avoid doing so. The default stance of "keep every security vulnerability secret until it's fixed no matter how trivial" is a bad habit of which we're attempting to break ourselves going forward.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/55" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~fungi" class="sprite person">Jeremy Stanley (fungi)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-07-06T14:44:21.116529+00:00" title="2015-07-06 14:44:21 UTC">on 2015-07-06</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/55"> #55</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Sorry, I meant &quot;ossg-coresec&quot; where I said &quot;vmt-coresec&quot; there.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Sorry, I meant "ossg-coresec" where I said "vmt-coresec" there.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          

          
              <div class="boardComment">
  <div class="boardCommentDetails">
    
      <a href="https://launchpad.net/~notmyname" class="sprite person">John Dickinson (notmyname)</a>
    
    <time title="2015-07-29 17:31:20 UTC" datetime="2015-07-29T17:31:20.605116+00:00">on 2015-07-29</time>
  </div>
  <div class="boardCommentActivity">
    <table class="bug-activity">
  
    
      <tr>
        <td colspan="2">Changed in swift: </td>
      </tr>
    
    <tr>
      <td style="text-align: right;">
        <b>importance</b>:
      </td>
      <td>
        Undecided &#8594; Critical
      </td>
    </tr>
  
</table>
  </div>
</div>
          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/56" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-04T07:40:52.580521+00:00" title="2015-08-04 07:40:52 UTC">on 2015-08-04</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/56"> #56</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4438741/+files/disable-get-container-tempurl-cross-container.patch">disable-get-container-tempurl-cross-container.patch</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4438741">Edit</a>
        (91.4 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>So I&#x27;m still not entirely happy with all the get_*_info changes needed to support this fix, but only because I think test test cleanup distracts from the important change of fixing the authorize callback.  I definitely approve of this improvement to the environ caching, and I think i&#x27;ll be much easier on us down the road - so maybe now is as good a time to fix it as any.</p>
<p>To reiterate the other dirty hacks that I&#x27;ve suggested (as opposed to using sam&#x27;s *fix*) were:</p>
<p>a) make the tempurl callback return 401 until container acls are in place - coupling with existing behavior to indirectly prevent the authorize callback pop</p>
<p>b) hijack the `swift.<wbr />authorize_<wbr />override` environ boolean to *also* indicate that it&#x27;s cheap to call authorize and update the base controller to not pop the authorize callback from preauthorized requests&#x27; environ.</p>
<p>c) start to fix environ caching to not rely on the proxy server setting the cache in the get_*_info() request environ, and instead use the response directly *</p>
<p>* N.B. I think using the get_*_info() response directly (instead of it&#x27;s requests&#x27; environ) to fill in the original requests env cache is actually the correct fix - but when I started down this road the test fall out was about the same as the info_cache trick (it was starting to look a little worse actually).  I found a hack that starts down the path without fully commiting to removing the request environ caching junk that I thought was ok.  I&#x27;ll attach that one separately.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">So I'm still not entirely happy with all the get_*_info changes needed to support this fix, but only because I think test test cleanup distracts from the important change of fixing the authorize callback.  I definitely approve of this improvement to the environ caching, and I think i'll be much easier on us down the road - so maybe now is as good a time to fix it as any.

To reiterate the other dirty hacks that I've suggested (as opposed to using sam's *fix*) were:

a) make the tempurl callback return 401 until container acls are in place - coupling with existing behavior to indirectly prevent the authorize callback pop

b) hijack the `swift.authorize_override` environ boolean to *also* indicate that it's cheap to call authorize and update the base controller to not pop the authorize callback from preauthorized requests' environ.

c) start to fix environ caching to not rely on the proxy server setting the cache in the get_*_info() request environ, and instead use the response directly *

* N.B. I think using the get_*_info() response directly (instead of it's requests' environ) to fill in the original requests env cache is actually the correct fix - but when I started down this road the test fall out was about the same as the info_cache trick (it was starting to look a little worse actually).  I found a hack that starts down the path without fully commiting to removing the request environ caching junk that I thought was ok.  I'll attach that one separately.
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/57" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-04T07:43:53.035184+00:00" title="2015-08-04 07:43:53 UTC">on 2015-08-04</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/57"> #57</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4438746/+files/disable-get-container-tempurl-cross-container-2.patch">disable-get-container-tempurl-cross-container-2.patch</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4438746">Edit</a>
        (31.5 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>This one should be a little shorter, it&#x27;s the cleanest hack I could come up with - but honestly the smallest possible diff may be a misguided goal since we&#x27;re not going to need backport this beyond Kilo.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">This one should be a little shorter, it's the cleanest hack I could come up with - but honestly the smallest possible diff may be a misguided goal since we're not going to need backport this beyond Kilo.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/58" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~matt-0" class="sprite person">Matthew Oliver (matt-0)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-05T07:10:10.679102+00:00" title="2015-08-05 07:10:10 UTC">on 2015-08-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/58"> #58</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Clay, I can&#x27;t apply your patches to master, is there a commit ID I can checkout to apply these patches to for testing?</p>
<p>It looks good as a patch in theory but want to play around with it. So this should make the &#x27;swift.authorize&#x27; when run in the proxy to give us a 401 when trying to access if a different container/account right? We seem to wrap the GET and PUT methods of &#x27;swift/<wbr />proxy/controlle<wbr />rs/obj.<wbr />py with delay_denial, which looking at the proxy code means it&#x27;s actually ignoring the result, am I missing something.. you have tests that prove this is not the case.. maybe I&#x27;m just confused and maybe my brain isn&#x27;t as 100% as I thought post Flu.</p>
<p>But testing will simply check this :)</p>
<p>I&#x27;m continuing my playing, just wanted to update the bug with my 2 cents.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Clay, I can't apply your patches to master, is there a commit ID I can checkout to apply these patches to for testing?

It looks good as a patch in theory but want to play around with it. So this should make the 'swift.authorize' when run in the proxy to give us a 401 when trying to access if a different container/account right? We seem to wrap the GET and PUT methods of 'swift/proxy/controllers/obj.py with delay_denial, which looking at the proxy code means it's actually ignoring the result, am I missing something.. you have tests that prove this is not the case.. maybe I'm just confused and maybe my brain isn't as 100% as I thought post Flu.

But testing will simply check this :)

I'm continuing my playing, just wanted to update the bug with my 2 cents. </textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/59" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~matt-0" class="sprite person">Matthew Oliver (matt-0)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-05T07:30:41.136061+00:00" title="2015-08-05 07:30:41 UTC">on 2015-08-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/59"> #59</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Lol, ignore that, swift.autherize stuff, I just fail at reading/grepping.. (AKA I&#x27;m an idiot). Turns out when doing a search inside of vim, use the US spelling of authorize (not authorise) inside the proxy controllers.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Lol, ignore that, swift.autherize stuff, I just fail at reading/grepping.. (AKA I'm an idiot). Turns out when doing a search inside of vim, use the US spelling of authorize (not authorise) inside the proxy controllers.  </textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/60" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~cschwede" class="sprite person">Christian Schwede (cschwede)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-05T09:01:52.842685+00:00" title="2015-08-05 09:01:52 UTC">on 2015-08-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/60"> #60</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4439609/+files/disable-get-container-tempurl-cross-container-3.patch">disable-get-container-tempurl-cross-container-3.patch</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4439609">Edit</a>
        (31.3 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Attached is a rebased version of Clays patch. Applies without a warning on current master (commit 5b24b22).</p>
<p>Currently testing patch.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Attached is a rebased version of Clays patch. Applies without a warning on current master (commit 5b24b22). 

Currently testing patch.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/61" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~cschwede" class="sprite person">Christian Schwede (cschwede)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-05T10:40:25.314013+00:00" title="2015-08-05 10:40:25 UTC">on 2015-08-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/61"> #61</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Looks like the patch is still allowing to abuse DLO+container tempurl, for example using the following simple script:</p>
<p>&nbsp;echo 12345 &gt; foo.txt<br />
&nbsp;swift upload victim-container foo.txt<br />
&nbsp;swift post -m &quot;temp-url-key: secret&quot; compromised-<wbr />container</p>
<p>&nbsp;tempurl=<wbr />`swift-<wbr />temp-url PUT 60 /v1/AUTH_<wbr />test/compromise<wbr />d-container/<wbr />foo.txt secret`<br />
&nbsp;curl -i -X PUT <a rel="nofollow" href="http://127.0.0.1:8080">http://<wbr />127.0.0.<wbr />1:8080</a>${tempurl} -H &#x27;X-Object-Manifest: victim-container/f&#x27; -H &#x27;Content-Length: 0&#x27;</p>
<p>&nbsp;tempurl=<wbr />`swift-<wbr />temp-url GET 60 /v1/AUTH_<wbr />test/compromise<wbr />d-container/<wbr />foo.txt secret`<br />
&nbsp;curl -i <a rel="nofollow" href="http://127.0.0.1:8080">http://<wbr />127.0.0.<wbr />1:8080</a>${tempurl}</p>
<p>Or did I get it wrong?</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Looks like the patch is still allowing to abuse DLO+container tempurl, for example using the following simple script:

 echo 12345 &gt; foo.txt
 swift upload victim-container foo.txt
 swift post -m "temp-url-key: secret" compromised-container

 tempurl=`swift-temp-url PUT 60 /v1/AUTH_test/compromised-container/foo.txt secret`
 curl -i -X PUT http://127.0.0.1:8080${tempurl} -H 'X-Object-Manifest: victim-container/f' -H 'Content-Length: 0'

 tempurl=`swift-temp-url GET 60 /v1/AUTH_test/compromised-container/foo.txt secret`
 curl -i http://127.0.0.1:8080${tempurl}

Or did I get it wrong?</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/62" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~matt-0" class="sprite person">Matthew Oliver (matt-0)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-05T12:15:47.708173+00:00" title="2015-08-05 12:15:47 UTC">on 2015-08-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/62"> #62</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Thanks for that Christian (rebase),</p>
<p>Hmm it looks like what your doing is right. The patch should be setting the swift.authorize to fail if accessing the other container, unless something else if overwriting swift.authorize later in the pipeline.</p>
<p>I&#x27;ll have a play and see if it fails for me.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Thanks for that Christian (rebase), 

Hmm it looks like what your doing is right. The patch should be setting the swift.authorize to fail if accessing the other container, unless something else if overwriting swift.authorize later in the pipeline.

I'll have a play and see if it fails for me.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/63" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~alistair-coles" class="sprite person">Alistair Coles (alistair-coles)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-05T12:38:31.402713+00:00" title="2015-08-05 12:38:31 UTC">on 2015-08-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/63"> #63</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4439721/+files/acoles-combined-tempurl-xlo-fixes.diff">acoles-combined-tempurl-xlo-fixes.diff</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4439721">Edit</a>
        (31.8 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Did you include the patch from here <a rel="nofollow" href="https://bugs.launchpad.net/swift/+bug/1453948">https:/<wbr />/bugs.launchpad<wbr />.net/swift/<wbr />+bug/1453948</a> #15?</p>
<p>I took Christian&#x27;s patch at #60, manually merged <a rel="nofollow" href="https://bugs.launchpad.net/swift/+bug/1453948">https:/<wbr />/bugs.launchpad<wbr />.net/swift/<wbr />+bug/1453948</a> #15 patch (would not apply) and then the scenario at #61 fails because</p>
<p>&nbsp;&nbsp;curl -i -X PUT <a rel="nofollow" href="http://127.0.0.1:8080">http://<wbr />127.0.0.<wbr />1:8080</a>${tempurl} -H &#x27;X-Object-Manifest: victim-container/f&#x27; -H &#x27;Content-Length: 0&#x27;</p>
<p>is disallowed with 400</p>
<p>My combined diff wrt master is attached FYI</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Did you include the patch from here https://bugs.launchpad.net/swift/+bug/1453948 #15?

I took Christian's patch at #60, manually merged https://bugs.launchpad.net/swift/+bug/1453948 #15 patch (would not apply) and then the scenario at #61 fails because 

  curl -i -X PUT http://127.0.0.1:8080${tempurl} -H 'X-Object-Manifest: victim-container/f' -H 'Content-Length: 0'

is disallowed with 400

My combined diff wrt master is attached FYI

</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/64" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~matt-0" class="sprite person">Matthew Oliver (matt-0)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-05T12:49:05.414665+00:00" title="2015-08-05 12:49:05 UTC">on 2015-08-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/64"> #64</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>I&#x27;m getting the same result as you Christian, interestingly the swift.authorze method isn&#x27;t being overriden so that&#x27;s good.. but the result is None, so the container check isn&#x27;t returning a 401 like we suspect.</p>
<p>Here&#x27;s some sanitised q() output:</p>
<p>&nbsp;&nbsp;handle_request: id(req.<wbr />environ[<wbr />&#x27;swift.<wbr />authorize&#x27;<wbr />])=140192181680<wbr />680<br />
&nbsp;&nbsp;handle_request: id(req.<wbr />environ[<wbr />&#x27;swift.<wbr />authorize&#x27;<wbr />])=140192234245<wbr />248<br />
&nbsp;&nbsp;handle_request: id(req.<wbr />environ[<wbr />&#x27;swift.<wbr />authorize&#x27;<wbr />])=140192234245<wbr />248<br />
&nbsp;&nbsp;__call__: id(env[<wbr />&#x27;swift.<wbr />authorize&#x27;<wbr />])=140192234245<wbr />248<br />
&nbsp;&nbsp;handle_request: id(req.<wbr />environ[<wbr />&#x27;swift.<wbr />authorize&#x27;<wbr />])=140192234245<wbr />248</p>
<p>&nbsp;&nbsp;__call__: id(env[<wbr />&#x27;swift.<wbr />authorize&#x27;<wbr />])=140415816079<wbr />552<br />
&nbsp;&nbsp;handle_request: id(req.<wbr />environ[<wbr />&#x27;swift.<wbr />authorize&#x27;<wbr />])=140415816079<wbr />552<br />
&nbsp;&nbsp;handle_request: resp=None</p>
<p>NOTE: The function ID stays the same, and the response to the swift.authorize is None</p>
<p>I&#x27;m going to look into it further.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">I'm getting the same result as you Christian, interestingly the swift.authorze method isn't being overriden so that's good.. but the result is None, so the container check isn't returning a 401 like we suspect.

Here's some sanitised q() output:

  handle_request: id(req.environ['swift.authorize'])=140192181680680
  handle_request: id(req.environ['swift.authorize'])=140192234245248
  handle_request: id(req.environ['swift.authorize'])=140192234245248
  __call__: id(env['swift.authorize'])=140192234245248
  handle_request: id(req.environ['swift.authorize'])=140192234245248

  __call__: id(env['swift.authorize'])=140415816079552
  handle_request: id(req.environ['swift.authorize'])=140415816079552
  handle_request: resp=None

NOTE: The function ID stays the same, and the response to the swift.authorize is None

I'm going to look into it further.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/65" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~matt-0" class="sprite person">Matthew Oliver (matt-0)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-05T14:01:19.583004+00:00" title="2015-08-05 14:01:19 UTC">on 2015-08-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/65"> #65</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>OK so it seems the swift.authorize method is only being called once, when a subrequest is issued there is no swift.authorize. In fact during debugging directly before <a rel="nofollow" href="https://github.com/openstack/swift/blob/master/swift/common/middleware/dlo.py#L236">https:/<wbr />/github.<wbr />com/openstack/<wbr />swift/blob/<wbr />master/<wbr />swift/common/<wbr />middleware/<wbr />dlo.py#<wbr />L236</a> swift.authorize exists in the req object, directly afterwards it doesn&#x27;t.</p>
<p>If I do something like:</p>
<p>&nbsp;&nbsp;swift_authorize = req.environ.<wbr />get(&#x27;swift.<wbr />authorize&#x27;<wbr />)<br />
&nbsp;&nbsp;resp_iter = self._app_<wbr />call(req.<wbr />environ)<br />
&nbsp;&nbsp;req.environ[<wbr />&#x27;swift.<wbr />authorize&#x27;<wbr />] = swift_authorize</p>
<p>Then it&#x27;s fixed.. that&#x27;s as far as I&#x27;ve got, but its midnight here and I need to get up for the meeting early in the morning, so someone can take off from where I left it. By either seeing why its removed from &#x27;self._app_call()&#x27;, butting my hack in, or placing it somewhere better.</p>
<p>Night.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">OK so it seems the swift.authorize method is only being called once, when a subrequest is issued there is no swift.authorize. In fact during debugging directly before https://github.com/openstack/swift/blob/master/swift/common/middleware/dlo.py#L236 swift.authorize exists in the req object, directly afterwards it doesn't.

If I do something like:
  
  swift_authorize = req.environ.get('swift.authorize')
  resp_iter = self._app_call(req.environ)
  req.environ['swift.authorize'] = swift_authorize

Then it's fixed.. that's as far as I've got, but its midnight here and I need to get up for the meeting early in the morning, so someone can take off from where I left it. By either seeing why its removed from 'self._app_call()', butting my hack in, or placing it somewhere better. 

Night.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/66" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~cschwede" class="sprite person">Christian Schwede (cschwede)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-05T16:00:09.973624+00:00" title="2015-08-05 16:00:09 UTC">on 2015-08-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/66"> #66</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite download-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4439846/+files/test_patch.sh">test_patch.sh</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4439846">Edit</a>
        (827 bytes,
        text/x-sh)
      </li>
    </ul>

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>@Alistair: yes, with that patch applied my test above doesn&#x27;t work anymore, because putting a DLO with tempurl fails with &quot;The header &#x27;X-Object-Manifest&#x27; is not allowed in this tempurl&quot;.</p>
<p>However, any existing DLO is still able to read the data. As a user with write permission and knowledge of the container tempurl key  I could simply create a new DLO, still reading data in other containers I don&#x27;t have access to.</p>
<p>Proof of concept attached, succeeding on a clean SAIO environment with both patches applied.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">@Alistair: yes, with that patch applied my test above doesn't work anymore, because putting a DLO with tempurl fails with "The header 'X-Object-Manifest' is not allowed in this tempurl".

However, any existing DLO is still able to read the data. As a user with write permission and knowledge of the container tempurl key  I could simply create a new DLO, still reading data in other containers I don't have access to.

Proof of concept attached, succeeding on a clean SAIO environment with both patches applied.

</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/67" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~alistair-coles" class="sprite person">Alistair Coles (alistair-coles)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-05T18:12:12.378603+00:00" title="2015-08-05 18:12:12 UTC">on 2015-08-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/67"> #67</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4439888/+files/acoles-tempurl-dlo-functest-mod.patch">acoles-tempurl-dlo-functest-mod.patch</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4439888">Edit</a>
        (26.8 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>@Matt the proxy app removes swift.authorize from env line 398 swift/proxy/<wbr />server.<wbr />py:</p>
<p>- for a manifest get from a container tempurl, the first call to swift.authorize is for the manifest which *is* in the nontainer scope, so authorize_<wbr />same_container returns None and the proxy removes swift.authorize from env. The subsequent requests to the other container (the segments container) are then not auth&#x27;d :(</p>
<p>There is a big in the functional test for this scenario (I think, its late and this is complicated for my small brain!), I will attach a patch which leaves the test test.functional<wbr />.tests.<wbr />TestContainerTe<wbr />mpurl#test_<wbr />GET_DLO_<wbr />outside_<wbr />container failing due to above I think.</p>
<p>Patch is against master and based on Christian&#x27;s rebase onto master in #60 with a change to the func test to reveal a failure case.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">@Matt the proxy app removes swift.authorize from env line 398 swift/proxy/server.py:

- for a manifest get from a container tempurl, the first call to swift.authorize is for the manifest which *is* in the nontainer scope, so authorize_same_container returns None and the proxy removes swift.authorize from env. The subsequent requests to the other container (the segments container) are then not auth'd :(

There is a big in the functional test for this scenario (I think, its late and this is complicated for my small brain!), I will attach a patch which leaves the test test.functional.tests.TestContainerTempurl#test_GET_DLO_outside_container failing due to above I think.

Patch is against master and based on Christian's rebase onto master in #60 with a change to the func test to reveal a failure case.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/68" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~alistair-coles" class="sprite person">Alistair Coles (alistair-coles)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-05T18:17:41.148471+00:00" title="2015-08-05 18:17:41 UTC">on 2015-08-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/68"> #68</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>First, in comment #67, s/big/bug/  !</p>
<p>Couple of other comments:</p>
<p>1. TestContainerTe<wbr />mpurl shouldl remove any account level tempurl keys that have been left in place by other tests, to avoid any coupling of the tempurl scopes being tested.</p>
<p>2. I have a nagging concern about auth_callback_<wbr />same_container returning None when the path fails to split as expected, havent pinned down a case when that would be bad yet though.</p>
<p>def authorize_<wbr />same_container(<wbr />account_<wbr />to_match, container_<wbr />to_match)<wbr />:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;def auth_callback_<wbr />same_container(<wbr />req):<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_ver, acc, con, _rest = req.split_path(3, 4, True)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;except ValueError:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return None<br />
^^^^^^^^^^^^^^^^^^  is it relly safe to auth a request when split.path fails??</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if acc == account_to_match and con == container_to_match:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return None<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return HTTPUnauthorize<wbr />d(request=<wbr />req)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;return auth_callback_<wbr />same_container</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">First, in comment #67, s/big/bug/  !

Couple of other comments:

1. TestContainerTempurl shouldl remove any account level tempurl keys that have been left in place by other tests, to avoid any coupling of the tempurl scopes being tested.

2. I have a nagging concern about auth_callback_same_container returning None when the path fails to split as expected, havent pinned down a case when that would be bad yet though.

def authorize_same_container(account_to_match, container_to_match):

    def auth_callback_same_container(req):
        try:
            _ver, acc, con, _rest = req.split_path(3, 4, True)
        except ValueError:
            return None
^^^^^^^^^^^^^^^^^^  is it relly safe to auth a request when split.path fails??

        if acc == account_to_match and con == container_to_match:
            return None
        else:
            return HTTPUnauthorized(request=req)

    return auth_callback_same_container</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/69" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-05T21:50:11.042502+00:00" title="2015-08-05 21:50:11 UTC">on 2015-08-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/69"> #69</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4439955/+files/clays-56-with-fixes.diff">clays-56-with-fixes.diff</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4439955">Edit</a>
        (27.1 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>I think the patch in comment #56 is broken. Here&#x27;s how I tested this stuff:</p>
<p>Test Step 1: saio$ resetswift; startmain</p>
<p>Test Step 2: client$ swift upload victim setup.py setup.cfg AUTHORS   # from Swift source tree; any old crap will do</p>
<p>Test Step 3: client$ swift post hacked -m &quot;temp-url-<wbr />key:conkey&quot;</p>
<p>Test Step 4: curl &quot;<a rel="nofollow" href="http://192.168.22.144:8080">http://<wbr />192.168.<wbr />22.144:<wbr />8080</a>`swift tempurl GET 86400 /v1/AUTH_<wbr />test/hacked/<wbr />evil-manifest conkey`&quot;  # should 4xx</p>
<p>Test Step 5: client$ swift post -m &quot;temp-url-<wbr />key:acckey&quot;</p>
<p>Test Step 6: curl &quot;<a rel="nofollow" href="http://192.168.22.144:8080">http://<wbr />192.168.<wbr />22.144:<wbr />8080</a>`swift tempurl GET 86400 /v1/AUTH_<wbr />test/hacked/<wbr />evil-manifest acckey`&quot;  # should 200</p>
<p>Base commit: 5b24b22</p>
<p>With no patch, Test Step 4 received a 200 response with a body that was the concatenation of setup.cfg and setup.py.</p>
<p>With the patch from comment #56 applied, Test Step 4 received a 200 response with a body that was the concatenation of setup.cfg and setup.py. I was expecting a 400-series error.</p>
<p>Upon inspection, the patch from comment #56 was missing the code to copy the environment before removing swift.authorize (swift.<wbr />proxy.server.<wbr />Application.<wbr />handle_<wbr />request)<wbr />. If I add those two lines back in, then Test Step 4 gets a 401, as expected.</p>
<p>The attached patch here is Clay&#x27;s patch from comment #56, plus the aforementioned two lines of code. I still get unit test failures with this, though.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">I think the patch in comment #56 is broken. Here's how I tested this stuff:

Test Step 1: saio$ resetswift; startmain

Test Step 2: client$ swift upload victim setup.py setup.cfg AUTHORS   # from Swift source tree; any old crap will do

Test Step 3: client$ swift post hacked -m "temp-url-key:conkey"

Test Step 4: curl "http://192.168.22.144:8080`swift tempurl GET 86400 /v1/AUTH_test/hacked/evil-manifest conkey`"  # should 4xx

Test Step 5: client$ swift post -m "temp-url-key:acckey"

Test Step 6: curl "http://192.168.22.144:8080`swift tempurl GET 86400 /v1/AUTH_test/hacked/evil-manifest acckey`"  # should 200


Base commit: 5b24b22

With no patch, Test Step 4 received a 200 response with a body that was the concatenation of setup.cfg and setup.py.

With the patch from comment #56 applied, Test Step 4 received a 200 response with a body that was the concatenation of setup.cfg and setup.py. I was expecting a 400-series error.

Upon inspection, the patch from comment #56 was missing the code to copy the environment before removing swift.authorize (swift.proxy.server.Application.handle_request). If I add those two lines back in, then Test Step 4 gets a 401, as expected.

The attached patch here is Clay's patch from comment #56, plus the aforementioned two lines of code. I still get unit test failures with this, though.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/70" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-05T23:33:54.541584+00:00" title="2015-08-05 23:33:54 UTC">on 2015-08-05</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/70"> #70</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Hrm... maybe having two bugs open wasn&#x27;t such a great idea.  Also maybe this is why smaller changes are better?</p>
<p>So what we *need* is to be able to take some Kilo+ sha, and Al&#x27;s latest patch from lp <a href="/bugs/1453948" class="bug-link">bug #1453948</a> + some patch here that closes all of our issues (#1 PUT tempurl can not create a DLO; #2 cross container DLO 401&#x27;s with container tempurl).</p>
<p>I found</p>
<p>+                    req = Request(<wbr />req.environ.<wbr />copy())</p>
<p>in patch number #56 - but it seems like everyone else is building on the hack in #57 that doesn&#x27;t do sam&#x27;s info_cache thing (i.e. #60, #67 and #69) and instead just calls that _set_info method again - but was mysteriously missing the environ.copy() line in my original version (i blame a git fail on my part)?</p>
<p>So, if everyone is cool with that general idea of patch #57 - i&#x27;ll try to wade through the follow on patches and post here with what we need.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Hrm... maybe having two bugs open wasn't such a great idea.  Also maybe this is why smaller changes are better?

So what we *need* is to be able to take some Kilo+ sha, and Al's latest patch from lp bug #1453948 + some patch here that closes all of our issues (#1 PUT tempurl can not create a DLO; #2 cross container DLO 401's with container tempurl).

I found

+                    req = Request(req.environ.copy())

in patch number #56 - but it seems like everyone else is building on the hack in #57 that doesn't do sam's info_cache thing (i.e. #60, #67 and #69) and instead just calls that _set_info method again - but was mysteriously missing the environ.copy() line in my original version (i blame a git fail on my part)?

So, if everyone is cool with that general idea of patch #57 - i'll try to wade through the follow on patches and post here with what we need.

</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/71" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-06T00:35:20.798352+00:00" title="2015-08-06 00:35:20 UTC">on 2015-08-06</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/71"> #71</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>I like the infocache thing. Really, the part I like about it is the part where the proxy doesn&#x27;t mutate the passed-in environment, but takes a copy and mangles *that* instead.</p>
<p>Any time we have a middleware that makes more than one request (DLO, SLO, bulk, versions, symlinks...), we end up with these crappy bugs where the middleware makes a request using some environment, the proxy or a later middleware scribbles all over it, and then our middleware reuses that environment and things blow up. That&#x27;s what happened here, right?</p>
<p>A) tempurl put swift.authorize in the environment and called the rest of the chain</p>
<p>B) the proxy called swift.authorize and then mutated the environment to remove it, which is okay because nobody else is ever going to re-use this environment for anything ever again /s</p>
<p>C) dlo saw the response was for a manifest and so it made a new environment based on the current environment to go fetch segments</p>
<p>D) the proxy got another request without swift.authorize in it (since the proxy wiped it out in step B) and let the request proceed</p>
<p>E) lots of people spent time typing up 70+ comments on this Launchpad bug</p>
<p>We can either work around this bit of request mutation to fix this specific bug and leave a land mine for ourselves to step on next time, or we can get rid of it now. I&#x27;d rather get rid of it now.</p>
<p>Moving all that cache into swift.infocache also makes it easier to eliminate future request-environment mutations as we find them. It lets you make a shallow copy of the environment to mutate, thus saving your caller from you, while still ensuring we don&#x27;t get the same info from memcache or account/container servers twice. It&#x27;s taking all that hazardous mutable stuff and sticking it in its own little box, separate from the rest of our unchanging request state.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">I like the infocache thing. Really, the part I like about it is the part where the proxy doesn't mutate the passed-in environment, but takes a copy and mangles *that* instead.

Any time we have a middleware that makes more than one request (DLO, SLO, bulk, versions, symlinks...), we end up with these crappy bugs where the middleware makes a request using some environment, the proxy or a later middleware scribbles all over it, and then our middleware reuses that environment and things blow up. That's what happened here, right?


A) tempurl put swift.authorize in the environment and called the rest of the chain

B) the proxy called swift.authorize and then mutated the environment to remove it, which is okay because nobody else is ever going to re-use this environment for anything ever again /s

C) dlo saw the response was for a manifest and so it made a new environment based on the current environment to go fetch segments

D) the proxy got another request without swift.authorize in it (since the proxy wiped it out in step B) and let the request proceed

E) lots of people spent time typing up 70+ comments on this Launchpad bug


We can either work around this bit of request mutation to fix this specific bug and leave a land mine for ourselves to step on next time, or we can get rid of it now. I'd rather get rid of it now.

Moving all that cache into swift.infocache also makes it easier to eliminate future request-environment mutations as we find them. It lets you make a shallow copy of the environment to mutate, thus saving your caller from you, while still ensuring we don't get the same info from memcache or account/container servers twice. It's taking all that hazardous mutable stuff and sticking it in its own little box, separate from the rest of our unchanging request state.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/72" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-06T00:39:26.194123+00:00" title="2015-08-06 00:39:26 UTC">on 2015-08-06</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/72"> #72</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4439989/+files/tempurl-torgomatic-patch3.diff">tempurl-torgomatic-patch3.diff</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4439989">Edit</a>
        (87.9 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>This is a rebase of the patch from comment #42. I believe it still solves the problem of DLO GET or HEAD requests being able to escape their container, and I believe it still does not address the creation of DLO manifests via tempurl PUT (that&#x27;s a separate LP bug, though if people want to merge them, fine by me).</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">This is a rebase of the patch from comment #42. I believe it still solves the problem of DLO GET or HEAD requests being able to escape their container, and I believe it still does not address the creation of DLO manifests via tempurl PUT (that's a separate LP bug, though if people want to merge them, fine by me).</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/73" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-06T01:21:12.142022+00:00" title="2015-08-06 01:21:12 UTC">on 2015-08-06</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/73"> #73</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>-1</p>
<p>So there was a number of improvements to the tests from patch #42 to #56 - which seems lost in #72.  Plus #72 is *not* based on the already approved and back-ported patch in lp <a href="/bugs/1453948" class="bug-link">bug #1453948</a>.</p>
<p>I discussed this with Sam and he seems sufficiently agitated that he&#x27;s just going to fix everything.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">-1

So there was a number of improvements to the tests from patch #42 to #56 - which seems lost in #72.  Plus #72 is *not* based on the already approved and back-ported patch in lp bug #1453948.

I discussed this with Sam and he seems sufficiently agitated that he's just going to fix everything.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/74" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~alistair-coles" class="sprite person">Alistair Coles (alistair-coles)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-06T14:01:09.260551+00:00" title="2015-08-06 14:01:09 UTC">on 2015-08-06</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/74"> #74</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4440490/+files/container-tempurl.patch">container-tempurl.patch</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4440490">Edit</a>
        (30.7 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>I had a stab at an alternative approach to avoid making any changes to the info caching (not saying they aren&#x27;t good changes to make, but this avoids making them in this security bug fix). I&#x27;m not against the info cache/env copying stuff, I was just trying to find a way to a smaller diff to fix the current bug!</p>
<p>In the attached patch I have tempurl instruct the proxy server to NOT delete &#x27;swift.authorize&#x27;. Then have the same scoped callbacks as proposed on previous patches on this thread. That removes the need to copy the request env before popping swift.authorize, cos it never gets popped with tempurl.</p>
<p>The attached patch is based on Clay&#x27;s patch at #15 on <a rel="nofollow" href="https://bugs.launchpad.net/swift/+bug/1453948">https:/<wbr />/bugs.launchpad<wbr />.net/swift/<wbr />+bug/1453948</a>, so apply that one first, then this one and you should have both bugs fixed.</p>
<p>(Another approach which works is to have the tempurl authorize callbacks return not-None on first call (from proxy) then behave normally for subsequent calls. That works because tempurl only targets objects and all object controller methods implement delay_denial. But I ditched that approach as it depends on the delay_denial properties not changing below tempurl.)</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">I had a stab at an alternative approach to avoid making any changes to the info caching (not saying they aren't good changes to make, but this avoids making them in this security bug fix). I'm not against the info cache/env copying stuff, I was just trying to find a way to a smaller diff to fix the current bug!

In the attached patch I have tempurl instruct the proxy server to NOT delete 'swift.authorize'. Then have the same scoped callbacks as proposed on previous patches on this thread. That removes the need to copy the request env before popping swift.authorize, cos it never gets popped with tempurl.

The attached patch is based on Clay's patch at #15 on https://bugs.launchpad.net/swift/+bug/1453948, so apply that one first, then this one and you should have both bugs fixed.

(Another approach which works is to have the tempurl authorize callbacks return not-None on first call (from proxy) then behave normally for subsequent calls. That works because tempurl only targets objects and all object controller methods implement delay_denial. But I ditched that approach as it depends on the delay_denial properties not changing below tempurl.)</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/75" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-07T00:05:24.677818+00:00" title="2015-08-07 00:05:24 UTC">on 2015-08-07</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/75"> #75</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4440773/+files/tempurl-torgomatic-patch4.diff">tempurl-torgomatic-patch4.diff</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4440773">Edit</a>
        (34.7 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Here&#x27;s Clay&#x27;s patch from #57 but with the unit tests passing.</p>
<p>There were a few things I had to do to make that work: first, make_pre_<wbr />authed_<wbr />env() had to start setting swift_owner = True in the environment it created. Otherwise, the container controller would unhelpfully filter out the ACLs from a GET or HEAD response, and in the case where the environment&#x27;s identity was not preserved, get_container_<wbr />info() wouldn&#x27;t have the ACLs in it.</p>
<p>Second, I had to hack around account GET and HEAD requests when (a) account autocreate is on, and (b) the account does not actually exist. In this case, the proxy caches a 404 result down in GETorHEAD_base. However, it then returns a 200 or 204 with an empty listing. Thus, if environment identity is not preserved, get_info() sees a 2xx response and caches it, which breaks a bunch of tests. I hacked around it with some made-up header; better suggestions welcome.</p>
<p>Third and ugliest, I commented out one unit test (last line of test.unit.<wbr />proxy.server.<wbr />TestContainerCo<wbr />ntroller.<wbr />test_HEAD_<wbr />GET). That test was asserting stuff about the environment caching behavior when the account doesn&#x27;t exist and account autocreate is on. I wasn&#x27;t sure how to keep that working *and* keep the other account-autocreate tests working too, and it really doesn&#x27;t seem too important what we cache in this particular case. Again, suggestions welcome.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Here's Clay's patch from #57 but with the unit tests passing.

There were a few things I had to do to make that work: first, make_pre_authed_env() had to start setting swift_owner = True in the environment it created. Otherwise, the container controller would unhelpfully filter out the ACLs from a GET or HEAD response, and in the case where the environment's identity was not preserved, get_container_info() wouldn't have the ACLs in it.

Second, I had to hack around account GET and HEAD requests when (a) account autocreate is on, and (b) the account does not actually exist. In this case, the proxy caches a 404 result down in GETorHEAD_base. However, it then returns a 200 or 204 with an empty listing. Thus, if environment identity is not preserved, get_info() sees a 2xx response and caches it, which breaks a bunch of tests. I hacked around it with some made-up header; better suggestions welcome.

Third and ugliest, I commented out one unit test (last line of test.unit.proxy.server.TestContainerController.test_HEAD_GET). That test was asserting stuff about the environment caching behavior when the account doesn't exist and account autocreate is on. I wasn't sure how to keep that working *and* keep the other account-autocreate tests working too, and it really doesn't seem too important what we cache in this particular case. Again, suggestions welcome.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/76" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~cschwede" class="sprite person">Christian Schwede (cschwede)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-07T14:19:01.809304+00:00" title="2015-08-07 14:19:01 UTC">on 2015-08-07</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/76"> #76</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Both patches (Sams &amp; Alistairs, #75 and #74) work for me and the outcome is as expected.</p>
<p>I currently tend to favor Sams patch slightly, but basically I&#x27;m fine with both - thus 2 times +2.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Both patches (Sams &amp; Alistairs, #75 and #74) work for me and the outcome is as expected.

I currently tend to favor Sams patch slightly, but basically I'm fine with both - thus 2 times +2.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/77" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-10T15:11:10.085183+00:00" title="2015-08-10 15:11:10 UTC">on 2015-08-10</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/77"> #77</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Alright, here&#x27;s another take on it. The problem is the proxy takes swift.authorize out of the environment. We had a patch to make the environment immutable, but that was a huge change. Then we had one where middlewares could tell the proxy to leave authorize alone, but that&#x27;s pretty hacky. This one is even simpler: the proxy puts swift.authorize back. Stuff in the proxy that relies on swift.authorize being gone still see it as gone, but middlewares don&#x27;t have their environment changed up when they make subrequests.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Alright, here's another take on it. The problem is the proxy takes swift.authorize out of the environment. We had a patch to make the environment immutable, but that was a huge change. Then we had one where middlewares could tell the proxy to leave authorize alone, but that's pretty hacky. This one is even simpler: the proxy puts swift.authorize back. Stuff in the proxy that relies on swift.authorize being gone still see it as gone, but middlewares don't have their environment changed up when they make subrequests.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/78" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-10T15:11:49.213494+00:00" title="2015-08-10 15:11:49 UTC">on 2015-08-10</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/78"> #78</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4442299/+files/tempurl-torgomatic-patch5.diff">tempurl-torgomatic-patch5.diff</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4442299">Edit</a>
        (28.3 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Let&#x27;s try actually adding the patch, hey?</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Let's try actually adding the patch, hey?</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/79" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-10T15:11:54.939122+00:00" title="2015-08-10 15:11:54 UTC">on 2015-08-10</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/79"> #79</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4442300/+files/tempurl-torgomatic-patch5.diff">tempurl-torgomatic-patch5.diff</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4442300">Edit</a>
        (28.3 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Let&#x27;s try actually adding the patch, hey?</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Let's try actually adding the patch, hey?</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/80" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-10T15:12:46.748066+00:00" title="2015-08-10 15:12:46 UTC">on 2015-08-10</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/80"> #80</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>And here we have the legendary DOUBLE DOUBLE POST POST! Thank you, Launchpad, for the opportunity to see this beast in the wild.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">And here we have the legendary DOUBLE DOUBLE POST POST! Thank you, Launchpad, for the opportunity to see this beast in the wild.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/81" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-10T16:30:33.396595+00:00" title="2015-08-10 16:30:33 UTC">on 2015-08-10</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/81"> #81</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4442310/+files/tempurl-torgomatic-patch6.diff">tempurl-torgomatic-patch6.diff</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4442310">Edit</a>
        (31.6 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Here&#x27;s a properly-formatted one. It&#x27;s the same as the one in #79 but with a real commit comment.</p>
<p>I stuck everybody who posted any patch here in the Co-Authored-By lines. With this crapass non-threaded discussion forum, I can&#x27;t keep track of what happened where. (Come on; *email* has threading and Launchpad doesn&#x27;t? Talk about stone knives and bearskins.)</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Here's a properly-formatted one. It's the same as the one in #79 but with a real commit comment.

I stuck everybody who posted any patch here in the Co-Authored-By lines. With this crapass non-threaded discussion forum, I can't keep track of what happened where. (Come on; *email* has threading and Launchpad doesn't? Talk about stone knives and bearskins.)</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/82" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~torgomatic" class="sprite person">Samuel Merritt (torgomatic)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-10T22:09:38.787602+00:00" title="2015-08-10 22:09:38 UTC">on 2015-08-10</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/82"> #82</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4442462/+files/tempurl-torgomatic-patch7.diff">tempurl-torgomatic-patch7.diff</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4442462">Edit</a>
        (29.4 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>This is patch #81 with extraneous stuff removed and Alistair&#x27;s fixes to the functional tests.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">This is patch #81 with extraneous stuff removed and Alistair's fixes to the functional tests.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/83" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~alistair-coles" class="sprite person">Alistair Coles (alistair-coles)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-11T13:07:07.230304+00:00" title="2015-08-11 13:07:07 UTC">on 2015-08-11</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/83"> #83</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4442888/+files/tempurl-acoles-patch8.diff">tempurl-acoles-patch8.diff</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4442888">Edit</a>
        (29.2 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Sam&#x27;s patch at #82 LGTM</p>
<p>Sam, Clay and 1 did discuss two possible changes:<br />
1. in proxy.server.py the &quot;authorized&quot; boolean is redundant, could just test the value of &quot;old_authorize&quot;.<br />
2. in tempurl.py, have the new scoped authorize callback methods raise HTTPUnauthorized if the split_path calls ever raise a ValueError (at the moment None is returned which means a request would be auth&#x27;d. I can&#x27;t think of when a request would have no object part and it would matter, but paranoia suggests err&#x27;ing on the side of denial if split_path fails).</p>
<p>I made those two changes in attached patch which applies to master using git am. On my SAIO this passes unit, pep8, functional and probe tests.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Sam's patch at #82 LGTM

Sam, Clay and 1 did discuss two possible changes:
1. in proxy.server.py the "authorized" boolean is redundant, could just test the value of "old_authorize".
2. in tempurl.py, have the new scoped authorize callback methods raise HTTPUnauthorized if the split_path calls ever raise a ValueError (at the moment None is returned which means a request would be auth'd. I can't think of when a request would have no object part and it would matter, but paranoia suggests err'ing on the side of denial if split_path fails).

I made those two changes in attached patch which applies to master using git am. On my SAIO this passes unit, pep8, functional and probe tests.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/84" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-11T13:37:37.898431+00:00" title="2015-08-11 13:37:37 UTC">on 2015-08-11</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/84"> #84</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>@acoles patch doesn&#x27;t apply cleanly with `git am` because it was formatted with `git show`</p>
<p>So I started with a fresh merge from master yesterday:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;git checkout master</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;0279411 Merge &quot;versioned writes middleware&quot;</p>
<p>Then I popped off to another branch to add the commits</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;git checkout -b fix-container-<wbr />tempurl</p>
<p>Then I applied the fix from lp <a href="/bugs/1453948" class="bug-link">bug #1453948</a> comment #15</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;git am &lt; dlo-tempurl.patch</p>
<p>Then I applied the fix in comment #82 (seems to require 3-way)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;git am -3 &lt; container-<wbr />tempurl.<wbr />patch</p>
<p>Those changes taken together works well for me.  I understand our new functional tests we should be validating the behaviors we&#x27;re tracking.  I also agree with @acoles suggested cleanups in comment #83 - but we&#x27;ll need to reformat that patch.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">@acoles patch doesn't apply cleanly with `git am` because it was formatted with `git show`

So I started with a fresh merge from master yesterday:

    git checkout master

    0279411 Merge "versioned writes middleware"

Then I popped off to another branch to add the commits

    git checkout -b fix-container-tempurl

Then I applied the fix from lp bug #1453948 comment #15

    git am &lt; dlo-tempurl.patch

Then I applied the fix in comment #82 (seems to require 3-way)

    git am -3 &lt; container-tempurl.patch

Those changes taken together works well for me.  I understand our new functional tests we should be validating the behaviors we're tracking.  I also agree with @acoles suggested cleanups in comment #83 - but we'll need to reformat that patch.
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/85" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~alistair-coles" class="sprite person">Alistair Coles (alistair-coles)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-11T14:18:02.177578+00:00" title="2015-08-11 14:18:02 UTC">on 2015-08-11</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/85"> #85</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4442926/+files/tempurl-acoles-patch9.diff">tempurl-acoles-patch9.diff</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4442926">Edit</a>
        (29.4 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Apologies, patch at #83 does not work with git am. See the diff attached here generated using git format-patch.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Apologies, patch at #83 does not work with git am. See the diff attached here generated using git format-patch.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/86" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~alistair-coles" class="sprite person">Alistair Coles (alistair-coles)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-12T12:47:19.508613+00:00" title="2015-08-12 12:47:19 UTC">on 2015-08-12</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/86"> #86</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Clays #84 method to apply both patches  WFM using patch at #85- thanks Clay for figuring that out:</p>
<p>anc@u128:<wbr />~/0dev/<wbr />swift (master)$ git log --pretty=oneline -n 1<br />
810af1b73f309bd<wbr />055b52fb63795cc<wbr />5372eee3c7 Merge &quot;Fix shebang of commands&quot;<br />
anc@u128:<wbr />~/0dev/<wbr />swift (master)$ git checkout -b fix-container-<wbr />tempurl<br />
Switched to a new branch &#x27;fix-container-<wbr />tempurl&#x27;<br />
anc@u128:<wbr />~/0dev/<wbr />swift (fix-container-<wbr />tempurl)<wbr />$ git am ../patches/<wbr />tempurl.<wbr />patch<br />
Applying: Disallow unsafe tempurl operations to point to unauthorized data<br />
anc@u128:<wbr />~/0dev/<wbr />swift (fix-container-<wbr />tempurl)<wbr />$ git am -3 ../patches/<wbr />tempurl-<wbr />acoles-<wbr />patch9.<wbr />diff<br />
Applying: Better scoping for tempurls, especially container tempurls<br />
Using index info to reconstruct a base tree...<br />
M	swift/common/<wbr />middleware/<wbr />tempurl.<wbr />py<br />
M	test/functional<wbr />/tests.<wbr />py<br />
M	test/unit/<wbr />common/<wbr />middleware/<wbr />test_tempurl.<wbr />py<br />
Falling back to patching base and 3-way merge...<br />
Auto-merging test/unit/<wbr />common/<wbr />middleware/<wbr />test_tempurl.<wbr />py<br />
Auto-merging test/functional<wbr />/tests.<wbr />py<br />
Auto-merging swift/common/<wbr />middleware/<wbr />tempurl.<wbr />py<br />
anc@u128:<wbr />~/0dev/<wbr />swift (fix-container-<wbr />tempurl)<wbr />$ git log --pretty=oneline -n 3<br />
6bdd31aab0098b3<wbr />ecf756667110fc7<wbr />439fca8f7f Better scoping for tempurls, especially container tempurls<br />
06bc45e8e76b138<wbr />4500d67d7953d19<wbr />fcedcc1967 Disallow unsafe tempurl operations to point to unauthorized data<br />
810af1b73f309bd<wbr />055b52fb63795cc<wbr />5372eee3c7 Merge &quot;Fix shebang of commands&quot;</p>
<p>The result passes tox -e py27,pep8 and functional tests on my saio (with keystoneauth).</p>
<p>I&#x27;m +2 on patch at #85.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Clays #84 method to apply both patches  WFM using patch at #85- thanks Clay for figuring that out:

anc@u128:~/0dev/swift (master)$ git log --pretty=oneline -n 1
810af1b73f309bd055b52fb63795cc5372eee3c7 Merge "Fix shebang of commands"
anc@u128:~/0dev/swift (master)$ git checkout -b fix-container-tempurl
Switched to a new branch 'fix-container-tempurl'
anc@u128:~/0dev/swift (fix-container-tempurl)$ git am ../patches/tempurl.patch
Applying: Disallow unsafe tempurl operations to point to unauthorized data
anc@u128:~/0dev/swift (fix-container-tempurl)$ git am -3 ../patches/tempurl-acoles-patch9.diff
Applying: Better scoping for tempurls, especially container tempurls
Using index info to reconstruct a base tree...
M	swift/common/middleware/tempurl.py
M	test/functional/tests.py
M	test/unit/common/middleware/test_tempurl.py
Falling back to patching base and 3-way merge...
Auto-merging test/unit/common/middleware/test_tempurl.py
Auto-merging test/functional/tests.py
Auto-merging swift/common/middleware/tempurl.py
anc@u128:~/0dev/swift (fix-container-tempurl)$ git log --pretty=oneline -n 3
6bdd31aab0098b3ecf756667110fc7439fca8f7f Better scoping for tempurls, especially container tempurls
06bc45e8e76b1384500d67d7953d19fcedcc1967 Disallow unsafe tempurl operations to point to unauthorized data
810af1b73f309bd055b52fb63795cc5372eee3c7 Merge "Fix shebang of commands"

The result passes tox -e py27,pep8 and functional tests on my saio (with keystoneauth).

I'm +2 on patch at #85.
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/87" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-14T18:31:21.429085+00:00" title="2015-08-14 18:31:21 UTC">on 2015-08-14</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/87"> #87</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>I&#x27;m +2 on patch @ #85</p>
<p>However, I&#x27;ll admit that the commit messages makes things seem a little more dire than they would be after the tempurl-<wbr />can-not-<wbr />create-<wbr />dlo fix from lp <a href="/bugs/1453948" class="bug-link">bug #1453948</a> is released.  But since neither for them are released I think the wording is correct for this patch.</p>
<p>... now, before you go thinking &quot;maybe we don&#x27;t need scoped tempurls if you can&#x27;t make *LO&#x27;s with tempurls?&quot; - you *can* make *LO&#x27;s with write-acl&#x27;s - so it&#x27;s a more complicated attack, but if we only did the other change, a write-acl and container-tempurl would be just as vulnerable to the DLO probing as described in the commit.  Regardless of how the &quot;object that points to other data&quot; is created - scoping the ability of a container tempurl to grant read access only to the container that created them is critically important to meet our expected risk model.</p>
<p>After this is public we need to do doc change to highlight that container-tempurl&#x27;s (unlike account-tempurls) don&#x27;t work with cross-container manifests (again, regardless of how the cross-container manifests were created)</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">I'm +2 on patch @ #85

However, I'll admit that the commit messages makes things seem a little more dire than they would be after the tempurl-can-not-create-dlo fix from lp bug #1453948 is released.  But since neither for them are released I think the wording is correct for this patch.

... now, before you go thinking "maybe we don't need scoped tempurls if you can't make *LO's with tempurls?" - you *can* make *LO's with write-acl's - so it's a more complicated attack, but if we only did the other change, a write-acl and container-tempurl would be just as vulnerable to the DLO probing as described in the commit.  Regardless of how the "object that points to other data" is created - scoping the ability of a container tempurl to grant read access only to the container that created them is critically important to meet our expected risk model.

After this is public we need to do doc change to highlight that container-tempurl's (unlike account-tempurls) don't work with cross-container manifests (again, regardless of how the cross-container manifests were created)</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/88" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~tristan-cacqueray" class="sprite person">Tristan Cacqueray (tristan-cacqueray)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-17T14:25:22.024230+00:00" title="2015-08-17 14:25:22 UTC">on 2015-08-17</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/88"> #88</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Backports of patch #85 are needed for stable/kilo and stable/juno (using patches from <a href="/bugs/1453948" class="bug-link">bug 1453948</a>, respectively from comment #17 and #16)</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Backports of patch #85 are needed for stable/kilo and stable/juno (using patches from bug 1453948, respectively from comment #17 and #16)</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/89" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~notmyname" class="sprite person">John Dickinson (notmyname)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-18T06:20:22.975788+00:00" title="2015-08-18 06:20:22 UTC">on 2015-08-18</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/89"> #89</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>This is not needed for stable/juno. The feature (container-level tempurls) was only released in kilo.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">This is not needed for stable/juno. The feature (container-level tempurls) was only released in kilo.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/90" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~notmyname" class="sprite person">John Dickinson (notmyname)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-18T06:26:07.988764+00:00" title="2015-08-18 06:26:07 UTC">on 2015-08-18</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/90"> #90</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4446467/+files/kilo-tempurl-bp-combined.patch">kilo-tempurl-bp-combined.patch</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4446467">Edit</a>
        (37.2 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Attached is a backport of the patch in #85 to kilo. It includes the approved patch for <a rel="nofollow" href="https://bugs.launchpad.net/swift/+bug/1453948">https:/<wbr />/bugs.launchpad<wbr />.net/swift/<wbr />+bug/1453948</a> in the patch file (since it should be applied on top of that one).</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Attached is a backport of the patch in #85 to kilo. It includes the approved patch for https://bugs.launchpad.net/swift/+bug/1453948 in the patch file (since it should be applied on top of that one).</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/91" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~alistair-coles" class="sprite person">Alistair Coles (alistair-coles)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-19T12:10:00.667881+00:00" title="2015-08-19 12:10:00 UTC">on 2015-08-19</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/91"> #91</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>+2 for backport at #90</p>
<p>applied to stale/kilo, passes func tests with keystone and tempauth, tox -e pep8,py27 and probe tests</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">+2 for backport at #90

applied to stale/kilo, passes func tests with keystone and tempauth, tox -e pep8,py27 and probe tests</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/92" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~tristan-cacqueray" class="sprite person">Tristan Cacqueray (tristan-cacqueray)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-19T22:16:46.770696+00:00" title="2015-08-19 22:16:46 UTC">on 2015-08-19</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/92"> #92</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Can you also attach a version of the patch in #85 with the patch for <a href="/bugs/1453948" class="bug-link">bug 1453948</a> (the one in comment #15) ?</p>
<p>Regardless of the order, they don&#x27;t apply cleanly.</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Can you also attach a version of the patch in #85 with the patch for bug 1453948 (the one in comment #15) ?

Regardless of the order, they don't apply cleanly.</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/93" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~clay-gerrard" class="sprite person">clayg (clay-gerrard)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-20T18:29:23.557369+00:00" title="2015-08-20 18:29:23 UTC">on 2015-08-20</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/93"> #93</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    <ul style="margin-bottom: 1em">
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4449743/+files/master-tempurl-combined.patch">combined dlo &amp; container tempurl fixes for master (ef8f14f)</a>
        <a class="sprite edit action-icon" href="/swift/+bug/1449212/+attachment/4449743">Edit</a>
        (37.2 KiB,
        text/plain)
      </li>
    </ul>

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Ain&#x27;t nobody trust that crazy -3 business!</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;(swift)<wbr />clayg:~<wbr />/Workspace/<wbr />vagrant-<wbr />swift-all-<wbr />in-one/<wbr />swift$ git log -n 1 --oneline<br />
&nbsp;&nbsp;&nbsp;&nbsp;ef8f14f Merge &quot;Add OpenStack release names to changelog&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;(swift)<wbr />clayg:~<wbr />/Workspace/<wbr />vagrant-<wbr />swift-all-<wbr />in-one/<wbr />swift$ git am &lt; master-<wbr />tempurl-<wbr />combined.<wbr />patch<br />
&nbsp;&nbsp;&nbsp;&nbsp;Applying: Disallow unsafe tempurl operations to point to unauthorized data<br />
&nbsp;&nbsp;&nbsp;&nbsp;Applying: Better scoping for tempurls, especially container tempurls</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Ain't nobody trust that crazy -3 business!


    (swift)clayg:~/Workspace/vagrant-swift-all-in-one/swift$ git log -n 1 --oneline
    ef8f14f Merge "Add OpenStack release names to changelog"
    (swift)clayg:~/Workspace/vagrant-swift-all-in-one/swift$ git am &lt; master-tempurl-combined.patch
    Applying: Disallow unsafe tempurl operations to point to unauthorized data
    Applying: Better scoping for tempurls, especially container tempurls
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/94" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~tristan-cacqueray" class="sprite person">Tristan Cacqueray (tristan-cacqueray)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-20T19:53:44.002949+00:00" title="2015-08-20 19:53:44 UTC">on 2015-08-20</time><span class="editable-message-last-edit-date">:
              </span>
              
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/94"> #94</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Thanks clayg,</p>
<p>the proposed disclosure date is:<br />
2015-08-26, 1500UTC</p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Thanks clayg,

the proposed disclosure date is:
2015-08-26, 1500UTC</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  <div class="boardCommentActivity">
    
      <table class="bug-activity">
  
    
      <tr>
        <td colspan="2">Changed in ossa: </td>
      </tr>
    
    <tr>
      <td style="text-align: right;">
        <b>assignee</b>:
      </td>
      <td>
        nobody &#8594; Tristan Cacqueray (tristan-cacqueray)
      </td>
    </tr>
    <tr>
      <td style="text-align: right;">
        <b>status</b>:
      </td>
      <td>
        Confirmed &#8594; Fix Committed
      </td>
    </tr>
  
</table>
    
    
  </div>
  
</div>

          

          

          

        
        
          

          
              <div class="boardComment">
  <div class="boardCommentDetails">
    
      <a href="https://launchpad.net/~tristan-cacqueray" class="sprite person">Tristan Cacqueray (tristan-cacqueray)</a>
    
    <time title="2015-08-26 15:00:59 UTC" datetime="2015-08-26T15:00:59.826983+00:00">on 2015-08-26</time>
  </div>
  <div class="boardCommentActivity">
    <table class="bug-activity">
  
    
      
    
    <tr>
      <td style="text-align: right;">
        <b>information type</b>:
      </td>
      <td>
        Private Security &#8594; Public Security
      </td>
    </tr>
  
</table>
  </div>
</div>
          

          

        
        
          

          
              <div class="boardComment">
  <div class="boardCommentDetails">
    
      <a href="https://launchpad.net/~tristan-cacqueray" class="sprite person">Tristan Cacqueray (tristan-cacqueray)</a>
    
    <time title="2015-08-26 18:36:30 UTC" datetime="2015-08-26T18:36:30.793344+00:00">on 2015-08-26</time>
  </div>
  <div class="boardCommentActivity">
    <table class="bug-activity">
  
    
      
    
    <tr>
      <td style="text-align: right;">
        <b>description</b>:
      </td>
      <td>
        updated
      </td>
    </tr>
  
</table>
  </div>
</div>
          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/95" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~hudson-openstack" class="sprite person">OpenStack Infra (hudson-openstack)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-08-27T10:28:43.194358+00:00" title="2015-08-27 10:28:43 UTC">on 2015-08-27</time><span class="editable-message-last-edit-date">:
              </span>
              <a href="/swift/+bug/1449212/comments/95">
                <strong>Fix merged to swift (master)</strong>
              </a>
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/95"> #95</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  <a href="https://bugs.launchpad.net/swift/+bug/1449212/comments/95/+download">Download full text</a> (3.3 KiB)
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Reviewed:  <a rel="nofollow" href="https://review.openstack.org/217260">https:/<wbr />/review.<wbr />openstack.<wbr />org/217260</a><br />
Committed: <a rel="nofollow" href="https://git.openstack.org/cgit/openstack/swift/commit/?id=d4409c0a046c6ce0e14e18c95efe2cd16cf120e8">https:/<wbr />/git.openstack.<wbr />org/cgit/<wbr />openstack/<wbr />swift/commit/<wbr />?id=d4409c0a046<wbr />c6ce0e14e18c95e<wbr />fe2cd16cf120e8</a><br />
Submitter: Jenkins<br />
Branch:    master</p>
<p>commit d4409c0a046c6ce<wbr />0e14e18c95efe2c<wbr />d16cf120e8<br />
Author: Samuel Merritt &lt;email address hidden&gt;<br />
Date:   Tue Aug 11 09:10:13 2015 -0500</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Better scoping for tempurls, especially container tempurls</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;It used to be that a GET of a tempurl referencing a large object would<br />
&nbsp;&nbsp;&nbsp;&nbsp;let you download that large object regardless of where its segments<br />
&nbsp;&nbsp;&nbsp;&nbsp;lived. However, this led to some violated user expectations around<br />
&nbsp;&nbsp;&nbsp;&nbsp;container tempurls.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;(Note on shorthand: all tempurls reference objects. However, &quot;account<br />
&nbsp;&nbsp;&nbsp;&nbsp;tempurl&quot; and &quot;container tempurl&quot; are shorthand meaning tempurls<br />
&nbsp;&nbsp;&nbsp;&nbsp;generated using a key on the account or container, respectively.)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Let&#x27;s say an application is given tempurl keys to a particular<br />
&nbsp;&nbsp;&nbsp;&nbsp;container, and it does all its work therein using those keys. The user<br />
&nbsp;&nbsp;&nbsp;&nbsp;expects that, if the application is compromised, then the attacker<br />
&nbsp;&nbsp;&nbsp;&nbsp;only gains access to the &quot;compromised-<wbr />container&quot;<wbr />. However, with the old<br />
&nbsp;&nbsp;&nbsp;&nbsp;behavior, the attacker could read data from *any* container like so:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;1) Choose a &quot;victim-container&quot; to download</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;2) Create PUT and GET tempurl for any object name within the<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<wbr />&quot;compromised-<wbr />container&quot;<wbr />. The object doesn&#x27;t need to exist;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;we&#x27;ll create it.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;3) Using the PUT tempurl, upload a DLO manifest with<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<wbr />&quot;X-Object-<wbr />Manifest: /victim-container/&quot;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;4) Using the GET tempurl, download the object created in step 3. The<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result will be the concatenation of all objects in the<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<wbr />&quot;victim-<wbr />container&quot;<wbr />.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Step 3 need not be for all objects in the &quot;victim-container&quot;; for<br />
&nbsp;&nbsp;&nbsp;&nbsp;example, a value &quot;X-Object-Manifest: /victim-<wbr />container/<wbr />abc&quot; would only<br />
&nbsp;&nbsp;&nbsp;&nbsp;be the concatenation of all objects whose names begin with &quot;abc&quot;. By<br />
&nbsp;&nbsp;&nbsp;&nbsp;probing for object names in this way, individual objects may be found<br />
&nbsp;&nbsp;&nbsp;&nbsp;and extracted.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;A similar bug would exist for manifests referencing other accounts<br />
&nbsp;&nbsp;&nbsp;&nbsp;except that neither the X-Object-Manifest (DLO) nor the JSON manifest<br />
&nbsp;&nbsp;&nbsp;&nbsp;document (SLO) have a way of specifying a different account.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;This change makes it so that a container tempurl only grants access to<br />
&nbsp;&nbsp;&nbsp;&nbsp;objects within its container, *including* large-object segments. This<br />
&nbsp;&nbsp;&nbsp;&nbsp;breaks backward compatibility for container tempurls that may have<br />
&nbsp;&nbsp;&nbsp;&nbsp;pointed to cross container *LO&#x27;s, but (a) there are security<br />
&nbsp;&nbsp;&nbsp;&nbsp;implications, and (b) container tempurls are a relatively new feature.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;This works by having the tempurl middleware install an authorization<br />
&nbsp;&nbsp;&nbsp;&nbsp;callback (&#x27;swift.authorize&#x27; in the WSGI environment) that limits the<br />
&nbsp;&nbsp;&nbsp;&nbsp;scope of any requests to the account or container from which the key<br />
&nbsp;&nbsp;&nbsp;&nbsp;came.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;This requires swift.authorize to persist for both the manifest request<br />
&nbsp;&nbsp;&nbsp;&nbsp;and all segment requests; this is done by having the proxy server<br />
&nbsp;&nbsp;&nbsp;&nbsp;restore it to the WSGI environment prior to returning from __call__.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;[CVE-2015-5223]</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Co-Authored-By: Clay Gerrard &lt;email address hidden&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;Co-Authored-By: Alistair Coles &lt;alistair.<wbr />coles@h.<wbr />..</p></div>
    
    <p>
      <a href="/swift/+bug/1449212/comments/95">Read more...</a>
    </p>
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Reviewed:  https://review.openstack.org/217260
Committed: https://git.openstack.org/cgit/openstack/swift/commit/?id=d4409c0a046c6ce0e14e18c95efe2cd16cf120e8
Submitter: Jenkins
Branch:    master

commit d4409c0a046c6ce0e14e18c95efe2cd16cf120e8
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Tue Aug 11 09:10:13 2015 -0500

    Better scoping for tempurls, especially container tempurls
    
    It used to be that a GET of a tempurl referencing a large object would
    let you download that large object regardless of where its segments
    lived. However, this led to some violated user expectations around
    container tempurls.
    
    (Note on shorthand: all tempurls reference objects. However, "account
    tempurl" and "container tempurl" are shorthand meaning tempurls
    generated using a key on the account or container, respectively.)
    
    Let's say an application is given tempurl keys to a particular
    container, and it does all its work therein using those keys. The user
    expects that, if the application is compromised, then the attacker
    only gains access to the "compromised-container". However, with the old
    behavior, the attacker could read data from *any* container like so:
    
    1) Choose a "victim-container" to download
    
    2) Create PUT and GET tempurl for any object name within the
       "compromised-container". The object doesn't need to exist;
       we'll create it.
    
    3) Using the PUT tempurl, upload a DLO manifest with
       "X-Object-Manifest: /victim-container/"
    
    4) Using the GET tempurl, download the object created in step 3. The
       result will be the concatenation of all objects in the
       "victim-container".
    
    Step 3 need not be for all objects in the "victim-container"; for
    example, a value "X-Object-Manifest: /victim-container/abc" would only
    be the concatenation of all objects whose names begin with "abc". By
    probing for object names in this way, individual objects may be found
    and extracted.
    
    A similar bug would exist for manifests referencing other accounts
    except that neither the X-Object-Manifest (DLO) nor the JSON manifest
    document (SLO) have a way of specifying a different account.
    
    This change makes it so that a container tempurl only grants access to
    objects within its container, *including* large-object segments. This
    breaks backward compatibility for container tempurls that may have
    pointed to cross container *LO's, but (a) there are security
    implications, and (b) container tempurls are a relatively new feature.
    
    This works by having the tempurl middleware install an authorization
    callback ('swift.authorize' in the WSGI environment) that limits the
    scope of any requests to the account or container from which the key
    came.
    
    This requires swift.authorize to persist for both the manifest request
    and all segment requests; this is done by having the proxy server
    restore it to the WSGI environment prior to returning from __call__.
    
    [CVE-2015-5223]
    
    Co-Authored-By: Clay Gerrard &lt;clayg@swiftstack.com&gt;
    Co-Authored-By: Alistair Coles &lt;alistair.coles@hp.com&gt;
    Co-Authored-By: Christian Schwede &lt;cschwede@redhat.com&gt;
    Co-Authored-By: Matthew Oliver &lt;matt@oliver.net.au&gt;
    
    Change-Id: Ie6d52f7a07e87f6fec21ed8b0ec1d84be8b2b11c
    Closes-Bug: 1449212
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  <div class="boardCommentActivity">
    
      <table class="bug-activity">
  
    
      <tr>
        <td colspan="2">Changed in swift: </td>
      </tr>
    
    <tr>
      <td style="text-align: right;">
        <b>status</b>:
      </td>
      <td>
        Confirmed &#8594; Fix Committed
      </td>
    </tr>
  
</table>
    
    
  </div>
  
</div>

          

          

          

        
        
          

          
              <div class="boardComment">
  <div class="boardCommentDetails">
    
      <a href="https://launchpad.net/~ttx" class="sprite person">Thierry Carrez (ttx)</a>
    
    <time title="2015-09-01 12:25:16 UTC" datetime="2015-09-01T12:25:16.052481+00:00">on 2015-09-01</time>
  </div>
  <div class="boardCommentActivity">
    <table class="bug-activity">
  
    
      <tr>
        <td colspan="2">Changed in swift: </td>
      </tr>
    
    <tr>
      <td style="text-align: right;">
        <b>milestone</b>:
      </td>
      <td>
        none &#8594; 2.4.0
      </td>
    </tr>
    <tr>
      <td style="text-align: right;">
        <b>status</b>:
      </td>
      <td>
        Fix Committed &#8594; Fix Released
      </td>
    </tr>
  
</table>
  </div>
</div>
          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/96" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~hudson-openstack" class="sprite person">OpenStack Infra (hudson-openstack)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-09-02T16:18:14.657200+00:00" title="2015-09-02 16:18:14 UTC">on 2015-09-02</time><span class="editable-message-last-edit-date">:
              </span>
              <a href="/swift/+bug/1449212/comments/96">
                <strong>Fix proposed to swift (feature/crypto)</strong>
              </a>
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/96"> #96</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Fix proposed to branch: feature/crypto<br />
Review: <a rel="nofollow" href="https://review.openstack.org/219775">https:/<wbr />/review.<wbr />openstack.<wbr />org/219775</a></p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Fix proposed to branch: feature/crypto
Review: https://review.openstack.org/219775</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/97" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~hudson-openstack" class="sprite person">OpenStack Infra (hudson-openstack)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-09-03T21:32:04.303496+00:00" title="2015-09-03 21:32:04 UTC">on 2015-09-03</time><span class="editable-message-last-edit-date">:
              </span>
              <a href="/swift/+bug/1449212/comments/97">
                <strong>Fix merged to swift (feature/crypto)</strong>
              </a>
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/97"> #97</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  <a href="https://bugs.launchpad.net/swift/+bug/1449212/comments/97/+download">Download full text</a> (43.3 KiB)
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Reviewed:  <a rel="nofollow" href="https://review.openstack.org/219775">https:/<wbr />/review.<wbr />openstack.<wbr />org/219775</a><br />
Committed: <a rel="nofollow" href="https://git.openstack.org/cgit/openstack/swift/commit/?id=257e468e9bfd1088040419ad408106ac3c77b531">https:/<wbr />/git.openstack.<wbr />org/cgit/<wbr />openstack/<wbr />swift/commit/<wbr />?id=257e468e9bf<wbr />d1088040419ad40<wbr />8106ac3c77b531</a><br />
Submitter: Jenkins<br />
Branch:    feature/crypto</p>
<p>commit e02609c66a80484<wbr />5672413b06830b8<wbr />7395afef31<br />
Author: Samuel Merritt &lt;email address hidden&gt;<br />
Date:   Tue Sep 1 15:19:50 2015 -0700</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Preserve traceback in swift-dispersio<wbr />n-report</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Commit c690bcb fixed a bug in the dispersion report, but changed this<br />
&nbsp;&nbsp;&nbsp;&nbsp;from a bare &quot;raise&quot; to &quot;raise err&quot;, which loses the traceback. Not a<br />
&nbsp;&nbsp;&nbsp;&nbsp;big deal, but worth putting back IMO.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Change-Id: Id5b72153a4b8df<wbr />8e3faaf1fa3fb20<wbr />40e28ba85cc</p>
<p>commit d06d4ad0fd2dfe6<wbr />9da8008e7296512<wbr />64522c6c06<br />
Author: Minwoo Bae &lt;email address hidden&gt;<br />
Date:   Tue Sep 1 15:08:44 2015 -0500</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Included reference in swift.obj.diskfile to enumerate the string<br />
&nbsp;&nbsp;&nbsp;&nbsp;used for data file paths.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Change-Id: Ie22caa678bc00d<wbr />fc43fabec7efbbb<wbr />9f34490f1b5</p>
<p>commit 524c89b7eeff037<wbr />b8a6b421888771e<wbr />15f98c2da2<br />
Author: John Dickinson &lt;email address hidden&gt;<br />
Date:   Fri Aug 21 13:39:41 2015 -0700</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Updated CHANGELOG, AUTHORS, and .mailmap for 2.4.0 release.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Change-Id: Ic6301146b839c9<wbr />921bb85c4f4c1e5<wbr />85c9ab66661</p>
<p>commit 05de1305a903ee4<wbr />ce9c8c50fde53c5<wbr />52d5b90d51<br />
Author: Clay Gerrard &lt;email address hidden&gt;<br />
Date:   Thu Aug 27 18:35:09 2015 -0700</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Make ssync_sender send valid chunked requests</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;The connect method of ssync_sender tells the remote connection that it&#x27;s<br />
&nbsp;&nbsp;&nbsp;&nbsp;going to send a valid HTTP chunked request, but if the remote end needs<br />
&nbsp;&nbsp;&nbsp;&nbsp;to respond with an error of any kind sender throws HTTP right out the<br />
&nbsp;&nbsp;&nbsp;&nbsp;window, picks up his ball, and closes the socket down hard - much to the<br />
&nbsp;&nbsp;&nbsp;&nbsp;surprise of the eventlet.wsgi server who up to this point had been<br />
&nbsp;&nbsp;&nbsp;&nbsp;playing along quite nicely with this &#x27;SSYNC&#x27; nonsense assuming that<br />
&nbsp;&nbsp;&nbsp;&nbsp;everyone here is consenting mature adults.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;If you&#x27;re going to make a &quot;Transfer-Encoding: chunked&quot; request have the<br />
&nbsp;&nbsp;&nbsp;&nbsp;good decency to finish the job with a proper &#x27;0\r\n\r\n&#x27;. [1]</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;N.B. It might be possible to handle an error status during the<br />
&nbsp;&nbsp;&nbsp;&nbsp;initialize_<wbr />request phase with some sort of 100-continue support, but<br />
&nbsp;&nbsp;&nbsp;&nbsp;honestly it&#x27;s not entirely clear to me when the server isn&#x27;t going to<br />
&nbsp;&nbsp;&nbsp;&nbsp;close the connection if the client is still expected to send the body<br />
&nbsp;&nbsp;&nbsp;&nbsp;[2] - further if the error comes later during missing_check or updates<br />
&nbsp;&nbsp;&nbsp;&nbsp;we&#x27;ll for sure want to send the chunk transfer termination line before<br />
&nbsp;&nbsp;&nbsp;&nbsp;we close down the socket and this way we cover both.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;1. Really, eventlet.wsgi shouldn&#x27;t be so blasted brittle about this [3]<br />
&nbsp;&nbsp;&nbsp;&nbsp;2. <a rel="nofollow" href="https://lists.w3.org/Archives/Public/ietf-http-wg/2005AprJun/0007.html">https:/<wbr />/lists.<wbr />w3.org/<wbr />Archives/<wbr />Public/<wbr />ietf-http-<wbr />wg/2005AprJun/<wbr />0007.html</a><br />
&nbsp;&nbsp;&nbsp;&nbsp;3. <a rel="nofollow" href="https://github.com/eventlet/eventlet/commit/c3ce3eef0b4d0dfdbfb1ec0186d4bb204fb8ecd5">https:/<wbr />/github.<wbr />com/eventlet/<wbr />eventlet/<wbr />commit/<wbr />c3ce3eef0b4d0df<wbr />dbfb1ec0186d4bb<wbr />204fb8ecd5</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Closes-<a href="/bugs/1489587" class="bug-link">Bug #1489587</a><br />
&nbsp;&nbsp;&nbsp;&nbsp;Change-Id: Ic17c6c3075553f<wbr />8cf6ef6213e62a0<wbr />0282f0d01cf</p>
<p>commit 993ee4e37af1961<wbr />adba2047d5aa2eb<wbr />210e423eb3<br />
Author: nakagawamsa &lt;email address hidden&gt;<br />
Date:   Fri Aug 28 11:49:43 2015 +0900</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Remove duplicate X-Backend-<wbr />Storage-<wbr />Policy-<wbr />Index key</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;There is duplicate &#x27;X-Backend-<wbr />Storage-<wbr />Policy-<wbr />Index&#x27; dictionary key in unit.obj.<wbr />test_server.<wbr />py.<br />
&nbsp;&nbsp;&nbsp;&nbsp;One key has fixed policy index value, and another ha...</p></div>
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Reviewed:  https://review.openstack.org/219775
Committed: https://git.openstack.org/cgit/openstack/swift/commit/?id=257e468e9bfd1088040419ad408106ac3c77b531
Submitter: Jenkins
Branch:    feature/crypto

commit e02609c66a804845672413b06830b87395afef31
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Tue Sep 1 15:19:50 2015 -0700

    Preserve traceback in swift-dispersion-report
    
    Commit c690bcb fixed a bug in the dispersion report, but changed this
    from a bare "raise" to "raise err", which loses the traceback. Not a
    big deal, but worth putting back IMO.
    
    Change-Id: Id5b72153a4b8df8e3faaf1fa3fb2040e28ba85cc

commit d06d4ad0fd2dfe69da8008e729651264522c6c06
Author: Minwoo Bae &lt;minwoob@us.ibm.com&gt;
Date:   Tue Sep 1 15:08:44 2015 -0500

    Included reference in swift.obj.diskfile to enumerate the string
    used for data file paths.
    
    Change-Id: Ie22caa678bc00dfc43fabec7efbbb9f34490f1b5

commit 524c89b7eeff037b8a6b421888771e15f98c2da2
Author: John Dickinson &lt;me@not.mn&gt;
Date:   Fri Aug 21 13:39:41 2015 -0700

    Updated CHANGELOG, AUTHORS, and .mailmap for 2.4.0 release.
    
    Change-Id: Ic6301146b839c9921bb85c4f4c1e585c9ab66661

commit 05de1305a903ee4ce9c8c50fde53c552d5b90d51
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Thu Aug 27 18:35:09 2015 -0700

    Make ssync_sender send valid chunked requests
    
    The connect method of ssync_sender tells the remote connection that it's
    going to send a valid HTTP chunked request, but if the remote end needs
    to respond with an error of any kind sender throws HTTP right out the
    window, picks up his ball, and closes the socket down hard - much to the
    surprise of the eventlet.wsgi server who up to this point had been
    playing along quite nicely with this 'SSYNC' nonsense assuming that
    everyone here is consenting mature adults.
    
    If you're going to make a "Transfer-Encoding: chunked" request have the
    good decency to finish the job with a proper '0\r\n\r\n'. [1]
    
    N.B. It might be possible to handle an error status during the
    initialize_request phase with some sort of 100-continue support, but
    honestly it's not entirely clear to me when the server isn't going to
    close the connection if the client is still expected to send the body
    [2] - further if the error comes later during missing_check or updates
    we'll for sure want to send the chunk transfer termination line before
    we close down the socket and this way we cover both.
    
    1. Really, eventlet.wsgi shouldn't be so blasted brittle about this [3]
    2. https://lists.w3.org/Archives/Public/ietf-http-wg/2005AprJun/0007.html
    3. https://github.com/eventlet/eventlet/commit/c3ce3eef0b4d0dfdbfb1ec0186d4bb204fb8ecd5
    
    Closes-Bug #1489587
    Change-Id: Ic17c6c3075553f8cf6ef6213e62a00282f0d01cf

commit 993ee4e37af1961adba2047d5aa2eb210e423eb3
Author: nakagawamsa &lt;nakagawamsa@nttdata.co.jp&gt;
Date:   Fri Aug 28 11:49:43 2015 +0900

    Remove duplicate X-Backend-Storage-Policy-Index key
    
    There is duplicate 'X-Backend-Storage-Policy-Index' dictionary key in unit.obj.test_server.py.
    One key has fixed policy index value, and another has random value.
    Unittest should done with random policy index, so remove key which is set fixed value.
    
    Change-Id: Ic91fcf44d48297d0feee33c928ca682def9790a3

commit 893f30c61d280804e417790dd34ba7bc3fb4f6fc
Author: paul luse &lt;paul.e.luse@intel.com&gt;
Date:   Wed Aug 12 13:32:50 2015 -0700

    EC GET path: require fragments to be of same set
    
    And if they are not, exhaust the node iter to go get more.  The
    problem without this implementation is a simple overwrite where
    a GET follows before the handoff has put the newer obj back on
    the 'alive again' node such that the proxy gets n-1 fragments
    of the newest set and 1 of the older.
    
    This patch bucketizes the fragments by etag and if it doesn't
    have enough continues to exhaust the node iterator until it
    has a large enough matching set.
    
    Change-Id: Ib710a133ce1be278365067fd0d6610d80f1f7372
    Co-Authored-By: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
    Co-Authored-By: Alistair Coles &lt;alistair.coles@hp.com&gt;
    Closes-Bug: 1457691

commit d4409c0a046c6ce0e14e18c95efe2cd16cf120e8
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Tue Aug 11 09:10:13 2015 -0500

    Better scoping for tempurls, especially container tempurls
    
    It used to be that a GET of a tempurl referencing a large object would
    let you download that large object regardless of where its segments
    lived. However, this led to some violated user expectations around
    container tempurls.
    
    (Note on shorthand: all tempurls reference objects. However, "account
    tempurl" and "container tempurl" are shorthand meaning tempurls
    generated using a key on the account or container, respectively.)
    
    Let's say an application is given tempurl keys to a particular
    container, and it does all its work therein using those keys. The user
    expects that, if the application is compromised, then the attacker
    only gains access to the "compromised-container". However, with the old
    behavior, the attacker could read data from *any* container like so:
    
    1) Choose a "victim-container" to download
    
    2) Create PUT and GET tempurl for any object name within the
       "compromised-container". The object doesn't need to exist;
       we'll create it.
    
    3) Using the PUT tempurl, upload a DLO manifest with
       "X-Object-Manifest: /victim-container/"
    
    4) Using the GET tempurl, download the object created in step 3. The
       result will be the concatenation of all objects in the
       "victim-container".
    
    Step 3 need not be for all objects in the "victim-container"; for
    example, a value "X-Object-Manifest: /victim-container/abc" would only
    be the concatenation of all objects whose names begin with "abc". By
    probing for object names in this way, individual objects may be found
    and extracted.
    
    A similar bug would exist for manifests referencing other accounts
    except that neither the X-Object-Manifest (DLO) nor the JSON manifest
    document (SLO) have a way of specifying a different account.
    
    This change makes it so that a container tempurl only grants access to
    objects within its container, *including* large-object segments. This
    breaks backward compatibility for container tempurls that may have
    pointed to cross container *LO's, but (a) there are security
    implications, and (b) container tempurls are a relatively new feature.
    
    This works by having the tempurl middleware install an authorization
    callback ('swift.authorize' in the WSGI environment) that limits the
    scope of any requests to the account or container from which the key
    came.
    
    This requires swift.authorize to persist for both the manifest request
    and all segment requests; this is done by having the proxy server
    restore it to the WSGI environment prior to returning from __call__.
    
    [CVE-2015-5223]
    
    Co-Authored-By: Clay Gerrard &lt;clayg@swiftstack.com&gt;
    Co-Authored-By: Alistair Coles &lt;alistair.coles@hp.com&gt;
    Co-Authored-By: Christian Schwede &lt;cschwede@redhat.com&gt;
    Co-Authored-By: Matthew Oliver &lt;matt@oliver.net.au&gt;
    
    Change-Id: Ie6d52f7a07e87f6fec21ed8b0ec1d84be8b2b11c
    Closes-Bug: 1449212

commit 10b2939b433a4a79b4f7b97640b3d208cacfeffb
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Thu Jul 23 22:36:21 2015 -0700

    Disallow unsafe tempurl operations to point to unauthorized data
    
    Do not allow PUT tempurls to create pointers to other data. Specifically
    disallow the creation of DLO object manifests by returning an error if a
    non-safe tempurl request includes an X-Object-Manifest header regardless of
    the value of the header.
    
    This prevents discoverability attacks which can use any PUT tempurl to probe
    for private data by creating a DLO object manifest and then using the PUT
    tempurl to head the object which would 404 if the prefix does not match any
    object data or form a valid DLO HEAD response if it does.
    
    This also prevents a tricky and potentially unexpected consequence of PUT
    tempurls which would make it unsafe to allow a user to download objects
    created by tempurl (even if they just created them) because the result of
    reading the object created via tempurl may not be the data which was uploaded.
    
    [CVE-2015-5223]
    
    Co-Authored-By: Kota Tsuyuzaki &lt;tsuyuzaki.kota@lab.ntt.co.jp&gt;
    
    Change-Id: I11e68830009d3f6bff44ae4011a41b67139146f6
    Closes-Bug: 1453948

commit c690bcb68331818a04c94741b25f40cc40f7b3c4
Author: Kazuhiro MIYAHARA &lt;miyahara.kazuhiro@lab.ntt.co.jp&gt;
Date:   Mon Aug 17 16:50:56 2015 +0900

    Fix dispersion-reports error message
    
    This patch fixes Swift to show message
    "No objects to query. Has swift-dispersion-populate been run?"
    for "swift-dispersion-report —object-only”
    with no container for object dispersion.
    
    Change-Id: I82da56709cfc296a27f5180681709bc56adbc13d
    Closes-Bug: #1468120

commit 8086a0e53406dc95856df2d3e015d3eaaf81380a
Author: Tushar Gohad &lt;tushar.gohad@intel.com&gt;
Date:   Tue Aug 18 07:24:19 2015 +0000

    Restrict PyECLib version to 1.0.7
    
    v1.0.9 rev of PyECLib replaces Jerasure with a native EC
    implementation (liberasurecode_rs_vand) as the default
    EC scheme.  Going forward, Jerasure will not be bundled
    with PyPI version of PyECLib as it used to be, until
    v1.0.7.
    
    This is an interim change to Swift requirements until we
    get v1.0.9 PyECLib included into global-requirements and
    ready patches that change Swift default ec_type (for doc,
    config samples and unit tests) from "jerasure_rs_vand"
    to "liberasurecode_rs_vand."
    
    Change-Id: Ica4fee2cdea2bc7f5edd0e51ad637a4457faf3b4

commit 17efa343c605d0361b3f423696babbab3f3d972d
Author: Kota Tsuyuzaki &lt;tsuyuzaki.kota@lab.ntt.co.jp&gt;
Date:   Mon Jul 6 13:21:40 2015 -0700

    Fix EC GET backend stream iteration state
    
    In EC case, When GET object requested, proxy-server always makes a log
    line "Client disconnected on read" even though the request succeeded.
    
    That is because ECAppIter class doesn't maintain a bunch of backend
    stream when closing the app_iter. It will cause unfortunately
    GeneratorExit on backend stream ResumingGetter.
    
    This patch fixes to set non_client_disconnected to propagate the state
    to the backend streams when the range iteration stopped successful.
    
    Co-Authored-By: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
    
    Change-Id: I77af9807816bea1444d66534a17e2a210bcf09f8
    Closes-Bug: #1472201

commit 25dc7224b63b039cb3778cca7f9f81f954c6d94e
Author: Alistair Coles &lt;alistair.coles@hp.com&gt;
Date:   Tue Aug 25 11:05:41 2015 +0100

    Fix swob.Range docstring
    
    Bad ranges cause a ValueError to be raised, not an empty
    ranges list.
    
    Change-Id: I118bd2f7dc08ff5198870f4093c6eb350506c8ed

commit a7b84f4c51207608adc3a5de7f4f9a629053c0ab
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Mon Aug 24 23:11:34 2015 -0700

    Allow pep8 of a single file
    
    Now you can run
    
       $ tox -e pep8 path/to/file.py [path/to/file2.py [...]]
    
    to run pep8 against just those files[1]. This is quite a bit faster
    than a full pep8 run, and the faster feedback is nice when you're
    fiddling with some formatting to placate pep8.
    
    Of course, you can still run "tox -e pep8" to check the whole source
    tree, just as before this commit.
    
    [1] It'll still run against bin/swift* as well, but that's still a lot
    faster than running against all our .py files.
    
    Change-Id: I81b4363fb95a34ff0f5c346b2b24f2047154f502

commit 6a35d479e8952c854fee6fbef9fe0397a289a6e5
Author: Matthew Oliver &lt;matt@oliver.net.au&gt;
Date:   Tue Aug 25 11:24:49 2015 +1000

    Follow up patch to fix a multiline import NITPIC
    
    This change cleans up test/unit/obj/test_replicator.py's imports
    to use only 1 version of multiline import syntaxes (' \' vs '()').
    I don't really mind which, but we should be consistant, at least
    in the same file.
    
    This is a follow up for patch 215857.
    
    Change-Id: Ie2d328c25865b19092c493981a803ee246a9d7a5

commit edde5584affaa983d8db1d294bf1e20a2d4bbb50
Author: Hisashi Osanai &lt;osanai.hisashi@jp.fujitsu.com&gt;
Date:   Tue Aug 25 07:52:18 2015 +0900

    Fix typo of a comment in replicator
    
    The typo was introduced by patch 138342 (sorry) so I fix it.
    
    Change-Id: Id5126802d281ef7ee9be128bd2152c0d2584160e

commit 6151c6c45da481c0ea9a4fb876d14b39c1e347bf
Author: Tim Burke &lt;tim.burke@gmail.com&gt;
Date:   Mon Aug 24 20:36:22 2015 +0000

    Fix use of delimiter in account listings
    
    Previously, account listings that used the delimiter query param could
    omit some containers if they ended with the character that follows the
    delimiter.
    
    See If196e3075612b121ef8da4a9128167d00a248c27 for the corresponding fix
    for container listings.
    
    Change-Id: I57fcb97e51f653f5f4e306a632fcb3a0fb148c4e

commit a38f63e1c6b8b85b1675aa900e239a2e9906811e
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Fri Aug 21 18:14:55 2015 -0700

    Use correct Storage-Policy header for REPLICATE requests
    
    Under some concurrency the object-replicator could potentially send the
    wrong X-Backed-Storage-Policy-Index header to it's partner nodes during
    replication if there were multiple storage policies on the same node
    because of a race where multiple jobs being processed concurrently would
    mutate some shared state on the ObjectReplicator instance.
    
    Instead of using shared stated on the ObjectReplicator instance when
    mutating the default headers send with REPLICATION requests each job
    will copy them into a local where they can safely be updated.
    
    Change-Id: I5522db57af7e308b1f9d4181f14ea14e386a71fd

commit ae129bf5e8c918efd8ee66279f98ee85e7c97b24
Author: Kota Tsuyuzaki &lt;tsuyuzaki.kota@lab.ntt.co.jp&gt;
Date:   Fri May 15 06:44:12 2015 -0700

    eventlet.posthook related code needn't anymore
    
    In the past, older Swift seemed to use eventlet.posthooks scheme for the
    logging on proxy with posthooklogger method. However, for now, Swift
    attaches no method to eventlet.posthooks everywhere so we don't have
    to maintain the posthooks anymore.
    
    Change-Id: Ie63941a202d448532d980252a4d25575f8edab9c

commit 4500ff340f021e4e5f6fd53960de03cb3c207925
Author: Kota Tsuyuzaki &lt;tsuyuzaki.kota@lab.ntt.co.jp&gt;
Date:   Wed May 13 00:43:59 2015 -0700

    Fix the missing SLO state on fast-post
    
    When using fast-post and POST (i.e. metadata update) is requested to
    a SLO manifest files, current Swift drops the 'X-Static-Large-Object'
    header from the existing metadata. It results in breaking the SLO
    state because the manifest missing the 'X-Static-Large-Object' metadata
    will be maintained as a normal files.
    
    This patch fixes object-server to keep the existing
    'X-Static-Large-Object' flag and then keep the SLO state.
    
    Change-Id: Ib1eb569071372c322dd105c52baeeb094003291e
    Closes-bug: #1453807

commit 69e7424d3cb6c59341d739c3d41f42397031d96a
Author: Eran Rom &lt;eranr@il.ibm.com&gt;
Date:   Tue Jul 28 09:41:12 2015 +0300

    Add container sync probe test to SAIO default set
    
    SAIO Configuration and documentation changes enabling to run the
    container sync probe test by default
    
    Change-Id: Iccf59533d0d4fe72549d318339ab125d04dde006
    Related-Bug: #1476623

commit 8b1df9918bf6c22b49b161a402199b532bfd8266
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Fri Aug 21 14:04:46 2015 -0700

    Minor cleanup handoff mode warnings
    
      * message is a little clearer
      * test is a little stronger
    
    Change-Id: I745cde7f4a46dafc80ab42d39e6ccc92aa3b746e

commit a1ceab5a92dfdafd5abffed272ac2cece5302f32
Author: Carlos Cavanna &lt;ccavanna@ca.ibm.com&gt;
Date:   Fri Aug 21 14:14:31 2015 -0400

    New troubleshooting case in documentation.
    
    Added a new troubleshooting case for the "First Contribution to Swift"
    documentation page.
    
    Change-Id: I182ba702b49b28409fe56becae93326e5f63dcd0

commit ab163702de733be39ba5e7024c7a8dd4c86bc29b
Author: Pradeep Kumar Singh &lt;pradeep.singh@nectechnologies.in&gt;
Date:   Tue Jul 14 10:03:18 2015 +0530

    Emit warning log in object replicator
    
    When the object-replicator encounters handoffs_first and
    handoff_delete options as enabled it should emit a log
    warning indicating that it should be changed back to the
    default before the next "normal" rebalance.
    
    Closes-Bug: #1457262
    
    Change-Id: If9dc2796c18ed3cf13da920831e2d5c2ae9f12a0

commit be66aa8e76d2994eb8a0a944e0dea26ffbb3c159
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Thu Aug 20 13:24:38 2015 -0700

    Fix 500 for bogus Range request to 0-byte object.
    
    The proxy was trying to pop a byterange off a Range header that didn't
    contain syntactically-valid byteranges. This worked about as well as
    you'd expect. Now we detect the bogus value and remove the header
    entirely.
    
    Change-Id: I24b92f900d33ec79880c7db2870378489d5a6810

commit 4b6836b3bc465e9c2c6d2974c193a49b973c4e4e
Author: Akihito Takai &lt;takaiak@nttdata.co.jp&gt;
Date:   Thu Aug 20 18:40:52 2015 +0900

    Fix the comment in [1].
    
    (line 259) parameter(op) of object_update method is 'PUT' or
    'DELETE' not 'POST' or 'DELETE'.
    
    [1]: swift/obj/updater.py
    
    Change-Id: I876a620ba8e09e69fba7156b12e69445c229e160

commit 923238aa1ba0963c414ba5321cd3910b2910f4ed
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Tue Jul 28 20:35:25 2015 +0530

    test/(functional/probe):Replace python print operator with print function (pep H233, py33)
    
    'print' function is compatible with 2.x and 3.x python versions
    Link : https://www.python.org/dev/peps/pep-3105/
    
    Python 2.6 has a __future__ import that removes print as language syntax,
    letting you use the functional form instead
    
    Change-Id: I416c6ac21ccbfb91ec328ffb1ed21e492ef52d58

commit 47dc31940d64b0c87e99cc73eddcdd01dd8b3ad4
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Wed Aug 19 10:42:28 2015 -0700

    Add OpenStack release names to changelog
    
    I can never remember the mapping of real version numbers to the
    OpenStack names.
    
    Change-Id: Ib7c5ae4ff2a33018364698eb34f8df1622719fab

commit 183508710d011ec30ebba2186c58fd28d449e4bb
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Sun Aug 16 11:18:49 2015 +0200

    pep8: Don't override '_' symbol
    
    Fix pep8 warning F402 "import '_' from line 51 shadowed by loop
    variable".
    
    Change-Id: I139060ff5d298a8b0f0f8e529a5737478fb5daf5

commit c7eb589c6ca2fe4f2950cae22a18513e4dec6c46
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Sun Aug 16 11:06:52 2015 +0200

    pep8: Fix usage of the l10n _('...') function
    
    Fix the pep8 warning H702 "Formatting operation should be outside of
    localization method call".
    
    For the logger, pass parameters as indexed parameters instead of using
    the string str%args operator, the logger is more reliable in case of
    formatting error.
    
    Change-Id: If418bc155f6a6c0a00f63e3d87ebe4addf4aae55

commit 7bea148d2fe22daa9d1fbbc5cd16ebd390b64b1b
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Sun Aug 16 10:34:26 2015 +0200

    pep8: replace deprecated calls to assert_()
    
    The TestCase.assert_() has been deprecated in Python 2.7. Replace it
    with assertTrue() or even better methods (assertIn, assertNotIn,
    assertIsInstance) which provide better error messages.
    
    Change-Id: I21c730351470031a2dabe5238693095eabdb8964

commit 8aaacbf88d9ea4432e58dd261b98ff95d7c69be6
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Mon Jul 27 18:55:01 2015 +0200

    pep8: Fix hacking H232 warnings (octal)
    
    Fix warnings "H232: Python 3.x incompatible octal 000001234 should be
    written as 0o1234".
    
    Change-Id: I9a7bbb034357783885ac3e18fe1e9e32a5951616

commit d6267c1f95a7fcd2b0e4f15d5efc6bcfe2114de0
Author: Clément Contini &lt;ccontini@cloudops.com&gt;
Date:   Wed Aug 12 15:00:45 2015 -0400

    Keep user id and project id in subrequests env
    
    Keep HTTP_X_USER_ID and HTTP_X_PROJECT_ID to be available as
    user_id and project_id in storage.objects.outgoing.bytes in
    ceilometer when downloading a multipart object.
    
    Change-Id: I0f4734f021e5d6e84d48ed9bebeb321d7a9590ad
    Closes-Bug: #1477283

commit eaa006464cb98a2f36809edfa13bd3dcaebc9952
Author: John Dickinson &lt;me@not.mn&gt;
Date:   Mon Aug 17 22:13:42 2015 -0700

    move global statement up a few lines
    
    Change-Id: I190d2d530c6c0525d988cc88b0965b48a291fffb

commit 1a81cda8b7eba0d25ea7341da756bb588cae8d73
Author: Hamdi Roumani &lt;roumani@ca.ibm.com&gt;
Date:   Mon Aug 3 17:45:56 2015 -0400

    Doc instructions for post rebase steps
    
    Improve the 'first_contribution_swift' by adding instructions for how to
    rebuild swift following a rebase.
    
    Change-Id: If5c91dc4e1e8d1712bbd8b326c675967fb4b8c15

commit 79ba4a85983641e539b620bd143e62673c98416e
Author: Hisashi Osanai &lt;osanai.hisashi@jp.fujitsu.com&gt;
Date:   Wed Dec 3 06:15:16 2014 +0900

    Enable Object Replicator's failure count in recon
    
    This patch makes the count of object replication failure in recon.
    And "failure_nodes" is added to Account Replicator and
    Container Replicator.
    
    Recon shows the count of object repliction failure as follows:
    $ curl http://&lt;ip&gt;:&lt;port&gt;/recon/replication/object
    {
        "replication_last": 1416334368.60865,
        "replication_stats": {
            "attempted": 13346,
            "failure": 870,
    	"failure_nodes": {
                "192.168.0.1": {"sdb1": 3},
                "192.168.0.2": {"sdb1": 851,
                                "sdc1": 1,
                                "sdd1": 8},
                "192.168.0.3": {"sdb1": 3,
                                "sdc1": 4}
    	},
            "hashmatch": 0,
            "remove": 0,
            "rsync": 0,
            "start": 1416354240.9761429,
            "success": 1908
        },
        "replication_time": 2316.5563162644703,
        "object_replication_last": 1416334368.60865,
        "object_replication_time": 2316.5563162644703
    }
    
    Note that 'object_replication_last' and 'object_replication_time' are
    considered to be transitional and will be removed in the subsequent
    releases. Use 'replication_last' and 'replication_time' instead.
    
    Additionaly this patch adds the count in swift-recon and it will be
    showed as follows:
    $ swift-recon object -r
    ========================================================================
    =======
    --&gt; Starting reconnaissance on 4 hosts
    ========================================================================
    =======
    [2014-11-27 16:14:09] Checking on replication
    [replication_failure] low: 0, high: 0, avg: 0.0, total: 0, Failed: 0.0%,
    no_result: 0, reported: 4
    [replication_success] low: 3, high: 3, avg: 3.0, total: 12,
    Failed: 0.0%, no_result: 0, reported: 4
    [replication_time] low: 0, high: 0, avg: 0.0, total: 0, Failed: 0.0%,
    no_result: 0, reported: 4
    [replication_attempted] low: 1, high: 1, avg: 1.0, total: 4,
    Failed: 0.0%, no_result: 0, reported: 4
    Oldest completion was 2014-11-27 16:09:45 (4 minutes ago) by
    192.168.0.4:6002.
    Most recent completion was 2014-11-27 16:14:19 (-10 seconds ago) by
    192.168.0.1:6002.
    ========================================================================
    =======
    
    In case there is a cluster which has servers, a server runs with this
    patch and the other servers run without this patch. If swift-recon
    executes on the server which runs with this patch, there are unnecessary
    information on the output such as [failure], [success] and [attempted].
    Because other servers which run without this patch are not able to
    send a response with information that this patch needs.
    Therefore once you apply this patch, you also apply this patch to other
    servers before you execute swift-recon.
    
    DocImpact
    Change-Id: Iecd33655ae2568482833131f422679996c374d78
    Co-Authored-By: Kenichiro Matsuda &lt;matsuda_kenichi@jp.fujitsu.com&gt;
    Co-Authored-By: Brian Cline &lt;bcline@softlayer.com&gt;
    Implements: blueprint enable-object-replication-failure-in-recon

commit eeb0fa40a19917e6548f95f0bd3c08736928449b
Author: Christian Schwede &lt;cschwede@redhat.com&gt;
Date:   Thu Aug 6 07:21:15 2015 +0000

    Make swift-ring-builder filename usage more consistent
    
    Sometimes the given argument is internally altered and another filename is used
    without a note to the operator. Even worse, a given .ring.gz filename is
    sometimes written out as builder file, without updating the corresponding
    .builder file.
    
    There is already a method to parse the given argv and return the name of the
    builder and ring file. However, it's rarely used and no warning is given to the
    user if it is altered. This patch uses the already parsed builder and ring file
    name instead of argv[1], and also adds a note to the user if the used filename
    is differently to the one given as argument.
    
    Closes-Bug: 1482096
    Change-Id: I2f8ef23aeab8b07caaa799f7dcd57e684b4b2ad2

commit b75d2a4e37d4c86763a2cc56c6dd53ebe2e0de19
Author: Bill Huber &lt;wbhuber@us.ibm.com&gt;
Date:   Mon Aug 17 13:54:44 2015 -0500

    Quorum on durable response is too low
    
    Increase the .durable quorum from 2 to "parity + 1" to guarantee
    that we will never fail to rebuild an object.  Otherwise, with
    low durable responses back (&lt; parity + 1), the putter objects
    return with failed attribute set to true, thereby failing the
    rebuild of fragments for an object.
    
    Change-Id: I80d666f61273e589d0990baa78fd657b3470785d
    Closes-Bug: 1484565

commit fa35e38c9f83f704eb087f80157cbe33b23b9db2
Author: Kai Zhang &lt;zakir.exe@gmail.com&gt;
Date:   Fri Aug 14 16:46:35 2015 -0700

    Fix some minor typos
    
    Fixed some typos in function name and comments.
    
    Change-Id: Ida76ab4b331a51b71e57650702acc136e66ba4b2

commit 5b246e875fe9ac3d764ea581ad52b04238f5bcc8
Author: Kota Tsuyuzaki &lt;tsuyuzaki.kota@lab.ntt.co.jp&gt;
Date:   Wed Jul 22 10:39:22 2015 -0700

    Fix EC range GET/COPY handling
    
    When range GET (or COPY) for an EC object requested, if the requested range
    starts from more than last segments alignment (i.e.
    ceil(object_size/segment_size) * segment_size), proxy server will return
    the original content length w/o body, though Swift should return an error
    massage as a body and the length of message as the content length.
    The current behavior will cause stuck on some client. (e.g. curl)
    
    This patch fixes that proxy enables to return correct response, even if such
    an over range requested.
    
    Co-Authored-By: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
    
    Change-Id: I21f81c842f563ac4dddc69011ed759b744bb20bd
    Closes-Bug: #1475499

commit 7064706b2721c36c5181267f58704b9344ad4ac0
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Tue Aug 11 10:17:20 2015 -0500

    Fix 500 in versioned writes with bad Destination
    
    When this code lived in the proxy, it was protected by an "except
    HTTPException" clause in proxy.Application.handle_request(). When it
    moved to middleware, it lost that, and then things like
    constraints.check_name_format that raised HTTPException would cause
    500s. The HTTPException would make it all the way out to catch_errors
    and get translated to a 500.
    
    This commit just wraps a couple try/excepts around the bits in
    versioned writes that can raise HTTPException. I tried to make it use
    wsgify so I could get that for free, but that wound up being a real
    pain because env/start_response are plumbed through pretty much the
    whole versioned-writes middleware.
    
    Closes-Bug: 1483705
    
    Change-Id: Ife165bf709e64f313ed07c779b21914045e51f25

commit 035a411660ca02983cd486312266c67d78a2359c
Author: Thiago da Silva &lt;thiago@redhat.com&gt;
Date:   Sun Nov 9 13:13:27 2014 -0500

    versioned writes middleware
    
    Rewrite object versioning as middleware to simplify the PUT method
    in the object controller.
    
    The functionality remains basically the
    same with the only major difference being the ability to now
    version slo manifest files. dlo manifests are still not
    supported as part of this patch.
    
    Co-Authored-By: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
    
    DocImpact
    Change-Id: Ie899290b3312e201979eafefb253d1a60b65b837
    Signed-off-by: Thiago da Silva &lt;thiago@redhat.com&gt;
    Signed-off-by: Prashanth Pai &lt;ppai@redhat.com&gt;

commit 968c91a465627bb9317ed6e2ae9ccd818c83c0c4
Author: Alistair Coles &lt;alistair.coles@hp.com&gt;
Date:   Tue Jul 28 10:31:54 2015 +0100

    Replace assertTrue(not &lt;condition&gt;) with assertFalse(&lt;condition&gt;)
    
    The replacement of assert_ with assertTrue [1] resulted in a number of
    tests using calls of the form assertTrue(not &lt;condition&gt;). This patch
    replaces those with assertFalse(&lt;condition&gt;).
    
    [1] change I74705c6498249337bfdf955d62e0ad972035bc1f
    
    Change-Id: I78b49558f4425c2335df187b1793d1e4b3c514b1

commit 4ac1fea5d111c669ff827f4eb29c0735cbad6ba5
Author: Zhao Lei &lt;zhaolei@cn.fujitsu.com&gt;
Date:   Fri Aug 7 22:07:01 2015 +0800

    Fix some spelling typo in comments
    
    s/overide/override for object-expirer.conf and sample.
    s/automaticaly/automatically for swift/proxy/controllers/obj.py
    
    Change-Id: Ife107c7a1005a5d4959288db50a7f8f33c522dd4
    Signed-off-by: Zhao Lei &lt;zhaolei@cn.fujitsu.com&gt;

commit 9456af35a2832aeafc4a4e78ebd0d4142ead71cd
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Thu Aug 6 00:55:36 2015 +0530

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3,changes in
    dir:
    *test/unit/obj/*
    *test/unit/test_locale/*
    
    Change-Id: I3dd0c1107165ac529f1cd967363e5cf408a1d02b

commit 1952451ed7e97e2bfa3b11dfa5000cc39f712084
Author: Zhao Lei &lt;zhaolei@cn.fujitsu.com&gt;
Date:   Fri Aug 7 21:57:08 2015 +0800

    Fix a spelling typo in comment
    
    s/automaticaly/automatically/ for swift/proxy/controllers/obj.py
    
    Change-Id: I405441383739637e0b13746d6f4e2bad1c874b4d
    Signed-off-by: Zhao Lei &lt;zhaolei@cn.fujitsu.com&gt;

commit c35cc13b8abeb97400632cbe8ec56fc1040d8210
Author: Bill Huber &lt;wbhuber@us.ibm.com&gt;
Date:   Thu Aug 6 10:01:17 2015 -0500

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3 in the following dir:
    test/unit/proxy/*
    
    Change-Id: Ie2c7e73e1096233a10ee7fbf6f88386fa4d469d6

commit 239e94e62518f36601fb18119700269753d02a01
Author: Bill Huber &lt;wbhuber@us.ibm.com&gt;
Date:   Thu Aug 6 09:28:51 2015 -0500

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3 in the following dir:
    test/probe/*
    
    Change-Id: Ie08dd7a8a6c48e3452dfe4f2b41676330ce455d5

commit 49b9ba37ac522502ccad66fba7bfef375eab145d
Author: Bill Huber &lt;wbhuber@us.ibm.com&gt;
Date:   Wed Aug 5 14:51:32 2015 -0500

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3 in the following dir:
    test/functional/*
    
    Change-Id: Iee7f8ffca9838ccc521107180697d91ac9559405

commit 81816bebe6b3506af8cabaa7ebe265c70f3499cd
Author: kenichiro matsuda &lt;matsuda_kenichi@jp.fujitsu.com&gt;
Date:   Thu Aug 6 10:13:02 2015 +0900

    Fix shebang of commands
    
    Fix shebang of following commands.
      $ grep '#!/usr/bin/python' swift/bin/*
      swift/bin/swift-account-info:#!/usr/bin/python
      swift/bin/swift-container-info:#!/usr/bin/python
      swift/bin/swift-container-sync:#!/usr/bin/python
      swift/bin/swift-recon:#!/usr/bin/python
      swift/bin/swift-ring-builder:#!/usr/bin/python
      swift/bin/swift-ring-builder-analyzer:#!/usr/bin/python
    
    Change-Id: I564d1d8abd76eba57730fc2f30263b0a0f809867
    Closes-Bug: #1481623

commit 652f0f9da408e955843f87a504b3dab5be3cff80
Author: Pete Zaitcev &lt;zaitcev@kotori.zaitcev.us&gt;
Date:   Wed Aug 5 15:33:29 2015 -0600

    Having said H, I, J, we ought to say K
    
    In the long run, we might want to stop these updates. But this
    decision is above my pay grade.
    
    Change-Id: I335558e1da8052be1b215fbad51244b47af3d81b

commit ed3aec2146b114c85bb3b196c999bf3f44fe159e
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Thu Aug 6 00:18:52 2015 +0530

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3 in
    dir: test/unit/container/*
    
    Change-Id: I3333022ed63ce03198bc73147246d91d2442a440

commit f449e914728fdcaf0870c15b9fc5ebd16a9df916
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Wed Aug 5 22:32:02 2015 +0530

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3, fixing in:
    dir: test/unit/cli/*
    
    Change-Id: I9a2fc1f717beafd5fa8408942046e310e8de0318

commit 6594bbebb582801c069c4966352fee19eadef2f8
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Wed Aug 5 22:25:46 2015 +0530

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3 in
    dir : test/unit/account/*
    
    Change-Id: I70415197df1b0d58d4d6e219733c13a9c9cdfff7

commit 89f59062864e5cbfc839a6084c323ce35438aa57
Author: Ben Martin &lt;blmartin@us.ibm.com&gt;
Date:   Mon Jul 27 14:19:09 2015 -0500

    +Document method to avoid rsync filling root drive
    
    When rsync pushes to a remote node with an unmounted drive and if
    certain steps are not taken, rsync may attempt to write files to
    the local drive at the location where the drive was mounted.
    
    There are two suggested solutions for this issue:
      1) Set the permissions for all mount points in /srv/node/
           to root:root 755
      2) Mount the drives elsewhere and symlink the drives to /srv/.../
    
    The first method ensures that only root and not the swift user
    can write in the /srv/.../ directories.
    
    The second method will prompt a broken link issue if rsync
    attempts to write to an unmounted drive.
    
    Change-Id: I60ce4ed9ef8401768d5f78b6806cbb2e2a65303e
    Closes-Bug: #1470576

commit f0d51882b921075f5309ed6ff07385dc6103d4dc
Author: Charles Hsu &lt;charles0126@gmail.com&gt;
Date:   Wed Aug 5 22:09:40 2015 +0800

    Add extra_header_count to document and config.
    
    Change-Id: Iec86b488d71553c295afe7098822ce2046df9546

commit 7071762d3698c59fabdee76890e300f81417be74
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Tue Aug 4 23:15:37 2015 -0700

    Fix TypeError if backend response doesn't have expected headers
    
    There was some debug logging mixed in with some error handling on PUTs
    that was relying on a very specific edge would only encounter a set of
    backend responses that included the expected set of headers to diagnoise
    the failure.
    
    But the backend responses may not always have the expected headers.
    
    The proxy debug logging should be more robust to missing headers.
    
    It's a little hard to follow, but if you look `_connect_put_node` in
    swift.proxy.controller.obj - you'll see that only a few connections can
    make their way out of the initial put connection handling with a "resp"
    attribute that is not None.  In the happy path (e.g. 100-Continue) it's
    explictly set to None, and in most errors (Timeout, 503, 413, etc) a new
    connection will be established to the next node in the node iter.
    
    Some status code will however allow a conn to be returned for validation
    in `_check_failure_put_connections`, i.e.
    
      * 2XX (e.g. 0-byte PUT would not send Expect 100-Continue)
      * 409 - Conflict with another timestamp
      * 412 - If-None-Match that encounters another object
    
    ... so I added tests for those - fixing a TypeError along the way.
    
    Change-Id: Ibdad5a90fa14ce62d081e6aaf40aacfca31b94d2

commit 01848c565e5821d2500cb234261c70871e562ebe
Author: David Goetz &lt;dpgoetz@gmail.com&gt;
Date:   Fri Jun 26 17:27:31 2015 -0700

    Speed up reaper for a big account delete and some better error handling
    
    In run_forever mode, run the reaper on all three copies of the account
    DB instead of just the first one and shard the containers between them.
    
    Change-Id: Id182e89dad70df9d6d9988523861b8085d74c765

commit 5b24b2249878e25ee702ee4237227c984036c6ec
Author: OpenStack Proposal Bot &lt;openstack-infra@lists.openstack.org&gt;
Date:   Tue Aug 4 06:29:11 2015 +0000

    Imported Translations from Transifex
    
    For more information about this automatic import see:
    https://wiki.openstack.org/wiki/Translations/Infrastructure
    
    Change-Id: I9f0e5fd25ec143fb87de1895794764dea4587f93

commit 8d06f56c1fac23bca463d3a93353da6b50ad5bed
Author: Takashi NATSUME &lt;natsume.takashi@lab.ntt.co.jp&gt;
Date:   Tue Aug 4 10:14:25 2015 +0900

    Fix typo of 'receive'
    
    Change-Id: Ic01defa8d48ba4b7f4bd6cbe4d59b9bab468a36c

commit 310ac18d61b001bdf297505243d8aa62e8fde8fe
Author: Brian Reitz &lt;brian.reitz@oracle.com&gt;
Date:   Mon Aug 3 16:28:31 2015 -0500

    Convert docstring to a comment in test_denied_DELETE_of_versioned_object unit test.
    
    Docstrings cause issues for nose and created non standard test output for this test.
    
    Change-Id: I91e6450480567de0ee0b18d3efae01a4b94f0a86

commit 21a7b4aaa6f991c0eeb8f74876b14fe22713586b
Author: Alistair Coles &lt;alistair.coles@hp.com&gt;
Date:   Mon Aug 3 14:58:24 2015 +0100

    Test that get_hashes ignores only removed hash dir
    
    Add test for case not yet covered by unit tests: suffix dir
    has two hash dirs, one with expired tombstone. That hash dir gets
    removed and its hash is not included in the suffix hash, but the
    remaining hash dir's hash is reported.
    
    Change-Id: I031a022daed6b8a66dfd04bea1b4d5eebcb882b3

commit 44917c8a90e79a85cd6c6821d8b6d043f83b322d
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Mon Jul 20 13:06:48 2015 -0700

    Handle removed suffix dirs the same as empty suffix dirs
    
    When hashes suffix dirs, the directory might have gotten cleaned up while
    still appearing in hashes.pkl.  It would even get cleaned up the next time.
    
    For example, given this really old tombstone:
    
        objects/846/3d0/d3a20154d0a828a032aba6860397c3d0/1432267961.41808.ts
    
    Prior to this commit, a call to get_hashes() would reap the old
    tombstone and any empty containing dirs, but the resulting hashes.pkl
    would still contain {'3d0': 'd41d8cd98f00b204e9800998ecf8427e'} even
    though there's no such suffix dir any more.
    ("d41d8cd98f00b204e9800998ecf8427e" is the MD5 of the empty string.)
    
    Then, a *subsequent* get_hashes() call would omit 3d0 from the resulting
    hash, so then hashes.pkl would no longer contain 3d0. This difference
    would result in a little useless replication traffic while nodes without
    a particular part/suffix pair, but who disagreed on how that showed up
    in hashes.pkl, tried to push their version of nothing to one another.
    
    Now, an empty suffix dir doesn't appear in hashes.pkl at all, whether
    it's for replication or EC, or whether it's for the get_hashes() call
    that reaped the suffix dirs or not.
    
    Co-Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
    
    Change-Id: Ie1bfb1cc56d0fc030c6db42f97b55d140695cf1f

commit cf4d50bd68b658d35759fb56446557858dcd9572
Author: Alistair Coles &lt;alistair.coles@hp.com&gt;
Date:   Fri Jun 5 13:06:29 2015 +0100

    Make test_proxy work independent of env vars
    
    test.unit.common.test_internal_client.TestSimpleClient.test_proxy
    will fail if the environment has http_proxy set and does not have
    no_proxy=127.0.0.1 set. This seems to be because urllib overrides
    any proxy arg passed to the Request with the env http_proxy var,
    unless the Request host is in no_proxy.
    
    We don't need to test urllib, so this patch changes the test to
    simply ensure that swift code does pass the correct proxy arg to
    urllib2.urlopen. That avoids testers having to make sure their
    env vars are compliant to successfully run unit tests. While it is
    reasonable to think that 127.0.0.1 is in the no_proxy list, it
    shouldn't be a requirement pass swift tests.
    
    Change-Id: Iff91acdb76fabe7056b3e90e2756e27fe5105817

commit 67513fc17c23066f6547b5e3c4ab2dc852e4f7f0
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Sat Jun 27 23:26:47 2015 +0530

    Adding bandit for security static analysis testing in swift
    
    This change adds a basic bandit config for Swift. It can be invoked
    by running the tox environment for bandit;
        tox -e bandit
    
    This is an initial step for using bandit with Swift
    and it should be revisited to improve the testing as more is learned
    about the specific needs of the Swift code base.As per now some tests
    are excluded as they were used on purpose.
    
    https://wiki.openstack.org/wiki/Security/Projects/Bandit
    
    Implements: blueprint swift-bandit
    
    Change-Id: I621be9a68ae9311f3a6eadd1636b05e646260cf2

commit 768d7ab074807175471d589de96d091e3239052e
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Thu Jul 30 15:30:35 2015 -0700

    Add a probetest for HUP/reload
    
    This would have been enough to catch the regression, and we can extend
    them as we work on any future ehancements to our process management.
    
    Change-Id: I9a1b57aa15663380c45cf783afc8212ab4ffbace

commit c5b5cf91a984f80cc6cbe42735b242083d700542
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Tue Jul 28 21:03:05 2015 +0530

    test/unit: Replace python print operator with print function (pep H233, py33)
    
    'print' function is compatible with 2.x and 3.x python versions
    Link : https://www.python.org/dev/peps/pep-3105/
    
    Python 2.6 has a __future__ import that removes print as language syntax,
    letting you use the functional form instead
    
    Change-Id: I94e1bc6bd83ad6b05695c7ebdf7cbfd8f6d9f9af

commit dd2f1be3b124d3901ebbc176a7adc462b6449667
Author: Ondrej Novy &lt;ondrej.novy@firma.seznam.cz&gt;
Date:   Tue Jun 16 17:42:58 2015 +0200

    Time synchronization check in recon.
    
    This change add call time to recon middleware and param --time to
    recon CLI. This is usefull for checking if time in cluster is
    synchronized.
    
    Change-Id: I62373e681f64d0bd71f4aeb287953dd3b2ea5662

commit cbcfb74132aba4d5834dc9cf33dc4f664b82d39a
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Wed Jul 22 19:32:46 2015 -0700

    Cleanup nits from container_update_timeout
    
    Change-Id: Ib17fc9a027db267350abc5a7db4e3172dfff7913

commit 2289137164231d7872731c2cf3d81b86f34f01a4
Author: John Dickinson &lt;me@not.mn&gt;
Date:   Sat May 23 15:40:03 2015 -0700

    do container listing updates in another (green)thread
    
    The actual server-side changes are simple. The tests are a different
    matter. Many changes were needed to the object server tests to
    handle the now-async calls to the container server. In an effort to
    test this properly, some drive-by changes were made to improve tests.
    
    I tested this patch by doing zero-byte object writes to one container
    as fast as possible. Then I did it again while also saturating 2 of the
    container replica's disks. The results are linked below.
    
    https://gist.github.com/notmyname/2bb85acfd8fbc7fc312a
    
    DocImpact
    
    Change-Id: I737bd0af3f124a4ce3e0862a155e97c1f0ac3e52

commit c8131c6abb17b00b043a9b95e65be819e1fd3c9d
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Sun Jul 12 14:48:35 2015 +0530

    sys.exc_type/exc_value/exc_traceback are Deprecated
    
    sys.exc_info() contains a tuple of these three.
    
    Change-Id: I530cbeb37c43da98b4924db41f6604871077bd47
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  <div class="boardCommentActivity">
    
      <table class="bug-activity">
  
    
      
    
    <tr>
      <td style="text-align: right;">
        <b>tags</b>:
      </td>
      <td>
        added: in-feature-crypto
      </td>
    </tr>
  
</table>
    
    
  </div>
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/98" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~hudson-openstack" class="sprite person">OpenStack Infra (hudson-openstack)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-09-04T10:32:21.031438+00:00" title="2015-09-04 10:32:21 UTC">on 2015-09-04</time><span class="editable-message-last-edit-date">:
              </span>
              <a href="/swift/+bug/1449212/comments/98">
                <strong>Fix merged to swift (stable/kilo)</strong>
              </a>
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/98"> #98</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  <a href="https://bugs.launchpad.net/swift/+bug/1449212/comments/98/+download">Download full text</a> (3.3 KiB)
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Reviewed:  <a rel="nofollow" href="https://review.openstack.org/217255">https:/<wbr />/review.<wbr />openstack.<wbr />org/217255</a><br />
Committed: <a rel="nofollow" href="https://git.openstack.org/cgit/openstack/swift/commit/?id=f81435d340140a0b54ac555870423894ee9b2131">https:/<wbr />/git.openstack.<wbr />org/cgit/<wbr />openstack/<wbr />swift/commit/<wbr />?id=f81435d3401<wbr />40a0b54ac555870<wbr />423894ee9b2131</a><br />
Submitter: Jenkins<br />
Branch:    stable/kilo</p>
<p>commit f81435d340140a0<wbr />b54ac5558704238<wbr />94ee9b2131<br />
Author: Samuel Merritt &lt;email address hidden&gt;<br />
Date:   Tue Aug 11 09:10:13 2015 -0500</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Better scoping for tempurls, especially container tempurls</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;It used to be that a GET of a tempurl referencing a large object would<br />
&nbsp;&nbsp;&nbsp;&nbsp;let you download that large object regardless of where its segments<br />
&nbsp;&nbsp;&nbsp;&nbsp;lived. However, this led to some violated user expectations around<br />
&nbsp;&nbsp;&nbsp;&nbsp;container tempurls.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;(Note on shorthand: all tempurls reference objects. However, &quot;account<br />
&nbsp;&nbsp;&nbsp;&nbsp;tempurl&quot; and &quot;container tempurl&quot; are shorthand meaning tempurls<br />
&nbsp;&nbsp;&nbsp;&nbsp;generated using a key on the account or container, respectively.)</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Let&#x27;s say an application is given tempurl keys to a particular<br />
&nbsp;&nbsp;&nbsp;&nbsp;container, and it does all its work therein using those keys. The user<br />
&nbsp;&nbsp;&nbsp;&nbsp;expects that, if the application is compromised, then the attacker<br />
&nbsp;&nbsp;&nbsp;&nbsp;only gains access to the &quot;compromised-<wbr />container&quot;<wbr />. However, with the old<br />
&nbsp;&nbsp;&nbsp;&nbsp;behavior, the attacker could read data from *any* container like so:</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;1) Choose a &quot;victim-container&quot; to download</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;2) Create PUT and GET tempurl for any object name within the<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<wbr />&quot;compromised-<wbr />container&quot;<wbr />. The object doesn&#x27;t need to exist;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;we&#x27;ll create it.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;3) Using the PUT tempurl, upload a DLO manifest with<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<wbr />&quot;X-Object-<wbr />Manifest: /victim-container/&quot;</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;4) Using the GET tempurl, download the object created in step 3. The<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result will be the concatenation of all objects in the<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<wbr />&quot;victim-<wbr />container&quot;<wbr />.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Step 3 need not be for all objects in the &quot;victim-container&quot;; for<br />
&nbsp;&nbsp;&nbsp;&nbsp;example, a value &quot;X-Object-Manifest: /victim-<wbr />container/<wbr />abc&quot; would only<br />
&nbsp;&nbsp;&nbsp;&nbsp;be the concatenation of all objects whose names begin with &quot;abc&quot;. By<br />
&nbsp;&nbsp;&nbsp;&nbsp;probing for object names in this way, individual objects may be found<br />
&nbsp;&nbsp;&nbsp;&nbsp;and extracted.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;A similar bug would exist for manifests referencing other accounts<br />
&nbsp;&nbsp;&nbsp;&nbsp;except that neither the X-Object-Manifest (DLO) nor the JSON manifest<br />
&nbsp;&nbsp;&nbsp;&nbsp;document (SLO) have a way of specifying a different account.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;This change makes it so that a container tempurl only grants access to<br />
&nbsp;&nbsp;&nbsp;&nbsp;objects within its container, *including* large-object segments. This<br />
&nbsp;&nbsp;&nbsp;&nbsp;breaks backward compatibility for container tempurls that may have<br />
&nbsp;&nbsp;&nbsp;&nbsp;pointed to cross container *LO&#x27;s, but (a) there are security<br />
&nbsp;&nbsp;&nbsp;&nbsp;implications, and (b) container tempurls are a relatively new feature.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;This works by having the tempurl middleware install an authorization<br />
&nbsp;&nbsp;&nbsp;&nbsp;callback (&#x27;swift.authorize&#x27; in the WSGI environment) that limits the<br />
&nbsp;&nbsp;&nbsp;&nbsp;scope of any requests to the account or container from which the key<br />
&nbsp;&nbsp;&nbsp;&nbsp;came.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;This requires swift.authorize to persist for both the manifest request<br />
&nbsp;&nbsp;&nbsp;&nbsp;and all segment requests; this is done by having the proxy server<br />
&nbsp;&nbsp;&nbsp;&nbsp;restore it to the WSGI environment prior to returning from __call__.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;[CVE-2015-5223]</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Co-Authored-By: Clay Gerrard &lt;email address hidden&gt;<br />
&nbsp;&nbsp;&nbsp;&nbsp;Co-Authored-By: Alistair Coles &lt;alistair.co...</p></div>
    
    <p>
      <a href="/swift/+bug/1449212/comments/98">Read more...</a>
    </p>
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Reviewed:  https://review.openstack.org/217255
Committed: https://git.openstack.org/cgit/openstack/swift/commit/?id=f81435d340140a0b54ac555870423894ee9b2131
Submitter: Jenkins
Branch:    stable/kilo

commit f81435d340140a0b54ac555870423894ee9b2131
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Tue Aug 11 09:10:13 2015 -0500

    Better scoping for tempurls, especially container tempurls
    
    It used to be that a GET of a tempurl referencing a large object would
    let you download that large object regardless of where its segments
    lived. However, this led to some violated user expectations around
    container tempurls.
    
    (Note on shorthand: all tempurls reference objects. However, "account
    tempurl" and "container tempurl" are shorthand meaning tempurls
    generated using a key on the account or container, respectively.)
    
    Let's say an application is given tempurl keys to a particular
    container, and it does all its work therein using those keys. The user
    expects that, if the application is compromised, then the attacker
    only gains access to the "compromised-container". However, with the old
    behavior, the attacker could read data from *any* container like so:
    
    1) Choose a "victim-container" to download
    
    2) Create PUT and GET tempurl for any object name within the
       "compromised-container". The object doesn't need to exist;
       we'll create it.
    
    3) Using the PUT tempurl, upload a DLO manifest with
       "X-Object-Manifest: /victim-container/"
    
    4) Using the GET tempurl, download the object created in step 3. The
       result will be the concatenation of all objects in the
       "victim-container".
    
    Step 3 need not be for all objects in the "victim-container"; for
    example, a value "X-Object-Manifest: /victim-container/abc" would only
    be the concatenation of all objects whose names begin with "abc". By
    probing for object names in this way, individual objects may be found
    and extracted.
    
    A similar bug would exist for manifests referencing other accounts
    except that neither the X-Object-Manifest (DLO) nor the JSON manifest
    document (SLO) have a way of specifying a different account.
    
    This change makes it so that a container tempurl only grants access to
    objects within its container, *including* large-object segments. This
    breaks backward compatibility for container tempurls that may have
    pointed to cross container *LO's, but (a) there are security
    implications, and (b) container tempurls are a relatively new feature.
    
    This works by having the tempurl middleware install an authorization
    callback ('swift.authorize' in the WSGI environment) that limits the
    scope of any requests to the account or container from which the key
    came.
    
    This requires swift.authorize to persist for both the manifest request
    and all segment requests; this is done by having the proxy server
    restore it to the WSGI environment prior to returning from __call__.
    
    [CVE-2015-5223]
    
    Co-Authored-By: Clay Gerrard &lt;clayg@swiftstack.com&gt;
    Co-Authored-By: Alistair Coles &lt;alistair.coles@hp.com&gt;
    Co-Authored-By: Christian Schwede &lt;cschwede@redhat.com&gt;
    Co-Authored-By: Matthew Oliver &lt;matt@oliver.net.au&gt;
    
    Closes-Bug: 1449212
    
    Change-Id: I11078af178cb9acdd9039388282fcd0db165ba7a
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          

          
              <div class="boardComment">
  <div class="boardCommentDetails">
    
      <a href="https://launchpad.net/~tristan-cacqueray" class="sprite person">Tristan Cacqueray (tristan-cacqueray)</a>
    
    <time title="2015-09-08 12:15:18 UTC" datetime="2015-09-08T12:15:18.114774+00:00">on 2015-09-08</time>
  </div>
  <div class="boardCommentActivity">
    <table class="bug-activity">
  
    
      <tr>
        <td colspan="2">Changed in ossa: </td>
      </tr>
    
    <tr>
      <td style="text-align: right;">
        <b>status</b>:
      </td>
      <td>
        Fix Committed &#8594; Fix Released
      </td>
    </tr>
  
</table>
  </div>
</div>
          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/99" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~hudson-openstack" class="sprite person">OpenStack Infra (hudson-openstack)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-09-08T17:03:14.812051+00:00" title="2015-09-08 17:03:14 UTC">on 2015-09-08</time><span class="editable-message-last-edit-date">:
              </span>
              <a href="/swift/+bug/1449212/comments/99">
                <strong>Fix proposed to swift (feature/hummingbird)</strong>
              </a>
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/99"> #99</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Fix proposed to branch: feature/hummingbird<br />
Review: <a rel="nofollow" href="https://review.openstack.org/221410">https:/<wbr />/review.<wbr />openstack.<wbr />org/221410</a></p></div>
    
    
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Fix proposed to branch: feature/hummingbird
Review: https://review.openstack.org/221410</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  
  
</div>

          

          

          

        
        
          
            <div xmlns="http://www.w3.org/1999/xhtml" itemscope="" itemtype="http://schema.org/UserComments" class="boardComment editable-message
                  " data-baseurl="/swift/+bug/1449212/comments/100" data-i-can-edit="False">
  <div class="boardCommentDetails">
    <div class="message-revision-container">
      <div class="message-revision-container-header">
        <span>Revision history for this message</span>
        <img src="/+icing/build/overlay/assets/skins/sam/images/close.gif" class="message-revision-close" />
      </div>
      <script type="text/template">
        <div class='message-revision-item'>
          <div class='message-revision-title'>
              <a class="sprite remove action-icon message-revision-del-btn">
                  Remove
              </a>
              <a class="js-action">
                  Revision #{revision}, created at {date_created_display}
              </a>
          </div>
          <div class='message-revision-body'>{content}</div>
        </div>
      </script>
      <div class="message-revision-list"></div>
    </div>

    <table>
      <tbody>
        <tr>
          <td>
            <a href="https://launchpad.net/~hudson-openstack" class="sprite person">OpenStack Infra (hudson-openstack)</a>
            wrote
            <time itemprop="commentTime" datetime="2015-09-08T20:44:45.578938+00:00" title="2015-09-08 20:44:45 UTC">on 2015-09-08</time><span class="editable-message-last-edit-date">:
              </span>
              <a href="/swift/+bug/1449212/comments/100">
                <strong>Fix merged to swift (feature/hummingbird)</strong>
              </a>
          </td>
          

          <td>
            
          </td>
          <td>
            
          </td>
          <td class="bug-comment-index">
          <a itemprop="url" href="/swift/+bug/1449212/comments/100"> #100</a>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="boardCommentBody">
    

    

    

  <a href="https://bugs.launchpad.net/swift/+bug/1449212/comments/100/+download">Download full text</a> (70.7 KiB)
  <div class="editable-message-body">
    <div class="comment-text editable-message-text" itemprop="commentText"><p>Reviewed:  <a rel="nofollow" href="https://review.openstack.org/221410">https:/<wbr />/review.<wbr />openstack.<wbr />org/221410</a><br />
Committed: <a rel="nofollow" href="https://git.openstack.org/cgit/openstack/swift/commit/?id=eb8f1f83f1cfc63d8452bc30096fd1c145781527">https:/<wbr />/git.openstack.<wbr />org/cgit/<wbr />openstack/<wbr />swift/commit/<wbr />?id=eb8f1f83f1c<wbr />fc63d8452bc3009<wbr />6fd1c145781527</a><br />
Submitter: Jenkins<br />
Branch:    feature/hummingbird</p>
<p>commit cb683d391cb66d0<wbr />f52830de16760c8<wbr />0fd2afedf9<br />
Author: OpenStack Proposal Bot &lt;email address hidden&gt;<br />
Date:   Sat Sep 5 06:17:51 2015 +0000</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Imported Translations from Transifex</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;For more information about this automatic import see:<br />
&nbsp;&nbsp;&nbsp;&nbsp;<a rel="nofollow" href="https://wiki.openstack.org/wiki/Translations/Infrastructure">https:/<wbr />/wiki.openstack<wbr />.org/wiki/<wbr />Translations/<wbr />Infrastructure</a></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Change-Id: I2d92b8e34a665f<wbr />b0bb4c048cfb0c5<wbr />9de295dfce6</p>
<p>commit e4542455c8a07b7<wbr />981c247df8b7378<wbr />16062c1655<br />
Author: Emett Speer &lt;email address hidden&gt;<br />
Date:   Wed Sep 2 17:18:03 2015 -0700</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;[Labs] Update links to Cloud Admin Guide</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Update links to the Cloud Admin Guide after the<br />
&nbsp;&nbsp;&nbsp;&nbsp;RST conversion of that book altered URLs.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Change-Id: I899f8938498b74<wbr />4e62887968a65e5<wbr />8c00ef27f1b</p>
<p>commit 58fcc0752397830<wbr />6cd3889ada73af5<wbr />d9e664cf59<br />
Author: Christian Schwede &lt;email address hidden&gt;<br />
Date:   Wed Sep 2 10:52:34 2015 +0000</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Test if container_sweep is executed on unmounted devices</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;This change ensures that container_sweep is not run if a device is not mounted<br />
&nbsp;&nbsp;&nbsp;&nbsp;and mount_check is set to True.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Change-Id: I823083c8431d9e<wbr />61fd426508033ec<wbr />9188503957b</p>
<p>commit e02609c66a80484<wbr />5672413b06830b8<wbr />7395afef31<br />
Author: Samuel Merritt &lt;email address hidden&gt;<br />
Date:   Tue Sep 1 15:19:50 2015 -0700</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Preserve traceback in swift-dispersio<wbr />n-report</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Commit c690bcb fixed a bug in the dispersion report, but changed this<br />
&nbsp;&nbsp;&nbsp;&nbsp;from a bare &quot;raise&quot; to &quot;raise err&quot;, which loses the traceback. Not a<br />
&nbsp;&nbsp;&nbsp;&nbsp;big deal, but worth putting back IMO.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Change-Id: Id5b72153a4b8df<wbr />8e3faaf1fa3fb20<wbr />40e28ba85cc</p>
<p>commit d06d4ad0fd2dfe6<wbr />9da8008e7296512<wbr />64522c6c06<br />
Author: Minwoo Bae &lt;email address hidden&gt;<br />
Date:   Tue Sep 1 15:08:44 2015 -0500</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Included reference in swift.obj.diskfile to enumerate the string<br />
&nbsp;&nbsp;&nbsp;&nbsp;used for data file paths.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Change-Id: Ie22caa678bc00d<wbr />fc43fabec7efbbb<wbr />9f34490f1b5</p>
<p>commit 615c7a204b9386e<wbr />05c5bab658bfe96<wbr />766ad1e680<br />
Author: Brian Cline &lt;email address hidden&gt;<br />
Date:   Tue Sep 1 10:51:20 2015 -0500</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Adds useful dispersion info from changelog</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Change-Id: I1a45088fc32620<wbr />b02ff9a754b02ec<wbr />1eb75a59d6e</p>
<p>commit 3b8755098a1786c<wbr />5447abf158bd686<wbr />293a82977c<br />
Author: janonymous &lt;email address hidden&gt;<br />
Date:   Sun Aug 2 21:29:13 2015 +0530</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Replace a / b with a // b to use integer division where needed</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Change-Id: I72c81faa62786e<wbr />140b0de00e3a049<wbr />34bf1b5adbd</p>
<p>commit 524c89b7eeff037<wbr />b8a6b421888771e<wbr />15f98c2da2<br />
Author: John Dickinson &lt;email address hidden&gt;<br />
Date:   Fri Aug 21 13:39:41 2015 -0700</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Updated CHANGELOG, AUTHORS, and .mailmap for 2.4.0 release.</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Change-Id: Ic6301146b839c9<wbr />921bb85c4f4c1e5<wbr />85c9ab66661</p>
<p>commit 05de1305a903ee4<wbr />ce9c8c50fde53c5<wbr />52d5b90d51<br />
Author: Clay Gerrard &lt;email address hidden&gt;<br />
Date:   Thu Aug 27 18:35:09 2015 -0700</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Make ssync_sender send valid chunked requests</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;The connect method of ssync_sender tells the remote connection that it&#x27;s<br />
&nbsp;&nbsp;&nbsp;&nbsp;going to send a valid HTTP chunked request, but if the remote end needs<br />
&nbsp;&nbsp;&nbsp;&nbsp;to respond with an error of any kind sender th...</p></div>
    
  </div>

  <div class="editable-message-form" style="display: none">
     <textarea style="width: 100%" rows="10">Reviewed:  https://review.openstack.org/221410
Committed: https://git.openstack.org/cgit/openstack/swift/commit/?id=eb8f1f83f1cfc63d8452bc30096fd1c145781527
Submitter: Jenkins
Branch:    feature/hummingbird

commit cb683d391cb66d0f52830de16760c80fd2afedf9
Author: OpenStack Proposal Bot &lt;openstack-infra@lists.openstack.org&gt;
Date:   Sat Sep 5 06:17:51 2015 +0000

    Imported Translations from Transifex
    
    For more information about this automatic import see:
    https://wiki.openstack.org/wiki/Translations/Infrastructure
    
    Change-Id: I2d92b8e34a665fb0bb4c048cfb0c59de295dfce6

commit e4542455c8a07b7981c247df8b737816062c1655
Author: Emett Speer &lt;speer.emett@gmail.com&gt;
Date:   Wed Sep 2 17:18:03 2015 -0700

    [Labs] Update links to Cloud Admin Guide
    
    Update links to the Cloud Admin Guide after the
    RST conversion of that book altered URLs.
    
    Change-Id: I899f8938498b744e62887968a65e58c00ef27f1b

commit 58fcc07523978306cd3889ada73af5d9e664cf59
Author: Christian Schwede &lt;cschwede@redhat.com&gt;
Date:   Wed Sep 2 10:52:34 2015 +0000

    Test if container_sweep is executed on unmounted devices
    
    This change ensures that container_sweep is not run if a device is not mounted
    and mount_check is set to True.
    
    Change-Id: I823083c8431d9e61fd426508033ec9188503957b

commit e02609c66a804845672413b06830b87395afef31
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Tue Sep 1 15:19:50 2015 -0700

    Preserve traceback in swift-dispersion-report
    
    Commit c690bcb fixed a bug in the dispersion report, but changed this
    from a bare "raise" to "raise err", which loses the traceback. Not a
    big deal, but worth putting back IMO.
    
    Change-Id: Id5b72153a4b8df8e3faaf1fa3fb2040e28ba85cc

commit d06d4ad0fd2dfe69da8008e729651264522c6c06
Author: Minwoo Bae &lt;minwoob@us.ibm.com&gt;
Date:   Tue Sep 1 15:08:44 2015 -0500

    Included reference in swift.obj.diskfile to enumerate the string
    used for data file paths.
    
    Change-Id: Ie22caa678bc00dfc43fabec7efbbb9f34490f1b5

commit 615c7a204b9386e05c5bab658bfe96766ad1e680
Author: Brian Cline &lt;bcline@softlayer.com&gt;
Date:   Tue Sep 1 10:51:20 2015 -0500

    Adds useful dispersion info from changelog
    
    Change-Id: I1a45088fc32620b02ff9a754b02ec1eb75a59d6e

commit 3b8755098a1786c5447abf158bd686293a82977c
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Sun Aug 2 21:29:13 2015 +0530

    Replace a / b with a // b to use integer division where needed
    
    Change-Id: I72c81faa62786e140b0de00e3a04934bf1b5adbd

commit 524c89b7eeff037b8a6b421888771e15f98c2da2
Author: John Dickinson &lt;me@not.mn&gt;
Date:   Fri Aug 21 13:39:41 2015 -0700

    Updated CHANGELOG, AUTHORS, and .mailmap for 2.4.0 release.
    
    Change-Id: Ic6301146b839c9921bb85c4f4c1e585c9ab66661

commit 05de1305a903ee4ce9c8c50fde53c552d5b90d51
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Thu Aug 27 18:35:09 2015 -0700

    Make ssync_sender send valid chunked requests
    
    The connect method of ssync_sender tells the remote connection that it's
    going to send a valid HTTP chunked request, but if the remote end needs
    to respond with an error of any kind sender throws HTTP right out the
    window, picks up his ball, and closes the socket down hard - much to the
    surprise of the eventlet.wsgi server who up to this point had been
    playing along quite nicely with this 'SSYNC' nonsense assuming that
    everyone here is consenting mature adults.
    
    If you're going to make a "Transfer-Encoding: chunked" request have the
    good decency to finish the job with a proper '0\r\n\r\n'. [1]
    
    N.B. It might be possible to handle an error status during the
    initialize_request phase with some sort of 100-continue support, but
    honestly it's not entirely clear to me when the server isn't going to
    close the connection if the client is still expected to send the body
    [2] - further if the error comes later during missing_check or updates
    we'll for sure want to send the chunk transfer termination line before
    we close down the socket and this way we cover both.
    
    1. Really, eventlet.wsgi shouldn't be so blasted brittle about this [3]
    2. https://lists.w3.org/Archives/Public/ietf-http-wg/2005AprJun/0007.html
    3. https://github.com/eventlet/eventlet/commit/c3ce3eef0b4d0dfdbfb1ec0186d4bb204fb8ecd5
    
    Closes-Bug #1489587
    Change-Id: Ic17c6c3075553f8cf6ef6213e62a00282f0d01cf

commit 993ee4e37af1961adba2047d5aa2eb210e423eb3
Author: nakagawamsa &lt;nakagawamsa@nttdata.co.jp&gt;
Date:   Fri Aug 28 11:49:43 2015 +0900

    Remove duplicate X-Backend-Storage-Policy-Index key
    
    There is duplicate 'X-Backend-Storage-Policy-Index' dictionary key in unit.obj.test_server.py.
    One key has fixed policy index value, and another has random value.
    Unittest should done with random policy index, so remove key which is set fixed value.
    
    Change-Id: Ic91fcf44d48297d0feee33c928ca682def9790a3

commit 893f30c61d280804e417790dd34ba7bc3fb4f6fc
Author: paul luse &lt;paul.e.luse@intel.com&gt;
Date:   Wed Aug 12 13:32:50 2015 -0700

    EC GET path: require fragments to be of same set
    
    And if they are not, exhaust the node iter to go get more.  The
    problem without this implementation is a simple overwrite where
    a GET follows before the handoff has put the newer obj back on
    the 'alive again' node such that the proxy gets n-1 fragments
    of the newest set and 1 of the older.
    
    This patch bucketizes the fragments by etag and if it doesn't
    have enough continues to exhaust the node iterator until it
    has a large enough matching set.
    
    Change-Id: Ib710a133ce1be278365067fd0d6610d80f1f7372
    Co-Authored-By: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
    Co-Authored-By: Alistair Coles &lt;alistair.coles@hp.com&gt;
    Closes-Bug: 1457691

commit 58a10a5fffec69304d7bcce0f1c43bd2a9f9ff52
Author: Alistair Coles &lt;alistair.coles@hp.com&gt;
Date:   Wed Aug 26 16:30:23 2015 +0100

    Add test that a tempurl POST cannot set a DLO manifest header
    
    Follow up to [1] to add tests for tempurl POSTs not being allowed
    to set a DLO manifest header.
    
    [1] I11e68830009d3f6bff44ae4011a41b67139146f6
    
    Change-Id: I7c0ad5a936f71e56c599b8495a586913d3334422
    Related-Bug: 1453948

commit d4409c0a046c6ce0e14e18c95efe2cd16cf120e8
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Tue Aug 11 09:10:13 2015 -0500

    Better scoping for tempurls, especially container tempurls
    
    It used to be that a GET of a tempurl referencing a large object would
    let you download that large object regardless of where its segments
    lived. However, this led to some violated user expectations around
    container tempurls.
    
    (Note on shorthand: all tempurls reference objects. However, "account
    tempurl" and "container tempurl" are shorthand meaning tempurls
    generated using a key on the account or container, respectively.)
    
    Let's say an application is given tempurl keys to a particular
    container, and it does all its work therein using those keys. The user
    expects that, if the application is compromised, then the attacker
    only gains access to the "compromised-container". However, with the old
    behavior, the attacker could read data from *any* container like so:
    
    1) Choose a "victim-container" to download
    
    2) Create PUT and GET tempurl for any object name within the
       "compromised-container". The object doesn't need to exist;
       we'll create it.
    
    3) Using the PUT tempurl, upload a DLO manifest with
       "X-Object-Manifest: /victim-container/"
    
    4) Using the GET tempurl, download the object created in step 3. The
       result will be the concatenation of all objects in the
       "victim-container".
    
    Step 3 need not be for all objects in the "victim-container"; for
    example, a value "X-Object-Manifest: /victim-container/abc" would only
    be the concatenation of all objects whose names begin with "abc". By
    probing for object names in this way, individual objects may be found
    and extracted.
    
    A similar bug would exist for manifests referencing other accounts
    except that neither the X-Object-Manifest (DLO) nor the JSON manifest
    document (SLO) have a way of specifying a different account.
    
    This change makes it so that a container tempurl only grants access to
    objects within its container, *including* large-object segments. This
    breaks backward compatibility for container tempurls that may have
    pointed to cross container *LO's, but (a) there are security
    implications, and (b) container tempurls are a relatively new feature.
    
    This works by having the tempurl middleware install an authorization
    callback ('swift.authorize' in the WSGI environment) that limits the
    scope of any requests to the account or container from which the key
    came.
    
    This requires swift.authorize to persist for both the manifest request
    and all segment requests; this is done by having the proxy server
    restore it to the WSGI environment prior to returning from __call__.
    
    [CVE-2015-5223]
    
    Co-Authored-By: Clay Gerrard &lt;clayg@swiftstack.com&gt;
    Co-Authored-By: Alistair Coles &lt;alistair.coles@hp.com&gt;
    Co-Authored-By: Christian Schwede &lt;cschwede@redhat.com&gt;
    Co-Authored-By: Matthew Oliver &lt;matt@oliver.net.au&gt;
    
    Change-Id: Ie6d52f7a07e87f6fec21ed8b0ec1d84be8b2b11c
    Closes-Bug: 1449212

commit 10b2939b433a4a79b4f7b97640b3d208cacfeffb
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Thu Jul 23 22:36:21 2015 -0700

    Disallow unsafe tempurl operations to point to unauthorized data
    
    Do not allow PUT tempurls to create pointers to other data. Specifically
    disallow the creation of DLO object manifests by returning an error if a
    non-safe tempurl request includes an X-Object-Manifest header regardless of
    the value of the header.
    
    This prevents discoverability attacks which can use any PUT tempurl to probe
    for private data by creating a DLO object manifest and then using the PUT
    tempurl to head the object which would 404 if the prefix does not match any
    object data or form a valid DLO HEAD response if it does.
    
    This also prevents a tricky and potentially unexpected consequence of PUT
    tempurls which would make it unsafe to allow a user to download objects
    created by tempurl (even if they just created them) because the result of
    reading the object created via tempurl may not be the data which was uploaded.
    
    [CVE-2015-5223]
    
    Co-Authored-By: Kota Tsuyuzaki &lt;tsuyuzaki.kota@lab.ntt.co.jp&gt;
    
    Change-Id: I11e68830009d3f6bff44ae4011a41b67139146f6
    Closes-Bug: 1453948

commit c690bcb68331818a04c94741b25f40cc40f7b3c4
Author: Kazuhiro MIYAHARA &lt;miyahara.kazuhiro@lab.ntt.co.jp&gt;
Date:   Mon Aug 17 16:50:56 2015 +0900

    Fix dispersion-reports error message
    
    This patch fixes Swift to show message
    "No objects to query. Has swift-dispersion-populate been run?"
    for "swift-dispersion-report —object-only”
    with no container for object dispersion.
    
    Change-Id: I82da56709cfc296a27f5180681709bc56adbc13d
    Closes-Bug: #1468120

commit 8086a0e53406dc95856df2d3e015d3eaaf81380a
Author: Tushar Gohad &lt;tushar.gohad@intel.com&gt;
Date:   Tue Aug 18 07:24:19 2015 +0000

    Restrict PyECLib version to 1.0.7
    
    v1.0.9 rev of PyECLib replaces Jerasure with a native EC
    implementation (liberasurecode_rs_vand) as the default
    EC scheme.  Going forward, Jerasure will not be bundled
    with PyPI version of PyECLib as it used to be, until
    v1.0.7.
    
    This is an interim change to Swift requirements until we
    get v1.0.9 PyECLib included into global-requirements and
    ready patches that change Swift default ec_type (for doc,
    config samples and unit tests) from "jerasure_rs_vand"
    to "liberasurecode_rs_vand."
    
    Change-Id: Ica4fee2cdea2bc7f5edd0e51ad637a4457faf3b4

commit 17efa343c605d0361b3f423696babbab3f3d972d
Author: Kota Tsuyuzaki &lt;tsuyuzaki.kota@lab.ntt.co.jp&gt;
Date:   Mon Jul 6 13:21:40 2015 -0700

    Fix EC GET backend stream iteration state
    
    In EC case, When GET object requested, proxy-server always makes a log
    line "Client disconnected on read" even though the request succeeded.
    
    That is because ECAppIter class doesn't maintain a bunch of backend
    stream when closing the app_iter. It will cause unfortunately
    GeneratorExit on backend stream ResumingGetter.
    
    This patch fixes to set non_client_disconnected to propagate the state
    to the backend streams when the range iteration stopped successful.
    
    Co-Authored-By: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
    
    Change-Id: I77af9807816bea1444d66534a17e2a210bcf09f8
    Closes-Bug: #1472201

commit 25dc7224b63b039cb3778cca7f9f81f954c6d94e
Author: Alistair Coles &lt;alistair.coles@hp.com&gt;
Date:   Tue Aug 25 11:05:41 2015 +0100

    Fix swob.Range docstring
    
    Bad ranges cause a ValueError to be raised, not an empty
    ranges list.
    
    Change-Id: I118bd2f7dc08ff5198870f4093c6eb350506c8ed

commit a7b84f4c51207608adc3a5de7f4f9a629053c0ab
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Mon Aug 24 23:11:34 2015 -0700

    Allow pep8 of a single file
    
    Now you can run
    
       $ tox -e pep8 path/to/file.py [path/to/file2.py [...]]
    
    to run pep8 against just those files[1]. This is quite a bit faster
    than a full pep8 run, and the faster feedback is nice when you're
    fiddling with some formatting to placate pep8.
    
    Of course, you can still run "tox -e pep8" to check the whole source
    tree, just as before this commit.
    
    [1] It'll still run against bin/swift* as well, but that's still a lot
    faster than running against all our .py files.
    
    Change-Id: I81b4363fb95a34ff0f5c346b2b24f2047154f502

commit 6a35d479e8952c854fee6fbef9fe0397a289a6e5
Author: Matthew Oliver &lt;matt@oliver.net.au&gt;
Date:   Tue Aug 25 11:24:49 2015 +1000

    Follow up patch to fix a multiline import NITPIC
    
    This change cleans up test/unit/obj/test_replicator.py's imports
    to use only 1 version of multiline import syntaxes (' \' vs '()').
    I don't really mind which, but we should be consistant, at least
    in the same file.
    
    This is a follow up for patch 215857.
    
    Change-Id: Ie2d328c25865b19092c493981a803ee246a9d7a5

commit edde5584affaa983d8db1d294bf1e20a2d4bbb50
Author: Hisashi Osanai &lt;osanai.hisashi@jp.fujitsu.com&gt;
Date:   Tue Aug 25 07:52:18 2015 +0900

    Fix typo of a comment in replicator
    
    The typo was introduced by patch 138342 (sorry) so I fix it.
    
    Change-Id: Id5126802d281ef7ee9be128bd2152c0d2584160e

commit 6151c6c45da481c0ea9a4fb876d14b39c1e347bf
Author: Tim Burke &lt;tim.burke@gmail.com&gt;
Date:   Mon Aug 24 20:36:22 2015 +0000

    Fix use of delimiter in account listings
    
    Previously, account listings that used the delimiter query param could
    omit some containers if they ended with the character that follows the
    delimiter.
    
    See If196e3075612b121ef8da4a9128167d00a248c27 for the corresponding fix
    for container listings.
    
    Change-Id: I57fcb97e51f653f5f4e306a632fcb3a0fb148c4e

commit a38f63e1c6b8b85b1675aa900e239a2e9906811e
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Fri Aug 21 18:14:55 2015 -0700

    Use correct Storage-Policy header for REPLICATE requests
    
    Under some concurrency the object-replicator could potentially send the
    wrong X-Backed-Storage-Policy-Index header to it's partner nodes during
    replication if there were multiple storage policies on the same node
    because of a race where multiple jobs being processed concurrently would
    mutate some shared state on the ObjectReplicator instance.
    
    Instead of using shared stated on the ObjectReplicator instance when
    mutating the default headers send with REPLICATION requests each job
    will copy them into a local where they can safely be updated.
    
    Change-Id: I5522db57af7e308b1f9d4181f14ea14e386a71fd

commit ae129bf5e8c918efd8ee66279f98ee85e7c97b24
Author: Kota Tsuyuzaki &lt;tsuyuzaki.kota@lab.ntt.co.jp&gt;
Date:   Fri May 15 06:44:12 2015 -0700

    eventlet.posthook related code needn't anymore
    
    In the past, older Swift seemed to use eventlet.posthooks scheme for the
    logging on proxy with posthooklogger method. However, for now, Swift
    attaches no method to eventlet.posthooks everywhere so we don't have
    to maintain the posthooks anymore.
    
    Change-Id: Ie63941a202d448532d980252a4d25575f8edab9c

commit 4500ff340f021e4e5f6fd53960de03cb3c207925
Author: Kota Tsuyuzaki &lt;tsuyuzaki.kota@lab.ntt.co.jp&gt;
Date:   Wed May 13 00:43:59 2015 -0700

    Fix the missing SLO state on fast-post
    
    When using fast-post and POST (i.e. metadata update) is requested to
    a SLO manifest files, current Swift drops the 'X-Static-Large-Object'
    header from the existing metadata. It results in breaking the SLO
    state because the manifest missing the 'X-Static-Large-Object' metadata
    will be maintained as a normal files.
    
    This patch fixes object-server to keep the existing
    'X-Static-Large-Object' flag and then keep the SLO state.
    
    Change-Id: Ib1eb569071372c322dd105c52baeeb094003291e
    Closes-bug: #1453807

commit 69e7424d3cb6c59341d739c3d41f42397031d96a
Author: Eran Rom &lt;eranr@il.ibm.com&gt;
Date:   Tue Jul 28 09:41:12 2015 +0300

    Add container sync probe test to SAIO default set
    
    SAIO Configuration and documentation changes enabling to run the
    container sync probe test by default
    
    Change-Id: Iccf59533d0d4fe72549d318339ab125d04dde006
    Related-Bug: #1476623

commit 8b1df9918bf6c22b49b161a402199b532bfd8266
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Fri Aug 21 14:04:46 2015 -0700

    Minor cleanup handoff mode warnings
    
      * message is a little clearer
      * test is a little stronger
    
    Change-Id: I745cde7f4a46dafc80ab42d39e6ccc92aa3b746e

commit a1ceab5a92dfdafd5abffed272ac2cece5302f32
Author: Carlos Cavanna &lt;ccavanna@ca.ibm.com&gt;
Date:   Fri Aug 21 14:14:31 2015 -0400

    New troubleshooting case in documentation.
    
    Added a new troubleshooting case for the "First Contribution to Swift"
    documentation page.
    
    Change-Id: I182ba702b49b28409fe56becae93326e5f63dcd0

commit ab163702de733be39ba5e7024c7a8dd4c86bc29b
Author: Pradeep Kumar Singh &lt;pradeep.singh@nectechnologies.in&gt;
Date:   Tue Jul 14 10:03:18 2015 +0530

    Emit warning log in object replicator
    
    When the object-replicator encounters handoffs_first and
    handoff_delete options as enabled it should emit a log
    warning indicating that it should be changed back to the
    default before the next "normal" rebalance.
    
    Closes-Bug: #1457262
    
    Change-Id: If9dc2796c18ed3cf13da920831e2d5c2ae9f12a0

commit be66aa8e76d2994eb8a0a944e0dea26ffbb3c159
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Thu Aug 20 13:24:38 2015 -0700

    Fix 500 for bogus Range request to 0-byte object.
    
    The proxy was trying to pop a byterange off a Range header that didn't
    contain syntactically-valid byteranges. This worked about as well as
    you'd expect. Now we detect the bogus value and remove the header
    entirely.
    
    Change-Id: I24b92f900d33ec79880c7db2870378489d5a6810

commit 4b6836b3bc465e9c2c6d2974c193a49b973c4e4e
Author: Akihito Takai &lt;takaiak@nttdata.co.jp&gt;
Date:   Thu Aug 20 18:40:52 2015 +0900

    Fix the comment in [1].
    
    (line 259) parameter(op) of object_update method is 'PUT' or
    'DELETE' not 'POST' or 'DELETE'.
    
    [1]: swift/obj/updater.py
    
    Change-Id: I876a620ba8e09e69fba7156b12e69445c229e160

commit 923238aa1ba0963c414ba5321cd3910b2910f4ed
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Tue Jul 28 20:35:25 2015 +0530

    test/(functional/probe):Replace python print operator with print function (pep H233, py33)
    
    'print' function is compatible with 2.x and 3.x python versions
    Link : https://www.python.org/dev/peps/pep-3105/
    
    Python 2.6 has a __future__ import that removes print as language syntax,
    letting you use the functional form instead
    
    Change-Id: I416c6ac21ccbfb91ec328ffb1ed21e492ef52d58

commit 47dc31940d64b0c87e99cc73eddcdd01dd8b3ad4
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Wed Aug 19 10:42:28 2015 -0700

    Add OpenStack release names to changelog
    
    I can never remember the mapping of real version numbers to the
    OpenStack names.
    
    Change-Id: Ib7c5ae4ff2a33018364698eb34f8df1622719fab

commit 183508710d011ec30ebba2186c58fd28d449e4bb
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Sun Aug 16 11:18:49 2015 +0200

    pep8: Don't override '_' symbol
    
    Fix pep8 warning F402 "import '_' from line 51 shadowed by loop
    variable".
    
    Change-Id: I139060ff5d298a8b0f0f8e529a5737478fb5daf5

commit c7eb589c6ca2fe4f2950cae22a18513e4dec6c46
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Sun Aug 16 11:06:52 2015 +0200

    pep8: Fix usage of the l10n _('...') function
    
    Fix the pep8 warning H702 "Formatting operation should be outside of
    localization method call".
    
    For the logger, pass parameters as indexed parameters instead of using
    the string str%args operator, the logger is more reliable in case of
    formatting error.
    
    Change-Id: If418bc155f6a6c0a00f63e3d87ebe4addf4aae55

commit 7bea148d2fe22daa9d1fbbc5cd16ebd390b64b1b
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Sun Aug 16 10:34:26 2015 +0200

    pep8: replace deprecated calls to assert_()
    
    The TestCase.assert_() has been deprecated in Python 2.7. Replace it
    with assertTrue() or even better methods (assertIn, assertNotIn,
    assertIsInstance) which provide better error messages.
    
    Change-Id: I21c730351470031a2dabe5238693095eabdb8964

commit 8aaacbf88d9ea4432e58dd261b98ff95d7c69be6
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Mon Jul 27 18:55:01 2015 +0200

    pep8: Fix hacking H232 warnings (octal)
    
    Fix warnings "H232: Python 3.x incompatible octal 000001234 should be
    written as 0o1234".
    
    Change-Id: I9a7bbb034357783885ac3e18fe1e9e32a5951616

commit 5b01c5eadc3a13607d2581a55007700fca0b00af
Author: Bill Huber &lt;wbhuber@us.ibm.com&gt;
Date:   Fri Aug 7 16:24:28 2015 -0500

    Add unit test for container_update for unmounted device
    
    This unit test case gains coverage for container/update.py
    where a device (i.e. sda1) is not mounted and the code
    responds with a warning logger that the device is not
    mounted and continues.  Coverage increases 2% as a result.
    
    Change-Id: I33d247a930b28604093df4ade1ce7dbbd24aac54

commit d6267c1f95a7fcd2b0e4f15d5efc6bcfe2114de0
Author: Clément Contini &lt;ccontini@cloudops.com&gt;
Date:   Wed Aug 12 15:00:45 2015 -0400

    Keep user id and project id in subrequests env
    
    Keep HTTP_X_USER_ID and HTTP_X_PROJECT_ID to be available as
    user_id and project_id in storage.objects.outgoing.bytes in
    ceilometer when downloading a multipart object.
    
    Change-Id: I0f4734f021e5d6e84d48ed9bebeb321d7a9590ad
    Closes-Bug: #1477283

commit eaa006464cb98a2f36809edfa13bd3dcaebc9952
Author: John Dickinson &lt;me@not.mn&gt;
Date:   Mon Aug 17 22:13:42 2015 -0700

    move global statement up a few lines
    
    Change-Id: I190d2d530c6c0525d988cc88b0965b48a291fffb

commit 1a81cda8b7eba0d25ea7341da756bb588cae8d73
Author: Hamdi Roumani &lt;roumani@ca.ibm.com&gt;
Date:   Mon Aug 3 17:45:56 2015 -0400

    Doc instructions for post rebase steps
    
    Improve the 'first_contribution_swift' by adding instructions for how to
    rebuild swift following a rebase.
    
    Change-Id: If5c91dc4e1e8d1712bbd8b326c675967fb4b8c15

commit 79ba4a85983641e539b620bd143e62673c98416e
Author: Hisashi Osanai &lt;osanai.hisashi@jp.fujitsu.com&gt;
Date:   Wed Dec 3 06:15:16 2014 +0900

    Enable Object Replicator's failure count in recon
    
    This patch makes the count of object replication failure in recon.
    And "failure_nodes" is added to Account Replicator and
    Container Replicator.
    
    Recon shows the count of object repliction failure as follows:
    $ curl http://&lt;ip&gt;:&lt;port&gt;/recon/replication/object
    {
        "replication_last": 1416334368.60865,
        "replication_stats": {
            "attempted": 13346,
            "failure": 870,
    	"failure_nodes": {
                "192.168.0.1": {"sdb1": 3},
                "192.168.0.2": {"sdb1": 851,
                                "sdc1": 1,
                                "sdd1": 8},
                "192.168.0.3": {"sdb1": 3,
                                "sdc1": 4}
    	},
            "hashmatch": 0,
            "remove": 0,
            "rsync": 0,
            "start": 1416354240.9761429,
            "success": 1908
        },
        "replication_time": 2316.5563162644703,
        "object_replication_last": 1416334368.60865,
        "object_replication_time": 2316.5563162644703
    }
    
    Note that 'object_replication_last' and 'object_replication_time' are
    considered to be transitional and will be removed in the subsequent
    releases. Use 'replication_last' and 'replication_time' instead.
    
    Additionaly this patch adds the count in swift-recon and it will be
    showed as follows:
    $ swift-recon object -r
    ========================================================================
    =======
    --&gt; Starting reconnaissance on 4 hosts
    ========================================================================
    =======
    [2014-11-27 16:14:09] Checking on replication
    [replication_failure] low: 0, high: 0, avg: 0.0, total: 0, Failed: 0.0%,
    no_result: 0, reported: 4
    [replication_success] low: 3, high: 3, avg: 3.0, total: 12,
    Failed: 0.0%, no_result: 0, reported: 4
    [replication_time] low: 0, high: 0, avg: 0.0, total: 0, Failed: 0.0%,
    no_result: 0, reported: 4
    [replication_attempted] low: 1, high: 1, avg: 1.0, total: 4,
    Failed: 0.0%, no_result: 0, reported: 4
    Oldest completion was 2014-11-27 16:09:45 (4 minutes ago) by
    192.168.0.4:6002.
    Most recent completion was 2014-11-27 16:14:19 (-10 seconds ago) by
    192.168.0.1:6002.
    ========================================================================
    =======
    
    In case there is a cluster which has servers, a server runs with this
    patch and the other servers run without this patch. If swift-recon
    executes on the server which runs with this patch, there are unnecessary
    information on the output such as [failure], [success] and [attempted].
    Because other servers which run without this patch are not able to
    send a response with information that this patch needs.
    Therefore once you apply this patch, you also apply this patch to other
    servers before you execute swift-recon.
    
    DocImpact
    Change-Id: Iecd33655ae2568482833131f422679996c374d78
    Co-Authored-By: Kenichiro Matsuda &lt;matsuda_kenichi@jp.fujitsu.com&gt;
    Co-Authored-By: Brian Cline &lt;bcline@softlayer.com&gt;
    Implements: blueprint enable-object-replication-failure-in-recon

commit eeb0fa40a19917e6548f95f0bd3c08736928449b
Author: Christian Schwede &lt;cschwede@redhat.com&gt;
Date:   Thu Aug 6 07:21:15 2015 +0000

    Make swift-ring-builder filename usage more consistent
    
    Sometimes the given argument is internally altered and another filename is used
    without a note to the operator. Even worse, a given .ring.gz filename is
    sometimes written out as builder file, without updating the corresponding
    .builder file.
    
    There is already a method to parse the given argv and return the name of the
    builder and ring file. However, it's rarely used and no warning is given to the
    user if it is altered. This patch uses the already parsed builder and ring file
    name instead of argv[1], and also adds a note to the user if the used filename
    is differently to the one given as argument.
    
    Closes-Bug: 1482096
    Change-Id: I2f8ef23aeab8b07caaa799f7dcd57e684b4b2ad2

commit b75d2a4e37d4c86763a2cc56c6dd53ebe2e0de19
Author: Bill Huber &lt;wbhuber@us.ibm.com&gt;
Date:   Mon Aug 17 13:54:44 2015 -0500

    Quorum on durable response is too low
    
    Increase the .durable quorum from 2 to "parity + 1" to guarantee
    that we will never fail to rebuild an object.  Otherwise, with
    low durable responses back (&lt; parity + 1), the putter objects
    return with failed attribute set to true, thereby failing the
    rebuild of fragments for an object.
    
    Change-Id: I80d666f61273e589d0990baa78fd657b3470785d
    Closes-Bug: 1484565

commit fa35e38c9f83f704eb087f80157cbe33b23b9db2
Author: Kai Zhang &lt;zakir.exe@gmail.com&gt;
Date:   Fri Aug 14 16:46:35 2015 -0700

    Fix some minor typos
    
    Fixed some typos in function name and comments.
    
    Change-Id: Ida76ab4b331a51b71e57650702acc136e66ba4b2

commit 5b246e875fe9ac3d764ea581ad52b04238f5bcc8
Author: Kota Tsuyuzaki &lt;tsuyuzaki.kota@lab.ntt.co.jp&gt;
Date:   Wed Jul 22 10:39:22 2015 -0700

    Fix EC range GET/COPY handling
    
    When range GET (or COPY) for an EC object requested, if the requested range
    starts from more than last segments alignment (i.e.
    ceil(object_size/segment_size) * segment_size), proxy server will return
    the original content length w/o body, though Swift should return an error
    massage as a body and the length of message as the content length.
    The current behavior will cause stuck on some client. (e.g. curl)
    
    This patch fixes that proxy enables to return correct response, even if such
    an over range requested.
    
    Co-Authored-By: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
    
    Change-Id: I21f81c842f563ac4dddc69011ed759b744bb20bd
    Closes-Bug: #1475499

commit 7064706b2721c36c5181267f58704b9344ad4ac0
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Tue Aug 11 10:17:20 2015 -0500

    Fix 500 in versioned writes with bad Destination
    
    When this code lived in the proxy, it was protected by an "except
    HTTPException" clause in proxy.Application.handle_request(). When it
    moved to middleware, it lost that, and then things like
    constraints.check_name_format that raised HTTPException would cause
    500s. The HTTPException would make it all the way out to catch_errors
    and get translated to a 500.
    
    This commit just wraps a couple try/excepts around the bits in
    versioned writes that can raise HTTPException. I tried to make it use
    wsgify so I could get that for free, but that wound up being a real
    pain because env/start_response are plumbed through pretty much the
    whole versioned-writes middleware.
    
    Closes-Bug: 1483705
    
    Change-Id: Ife165bf709e64f313ed07c779b21914045e51f25

commit 035a411660ca02983cd486312266c67d78a2359c
Author: Thiago da Silva &lt;thiago@redhat.com&gt;
Date:   Sun Nov 9 13:13:27 2014 -0500

    versioned writes middleware
    
    Rewrite object versioning as middleware to simplify the PUT method
    in the object controller.
    
    The functionality remains basically the
    same with the only major difference being the ability to now
    version slo manifest files. dlo manifests are still not
    supported as part of this patch.
    
    Co-Authored-By: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
    
    DocImpact
    Change-Id: Ie899290b3312e201979eafefb253d1a60b65b837
    Signed-off-by: Thiago da Silva &lt;thiago@redhat.com&gt;
    Signed-off-by: Prashanth Pai &lt;ppai@redhat.com&gt;

commit 968c91a465627bb9317ed6e2ae9ccd818c83c0c4
Author: Alistair Coles &lt;alistair.coles@hp.com&gt;
Date:   Tue Jul 28 10:31:54 2015 +0100

    Replace assertTrue(not &lt;condition&gt;) with assertFalse(&lt;condition&gt;)
    
    The replacement of assert_ with assertTrue [1] resulted in a number of
    tests using calls of the form assertTrue(not &lt;condition&gt;). This patch
    replaces those with assertFalse(&lt;condition&gt;).
    
    [1] change I74705c6498249337bfdf955d62e0ad972035bc1f
    
    Change-Id: I78b49558f4425c2335df187b1793d1e4b3c514b1

commit 4ac1fea5d111c669ff827f4eb29c0735cbad6ba5
Author: Zhao Lei &lt;zhaolei@cn.fujitsu.com&gt;
Date:   Fri Aug 7 22:07:01 2015 +0800

    Fix some spelling typo in comments
    
    s/overide/override for object-expirer.conf and sample.
    s/automaticaly/automatically for swift/proxy/controllers/obj.py
    
    Change-Id: Ife107c7a1005a5d4959288db50a7f8f33c522dd4
    Signed-off-by: Zhao Lei &lt;zhaolei@cn.fujitsu.com&gt;

commit 9456af35a2832aeafc4a4e78ebd0d4142ead71cd
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Thu Aug 6 00:55:36 2015 +0530

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3,changes in
    dir:
    *test/unit/obj/*
    *test/unit/test_locale/*
    
    Change-Id: I3dd0c1107165ac529f1cd967363e5cf408a1d02b

commit 1952451ed7e97e2bfa3b11dfa5000cc39f712084
Author: Zhao Lei &lt;zhaolei@cn.fujitsu.com&gt;
Date:   Fri Aug 7 21:57:08 2015 +0800

    Fix a spelling typo in comment
    
    s/automaticaly/automatically/ for swift/proxy/controllers/obj.py
    
    Change-Id: I405441383739637e0b13746d6f4e2bad1c874b4d
    Signed-off-by: Zhao Lei &lt;zhaolei@cn.fujitsu.com&gt;

commit c35cc13b8abeb97400632cbe8ec56fc1040d8210
Author: Bill Huber &lt;wbhuber@us.ibm.com&gt;
Date:   Thu Aug 6 10:01:17 2015 -0500

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3 in the following dir:
    test/unit/proxy/*
    
    Change-Id: Ie2c7e73e1096233a10ee7fbf6f88386fa4d469d6

commit 239e94e62518f36601fb18119700269753d02a01
Author: Bill Huber &lt;wbhuber@us.ibm.com&gt;
Date:   Thu Aug 6 09:28:51 2015 -0500

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3 in the following dir:
    test/probe/*
    
    Change-Id: Ie08dd7a8a6c48e3452dfe4f2b41676330ce455d5

commit 49b9ba37ac522502ccad66fba7bfef375eab145d
Author: Bill Huber &lt;wbhuber@us.ibm.com&gt;
Date:   Wed Aug 5 14:51:32 2015 -0500

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3 in the following dir:
    test/functional/*
    
    Change-Id: Iee7f8ffca9838ccc521107180697d91ac9559405

commit 81816bebe6b3506af8cabaa7ebe265c70f3499cd
Author: kenichiro matsuda &lt;matsuda_kenichi@jp.fujitsu.com&gt;
Date:   Thu Aug 6 10:13:02 2015 +0900

    Fix shebang of commands
    
    Fix shebang of following commands.
      $ grep '#!/usr/bin/python' swift/bin/*
      swift/bin/swift-account-info:#!/usr/bin/python
      swift/bin/swift-container-info:#!/usr/bin/python
      swift/bin/swift-container-sync:#!/usr/bin/python
      swift/bin/swift-recon:#!/usr/bin/python
      swift/bin/swift-ring-builder:#!/usr/bin/python
      swift/bin/swift-ring-builder-analyzer:#!/usr/bin/python
    
    Change-Id: I564d1d8abd76eba57730fc2f30263b0a0f809867
    Closes-Bug: #1481623

commit 652f0f9da408e955843f87a504b3dab5be3cff80
Author: Pete Zaitcev &lt;zaitcev@kotori.zaitcev.us&gt;
Date:   Wed Aug 5 15:33:29 2015 -0600

    Having said H, I, J, we ought to say K
    
    In the long run, we might want to stop these updates. But this
    decision is above my pay grade.
    
    Change-Id: I335558e1da8052be1b215fbad51244b47af3d81b

commit ed3aec2146b114c85bb3b196c999bf3f44fe159e
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Thu Aug 6 00:18:52 2015 +0530

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3 in
    dir: test/unit/container/*
    
    Change-Id: I3333022ed63ce03198bc73147246d91d2442a440

commit f449e914728fdcaf0870c15b9fc5ebd16a9df916
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Wed Aug 5 22:32:02 2015 +0530

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3, fixing in:
    dir: test/unit/cli/*
    
    Change-Id: I9a2fc1f717beafd5fa8408942046e310e8de0318

commit 6594bbebb582801c069c4966352fee19eadef2f8
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Wed Aug 5 22:25:46 2015 +0530

    pep8 fix: assertEquals -&gt; assertEqual
    
    assertEquals is deprecated in py3 in
    dir : test/unit/account/*
    
    Change-Id: I70415197df1b0d58d4d6e219733c13a9c9cdfff7

commit 89f59062864e5cbfc839a6084c323ce35438aa57
Author: Ben Martin &lt;blmartin@us.ibm.com&gt;
Date:   Mon Jul 27 14:19:09 2015 -0500

    +Document method to avoid rsync filling root drive
    
    When rsync pushes to a remote node with an unmounted drive and if
    certain steps are not taken, rsync may attempt to write files to
    the local drive at the location where the drive was mounted.
    
    There are two suggested solutions for this issue:
      1) Set the permissions for all mount points in /srv/node/
           to root:root 755
      2) Mount the drives elsewhere and symlink the drives to /srv/.../
    
    The first method ensures that only root and not the swift user
    can write in the /srv/.../ directories.
    
    The second method will prompt a broken link issue if rsync
    attempts to write to an unmounted drive.
    
    Change-Id: I60ce4ed9ef8401768d5f78b6806cbb2e2a65303e
    Closes-Bug: #1470576

commit f0d51882b921075f5309ed6ff07385dc6103d4dc
Author: Charles Hsu &lt;charles0126@gmail.com&gt;
Date:   Wed Aug 5 22:09:40 2015 +0800

    Add extra_header_count to document and config.
    
    Change-Id: Iec86b488d71553c295afe7098822ce2046df9546

commit 7071762d3698c59fabdee76890e300f81417be74
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Tue Aug 4 23:15:37 2015 -0700

    Fix TypeError if backend response doesn't have expected headers
    
    There was some debug logging mixed in with some error handling on PUTs
    that was relying on a very specific edge would only encounter a set of
    backend responses that included the expected set of headers to diagnoise
    the failure.
    
    But the backend responses may not always have the expected headers.
    
    The proxy debug logging should be more robust to missing headers.
    
    It's a little hard to follow, but if you look `_connect_put_node` in
    swift.proxy.controller.obj - you'll see that only a few connections can
    make their way out of the initial put connection handling with a "resp"
    attribute that is not None.  In the happy path (e.g. 100-Continue) it's
    explictly set to None, and in most errors (Timeout, 503, 413, etc) a new
    connection will be established to the next node in the node iter.
    
    Some status code will however allow a conn to be returned for validation
    in `_check_failure_put_connections`, i.e.
    
      * 2XX (e.g. 0-byte PUT would not send Expect 100-Continue)
      * 409 - Conflict with another timestamp
      * 412 - If-None-Match that encounters another object
    
    ... so I added tests for those - fixing a TypeError along the way.
    
    Change-Id: Ibdad5a90fa14ce62d081e6aaf40aacfca31b94d2

commit 01848c565e5821d2500cb234261c70871e562ebe
Author: David Goetz &lt;dpgoetz@gmail.com&gt;
Date:   Fri Jun 26 17:27:31 2015 -0700

    Speed up reaper for a big account delete and some better error handling
    
    In run_forever mode, run the reaper on all three copies of the account
    DB instead of just the first one and shard the containers between them.
    
    Change-Id: Id182e89dad70df9d6d9988523861b8085d74c765

commit 5b24b2249878e25ee702ee4237227c984036c6ec
Author: OpenStack Proposal Bot &lt;openstack-infra@lists.openstack.org&gt;
Date:   Tue Aug 4 06:29:11 2015 +0000

    Imported Translations from Transifex
    
    For more information about this automatic import see:
    https://wiki.openstack.org/wiki/Translations/Infrastructure
    
    Change-Id: I9f0e5fd25ec143fb87de1895794764dea4587f93

commit 8d06f56c1fac23bca463d3a93353da6b50ad5bed
Author: Takashi NATSUME &lt;natsume.takashi@lab.ntt.co.jp&gt;
Date:   Tue Aug 4 10:14:25 2015 +0900

    Fix typo of 'receive'
    
    Change-Id: Ic01defa8d48ba4b7f4bd6cbe4d59b9bab468a36c

commit 310ac18d61b001bdf297505243d8aa62e8fde8fe
Author: Brian Reitz &lt;brian.reitz@oracle.com&gt;
Date:   Mon Aug 3 16:28:31 2015 -0500

    Convert docstring to a comment in test_denied_DELETE_of_versioned_object unit test.
    
    Docstrings cause issues for nose and created non standard test output for this test.
    
    Change-Id: I91e6450480567de0ee0b18d3efae01a4b94f0a86

commit 21a7b4aaa6f991c0eeb8f74876b14fe22713586b
Author: Alistair Coles &lt;alistair.coles@hp.com&gt;
Date:   Mon Aug 3 14:58:24 2015 +0100

    Test that get_hashes ignores only removed hash dir
    
    Add test for case not yet covered by unit tests: suffix dir
    has two hash dirs, one with expired tombstone. That hash dir gets
    removed and its hash is not included in the suffix hash, but the
    remaining hash dir's hash is reported.
    
    Change-Id: I031a022daed6b8a66dfd04bea1b4d5eebcb882b3

commit 44917c8a90e79a85cd6c6821d8b6d043f83b322d
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Mon Jul 20 13:06:48 2015 -0700

    Handle removed suffix dirs the same as empty suffix dirs
    
    When hashes suffix dirs, the directory might have gotten cleaned up while
    still appearing in hashes.pkl.  It would even get cleaned up the next time.
    
    For example, given this really old tombstone:
    
        objects/846/3d0/d3a20154d0a828a032aba6860397c3d0/1432267961.41808.ts
    
    Prior to this commit, a call to get_hashes() would reap the old
    tombstone and any empty containing dirs, but the resulting hashes.pkl
    would still contain {'3d0': 'd41d8cd98f00b204e9800998ecf8427e'} even
    though there's no such suffix dir any more.
    ("d41d8cd98f00b204e9800998ecf8427e" is the MD5 of the empty string.)
    
    Then, a *subsequent* get_hashes() call would omit 3d0 from the resulting
    hash, so then hashes.pkl would no longer contain 3d0. This difference
    would result in a little useless replication traffic while nodes without
    a particular part/suffix pair, but who disagreed on how that showed up
    in hashes.pkl, tried to push their version of nothing to one another.
    
    Now, an empty suffix dir doesn't appear in hashes.pkl at all, whether
    it's for replication or EC, or whether it's for the get_hashes() call
    that reaped the suffix dirs or not.
    
    Co-Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
    
    Change-Id: Ie1bfb1cc56d0fc030c6db42f97b55d140695cf1f

commit cf4d50bd68b658d35759fb56446557858dcd9572
Author: Alistair Coles &lt;alistair.coles@hp.com&gt;
Date:   Fri Jun 5 13:06:29 2015 +0100

    Make test_proxy work independent of env vars
    
    test.unit.common.test_internal_client.TestSimpleClient.test_proxy
    will fail if the environment has http_proxy set and does not have
    no_proxy=127.0.0.1 set. This seems to be because urllib overrides
    any proxy arg passed to the Request with the env http_proxy var,
    unless the Request host is in no_proxy.
    
    We don't need to test urllib, so this patch changes the test to
    simply ensure that swift code does pass the correct proxy arg to
    urllib2.urlopen. That avoids testers having to make sure their
    env vars are compliant to successfully run unit tests. While it is
    reasonable to think that 127.0.0.1 is in the no_proxy list, it
    shouldn't be a requirement pass swift tests.
    
    Change-Id: Iff91acdb76fabe7056b3e90e2756e27fe5105817

commit 67513fc17c23066f6547b5e3c4ab2dc852e4f7f0
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Sat Jun 27 23:26:47 2015 +0530

    Adding bandit for security static analysis testing in swift
    
    This change adds a basic bandit config for Swift. It can be invoked
    by running the tox environment for bandit;
        tox -e bandit
    
    This is an initial step for using bandit with Swift
    and it should be revisited to improve the testing as more is learned
    about the specific needs of the Swift code base.As per now some tests
    are excluded as they were used on purpose.
    
    https://wiki.openstack.org/wiki/Security/Projects/Bandit
    
    Implements: blueprint swift-bandit
    
    Change-Id: I621be9a68ae9311f3a6eadd1636b05e646260cf2

commit 768d7ab074807175471d589de96d091e3239052e
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Thu Jul 30 15:30:35 2015 -0700

    Add a probetest for HUP/reload
    
    This would have been enough to catch the regression, and we can extend
    them as we work on any future ehancements to our process management.
    
    Change-Id: I9a1b57aa15663380c45cf783afc8212ab4ffbace

commit 207dd9b49d7d53a9faa4849af2c40bb875416fce
Author: Darrell Bishop &lt;darrell@swiftstack.com&gt;
Date:   Thu Jul 30 14:32:08 2015 -0700

    Fix regression in WSGI server SIGHUP behavior
    
    The SIGHUP receipt used to pop us out of an os.wait() where now, it's in
    a "green" wait() and Timeout() combo, some part of which eats the signal
    receipt.  This causes the while loop condition to never get checked and
    SIGHUP no longer works as a server reload command.
    
    The fix is to loop at least every 0.5 seconds, as a trade-off between
    not busy-waiting and checking the "keep running" condition often enough
    to feel responsive.
    
    Change-Id: I95283b8b7cfc2998ab5813e0ad3ca1fa231696c8
    Closes-Bug: #1479972

commit bcd00d9461603db1477c5f1e9f8dd6405a319eb9
Author: Alistair Coles &lt;alistair.coles@hp.com&gt;
Date:   Mon Jun 8 19:40:56 2015 +0100

    Refactor diskfile
    
    This patch mostly eliminates the duplicate code that was
    deliberately left in place during EC review to avoid major
    churn of the diskfile module prior to the kilo release.
    
    This focuses on obvious de-duplication and shuffling code
    between classes. It deliberately does not attempt to
    hammer out every last piece of de-duplication where that
    would introduce more complex changes - that can come later.
    
    Code is moved from the module level and from ECDiskFile*
    classes into new BaseDiskFile* classes.
    
    Concrete classes for replication and EC policy retain their
    existing names i.e. DiskFile[Manager|Writer|Reader|] and
    ECDiskFile[Manager|Writer|Reader|] respectively.
    
    Knock-on changes:
    
    - fix bug whereby get_hashes was ignoring self.reclaim_age
      and always using the default arg value.
    
    - replication diskfile manager now deletes a tombstone that is older
      than reclaim_age even when there is a newer .meta file.
    
    - replication diskfile manager will no longer raise an
      AssertionError if only a .meta file is found during
      hash_cleanup_listdir.
    
    - fix stale test in test_auditor.py: test_with_tombstone test
      setup was convoluted (probably dates back to when object puts
      did not clean up the object dir). Now that they do you have to
      try harder to create a dir with a tombstone and a data file.
    
    Change-Id: I963e0d0ae0d6569ad1de605034c529529cbb4f9a

commit 9cb7eb4a4b6cdab8a5f16b3dc800b39ab4068522
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Mon Jul 27 11:34:07 2015 +0200

    Update hacking to 0.10.0
    
    Replace the whitelist of flake8 checks (select) with a blacklist
    (ignore).  It makes possible to disable a single check, which was not
    possible before. This new approach permits to enable new tests more
    easily and see which checks are currently disabled.
    
    Only new checks are disabled, this change doesn't run less checks than
    before. Currently, many checks are disabled, but following changes will
    fix these new warnings.
    
    When the "select" option of flake8 is used in tox.ini, the "ignore"
    option is ignored. It is not possible to use "select" and "ignore"
    options at the same time. See the code in pep8 (flake8 is based on
    pep8):
    
    https://github.com/PyCQA/pep8/blob/d48eef071003952ed0f98445dc3dc6bc29618f9c/pep8.py#L1808
    
    The purpose of flake8 is to enhance the coding style, but also to help
    to detect common bugs. Blacklisting checks permits to detect new bugs
    when upgrading the tools. For example, new checks were recently added to
    help porting code to Python 3.
    
    This change permits to use pbr 1.0 and newer which is required to
    support Python 3. Previously, hacking 0.8.1 was used, but hacking 0.8 is
    incompatible with pbr 1.0 and newer (hacking 0.8 requires pbr&lt;1.0).
    
    pbr 1.0 is required to use environment markers on requirements to
    install dnspython on Python 2 and dnspython3 on Python 3.
    
    Change-Id: I41d63b9467083d7606ad18aaa398ca7738b27fae

commit 389a97e3526df68121cecfaf1909343b5d381cbc
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Wed Jul 29 23:46:58 2015 +0200

    Fix pep8 E warning for hacking 0.10
    
    Fix pep8 warnings of the E category of hacking 0.10:
    
    * E113: unexpected indentation
    * E121: continuation line under-indented for hanging indent
    * E122: continuation line missing indentation or outdented
    * E123: closing bracket does not match indentation of opening bracket's
      line
    * E126: continuation line over-indented for hanging indent
    * E251: unexpected spaces around keyword / parameter equals
    
    Change-Id: I0b24eebdf1a37dc1b572b6c9a3d3d4832d050237

commit d719064e788ec5fa70305fadaa46affcb603a9bb
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Thu Jul 30 00:28:44 2015 +0200

    Fix warning pep8 E128 warning of hacking 0.10
    
    Fix the warning E128: "continuation line under-indented for visual
    indent" of pep8.
    
    Change-Id: Ie6c6ae341fe3d6281f2095c1d756d552fa5937f9

commit a0db56dcde83096708e6fe64ae9338098e0ba98a
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Thu Jul 30 00:16:06 2015 +0200

    Fix pep8 E265 warning of hacking 0.10
    
    Fix the warning E265 "block comment should start with '# '" added in pep
    1.5.
    
    Change-Id: Ib57282e958be9c7cddffc7bca34fbbf1d4c460fd

commit 345785837f1caa01fec5bca091c70481d7069bea
Author: Charles Hsu &lt;charles0126@gmail.com&gt;
Date:   Thu Jul 30 13:11:00 2015 +0800

    Remove error_suppression_interval, error_suppression_limit options.
    
    These two options is belong to proxy-server, not account-replicator.
    
    Change-Id: Ie030ecffd213e56db32df77c69b847479d96308f

commit 5a7383313b1c555df5fd47050f7ee3810b5e31fc
Author: Carlos Cavanna &lt;ccavanna@ca.ibm.com&gt;
Date:   Tue Jul 28 19:15:25 2015 -0400

    Swift documentation for first-time contributors.
    
    In this change, there are proposed improvement to Swift documentation aimed at
    first-time contributors. They include a simplification of the Getting
    Started page and a new page with some basic instructions/commands that the
    first-time contributor should know. In addition, it shows some common errors
    that the first-time contributor may find when executing git rebase and
    information on how to track your changes.
    
    Change-Id: I704202955093736b2f3b4102a649690a0392c6b0

commit 5b5c8820024141bc6ae49d7646a92fb53667ea9b
Author: Alistair Coles &lt;alistair.coles@hp.com&gt;
Date:   Wed Jul 29 12:36:35 2015 +0100

    Remove unused code in swift/obj/server.py
    
    keep_cache was defined twice
    
    Change-Id: I5f775f618669e3dabfc3bc54dd7bd2cd7f00b2f0

commit 0c27cb07caf1027cd9734e8bd34d9759da33e667
Author: OpenStack Proposal Bot &lt;openstack-infra@lists.openstack.org&gt;
Date:   Wed Jul 29 06:36:01 2015 +0000

    Imported Translations from Transifex
    
    For more information about this automatic import see:
    https://wiki.openstack.org/wiki/Translations/Infrastructure
    
    Change-Id: Ic30cb1dc8f12280a52cc1f07a1cf516397ed680e

commit c5b5cf91a984f80cc6cbe42735b242083d700542
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Tue Jul 28 21:03:05 2015 +0530

    test/unit: Replace python print operator with print function (pep H233, py33)
    
    'print' function is compatible with 2.x and 3.x python versions
    Link : https://www.python.org/dev/peps/pep-3105/
    
    Python 2.6 has a __future__ import that removes print as language syntax,
    letting you use the functional form instead
    
    Change-Id: I94e1bc6bd83ad6b05695c7ebdf7cbfd8f6d9f9af

commit 117b61976fbf14d8a0d2157256f9a3230421ee72
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Wed Jul 22 15:40:55 2015 -0700

    functests: use assertIn and assertNotIn
    
    We have a bunch of assertions like
    
        self.assertTrue(resp.status in (200, 204))
    
    Sometimes we get smart about failure messages and have something like
    
        self.assertTrue(resp.status in (200, 204), resp.status)
    
    so we can see what the status was when it failed.
    
    Since we don't have to support Python 2.6 any more, we can use
    assertIn/assertNotIn and get nice failure messages for free.
    
    Change-Id: I2d46c9969d41207a89e01017b4c2bc533c3d744f

commit 8fe8bee7e0c5c9d34d7a8e6ab090c8d65c5ca78e
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Tue Jul 21 18:06:32 2015 +0530

    test/(functional, probe): Replace "self.assert_" by "self.assertTrue"
    
    The assert_() method is deprecated and can be safely replaced by assertTrue().
    This patch makes sure that running the tests does not generate warnings
    all over the screen.
    
    Change-Id: I74705c6498249337bfdf955d62e0ad972035bc1f

commit 4a6e0ccc69302a5384b988149e294656323d7f20
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Mon Jul 20 11:58:35 2015 -0700

    Rename WsgiStringIO -&gt; WsgiBytesIO.
    
    If we're going to have a subclass of BytesIO, having "StringIO" in its
    name is just asking for confusion.
    
    Change-Id: I695ab3105b1a02eb158dcf0399ae91888bc1c0ac

commit 5ee742c17d9ea92ca7332cb67db0cce64b7a0d8f
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Fri Jul 24 21:19:47 2015 +0530

    Modifying Lambda function tuple usage for python3
    
    Current tuple unpacking is not supported in python3
    
    Change-Id: I15a8e977684d19154cf2233caf1174f6983ac9e2

commit 6f89f71f9ba11f7b4126b80076a0f13792332e1e
Author: Alistair Coles &lt;alistair.coles@hp.com&gt;
Date:   Wed Apr 15 16:17:23 2015 +0100

    Filter Etag key from ssync replication-headers
    
    ssync rx sends a header X-Backend-Replication-Headers whose value is a
    list of headers that the source object has. This list extends the list
    of allowed headers on the target object server, so that the target
    object metadata is faithfully reconstructed to match the source.
    
    Unfortunately the combination of lower() and title() operations on
    header keys results in the source 'ETag' value being added to the target
    metadata under the key 'Etag' in addition to the 'ETag' key that the
    receiving server adds (note different capitilization), both having
    the same value.
    
    The spurious 'Etag' metadata is potentially confusing for humans
    inspecting the object metadata and complicates tests that wish to
    assert the equality of two object metadata dicts. See for example the
    test in test_ssync_sender.py that this patch cleans up.
    
    Furthermore, the possibility of having both Etag and ETag keys has
    required a workaround in the EC reconstructor [1].
    
    [1] reconstructor fix change id: Ie59ad93a67a7f439c9a84cd9cff31540f97f334a
    
    Change-Id: I0c89cf7924a4471bb6d268b5ef3884e2d2cb4286

commit e2f69138bf5fcdd84ac23be6b0bec1bb006b41f5
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Thu Jul 23 16:46:48 2015 -0700

    Fix string formatting in dispersion cli command
    
     ... and add a basic test that would have prevented the regression
    
    Change-Id: I4c5f643ee291dcc1397ca951450459d8b8ad0bbd

commit 83025ff38dfea3d4e3f27dc045128a7aa4ba11e4
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Fri Jul 24 11:09:10 2015 -0700

    Use right most occurrence object dir in diskfile.extract_policy
    
      I like using the rightmost one more; it's basically
      /operator-defined/mountpoint/objects/part/suffix/hash/ts.data, so I
      don't see any opportunity for other things named "objects" to creep in on the
      right of the real objects-N dir; but I could see some admin using
      /srv/object-storage/ or something
    
        -- Torgomatic The Wise
    
    Change-Id: I0a63a3e02df091a5ee2e110a345183012e357a2f

commit 363a256e58ee0f3e9f059352c2de968e3dc398e3
Author: Falk Reimann &lt;falk.reimann@sap.com&gt;
Date:   Wed Jun 24 16:54:02 2015 +0200

    Support keystone v3 domains in swift-dispersion
    
    This provides the capability to specify a project_name,
    project_domain_name and user_domain_name in /etc/swift/dispersion.conf.
    If this values are set in dispersion.conf they get populated to the
    swift-client.  With this it is possible to have a specific dispersion
    project specified, which is not the keystone default domain.  Changes
    were applied to swift-dispersion-populate and swift-dispersion-report.
    Relevant man pages, the example dispersion.conf and the admin guide were
    updated accordingly.
    
    DocImpact
    Closes-Bug: #1468374
    
    Change-Id: I0e716f8d281b4d0f510bc568bcee4a13fc480ff7

commit 3d9b2d077a157279fb6cd107a0c83727106af3ef
Author: Daisuke Morita &lt;morita.daisuke@lab.ntt.co.jp&gt;
Date:   Fri Jul 24 10:42:10 2015 +0900

    Fix swift-object-info to show policy index at deep working directory
    
    If swift-object-info command is executed at deeper working directory
    than 'objects-*' directory, it cannot parse policy index from file path
    so it does not show appropriate policy index. This patch fixes this
    problem by simply extracting the full path of a target object file.
    
    Change-Id: Idb734106a44b6121119c9b1dc8cdaaf4c6c28c31
    Closes-Bug: 1469951

commit e24d7c36fa9758618ef88ed1a8e19f4d7bb0404f
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Mon May 25 18:26:38 2015 +0200

    Use six to fix imports on Python 3
    
    Get configparser, queue, http_client modules from six.moves.
    
    Patch generated by the six_moves operation of the sixer tool:
    https://pypi.python.org/pypi/sixer
    
    Change-Id: I666241ab50101b8cc6f992dd80134ce27327bd7d

commit 964869accce8836bd2587c4b07559fb05fe580b2
Author: Atsushi SAKAI &lt;sakaia@jp.fujitsu.com&gt;
Date:   Fri Jul 24 17:09:48 2015 +0900

    Fix six typos on swift documentation
    
    mechanisim =&gt; mechanism
        http://docs.openstack.org/developer/swift/cors.html
    overridde =&gt; override
       http://docs.openstack.org/developer/swift/deployment_guide.html
    extentsions =&gt; extensions
      http://docs.openstack.org/developer/swift/development_ondisk_backends.html
    reuqest =&gt; request
      http://docs.openstack.org/developer/swift/logs.html
    suport =&gt; support
      http://docs.openstack.org/developer/swift/overview_architecture.html
    mininum =&gt; minimum
      http://docs.openstack.org/developer/swift/overview_erasure_code.html
    
    $ git diff | diffstat
     cors.rst | 2 +-
     deployment_guide.rst | 2 +-
     development_ondisk_backends.rst | 2 +-
     logs.rst | 2 +-
     overview_architecture.rst | 2 +-
     overview_erasure_code.rst | 2 +-
     6 files changed, 6 insertions(+), 6 deletions(-)
    
    Change-Id: I8e095f4c216b2cfae48dff1e17d387048349f73c
    Closes-Bug: #1477877

commit dd2f1be3b124d3901ebbc176a7adc462b6449667
Author: Ondrej Novy &lt;ondrej.novy@firma.seznam.cz&gt;
Date:   Tue Jun 16 17:42:58 2015 +0200

    Time synchronization check in recon.
    
    This change add call time to recon middleware and param --time to
    recon CLI. This is usefull for checking if time in cluster is
    synchronized.
    
    Change-Id: I62373e681f64d0bd71f4aeb287953dd3b2ea5662

commit 89f705e8aab144092d40a13fc4ef19ffef5f3eba
Author: OpenStack Proposal Bot &lt;openstack-infra@lists.openstack.org&gt;
Date:   Thu Jul 23 06:11:27 2015 +0000

    Imported Translations from Transifex
    
    For more information about this automatic import see:
    https://wiki.openstack.org/wiki/Translations/Infrastructure
    
    Change-Id: I94cf347564cb33977f33b1e64259bcb39a8cf809

commit cbcfb74132aba4d5834dc9cf33dc4f664b82d39a
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Wed Jul 22 19:32:46 2015 -0700

    Cleanup nits from container_update_timeout
    
    Change-Id: Ib17fc9a027db267350abc5a7db4e3172dfff7913

commit f563a423bf2534268c2e785094d58dbbe0ebd390
Author: Hamdi Roumani &lt;roumani@ca.ibm.com&gt;
Date:   Wed Jul 22 15:27:26 2015 -0400

    Updated tox setup instructions on Development Guidelines
    
    The instructions suggest updating the ownership of the swift.egg-info
    directory may be required and provide a cmd to do so.  Said cmd assumes user
    'swift' exists, but tox will require the current user to have access to the
    directory to perform updates, moreover user swift may not exist at all.
    
    Change-Id: I63951970553c086ff4f1ac65a81559ba69166494

commit a65e9db8752793ec37b594dc9eca5066171825db
Author: Christian Schwede &lt;cschwede@redhat.com&gt;
Date:   Wed Jul 22 10:43:17 2015 +0000

    Removing commented out code in test/unit/account/test_backend.py
    
    Noticed this while reviewing another change. Looks like the test itself already
    ensures correct functionality of the reclaim() method in AccountBroker without
    the commented code, thus removing this stale code.
    
    Change-Id: I6a26a7591adef9fd794ca68a4e9c493d1127f93c

commit 99d052772a9585e0befdfd292fd03aefde77180a
Author: Kota Tsuyuzaki &lt;tsuyuzaki.kota@lab.ntt.co.jp&gt;
Date:   Mon Jul 13 01:12:43 2015 -0700

    Fix 499 client disconnected on COPY EC object
    
    Currently, a COPY request for an EC object might go to fail as 499 Client
    disconnected because of the difference between destination request content
    length and actual transferred bytes.
    
    That is because the conditional response status and content length for
    an EC object range GET is handled at calling the response instance on
    proxy server. Therefore the calling response instance (resp()) will change
    the conditional status from 200 (HTTP_OK) to 206 (PartialContent) and will
    change the content length for the range GET.
    
    In EC case, sometimes Swift needs whole stored contents to decode a segment.
    It will make 200 HTTP OK response from object-server and proxy-server
    will unfortunately set whole content length to the destination content
    length and it makes the bug 1467677.
    
    This patch introduces a new method "fix_conditional_response" for
    swift.common.swob.Response that calling _response_iter() and cached the
    iter in the Response instance. By calling it, Swift can set correct condtional
    response any time after setting whole content_length to the response
    instance like EC case.
    
    Change-Id: If85826243f955d2f03c6ad395215c73daab509b1
    Closes-Bug: #1467677

commit 2289137164231d7872731c2cf3d81b86f34f01a4
Author: John Dickinson &lt;me@not.mn&gt;
Date:   Sat May 23 15:40:03 2015 -0700

    do container listing updates in another (green)thread
    
    The actual server-side changes are simple. The tests are a different
    matter. Many changes were needed to the object server tests to
    handle the now-async calls to the container server. In an effort to
    test this properly, some drive-by changes were made to improve tests.
    
    I tested this patch by doing zero-byte object writes to one container
    as fast as possible. Then I did it again while also saturating 2 of the
    container replica's disks. The results are linked below.
    
    https://gist.github.com/notmyname/2bb85acfd8fbc7fc312a
    
    DocImpact
    
    Change-Id: I737bd0af3f124a4ce3e0862a155e97c1f0ac3e52

commit 62ed4f81ef80440550633eaaaa962a4f9383c2d3
Author: Timur Alperovich &lt;timur.alperovich@gmail.com&gt;
Date:   Tue Jul 14 16:56:44 2015 -0700

    Add two functional tests for delimiter.
    
    The first test verifies that a delimiter will trim entries beyond the
    first matching instance of delimiter (after the given matching prefix,
    if any) and squash duplicates.  So, when setting the delimiter
    to "-", given blobs "test", "test-foo" and "test-bar-baz", we expect
    only "test" (no matching delim) and "test-" (trim all characters after
    the first "-", and squash duplicates).
    
    The second test verifies that when a prefix is provided, the delimiter
    will trim entries beyond the first matching instance of the delimiter
    *after the given prefix*.  So "bar, "bazar" which both match the
    prefix "ba" will be returned as "bar" (no delimiter after the matching
    prefix) and "baza" (after matching the prefix the remainder after the
    the *next* matching delimiter "a" is trimmed).
    
    Change-Id: I49a2aa8722f83e87b7d211e5c26827e93963d92a

commit 2d6c5fe2afde382edb8f04c91fca1911601b61d9
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Tue Jul 21 09:56:13 2015 -0700

    Fix Associated Projects link on Getting Started
    
    Change-Id: I50be656bc5868242489f97c96a1feaef171933e0

commit cd7b2db550e41412281da0256b468c90ebcf3e8b
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Tue Jul 21 19:23:00 2015 +0530

    unit tests: Replace "self.assert_" by "self.assertTrue"
    
    The assert_() method is deprecated and can be safely replaced by assertTrue().
    This patch makes sure that running the tests does not create undesired
    warnings.
    
    Change-Id: I0602ba39ef93263386644ee68088d5f65fcb4a71

commit c3cc98b2c918476f1b54924e0c54e4c746eba4ac
Author: Samuel Merritt &lt;sam@swiftstack.com&gt;
Date:   Mon Jul 20 17:03:20 2015 -0700

    Add comment about ResumingGetter.used_source_etag
    
    This confused a couple developers and took about ten minutes to
    unravel in IRC; let's leave a clue for the next person.
    
    Change-Id: I356c8c7a44de23f02eaf68d23a39c9eb4c203ff1

commit 06326d74657a8796439988115002298e4a5f4630
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Mon Jul 20 21:41:58 2015 +0530

    Metaclass Python 3.x Compatibility
    
    use "six.add_metaclass" instead of "__metaclass__"
    
    Change-Id: I57390fec40afe3a965be3215db8f79b9cf862a70

commit 317fa1af49d72ecaf7a9a499d8cdf00a086b4c6f
Author: Azhagu Selvan SP &lt;tamizhgeek@gmail.com&gt;
Date:   Sat Jul 18 14:37:16 2015 +0530

    Minor change in development saio setup doc
    
    Make the test-requirements install command uniform with the rest of the
    setup commands in the page by using the $HOME, instead of hardcoding
    the folder path.
    
    Change-Id: I8da7a191a301601e27f894f8268238d77b150ede

commit 39621b8629c7f378fc197f6ab1ddc8e2e797d1fa
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Sat Jul 18 14:12:58 2015 +0530

    Deprecated xreadlines() usage fixed
    
    Change-Id: Iadf42c2f86f78c11259e21c88b4aef51db3441ad

commit dde34c4b442a27761f2e6eca46ed9ec47a110392
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Sat Jul 11 22:46:41 2015 +0530

    Modify zip usage for python3 where necessary.
    
    py2 zip() is eager but py3 zip() and six.moves.zip() are lazy,
    changing ones that require eager evaluation.
    
    Change-Id: Ic9f6bccd7f57772158581905794f8d23b05f4223

commit faff98efd47fd59e28b1adb3e7ad4bc3dc6dd781
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Thu Jul 9 07:35:47 2015 +0530

    Replace python print operator with print function (pep H233, py33)
    
    'print' function is compatible with 2.x and 3.x python versions
    Link : https://www.python.org/dev/peps/pep-3105/
    
    Python 2.6 has a __future__ import that removes print as language syntax,
    letting you use the functional form instead
    
    Change-Id: I9d9ca5766a2773a7b4071e280f00361d16b85383

commit 8753e452b04b0af6d6b444184b628724e14fbbb1
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Wed May 27 18:01:37 2015 +0200

    Replace StringIO with BytesIO for WSGI input
    
    wsgi.input is a binary stream (bytes), not a text stream (unicode).
    
    * Replace StringIO with BytesIO for WSGI input
    * Replace StringIO('') with StringIO() and replace WsgiStringIO('') with
      WsgiStringIO(): an empty string is already the default value
    
    Change-Id: I09c9527be2265a6847189aeeb74a17261ddc781a

commit 6e70f3fa322da70c2a65fb919d200e52fc5add8a
Author: Victor Stinner &lt;vstinner@redhat.com&gt;
Date:   Wed May 27 17:27:47 2015 +0200

    Get StringIO and cStringIO from six.moves
    
    * replace "from cStringIO import StringIO"
      with "from six.moves import cStringIO as StringIO"
    * replace "from StringIO import StringIO"
      with "from six import StringIO"
    * replace "import cStringIO" and "cStringIO.StringIO()"
      with "from six import moves" and "moves.cStringIO()"
    * replace "import StringIO" and "StringIO.StringIO()"
      with "import six" and "six.StringIO()"
    
    This patch was generated by the stringio operation of the sixer tool:
    https://pypi.python.org/pypi/sixer
    
    Change-Id: Iacba77fec3045f96773d1090c0bd48613729a561

commit c366ecf5c85c2797582bf79f7faab1d75b99a70e
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Mon Jul 13 00:07:13 2015 +0530

    Fix a minor python issue related with string.split
    
    Replacing string.split(value, ',') with value.split(','):
    the string.split() function was removed in Python 3
    
    Change-Id: I9ed241a894ac698da33df75a774a56ae2824fadf

commit c8131c6abb17b00b043a9b95e65be819e1fd3c9d
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Sun Jul 12 14:48:35 2015 +0530

    sys.exc_type/exc_value/exc_traceback are Deprecated
    
    sys.exc_info() contains a tuple of these three.
    
    Change-Id: I530cbeb37c43da98b4924db41f6604871077bd47

commit 39b6ef6e4fd515d81e688ef365d26d5e0499be7c
Author: Charles Hsu &lt;charles0126@gmail.com&gt;
Date:   Thu Jun 25 02:06:54 2015 +0800

    Fix reconstructor stats mssage.
    
    Calculate reconstruction job count and remaining time that
    would be inappropriate for user. Use real partition count would
    be suitable for user.
    
    Change-Id: I6b025854baf4757dddf9d7fe7bc2cece58a49157
    Closes-Bug: #1468298

commit bfbda38db999ccd881509c68f0319c3d3dae4274
Author: Clay Gerrard &lt;clay.gerrard@gmail.com&gt;
Date:   Tue Jul 7 15:13:20 2015 -0700

    Add save command to ring-builder-analyzer
    
     * cleanup command =&gt; ring builder function mapping
     * cleanup ParseCommandError/ValueError message building
    
    Change-Id: I4be2aa963ce4f43035f02371d8388abd7a76536c

commit c907107fe4eacb378a92799de915234bd72d5d7c
Author: janonymous &lt;janonymous.codevulture@gmail.com&gt;
Date:   Tue Jul 7 22:46:37 2015 +0530

    cPickle is deprecated in py3, replacing it from six.moves
    
    cPickle is deprecated and should be replaced with six.moves
    to provide py2 and py3 compatibility.
    
    Change-Id: Ibad990708722360d188c641e61444d50a16a1e93

commit 86033ba4dcd7b86670306b6e66345ae464caca9d
Author: Alistair Coles &lt;alistair.coles@hp.com&gt;
Date:   Tue Jun 30 18:56:23 2015 +0100

    EC tests should use ECDiskFileManager
    
    Some EC tests in proxy/test_server.py use the replication
    DiskFileManager to open diskfiles. That works because it
    turns out that DiskFileManager is robust to the frag index
    being stitched onto the end of the timestamp in filenames,
    but it would be better to test using the ECDiskFileManager
    for EC diskfiles.
    
    Also, drive-by deletion of some duplicated lines.
    
    Change-Id: Ie3adb607d8c34a469df7d0f6f542ed5ba9a2dac0

commit 7bdb8266d4b926526acdea22e8c9c634855eeecc
Author: Thiago da Silva &lt;thiago@redhat.com&gt;
Date:   Wed Mar 25 13:19:36 2015 +0000

    Select policy when running functional test
    
    Add ability to select a storage policy when running
    the functional tests by defining the environment variable
    SWIFT_TEST_POLICY.
    
    This patch was first introduced by Janie Richling in
    feature/ec: https://review.openstack.org/#/c/166097
    
    Co-Authored-By: Janie Richling &lt;jrichli@us.ibm.com&gt;
    Co-Authored-By: Christian Schwede &lt;christian.schwede@enovance.com&gt;
    Co-Authored-By: Kota Tsuyuzaki &lt;tsuyuzaki.kota@lab.ntt.co.jp&gt;
    Co-Authored-By: Alistair Coles &lt;alistair.coles@hp.com&gt;
    
    Change-Id: Id96354546088df137def0ae7fd434baf64ed0c51
    Signed-off-by: Thiago da Silva &lt;thiago@redhat.com&gt;
</textarea>
     <input type="button" value="Update" class="editable-message-update-btn" />
     <input type="button" value="Cancel" class="editable-message-cancel-btn" />
  </div>


  </div>

  <div class="boardCommentActivity">
    
      <table class="bug-activity">
  
    
      
    
    <tr>
      <td style="text-align: right;">
        <b>tags</b>:
      </td>
      <td>
        added: in-feature-hummingbird
      </td>
    </tr>
  
</table>
    
    
  </div>
  
</div>

          

          

          

        
        <div style="float: right;">
          <a class="menu-link-activitylog" href="https://bugs.launchpad.net/swift/+bug/1449212/+activity">See full activity log</a>
        </div>
        <div class="clearfix"></div>

        
          

          
            <div align="center" id="add-comment-login-first">
              To post a comment you must <a href="+login?comments=all">log in</a>.
            </div>
          
        
        
      

      </div><!-- class="top-portlet" -->
      </div><!--- id="maincontentsub"-->
      <div>
        <div id="duplicate-form-container"></div>
        <div id="privacy-form-container"></div>
      </div>
    </div>
            
            
          </div><!-- yui-b -->
        </div><!-- yui-main -->

        
          <div id="side-portlets" class="yui-b side">
            
      <div id="involvement" class="portlet">
        <ul class="involvement">
          <li class="single">
            <a class="sprite bugs" href="/swift/+filebug">
              Report a bug
            </a>
          </li>
        </ul>
      </div>
      <div id="privacy" class="first portlet public">
  <div id="privacy-text">
     <span id="information-type-summary" class="sprite public">This report contains
         <strong id="information-type">Public Security</strong>
         information
     </span>&nbsp;<a class="sprite edit action-icon" id="privacy-link" href="/swift/+bug/1449212/+secrecy">Edit</a>

     <div id="information-type-description" style="padding-top: 5px">Everyone can see this security related information.
</div>
  </div>
</div>

      <div id="portlet-actions" class="portlet vertical">
  <ul id="duplicate-actions">
    <li class="sprite bug-dupe">
    <span id="mark-duplicate-text">
    <a class="menu-link-mark-dupe" href="/swift/+bug/1449212/+duplicate">Mark as duplicate</a>
    </span>
    </li>
    
    <li><a class="menu-link-createquestion sprite add" href="https://bugs.launchpad.net/swift/+bug/1449212/+create-question">Convert to a question</a></li>
    
    <li><a class="menu-link-addbranch sprite add" href="https://bugs.launchpad.net/swift/+bug/1449212/+addbranch">Link a related branch</a></li>
    <li><a class="menu-link-linktocve sprite add" href="https://bugs.launchpad.net/swift/+bug/1449212/+linkcve">Link to <abbr title="Common Vulnerabilities and Exposures Index">CVE</abbr></a></li>
    <li><a class="menu-link-unlinkcve sprite modify remove" href="https://bugs.launchpad.net/swift/+bug/1449212/+unlinkcve">Remove CVE link</a></li>
  </ul>
</div>

      

      <div class="portlet vertical" id="portlet-subscription">
  <div class="section">
    <div id="current_user_subscription" class="False">
      
        <span>You are</span>
        
        <a class="menu-link-subscription sprite modify edit" href="/swift/+bug/1449212/+subscribe">
           
           
           
           not directly subscribed to this bug's notifications.
        </a>
      
      
    </div>
    <div id="sub-unsub-spinner">Subscribing...</div>
    <ul>
      
      <li><a class="menu-link-editsubscriptions sprite modify edit" href="https://bugs.launchpad.net/swift/+bug/1449212/+subscriptions" title="View and change your subscriptions to this bug">Edit bug mail</a></li>
    </ul>
  </div>
  <script type="text/javascript">
    LPJS.use('io-base', 'node',
            'lp.bugs.bugtask_index.portlets.subscription', function(Y) {
        Y.on('domready', function() {
            Y.lp.bugs.bugtask_index.portlets.subscription.initialize();
        });
    });
  </script>
</div>

      <div class="portlet vertical" id="portlet-subscribers">
  <h2>Other bug subscribers</h2>
  <div>
    <div><a class="menu-link-addsubscriber sprite add" href="https://bugs.launchpad.net/swift/+bug/1449212/+addsubscriber" title="Launchpad will email that person whenever this bugs changes">Subscribe someone else</a></div>
  </div>
  <div id="other-bug-subscribers"></div>
</div>

      

      

      
  <div class="portlet" id="portlet-patches">
    <h2>Patches</h2>
    <ul>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4386391/+files/tempurl_fix.patch">tempurl_fix.patch</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4386391">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4386423/+files/tempurl_fix.patch">tempurl_fix.patch</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4386423">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4388691/+files/container-tempurl-scoping.diff">container-tempurl-scoping.diff</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4388691">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4390909/+files/tempurl-torgomatic-patch2.diff">tempurl-torgomatic-patch2.diff</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4390909">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4407820/+files/tempurl_fix.patch">Sam's patch with a fixed func test.</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4407820">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4438741/+files/disable-get-container-tempurl-cross-container.patch">disable-get-container-tempurl-cross-container.patch</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4438741">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4438746/+files/disable-get-container-tempurl-cross-container-2.patch">disable-get-container-tempurl-cross-container-2.patch</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4438746">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4439609/+files/disable-get-container-tempurl-cross-container-3.patch">disable-get-container-tempurl-cross-container-3.patch</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4439609">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4439721/+files/acoles-combined-tempurl-xlo-fixes.diff">acoles-combined-tempurl-xlo-fixes.diff</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4439721">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4439888/+files/acoles-tempurl-dlo-functest-mod.patch">acoles-tempurl-dlo-functest-mod.patch</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4439888">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4439955/+files/clays-56-with-fixes.diff">clays-56-with-fixes.diff</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4439955">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4439989/+files/tempurl-torgomatic-patch3.diff">tempurl-torgomatic-patch3.diff</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4439989">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4440490/+files/container-tempurl.patch">container-tempurl.patch</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4440490">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4440773/+files/tempurl-torgomatic-patch4.diff">tempurl-torgomatic-patch4.diff</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4440773">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4442299/+files/tempurl-torgomatic-patch5.diff">tempurl-torgomatic-patch5.diff</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4442299">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4442300/+files/tempurl-torgomatic-patch5.diff">tempurl-torgomatic-patch5.diff</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4442300">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4442310/+files/tempurl-torgomatic-patch6.diff">tempurl-torgomatic-patch6.diff</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4442310">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4442462/+files/tempurl-torgomatic-patch7.diff">tempurl-torgomatic-patch7.diff</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4442462">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4442888/+files/tempurl-acoles-patch8.diff">tempurl-acoles-patch8.diff</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4442888">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4442926/+files/tempurl-acoles-patch9.diff">tempurl-acoles-patch9.diff</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4442926">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4446467/+files/kilo-tempurl-bp-combined.patch">kilo-tempurl-bp-combined.patch</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4446467">edit</a>)
        </small>
      </li>
      <li class="download-attachment">
        <a class="sprite haspatch-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4449743/+files/master-tempurl-combined.patch">combined dlo &amp; container tempurl fixes for master (ef8f14f)</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4449743">edit</a>)
        </small>
      </li>
    </ul>
    <ul>
      <li>
        <a class="sprite add" href="/swift/+bug/1449212/+addcomment?field.patch=on">Add patch</a>
      </li>
    </ul>
  </div>
  <div class="portlet" id="portlet-attachments">
    <h2>Bug attachments</h2>
    <ul>
      <li class="download-attachment">
        <a class="sprite download-icon" href="https://bugs.launchpad.net/swift/+bug/1449212/+attachment/4439846/+files/test_patch.sh">test_patch.sh</a>
        <small>
          (<a href="/swift/+bug/1449212/+attachment/4439846">edit</a>)
        </small>
      </li>
    </ul>
    <ul>
      <li>
        <a class="sprite add" href="/swift/+bug/1449212/+addcomment">Add attachment</a>
      </li>
    </ul>
  </div>


      

    
          </div><!-- yui-b side -->
        
      </div><!-- yui-t4 -->

      
  <div id="footer" class="footer">
    <div class="lp-arcana">
        <div class="lp-branding">
          <a href="https://launchpad.net/"><img src="/@@/launchpad-logo-and-name-hierarchy.png" alt="Launchpad" /></a>
          &nbsp;&bull;&nbsp;
          <a href="https://launchpad.net/+tour">Take the tour</a>
          &nbsp;&bull;&nbsp;
          <a href="https://help.launchpad.net/">Read the guide</a>
          &nbsp;
          <form id="globalsearch" method="get" accept-charset="UTF-8" action="https://launchpad.net/+search">
            <input type="search" id="search-text" name="field.text" />
            <input type="image" src="/@@/search" style="vertical-align:5%" alt="Search Launchpad" />
          </form>
        </div>
        
  

    </div>

    <div class="colophon">
      &copy; 2004-2021
      <a href="http://canonical.com/">Canonical&nbsp;Ltd.</a>
      &nbsp;&bull;&nbsp;
      <a href="https://launchpad.net/legal">Terms of use</a>
      &nbsp;&bull;&nbsp;
      <a href="https://www.ubuntu.com/legal/dataprivacy">Data privacy</a>
      &nbsp;&bull;&nbsp;
      <a href="/feedback">Contact Launchpad Support</a>
      
      &nbsp;&bull;&nbsp;
      <a href="http://blog.launchpad.net/">Blog</a>
      
	&nbsp;&bull;&nbsp;
	<a href="https://canonical.com/careers">Careers</a>
      
      &nbsp;&bull;&nbsp;
      <a href="https://twitter.com/launchpadstatus">System status</a>
      <span id="lp-version">
      &nbsp;&bull;&nbsp;
        r0d8de2b
        
        
        (<a href="https://dev.launchpad.net/">Get the code!</a>)
      </span>
    </div>
  </div>

    </div><!-- yui-d0-->

    
  
  
  <script id="json-cache-script">LP.cache = {"bug_is_private": false, "information_type_data": {"PUBLICSECURITY": {"name": "Public Security", "description_css_class": "choice-description", "is_private": false, "value": "PUBLICSECURITY", "description": "Everyone can see this security related information.\n", "order": 1}, "PRIVATESECURITY": {"name": "Private Security", "description_css_class": "choice-description", "is_private": true, "value": "PRIVATESECURITY", "description": "Only the security group can see this information.\n ", "order": 2}, "PUBLIC": {"name": "Public", "description_css_class": "choice-description", "is_private": false, "value": "PUBLIC", "description": "Everyone can see this information.\n", "order": 0}, "USERDATA": {"name": "Private", "description_css_class": "choice-description", "is_private": true, "value": "USERDATA", "description": "Only shared with users permitted to see private user information.\n", "order": 3}}, "initial_comment_batch_offset": 41, "subscribers_portlet_url_data": {"web_link": "https://bugs.launchpad.net/bugs/1449212", "self_link": "https://bugs.launchpad.net/api/devel/bugs/1449212"}, "first visible_recent_comment": 60, "bug": {"self_link": "https://bugs.launchpad.net/api/devel/bugs/1449212", "web_link": "https://bugs.launchpad.net/bugs/1449212", "resource_type_link": "https://bugs.launchpad.net/api/devel/#bug", "id": 1449212, "private": false, "information_type": "Public Security", "name": null, "title": "Container level temp URLs can unintentionally leak data.", "description": "A user, using a container level temp URL key, can create a PUT temp URL and create a DLO/SLO that references objects in another container, potentially leaking information that was intended to be private.\n\nExample:\n\n# Create object in container with secrets\n$ curl -i -XPUT -H'x-auth-token: AUTH_tkbfc02e65fe184fa88500de6e9293dced' http://127.0.0.1:8080/v1/AUTH_test/secrets/foo.txt --data \"12345\"\nHTTP/1.1 201 Created\nLast-Modified: Mon, 27 Apr 2015 18:34:45 GMT\nContent-Length: 0\nEtag: 827ccb0eea8a706c4c34a16891f84e7b\nContent-Type: text/html; charset=UTF-8\nX-Trans-Id: txdb50279b32684c198a1e5-00553e8144\nDate: Mon, 27 Apr 2015 18:34:44 GMT\n\n# Create PUT temp URL, and create DLO pointing to \"secret\" container.\n$ curl -i -XPUT http://127.0.0.1:8080/v1/AUTH_test/container_a/uhoh.txt\\?temp_url_sig\\=b3b1a841a9262bbaa6eb546e5c2054be17377be5\\;temp_url_expires\\=1430160082 -H'X-Object-Manifest: secrets/f' -H'Content-Length: 0'\nHTTP/1.1 201 Created\nLast-Modified: Mon, 27 Apr 2015 18:37:08 GMT\nContent-Length: 0\nEtag: d41d8cd98f00b204e9800998ecf8427e\nContent-Type: text/html; charset=UTF-8\nX-Trans-Id: txf89037608c7a461f9f6f1-00553e81d3\nDate: Mon, 27 Apr 2015 18:37:07 GMT\n\n# GET secrets using temp URL\n$ curl -i http://127.0.0.1:8080/v1/AUTH_test/container_a/uhoh.txt\\?temp_url_sig\\=25d3740e42b56cbbaae15094bfc2a4f3ce3def86\\;temp_url_expires\\=1430160141\nHTTP/1.1 200 OK\nContent-Length: 5\nAccept-Ranges: bytes\nX-Object-Manifest: container_b/f\nLast-Modified: Mon, 27 Apr 2015 18:37:08 GMT\nEtag: \"1f32aa4c9a1d2ea010adcf2348166a04\"\nX-Timestamp: 1430159827.15679\nContent-Type: text/plain\nContent-Disposition: attachment; filename=\"uhoh.txt\"; filename*=UTF-8''uhoh.txt\nX-Trans-Id: txbfe86e01cdef48caaeac2-00553e81ea\nDate: Mon, 27 Apr 2015 18:37:30 GMT\n\n12345%", "owner_link": "https://bugs.launchpad.net/api/devel/~richard-hawkins", "bug_tasks_collection_link": "https://bugs.launchpad.net/api/devel/bugs/1449212/bug_tasks", "duplicate_of_link": null, "date_created": "2015-04-27T18:59:22.603443+00:00", "activity_collection_link": "https://bugs.launchpad.net/api/devel/bugs/1449212/activity", "subscriptions_collection_link": "https://bugs.launchpad.net/api/devel/bugs/1449212/subscriptions", "date_last_updated": "2015-09-08T20:44:46.310393+00:00", "who_made_private_link": null, "date_made_private": null, "heat": 262, "bug_watches_collection_link": "https://bugs.launchpad.net/api/devel/bugs/1449212/bug_watches", "cves_collection_link": "https://bugs.launchpad.net/api/devel/bugs/1449212/cves", "duplicates_collection_link": "https://bugs.launchpad.net/api/devel/bugs/1449212/duplicates", "attachments_collection_link": "https://bugs.launchpad.net/api/devel/bugs/1449212/attachments", "security_related": true, "latest_patch_uploaded": "2015-08-20T18:29:23.557369+00:00", "tags": ["in-feature-crypto", "in-feature-hummingbird", "tempurl"], "date_last_message": "2015-09-08T20:44:45.578938+00:00", "number_of_duplicates": 0, "message_count": 101, "users_affected_count": 1, "users_unaffected_count": 0, "users_affected_collection_link": "https://bugs.launchpad.net/api/devel/bugs/1449212/users_affected", "users_unaffected_collection_link": "https://bugs.launchpad.net/api/devel/bugs/1449212/users_unaffected", "users_affected_count_with_dupes": 1, "other_users_affected_count_with_dupes": 1, "users_affected_with_dupes_collection_link": "https://bugs.launchpad.net/api/devel/bugs/1449212/users_affected_with_dupes", "messages_collection_link": "https://bugs.launchpad.net/api/devel/bugs/1449212/messages", "linked_branches_collection_link": "https://bugs.launchpad.net/api/devel/bugs/1449212/linked_branches", "linked_merge_proposals_collection_link": "https://bugs.launchpad.net/api/devel/bugs/1449212/linked_merge_proposals", "http_etag": "\"6f9dadb24f15a941751abf834984bdd212c3ff8f-3907babf73862604ab9d31adc928e2ed67c7dd13\""}, "total_comments_and_activity": 148, "related_features": {}, "context": {"self_link": "https://bugs.launchpad.net/api/devel/swift/+bug/1449212", "web_link": "https://bugs.launchpad.net/swift/+bug/1449212", "resource_type_link": "https://bugs.launchpad.net/api/devel/#bug_task", "bug_link": "https://bugs.launchpad.net/api/devel/bugs/1449212", "milestone_link": "https://bugs.launchpad.net/api/devel/swift/+milestone/2.4.0", "status": "Fix Released", "importance": "Critical", "assignee_link": null, "bug_target_display_name": "OpenStack Object Storage (swift)", "bug_target_name": "swift", "bug_watch_link": null, "date_assigned": null, "date_created": "2015-04-27T18:59:22.603443+00:00", "date_confirmed": "2015-04-27T20:12:37.376677+00:00", "date_incomplete": null, "date_in_progress": "2015-08-27T10:28:41.231981+00:00", "date_closed": "2015-09-01T12:25:16.655542+00:00", "date_left_new": "2015-04-27T20:12:37.376677+00:00", "date_triaged": "2015-08-27T10:28:41.231981+00:00", "date_fix_committed": "2015-08-27T10:28:41.231981+00:00", "date_fix_released": "2015-09-01T12:25:16.655542+00:00", "date_left_closed": null, "owner_link": "https://bugs.launchpad.net/api/devel/~richard-hawkins", "target_link": "https://bugs.launchpad.net/api/devel/swift", "title": "Bug #1449212 in OpenStack Object Storage (swift): \"Container level temp URLs can unintentionally leak data.\"", "related_tasks_collection_link": "https://bugs.launchpad.net/api/devel/swift/+bug/1449212/related_tasks", "is_complete": true, "http_etag": "\"1832e5e4034e67864cc42495862812de1f0efa98-ed3eda0929455438fedd34f5f3ab3b2594c635fb\""}, "bugtask_data": {"1816738": {"bugtask_path": "/swift/+bug/1449212", "bug_title": "Container level temp URLs can unintentionally leak data.", "user_can_delete": false, "milestone_value": "https://bugs.launchpad.net/api/devel/swift/+milestone/2.4.0", "milestone_widget_items": "[]", "importance_widget_items": "[]", "assignee_vocabulary": "AllUserTeamsParticipation", "user_can_edit_assignee": false, "targetname": "OpenStack Object Storage (swift)", "hide_assignee_team_selection": true, "assignee_is_team": null, "status_widget_items": "[]", "delete_link": "https://bugs.launchpad.net/swift/+bug/1449212/+delete", "row_id": "tasksummary1816738", "target_is_product": true, "id": 1816738, "form_row_id": "task1816738", "assignee_vocabulary_filters": [], "prefix": "swift", "importance_value": "Critical", "status_value": "Fix Released", "assignee_value": null, "user_can_edit_milestone": false, "user_can_unassign": false, "user_can_edit_status": true, "user_can_edit_importance": false}, "1892003": {"bugtask_path": "/swift/kilo/+bug/1449212", "bug_title": "Container level temp URLs can unintentionally leak data.", "user_can_delete": false, "milestone_value": null, "milestone_widget_items": "[]", "importance_widget_items": "[]", "assignee_vocabulary": "AllUserTeamsParticipation", "user_can_edit_assignee": false, "targetname": "OpenStack Object Storage (swift) kilo", "hide_assignee_team_selection": true, "assignee_is_team": null, "status_widget_items": "[]", "delete_link": "https://bugs.launchpad.net/swift/kilo/+bug/1449212/+delete", "row_id": "tasksummary1892003", "target_is_product": false, "id": 1892003, "form_row_id": "task1892003", "assignee_vocabulary_filters": [], "prefix": "swift_kilo", "importance_value": "Undecided", "status_value": "Fix Committed", "assignee_value": null, "user_can_edit_milestone": false, "user_can_unassign": false, "user_can_edit_status": true, "user_can_edit_importance": false}, "1816751": {"bugtask_path": "/ossa/+bug/1449212", "bug_title": "Container level temp URLs can unintentionally leak data.", "user_can_delete": false, "milestone_value": null, "milestone_widget_items": "[]", "importance_widget_items": "[]", "assignee_vocabulary": "AllUserTeamsParticipation", "user_can_edit_assignee": false, "targetname": "OpenStack Security Advisory", "hide_assignee_team_selection": true, "assignee_is_team": false, "status_widget_items": "[]", "delete_link": "https://bugs.launchpad.net/ossa/+bug/1449212/+delete", "row_id": "tasksummary1816751", "target_is_product": true, "id": 1816751, "form_row_id": "task1816751", "assignee_vocabulary_filters": [], "prefix": "ossa", "importance_value": "Medium", "status_value": "Fix Released", "assignee_value": "tristan-cacqueray", "user_can_edit_milestone": false, "user_can_unassign": false, "user_can_edit_status": true, "user_can_edit_importance": false}}};</script>

    
  

    
  </body>


  <!--
    Facet name: bugs
    Page type: main_side
    Has global search: True
    Has application tabs: True
    Has side portlets: True

    At least 63 queries/external actions issued in 1.68 seconds

    Features: {'app.mainsite_only.canonical_url': None, 'disclosure.dsp_picker.enabled': 'on', 'bugs.affected_count_includes_dupes.disabled': None, 'baselayout.careers_link.disabled': None, 'js.yui_version': None, 'profiling.enabled': None, 'visible_render_time': None, 'hard_timeout': '9000', 'bugs.nominations.bug_supervisors_can_target': 'on', 'app.maintenance_message': None}

    r0d8de2b

    -->

</html>

