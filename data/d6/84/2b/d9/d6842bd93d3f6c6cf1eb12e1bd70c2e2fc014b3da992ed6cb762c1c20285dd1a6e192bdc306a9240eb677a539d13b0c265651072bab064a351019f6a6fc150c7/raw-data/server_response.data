<!DOCTYPE html>
<html lang="en">
  <head>
    <title>9920 &ndash; Buildbot crash output: fuzz-2014-03-22-14025.pcap</title>

      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">


<link href="data/assets/64b49332a92937374625c24ed9a89c85.css?1635022386" rel="stylesheet" type="text/css">

<link href="data/assets/f6911ed8e5a97f108734d9324cb6bd67.css?1635022386" rel="stylesheet" type="text/css">

    
<script type="text/javascript" src="data/assets/a7c2f3a028f17a9aa60f56dc9d6e732d.js?1635022386"></script>

    <script type="text/javascript">
    <!--
        YAHOO.namespace('bugzilla');
        YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
               if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
               var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
               return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
         };
        if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
            YAHOO.util.Event._simpleRemove(window, "unload", 
                                           YAHOO.util.Event._unload);
        }
        
        function unhide_language_selector() { 
            YAHOO.util.Dom.removeClass(
                'lang_links_container', 'bz_default_hidden'
            ); 
        } 
        YAHOO.util.Event.onDOMReady(unhide_language_selector);

        
        var BUGZILLA = {
            param: {
                cookiepath: '\/',
                maxusermatches: 1000
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    "You must enter a Description for this attachment.",
                component_required:
                    "You must select a Component for this bug.",
                description_required:
                    "You must enter a Description for this bug.",
                short_desc_required:
                    "You must enter a Summary for this bug.",
                version_required:
                    "You must select a Version for this bug."
            }
              , api_token: ''
        };

    if (history && history.replaceState) {
      if(!document.location.href.match(/show_bug\.cgi/)) {
        history.replaceState( null,
                             "9920 – Buildbot crash output: fuzz-2014-03-22-14025.pcap",
                             "show_bug.cgi?id=9920" );
        document.title = "9920 – Buildbot crash output: fuzz-2014-03-22-14025.pcap";
      }
      if (document.location.href.match(/show_bug\.cgi\?.*list_id=/)) {
        var href = document.location.href;
        href = href.replace(/[\?&]+list_id=(\d+|cookie)/, '');
        history.replaceState(null, "9920 – Buildbot crash output: fuzz-2014-03-22-14025.pcap", href);
      }
    }
    YAHOO.util.Event.onDOMReady(function() {
      initDirtyFieldTracking();

    });
    // -->
    </script>
<script type="text/javascript" src="data/assets/daf5e0fb6826e6a35280e622913f0c4a.js?1635022386"></script>

    

    
    <link rel="search" type="application/opensearchdescription+xml"
                       title="Bugzilla" href="./search_plugin.cgi">
    <link rel="shortcut icon" href="images/favicon.ico">
  </head>

  <body 
        class="bugs-wireshark-org-bugzilla
                 bz_bug
                 bz_status_RESOLVED
                 bz_product_Wireshark
                 bz_component_Dissection_engine_&#X28;libwireshark&#X29;
                 bz_bug_9920 yui-skin-sam">

  <div id="header"><div id="banner">
      <a href="/bugzilla/"><img id="badge" src="/image/wsbadge-bug@186x57.png"></a>
      <span id="banner-text">
        Wireshark Bug Database &ndash; Bug&nbsp;9920
      </span>
      <div id="subtitle">
        <p class="subheader">Buildbot crash output: fuzz-2014-03-22-14025.pcap</p>
      </div>

       <div id="motd_yellow">

<p>
This Bugzilla instance was migrated to <a href="https://gitlab.com/wireshark/wireshark">GitLab</a> on Sunday, August 23.
</p>


<p>
This bug has been migrated to <a href="https://gitlab.com/wireshark/wireshark/-/issues/9920">issue 9920</a> in the <a href="https://gitlab.com/wireshark/wireshark/-/issues">GitLab issue tracker</a>.
It can be viewed and updated there.
</p>


</p>

<p>
See the <a href="https://gitlab.com/wireshark/gitlab-migration/wikis/home">migration wiki</a> for more details.
</p>

       </div>


    </div>

<!-- WS: Title info is in the banner
    <div id="titles">
      <span id="title">Bugzilla &ndash; Bug&nbsp;9920</span>
  
        <span id="subtitle" class="subheader">Buildbot crash output: fuzz-2014-03-22-14025.pcap</span>

        <span id="information" class="header_addl_info">Last modified: 2014-10-04 11:16:08 UTC</span>
    </div>
  -->


    <div id="common_links"><ul class="links">
  <li><a href="https://www.wireshark.org/">Wireshark Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_top" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_top");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_top" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_top"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/5.0/using/understanding.html" target="_blank">Help</a>
      </li>
    

    <li id="mini_login_container_top">
  <span class="separator">| </span>
  <a id="login_link_top" href="show_bug.cgi?id=9920&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_top')">Log In</a>

  <form action="show_bug.cgi?id=9920" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_top">
    <input id="Bugzilla_login_top" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_top" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_top">
    <a href="#" onclick="return hide_mini_login_form('_top')">[x]</a>
  </form>
</li>


  <li id="forgot_container_top">
    <span class="separator">| </span>
    <a id="forgot_link_top" href="show_bug.cgi?id=9920&amp;GoAheadAndLogIn=1#forgot"
       onclick="return show_forgot_form('_top')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_top"
          class="mini_forgot bz_default_hidden">
      <label for="login_top">Login:</label>
      <input name="loginname" size="20" id="login_top" required
          type="email" placeholder="Your Email Address">
      <input id="forgot_button_top" value="Reset Password" type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_top" name="token"
             value="1635622035-hGuNObx73sJkCtEVUf6nw76CyL8oeVeyhdzcwyvEmJE">
      <a href="#" onclick="return hide_forgot_form('_top')">[x]</a>
    </form>
  </li>
</ul>
    </div>
  </div>

  <div id="bugzilla-body">


<script type="text/javascript">
<!--

//-->
</script>

<form name="changeform" id="changeform" method="post" action="process_bug.cgi">

  <input type="hidden" name="delta_ts" value="2014-10-04 11:16:08">
  <input type="hidden" name="id" value="9920">
  <input type="hidden" name="token" value="1635622035-i7lugNk7zVo1H6J53g-ql67GRjG7_ZHWAr5jGseiHBw">
<div class="bz_short_desc_container edit_form">
     <a href="show_bug.cgi?id=9920"><b>Bug&nbsp;9920</b></a> <span id="summary_container" class="bz_default_hidden">
      - <span id="short_desc_nonedit_display">Buildbot crash output: fuzz-2014-03-22-14025.pcap</span>
     </span>

    <div id="summary_input"><span class="field_label "
    id="field_label_short_desc">


  <a 
      title="The bug summary is a short sentence which succinctly describes what the bug is about."
      class="field_help_link"
      href="page.cgi?id=fields.html#short_desc"
  >Summary:</a>

</span>Buildbot crash output: fuzz-2014-03-22-14025.pcap
    </div>
  </div>
  <script type="text/javascript">
    hideEditableField('summary_container',
                      'summary_input',
                      'summary_edit_action',
                      'short_desc',
                      'Buildbot crash output: fuzz-2014-03-22-14025.pcap' );
  </script>
  <table class="edit_form">
    <tr>
      
      <td id="bz_show_bug_column_1" class="bz_show_bug_column">     
        <table>
          <tr>
    <th class="field_label">
      <a href="page.cgi?id=fields.html#bug_status">Status</a>:
    </th>
    <td id="bz_field_status">
      <span id="static_bug_status">RESOLVED
          FIXED
      </span>
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_alias">


  <a 
      title="A short, unique name assigned to a bug in order to assist with looking it up and referring to it in other places in Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#alias"
  >Alias:</a>

</th>
    <td>
        None
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_product">


  <a 
      title="Bugs are categorised into Products and Components."
      class="field_help_link"
      href="describecomponents.cgi"
  >Product:</a>

</th>
  <td class="field_value "
      id="field_container_product" >Wireshark

</td>
    </tr>

    
    <tr class="bz_default_hidden"><th class="field_label "
    id="field_label_classification">


  <a 
      title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation."
      class="field_help_link"
      href="page.cgi?id=fields.html#classification"
  >Classification:</a>

</th>
  <td class="field_value "
      id="field_container_classification" >Unclassified

</td>
    </tr>
        
    
    
    <tr><th class="field_label "
    id="field_label_component">


  <a 
      title="Components are second-level categories; each belongs to a particular Product. Select a Product to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi?product=Wireshark"
  >Component:</a>

</th>
  <td class="field_value "
      id="field_container_component" >Dissection engine (libwireshark)

  (<a href="buglist.cgi?component=Dissection%20engine%20(libwireshark)&amp;product=Wireshark&amp;bug_status=__open__"
      target="_blank">show other bugs</a>)
</td>
    </tr>
    <tr><th class="field_label "
    id="field_label_version">


  <a 
      title="The version field defines the version of the software the bug was found in."
      class="field_help_link"
      href="page.cgi?id=fields.html#version"
  >Version:</a>

</th>
<td>Git
  </td>
    </tr>
        
    
        
    <tr><th class="field_label "
    id="field_label_rep_platform">


  <a 
      title="The hardware platform the bug was observed on. Note: When searching, selecting the option &quot;All&quot; only finds bugs whose value for this field is literally the word &quot;All&quot;."
      class="field_help_link"
      href="page.cgi?id=fields.html#rep_platform"
  >Hardware:</a>

</th>
      <td class="field_value">x86-64
        Ubuntu
      </td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          
          <tr>
      <th class="field_label">
        <label  accesskey="i">
          <a href="page.cgi?id=fields.html#importance"><u>I</u>mportance</a></label>:
      </th>
      <td>High
       Major<span id="votes_container">
    (<a href="page.cgi?id=voting/user.html&amp;bug_id=9920#vote_9920">vote</a>)
  </span>
      </td>
    </tr>

      <tr><th class="field_label "
    id="field_label_target_milestone">


  <a 
      title="The Target Milestone field is used to define when the engineer the bug is assigned to expects to fix it."
      class="field_help_link"
      href="page.cgi?id=fields.html#target_milestone"
  >Target Milestone:</a>

</th><td>---
  </td>
      </tr>
          
          <tr><th class="field_label "
    id="field_label_assigned_to">


  <a 
      title="The person in charge of resolving the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#assigned_to"
  >Assignee:</a>

</th>
      <td><span class="vcard"><span class="fn">Bugzilla Administrator</span>
</span>
      </td>
    </tr>

    <script type="text/javascript">
      assignToDefaultOnChange(['product', 'component'],
        'bugzilla-admin\x40wireshark.org',
        '');
    </script>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          <tr><th class="field_label "
    id="field_label_bug_file_loc">


  <a 
      title="Bugs can have a URL associated with them - for example, a pointer to a web site where the problem is seen."
      class="field_help_link"
      href="page.cgi?id=fields.html#bug_file_loc"
  >URL:</a>

</th>
    <td>
      <span id="bz_url_input_area">
          <a href="http://www.wireshark.org/download/automated/captures/fuzz-2014-03-22-14025.pcap"
             rel="noreferrer"><span title="http://www.wireshark.org/download/automated/captures/fuzz-2014-03-22-14025.pcap">http://www.wireshark.org/download/aut...
        </span></a>
      </span>
    </td>
  </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>

          <tr>
    <th class="field_label">
      <label>Duplicates (3)</label>:
    </th>
    <td class="field_value">
      <span id="duplicates"><a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2014-04-05-22532.pcap"
   href="show_bug.cgi?id=9954">9954</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2014-07-12-24751.pcap"
   href="show_bug.cgi?id=10278">10278</a> <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - SIP capture causes wireshark to crash 1.10.8"
   href="show_bug.cgi?id=10328">10328</a> 
      </span>
      (<a href="buglist.cgi?bug_id=9954,10278,10328">view as bug list</a>)
    </td>
  </tr>
<tr><th class="field_label "
    id="field_label_dependson">


  <a 
      title="The bugs listed here must be resolved before this bug can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#dependson"
  >Depends on:</a>

</th>

  <td>
    <span id="dependson_input_area">
    </span>

  </td>
  </tr>
  
  <tr><th class="field_label "
    id="field_label_blocked">


  <a 
      title="This bug must be resolved before the bugs listed in this field can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#blocked"
  >Blocks:</a>

</th>

  <td>
    <span id="blocked_input_area">
    </span>

  </td>
  </tr>
          
        </table>
      </td>
      <td>
        <div class="bz_column_spacer">&nbsp;</div>
      </td>
      
      <td id="bz_show_bug_column_2" class="bz_show_bug_column">
        <table>
        <tr>
    <th class="field_label">
      Reported:
    </th>
    <td>2014-03-23 13:30 UTC by <span class="vcard"><span class="fn">Buildbot Builder</span>
</span>
    </td>
  </tr>
  
  <tr>
    <th class="field_label">
      Modified:
    </th>
    <td>2014-10-04 11:16 UTC
      (<a href="show_activity.cgi?id=9920">History</a>)
    </td>
  
  </tr>
<tr>
      <th class="field_label">
        <label  accesskey="a">
          CC List:
        </label>
      </th>
      <td>5 
          users
          <span id="cc_edit_area_showhide_container" class="bz_default_hidden">
            (<a href="#" id="cc_edit_area_showhide">show</a>)
          </span>
        <div id="cc_edit_area">
          <br>
            <select id="cc" multiple="multiple" size="5" >
                <option value="alexis.lagoutte">alexis.lagoutte</option>
                <option value="eapache">eapache</option>
                <option value="hadrielk">hadrielk</option>
                <option value="jeff.morriss.ws">jeff.morriss.ws</option>
                <option value="leroy.forsberg">leroy.forsberg</option>
            </select>
        </div>
          <script type="text/javascript">
            hideEditableField( 'cc_edit_area_showhide_container', 
                               'cc_edit_area', 
                               'cc_edit_area_showhide', 
                               '', 
                               '');  
          </script>
      </td>
    </tr>

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_see_also">


  <a 
      title="This allows you to refer to bugs in other installations. You can enter a URL to a bug in the 'Add Bug URLs' field to note that that bug is related to this one. You can enter multiple URLs at once by separating them with whitespace. You should normally use this field to refer to bugs in other installations. For bugs in this installation, it is better to use the Depends on and Blocks fields."
      class="field_help_link"
      href="page.cgi?id=fields.html#see_also"
  >See Also:</a>

</th>
  <td class="field_value "
      id="field_container_see_also" >

</td>
    </tr> 

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>



        </table>
      </td>
    </tr>
    <tr>
      <td colspan="3">
          <hr id="bz_top_half_spacer">
      </td>
    </tr>
  </table>

  <table id="bz_big_form_parts">
  <tr>
  <td>

    
<script type="text/javascript">
<!--
function toggle_display(link) {
    var table = document.getElementById("attachment_table");
    var view_all = document.getElementById("view_all");
    var hide_obsolete_url_parameter = "&hide_obsolete=1";
    // Store current height for scrolling later
    var originalHeight = table.offsetHeight;
    var rows = YAHOO.util.Dom.getElementsByClassName(
        'bz_tr_obsolete', 'tr', table);

    for (var i = 0; i < rows.length; i++) {
        bz_toggleClass(rows[i], 'bz_default_hidden');
    }

    if (YAHOO.util.Dom.hasClass(rows[0], 'bz_default_hidden')) {
        link.innerHTML = "Show Obsolete";
        view_all.href = view_all.href + hide_obsolete_url_parameter 
    }
    else {
        link.innerHTML = "Hide Obsolete";
        view_all.href = view_all.href.replace(hide_obsolete_url_parameter,"");
    }

    var newHeight = table.offsetHeight;
    // This scrolling makes the window appear to not move at all.
    window.scrollBy(0, newHeight - originalHeight);

    return false;
}
//-->
</script>

<br>
<table id="attachment_table">
  <tr id="a0">
    <th colspan="2" class="left">
      Attachments
    </th>
  </tr>


      <tr id="a1" class="bz_contenttype_application_vnd.tcpdump.pcap">
        <td>
            <a href="attachment.cgi?id=12671"
               title="View the content of the attachment">
          <b>minimal pcap needed to crash</b></a>

          <span class="bz_attach_extra_info">
              (2.06 KB,
                application/vnd.tcpdump.pcap)

            <br>
            <a href="#attach_12671"
               title="Go to the comment associated with the attachment">2014-04-01 16:09 UTC</a>,

            <span class="vcard"><span class="fn">Hadriel Kaplan</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=12671&amp;action=edit">Details</a>
        </td>
      </tr>

  <tr class="bz_attach_footer">
    <td colspan="2">
        <span class="bz_attach_view_hide">
        </span>
        <a href="attachment.cgi?bugid=9920&amp;action=enter">Add an attachment</a>
        (proposed patch, testcase, etc.)
    </td>
  </tr>
</table>
<br>
<div id="add_comment" class="bz_section_additional_comments">
      <table>
        <tr>
          <td>
            <fieldset>
              <legend>Note</legend>
              You need to
              <a href="show_bug.cgi?id=9920&amp;GoAheadAndLogIn=1">log in</a>
              before you can comment on or make changes to this bug.
            </fieldset>
          </td>
        </tr> 
      </table>
  </div>
  </td>
  <td>
  </td>
  </tr></table>

  
  <div id="comments"><script src="js/comments.js?1490378926" type="text/javascript">
</script>

<script type="text/javascript">
<!--
  /* Adds the reply text to the 'comment' textarea */
  function replyToComment(id, real_id, name) {
      var prefix = "(In reply to " + name + " from comment #" + id + ")\n";
      var replytext = "";
        /* pre id="comment_name_N" */
        var text_elem = document.getElementById('comment_text_'+id);
        var text = getText(text_elem);
        replytext = prefix + wrapReplyText(text);


      /* <textarea id="comment"> */
      var textarea = document.getElementById('comment');
      if (textarea.value != replytext) {
          textarea.value += replytext;
      }

      textarea.focus();
  } 
//-->
</script>


<!-- This auto-sizes the comments and positions the collapse/expand links 
     to the right. -->
<table class="bz_comment_table">
<tr>
<td>
<div id="c0" class="bz_comment bz_first_comment">

      <div class="bz_first_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c0">Description</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Buildbot Builder</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-03-23 13:30:03 UTC
        </span>

      </div>




<pre class="bz_comment_text">Problems have been found with the following capture file:

<a href="http://www.wireshark.org/download/automated/captures/fuzz-2014-03-22-14025.pcap">http://www.wireshark.org/download/automated/captures/fuzz-2014-03-22-14025.pcap</a>

stderr:
Input file: /home/wireshark/menagerie/menagerie/2395-srtpincorrectlyselected.pcap

Build host information:
Linux wsbb04 3.2.0-60-generic #91-Ubuntu SMP Wed Feb 19 03:54:44 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
Distributor ID:	Ubuntu
Description:	Ubuntu 12.04.4 LTS
Release:	12.04
Codename:	precise

Buildbot information:
BUILDBOT_REPOSITORY=
BUILDBOT_BUILDNUMBER=398
BUILDBOT_URL=<a href="http://buildbot.wireshark.org/trunk-1.10/">http://buildbot.wireshark.org/trunk-1.10/</a>
BUILDBOT_BUILDERNAME=Fuzz-Test
BUILDBOT_SLAVENAME=fuzz-test
BUILDBOT_GOT_REVISION=64d01437db89beebfa43f76a6175b82bc0643ec5

Return value:  139

Dissector bug:  0

Valgrind error count:  0



Git commit
<a href="https://code.wireshark.org/review/gitweb?p=wireshark.git;a=commit;h=64d01437db89beebfa43f76a6175b82bc0643ec5">commit 64d01437db89beebfa43f76a6175b82bc0643ec5</a>
Author: Hadriel Kaplan &lt;<a href="/cdn-cgi/l/email-protection#cea6afaabca7aba2a5e8edf8faf5b7afa6a1a1e0ada1a3">hadrielk&#64;yahoo.com</a>&gt;
Date:   Fri Mar 21 23:55:22 2014 -0400

    Fix master-1.10 typo bug in <a href="https://code.wireshark.org/review/#/q/ieee80211">ieee80211</a> preventing build
    
    There was a typo and apparent merge error in packet-ieee80211.c preventing building
    of master1-10.
    
    Change-Id: <a href="https://code.wireshark.org/review/#/q/If0287028264c3217ea1f05125d5da2d4c70d1d9f">If0287028264c3217ea1f05125d5da2d4c70d1d9f</a>
    Reviewed-on: <a href="https://code.wireshark.org/review/782">https://code.wireshark.org/review/782</a>
    Reviewed-by: Hadriel Kaplan &lt;<a href="/cdn-cgi/l/email-protection#375f5653455e525b5c111401030c4e565f58581954585a">hadrielk&#64;yahoo.com</a>&gt;
    Reviewed-by: Anders Broman &lt;<a href="/cdn-cgi/l/email-protection#23420d41514c4e424d161b0500151718444e424a4f0d404c4e">a.broman58&#64;gmail.com</a>&gt;


Command and args: ./tshark -nVxr


[ no debug trace ]</pre>
    </div>

    <div id="c1" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c1">Comment 1</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-03-31 20:09:03 UTC
        </span>

      </div>




<pre class="bz_comment_text">Valgrind (with tree) gives the following on master:

==9547== Invalid read of size 8
==9547==    at 0x9766564: g_hash_table_lookup (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==9547==    by 0x6B1383F: dissect_rtp (packet-rtp.c:1837)
==9547==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==9547==    by 0x655F134: call_dissector_work (packet.c:682)
==9547==    by 0x6551FE6: try_conversation_dissector (conversation.c:1307)
==9547==    by 0x6C2919B: decode_udp_ports (packet-udp.c:368)
==9547==    by 0x6C29BB9: dissect (packet-udp.c:750)
==9547==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==9547==    by 0x655F134: call_dissector_work (packet.c:682)
==9547==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==9547==    by 0x68F5E52: dissect_ip (packet-ip.c:2400)
==9547==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==9547==  Address 0x137d08a0 is 48 bytes inside a block of size 88 free'd
==9547==    at 0x4C2B68C: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==9547==    by 0x9765C66: g_hash_table_remove_all_nodes (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==9547==    by 0x97669A0: g_hash_table_remove_all (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==9547==    by 0x6554AD6: epan_dissect_reset (epan.c:298)
==9547==    by 0x413979: process_packet (tshark.c:3587)
==9547==    by 0x40BBD5: main (tshark.c:3323)
==9547== 
==9547== 
==9547== Process terminating with default action of signal 11 (SIGSEGV)
==9547==  Bad permissions for mapped region at address 0x85864C0
==9547==    at 0x85864C0: ??? (in /home/eapache/src/wireshark.org/wireshark/epan/.libs/libwireshark.so.0.0.3)
==9547==    by 0x9766568: g_hash_table_lookup (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==9547==    by 0x6B1383F: dissect_rtp (packet-rtp.c:1837)
==9547==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==9547==    by 0x655F134: call_dissector_work (packet.c:682)
==9547==    by 0x6551FE6: try_conversation_dissector (conversation.c:1307)
==9547==    by 0x6C2919B: decode_udp_ports (packet-udp.c:368)
==9547==    by 0x6C29BB9: dissect (packet-udp.c:750)
==9547==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==9547==    by 0x655F134: call_dissector_work (packet.c:682)
==9547==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==9547==    by 0x68F5E52: dissect_ip (packet-ip.c:2400)
==9547== 

without tree gives even more:

==31012== Invalid read of size 8
==31012==    at 0x9766564: g_hash_table_lookup (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==31012==    by 0x6B1383F: dissect_rtp (packet-rtp.c:1837)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x6551FE6: try_conversation_dissector (conversation.c:1307)
==31012==    by 0x6C2919B: decode_udp_ports (packet-udp.c:368)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==    by 0x68F5E52: dissect_ip (packet-ip.c:2400)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012==  Address 0x14848960 is 48 bytes inside a block of size 88 free'd
==31012==    at 0x4C2B68C: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==31012==    by 0x6B15183: srtp_add_address (packet-rtp.c:1026)
==31012==    by 0x6B53026: setup_sdp_transport (packet-sdp.c:2096)
==31012==    by 0x6B6AA85: dissect_sip_common (packet-sip.c:3527)
==31012==    by 0x6B6B710: dissect_sip (packet-sip.c:2253)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==    by 0x655F846: dissector_try_uint (packet.c:1139)
==31012==    by 0x6C292E7: decode_udp_ports (packet-udp.c:411)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012== 
==31012== Invalid read of size 8
==31012==    at 0x976657A: g_hash_table_lookup (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==31012==    by 0x6B1383F: dissect_rtp (packet-rtp.c:1837)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x6551FE6: try_conversation_dissector (conversation.c:1307)
==31012==    by 0x6C2919B: decode_udp_ports (packet-udp.c:368)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==    by 0x68F5E52: dissect_ip (packet-ip.c:2400)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012==  Address 0x14848950 is 32 bytes inside a block of size 88 free'd
==31012==    at 0x4C2B68C: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==31012==    by 0x6B15183: srtp_add_address (packet-rtp.c:1026)
==31012==    by 0x6B53026: setup_sdp_transport (packet-sdp.c:2096)
==31012==    by 0x6B6AA85: dissect_sip_common (packet-sip.c:3527)
==31012==    by 0x6B6B710: dissect_sip (packet-sip.c:2253)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==    by 0x655F846: dissector_try_uint (packet.c:1139)
==31012==    by 0x6C292E7: decode_udp_ports (packet-udp.c:411)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012== 
==31012== Invalid read of size 4
==31012==    at 0x9766587: g_hash_table_lookup (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==31012==    by 0x6B1383F: dissect_rtp (packet-rtp.c:1837)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x6551FE6: try_conversation_dissector (conversation.c:1307)
==31012==    by 0x6C2919B: decode_udp_ports (packet-udp.c:368)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==    by 0x68F5E52: dissect_ip (packet-ip.c:2400)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012==  Address 0x14848934 is 4 bytes inside a block of size 88 free'd
==31012==    at 0x4C2B68C: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==31012==    by 0x6B15183: srtp_add_address (packet-rtp.c:1026)
==31012==    by 0x6B53026: setup_sdp_transport (packet-sdp.c:2096)
==31012==    by 0x6B6AA85: dissect_sip_common (packet-sip.c:3527)
==31012==    by 0x6B6B710: dissect_sip (packet-sip.c:2253)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==    by 0x655F846: dissector_try_uint (packet.c:1139)
==31012==    by 0x6C292E7: decode_udp_ports (packet-udp.c:411)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012== 
==31012== Invalid read of size 4
==31012==    at 0x9766593: g_hash_table_lookup (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==31012==    by 0x6B1383F: dissect_rtp (packet-rtp.c:1837)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x6551FE6: try_conversation_dissector (conversation.c:1307)
==31012==    by 0x6C2919B: decode_udp_ports (packet-udp.c:368)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==    by 0x68F5E52: dissect_ip (packet-ip.c:2400)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012==  Address 0x14848a64 is 20 bytes inside a block of size 32 free'd
==31012==    at 0x4C2B68C: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==31012==    by 0x976650B: g_hash_table_unref (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==31012==    by 0x6B15183: srtp_add_address (packet-rtp.c:1026)
==31012==    by 0x6B53026: setup_sdp_transport (packet-sdp.c:2096)
==31012==    by 0x6B6AA85: dissect_sip_common (packet-sip.c:3527)
==31012==    by 0x6B6B710: dissect_sip (packet-sip.c:2253)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==    by 0x655F846: dissector_try_uint (packet.c:1139)
==31012==    by 0x6C292E7: decode_udp_ports (packet-udp.c:411)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012== 
==31012== Invalid read of size 8
==31012==    at 0x9766564: g_hash_table_lookup (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==31012==    by 0x6B1229E: process_rtp_payload (packet-rtp.c:1168)
==31012==    by 0x6B1252C: dissect_rtp_data (packet-rtp.c:1355)
==31012==    by 0x6B144C3: dissect_rtp (packet-rtp.c:2102)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x6551FE6: try_conversation_dissector (conversation.c:1307)
==31012==    by 0x6C2919B: decode_udp_ports (packet-udp.c:368)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==  Address 0x14848960 is 48 bytes inside a block of size 88 free'd
==31012==    at 0x4C2B68C: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==31012==    by 0x6B15183: srtp_add_address (packet-rtp.c:1026)
==31012==    by 0x6B53026: setup_sdp_transport (packet-sdp.c:2096)
==31012==    by 0x6B6AA85: dissect_sip_common (packet-sip.c:3527)
==31012==    by 0x6B6B710: dissect_sip (packet-sip.c:2253)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==    by 0x655F846: dissector_try_uint (packet.c:1139)
==31012==    by 0x6C292E7: decode_udp_ports (packet-udp.c:411)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012== 
==31012== Invalid read of size 8
==31012==    at 0x976657A: g_hash_table_lookup (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==31012==    by 0x6B1229E: process_rtp_payload (packet-rtp.c:1168)
==31012==    by 0x6B1252C: dissect_rtp_data (packet-rtp.c:1355)
==31012==    by 0x6B144C3: dissect_rtp (packet-rtp.c:2102)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x6551FE6: try_conversation_dissector (conversation.c:1307)
==31012==    by 0x6C2919B: decode_udp_ports (packet-udp.c:368)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==  Address 0x14848950 is 32 bytes inside a block of size 88 free'd
==31012==    at 0x4C2B68C: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==31012==    by 0x6B15183: srtp_add_address (packet-rtp.c:1026)
==31012==    by 0x6B53026: setup_sdp_transport (packet-sdp.c:2096)
==31012==    by 0x6B6AA85: dissect_sip_common (packet-sip.c:3527)
==31012==    by 0x6B6B710: dissect_sip (packet-sip.c:2253)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==    by 0x655F846: dissector_try_uint (packet.c:1139)
==31012==    by 0x6C292E7: decode_udp_ports (packet-udp.c:411)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012== 
==31012== Invalid read of size 4
==31012==    at 0x9766587: g_hash_table_lookup (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==31012==    by 0x6B1229E: process_rtp_payload (packet-rtp.c:1168)
==31012==    by 0x6B1252C: dissect_rtp_data (packet-rtp.c:1355)
==31012==    by 0x6B144C3: dissect_rtp (packet-rtp.c:2102)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x6551FE6: try_conversation_dissector (conversation.c:1307)
==31012==    by 0x6C2919B: decode_udp_ports (packet-udp.c:368)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==  Address 0x14848934 is 4 bytes inside a block of size 88 free'd
==31012==    at 0x4C2B68C: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==31012==    by 0x6B15183: srtp_add_address (packet-rtp.c:1026)
==31012==    by 0x6B53026: setup_sdp_transport (packet-sdp.c:2096)
==31012==    by 0x6B6AA85: dissect_sip_common (packet-sip.c:3527)
==31012==    by 0x6B6B710: dissect_sip (packet-sip.c:2253)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==    by 0x655F846: dissector_try_uint (packet.c:1139)
==31012==    by 0x6C292E7: decode_udp_ports (packet-udp.c:411)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012== 
==31012== Invalid read of size 4
==31012==    at 0x9766593: g_hash_table_lookup (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==31012==    by 0x6B1229E: process_rtp_payload (packet-rtp.c:1168)
==31012==    by 0x6B1252C: dissect_rtp_data (packet-rtp.c:1355)
==31012==    by 0x6B144C3: dissect_rtp (packet-rtp.c:2102)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x6551FE6: try_conversation_dissector (conversation.c:1307)
==31012==    by 0x6C2919B: decode_udp_ports (packet-udp.c:368)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)
==31012==    by 0x655E843: call_dissector_through_handle (packet.c:595)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==  Address 0x14848a64 is 20 bytes inside a block of size 32 free'd
==31012==    at 0x4C2B68C: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==31012==    by 0x976650B: g_hash_table_unref (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==31012==    by 0x6B15183: srtp_add_address (packet-rtp.c:1026)
==31012==    by 0x6B53026: setup_sdp_transport (packet-sdp.c:2096)
==31012==    by 0x6B6AA85: dissect_sip_common (packet-sip.c:3527)
==31012==    by 0x6B6B710: dissect_sip (packet-sip.c:2253)
==31012==    by 0x655E87E: call_dissector_through_handle (packet.c:591)
==31012==    by 0x655F134: call_dissector_work (packet.c:682)
==31012==    by 0x655F7EB: dissector_try_uint_new (packet.c:1113)
==31012==    by 0x655F846: dissector_try_uint (packet.c:1139)
==31012==    by 0x6C292E7: decode_udp_ports (packet-udp.c:411)
==31012==    by 0x6C29BB9: dissect (packet-udp.c:750)

More problems with the RTP hash tables... we should really just get rid of those, they have caused a lot of problems. Maybe a wmem-backed hash table would simplify things? I haven't even bothered running this against 1.10 where the fuzz-bot actually failed...</pre>
    </div>

    <div id="c2" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c2">Comment 2</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-03-31 20:12:37 UTC
        </span>

      </div>




<pre class="bz_comment_text">Hadriel, you've been digging around in this recently. It's all yours if you want it :)</pre>
    </div>

    <div id="c3" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c3">Comment 3</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Hadriel Kaplan</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-03-31 20:29:47 UTC
        </span>

      </div>




<pre class="bz_comment_text">Do I need to use valgrind to reproduce the problem?  Unfortunately I'm on Mac Mavericks, which valgrind does not work on. (Eventually I'm going to get a Linux VM running on a new machine I'm getting this week, but not in the next few days.)</pre>
    </div>

    <div id="c4" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c4">Comment 4</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-01 02:38:59 UTC
        </span>

      </div>




<pre class="bz_comment_text">The buildbot and the valgrind sigsegv suggests that if you run it a couple of times you should an actual core dump. You might also try running Address Sanitizer (which is valgrind-esque but runs on macs AFAIK; Alexis knows more about it).</pre>
    </div>

    <div id="c5" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c5">Comment 5</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Hadriel Kaplan</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-01 05:08:34 UTC
        </span>

      </div>




<pre class="bz_comment_text">Huh weird - it doesn't crash in wireshark-gtk for me, but yeah in tshark I can get it to crash.  I'll look into it tomorrow morning. (please set this bug to in-progress)</pre>
    </div>

    <div id="c6" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c6">Comment 6</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Hadriel Kaplan</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-01 16:09:14 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=12671" name="attach_12671" title="minimal pcap needed to crash">attachment 12671</a> <a href="attachment.cgi?id=12671&amp;action=edit" title="minimal pcap needed to crash">[details]</a></span>
minimal pcap needed to crash

This is the minimal pcap needed to crash. I haven't done any debugging yet, but the INVITE's SDP has two m= lines for the same port number, so my guess is RTP is deleting the hash table of the first media stream when it's told to add the second one, because they'll be in the same ip:port conversation. But SDP will think the first one is valid still. And then the 200 OK's SDP disables the second one, so RTP will set the conversation hashtable back to the one it previously free'd.</pre>
    </div>

    <div id="c7" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c7">Comment 7</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Hadriel Kaplan</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-01 17:31:36 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=9920#c6">comment #6</a>)
<span class="quote">&gt; but the INVITE's SDP has two m= lines for the same port number, so my guess
&gt; is RTP is deleting the hash table of the first media stream when it's told
&gt; to add the second one, because they'll be in the same ip:port conversation.
&gt; But SDP will think the first one is valid still. And then the 200 OK's SDP
&gt; disables the second one, so RTP will set the conversation hashtable back to
&gt; the one it previously free'd.</span >

Yeah, I enabled the debug printing stuff and that's what's happening.

In fact there's another bug happening too, but it's not causing the crash. The unrelated bug is that in the 200 OK, the SDP dissector is inserting the dynamic payload hash for the rtpmap into the wrong media channel. It should be inserting it into channel #2, but it's inserting it for channel #3. I'll open a different bug for that one.

But getting back to this bug... there are really two problems:
1) The memory ownership model for the rtp_dyn_payload hashtable is split: SDP creates the rtp_dyn_payload hashtable, but RTP can free it. Since there isn't *one* pointer to the hashtable, RTP freeing it means SDP has a dangling pointer. Or another way to think about it: SDP calls rtp_add_address() with its rtp_dyn_payload pointer *value*, not a pointer to the pointer; so RTP is operating on a local pointer which it copies and later free's, and SDP will never know. Fundamentally this isn't safe - it's what causes these types of crashes, and makes it hard to debug because the crashing isn't consistently reproducible because a free'd hashtable memory location might still be valid content. (in fact, I have a very hard time reproducing this bug - it's a roll of the dice)

2) Either the SDP dissector shouldn't be creating two separate, unique hashtables for multiple media channels of the same addr:port, or RTP shouldn't be free'ing the previous one. The latter change would be tricky, because RTP would have to figure out what to do with them: i.e., should it keep both somehow? Also, RTP does need to truly replace the hashtable sometimes; for example when a new SDP offer/answer round changes the info for the same RTP ip:port, or even if it's just a new call that happens to use the same RTP addr:port as a previously ended call. (although what if the previous call didn't end? Then you could get this crash again due to issue (1) above)

Historically its been ambiguous whether having two or more m= lines for the same address and port number is legitimate - we've debated this issue in the IETF numerous times. Lately, however, there has been a move towards allowing it; mostly for WebRTC, but potentially for SIP too. So I think the right fix for issue (2) above is to make SDP use the same hashtable for media channels of the same addr:port.

The right fix for issue (1) is to stop using just local pointer values. Unfortunately SDP is not the only dissector to setup RTP flows. There about a dozen others.</pre>
    </div>

    <div id="c8" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c8">Comment 8</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-01 17:35:16 UTC
        </span>

      </div>




<pre class="bz_comment_text">without thinking about this too hard, could RTP simply empty the hash table rather than destroy it and create a new one? this would avoid the crashes, but I don't know if it would actually give the right dissection...</pre>
    </div>

    <div id="c9" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c9">Comment 9</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Hadriel Kaplan</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-01 18:28:23 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=9920#c8">comment #8</a>)
<span class="quote">&gt; without thinking about this too hard, could RTP simply empty the hash table
&gt; rather than destroy it and create a new one? this would avoid the crashes,
&gt; but I don't know if it would actually give the right dissection...</span >

It could, but that could cause memory leaks if SDP thinks they're free'd; it would allocate them again later... which will happen if the media for that channel changes back/forth using dynamic payload later (like in an SDP change mid-call).

Then again, memory leaks appear to already be happening to some degree - I don't see anything in this code that destroys the hashtables at the end of calls, or even at the close of a capture file. The conversation stuff is wmem-created, but the hashtable itself isn't, and there's nothing hooked into wmem_register_cleanup_callback to destroy the hashtable.

So the wmem-managed struct has a pointer to the hashtable, but I assume wmem doesn't somehow magically go call g_hash_table_destroy() on the member hashtable right? :)</pre>
    </div>

    <div id="c10" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c10">Comment 10</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Hadriel Kaplan</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-01 18:30:18 UTC
        </span>

      </div>




<pre class="bz_comment_text">I suppose instead of using a pointer-to-pointer model, I could use the g_hash_table_ref()/g_hash_table_unref() mechanism.</pre>
    </div>

    <div id="c11" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c11">Comment 11</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Hadriel Kaplan</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-01 20:23:13 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=9920#c10">comment #10</a>)
<span class="quote">&gt; I suppose instead of using a pointer-to-pointer model, I could use the
&gt; g_hash_table_ref()/g_hash_table_unref() mechanism.</span >

Scratch that - it won't help.</pre>
    </div>

    <div id="c12" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c12">Comment 12</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Hadriel Kaplan</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-01 20:38:34 UTC
        </span>

      </div>




<pre class="bz_comment_text">Ya know, what I think this really asks for is a wmem_hashtable data structure. RTP and the dissectors which call it for this stuff (SIP, H.245, RTSP, etc.) should be creating a new wmem_hashtable scoped to the file pool, and they can all just stop pointing to it and let it be cleaned up when the capture file closes.</pre>
    </div>

    <div id="c13" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c13">Comment 13</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-01 20:39:35 UTC
        </span>

      </div>




<pre class="bz_comment_text">I don't know enough about SIP/SDP/RDP and the relevant state that needs saving but it sounds to me like even a wmem hash table would only sort of fix the leak (in that all the memory would eventually be freed, but much of it would be &quot;dead&quot; long before that). This isn't a problem with packet-scoped memory since it's lifetime is so short, but its something I've been trying to avoid with file-scoped memory.

<span class="quote">&gt; So the wmem-managed struct has a pointer to the hashtable, but I assume wmem
&gt; doesn't somehow magically go call g_hash_table_destroy() on the member
&gt; hashtable right? :)</span >

Not unless you register a callback, which is probably the easiest thing to do. The alternatives are write a wmem hash table (which is on my far-future todo list) or switch everything to wmem trees (which would probably be a performance hit).

---

And yes, valgrind confirms that the capture file (the fuzzbot, not the minimal) does leak some memory. Relevant snips:

==26021== 2,464 (1,056 direct, 1,408 indirect) bytes in 12 blocks are definitely lost in loss record 3,613 of 3,688
==26021==    at 0x4C2A420: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==26021==    by 0x977F610: g_malloc (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==26021==    by 0x979522D: g_slice_alloc (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==26021==    by 0x976917D: g_hash_table_new_full (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==26021==    by 0x6B54F1B: dissect_sdp (packet-sdp.c:2285)
==26021==    by 0x655EF03: call_dissector_through_handle (packet.c:595)
==26021==    by 0x655F7F4: call_dissector_work (packet.c:682)
==26021==    by 0x6560182: dissector_try_string (packet.c:1385)
==26021==    by 0x6B6CCF5: dissect_sip_common (packet-sip.c:3563)
==26021==    by 0x6B6E680: dissect_sip (packet-sip.c:2253)
==26021==    by 0x655EF3E: call_dissector_through_handle (packet.c:591)
==26021==    by 0x655F7F4: call_dissector_work (packet.c:682)

==26021== 248 (88 direct, 160 indirect) bytes in 1 blocks are definitely lost in loss record 3,344 of 3,688
==26021==    at 0x4C2A420: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==26021==    by 0x977F610: g_malloc (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==26021==    by 0x979522D: g_slice_alloc (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==26021==    by 0x976917D: g_hash_table_new_full (in /lib/x86_64-linux-gnu/libglib-2.0.so.0.4000.0)
==26021==    by 0x6B5595E: setup_sdp_transport (packet-sdp.c:1921)
==26021==    by 0x6B6DE68: dissect_sip_common (packet-sip.c:3545)
==26021==    by 0x6B6E680: dissect_sip (packet-sip.c:2253)
==26021==    by 0x655EF3E: call_dissector_through_handle (packet.c:591)
==26021==    by 0x655F7F4: call_dissector_work (packet.c:682)
==26021==    by 0x655FEAB: dissector_try_uint_new (packet.c:1113)
==26021==    by 0x655FF06: dissector_try_uint (packet.c:1139)
==26021==    by 0x6C2C257: decode_udp_ports (packet-udp.c:411)
==26021==</pre>
    </div>

    <div id="c14" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c14">Comment 14</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Hadriel Kaplan</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-01 21:36:48 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=9920#c13">comment #13</a>)
<span class="quote">&gt; I don't know enough about SIP/SDP/RDP and the relevant state that needs
&gt; saving</span >

It's not just a SIP/SDP problem: H.245, ANSI A Interface, and Apple MIDI also create the hashtable but never free it. And SDP creates it not just for SIP, but also for Megaco, MGCP, and Cisco Session Management Protocol.


<span class="quote">&gt; but it sounds to me like even a wmem hash table would only sort of
&gt; fix the leak (in that all the memory would eventually be freed, but much of
&gt; it would be &quot;dead&quot; long before that). This isn't a problem with
&gt; packet-scoped memory since it's lifetime is so short, but its something I've
&gt; been trying to avoid with file-scoped memory.</span >

Right now, RTP's conversation state is already kept for the duration of a capture file. (I don't mean the stuff that isn't free'd, I mean the wmem-managed stuff is scoped to wmem_file_scope)

Currently RTP has no concept of the lifetime of an RTP session - the applications which call it do, but don't tell RTP about the end of a session. I.e., SIP, H.245, MGCP, etc., know when the RTP stream is over, so they could tell it to free up the conversation resources, including the hashtables and all.</pre>
    </div>

    <div id="c15" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c15">Comment 15</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Hadriel Kaplan</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-02 07:10:28 UTC
        </span>

      </div>




<pre class="bz_comment_text">Patch uploaded:
<a href="https://code.wireshark.org/review/#/c/918/">https://code.wireshark.org/review/#/c/918/</a>

Interestingly, solving issue (1) the way I did also resolved issue (2). Because it's now ref-counted, so even though SDP gives RTP two different dyn_payloads in the INVITE for the same conversation, RTP doesn't truly free the first one because SDP still has a ref to it. So when SDP install the first one again in the 200 OK, it's still valid.

There's still the issue of SDP inserting the rtpmap info into the wrong channel, but that's unrelated and doesn't cause a crash.

Also, the uploaded patch resolves the memory leaks, but only insofar as they're all destroyed at the end of the wmem file scope. SDP (and the other protocols) still don't remove the RTP conversations when they could, when each call ends.</pre>
    </div>

    <div id="c16" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c16">Comment 16</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Hadriel Kaplan</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-02 07:17:35 UTC
        </span>

      </div>




<pre class="bz_comment_text">The unrelated bug mentioned earlier has been submitted as <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED FIXED - SDP inserts rtpmap dynamic payload info into wrong media channel"
   href="show_bug.cgi?id=9946">bug 9946</a>.</pre>
    </div>

    <div id="c17" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c17">Comment 17</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Evan Huus</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-03 12:47:07 UTC
        </span>

      </div>




<pre class="bz_comment_text">The original fuzz capture now runs clean under valgrind. Thanks!</pre>
    </div>

    <div id="c18" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c18">Comment 18</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Michael Mann</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-06 19:12:48 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2014-04-05-22532.pcap"
   href="show_bug.cgi?id=9954">Bug 9954</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c19" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c19">Comment 19</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Guy Harris</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-06 19:18:26 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=9920#c15">comment #15</a>)
<span class="quote">&gt; Also, the uploaded patch resolves the memory leaks, but only insofar as
&gt; they're all destroyed at the end of the wmem file scope. SDP (and the other
&gt; protocols) still don't remove the RTP conversations when they could, when
&gt; each call ends.</span >

I.e., those data structures are only needed on the first, sequential, pass through the packets, and are not needed by subsequent re-dissection of the packets?</pre>
    </div>

    <div id="c20" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c20">Comment 20</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Hadriel Kaplan</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-04-06 19:53:08 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=9920#c19">comment #19</a>)
<span class="quote">&gt; I.e., those data structures are only needed on the first, sequential, pass
&gt; through the packets, and are not needed by subsequent re-dissection of the
&gt; packets?</span >

That's a really good point. Yes you're right, it will be needed for subsequent/random re-dissection.

Thinking about that, it raises another potential bug: RTP keeps the payload type mapping info in the conversation, so what happens if in the same capture the call ends, another one begins, and the new one uses the same IP:ports for the RTP flows but with different payload type mappings?

My guess is it would replace the conversation info, and change the results of the first call depending on what you click in the GUI. (I.e., if you select one of the first call's RTP packets, it will probably dissect it using the second call's mapping info; until you click the first call's SIP messages, at which point it now dissects the second call's RTP using the first call's info)

I'd have to test that to be sure though - I'm just guessing.

It's not as unlikely a scenario as one might expect, since SIP SBCs, gateways, and test equipment re-use the same IP:ports from previously ended calls in a relatively short timeframe.</pre>
    </div>

    <div id="c21" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c21">Comment 21</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jeff Morriss</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-07-30 00:02:13 UTC
        </span>

      </div>




<pre class="bz_comment_text">This was reported against master-1.10 but AFAICT it wasn't fixed there.  Is there a reason?

I ask because the fuzz-bot found another failure in the same area (<a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2014-07-12-24751.pcap"
   href="show_bug.cgi?id=10278">bug 10278</a>).</pre>
    </div>

    <div id="c22" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c22">Comment 22</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jeff Morriss</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-07-31 14:31:14 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2014-07-12-24751.pcap"
   href="show_bug.cgi?id=10278">Bug 10278</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c23" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c23">Comment 23</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jeff Morriss</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-07-31 14:31:25 UTC
        </span>

      </div>




<pre class="bz_comment_text">*** <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - SIP capture causes wireshark to crash 1.10.8"
   href="show_bug.cgi?id=10328">Bug 10328</a> has been marked as a duplicate of this bug. ***</pre>
    </div>

    <div id="c24" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c24">Comment 24</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jeff Morriss</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-07-31 14:32:17 UTC
        </span>

      </div>




<pre class="bz_comment_text">Reopening to consider what to do in master-1.10.

Here's Evan's comment fromm <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED DUPLICATE - Buildbot crash output: fuzz-2014-07-12-24751.pcap"
   href="show_bug.cgi?id=10278">bug 10278</a>:

~~~
Looks like the same issue to me on a cursory glance. Unfortunately Hadriel's fix is fairly complex (there was some bad stuff going on with ownership of the hash table which wasn't straightforward) so it's not easily backportable.

The only &quot;bad&quot; fix I can think of is just to not free it, which adds a memory leak, but 1.10 already has a lot of those...
~~~</pre>
    </div>

    <div id="c25" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c25">Comment 25</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Gerrit Code Review</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-08-02 01:46:55 UTC
        </span>

      </div>




<pre class="bz_comment_text">Change 3342 had a related patch set uploaded by Evan Huus:
Don't free the hash if another one exists

<a href="https://code.wireshark.org/review/3342">https://code.wireshark.org/review/3342</a></pre>
    </div>

    <div id="c26" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c26">Comment 26</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Gerrit Code Review</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-08-03 20:55:06 UTC
        </span>

      </div>




<pre class="bz_comment_text">Change 3342 merged by Michael Mann:
Don't free the hash if another one exists

<a href="https://code.wireshark.org/review/3342">https://code.wireshark.org/review/3342</a></pre>
    </div>

    <div id="c27" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c27">Comment 27</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Gerrit Code Review</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-10-02 19:54:12 UTC
        </span>

      </div>




<pre class="bz_comment_text">Change 4422 had a related patch set uploaded by Balint Reczey:
Don't free the hash if another one exists

<a href="https://code.wireshark.org/review/4422">https://code.wireshark.org/review/4422</a></pre>
    </div>

    <div id="c28" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c28">Comment 28</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Gerrit Code Review</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-10-03 11:54:38 UTC
        </span>

      </div>




<pre class="bz_comment_text">Change 4436 had a related patch set uploaded by Balint Reczey:
Don't free the hash if another one exists

<a href="https://code.wireshark.org/review/4436">https://code.wireshark.org/review/4436</a></pre>
    </div>

    <div id="c29" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c29">Comment 29</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Gerrit Code Review</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-10-04 11:11:50 UTC
        </span>

      </div>




<pre class="bz_comment_text">Change 4436 merged by Balint Reczey:
Don't free the hash if another one exists

<a href="https://code.wireshark.org/review/4436">https://code.wireshark.org/review/4436</a></pre>
    </div>

    <div id="c30" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=9920#c30">Comment 30</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Gerrit Code Review</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-10-04 11:16:08 UTC
        </span>

      </div>




<pre class="bz_comment_text">Change 4422 merged by Balint Reczey:
Don't free the hash if another one exists

<a href="https://code.wireshark.org/review/4422">https://code.wireshark.org/review/4422</a></pre>
    </div>


  

</td>
<td>
</td>
</tr></table>
  </div>
        

</form>

<hr>
<ul class="related_actions">
    <li><a href="show_bug.cgi?format=multiple&amp;id=9920">Format For Printing</a></li>
    <li>&nbsp;-&nbsp;<a href="show_bug.cgi?ctype=xml&amp;id=9920">XML</a></li>
    <li>&nbsp;-&nbsp;<a href="enter_bug.cgi?cloned_bug_id=9920">Clone This Bug</a></li>
    
    <li>&nbsp;-&nbsp;<a href="#">Top of page </a></li>
    </ul>

<br>
</div>

    <div id="footer">
      <div class="intro"></div>
<ul id="useful-links">
  <li id="links-actions"><ul class="links">
  <li><a href="https://www.wireshark.org/">Wireshark Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_bottom" name="no_redirect" value="0">
    <script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_bottom" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_bottom"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/5.0/using/understanding.html" target="_blank">Help</a>
      </li>
    

    <li id="mini_login_container_bottom">
  <span class="separator">| </span>
  <a id="login_link_bottom" href="show_bug.cgi?id=9920&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_bottom')">Log In</a>

  <form action="show_bug.cgi?id=9920" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_bottom">
    <input id="Bugzilla_login_bottom" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_bottom" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_bottom">
    <a href="#" onclick="return hide_mini_login_form('_bottom')">[x]</a>
  </form>
</li>


  <li id="forgot_container_bottom">
    <span class="separator">| </span>
    <a id="forgot_link_bottom" href="show_bug.cgi?id=9920&amp;GoAheadAndLogIn=1#forgot"
       onclick="return show_forgot_form('_bottom')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_bottom"
          class="mini_forgot bz_default_hidden">
      <label for="login_bottom">Login:</label>
      <input name="loginname" size="20" id="login_bottom" required
          type="email" placeholder="Your Email Address">
      <input id="forgot_button_bottom" value="Reset Password" type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_bottom" name="token"
             value="1635622035-hGuNObx73sJkCtEVUf6nw76CyL8oeVeyhdzcwyvEmJE">
      <a href="#" onclick="return hide_forgot_form('_bottom')">[x]</a>
    </form>
  </li>
</ul>
  </li>

  




  
</ul>

      <div class="outro"></div>
    </div>

  </body>
</html>