<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    
        <link rel='alternate' type='application/rss+xml' title='Scripting Engine problem Bug #71270 - RDF' href='rss/bug.php?id=71270'>
        <link rel='alternate' type='application/rss+xml' title='Scripting Engine problem Bug #71270 - RSS 2.0' href='rss/bug.php?id=71270&format=rss2'>
        <base href="https://bugs.php.net/">
    <title>PHP :: Sec Bug #71270 :: Heap BufferOver Flow in escapeshell functions</title>
    <link rel="shortcut icon" href="https://bugs.php.net/images/favicon.ico">
    <link rel="stylesheet" href="https://bugs.php.net/css/style.css">
</head>

<body>

<table id="top" class="head" cellspacing="0" cellpadding="0">
    <tr>
        <td class="head-logo">
            <a href="/"><img src="images/logo.png" alt="Bugs" vspace="2" hspace="2"></a>
        </td>

        <td class="head-menu">
            <a href="https://php.net/">php.net</a>&nbsp;|&nbsp;
            <a href="https://php.net/support.php">support</a>&nbsp;|&nbsp;
            <a href="https://php.net/docs.php">documentation</a>&nbsp;|&nbsp;
            <a href="report.php">report a bug</a>&nbsp;|&nbsp;
            <a href="search.php">advanced search</a>&nbsp;|&nbsp;
            <a href="search-howto.php">search howto</a>&nbsp;|&nbsp;
            <a href="stats.php">statistics</a>&nbsp;|&nbsp;
            <a href="random">random bug</a>&nbsp;|&nbsp;
            <a href="login.php">login</a>
        </td>
    </tr>

    <tr>
        <td class="head-search" colspan="2">
            <form method="get" action="search.php">
                <p class="head-search">
                    <input type="hidden" name="cmd" value="display">
                    <small>go to bug id or search bugs for</small>
                    <input class="small" type="text" name="search_for" value="" size="30">
                    <input type="image" src="images/small_submit_white.gif" alt="search" style="vertical-align: middle;">
                </p>
            </form>
        </td>
    </tr>
</table>

<table class="middle" cellspacing="0" cellpadding="0">
    <tr>
        <td class="content">
<div id="bugheader">
    <table id="details">
        <tr id="title">
            <th class="details" id="number"><a href="bug.php?id=71270">Sec Bug</a>&nbsp;#71270</th>
            <td id="summary" colspan="5">Heap BufferOver Flow in escapeshell functions</td>
        </tr>
        <tr id="submission">
            <th class="details">Submitted:</th>
            <td style="white-space: nowrap;">2016-01-03 23:26 UTC</td>
            <th class="details">Modified:</th>
            <td style="white-space: nowrap;">2016-01-21 11:46 UTC</td>
            <td rowspan="6">


            </td>
        </tr>

        <tr id="submitter">
            <th class="details">From:</th>
            <td>emmanuel &#x64;&#111;&#x74; law &#x61;&#116; gmail &#x64;&#111;&#x74; com</td>
            <th class="details">Assigned:</th>
            <td><a href="search.php?cmd=display&amp;assign=ab">ab</a> (<a href="https://people.php.net/ab">profile</a>)</td>
        </tr>

        <tr id="categorization">
            <th class="details">Status:</th>
            <td>Closed</td>
            <th class="details">Package:</th>
            <td><a href="search.php?cmd=display&amp;package_name[]=Scripting+Engine+problem">Scripting Engine problem</a></td>
        </tr>

        <tr id="situation">
            <th class="details">PHP Version:</th>
            <td>7.0.1</td>
            <th class="details">OS:</th>
            <td></td>
        </tr>

        <tr id="private">
            <th class="details">Private report:</th>
            <td>No</td>
            <th class="details">CVE-ID:</th>
            <td><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-1904" target="_blank">2016-1904</a></td>
        </tr>
    </table>
</div>

<div class="controls">
<span id='control_0' class='control active'>View</span>
<span id='control_3' class='control'><a href='bug.php?id=71270&amp;edit=3'>Add Comment</a></span>
<span id='control_1' class='control'><a href='bug.php?id=71270&amp;edit=1'>Developer</a></span>
<span id='control_2' class='control'><a href='bug.php?id=71270&amp;edit=2'>Edit</a></span>
</div>
<div class="clear"></div>



<div class='comment type_comment' ><a name="1451863564">&nbsp;</a><strong>[2016-01-03 23:26 UTC] emmanuel &#x64;&#111;&#x74; law &#x61;&#116; gmail &#x64;&#111;&#x74; com</strong>
<pre class='note'>Description:
------------

1)I found this vulnerability using a custom PHP engine fuzzer that I wrote. There exist a heap-based buffer over flow that allows one to write a user tainted data pass an allocated buffer. This vulnerability lies in the following functions:
	escapeshellarg 
	escapeshellcmd 

2) On a default php installation, the memory limit is set to 128MB and this vulnerability is not triggerable. My analysis shows that this is triggerable when memory limit is roughly &gt; 1024mb. A quick search on github shows that it's not uncommon to see code like &quot;ini_set('memory_limit', -1);&quot;


3)I've created a POC that triggers the buffer over write with 0x414141414141.....

4) A string of 1024mb is created and passed into escapeshellarg. &quot;l&quot; contains the length of this string:

Breakpoint 2, php_escape_shell_arg (str=0x7fffad469028 'A' &lt;repeats 200 times&gt;...) at /home/elaw/php-7.0.0/ext/standard/exec.c:343
343             int x, y = 0, l = (int)strlen(str);

gdb-peda$ print l
$43 = 0x40000000            // 1024mb



5) This length &quot;l&quot; is then passed into zend_string_alloc as &quot;4 * l + 2&quot; which results in an integer overflow:

Temporary breakpoint 3, php_escape_shell_arg (str=0x7fffad000018 'A' &lt;repeats 200 times&gt;...) at /home/elaw/php-7.0.1/ext/standard/exec.c:348
348             cmd = zend_string_alloc(4 * l + 2, 0); /* worst case */


gdb-peda$ print 4* l + 2
$44 = 0x2 				   //Overflow


6) Stepping into zend_string_alloc to verify the integer overflow. Notice len=0x2:
zend_string_alloc (persistent=0x0, len=0x2) at /home/elaw/php-7.0.0/Zend/zend_string.h:121      
121             zend_string *ret = (zend_string *)pemalloc(ZEND_MM_ALIGNED_SIZE(_ZSTR_STRUCT_SIZE(len)), persistent);


7) Lets confirm the overflow again in the allocated (zend_string *) cmd. Notice cmd.len=0x2:
gdb-peda$ p *cmd
$52 = {
  gc = {
    refcount = 0x1,
    u = {
      v = {
        type = 0x6,
        flags = 0x0,
        gc_info = 0x0
      },
      type_info = 0x6
    }
  },
  h = 0x0,
  len = 0x2,
  val = &quot;1&quot;
}



8) The loops then writes pass the allocated buffer in

258		for (x = 0, y = 0; x &lt; l; x++) {
....
321       ZSTR_VAL(cmd)[y++] = str[x];



9) Verifying the buffer overflow in 
gdb-peda$ p (zend_string *)cmd.len
$9 = (zend_string *) 0x2
gdb-peda$ x/100b (zend_string *)cmd.val
0x1625a58:      0x27    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x1625a60:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x1625a68:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x1625a70:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x1625a78:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x1625a80:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x1625a88:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x1625a90:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x1625a98:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x1625aa0:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x1625aa8:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x1625ab0:      0x41    0x41    0x41    0x41    0x41    0x41    0x41    0x41
0x1625ab8:      0x41    0x41    0x41    0x41


10) The vulnerability for php_escape_shell_cmd is identical.

11) I've created a POC for ubuntu x64 php7.
<a href="https://www.dropbox.com/s/og6g9bt1ulmibnd/escapeshellarg_Heap_BOF_POC.php?dl=0" rel="nofollow">https://www.dropbox.com/s/og6g9bt1ulmibnd/escapeshellarg_Heap_BOF_POC.php?dl=0</a>

11) I've also wrote a patch to uses zend_string_safe_alloc instead. For your consideration. 



</pre>
</div><h2>Patches</h2>
<p><a href='patch-add.php?bug_id=71270'>Add a Patch</a></p><h2>Pull Requests</h2>
<p><a href='gh-pull-add.php?bug_id=71270'>Add a Pull Request</a></p><h2 style="border-bottom:2px solid #666;margin-bottom:0;padding:5px 0;">History</h2><div id='comment_filter' class='controls comments'><span id='type_all' class='control active' onclick='do_comment(this);'>All</span><span id='type_comment' class='control ' onclick='do_comment(this);'>Comments</span><span id='type_log' class='control ' onclick='do_comment(this);'>Changes</span><span id='type_svn' class='control ' onclick='do_comment(this);'>Git/SVN commits</span><span id='type_related' class='control ' onclick='do_comment(this);'>Related reports</span>            </div>
            <div id='comments_view' style='clear:both;'>
<div class='comment type_comment' ><a name="1451863790">&nbsp;</a><strong>[2016-01-03 23:29 UTC] emmanuel &#x64;&#111;&#x74; law &#x61;&#116; gmail &#x64;&#111;&#x74; com</strong>
<pre class='note'>Patch has been submitted as a pull request:
<a href="https://github.com/php/php-src/pull/1713" rel="nofollow">https://github.com/php/php-src/pull/1713</a>
</pre>
</div><div class='comment type_comment' ><a name="1451930558">&nbsp;</a><strong>[2016-01-04 18:02 UTC] <a href="//people.php.net/ab">ab@php.net</a></strong>
<pre class='note'>Thanks for the report, the issue and the fix confirmed. Please next time don't push a public PR but use a secret gist.

At this point, my question were yet - were it feasible to limit the length of the actual command line and/or argument to something appropriate. Fe using xargs --show-limits on Linux will give back a way smaller number than 1024M. On Windows it is indeed something measured in kilobytes.

Thanks.
</pre>
</div><div class='comment type_comment' ><a name="1451977433">&nbsp;</a><strong>[2016-01-05 07:03 UTC] emmanuel &#x64;&#111;&#x74; law &#x61;&#116; gmail &#x64;&#111;&#x74; com</strong>
<pre class='note'>My bad.


Yeah I dont see why we cant harden it further by limiting the length of the command line and argument. It should however fail safe. EG if the length of string is beyond a certain limit, it should throw a fatal error rather than return a warning or an empty string.


For example, if it doesn't fail safe, the toy code below has the potential to delete all files on the webroot rather than only a user directory:

if(!ctype_alnum($_REQUEST[UID]))exit(); 
$path=escapeshellarg(&quot;/web/root/users/$_REQUEST[UID])/&quot;);
exec(&quot;cd $path ; rm *.*&quot;);
</pre>
</div><div class='comment type_comment' ><a name="1451993406">&nbsp;</a><strong>[2016-01-05 11:30 UTC] <a href="//people.php.net/ab">ab@php.net</a></strong>
<pre class='note'>Yeah, that's a good example. It definitely should fail hard. In another <a href='bug.php?id=71039'>bug #71039</a>, I was poking about returning false for another case but it definitely seems a wrong way now.

However why the question about limiting length came into my mind is because now with your patch it will go through, but with a big string it will still be going too slow. Thus it still might be a matter of causing DOS. Fe on my relatively modern laptop it runs a couple of minutes to process the escapeshellarg() call.

Thanks.
</pre>
</div><div class='comment type_comment' ><a name="1451995618">&nbsp;</a><strong>[2016-01-05 12:06 UTC] emmanuel &#x64;&#111;&#x74; law &#x61;&#116; gmail &#x64;&#111;&#x74; com</strong>
<pre class='note'>Checking the string length is a good additional control. However even if we don't, IMO I don't think that DOS is a big concern because of the default max_execution time (default 30 seconds)

EG the command below shows max_execution_time kicking in:

&gt; time USE_ZEND_ALLOC=0 sapi/cli/php_patched_escapecmd_escapecmdarg -r 'set_time_limit(30); ini_set('memory_limit', -1); $A=str_repeat(&quot;A&quot;,1024*1024*1024);$A=escapeshellarg($A);'

Fatal error: Maximum execution time of 30 seconds exceeded in Command line code on line 1

real    0m30.940s
user    0m29.344s
sys     0m0.672s


It'll be hard to DOS the server if you need to post a 1024MB string to consume the PHP process for 30 seconds.
</pre>
</div><div class='comment type_comment' ><a name="1451999893">&nbsp;</a><strong>[2016-01-05 13:18 UTC] <a href="//people.php.net/ab">ab@php.net</a></strong>
<pre class='note'>But that's not the extent. It also depends on the server configuration, of course. But in general, issue enough requests, even with less data that will keep the server busy, and here it is. At least that's what i had in mind.

Thanks.
</pre>
</div><div class='comment type_log' ><a name="1452063695">&nbsp;</a><strong>[2016-01-06 07:01 UTC] <a href="//people.php.net/ab">ab@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-Status:      Open</span>
<span class="added">+Status:      Closed</span>
<span class="removed">-Assigned To:</span>
<span class="added">+Assigned To: ab</span>
</div></div></div><div class='comment type_comment' ><a name="1452063695">&nbsp;</a><strong>[2016-01-06 07:01 UTC] <a href="//people.php.net/ab">ab@php.net</a></strong>
<pre class='note'>As the patch is already public, a decision was made to include it into 7.0.2 and do the other necessary follow-up work afterwards. The main issue is fixed, thanks for your work!
</pre>
</div><div class='comment type_log' ><a name="1453376760">&nbsp;</a><strong>[2016-01-21 11:46 UTC] <a href="//people.php.net/kaplan">kaplan@php.net</a></strong>
<div class='log_note'><div class="changeset">
<span class="removed">-CVE-ID:</span>
<span class="added">+CVE-ID: 2016-1904</span>
</div></div></div></div>
        </td>
    </tr>
</table>

<script src='js/util.js'></script>
<script src='https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js'></script>
<script src="js/jquery.cookie.js"></script>
<script>
function do_comment(nd)
{
    $('#comment_filter > .control.active').removeClass("active");
    $(nd).addClass("active");

    $.cookie('history_tab', nd.id, { expires: 365 });

    if (nd.id == 'type_all') {
        $('#comments_view > .comment:hidden').show('slow');
    } else {
        $('#comments_view > .comment').each(function(i) {
            if ($(this).hasClass(nd.id)) {
                $(this).show('slow');
            } else {
                $(this).hide('slow');
            }
        });
    }
    return false;
}
</script>
<table class="foot" cellspacing="0" cellpadding="0">
    <tr>
        <td class="foot-bar" colspan="2">&nbsp;</td>
    </tr>

    <tr>
        <td class="foot-copy">
            <small>
                <a href="https://php.net/"><img src="images/logo-small.gif" align="left" valign="middle" hspace="3" alt="PHP"></a>
                <a href="https://php.net/copyright.php">Copyright &copy; 2001-2021 The PHP Group</a><br>
                All rights reserved.
            </small>
        </td>
        <td class="foot-source">
            <small>Last updated: Sat Oct 30 19:03:34 2021 UTC</small>
        </td>
    </tr>
</table>
</body>
</html>
