<!doctype html><html lang=en-us><head><title>NeoInvoice Blind SQL Injection (CVE-2012-3477) - Adam Caudill</title><meta charset=utf-8><meta name=viewport content="width=device-width,initial-scale=1"><meta name=description content="Adam Caudill: Security Engineer, Researcher, & Developer"><meta name=author content="Adam Caudill"><meta property="og:title" content="NeoInvoice Blind SQL Injection (CVE-2012-3477)"><meta property="og:description" content="NeoInvoice is a multi-tenant open source invoicing system, that currently contains an unauthenticated blind SQL injection condition in signup_check.php. The input for the value field isn&rsquo;t being properly sanitized, and is used in string concatenation to create the SQL query:
require_once(&#34;config.php&#34;); if (isset($_GET['field']) && ($_GET['field'] == 'username' || $_GET['field'] == 'email')) { $field = $_GET['field']; $table = 'user'; $taken = '0'; $not_taken = '1'; } else if (isset($_GET['field']) && $_GET['field'] == 'coupon') { $field = 'name'; $table = 'coupon'; $taken = '1'; $not_taken = '0'; } else { die(&#34;&amp;lt;div class=\&#34;error\&#34;&amp;gt;Invalid Field&amp;lt;/div&amp;gt;&#34;); } if (!"><meta property="og:type" content="article"><meta property="og:url" content="https://adamcaudill.com/2012/08/12/neoinvoice-blind-sql-injection-cve-2012-3477/"><meta property="og:image" content="https://adamcaudill.com/files/site_photo.jpg"><meta property="article:section" content="posts"><meta property="article:published_time" content="2012-08-12T20:15:00+00:00"><meta property="article:modified_time" content="2021-10-22T23:31:04-04:00"><meta name=twitter:card content="summary"><meta name=twitter:image content="https://adamcaudill.com/files/site_photo.jpg"><meta name=twitter:title content="NeoInvoice Blind SQL Injection (CVE-2012-3477)"><meta name=twitter:description content="NeoInvoice is a multi-tenant open source invoicing system, that currently contains an unauthenticated blind SQL injection condition in signup_check.php. The input for the value field isn&rsquo;t being properly sanitized, and is used in string concatenation to create the SQL query:
require_once(&#34;config.php&#34;); if (isset($_GET['field']) && ($_GET['field'] == 'username' || $_GET['field'] == 'email')) { $field = $_GET['field']; $table = 'user'; $taken = '0'; $not_taken = '1'; } else if (isset($_GET['field']) && $_GET['field'] == 'coupon') { $field = 'name'; $table = 'coupon'; $taken = '1'; $not_taken = '0'; } else { die(&#34;&amp;lt;div class=\&#34;error\&#34;&amp;gt;Invalid Field&amp;lt;/div&amp;gt;&#34;); } if (!"><meta name=twitter:site content="@adamcaudill"><meta name=twitter:creator content="@adamcaudill"><meta name=gitLastUpdated content="2021-10-22 23:31:04 -0400 -0400"><meta name=gitRevision content="5af35878cf0769a3377e309d3bcda097720af7eb"><link rel=preconnect href=https://fonts.gstatic.com/><link rel=stylesheet type=text/css href=https://adamcaudill.com/css/bundle.min.fe6d11c0d67a12f344f8e52d0f810cfcd29d51f5f0ce78618772e5c5238f1540.css><link rel=apple-touch-icon sizes=180x180 href=https://adamcaudill.com/apple-touch-icon.png><link rel=icon type=image/png sizes=32x32 href=https://adamcaudill.com/favicon-32x32.png><link rel=icon type=image/png sizes=16x16 href=https://adamcaudill.com/favicon-16x16.png></head><body><div id=container><header><h1><a href=https://adamcaudill.com/>Adam Caudill</a></h1><ul id=social-media><li><a href=https://adamcaudill.com/rss/ title="RSS Feed"><i class="fas fa-rss-square fa-lg"></i></a></li><li><a href=https://github.com/adamcaudill title=GitHub><i class="fab fa-github fa-lg"></i></a></li><li><a href=https://twitter.com/adamcaudill title=Twitter><i class="fab fa-twitter fa-lg"></i></a></li><li><a href=https://linkedin.com/in/adamcaudill title=LinkedIn><i class="fab fa-linkedin fa-lg"></i></a></li><li><a href=https://500px.com/adamcaudill title=500px><i class="fab fa-500px fa-lg"></i></a></li></ul><p><em>Security Engineer, Researcher, & Developer</em></p></header><nav><ul><li><a href=https://adamcaudill.com/><i class="fa-li fa fa-lg"></i><span>Home</span></a></li><li><a href=https://adamcaudill.com/blog/><i class="fa-li fa fa-lg"></i><span>Blog</span></a></li><li><a href=https://adamcaudill.com/research/><i class="fa-li fa fa-lg"></i><span>Research</span></a></li><li><a href=https://adamcaudill.com/speaking/><i class="fa-li fa fa-lg"></i><span>Speaking</span></a></li><li><a href=https://adamcaudill.com/photo/><i class="fa-li fa fa-lg"></i><span>Photography</span></a></li><li><a href=https://adamcaudill.com/writing/><i class="fa-li fa fa-lg"></i><span>Writing</span></a></li><li><a href=https://adamcaudill.com/about/><i class="fa-li fa fa-lg"></i><span>About</span></a></li></ul></nav><div class=main-row><div id=main class=main-column><main><article><h1>NeoInvoice Blind SQL Injection (CVE-2012-3477)</h1><aside><ul><p><time class=post-date datetime=2012-08-12T20:15:00Z>August 12, 2012</time>
|
2 minute read
|
<a href=https://adamcaudill.com/categories/security-research>Security Research</a></p></ul></aside><div class=article-content><p><a href=https://github.com/tlhunter/neoinvoice>NeoInvoice</a> is a multi-tenant open source invoicing system, that currently contains an unauthenticated blind SQL injection condition in <code>signup_check.php</code>. The input for the <code>value</code> field isn&rsquo;t being properly sanitized, and is used in string concatenation to create the SQL query:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-php data-lang=php><span style=color:#66d9ef>require_once</span>(<span style=color:#e6db74>&#34;config.php&#34;</span>);

<span style=color:#66d9ef>if</span> (<span style=color:#a6e22e>isset</span>($_GET[<span style=color:#e6db74>&#39;field&#39;</span>]) <span style=color:#f92672>&amp;&amp;</span> ($_GET[<span style=color:#e6db74>&#39;field&#39;</span>] <span style=color:#f92672>==</span> <span style=color:#e6db74>&#39;username&#39;</span> <span style=color:#f92672>||</span> $_GET[<span style=color:#e6db74>&#39;field&#39;</span>] <span style=color:#f92672>==</span> <span style=color:#e6db74>&#39;email&#39;</span>)) {
    $field <span style=color:#f92672>=</span> $_GET[<span style=color:#e6db74>&#39;field&#39;</span>];
    $table <span style=color:#f92672>=</span> <span style=color:#e6db74>&#39;user&#39;</span>;
    $taken <span style=color:#f92672>=</span> <span style=color:#e6db74>&#39;0&#39;</span>;
    $not_taken <span style=color:#f92672>=</span> <span style=color:#e6db74>&#39;1&#39;</span>;
} <span style=color:#66d9ef>else</span> <span style=color:#66d9ef>if</span> (<span style=color:#a6e22e>isset</span>($_GET[<span style=color:#e6db74>&#39;field&#39;</span>]) <span style=color:#f92672>&amp;&amp;</span> $_GET[<span style=color:#e6db74>&#39;field&#39;</span>] <span style=color:#f92672>==</span> <span style=color:#e6db74>&#39;coupon&#39;</span>) {
    $field <span style=color:#f92672>=</span> <span style=color:#e6db74>&#39;name&#39;</span>;
    $table <span style=color:#f92672>=</span> <span style=color:#e6db74>&#39;coupon&#39;</span>;
    $taken <span style=color:#f92672>=</span> <span style=color:#e6db74>&#39;1&#39;</span>;
    $not_taken <span style=color:#f92672>=</span> <span style=color:#e6db74>&#39;0&#39;</span>;
} <span style=color:#66d9ef>else</span> {
    <span style=color:#66d9ef>die</span>(<span style=color:#e6db74>&#34;&amp;lt;div class=</span><span style=color:#ae81ff>\&#34;</span><span style=color:#e6db74>error</span><span style=color:#ae81ff>\&#34;</span><span style=color:#e6db74>&amp;gt;Invalid Field&amp;lt;/div&amp;gt;&#34;</span>);
}
<span style=color:#66d9ef>if</span> (<span style=color:#f92672>!</span><span style=color:#a6e22e>isset</span>($_GET[<span style=color:#e6db74>&#39;value&#39;</span>])) {
    <span style=color:#66d9ef>die</span>(<span style=color:#e6db74>&#34;&amp;lt;div class=</span><span style=color:#ae81ff>\&#34;</span><span style=color:#e6db74>error</span><span style=color:#ae81ff>\&#34;</span><span style=color:#e6db74>&amp;gt;Invalid Value&amp;lt;/div&amp;gt;&#34;</span>);
}
$value <span style=color:#f92672>=</span> <span style=color:#a6e22e>preg_replace</span>(<span style=color:#e6db74>&#34;[^a-zA-Z0-9_.\-\*\/\+\, @]&#34;</span>, <span style=color:#e6db74>&#34;&#34;</span>, $_GET[<span style=color:#e6db74>&#39;value&#39;</span>]);
<span style=color:#66d9ef>if</span> ($value <span style=color:#f92672>!=</span> $_GET[<span style=color:#e6db74>&#39;value&#39;</span>]) {
    <span style=color:#66d9ef>die</span>(<span style=color:#e6db74>&#34;&amp;lt;div class=</span><span style=color:#ae81ff>\&#34;</span><span style=color:#e6db74>error</span><span style=color:#ae81ff>\&#34;</span><span style=color:#e6db74>&amp;gt;Invalid Value&amp;lt;/div&amp;gt;&#34;</span>);
}

$connect <span style=color:#f92672>=</span> <span style=color:#a6e22e>mysql_connect</span>(<span style=color:#a6e22e>MYSQL_HOSTNAME</span>, <span style=color:#a6e22e>MYSQL_USERNAME</span>, <span style=color:#a6e22e>MYSQL_PASSWORD</span>);
<span style=color:#66d9ef>if</span> (<span style=color:#f92672>!</span>$connect) {
    <span style=color:#66d9ef>die</span>(<span style=color:#e6db74>&#34;&amp;lt;div class=</span><span style=color:#ae81ff>\&#34;</span><span style=color:#e6db74>error</span><span style=color:#ae81ff>\&#34;</span><span style=color:#e6db74>&amp;gt;&#34;</span> <span style=color:#f92672>.</span> <span style=color:#a6e22e>mysql_error</span>() <span style=color:#f92672>.</span> <span style=color:#e6db74>&#34;&amp;lt;/div&amp;gt;&#34;</span>);
}
$query <span style=color:#f92672>=</span> <span style=color:#e6db74>&#34;SELECT </span><span style=color:#e6db74>$field</span><span style=color:#e6db74> FROM </span><span style=color:#e6db74>$table</span><span style=color:#e6db74> WHERE </span><span style=color:#e6db74>$field</span><span style=color:#e6db74> = &#39;</span><span style=color:#e6db74>$value</span><span style=color:#e6db74>&#39; LIMIT 1&#34;</span>;

<span style=color:#a6e22e>mysql_select_db</span>(<span style=color:#a6e22e>MYSQL_DATABASE</span>, $connect);
$result <span style=color:#f92672>=</span> <span style=color:#a6e22e>mysql_query</span>($query, $connect);
<span style=color:#66d9ef>if</span> (<span style=color:#a6e22e>mysql_num_rows</span>($result)) {
    <span style=color:#66d9ef>echo</span> $taken;
} <span style=color:#66d9ef>else</span> {
    <span style=color:#66d9ef>echo</span> $not_taken;
}
</code></pre></div><p>Line #29 there is the key, by concatenating untrusted data into the SQL query, it has made SQL injection trivial. This vulnerability can be demonstrated with the following request:</p><p><code>signup_check.php?field=username&value='+OR+SLEEP(5)+OR+'</code></p><p>This results in the following query being executed:</p><p><code>SELECT username FROM user WHERE username = '' OR SLEEP(5) OR '' LIMIT 1</code></p><p>The author has been notified, but has yet to respond. Based on the one open <a href=https://github.com/tlhunter/neoinvoice/issues/2>ticket</a> for the project, there&rsquo;s likely other possible attack vectors.</p></div><div class=signature><p>Adam Caudill</p></div></article><section class=post-nav><ul><li><a href=https://adamcaudill.com/2012/07/27/decrypting-spark-saved-passwords/><i class="fa fa-chevron-circle-left"></i> Decrypting Spark Saved Passwords</a></li><li><a href=https://adamcaudill.com/2012/09/06/wordpress-dont-trust-that-update/>WordPress: Don’t trust that update <i class="fa fa-chevron-circle-right"></i></a></li></ul></section></main></div><div id=sidebar class=main-column><h4>About Me</h4><p><img id=portrait src="https://1.gravatar.com/avatar/49e14cf9f67c48aad082dec4f106f19a?size=500" loading=lazy></p><p>Director of Security at <a href=https://1password.com/>1Password</a>, researcher and software developer with more than 20 years of experience.</p><p>I primarily focus on application security, secure communications, and cryptography, though often research new areas if I get too bored. I write about my research and security in general, development and software design, and whatever hobby has my attention at the moment.</p><p><a href=https://adamcaudill.com/pgp/>Contact</a></p></div></div><footer><div class=footer-row><div class=footer-column><h5>Disclaimer</h5><p>Opinions expressed here are solely those of Adam Caudill, and do not represent the views of his employer, or any other person or entity.</p></div><div class=footer-column><h5>Contact & Media</h5><p>If you have any questions, please feel free to <a href=https://adamcaudill.com/pgp/>contact me</a>, I will try to respond as quickly as possible.</p></div><div class=footer-column><h5>Copyright</h5><p>Copyright &copy; 2003 – 2021 Adam Caudill. Fair use is respected; though please provide proper attribution.</p></div></div></footer></div><script src=https://adamcaudill.com/js/scripts.js></script><script type=application/javascript>var doNotTrack=!1;doNotTrack||(window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)},ga.l=+new Date,ga('create','UA-106942-2','auto'),ga('send','pageview'))</script><script async src=https://www.google-analytics.com/analytics.js></script><script defer src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon='{"token": "b7c021ad68ff4c9bba9e8508a4c6017b"}'></script><script defer src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon='{"rayId":"6a6881ff1c8661dd","version":"2021.10.0","r":1,"token":"8567dd3b3f684008b874879a0b6aa1c6","si":100}'></script>
</body></html>