<!DOCTYPE html>
<html lang="en">
  <head>
    <title>52202 &ndash; document that setuid executables must clear their environment before using libdbus</title>

      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<link href="data/assets/c60deb3d48830179eae269c9e65a7506.css?1462892334" rel="stylesheet" type="text/css">



    
<script type="text/javascript" src="data/assets/a7c2f3a028f17a9aa60f56dc9d6e732d.js?1462892331"></script>

    <script type="text/javascript">
    <!--
        YAHOO.namespace('bugzilla');
        YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
               if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
               var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
               return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
         };
        if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
            YAHOO.util.Event._simpleRemove(window, "unload", 
                                           YAHOO.util.Event._unload);
        }
        
        function unhide_language_selector() { 
            YAHOO.util.Dom.removeClass(
                'lang_links_container', 'bz_default_hidden'
            ); 
        } 
        YAHOO.util.Event.onDOMReady(unhide_language_selector);

        
        var BUGZILLA = {
            param: {
                cookiepath: '\/',
                maxusermatches: 1000
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    "You must enter a Description for this attachment.",
                component_required:
                    "You must select a Component for this bug.",
                description_required:
                    "You must enter a Description for this bug.",
                short_desc_required:
                    "You must enter a Summary for this bug.",
                version_required:
                    "You must select a Version for this bug."
            }
              , api_token: ''
        };

    if (history && history.replaceState) {
      if(!document.location.href.match(/show_bug\.cgi/)) {
        history.replaceState( null,
                             "52202 – document that setuid executables must clear their environment before using libdbus",
                             "show_bug.cgi?id=52202" );
        document.title = "52202 – document that setuid executables must clear their environment before using libdbus";
      }
      if (document.location.href.match(/show_bug\.cgi\?.*list_id=/)) {
        var href = document.location.href;
        href = href.replace(/[\?&]+list_id=(\d+|cookie)/, '');
        history.replaceState(null, "52202 – document that setuid executables must clear their environment before using libdbus", href);
      }
    }
    YAHOO.util.Event.onDOMReady(function() {
      initDirtyFieldTracking();

    });
    // -->
    </script>
<script type="text/javascript" src="data/assets/daf5e0fb6826e6a35280e622913f0c4a.js?1462892334"></script>

    

    
    <link rel="search" type="application/opensearchdescription+xml"
                       title="Bugzilla" href="./search_plugin.cgi">
    <link rel="shortcut icon" href="images/favicon.ico">
  </head>

  <body 
        class="bugs-freedesktop-org
                 bz_bug
                 bz_status_RESOLVED
                 bz_product_dbus
                 bz_component_core
                 bz_bug_52202 yui-skin-sam">

  <div id="header"><div id="banner">
  </div>

    <div id="titles">
      <span id="title">Bugzilla &ndash; Bug&nbsp;52202</span>

        <span id="subtitle" class="subheader">document that setuid executables must clear their environment before using libdbus</span>

        <span id="information" class="header_addl_info">Last modified: 2018-10-12 21:14:17 UTC</span>
    </div>


    <div id="common_links"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_top" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_top");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_top" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_top"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>


</ul>
    </div>
  </div>

  <div id="bugzilla-body">


<script type="text/javascript">
<!--

//-->
</script>

<form name="changeform" id="changeform" method="post" action="process_bug.cgi">

  <input type="hidden" name="delta_ts" value="2018-10-12 21:14:17">
  <input type="hidden" name="id" value="52202">
  <input type="hidden" name="token" value="1635619151-KnoB5UJwQVyLsrAoi78YAoyUTg2Hun7ZeSQSYKbDBe0">
<div class="bz_short_desc_container edit_form">
     <a href="show_bug.cgi?id=52202"><b>Bug&nbsp;52202</b></a> <span id="summary_container" class="bz_default_hidden">
      - <span id="short_desc_nonedit_display">document that setuid executables must clear their environment before using libdbus</span>
     </span>

    <div id="summary_input"><span class="field_label "
    id="field_label_short_desc">


  <a 
      title="The bug summary is a short sentence which succinctly describes what the bug is about."
      class="field_help_link"
      href="page.cgi?id=fields.html#short_desc"
  >Summary:</a>

</span><span title="document that setuid executables must clear their environment before using libdbus">document that setuid executables must clear their environment before using li...
        </span>
    </div>
  </div>
  <script type="text/javascript">
    hideEditableField('summary_container',
                      'summary_input',
                      'summary_edit_action',
                      'short_desc',
                      'document that setuid executables must clear their environment before using libdbus' );
  </script>
  <table class="edit_form">
    <tr>
      
      <td id="bz_show_bug_column_1" class="bz_show_bug_column">     
        <table>
          <tr>
    <th class="field_label">
      <a href="page.cgi?id=fields.html#bug_status">Status</a>:
    </th>
    <td id="bz_field_status">
      <span id="static_bug_status">RESOLVED
          MOVED
      </span>
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_alias">


  <a 
      title="A short, unique name assigned to a bug in order to assist with looking it up and referring to it in other places in Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#alias"
  >Alias:</a>

</th>
    <td>
        None
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_product">


  <a 
      title="Bugs are categorised into Products and Components."
      class="field_help_link"
      href="describecomponents.cgi"
  >Product:</a>

</th>
  <td class="field_value "
      id="field_container_product" >dbus

</td>
    </tr>

    
    <tr class="bz_default_hidden"><th class="field_label "
    id="field_label_classification">


  <a 
      title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation."
      class="field_help_link"
      href="page.cgi?id=fields.html#classification"
  >Classification:</a>

</th>
  <td class="field_value "
      id="field_container_classification" >Unclassified

</td>
    </tr>
        
    
    
    <tr><th class="field_label "
    id="field_label_component">


  <a 
      title="Components are second-level categories; each belongs to a particular Product. Select a Product to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi?product=dbus"
  >Component:</a>

</th>
  <td class="field_value "
      id="field_container_component" >core

  (<a href="buglist.cgi?component=core&amp;product=dbus&amp;bug_status=__open__"
      target="_blank">show other bugs</a>)
</td>
    </tr>
    <tr><th class="field_label "
    id="field_label_version">


  <a 
      title="The version field defines the version of the software the bug was found in."
      class="field_help_link"
      href="page.cgi?id=fields.html#version"
  >Version:</a>

</th>
<td>1.5
  </td>
    </tr>
        
    
        
    <tr><th class="field_label "
    id="field_label_rep_platform">


  <a 
      title="The hardware platform the bug was observed on. Note: When searching, selecting the option &quot;All&quot; only finds bugs whose value for this field is literally the word &quot;All&quot;."
      class="field_help_link"
      href="page.cgi?id=fields.html#rep_platform"
  >Hardware:</a>

</th>
      <td class="field_value">All
        Linux (All)
      </td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          
          <tr>
      <th class="field_label">
        <label  accesskey="i">
          <a href="page.cgi?id=fields.html#importance"><u>I</u>mportance</a></label>:
      </th>
      <td>medium
       normal
      </td>
    </tr>
          
          <tr><th class="field_label "
    id="field_label_assigned_to">


  <a 
      title="The person in charge of resolving the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#assigned_to"
  >Assignee:</a>

</th>
      <td><span class="vcard"><span class="fn">D-Bus Maintainers</span>
</span>
      </td>
    </tr>

    <tr><th class="field_label "
    id="field_label_qa_contact">


  <a 
      title="The person responsible for confirming this bug if it is unconfirmed, and for verifying the fix once the bug has been resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#qa_contact"
  >QA Contact:</a>

</th>
      <td><span class="vcard"><span class="fn">D-Bus Maintainers</span>
</span>
      </td>
    </tr>
    <script type="text/javascript">
      assignToDefaultOnChange(['product', 'component'],
        'dbus\x40maint.invalid',
        'dbus\x40maint.invalid');
    </script>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          <tr><th class="field_label "
    id="field_label_bug_file_loc">


  <a 
      title="Bugs can have a URL associated with them - for example, a pointer to a web site where the problem is seen."
      class="field_help_link"
      href="page.cgi?id=fields.html#bug_file_loc"
  >URL:</a>

</th>
    <td>
      <span id="bz_url_input_area">
      </span>
    </td>
  </tr>

    <tr><th class="field_label "
    id="field_label_status_whiteboard">


  <a 
      title="Each bug has a free-form single line text entry box for adding tags and status information."
      class="field_help_link"
      href="page.cgi?id=fields.html#status_whiteboard"
  >Whiteboard:</a>

</th><td>  
  </td>
    </tr>

    <tr><th class="field_label "
    id="field_label_keywords">


  <a 
      title="You can add keywords from a defined list to bugs, in order to easily identify and group them."
      class="field_help_link"
      href="describekeywords.cgi"
  >Keywords:</a>

</th>
  <td class="field_value "
      id="field_container_keywords" >

</td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>

          
<tr><th class="field_label "
    id="field_label_dependson">


  <a 
      title="The bugs listed here must be resolved before this bug can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#dependson"
  >Depends on:</a>

</th>

  <td>
    <span id="dependson_input_area">
    </span>

  </td>
  </tr>
  
  <tr><th class="field_label "
    id="field_label_blocked">


  <a 
      title="This bug must be resolved before the bugs listed in this field can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#blocked"
  >Blocks:</a>

</th>

  <td>
    <span id="blocked_input_area">
    </span>

  </td>
  </tr>
          
        </table>
      </td>
      <td>
        <div class="bz_column_spacer">&nbsp;</div>
      </td>
      
      <td id="bz_show_bug_column_2" class="bz_show_bug_column">
        <table>
        <tr>
    <th class="field_label">
      Reported:
    </th>
    <td>2012-07-17 14:54 UTC by <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
    </td>
  </tr>
  
  <tr>
    <th class="field_label">
      Modified:
    </th>
    <td>2018-10-12 21:14 UTC
      (<a href="show_activity.cgi?id=52202">History</a>)
    </td>
  
  </tr>
<tr>
      <th class="field_label">
        <label  accesskey="a">
          CC List:
        </label>
      </th>
      <td>4 
          users
          <span id="cc_edit_area_showhide_container" class="bz_default_hidden">
            (<a href="#" id="cc_edit_area_showhide">show</a>)
          </span>
        <div id="cc_edit_area">
          <br>
            <select id="cc" multiple="multiple" size="5" >
                <option value="alban.crequy">alban.crequy</option>
                <option value="msniko14">msniko14</option>
                <option value="walters">walters</option>
                <option value="xorg_security">xorg_security</option>
            </select>
        </div>
          <script type="text/javascript">
            hideEditableField( 'cc_edit_area_showhide_container', 
                               'cc_edit_area', 
                               'cc_edit_area_showhide', 
                               '', 
                               '');  
          </script>
      </td>
    </tr>

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_see_also">


  <a 
      title="This allows you to refer to bugs in other installations. You can enter a URL to a bug in the 'Add Bug URLs' field to note that that bug is related to this one. You can enter multiple URLs at once by separating them with whitespace. You should normally use this field to refer to bugs in other installations. For bugs in this installation, it is better to use the Depends on and Blocks fields."
      class="field_help_link"
      href="page.cgi?id=fields.html#see_also"
  >See Also:</a>

</th>
  <td class="field_value "
      id="field_container_see_also" >

</td>
    </tr> 
<tr>
      <th class="field_label  bz_hidden_field"
    id="field_label_cf_i915_platform">


  <a 
      title="Intel platforms affected by the bug"
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_i915_platform"
  >i915 platform:</a>

</th>
  <td class="field_value  bz_hidden_field"
      id="field_container_cf_i915_platform" >

</td>
    </tr>
    <tr>
      <th class="field_label  bz_hidden_field"
    id="field_label_cf_i915_features">


  <a 
      title="Features of the i915 driver affected by the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#cf_i915_features"
  >i915 features:</a>

</th>
  <td class="field_value  bz_hidden_field"
      id="field_container_cf_i915_features" >

</td>
    </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>



        </table>
      </td>
    </tr>
    <tr>
      <td colspan="3">
          <hr id="bz_top_half_spacer">
      </td>
    </tr>
  </table>

  <table id="bz_big_form_parts">
  <tr>
  <td>

    
<script type="text/javascript">
<!--
function toggle_display(link) {
    var table = document.getElementById("attachment_table");
    var view_all = document.getElementById("view_all");
    var hide_obsolete_url_parameter = "&hide_obsolete=1";
    // Store current height for scrolling later
    var originalHeight = table.offsetHeight;
    var rows = YAHOO.util.Dom.getElementsByClassName(
        'bz_tr_obsolete', 'tr', table);

    for (var i = 0; i < rows.length; i++) {
        bz_toggleClass(rows[i], 'bz_default_hidden');
    }

    if (YAHOO.util.Dom.hasClass(rows[0], 'bz_default_hidden')) {
        link.innerHTML = "Show Obsolete";
        view_all.href = view_all.href + hide_obsolete_url_parameter 
    }
    else {
        link.innerHTML = "Hide Obsolete";
        view_all.href = view_all.href.replace(hide_obsolete_url_parameter,"");
    }

    var newHeight = table.offsetHeight;
    // This scrolling makes the window appear to not move at all.
    window.scrollBy(0, newHeight - originalHeight);

    return false;
}
//-->
</script>

<br>
<table id="attachment_table">
  <tr id="a0">
    <th colspan="2" class="left">
      Attachments
    </th>
  </tr>


      <tr id="a1" class="bz_contenttype_text_plain bz_patch">
        <td>
            <a href="attachment.cgi?id=67345"
               title="View the content of the attachment">
          <b>Filter environment variables</b></a>

          <span class="bz_attach_extra_info">
              (7.60 KB,
                patch)

            <br>
            <a href="#attach_67345"
               title="Go to the comment associated with the attachment">2012-09-18 17:43 UTC</a>,

            <span class="vcard"><span class="fn">Colin Walters</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=67345&amp;action=edit">Details</a>&#x0020; |
    <a href="https://bugs.freedesktop.org/page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67345">
      Splinter Review</a>
        </td>
      </tr>
      <tr id="a2" class="bz_contenttype_text_plain bz_patch">
        <td>
            <a href="attachment.cgi?id=67803"
               title="View the content of the attachment">
          <b>Use-__secure_getenv-if-available.patch</b></a>

          <span class="bz_attach_extra_info">
              (1.88 KB,
                patch)

            <br>
            <a href="#attach_67803"
               title="Go to the comment associated with the attachment">2012-09-28 01:42 UTC</a>,

            <span class="vcard"><span class="fn">Colin Walters</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=67803&amp;action=edit">Details</a>&#x0020; |
    <a href="https://bugs.freedesktop.org/page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67803">
      Splinter Review</a>
        </td>
      </tr>
      <tr id="a3" class="bz_contenttype_text_plain bz_patch">
        <td>
            <a href="attachment.cgi?id=67804"
               title="View the content of the attachment">
          <b>hardening-Ensure-_dbus_check_setuid-is-initialized-t.patch</b></a>

          <span class="bz_attach_extra_info">
              (741 bytes,
                patch)

            <br>
            <a href="#attach_67804"
               title="Go to the comment associated with the attachment">2012-09-28 01:43 UTC</a>,

            <span class="vcard"><span class="fn">Colin Walters</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=67804&amp;action=edit">Details</a>&#x0020; |
    <a href="https://bugs.freedesktop.org/page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67804">
      Splinter Review</a>
        </td>
      </tr>
      <tr id="a4" class="bz_contenttype_text_plain bz_patch">
        <td>
            <a href="attachment.cgi?id=67810"
               title="View the content of the attachment">
          <b>activation-helper: Bypass _dbus_getenv filtering by using getenv</b></a>

          <span class="bz_attach_extra_info">
              (1.54 KB,
                patch)

            <br>
            <a href="#attach_67810"
               title="Go to the comment associated with the attachment">2012-09-28 05:24 UTC</a>,

            <span class="vcard"><span class="fn">Geoffrey Thomas</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=67810&amp;action=edit">Details</a>&#x0020; |
    <a href="https://bugs.freedesktop.org/page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67810">
      Splinter Review</a>
        </td>
      </tr>
      <tr id="a5" class="bz_contenttype_text_plain bz_patch">
        <td>
            <a href="attachment.cgi?id=67977"
               title="View the content of the attachment">
          <b>activation helper: when compiled for tests, do not reset  system bus address</b></a>

          <span class="bz_attach_extra_info">
              (1.13 KB,
                patch)

            <br>
            <a href="#attach_67977"
               title="Go to the comment associated with the attachment">2012-10-02 08:50 UTC</a>,

            <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
          </span>
        </td>


        <td>
          <a href="attachment.cgi?id=67977&amp;action=edit">Details</a>&#x0020; |
    <a href="https://bugs.freedesktop.org/page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67977">
      Splinter Review</a>
        </td>
      </tr>

  <tr class="bz_attach_footer">
    <td colspan="2">
        <span class="bz_attach_view_hide">
            <a id="view_all" href="attachment.cgi?bugid=52202&amp;action=viewall">View All</a>
        </span>
    </td>
  </tr>
</table>
<br>
  </td>
  <td>
  </td>
  </tr></table>

  
  <div id="comments"><script src="js/comments.js?1462891770" type="text/javascript">
</script>

<script type="text/javascript">
<!--
  /* Adds the reply text to the 'comment' textarea */
  function replyToComment(id, real_id, name) {
      var prefix = "(In reply to " + name + " from comment #" + id + ")\n";
      var replytext = "";
        /* pre id="comment_name_N" */
        var text_elem = document.getElementById('comment_text_'+id);
        var text = getText(text_elem);
        replytext = prefix + wrapReplyText(text);


      /* <textarea id="comment"> */
      var textarea = document.getElementById('comment');
      if (textarea.value != replytext) {
          textarea.value += replytext;
      }

      textarea.focus();
  } 
//-->
</script>


<!-- This auto-sizes the comments and positions the collapse/expand links 
     to the right. -->
<table class="bz_comment_table">
<tr>
<td>
<div id="c0" class="bz_comment bz_first_comment">

      <div class="bz_first_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c0">Description</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-07-17 14:54:06 UTC
        </span>

      </div>




<pre class="bz_comment_text">(This issue was raised and made public on oss-sec, but for some reason not upstream. By coincidence, I was subscribed to oss-sec as a result of helping to deal with ioquake3 security.)

libdbus obeys various environment variables retrieved using getenv(). This is a potential vulnerability if a set*id application links libdbus, uses libdbus in a way that obeys environment variables, and trusts that the values of those environment variables, or the D-Bus addresses to which they point, are trustworthy.

The example cited in the Novell bug is Xorg, which is apparently setuid on SUSE, linking libhal (under at least some configurations), which uses the system bus. If Xorg makes policy decisions using PolicyKit or by calling GetConnectionUnixUser or equivalent on dbus-daemon, then a malicious user could run Xorg with DBUS_SYSTEM_BUS_ADDRESS in its environment, connecting it to a bus that answers GetConnectionUnixUser dishonestly or contains a dishonest PolicyKit implementation, which induces it to make wrong policy decisions.

When I say &quot;set*id&quot; I mean setuid, setgid, or any analogous executable-based privileges that allow a caller to provide the initial environment while escalating privileges (e.g. Linux VFS capabilities).

Mitigations include:

* Most system services don't use the system bus.

* System services started by service activation (like PolicyKit itself)
  never need to be setuid, because dbus-daemon-launch-helper starts them
  with appropriate privileges anyway.

* System services started by init (sysvinit, systemd, Upstart or
  equivalent) never need to be setuid, because their init scripts
  (or equivalent) are fully-privileged anyway.

References:

<a href="https://bugzilla.novell.com/show_bug.cgi?id=697105">https://bugzilla.novell.com/show_bug.cgi?id=697105</a>
<a href="http://seclists.org/oss-sec/2012/q3/29">http://seclists.org/oss-sec/2012/q3/29</a></pre>
    </div>

    <div id="c1" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c1">Comment 1</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-07-17 15:02:28 UTC
        </span>

      </div>




<pre class="bz_comment_text">Possible resolutions include:

* Document that set*id applications must not call dbus_bus_get()
  or other affected functions (either at all, or without first sanitizing
  their environment). Check the set*id binaries in major distributions
  to make sure they don't.

* Add a new dbus_disable_environment() and document that set*id
  applications that link libdbus must call it before first use.
  Check the set*id binaries in major distributions to make sure that
  they either don't link libdbus, or do call dbus_disable_environment().

  (I don't like this option - there shouldn't be API for &quot;make my
  application sane, please&quot; that's off-by-default.)

* Similar to the above: stop obeying the environment in current APIs.
  In cases where obeying the environment is needed, add an &quot;opt-in&quot;
  way to do so.

  (This potentially breaks working, non-setuid applications that
  were relying on environment variables. In particular, many applications
  rely on DBUS_SESSION_BUS_ADDRESS.)

* Obey DBUS_SESSION_BUS_ADDRESS (because if you're set*id, you
  shouldn't be on the session bus anyway) but restrict
  DBUS_SYSTEM_BUS_ADDRESS (more rarely used, I suspect).

* Use glibc's __secure_getenv() or a new, documented equivalent, as
  suggested on the oss-sec thread. This pretends the environment is
  empty if the executable is detected to be privileged.
  (This only protects GNU systems; it may be how glibc avoids
  interpreting LD_LIBRARY_PATH for set*id binaries.)

* Reimplement something like __secure_getenv().
  (In practice, this probably only protects Linux systems
  with /proc mounted.)

* Use or reimplement __secure_getenv(). On non-GNU or non-Linux,
  pessimistically assume we are always privileged. (Probably breaks
  applications on non-GNU or non-Linux.)</pre>
    </div>

    <div id="c2" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c2">Comment 2</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-07-26 12:10:46 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c1">comment #1</a>)
<span class="quote">&gt; * Document that set*id applications must not call dbus_bus_get()
&gt;   or other affected functions (either at all, or without first sanitizing
&gt;   their environment).</span >

Maintainer consensus is that this is the case. We do not support use of libdbus in setuid binaries that do not sanitize their environment before their first call into libdbus.

Quoting from &lt;<a href="http://seclists.org/oss-sec/2012/q3/116">http://seclists.org/oss-sec/2012/q3/116</a>&gt;:

On 10/07/12 14:09, Sebastian Krahmer wrote:
<span class="quote">&gt; We are going to add a libdbus hardening patch:</span >
&gt;
<span class="quote">&gt; <a href="https://bugzilla.novell.com/show_bug.cgi?id=697105">https://bugzilla.novell.com/show_bug.cgi?id=697105</a></span >
&gt;
<span class="quote">&gt; This is because some suid binaries (Xorg and others) are linked
&gt; against libdbus</span >

The tl;dr: version if (e.g.) your Xorg binary still uses HAL and is also
setuid, ensure that it cleans its environment using a whitelist before
its first use of libdbus, libhal, any other non-trivial library, or exec().

In off-list discussion with the other D-Bus upstream maintainers,
consensus was that binaries with greater privileges than their parent
process (setuid or VFS capabilities) must not use non-trivial libraries
(e.g. libdbus, libhal, GIO or any scripting language), or run other
executables, without first sanitizing their environment using a
&quot;whitelist&quot; approach (start from a blank environment, set PATH etc. to
known-safe values, and copy only known-safe variables from the original
environment). Resetting the environment as close as possible to the
beginning of main() is wise.

In particular, we do not support use of libdbus in setuid binaries that
do not sanitize their environment before their first call into libdbus.
See
&lt;<a href="http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/environment-variables.html">http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/environment-variables.html</a>&gt;
for further advice.

Good examples:

* pkexec &lt;<a href="http://cgit.freedesktop.org/polkit/tree/src/programs/pkexec.c">http://cgit.freedesktop.org/polkit/tree/src/programs/pkexec.c</a>&gt;
has a small whitelist of environment variables to pass through
* The setuid wrapper generated by IkiWiki
&lt;<a href="http://source.ikiwiki.branchable.com/?p=source.git;a=blob;f=IkiWiki/Wrapper.pm">http://source.ikiwiki.branchable.com/?p=source.git;a=blob;f=IkiWiki/Wrapper.pm</a>&gt;
clears the environment and restores a small whitelist of CGI variables
before executing user code
* sudo appears to operate on a secondary environment internally, avoids
non-trivial libraries, and defaults to resetting the environment from a
whitelist

One maintainer specifically expressed opposition to &quot;hardening&quot; libdbus
if it will impede running non-setuid binaries unprivileged, under a fake
system bus, for regression testing. This rules out, for instance, using
secure_getenv() on systems with glibc &gt;= 2.17 and always returning NULL
(i.e. assuming privilege) on other systems.

Using secure_getenv() on GNU systems and assuming *un*privileged
behaviour on non-GNU is not ruled out by that consideration, but leaves
non-GNU systems vulnerable. It also does not appear to address
executables with escalated privileges other than set*id (e.g. Linux VFS
capabilities). We believe that this makes it a poor substitute for
ensuring that setuid executables clear the environment properly, which
(in general) needs to be done anyway.</pre>
    </div>

    <div id="c3" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c3">Comment 3</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Colin Walters</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-07-26 23:20:17 UTC
        </span>

      </div>




<pre class="bz_comment_text">One very minor comment: for glibc, filesystem capabilities are treated in exactly the same way as setuid.  This is because the AT_SECURE ELF aux flag is set by the kernel, and the presence of that sets __libc_enable_secure to 1.

So using __secure_getenv() should be fine for projects that want to depend on it (but libdbus is not one of those).</pre>
    </div>

    <div id="c4" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c4">Comment 4</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Colin Walters</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-07-28 22:27:22 UTC
        </span>

      </div>




<pre class="bz_comment_text">So this bug says that we should document that setuid executables should &quot;clear their environment&quot;, but the question arose - would we be willing to guarantee that libdbus only looked at environment variables starting with DBUS_ ?

I'm not sure...my worry is that we might say respect TMPDIR, and that could be used as an exploit vector.  Actually looking at the code, we do inspect TMPDIR, but only for nonce files...currently.</pre>
    </div>

    <div id="c5" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c5">Comment 5</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-08-21 07:49:32 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c4">comment #4</a>)
<span class="quote">&gt; So this bug says that we should document that setuid executables should &quot;clear
&gt; their environment&quot;, but the question arose - would we be willing to guarantee
&gt; that libdbus only looked at environment variables starting with DBUS_ ?</span >

I would not be willing to make this guarantee, even if it was true. A whitelist is the only secure thing you can do in a set*id application, so we should not encourage people to use blacklists.

It isn't true anyway, because we (potentially) respect &quot;standard&quot; variables like $XDG_*, $HOME, $TMPDIR etc., because we link libraries we don't control which could respect arbitrary variables (libc), and because under some circumstances libdbus invokes dbus-launch which links more libraries we don't control (most prominently libx11).</pre>
    </div>

    <div id="c6" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c6">Comment 6</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Colin Walters</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-18 17:43:09 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=67345" name="attach_67345" title="Filter environment variables">attachment 67345</a> <a href="attachment.cgi?id=67345&amp;action=edit" title="Filter environment variables">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67345'>[review]</a>
Filter environment variables

After further investigation, it turns out there are multiple escalation vectors on different systems (via su/sudo + pam_systemd for example).  So I think it makes sense to harden libdbus here, even though these programs are still buggy.

su/sudo + pam_systemd is a kind of special case though...</pre>
    </div>

    <div id="c7" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c7">Comment 7</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-27 09:06:46 UTC
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class=""><a href="attachment.cgi?id=67345" name="attach_67345" title="Filter environment variables">attachment 67345</a> <a href="attachment.cgi?id=67345&amp;action=edit" title="Filter environment variables">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67345'>[review]</a>
Filter environment variables

Review of <span class=""><a href="attachment.cgi?id=67345" name="attach_67345" title="Filter environment variables">attachment 67345</a> <a href="attachment.cgi?id=67345&amp;action=edit" title="Filter environment variables">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67345'>[review]</a>:
-----------------------------------------------------------------

None of this review blocks merging this patch and doing the advisory/release/release/release dance (in principle we currently support D-Bus 1.6, 1.4 and 1.2), but I would like to see a follow-up which improves on it and can also be picked up by distributions.

<span class="quote">&gt; libdbus never had an
&gt; explicit policy about its use in setuid programs.
&gt; I'm not sure whether we should advertise such support.</span >

I'm pretty sure that we should not claim that libdbus (or any other non-trivial library) is safe to use in processes that are more privileged than their parent (setuid, filesystem capabilities, etc.) without first sanitizing all input from the parent - notably the environment and command-line.

However, people will inevitably get that wrong, and when they do, as you've argued, it's fine for us to mitigate that.

<span class="quote">&gt; document that setuid executables must clear their environment before using libdbus</span >

I'd still like this to happen (<a href="show_bug.cgi?id=52202#c2">Comment #2</a> has wording that could probably be adapted), but it's not critical-path.

(In reply to <a href="show_bug.cgi?id=52202#c6">comment #6</a>)
<span class="quote">&gt; it turns out there are multiple escalation
&gt; vectors on different systems (via su/sudo + pam_systemd for example)</span >

I think it's a bug whenever setuid executables (su/sudo) invoke non-trivial libraries with a caller-controlled environment, and PAM is an extremely non-trivial library.

sudo appears to have some logic for taking a copy of the caller-controlled environment, resetting its effective environment to safe values, doing its own stuff (including PAM), and restoring none, some or all of the caller-controlled environment (according to configuration) when it's about to exec the child process. I think this is the only safe way to combine setuid and PAM.

::: dbus/dbus-sysdeps-unix.c
&#64;&#64; +4119,5 &#64;&#64;
<span class="quote">&gt; +dbus_bool_t
&gt; +_dbus_check_setuid (void)
&gt; +{
&gt; +  /* TODO: get __libc_enable_secure exported from glibc.
&gt; +   * See <a href="http://www.openwall.com/lists/owl-dev/2012/08/14/1">http://www.openwall.com/lists/owl-dev/2012/08/14/1</a></span >

If we're doing this check at all, it does not seem desirable to behave as if non-setuid when we might have our normal uid/gid, but elevated filesystem capabilities.

A workaround for glibc does occur to me: if __secure_getenv (&quot;HOME&quot;) (or secure_getenv (&quot;HOME&quot;) in newer glibc) returns NULL, either we're setuid or &quot;set-capabilities&quot;, or we genuinely do have no HOME. Behaving as if privileged in the absence of a HOME seems tolerable.

(Replace HOME with another standard environment variable in whose absence everything breaks anyway, if desired. PATH, maybe?)

On the other hand, it's possible that making _dbus_getenv() use secure_getenv() or __secure_getenv() (in preference to _dbus_check_setuid() + getenv()), as I suggest below, is already enough to protect us. If the exec*p family use secure_getenv for PATH, then running dbus-launch from PATH is harmless while (glibc thinks we're) setuid anyway.

Similarly, X11 autolaunching requires _dbus_getenv (&quot;DISPLAY&quot;), and writing &quot;keyring&quot; credentials requires _dbus_getenv (&quot;HOME&quot;), so if those (are made to) use secure_getenv, we're OK anyway.

launchd looks OK because it's a Mac OS X feature, and Mac OS X is FreeBSD-derived, so it hopefully has issetuidgid().

&#64;&#64; +4137,5 &#64;&#64;
<span class="quote">&gt; +
&gt; +  static dbus_bool_t check_setuid_initialised;
&gt; +  static dbus_bool_t is_setuid;
&gt; +
&gt; +  if (_DBUS_UNLIKELY (!check_setuid_initialised))</span >

This isn't necessarily thread-safe.

The thread initialization function (whichever of dbus_threads_init() or dbus_threads_init_default() is the real implementation in this particular branch - it swapped during 1.5) is required to be called before we start our second thread, so it should call _dbus_check_setuid() for its side-effect of initializing these static variables where required, with a comment.

::: dbus/dbus-sysdeps.c
&#64;&#64; +190,1 &#64;&#64;
<span class="quote">&gt;    return getenv (varname);</span >

This should use secure_getenv() (if it exists) or __secure_getenv() (if *that* exists) or _dbus_check_setuid()+getenv().

That would prevent environment variables from being interpreted if we're privileged but same-uid (e.g. filesystem capabilities). It can be reverted when glibc provides a better way to check for this.</pre>
    </div>

    <div id="c8" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c8">Comment 8</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Colin Walters</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 01:05:06 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c7">comment #7</a>)
<span class="quote">&gt; Comment on <span class=""><a href="attachment.cgi?id=67345" name="attach_67345" title="Filter environment variables">attachment 67345</a> <a href="attachment.cgi?id=67345&amp;action=edit" title="Filter environment variables">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67345'>[review]</a> [review]
&gt; Filter environment variables
&gt; 
&gt; Review of <span class=""><a href="attachment.cgi?id=67345" name="attach_67345" title="Filter environment variables">attachment 67345</a> <a href="attachment.cgi?id=67345&amp;action=edit" title="Filter environment variables">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67345'>[review]</a> [review]:
&gt; -----------------------------------------------------------------
&gt; 
&gt; None of this review blocks merging this patch and doing the
&gt; advisory/release/release/release dance (in principle we currently support
&gt; D-Bus 1.6, 1.4 and 1.2), but I would like to see a follow-up which improves
&gt; on it and can also be picked up by distributions.</span >

On it tomorrow.

<span class="quote">&gt; I'd still like this to happen (<a href="show_bug.cgi?id=52202#c2">Comment #2</a> has wording that could probably be
&gt; adapted), but it's not critical-path.</span >

Any suggestions for *where* to document this?  Toplevel docs for dbus/dbus-bus.c?  

<span class="quote">&gt; sudo appears to have some logic for taking a copy of the caller-controlled
&gt; environment, resetting its effective environment to safe values, doing its
&gt; own stuff (including PAM), and restoring none, some or all of the
&gt; caller-controlled environment (according to configuration) when it's about
&gt; to exec the child process. I think this is the only safe way to combine
&gt; setuid and PAM.</span >

I may see if I can convince coreutils people to do something similar for su.
 
<span class="quote">&gt; If we're doing this check at all, it does not seem desirable to behave as if
&gt; non-setuid when we might have our normal uid/gid, but elevated filesystem
&gt; capabilities.
&gt; 
&gt; A workaround for glibc does occur to me: if __secure_getenv (&quot;HOME&quot;) (or
&gt; secure_getenv (&quot;HOME&quot;) in newer glibc) returns NULL, either we're setuid or
&gt; &quot;set-capabilities&quot;, or we genuinely do have no HOME. Behaving as if
&gt; privileged in the absence of a HOME seems tolerable.</span >

I actually thought about testing whether getenv (&quot;PATH&quot;) == __secure_getenv (&quot;PATH&quot;) as the poor-man's issetugid() on Linux/glibc, but it's really a hack...

I'm not so sure about absence-of-HOME.  I mean, can't that happen for system services e.g.?

<span class="quote">&gt; On the other hand, it's possible that making _dbus_getenv() use
&gt; secure_getenv() or __secure_getenv() (in preference to _dbus_check_setuid()
&gt; + getenv()), as I suggest below, is already enough to protect us. If the
&gt; exec*p family use secure_getenv for PATH,</span >

Nope, from glibc/posix/execvpe.c:93:

      char *path = getenv (&quot;PATH&quot;);

I think doing so would break some uses of sudo.

<span class="quote">&gt; This isn't necessarily thread-safe.</span >

Will fix.
 
<span class="quote">&gt; This should use secure_getenv() (if it exists) or __secure_getenv() (if
&gt; *that* exists) or _dbus_check_setuid()+getenv().</span >

True, we might as well go the extra mile.  Will fix.</pre>
    </div>

    <div id="c9" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c9">Comment 9</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Colin Walters</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 01:42:55 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=67803" name="attach_67803" title="Use-__secure_getenv-if-available.patch">attachment 67803</a> <a href="attachment.cgi?id=67803&amp;action=edit" title="Use-__secure_getenv-if-available.patch">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67803'>[review]</a>
Use-__secure_getenv-if-available.patch</pre>
    </div>

    <div id="c10" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c10">Comment 10</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Colin Walters</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 01:43:21 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=67804" name="attach_67804" title="hardening-Ensure-_dbus_check_setuid-is-initialized-t.patch">attachment 67804</a> <a href="attachment.cgi?id=67804&amp;action=edit" title="hardening-Ensure-_dbus_check_setuid-is-initialized-t.patch">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67804'>[review]</a>
hardening-Ensure-_dbus_check_setuid-is-initialized-t.patch</pre>
    </div>

    <div id="c11" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c11">Comment 11</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Geoffrey Thomas</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 05:24:44 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=67810" name="attach_67810" title="activation-helper: Bypass _dbus_getenv filtering by using getenv">attachment 67810</a> <a href="attachment.cgi?id=67810&amp;action=edit" title="activation-helper: Bypass _dbus_getenv filtering by using getenv">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67810'>[review]</a>
activation-helper: Bypass _dbus_getenv filtering by using getenv

Unfortunately, there is one very well-known setuid program that links dbus, namely the activation helper. This patch breaks the ability of bus-activated services to find their starter bus, because DBUS_STARTER_ADDRESS gets cleared. (Specifically, the clear_environment function has logic to _dbus_getenv(&quot;DBUS_STARTER_ADDRESS&quot;), clear everything else, and restore it, but if _dbus_getenv fails in setuid programs, the variable never gets restored.)

Attached is a patch that fixes this by using getenv directly in the activation helper, which should be fine since clear_environment does its own filtering.

That said, I'm not sure this patch is safe. Specifically, the DBUS_STARTER_ADDRESS=unixexec:... case worries me, in that it would reintroduce the vulnerability (the child of the activation helper, which is not setuid, would happily use that address). It's possible this is fine since the helper is only executable by the messagebus user?

I'm happy to talk this over with folks on IRC tomorrow; it's getting late for me so I'm not sure I want to make assertions about what is and isn't secure.</pre>
    </div>

    <div id="c12" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c12">Comment 12</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 09:35:51 UTC
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class=""><a href="attachment.cgi?id=67803" name="attach_67803" title="Use-__secure_getenv-if-available.patch">attachment 67803</a> <a href="attachment.cgi?id=67803&amp;action=edit" title="Use-__secure_getenv-if-available.patch">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67803'>[review]</a>
Use-__secure_getenv-if-available.patch

Review of <span class=""><a href="attachment.cgi?id=67803" name="attach_67803" title="Use-__secure_getenv-if-available.patch">attachment 67803</a> <a href="attachment.cgi?id=67803&amp;action=edit" title="Use-__secure_getenv-if-available.patch">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67803'>[review]</a>:
-----------------------------------------------------------------

Looks good.</pre>
    </div>

    <div id="c13" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c13">Comment 13</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 09:37:10 UTC
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class=""><a href="attachment.cgi?id=67804" name="attach_67804" title="hardening-Ensure-_dbus_check_setuid-is-initialized-t.patch">attachment 67804</a> <a href="attachment.cgi?id=67804&amp;action=edit" title="hardening-Ensure-_dbus_check_setuid-is-initialized-t.patch">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67804'>[review]</a>
hardening-Ensure-_dbus_check_setuid-is-initialized-t.patch

Review of <span class=""><a href="attachment.cgi?id=67804" name="attach_67804" title="hardening-Ensure-_dbus_check_setuid-is-initialized-t.patch">attachment 67804</a> <a href="attachment.cgi?id=67804&amp;action=edit" title="hardening-Ensure-_dbus_check_setuid-is-initialized-t.patch">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67804'>[review]</a>:
-----------------------------------------------------------------

::: dbus/dbus-sysdeps-pthread.c
&#64;&#64; +276,4 &#64;&#64;
<span class="quote">&gt;  _dbus_threads_init_platform_specific (void)
&gt;  {
&gt;    check_monotonic_clock ();
&gt; +  (void) _dbus_check_setuid ();</span >

I think this deserves a comment above:

/* Not necessarily thread-safe, so we call it for its
 * side-effects before allowing threaded use. */

Other than that, looks good.</pre>
    </div>

    <div id="c14" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c14">Comment 14</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Julien Cristau</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 09:38:04 UTC
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class=""><a href="attachment.cgi?id=67803" name="attach_67803" title="Use-__secure_getenv-if-available.patch">attachment 67803</a> <a href="attachment.cgi?id=67803&amp;action=edit" title="Use-__secure_getenv-if-available.patch">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67803'>[review]</a>
Use-__secure_getenv-if-available.patch

Review of <span class=""><a href="attachment.cgi?id=67803" name="attach_67803" title="Use-__secure_getenv-if-available.patch">attachment 67803</a> <a href="attachment.cgi?id=67803&amp;action=edit" title="Use-__secure_getenv-if-available.patch">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67803'>[review]</a>:
-----------------------------------------------------------------

::: dbus/dbus-sysdeps.c
&#64;&#64; +184,5 &#64;&#64;
<span class="quote">&gt;  {  
&gt; +#ifdef HAVE___SECURE_GETENV
&gt; +  return __secure_getenv (varname);
&gt; +#elif HAVE_SECURE_GETENV
&gt; +  return secure_getenv (varname);</span >

shouldn't secure_getenv be preferred over the __ version?</pre>
    </div>

    <div id="c15" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c15">Comment 15</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 09:40:27 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c14">comment #14</a>)
<span class="quote">&gt; shouldn't secure_getenv be preferred over the __ version?</span >

True.</pre>
    </div>

    <div id="c16" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c16">Comment 16</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 09:56:21 UTC
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class=""><a href="attachment.cgi?id=67810" name="attach_67810" title="activation-helper: Bypass _dbus_getenv filtering by using getenv">attachment 67810</a> <a href="attachment.cgi?id=67810&amp;action=edit" title="activation-helper: Bypass _dbus_getenv filtering by using getenv">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67810'>[review]</a>
activation-helper: Bypass _dbus_getenv filtering by using getenv

Review of <span class=""><a href="attachment.cgi?id=67810" name="attach_67810" title="activation-helper: Bypass _dbus_getenv filtering by using getenv">attachment 67810</a> <a href="attachment.cgi?id=67810&amp;action=edit" title="activation-helper: Bypass _dbus_getenv filtering by using getenv">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67810'>[review]</a>:
-----------------------------------------------------------------

(In reply to <a href="show_bug.cgi?id=52202#c11">comment #11</a>)
<span class="quote">&gt; Unfortunately, there is one very well-known setuid program that links dbus,
&gt; namely the activation helper. This patch breaks the ability of bus-activated
&gt; services to find their starter bus, because DBUS_STARTER_ADDRESS gets
&gt; cleared.</span >

(Using the syntax $FOO here for environment variables, even though strictly speaking it's not right, to distinguish them from the C constants that often have very similar names...)

I feel as though system-bus-activated services ought to be using dbus_bus_get (DBUS_BUS_SYSTEM, ...) anyway, but you're right that this is really a regression: it used to work, and now it doesn't.

One possible solution would be for the activation helper to set $DBUS_STARTER_ADDRESS to the hard-coded, compile-time-chosen system bus address (DBUS_SYSTEM_BUS_DEFAULT_ADDRESS) instead of inheriting it from the environment. The impact of this would be:

* (good) a subverted dbus-daemon can't escalate its privileges from
  messagebus to root by running the setuid activation helper for a
  root service (e.g. NetworkManager) with a unixexec: address that
  will induce that root service to exec a chosen process

* (bad) a custom dbus-daemon (neither system nor session) configured
  to use the activation helper like a system bus, but listen on an
  unusual address, will pass the wrong $DBUS_STARTER_ADDRESS to
  its children

Mitigation of the bad: it's not at all clear to me that anyone really does this, and if they do, it doesn't work for GDBus applications anyway: passing $DBUS_STARTER_ADDRESS through to GDBus applications is insufficient, because they look at $DBUS_STARTER_BUS_TYPE instead. If it's &quot;session&quot; they use $DBUS_SESSION_BUS_ADDRESS, if it's &quot;system&quot; they use GIO's compile-time-configured equivalent of DBUS_SYSTEM_BUS_DEFAULT_ADDRESS, and otherwise they fail to connect at all.</pre>
    </div>

    <div id="c17" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c17">Comment 17</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 10:01:53 UTC
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class=""><a href="attachment.cgi?id=67810" name="attach_67810" title="activation-helper: Bypass _dbus_getenv filtering by using getenv">attachment 67810</a> <a href="attachment.cgi?id=67810&amp;action=edit" title="activation-helper: Bypass _dbus_getenv filtering by using getenv">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67810'>[review]</a>
activation-helper: Bypass _dbus_getenv filtering by using getenv

Review of <span class=""><a href="attachment.cgi?id=67810" name="attach_67810" title="activation-helper: Bypass _dbus_getenv filtering by using getenv">attachment 67810</a> <a href="attachment.cgi?id=67810&amp;action=edit" title="activation-helper: Bypass _dbus_getenv filtering by using getenv">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67810'>[review]</a>:
-----------------------------------------------------------------

::: bus/activation-helper.c
&#64;&#64; +149,4 &#64;&#64;
<span class="quote">&gt;    const char *debug_env = NULL;
&gt;  
&gt;    /* are we debugging */
&gt; +  debug_env = getenv (&quot;DBUS_VERBOSE&quot;);</span >

If you're debugging the activation helper (which needs special compilation options to even *have* this code), you should be debugging a non-setuid copy, so I don't think this line of diff is necessary or desirable.

If you're debugging system services, replacing the system service with a shell script that sets DBUS_VERBOSE and execs the real service seems much safer than passing it through the activation helper.

To be honest I'd be tempted to delete this special case altogether.</pre>
    </div>

    <div id="c18" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c18">Comment 18</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 10:09:47 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c16">comment #16</a>)
<span class="quote">&gt; One possible solution would be for the activation helper to set
&gt; $DBUS_STARTER_ADDRESS to the hard-coded, compile-time-chosen system bus
&gt; address</span >

Another possibility would be to filter $DBUS_STARTER_ADDRESS in some way: perhaps only let it through if it is of the form &quot;unix:path=XXX&quot; where XXX consists entirely of characters in the set [-A-Za-z0-9_/\*.%] (and in particular, no comma, colon or semicolon).</pre>
    </div>

    <div id="c19" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c19">Comment 19</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 10:27:58 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c8">comment #8</a>)
<span class="quote">&gt; I actually thought about testing whether getenv (&quot;PATH&quot;) == __secure_getenv
&gt; (&quot;PATH&quot;) as the poor-man's issetugid() on Linux/glibc, but it's really a
&gt; hack...</span >

Yes; on the other hand, it's only there as a workaround for glibc not giving us a way to check this (issetugid() or equivalent) that isn't specifically flagged as non-API (__libc_enable_secure, which is GLIBC_PRIVATE). It seems rather perverse that with sufficiently new glibc, we have secure_getenv() but not issetugid(), where you have to use (something equivalent to) the latter to know whether it's safe to call execvpe()...

In fact, now I think about it more, the answer is obvious. Before we run dbus-launch, we should check that _dbus_getenv (&quot;PATH&quot;) is non-NULL, in addition to using _dbus_check_setuid(). if it isn't, assume we're privileged, and refuse to run it (or at least, refuse to search $PATH). Similarly, before we write &quot;keyrings&quot; to our $HOME, we should check that _dbus_getenv (&quot;HOME&quot;) is non-NULL, in addition to _dbus_check_setuid(). Problem solved?

Again, I'm ignoring launchd here, but perhaps it would be safer to make DBUS_ENABLE_LAUNCHD explicitly conditional on HAVE_ISSETUGID so that our assertion that it can only happen on FreeBSD-based Mac OS X is safer. (configure.ac checks for launch.h and launchctl, so in principle you could implement it on Linux and we'd use it.)

<span class="quote">&gt; I'm not so sure about absence-of-HOME.  I mean, can't that happen for system
&gt; services e.g.?</span >

Perhaps.</pre>
    </div>

    <div id="c20" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c20">Comment 20</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Colin Walters</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 13:54:36 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c16">comment #16</a>)

<span class="quote">&gt; One possible solution would be for the activation helper to set
&gt; $DBUS_STARTER_ADDRESS to the hard-coded, compile-time-chosen system bus
&gt; address (DBUS_SYSTEM_BUS_DEFAULT_ADDRESS) instead of inheriting it from the
&gt; environment. The impact of this would be:</span >

I like this solution - Geoffrey, can you redo your patch?</pre>
    </div>

    <div id="c21" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c21">Comment 21</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Colin Walters</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 15:27:16 UTC
        </span>

      </div>




<pre class="bz_comment_text">Updated patch series at <a href="http://cgit.freedesktop.org/dbus/dbus/log/?h=wip/setuid-hardening">http://cgit.freedesktop.org/dbus/dbus/log/?h=wip/setuid-hardening</a></pre>
    </div>

    <div id="c22" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c22">Comment 22</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 16:02:40 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c8">comment #8</a>)
<span class="quote">&gt; Any suggestions for *where* to document this?  Toplevel docs for
&gt; dbus/dbus-bus.c?  </span >

That sounds as good a place as any.</pre>
    </div>

    <div id="c23" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c23">Comment 23</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Geoffrey Thomas</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 17:00:54 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c20">comment #20</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=52202#c16">comment #16</a>)
&gt; 
&gt; &gt; One possible solution would be for the activation helper to set
&gt; &gt; $DBUS_STARTER_ADDRESS to the hard-coded, compile-time-chosen system bus
&gt; &gt; address (DBUS_SYSTEM_BUS_DEFAULT_ADDRESS) instead of inheriting it from the
&gt; &gt; environment. The impact of this would be:
&gt; 
&gt; I like this solution - Geoffrey, can you redo your patch?</span >

Recording this in Bugzilla for the record (discussion was on IRC): I tested your revision of my patch with this change, and confirmed that it works in our environment. I agree with this approach.</pre>
    </div>

    <div id="c24" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c24">Comment 24</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Colin Walters</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 19:14:00 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c12">comment #12</a>)
<span class="quote">&gt; Comment on <span class=""><a href="attachment.cgi?id=67803" name="attach_67803" title="Use-__secure_getenv-if-available.patch">attachment 67803</a> <a href="attachment.cgi?id=67803&amp;action=edit" title="Use-__secure_getenv-if-available.patch">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67803'>[review]</a> [review]
&gt; Use-__secure_getenv-if-available.patch
&gt; 
&gt; Review of <span class=""><a href="attachment.cgi?id=67803" name="attach_67803" title="Use-__secure_getenv-if-available.patch">attachment 67803</a> <a href="attachment.cgi?id=67803&amp;action=edit" title="Use-__secure_getenv-if-available.patch">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67803'>[review]</a> [review]:
&gt; -----------------------------------------------------------------
&gt; 
&gt; Looks good.</span >

Turns out that this breaks gnome-keyring-daemon, at least in my configuration:

$ getcap /usr/bin/gnome-keyring-daemon 
/usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep

And of course, it can no longer read DBUS_SESSION_BUS_ADDRESS, nor autolaunch.

Until we figure out a plan for this, I'm going to back out the __secure_getenv change, and do a dbus 1.6.8.</pre>
    </div>

    <div id="c25" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c25">Comment 25</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Colin Walters</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-28 19:40:37 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c24">comment #24</a>)

<span class="quote">&gt; Until we figure out a plan for this, I'm going to back out the
&gt; __secure_getenv change, and do a dbus 1.6.8.</span >

TL;DR - defer use of __secure_getenv() indefinitely.


&lt;walters&gt; so...anyone have thoughts on <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED MOVED - document that setuid executables must clear their environment before using libdbus"
   href="show_bug.cgi?id=52202#c24">https://bugs.freedesktop.org/show_bug.cgi?id=52202#c24</a> ?  davidz?  stefw?
&lt;walters&gt; i didn't notice it initially because it was just gnome-keyring-daemon, the rest of the system/session worked
&lt;davidz&gt; walters: I guess my view always been that this class of bugs were application-bugs (e.g. not clearing its environment)... I think it's fine to require setuid or cap-using programs to be careful on their own
&lt;walters&gt; davidz, this is the opposite problem
&lt;walters&gt; oh you mean, if libdbus weren't using __secure_getenv(), it'd be up to the app?
&lt;davidz&gt; yeah
&lt;stefw&gt; walters, gnome-keyring-daemon uses that capability to do keep password memory from being paged.
&lt;walters&gt; stefw, yeah i know why
&lt;davidz&gt; I mean, using __secure_getenv() in the library is there only to make buggy programs (those that don't clear the env themselves) more &quot;secure&quot;....
&lt;walters&gt; the question is, were we to use __secure_getenv(), should we pass DBUS_SESSION_BUS_ADDRESS via some other mechanism?  command line argument?
&lt;davidz&gt; I totally agree it would be nice if it worked but...
&lt;davidz&gt; walters: dbus-launch(1) :-)
* davidz runs
&lt;davidz&gt; but, seriously, making GDBus not spawn dbus-launch(1) (just look itself in the X server, dlopening libX11.so in the process) would fix the problem
&lt;davidz&gt; (but I think avoiding using __secure_getenv() is the way forward.... at least for now)
&lt;walters&gt; well, but that's how libc works (and systemd uses it too)
&lt;walters&gt; dunno
&lt;walters&gt; davidz, were we to not even do euid == uid checking, then we'd have to patch coreutils su and/or pam_systemd
&lt;stefw&gt; walters, is it glibc that checks for caps and treats themany caps and treats them as setuid as
&lt;stefw&gt; groan
&lt;stefw&gt; something (pango) is reordering my words
&lt;walters&gt; stefw, well, no the kernel sets an AT_SECURE auxiliary vectory
&lt;walters&gt; *vector
&lt;walters&gt; glibc looks for it
&lt;stefw&gt; grumble
&lt;stefw&gt; because caps_ipc_lock is hardly setuid()
&lt;walters&gt; that happens on plain old setuid binaries, filesystem caps, *and* SELinux domain transitions
&lt;walters&gt; stefw, see <a href="http://git.gnome.org/browse/glib/commit/?id=d6cbb29f598d677d5fc1c974cba6d9f646cff491">http://git.gnome.org/browse/glib/commit/?id=d6cbb29f598d677d5fc1c974cba6d9f646cff491</a>
&lt;stefw&gt; aha, so that's why davidz was suggesting avoiding __secure_getenv() for now?
&lt;stefw&gt; that would solve the breakage
&lt;walters&gt; that's true
&lt;walters&gt; but on the other hand, if someone changed su/sudo to just have fscaps for CAP_SYS_ADMIN or something, we'd be vulnerable again
&lt;davidz&gt; yeah, the __secure_getenv() stuff was only put in to make buggy D-Bus apps (e.g. not clearing the environment) &quot;secure&quot;
&lt;davidz&gt; my view always been it's better to fix the apps
&lt;davidz&gt; but both views are legitimate of course
&lt;davidz&gt; (I mean, we ended doing both, of course)
&lt;walters&gt; at the moment we're doing euid == uid checking
&lt;walters&gt; and i did some smoke testing with also doing __secure_getenv but only just now noticed it breaks gnome-keyring
&lt;walters&gt; anyways, rough consensus to revert that last bit and do a 1.6.8?
&lt;davidz&gt; works for me, sure
&lt;stefw&gt; the git log of dbus looks really strange for me.
&lt;stefw&gt; i see a &quot;hardening: Use __secure_getev() ...&quot;
&lt;stefw&gt; commit with a patch that has nothing to do with that.
&lt;walters&gt; which commit?
&lt;stefw&gt; <a href="http://cgit.freedesktop.org/dbus/dbus/commit/?id=d4379ee8dbbe157db173464530df7c069b6fd86f">http://cgit.freedesktop.org/dbus/dbus/commit/?id=d4379ee8dbbe157db173464530df7c069b6fd86f</a>
&lt;walters&gt; that's because _dbus_getenv -&gt; __secure_getenv 
&lt;stefw&gt; ah
&lt;walters&gt; was follow up from smcv's suggestion from <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED MOVED - document that setuid executables must clear their environment before using libdbus"
   href="show_bug.cgi?id=52202#c7">https://bugs.freedesktop.org/show_bug.cgi?id=52202#c7</a>
&lt;stefw&gt; so yes, reverting this seems like it would fix the breakage for now: <a href="http://cgit.freedesktop.org/dbus/dbus/commit/?id=d839f027ed2cf320ac8b762ea93ba8af74ef50c6">http://cgit.freedesktop.org/dbus/dbus/commit/?id=d839f027ed2cf320ac8b762ea93ba8af74ef50c6</a>
&lt;walters&gt; right
&lt;walters&gt; i'm also reverting that second one since it's pointless without the earlier one
&lt;stefw&gt; once we have systemd session socket activation i'd like to rework gnome-keyring-daemon's startup considerably
&lt;stefw&gt; and perhaps we can work around this case there.
&lt;walters&gt; user bus would significantly help here
&lt;walters&gt; since the system could provide a secure mechanism to map uid -&gt; address
&lt;stefw&gt; true
&lt;stefw&gt; i think this also has to do with the whole 'gnome-keyring-daemon --start' wanting to pass environment variables to the 'gnome-keyring-daemon --login' started by pam
&lt;stefw&gt; the former is dbus activated
&lt;stefw&gt; sometimes
&lt;stefw&gt; walters, so yes that secure mechanism would help for some of it.
&lt;stefw&gt; but we still want to get LANG and stuff into the latter gnome-keyring-daemon</pre>
    </div>

    <div id="c26" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c26">Comment 26</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-29 12:04:38 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c24">comment #24</a>)
<span class="quote">&gt; Turns out that this breaks gnome-keyring-daemon, at least in my
&gt; configuration:
&gt; 
&gt; $ getcap /usr/bin/gnome-keyring-daemon 
&gt; /usr/bin/gnome-keyring-daemon = cap_ipc_lock+ep</span >

In principle, we're right to consider this to be privileged: gnome-keyring-daemon has a privilege that you don't normally (it can prevent arbitrarily large amounts of memory from being swapped out). Having it inherit variables that could cause it to be subverted by your unprivileged processes is pretty much equivalent to granting this capability to your entire session.

(If you're the only logged-in user of your computer then in practice that's no bad thing, of course.)</pre>
    </div>

    <div id="c27" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c27">Comment 27</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-09-29 16:19:03 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c26">comment #26</a>)
<span class="quote">&gt; gnome-keyring-daemon has a privilege that you don't normally (it can prevent
&gt; arbitrarily large amounts of memory from being swapped out). Having it
&gt; inherit variables that could cause it to be subverted by your unprivileged
&gt; processes is pretty much equivalent to granting this capability to your
&gt; entire session.</span >

If the gnome-keyring maintainer's considered opinion is that this is OK, one way to do so would be for it to use g_dbus_connection_new_for_address() (if using GDBus) or dbus_connection_open() + dbus_bus_register() (if using libdbus) instead of the higher-level versions; then it's unambiguously gnome-keyring's responsibility to find its address, and gnome-keyring gets to make any relevant security decisions (like &quot;actually, I trust my caller implicitly&quot;).</pre>
    </div>

    <div id="c28" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c28">Comment 28</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-10-02 08:50:09 UTC
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=67977" name="attach_67977" title="activation helper: when compiled for tests, do not reset  system bus address">attachment 67977</a> <a href="attachment.cgi?id=67977&amp;action=edit" title="activation helper: when compiled for tests, do not reset  system bus address">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67977'>[review]</a>
activation helper: when compiled for tests, do not reset  system bus address

Otherwise, the tests try to connect to the real system bus, which will
often fail - particularly if you run the tests configured for the default
/usr/local (with no intention of installing the result), in which case
the tests would try to connect to /usr/local/var/run/dbus/system_bus_socket.

---

This was a regression caused by these changes. This particular incarnation of the patch is against my backports of the changes to dbus-1.2 (which I'll test against Debian stable shortly), but it applies cleanly to 1.4 and 1.6.</pre>
    </div>

    <div id="c29" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c29">Comment 29</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Colin Walters</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-10-02 13:36:44 UTC
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class=""><a href="attachment.cgi?id=67977" name="attach_67977" title="activation helper: when compiled for tests, do not reset  system bus address">attachment 67977</a> <a href="attachment.cgi?id=67977&amp;action=edit" title="activation helper: when compiled for tests, do not reset  system bus address">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67977'>[review]</a>
activation helper: when compiled for tests, do not reset  system bus address

Review of <span class=""><a href="attachment.cgi?id=67977" name="attach_67977" title="activation helper: when compiled for tests, do not reset  system bus address">attachment 67977</a> <a href="attachment.cgi?id=67977&amp;action=edit" title="activation helper: when compiled for tests, do not reset  system bus address">[details]</a></span> <a href='page.cgi?id=splinter.html&amp;bug=52202&amp;attachment=67977'>[review]</a>:
-----------------------------------------------------------------

Looks reasonable to me.</pre>
    </div>

    <div id="c30" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c30">Comment 30</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Colin Walters</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-10-02 13:49:29 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c27">comment #27</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=52202#c26">comment #26</a>)
&gt; &gt; gnome-keyring-daemon has a privilege that you don't normally (it can prevent
&gt; &gt; arbitrarily large amounts of memory from being swapped out). Having it
&gt; &gt; inherit variables that could cause it to be subverted by your unprivileged
&gt; &gt; processes is pretty much equivalent to granting this capability to your
&gt; &gt; entire session.
&gt; 
&gt; If the gnome-keyring maintainer's considered opinion is that this is OK, one
&gt; way to do so would be for it to use g_dbus_connection_new_for_address() (if
&gt; using GDBus) or dbus_connection_open() + dbus_bus_register() (if using
&gt; libdbus) instead of the higher-level versions; then it's unambiguously
&gt; gnome-keyring's responsibility to find its address, and gnome-keyring gets
&gt; to make any relevant security decisions (like &quot;actually, I trust my caller
&gt; implicitly&quot;).</span >

Mmm...I'm uncertain about making that change to gnome-keyring.  It's true that it would help us migrate to __secure_getenv(), but on the other hand, it would be a bit of code we'd have to remember to change if we attempted to migrate to a user bus.

Note that for gnome-keyring, this issue bleeds over into the GLib one, because it links to gio, and thus is &quot;vulnerable&quot; to e.g. GIO_EXTRA_MODULES.</pre>
    </div>

    <div id="c31" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c31">Comment 31</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2012-10-04 13:26:19 UTC
        </span>

      </div>




<pre class="bz_comment_text">I've released 1.2.30 with (a backport of) these changes.</pre>
    </div>

    <div id="c32" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c32">Comment 32</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alban Crequy</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-07-23 15:53:23 UTC
        </span>

      </div>




<pre class="bz_comment_text">setuid/setgid executables using libdbus can be identified with something like:

for i in $(find / -type f -a -perm -4000 ; find / -type f -a -perm -2000) ; do echo $i ; ldd $i|grep dbus ; done</pre>
    </div>

    <div id="c33" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c33">Comment 33</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Simon McVittie</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2014-09-11 11:03:09 UTC
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=52202#c32">comment #32</a>)
<span class="quote">&gt; setuid/setgid executables using libdbus can be identified with something
&gt; like:</span >

No, sorry, they can't. Any setuid/setgid executable that loads plugins that might use libdbus also needs to be &quot;on the list&quot;.

The most prominent plugin architectures that might conceivably involve libdbus and are likely to be used by a setuid process are PAM and nss.

In particular, PAM has a history of

- being used in setuid executables, e.g. su(8)

- not documenting whether it is considered to be OK to use it in setuid
  situations (e.g. no responses to
  &lt;<a href="http://www.redhat.com/archives/pam-list/2013-January/msg00005.html">http://www.redhat.com/archives/pam-list/2013-January/msg00005.html</a>&gt;
  when I asked about this)

- people writing plugins that use D-Bus (pam_systemd, pam_ck_connector,
  pam_dbus, pam_fprintd, etc.; pam_dbus and pam_fprintd use the deprecated
  dbus-glib, which is particularly concerning)</pre>
    </div>

    <div id="c34" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=52202#c34">Comment 34</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">GitLab Migration User</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2018-10-12 21:14:17 UTC
        </span>

      </div>




<pre class="bz_comment_text">-- GitLab Migration Automatic Message --

This bug has been migrated to freedesktop.org's GitLab instance and has been closed from further activity.

You can subscribe and participate further through the new bug through this link to our GitLab instance: <a href="https://gitlab.freedesktop.org/dbus/dbus/issues/71">https://gitlab.freedesktop.org/dbus/dbus/issues/71</a>.</pre>
    </div>


  

</td>
<td>
</td>
</tr></table>
  </div>

</form>

<hr>
<ul class="related_actions">
    <li><a href="show_bug.cgi?format=multiple&amp;id=52202">Format For Printing</a></li>
    
    <li>&nbsp;-&nbsp;<a href="#">Top of page </a></li>
    </ul>

<br>
</div>

    <div id="footer">
      <div class="intro"></div>
<ul id="useful-links">
  <li id="links-actions"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_bottom" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_bottom" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_bottom"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>


</ul>
  </li>

  




  
</ul>

      <div class="outro"></div>
    </div>
<p align="center">
  Use of freedesktop.org services, including Bugzilla, is subject to our <a href="https://www.freedesktop.org/wiki/CodeOfConduct/">Code of Conduct</a>. How we collect and use information is described in our <a href="https://www.freedesktop.org/wiki/PrivacyPolicy">Privacy Policy</a>.
</p>
  </body>
</html>