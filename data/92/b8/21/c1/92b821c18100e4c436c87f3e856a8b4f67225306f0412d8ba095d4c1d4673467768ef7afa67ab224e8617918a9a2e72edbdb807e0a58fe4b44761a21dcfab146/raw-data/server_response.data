<!DOCTYPE html>
<html lang="en">
  <head>
    <title>10957 &ndash; HttpOnly Cookie Option</title>

      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<link href="data/assets/52436921e68ed468d372628fc792a752.css?1591398800" rel="stylesheet" type="text/css">

<link href="data/assets/3173de5410adb6e3827752fbd2bfd7b4.css?1591398794" rel="stylesheet" type="text/css">

    
<script type="text/javascript" src="data/assets/a7c2f3a028f17a9aa60f56dc9d6e732d.js?1591398800"></script>

    <script type="text/javascript">
    <!--
        YAHOO.namespace('bugzilla');
        YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
               if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
               var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
               return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
         };
        if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
            YAHOO.util.Event._simpleRemove(window, "unload", 
                                           YAHOO.util.Event._unload);
        }
        
        function unhide_language_selector() { 
            YAHOO.util.Dom.removeClass(
                'lang_links_container', 'bz_default_hidden'
            ); 
        } 
        YAHOO.util.Event.onDOMReady(unhide_language_selector);

        
        var BUGZILLA = {
            param: {
                cookiepath: '\/',
                maxusermatches: 1000
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    "You must enter a Description for this attachment.",
                component_required:
                    "You must select a Component for this bug.",
                description_required:
                    "You must enter a Description for this bug.",
                short_desc_required:
                    "You must enter a Summary for this bug.",
                version_required:
                    "You must select a Version for this bug."
            }
              , api_token: ''
        };

    if (history && history.replaceState) {
      if(!document.location.href.match(/show_bug\.cgi/)) {
        history.replaceState( null,
                             "10957 – HttpOnly Cookie Option",
                             "show_bug.cgi?id=10957" );
        document.title = "10957 – HttpOnly Cookie Option";
      }
      if (document.location.href.match(/show_bug\.cgi\?.*list_id=/)) {
        var href = document.location.href;
        href = href.replace(/[\?&]+list_id=(\d+|cookie)/, '');
        history.replaceState(null, "10957 – HttpOnly Cookie Option", href);
      }
    }
    YAHOO.util.Event.onDOMReady(function() {
      initDirtyFieldTracking();

    });
    // -->
    </script>
<script type="text/javascript" src="data/assets/daf5e0fb6826e6a35280e622913f0c4a.js?1591398800"></script>


    


    
    <link rel="search" type="application/opensearchdescription+xml"
                       title="Bugzilla" href="./search_plugin.cgi">
    <link rel="shortcut icon" href="images/favicon.ico">
  </head>

  <body 
        class="bugs-webkit-org
                 bz_bug
                 bz_status_RESOLVED
                 bz_product_WebKit
                 bz_component_WebKit_Misc.
                 bz_bug_10957 yui-skin-sam">


  <div id="header">

    


    <div id="titles">

      <span id="title"> WebKit Bugzilla</span>



    </div>



        <div id="bug_title">Bug&nbsp;10957: HttpOnly Cookie Option</div>


    <div id="common_links"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_top" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_top");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_top" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_top"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li>
      <span class="separator">| </span>
        <a href="request.cgi">Requests</a></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/5.0/using/understanding.html" target="_blank">Help</a>
      </li>
    
      <li id="new_account_container_top">
        <span class="separator">| </span>
        <a href="createaccount.cgi">New&nbsp;Account</a>
      </li>

    <li id="mini_login_container_top">
  <span class="separator">| </span>
  <a id="login_link_top" href="show_bug.cgi?id=10957&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_top')">Log In</a>

  <form action="show_bug.cgi?id=10957" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_top">
    <input id="Bugzilla_login_top" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_top" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_top">
    <a href="#" onclick="return hide_mini_login_form('_top')">[x]</a>
  </form>
</li>


  <li id="forgot_container_top">
    <span class="separator">| </span>
    <a id="forgot_link_top" href="show_bug.cgi?id=10957&amp;GoAheadAndLogIn=1#forgot"
       onclick="return show_forgot_form('_top')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_top"
          class="mini_forgot bz_default_hidden">
      <label for="login_top">Login:</label>
      <input name="loginname" size="20" id="login_top" required
          type="email" placeholder="Your Email Address">
      <input id="forgot_button_top" value="Reset Password" type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_top" name="token"
             value="1635620796-j1iOETeRp2e9SpDSA9J5M92LY88qsktpgH_35qOt4D8">
      <a href="#" onclick="return hide_forgot_form('_top')">[x]</a>
    </form>
  </li>
</ul>
    </div>
  </div>


  <div id="bugzilla-body">


<script type="text/javascript">
<!--

//-->
</script>

<form name="changeform" id="changeform" method="post" action="process_bug.cgi">

  <input type="hidden" name="delta_ts" value="2011-04-27 10:27:57">
  <input type="hidden" name="id" value="10957">
  <input type="hidden" name="token" value="1635620796-is-bACBvb64XWqI6ja3ihMJER1BiEbONVE8pRFkwD_o">
<div class="bz_short_desc_container edit_form">
     <a href="show_bug.cgi?id=10957"><b>Bug&nbsp;10957</b></a> <span id="summary_container" class="bz_default_hidden">
      - <span id="short_desc_nonedit_display">HttpOnly Cookie Option</span>
     </span>

    <div id="summary_input"><span class="field_label "
    id="field_label_short_desc">


  <a 
      title="The bug summary is a short sentence which succinctly describes what the bug is about."
      class="field_help_link"
      href="page.cgi?id=fields.html#short_desc"
  >Summary:</a>

</span>HttpOnly Cookie Option
    </div>
  </div>
  <script type="text/javascript">
    hideEditableField('summary_container',
                      'summary_input',
                      'summary_edit_action',
                      'short_desc',
                      'HttpOnly Cookie Option' );
  </script>

  <table id="bug_details" class="edit_form">

    <tr>
      
      <td id="bz_show_bug_column_1" class="bz_show_bug_column">     
        <table>
          <tr>
    <th class="field_label">
      <a href="page.cgi?id=fields.html#bug_status">Status</a>:
    </th>
    <td id="bz_field_status">
      <span id="static_bug_status">RESOLVED
          FIXED
      </span>
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_alias">


  <a 
      title="A short, unique name assigned to a bug in order to assist with looking it up and referring to it in other places in Bugzilla."
      class="field_help_link"
      href="page.cgi?id=fields.html#alias"
  >Alias:</a>

</th>
    <td>
        None
    </td>
  </tr>
<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_product">


  <a 
      title="Bugs are categorised into Products and Components."
      class="field_help_link"
      href="describecomponents.cgi"
  >Product:</a>

</th>
  <td class="field_value "
      id="field_container_product" >WebKit

</td>
    </tr>

    
    <tr class="bz_default_hidden"><th class="field_label "
    id="field_label_classification">


  <a 
      title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation."
      class="field_help_link"
      href="page.cgi?id=fields.html#classification"
  >Classification:</a>

</th>
  <td class="field_value "
      id="field_container_classification" >Unclassified

</td>
    </tr>
        
    
    
    <tr><th class="field_label "
    id="field_label_component">


  <a 
      title="Components are second-level categories; each belongs to a particular Product. Select a Product to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi?product=WebKit"
  >Component:</a>

</th>
  <td class="field_value "
      id="field_container_component" >WebKit Misc.

  (<a href="buglist.cgi?component=WebKit%20Misc.&amp;product=WebKit&amp;bug_status=__open__"
      target="_blank">show other bugs</a>)
</td>
    </tr>
    <tr>
<th class="field_label "
    id="field_label_version">


  <a 
      title="The version field defines the version of the software the bug was found in."
      class="field_help_link"
      href="page.cgi?id=fields.html#version"
  >Version:</a>

</th>
<td>420+
  </td>

    </tr>
        
    
        
    <tr><th class="field_label "
    id="field_label_rep_platform">


  <a 
      title="The hardware platform the bug was observed on. Note: When searching, selecting the option &quot;All&quot; only finds bugs whose value for this field is literally the word &quot;All&quot;."
      class="field_help_link"
      href="page.cgi?id=fields.html#rep_platform"
  >Hardware:</a>

</th>
      <td class="field_value">Mac
        OS X 10.4
      </td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          
          <tr>
      <th class="field_label">
        <label  accesskey="i">
          <a href="page.cgi?id=fields.html#importance"><u>I</u>mportance</a></label>:
      </th>
      <td>P2

       Enhancement

      </td>
    </tr>
          
          <tr><th class="field_label "
    id="field_label_assigned_to">


  <a 
      title="The person in charge of resolving the bug."
      class="field_help_link"
      href="page.cgi?id=fields.html#assigned_to"
  >Assignee:</a>

</th>
      <td><span class="vcard"><span class="fn">Darin Adler</span>
</span>
      </td>
    </tr>


    <script type="text/javascript">
      assignToDefaultOnChange(['product'],
        'webkit-unassigned\x40lists.webkit.org',
        '');
    </script>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          <tr><th class="field_label "
    id="field_label_bug_file_loc">


  <a 
      title="Bugs can have a URL associated with them - for example, a pointer to a web site where the problem is seen."
      class="field_help_link"
      href="page.cgi?id=fields.html#bug_file_loc"
  >URL:</a>

</th>
    <td>
      <span id="bz_url_input_area">
          <a href="http://msdn.microsoft.com/workshop/author/dhtml/httponly_cookies.asp"
             rel="noreferrer"><span title="http://msdn.microsoft.com/workshop/author/dhtml/httponly_cookies.asp">http://msdn.microsoft.com/workshop/au...
        </span></a>
      </span>
    </td>
  </tr>


    <tr><th class="field_label "
    id="field_label_keywords">


  <a 
      title="You can add keywords from a defined list to bugs, in order to easily identify and group them."
      class="field_help_link"
      href="describekeywords.cgi"
  >Keywords:</a>

</th>
  <td class="field_value "
      id="field_container_keywords" >InRadar

</td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>

          
<tr><th class="field_label "
    id="field_label_dependson">


  <a 
      title="The bugs listed here must be resolved before this bug can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#dependson"
  >Depends on:</a>

</th>

  <td>
    <span id="dependson_input_area">
    </span>

  </td>
  </tr>
  
  <tr><th class="field_label "
    id="field_label_blocked">


  <a 
      title="This bug must be resolved before the bugs listed in this field can be resolved."
      class="field_help_link"
      href="page.cgi?id=fields.html#blocked"
  >Blocks:</a>

</th>

  <td>
    <span id="blocked_input_area">
    </span>

  </td>
  </tr>
          
        </table>
      </td>
      <td>
        <div class="bz_column_spacer">&nbsp;</div>
      </td>
      
      <td id="bz_show_bug_column_2" class="bz_show_bug_column">
        <table>
        <tr>
    <th class="field_label">
      Reported:
    </th>
    <td>2006-09-20 17:25 PDT by <span class="vcard"><span class="fn">Robert Sesek</span>
</span>
    </td>
  </tr>
  
  <tr>
    <th class="field_label">
      Modified:
    </th>
    <td>2011-04-27 10:27 PDT
      (<a href="show_activity.cgi?id=10957">History</a>)
    </td>
  
  </tr>
<tr>
      <th class="field_label">
        <label  accesskey="a">
          CC List:
        </label>
      </th>
      <td>7 
          users
          <span id="cc_edit_area_showhide_container" class="bz_default_hidden">
            (<a href="#" id="cc_edit_area_showhide">show</a>)
          </span>
        <div id="cc_edit_area">
          <br>
            <select id="cc" multiple="multiple" size="5" >
                <option value="abarth">abarth</option>
                <option value="ap">ap</option>
                <option value="collinj">collinj</option>
                <option value="darin">darin</option>
                <option value="jim">jim</option>
                <option value="priyajeet.hora">priyajeet.hora</option>
                <option value="sam">sam</option>
            </select>
        </div>
          <script type="text/javascript">
            hideEditableField( 'cc_edit_area_showhide_container', 
                               'cc_edit_area', 
                               'cc_edit_area_showhide', 
                               '', 
                               '');  
          </script>
      </td>
    </tr>

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_see_also">


  <a 
      title="This allows you to refer to bugs in other installations. You can enter a URL to a bug in the 'Add Bug URLs' field to note that that bug is related to this one. You can enter multiple URLs at once by separating them with whitespace. You should normally use this field to refer to bugs in other installations. For bugs in this installation, it is better to use the Depends on and Blocks fields."
      class="field_help_link"
      href="page.cgi?id=fields.html#see_also"
  >See Also:</a>

</th>
  <td class="field_value "
      id="field_container_see_also" >

</td>
    </tr> 

<tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>

<tr>
      <th class="field_label">
        <label>Flags:</label>
      </th>
      <td><span title="David Kilzer (:ddkilzer)">ddkilzer</span>:
      <span class="nowrap">CloneForRadar+</span><br>
      </td>
    </tr>

        </table>
      </td>
    </tr>
    <tr>
      <td colspan="3">
          <hr id="bz_top_half_spacer">
      </td>
    </tr>
  </table>

  <table id="bz_big_form_parts">
  <tr>
  <td>

    
<script src="js/status-bubble.js?1584556449"></script>
<script type="text/javascript">
<!--
window.addEventListener('message', handleStatusBubbleMessage, false);

function toggle_display(link) {
    var table = document.getElementById("attachment_table");
    var view_all = document.getElementById("view_all");
    var hide_obsolete_url_parameter = "&hide_obsolete=1";
    // Store current height for scrolling later
    var originalHeight = table.offsetHeight;
    var rows = YAHOO.util.Dom.getElementsByClassName(
        'bz_tr_obsolete', 'tr', table);

    for (var i = 0; i < rows.length; i++) {
        bz_toggleClass(rows[i], 'bz_default_hidden');
    }

    if (YAHOO.util.Dom.hasClass(rows[0], 'bz_default_hidden')) {
        link.innerHTML = "Show Obsolete";
        view_all.href = view_all.href + hide_obsolete_url_parameter 
    }
    else {
        link.innerHTML = "Hide Obsolete";
        view_all.href = view_all.href.replace(hide_obsolete_url_parameter,"");
    }

    var newHeight = table.offsetHeight;
    // This scrolling makes the window appear to not move at all.
    window.scrollBy(0, newHeight - originalHeight);

    return false;
}
//-->
</script>

<br>
<table id="attachment_table">
  <tr id="a0">
    <th colspan="3" class="left">
      Attachments
    </th>
  </tr>


      <tr id="a1" class="bz_contenttype_application_octet-stream"


      >
        <td>
            <a href="attachment.cgi?id=17845"
               title="View the content of the attachment">
          <b>test case (for http/tests/security)</b></a>

          <span class="bz_attach_extra_info">
              (423 bytes,
                application/octet-stream)

            <br>
            <a href="#attach_17845"
               title="Go to the comment associated with the attachment">2007-12-11 08:30 PST</a>,

            <span class="vcard"><span class="fn">Alexey Proskuryakov</span>
</span>
          </span>
        </td>

          <td class="bz_attach_flags">
              <i>no flags</i>
          </td>

        <td>


          <a href="attachment.cgi?id=17845&amp;action=edit">Details</a>




        </td>
      </tr>
      <tr id="a2" class="bz_contenttype_text_plain bz_patch bz_tr_obsolete bz_default_hidden"


      >
        <td>
            <a href="attachment.cgi?id=25220"
               title="View the content of the attachment">
          <b><span class="bz_obsolete">patch; someone needs to help me make more regression tests</span></b></a>

          <span class="bz_attach_extra_info">
              (16.76 KB,
                patch)

            <br>
            <a href="#attach_25220"
               title="Go to the comment associated with the attachment">2008-11-17 10:19 PST</a>,

            <span class="vcard"><span class="fn">Darin Adler</span>
</span>
          </span>
        </td>

          <td class="bz_attach_flags">
              <i>no flags</i>
          </td>

        <td>


          <a href="attachment.cgi?id=25220&amp;action=edit">Details</a>

            | <a href="attachment.cgi?id=25220&amp;action=prettypatch">Formatted Diff</a>

            | <a href="attachment.cgi?id=25220&amp;action=diff">Diff</a>

          <div class="statusBubble">
            <iframe src="https://ews.webkit.org/status-bubble/25220/"
                    style="width: 0px; height: 20px; border: none;" scrolling="no" onload="handleStatusBubbleLoad(this)">
            </iframe>
          </div>

        </td>
      </tr>
      <tr id="a3" class="bz_contenttype_text_plain bz_patch"
 style="background-color: rgb(255,255,200);" 

      >
        <td>
            <a href="attachment.cgi?id=25222"
               title="View the content of the attachment">
          <b>patch</b></a>

          <span class="bz_attach_extra_info">
              (23.44 KB,
                patch)

            <br>
            <a href="#attach_25222"
               title="Go to the comment associated with the attachment">2008-11-17 12:25 PST</a>,

            <span class="vcard"><span class="fn">Darin Adler</span>
</span>
          </span>
        </td>

          <td class="bz_attach_flags">
                  <span title="Alexey Proskuryakov">ap</span>:
                review+
                <br>
          </td>

        <td>


          <a href="attachment.cgi?id=25222&amp;action=edit">Details</a>

            | <a href="attachment.cgi?id=25222&amp;action=prettypatch">Formatted Diff</a>

            | <a href="attachment.cgi?id=25222&amp;action=diff">Diff</a>

          <div class="statusBubble">
            <iframe src="https://ews.webkit.org/status-bubble/25222/"
                    style="width: 0px; height: 20px; border: none;" scrolling="no" onload="handleStatusBubbleLoad(this)">
            </iframe>
          </div>

        </td>
      </tr>

  <tr class="bz_attach_footer">
    <td colspan="3">
        <span class="bz_attach_view_hide">
            <a href="#a0" onclick="return toggle_display(this);">Show
              Obsolete</a> (1)
            <a id="view_all" href="attachment.cgi?bugid=10957&amp;action=viewall&amp;hide_obsolete=1">View All</a>
        </span>
        <a href="attachment.cgi?bugid=10957&amp;action=enter">Add an attachment</a>
        (proposed patch, testcase, etc.)
    </td>
  </tr>
</table>
<br>
<div id="add_comment" class="bz_section_additional_comments">
      <table>
        <tr>
          <td>
            <fieldset>
              <legend>Note</legend>
              You need to
              <a href="show_bug.cgi?id=10957&amp;GoAheadAndLogIn=1">log in</a>
              before you can comment on or make changes to this bug.
            </fieldset>
          </td>
        </tr> 
      </table>
  </div>
  </td>
  <td>
  </td>
  </tr></table>

  
  <div id="comments"><script src="js/comments.js?1490751600" type="text/javascript">
</script>

<script type="text/javascript">
<!--
  /* Adds the reply text to the 'comment' textarea */
  function replyToComment(id, real_id, name) {
      var prefix = "(In reply to " + name + " from comment #" + id + ")\n";
      var replytext = "";
        /* pre id="comment_name_N" */
        var text_elem = document.getElementById('comment_text_'+id);
        var text = getText(text_elem);
        replytext = prefix + wrapReplyText(text);


      /* <textarea id="comment"> */
      var textarea = document.getElementById('comment');
      if (textarea.value != replytext) {
          textarea.value += replytext;
      }

      textarea.focus();
  } 
//-->
</script>


<!-- This auto-sizes the comments and positions the collapse/expand links 
     to the right. -->
<table class="bz_comment_table">
<tr>
<td>
<div id="c0" class="bz_comment bz_first_comment">

      <div class="bz_first_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c0">Description</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Robert Sesek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2006-09-20 17:25:34 PDT
        </span>

      </div>




<pre class="bz_comment_text">In the web development arena, HttpOnly cookies have become quite the buzz. It basically disallows JavaScript access to a cookie when it is sent with the HttpOnly flag. Currently only IE supports it, but Firefox is looking into it. I think it'd be very helpful to have (especially since PHP 5.2 will now support it--meaning lots of developers will use it). I've linked to Microsoft's spec on the flag.</pre>
    </div>

    <div id="c1" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c1">Comment 1</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alexey Proskuryakov</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2006-09-20 21:51:19 PDT
        </span>

      </div>




<pre class="bz_comment_text">Mozilla bug: &lt;<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=178993">https://bugzilla.mozilla.org/show_bug.cgi?id=178993</a>&gt;.</pre>
    </div>

    <div id="c2" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c2">Comment 2</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alexey Proskuryakov</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2007-12-11 08:28:42 PST
        </span>

      </div>




<pre class="bz_comment_text">This is now implemented in Firefox 2 and Opera 9.5.

This looks like a pretty important feature to me, but we need support from underlying system frameworks to implement it. A request to add such support is tracked by &lt;<a href="rdar://problem/4154226">rdar://problem/4154226</a>&gt;.</pre>
    </div>

    <div id="c3" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c3">Comment 3</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alexey Proskuryakov</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2007-12-11 08:30:33 PST
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=17845" name="attach_17845" title="test case (for http/tests/security)">attachment 17845</a> <a href="attachment.cgi?id=17845&amp;action=edit" title="test case (for http/tests/security)">[details]</a></span>
test case (for http/tests/security)</pre>
    </div>

    <div id="c4" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c4">Comment 4</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">David Kilzer (:ddkilzer)</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2007-12-12 06:19:28 PST
        </span>

      </div>




<pre class="bz_comment_text">&lt;<a href="rdar://problem/5642992">rdar://problem/5642992</a>&gt;</pre>
    </div>

    <div id="c5" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c5">Comment 5</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-03-25 23:28:33 PDT
        </span>

      </div>




<pre class="bz_comment_text">Safari is the last browser to lack HttpOnly support.  I for one think it's a critical need to bring Safari's browser security in line with the rest of the industry.</pre>
    </div>

    <div id="c6" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c6">Comment 6</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-03-27 18:47:04 PDT
        </span>

      </div>




<pre class="bz_comment_text">(from Robert)

The problem isn't entirely with WebKit itself, but with the underlying implementation of HTTP. Safari uses CFNetwork on the mac to parse HTTP headers into objects. Unfortunately, this code isn't public, and it's this code that needs to be changed in order for HTTPOnly to be implemented. While preventing DOM/JavaScript access to cookies needs to be done in the WebKit source, until the underlying network implementation is updated to parse the HTTPOnly flag, there's no way this is possible.

So in short, Apple is blocking this bug from being fixed. Once they update CFNetwork, progress on this patch can be made. Until then, no dice. I recommend you file a bug in RadarWeb if you're interested in getting HTTPOnly/CFNetwork done.
</pre>
    </div>

    <div id="c7" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c7">Comment 7</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alexey Proskuryakov</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-03-27 23:52:03 PDT
        </span>

      </div>




<pre class="bz_comment_text">As mentioned above, there is already a Radar bug filed about this (which was closed as a duplicate of &lt;<a href="rdar://problem/4154226">rdar://problem/4154226</a>&gt;). As always, you are welcome to file another bug, citing your specific use case; please include this original bug number if you decide to file it, to ensure that it is handled right when screening.</pre>
    </div>

    <div id="c8" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c8">Comment 8</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-03-28 01:01:20 PDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=10957#c7">comment #7</a>)
<span class="quote">&gt; As mentioned above, there is already a Radar bug filed about this (which was
&gt; closed as a duplicate of &lt;<a href="rdar://problem/4154226">rdar://problem/4154226</a>&gt;). As always, you are welcome
&gt; to file another bug, citing your specific use case; please include this
&gt; original bug number if you decide to file it, to ensure that it is handled
&gt; right when screening.
&gt; </span >

Alex, my apologies. I'm not certain how to access <a href="rdar://problem/5642992">rdar://problem/5642992</a> - is there an Internet facing URL for this problem, or is rdar for Apple employees only?

</pre>
    </div>

    <div id="c9" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c9">Comment 9</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alexey Proskuryakov</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-03-28 01:36:57 PDT
        </span>

      </div>




<pre class="bz_comment_text">The latter is correct - it's only accessible to Apple folks.</pre>
    </div>

    <div id="c10" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c10">Comment 10</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-03-28 10:11:50 PDT
        </span>

      </div>




<pre class="bz_comment_text">So, a closed source proprietary library is blocking an open source project from adding a key security feature that the rest of the browser industry supports? I smell a rat. It might be at rdar but it sure sounds &quot;off the radar&quot; to me.</pre>
    </div>

    <div id="c11" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c11">Comment 11</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Robert Sesek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-04-01 05:55:32 PDT
        </span>

      </div>




<pre class="bz_comment_text">Apple isn't the only company we're waiting on to get HttpOnly support. Qt/Trolltech is also lacking HttpOnly support in QNetworkCookie. I filed <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED FIXED - [Clipboard API] Sanitize HTML and image data written using clipboard.write"
   href="show_bug.cgi?id=205188">bug #205188</a> with them to get QNetworkCookie::isHttpOnly() added.</pre>
    </div>

    <div id="c12" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c12">Comment 12</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-04-01 22:58:56 PDT
        </span>

      </div>




<pre class="bz_comment_text">Robert, thank you very kindly for taking to time to submit a bug to Qt/Trolltech.</pre>
    </div>

    <div id="c13" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c13">Comment 13</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Robert Sesek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-04-07 06:24:16 PDT
        </span>

      </div>




<pre class="bz_comment_text">Here's the public issue for Qt: <a href="http://trolltech.com/developer/task-tracker/index_html?id=206125&amp;method=entry">http://trolltech.com/developer/task-tracker/index_html?id=206125&amp;method=entry</a></pre>
    </div>

    <div id="c14" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c14">Comment 14</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-05-22 12:33:59 PDT
        </span>

      </div>




<pre class="bz_comment_text">The Java EE Servlet 3.0 spec now includes support for the HttpOnly cookie. This is just more evidence that HttpOnly is becoming a widespread non-MS standard and is worthy of Safari support. </pre>
    </div>

    <div id="c15" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c15">Comment 15</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Darin Adler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-05-22 12:35:37 PDT
        </span>

      </div>




<pre class="bz_comment_text">It should definitely be supported by Safari!

I'm not sure why having a WebKit bug report open for this is helpful, though. It's not something handled by WebKit, and adding this to the CFNetwork library used on Mac OS X won't require any WebKit code changes.</pre>
    </div>

    <div id="c16" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c16">Comment 16</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-05-22 12:40:57 PDT
        </span>

      </div>




<pre class="bz_comment_text">Thank you Darin! I'm grateful that someone at Apple agrees that we need HttpOnly support in Safari. Safari is the last holdout - Opera, IE and FireFox all support HttpOnly!

Will the trolltech issue posted in <a href="show_bug.cgi?id=10957#c13">comment #13</a> cover this issue? Of is there another place we can post a bug?</pre>
    </div>

    <div id="c17" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c17">Comment 17</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Darin Adler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-05-22 12:43:38 PDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=10957#c16">comment #16</a>)
<span class="quote">&gt; Thank you Darin! I'm grateful that someone at Apple agrees that we need
&gt; HttpOnly support in Safari. Safari is the last holdout - Opera, IE and FireFox
&gt; all support HttpOnly!
&gt; 
&gt; Will the trolltech issue posted in <a href="show_bug.cgi?id=10957#c13">comment #13</a> cover this issue? Of is there
&gt; another place we can post a bug?</span >

It's actually <a href="show_bug.cgi?id=10957#c7">comment #7</a> that covers the Safari issue. What Alexey said is exactly right.</pre>
    </div>

    <div id="c18" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c18">Comment 18</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Robert Sesek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-05-22 13:13:56 PDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=10957#c15">comment #15</a>)
<span class="quote">&gt; I'm not sure why having a WebKit bug report open for this is helpful, though.
&gt; It's not something handled by WebKit, and adding this to the CFNetwork library
&gt; used on Mac OS X won't require any WebKit code changes.</span >

I think a code change to the WebCore/platform still needs to be made. Looking at the various CookieJar classes, it looks like it will be up to WebCore to disregard HttpOnly cookies -- they will still be passed to us from the underlying network layer. So I do think this bug needs to be open; however, maybe the component should be changed to WebCore?

(In reply to <a href="show_bug.cgi?id=10957#c16">comment #16</a>)
<span class="quote">&gt; Will the trolltech issue posted in <a href="show_bug.cgi?id=10957#c13">comment #13</a> cover this issue? Of is there
&gt; another place we can post a bug?</span >

Trolltech fixed this for the upcoming v4.5 of Qt. I'm currently working on compiling Qt and testing a patch I have made for the Qt-backed WebKit.</pre>
    </div>

    <div id="c19" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c19">Comment 19</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Darin Adler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-05-22 13:20:33 PDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=10957#c18">comment #18</a>)
<span class="quote">&gt; I think a code change to the WebCore/platform still needs to be made. Looking
&gt; at the various CookieJar classes, it looks like it will be up to WebCore to
&gt; disregard HttpOnly cookies -- they will still be passed to us from the
&gt; underlying network layer.</span >

I see. You're right -- it might turn out that way. Another design would be to have HttpOnly cookies entirely invisible to the old API and add new API that allows clients to see them. I guess we won't know what's required until this gets implemented by the networking layer.
</pre>
    </div>

    <div id="c20" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c20">Comment 20</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Robert Sesek</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-05-22 13:51:33 PDT
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=10957#c19">comment #19</a>)
<span class="quote">&gt; (In reply to <a href="show_bug.cgi?id=10957#c18">comment #18</a>)
&gt; &gt; I think a code change to the WebCore/platform still needs to be made. Looking
&gt; &gt; at the various CookieJar classes, it looks like it will be up to WebCore to
&gt; &gt; disregard HttpOnly cookies -- they will still be passed to us from the
&gt; &gt; underlying network layer.
&gt; 
&gt; I see. You're right -- it might turn out that way. Another design would be to
&gt; have HttpOnly cookies entirely invisible to the old API and add new API that
&gt; allows clients to see them. I guess we won't know what's required until this
&gt; gets implemented by the networking layer.
&gt; </span >

Looking at Qt's implementation in the 4.5 snapshot, you get all the cookies and then have to call isHttpOnly() on QNetworkCookie to figure out whether or not you keep it in the CookieJar.</pre>
    </div>

    <div id="c21" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c21">Comment 21</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alexey Proskuryakov</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-07-07 22:15:57 PDT
        </span>

      </div>




<pre class="bz_comment_text">Something else that will need to be done at WebCore level is filtering out HttpOnly cookies from XMLHttpRequest getResponseHeader results.</pre>
    </div>

    <div id="c22" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c22">Comment 22</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alexey Proskuryakov</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-07-07 22:17:02 PDT
        </span>

      </div>




<pre class="bz_comment_text">See also: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=380418">https://bugzilla.mozilla.org/show_bug.cgi?id=380418</a></pre>
    </div>

    <div id="c23" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c23">Comment 23</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-07-08 12:38:15 PDT
        </span>

      </div>




<pre class="bz_comment_text"><a href="http://www.owasp.org/index.php/HTTPOnly">http://www.owasp.org/index.php/HTTPOnly</a> is also a great reference. Complete implementation includes read and write prevention though document.cookie, as well prevention of reading or writing the session cookie via a XMLHTTPRequest.</pre>
    </div>

    <div id="c24" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c24">Comment 24</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-07-08 12:39:19 PDT
        </span>

      </div>




<pre class="bz_comment_text">Let me correct that:

<a href="http://www.owasp.org/index.php/HTTPOnly">http://www.owasp.org/index.php/HTTPOnly</a> is also a great reference. Complete
implementation includes read and write prevention of HttpOnly cookies though document.cookie, as well as prevention of reading or writing HttpOnly cookies via a XMLHTTPRequest.
</pre>
    </div>

    <div id="c25" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c25">Comment 25</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Darin Adler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-17 09:38:30 PST
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=10957#c24">comment #24</a>)
<span class="quote">&gt; <a href="http://www.owasp.org/index.php/HTTPOnly">http://www.owasp.org/index.php/HTTPOnly</a> is also a great reference. Complete
&gt; implementation includes read and write prevention of HttpOnly cookies though
&gt; document.cookie, as well as prevention of reading or writing HttpOnly cookies
&gt; via a XMLHTTPRequest.</span >

That page doesn't mention prevention of writing HttpOnly cookies vis XMLHttpRequest. Should that really be prevented? Does any browser currently do that?</pre>
    </div>

    <div id="c26" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c26">Comment 26</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Darin Adler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-17 10:19:33 PST
        </span>

      </div>




<pre class="bz_comment_text">Created <span class="bz_obsolete"><a href="attachment.cgi?id=25220&amp;action=diff" name="attach_25220" title="patch; someone needs to help me make more regression tests">attachment 25220</a> <a href="attachment.cgi?id=25220&amp;action=edit" title="patch; someone needs to help me make more regression tests">[details]</a></span>
patch; someone needs to help me make more regression tests</pre>
    </div>

    <div id="c27" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c27">Comment 27</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Darin Adler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-17 10:21:22 PST
        </span>

      </div>




<pre class="bz_comment_text">Loose ends that need to be resolved:

    1) include test cases in the patch
    2) figure out how to compile the CFNetwork version
    3) [optional] add implementations for other platforms that have HTTP-only support in the networking layers (e.g. Qt)</pre>
    </div>

    <div id="c28" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c28">Comment 28</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Darin Adler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-17 12:25:17 PST
        </span>

      </div>




<pre class="bz_comment_text">Created <span class=""><a href="attachment.cgi?id=25222&amp;action=diff" name="attach_25222" title="patch">attachment 25222</a> <a href="attachment.cgi?id=25222&amp;action=edit" title="patch">[details]</a></span>
patch

Windows side is not compiled or tested yet.</pre>
    </div>

    <div id="c29" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c29">Comment 29</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-17 18:03:12 PST
        </span>

      </div>




<pre class="bz_comment_text">Sorry, my mistake.

I was referring to preventing XMLHTTPRequest access to set-cookie and set-cookie2 response headers - for HTTPOnly cookies.

There is no need to prevent write prevention via XMLHTTPRequest response headers. (no such thing) </pre>
    </div>

    <div id="c30" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c30">Comment 30</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-17 18:08:12 PST
        </span>

      </div>




<pre class="bz_comment_text">Actually, the HttpOnly RFC working group says:

When the server sends a Set-Cookie or Set-Cookie2 header with the HTTPOnly flag set, the client should:

(1) Prevent client-side scripts from reading Cookie or Cookie2 values
(2) Prevent client-side scripts from writing Cookie or Cookie2 values
(3) Prevent client-side scripts from reading Set-Cookie or Set-Cookie2 response headers (via XHR)
(4) Prevent client-side scripts from writing Cookie or Cookie2 request headers (via XHR)

Let me get more info and post back asap.</pre>
    </div>

    <div id="c31" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c31">Comment 31</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Adam Barth</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-17 18:47:23 PST
        </span>

      </div>




<pre class="bz_comment_text"><span class="quote">&gt; Actually, the HttpOnly RFC working group says:</span >

It would be useful to test the behavior of Firefox and Internet Explorer to make sure we have identical semantics.

In some sense, it is impossible to prevent writes because the script could always exhaust the browser's cookie store and then add a new non-HTTPOnly versions of the cookie.</pre>
    </div>

    <div id="c32" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c32">Comment 32</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-17 20:03:38 PST
        </span>

      </div>




<pre class="bz_comment_text"><span class="quote">&gt; In some sense, it is impossible to prevent writes because the script could
&gt; always exhaust the browser's cookie store and then add a new non-HTTPOnly
&gt; versions of the cookie.</span >

(From Bill Cory)

That is an interesting problem.  They're referring to the hard limit that governs the number of cookies a site can have stored on the browser -- there's a limit to prevent a malicious site from filling up your hard drive with numerous cookies.  So for most browsers, the limit is 20 cookies max, and when a browser receives cookie #21, it will discard the least used (or oldest?).  This talks a bit about it:

	<a href="http://www.cookiecentral.com/faq/#2.5">http://www.cookiecentral.com/faq/#2.5</a>

So if an attacker sets 20 cookies, they can force the HTTPOnly-protected cookie out of the cookie store, then set a non-HTTPOnly cookie.

It would be tempting to change the browser behavior to NOT bump out existing cookies when the cookie store is full, but that would then allow an attacker to populate the store with bogus cookies, and wouldn't allow the legitimate website to set any additional cookies (a cookie DoS attack of sorts).  Of course, the server could just iterate through the cookies and cause the bogus ones to expire, but it's not ideal.

One solution might be that HTTPOnly cookies can't be bumped out of the cookie store.  Another solution might be that the Cookie header sent to the server somehow identifies the cookies that are HTTPOnly, which would allow the server to detect tampering (or two headers, one for regular cookies and one for HTTPOnly cookies).

Or other ideas?

The spec should probably state that the HTTPOnly flag can only be set by the server via a Set-Cookie or Set-Cookie2 header -- scripts are not allowed to set the flag or modify the incoming Set-Cookie/2 header.</pre>
    </div>

    <div id="c33" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c33">Comment 33</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Adam Barth</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-17 21:47:26 PST
        </span>

      </div>




<pre class="bz_comment_text"><span class="quote">&gt; (From Bill Cory)</span >

I really wouldn't be that concerned about it.  Secure cookies have all the same problems and IMHO are more critical to secure.  Playing with the eviction strategy is very fragile and hard to get right.  Altering the Cookie header is unlikely to succeed (there have already been several failed attempts for Secure cookies).  In any case, it's not clear to me what attack you're trying to prevent.</pre>
    </div>

    <div id="c34" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c34">Comment 34</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alexey Proskuryakov</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-18 06:04:46 PST
        </span>

      </div>




<pre class="bz_comment_text">Comment on <span class=""><a href="attachment.cgi?id=25222&amp;action=diff" name="attach_25222" title="patch">attachment 25222</a> <a href="attachment.cgi?id=25222&amp;action=edit" title="patch">[details]</a></span>
patch

<span class="quote">&gt; -    // &lt;<a href="rdar://problem/5632883">rdar://problem/5632883</a>&gt; On 10.5, NSHTTPCookieStorage would happily store an empty cookie, which would be sent as &quot;Cookie: =&quot;.
&gt; +    // &lt;<a href="rdar://problem/5632883">rdar://problem/5632883</a>&gt; On 10.5, NSHTTPCookieStorage would happily store an empty cookie,</span >

You removed &quot;happily&quot; elsewhere, but not here :-)

<span class="quote">&gt; Index: WebCore/platform/network/soup/CookieJarSoup.h
&gt; +#include &lt;wtf/Platform.h&gt;</span >

Why is this include needed? I think that we rely on cpp files to include config.h, which includes Platform.h.

<span class="quote">&gt; +    return reinterpret_cast&lt;IsHTTPOnlyFunction&gt;(GetProcAddress(GetModuleHandleA(&quot;CFNetwork&quot;), &quot;CFHTTPCookieIsHTTPOnly&quot;));</span >

Just to confirm: weak linking doesn't work with MSVC and/or CFNetwork.dll, correct?

<span class="quote">&gt; +    frame-&gt;domWindow()-&gt;console()-&gt;addMessage(JSMessageSource, ErrorMessageLevel, message, 1, String());</span >

I really wish we could get rid of these source-less error messages everywhere, but this patch is obviously not when it should be done.

<span class="quote">&gt; +    if (isSetCookieHeader(name) &amp;&amp; !document()-&gt;securityOrigin()-&gt;canLoadLocalResources()) {
&gt; +        reportUnsafeUsage(document(), &quot;Refused to get unsafe header \&quot;&quot; + name + &quot;\&quot;&quot;);</span >

I think this could have a comment explaining why we are doing this (which is that we need to filter out HTTPOnly cookies, but that's hard, and Firefox trunk also doesn't try to). Similarly, it may be better to explicitly test for HTTPOnly cookies being hidden from XHR, or at least to explain that some failures of the test are not catastrophic.

r=me, assuming this builds and works on Windows.</pre>
    </div>

    <div id="c35" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c35">Comment 35</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Darin Adler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-18 09:23:31 PST
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=10957#c34">comment #34</a>)
<span class="quote">&gt; You removed &quot;happily&quot; elsewhere, but not here :-)</span >

Will do.

<span class="quote">&gt; &gt; Index: WebCore/platform/network/soup/CookieJarSoup.h
&gt; &gt; +#include &lt;wtf/Platform.h&gt;
&gt; 
&gt; Why is this include needed? I think that we rely on cpp files to include
&gt; config.h, which includes Platform.h.</span >

I guess it's not.

<span class="quote">&gt; &gt; +    return reinterpret_cast&lt;IsHTTPOnlyFunction&gt;(GetProcAddress(GetModuleHandleA(&quot;CFNetwork&quot;), &quot;CFHTTPCookieIsHTTPOnly&quot;));
&gt; 
&gt; Just to confirm: weak linking doesn't work with MSVC and/or CFNetwork.dll,
&gt; correct?</span >

Weak linking might work, but it's more complicated to get that right with project files changes and such, so I'd prefer to do it this way.

<span class="quote">&gt; &gt; +    frame-&gt;domWindow()-&gt;console()-&gt;addMessage(JSMessageSource, ErrorMessageLevel, message, 1, String());
&gt; 
&gt; I really wish we could get rid of these source-less error messages everywhere,
&gt; but this patch is obviously not when it should be done.</span >

I'd love to hear more about how to fix that.

<span class="quote">&gt; &gt; +    if (isSetCookieHeader(name) &amp;&amp; !document()-&gt;securityOrigin()-&gt;canLoadLocalResources()) {
&gt; &gt; +        reportUnsafeUsage(document(), &quot;Refused to get unsafe header \&quot;&quot; + name + &quot;\&quot;&quot;);
&gt; 
&gt; I think this could have a comment explaining why we are doing this (which is
&gt; that we need to filter out HTTPOnly cookies, but that's hard, and Firefox trunk
&gt; also doesn't try to). Similarly, it may be better to explicitly test for
&gt; HTTPOnly cookies being hidden from XHR, or at least to explain that some
&gt; failures of the test are not catastrophic.</span >

I believe that hiding the Set-Cookie header field entirely is a design decision and not just a compromise. I don't think we'd want to undo this later even if someone donated code to filter out the HTTP-only cookies. However, I'm not an expert in this area, so perhaps my belief is wrong.</pre>
    </div>

    <div id="c36" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c36">Comment 36</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Darin Adler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-18 09:27:57 PST
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=10957#c30">comment #30</a>)
<span class="quote">&gt; (1) Prevent client-side scripts from reading Cookie or Cookie2 values
&gt; (2) Prevent client-side scripts from writing Cookie or Cookie2 values</span >

Roughly speaking, I believe these are prevented by the changes my patch makes to the CookieJar implementations for the Foundation and CFNetwork networking layers. Other ports will have to do similar changes.

<span class="quote">&gt; (3) Prevent client-side scripts from reading Set-Cookie or Set-Cookie2 response
&gt; headers (via XHR)</span >

This is prevented by code added to XMLHttpRequest in my patch.

<span class="quote">&gt; (4) Prevent client-side scripts from writing Cookie or Cookie2 request headers
&gt; (via XHR)</span >

This was already impossible with TOT WebKit because those header field names are not on the white list in isSafeRequestHeader.</pre>
    </div>

    <div id="c37" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c37">Comment 37</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Alexey Proskuryakov</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-18 09:32:43 PST
        </span>

      </div>




<pre class="bz_comment_text"><span class="quote">&gt; I believe that hiding the Set-Cookie header field entirely is a design decision
&gt; and not just a compromise. I don't think we'd want to undo this later even if
&gt; someone donated code to filter out the HTTP-only cookies.</span >

What worries me is that nothing (apart from svn log) will speak about the rationale for this behavior - neither code comments, not tests, really. I do not have an opinion on whether this is a final solution (more likely, it is).</pre>
    </div>

    <div id="c38" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c38">Comment 38</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Darin Adler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-18 09:35:02 PST
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=10957#c37">comment #37</a>)
<span class="quote">&gt; What worries me is that nothing (apart from svn log) will speak about the
&gt; rationale for this behavior - neither code comments, not tests, really. I do
&gt; not have an opinion on whether this is a final solution (more likely, it is).</span >

Oh, sorry, I wasn't clear. I do intend to add a comment based on your remarks!</pre>
    </div>

    <div id="c39" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c39">Comment 39</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Darin Adler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-18 10:49:55 PST
        </span>

      </div>




<pre class="bz_comment_text"><a href="http://trac.webkit.org/changeset/38566">http://trac.webkit.org/changeset/38566</a>

We can use new separate bugs to track any problems with the implementation. Testing the Mac port and CFNetwork-based Windows port implementation will be limited to people with the new CFNetwork version on their computer.</pre>
    </div>

    <div id="c40" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c40">Comment 40</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-11-18 21:15:10 PST
        </span>

      </div>




<pre class="bz_comment_text"><span class="quote">&gt; In any case, it's not clear to me what attack you're trying to
&gt; prevent.</span >

(From Bil Cory)

Cookie eviction allows an attacker to remove legitimate cookies, it also allows an attacker to replace legitimate cookies with their own -- most useful for session fixation attacks.

If only a server can create HTTPOnly cookies, and HTTPOnly cookies can never be evicted, then it would prevent a cookie eviction attack.  The cookie will still expire at some point, or the server can update the cookie to remove the HTTPOnly flag, and/or set the cookie to immediately expire, so control over the cookie is kept with the server.</pre>
    </div>

    <div id="c41" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c41">Comment 41</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-12-21 05:14:46 PST
        </span>

      </div>




<pre class="bz_comment_text">Can you please make sure your patch includes protection from both Set-Cookie and Set-Cookie2 per the suggestion of the HTTPOnly working group document, entry A-2? <a href="http://docs.google.com/View?docid=dxxqgkd_0cvcqhsdw">http://docs.google.com/View?docid=dxxqgkd_0cvcqhsdw</a>

-- (WebCore::XMLHttpRequest::getAllResponseHeaders): Hide Set-Cookie headers from
 28 clients that don't have local-resource privileges.
++ (WebCore::XMLHttpRequest::getAllResponseHeaders): Hide Set-Cookie and Set-Cookie2 headers, in a case insensitive way, from 28 clients that don't have local-resource privileges.</pre>
    </div>

    <div id="c42" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c42">Comment 42</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Darin Adler</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-12-21 10:01:54 PST
        </span>

      </div>




<pre class="bz_comment_text">(In reply to <a href="show_bug.cgi?id=10957#c41">comment #41</a>)
<span class="quote">&gt; Can you please make sure your patch includes protection from both Set-Cookie
&gt; and Set-Cookie2 per the suggestion of the HTTPOnly working group document,
&gt; entry A-2?</span >

Jim, I'm not sure what &quot;make sure&quot; means in your request. The patch does include what you're asking for. The patch is &lt;<a href="http://trac.webkit.org/changeset/38566">http://trac.webkit.org/changeset/38566</a>&gt;. A relevant function is:

    static bool isSetCookieHeader(const String&amp; name)
    {
        return equalIgnoringCase(name, &quot;set-cookie&quot;) || equalIgnoringCase(name, &quot;set-cookie2&quot;); 
    } 

Is there something specific you're worried about?</pre>
    </div>

    <div id="c43" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c43">Comment 43</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Jim Manico</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2008-12-21 23:12:44 PST
        </span>

      </div>




<pre class="bz_comment_text"><span class="quote">&gt; Jim, I'm not sure what &quot;make sure&quot; means in your request.</span >

The code you submitted covers that request. I was looking at what I think are just the function comments, which did not seem to address set-cookie2 

(WebCore::XMLHttpRequest::getAllResponseHeaders): Hide Set-Cookie headers
from 28 clients that don't have local-resource privileges.

Sorry for the hassle.

</pre>
    </div>

    <div id="c44" class="bz_comment">

      <div class="bz_comment_head">


        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=10957#c44">Comment 44</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Michael Gilbert</span>
</span>
        </span>

        <span class="bz_comment_user_images">
        </span>

        <span class="bz_comment_time">
          2009-04-26 15:24:18 PDT
        </span>

      </div>




<pre class="bz_comment_text">Hello, we are looking at whether we need to adopt these patches in debian stable, which includes webkit 1.0.1 dated 2008-06-15; well before revision 38566.  Looking at the code, it looks like these fixes primarily apply to the windows- and mac-specific cookie handling with some clean-up of the libsoup code (but nothing soup-related specifically fixed).

Note that the version of webkit in stable does not make use of libsoup, so does that mean that it is falling back on the windows-specific cookie handling?  Note also that this version appears to pass the regression test attached.

Also, could libsoup itself be vulnerable to these problems, and if so have there any patches been issued?

Please let me know if you think that we need to adopt these patches.</pre>
    </div>


  

</td>
<td>
</td>
</tr></table>
  </div>
        

</form>

<hr>
<ul class="related_actions">
    <li><a href="show_bug.cgi?format=multiple&amp;id=10957">Format For Printing</a></li>
    <li>&nbsp;-&nbsp;<a href="show_bug.cgi?ctype=xml&amp;id=10957">XML</a></li>
    <li>&nbsp;-&nbsp;<a href="enter_bug.cgi?cloned_bug_id=10957">Clone This Bug</a></li>
    
    <li>&nbsp;-&nbsp;<a href="#">Top of page </a></li>
    </ul>

<br>
</div>

    <div id="footer">
      <div class="intro"></div>
<ul id="useful-links">
  <li id="links-actions"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_bottom" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_bottom" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_bottom"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li>
      <span class="separator">| </span>
        <a href="request.cgi">Requests</a></li>


  <li>
        <span class="separator">| </span>
        <a href="https://bugzilla.readthedocs.org/en/5.0/using/understanding.html" target="_blank">Help</a>
      </li>
    
      <li id="new_account_container_bottom">
        <span class="separator">| </span>
        <a href="createaccount.cgi">New&nbsp;Account</a>
      </li>

    <li id="mini_login_container_bottom">
  <span class="separator">| </span>
  <a id="login_link_bottom" href="show_bug.cgi?id=10957&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_bottom')">Log In</a>

  <form action="show_bug.cgi?id=10957" method="POST"
        class="mini_login bz_default_hidden"
        id="mini_login_bottom">
    <input id="Bugzilla_login_bottom" required
           name="Bugzilla_login" class="bz_login"
        type="email" placeholder="Email Address">
    <input class="bz_password" name="Bugzilla_password" type="password"
           id="Bugzilla_password_bottom" required
           placeholder="Password">
    <input type="hidden" name="Bugzilla_login_token"
           value="">
    <input type="submit" name="GoAheadAndLogIn" value="Log in"
            id="log_in_bottom">
    <a href="#" onclick="return hide_mini_login_form('_bottom')">[x]</a>
  </form>
</li>


  <li id="forgot_container_bottom">
    <span class="separator">| </span>
    <a id="forgot_link_bottom" href="show_bug.cgi?id=10957&amp;GoAheadAndLogIn=1#forgot"
       onclick="return show_forgot_form('_bottom')">Forgot Password</a>
    <form action="token.cgi" method="post" id="forgot_form_bottom"
          class="mini_forgot bz_default_hidden">
      <label for="login_bottom">Login:</label>
      <input name="loginname" size="20" id="login_bottom" required
          type="email" placeholder="Your Email Address">
      <input id="forgot_button_bottom" value="Reset Password" type="submit">
      <input type="hidden" name="a" value="reqpw">
      <input type="hidden" id="token_bottom" name="token"
             value="1635620797-uhyjYLyS3dOIQNQgfecagNJJH_Iz39xmEuE-oSGrJwE">
      <a href="#" onclick="return hide_forgot_form('_bottom')">[x]</a>
    </form>
  </li>
</ul>
  </li>

  




  
</ul>

      <div class="outro"></div>
    </div>

    <!-- WEBKIT_CHANGES -->
    <script defer src="/committers-autocomplete.js"></script>
  </body>
</html>