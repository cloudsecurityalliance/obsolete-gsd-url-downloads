<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>Missing TLS certificate verification in Faye &#8211; The If Works</title>

    <link rel="stylesheet" type="text/css" media="all" href="/assets/css/publish.css">
    <link rel="stylesheet" type="text/css" media="all" href="/assets/css/pygments.css">
    <link rel="stylesheet" type="text/css" media="all" href="/assets/css/overrides.css">
    <link rel="alternate" type="application/rss+xml" title="The If Works &raquo; Feed" href="http://feeds.feedburner.com/theifworks">
    
      <link rel="prev" title="ReDoS vulnerability in websocket-extensions" href="/2020/06/02/redos-vulnerability-in-websocket-extensions/">
    
    
      <link rel="next" title="Reading and writing, part 1: locations and locks" href="/2020/09/28/reading-and-writing-part-1/">
    
    <link rel="canonical" href="/2020/07/31/missing-tls-verification-in-faye/">
  </head>

  <body class="single single-post single-format-standard">
    <div id="page" class="hfeed site">

      <header id="masthead" class="site-header" role="banner">
        <a class="site-logo" href="https://blog.jcoglan.com/" title="The If Works" rel="home">
          <img src="/assets/images/drawing.jpg" height="100" width="100" alt="The If Works">
        </a>

        <hgroup>
          <h1 class="site-title"><a href="https://blog.jcoglan.com/" title="The If Works" rel="home">The If Works</a></h1>
          <h2 class="site-description">by James Coglan</h2>
        </hgroup>

        <nav role="navigation" class="site-navigation main-navigation">
          <h1 class="assistive-text">Menu</h1>
          <div class="assistive-text skip-link"><a href="#content" title="Skip to content">Skip to content</a></div>
          <div class="menu">
            <ul>
              <li class="page_item"><a href="/software">Open source</a></li>
              <li class="page_item"><a href="/books">Books</a></li>
              <li class="page_item"><a href="/talks">Conference talks</a></li>
              <li class="page_item"><a href="/podcasts">Podcast interviews</a></li>
            </ul>
          </div>
        </nav>
      </header>

      <div id="main" class="site-main">
        <div id="primary" class="content-area">
          <div id="content" class="site-content" role="main">

            <article class="post type-post status-publish format-standard hentry">
  <header class="entry-header">
    <h1 class="entry-title"><p>Missing TLS certificate verification in Faye</p>
</h1>
  </header>

  <div class="entry-content">
    <p>The <code class="language-plaintext highlighter-rouge">Faye::WebSocket::Client</code> class uses the <a href="https://www.rubydoc.info/github/eventmachine/eventmachine/EventMachine/Connection:start_tls"><code class="language-plaintext highlighter-rouge">EM::Connection#start_tls</code></a>
method in <a href="https://rubygems.org/gems/eventmachine">EventMachine</a> to implement the TLS handshake whenever a <code class="language-plaintext highlighter-rouge">wss:</code> URL
is used for the connection. This method does not implement certificate
verification by default, meaning that it does not check that the server presents
a valid and trusted TLS certificate for the expected hostname. That means that
any <code class="language-plaintext highlighter-rouge">wss:</code> connection made using this library is vulnerable to a
man-in-the-middle attack, since it does not confirm the identity of the server
it is connected to.</p>

<p>This has been a requested feature in EventMachine for many years now; see for
example <a href="https://github.com/eventmachine/eventmachine/issues/275">#275</a>, <a href="https://github.com/eventmachine/eventmachine/pull/378">#378</a>, and <a href="https://github.com/eventmachine/eventmachine/issues/814">#814</a>. In June 2020, <a href="https://rubygems.org/gems/em-http-request">em-http-request</a>
published an <a href="https://securitylab.github.com/advisories/GHSL-2020-094-igrigorik-em-http-request">advisory</a> related to this problem and fixed it by <a href="https://github.com/igrigorik/em-http-request/pull/340">implementing
TLS verification</a> in their own codebase; although EventMachine does not
implement certificate verification itself, it provides an extension point for
the caller to implement it, called <a href="https://www.rubydoc.info/github/eventmachine/eventmachine/EventMachine/Connection:ssl_verify_peer"><code class="language-plaintext highlighter-rouge">ssl_verify_peer</code></a>. Based on this
implementation, we have incorporated similar functionality into <a href="https://rubygems.org/gems/faye-websocket">faye-websocket
for Ruby</a>, such that we use the <code class="language-plaintext highlighter-rouge">OpenSSL</code> module to perform two checks:</p>

<ul>
  <li>The chain of certificates presented by the server is valid and ultimately
trusted by your root certificate set – either your system default root
certificates, or a set provided at runtime</li>
  <li>The final certificate presented by the server is valid for the hostname used
in the request URI; if the connection is made via a proxy we use the hostname
from the request, not the proxy’s hostname</li>
</ul>

<p>After implementing verification in v1.1.6, em-http-request has elected to leave
the <code class="language-plaintext highlighter-rouge">:verify_peer</code> option switched off by default. We have decided to <em>enable</em>
this option by default in faye-websocket, but are publishing a minor release
with added functionality for configuring it. We are mindful of the fact that
this may break existing programs, but we consider it much more important that
all clients have TLS verification turned on by default. A client that is not
carrying out verification is either:</p>

<ul>
  <li>talking to the expected server, and will not break under this change</li>
  <li>being attacked, and would benefit from being alerted to this fact</li>
  <li>deliberately talking to a server that would be rejected by verification</li>
</ul>

<p>The latter case includes situations like talking to a non-public server using a
self-signed certificate. We consider this use case to be “working by accident”,
rather than functionality that was actively supported, and it should be properly
and explicitly supported instead. To that end, we have added two new options to
the <code class="language-plaintext highlighter-rouge">Faye::WebSocket::Client</code> constructor: <code class="language-plaintext highlighter-rouge">tls.root_cert_file</code>, and
<code class="language-plaintext highlighter-rouge">tls.verify_peer</code>.</p>

<p>The <code class="language-plaintext highlighter-rouge">:root_cert_file</code> option lets you provide a different set of root
certificates in situations where you don’t want to use your system’s default
root certificates to verify the remote host. It should be a path or an array of
paths identifying the certificates to use instead of the defaults.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">client</span> <span class="o">=</span> <span class="no">Faye</span><span class="o">::</span><span class="no">WebSocket</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'wss://example.com/'</span><span class="p">,</span> <span class="p">[],</span> <span class="ss">tls: </span><span class="p">{</span>
  <span class="ss">root_cert_file: </span><span class="s1">'path/to/certificate.pem'</span>
<span class="p">})</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">:verify_peer</code> option lets you turn verification off entirely. This should
be a last resort and we recommend using the <code class="language-plaintext highlighter-rouge">:root_cert_file</code> option if
possible.</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">client</span> <span class="o">=</span> <span class="no">Faye</span><span class="o">::</span><span class="no">WebSocket</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'wss://example.com/'</span><span class="p">,</span> <span class="p">[],</span> <span class="ss">tls: </span><span class="p">{</span>
  <span class="ss">verify_peer: </span><span class="kp">false</span>
<span class="p">})</span>
</code></pre></div></div>

<p>To get the new behaviour, please upgrade to v0.11.0 of the <a href="https://rubygems.org/gems/faye-websocket">Rubygems
package</a>. There are, unfortunately, no workarounds for this issue, as you
cannot enable <code class="language-plaintext highlighter-rouge">:verify_peer</code> in EventMachine unless the calling library contains
an implementation of <code class="language-plaintext highlighter-rouge">ssl_verify_peer</code> that actually checks the server’s
certificates.</p>

<p>The messaging product <a href="https://faye.jcoglan.com/">Faye</a> uses em-http-request and faye-websocket in the
Ruby version of its client. The first request a client makes is always sent via
normal HTTP, but later messages may be sent via WebSocket. Therefore it is
vulnerable to the same problem that these underlying libraries are, and we need
both libraries to support TLS verification before Faye can claim to do the same.
Your client would still be insecure if its initial HTTPS request was verified,
but later WebSocket connections were not.</p>

<p>Now that both libraries are fixed, we are releasing Faye v1.4.0, which enables
verification by default and provides a way to opt out of it:</p>

<div class="language-rb highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">client</span> <span class="o">=</span> <span class="no">Faye</span><span class="o">::</span><span class="no">Client</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s1">'https://example.com/'</span><span class="p">,</span> <span class="ss">tls: </span><span class="p">{</span> <span class="ss">verify_peer: </span><span class="kp">false</span> <span class="p">})</span>
</code></pre></div></div>

<p>Unfortunately we can’t offer an equivalent of the <code class="language-plaintext highlighter-rouge">:root_cert_file</code> option,
because this is only supported by faye-websocket, not em-http-request. If you
need to talk to servers whose certificates are not recognised by your default
root certificates, then you need to add its certificate (or another one that can
verify it) to your system’s root set.</p>

<p>The same functionality is now supported in the Node.js version, with a <code class="language-plaintext highlighter-rouge">tls</code>
option whose values will be passed to the <code class="language-plaintext highlighter-rouge">https</code> and <code class="language-plaintext highlighter-rouge">tls</code> modules as
appropriate when making connections. For example, you can provide your own CA
certificate:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">faye</span><span class="p">.</span><span class="nx">Client</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://example.com/</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">tls</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">ca</span><span class="p">:</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="dl">'</span><span class="s1">path/to/certificate.pem</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p>For further background information on this issue, please see <a href="https://github.com/faye/faye/issues/524">faye#524</a> and
<a href="https://github.com/faye/faye-websocket-ruby/pull/129">faye-websocket#129</a>. We would like to thank <a href="https://github.com/SpComb">Tero Marttila</a> and <a href="https://twitter.com/DanielMorsing">Daniel
Morsing</a> for providing invaluable assistance and feedback on this issue.</p>


  </div>

  <footer class="entry-meta">
    
      Posted on
      <a href="/2020/07/31/missing-tls-verification-in-faye/" title="12:00 AM" rel="bookmark"><time class="entry-date" datetime="2020-07-31T00:00:00+00:00" pubdate>July 31, 2020</time></a>.
    
    This entry was posted in
    
      <a href="/category/Faye/" title="View all posts in Faye" rel="category tag">Faye</a>,
    
      <a href="/category/Ruby/" title="View all posts in Ruby" rel="category tag">Ruby</a>.
    
    Bookmark the <a href="/2020/07/31/missing-tls-verification-in-faye/" title="Permalink to Missing TLS certificate verification in Faye" rel="bookmark">permalink</a>.
  </footer>
</article>

<nav role="navigation" id="nav-below" class="site-navigation post-navigation">
  <h1 class="assistive-text">Post navigation</h1>
  
    <div class="nav-previous"><a href="/2020/06/02/redos-vulnerability-in-websocket-extensions/" rel="prev"><span class="meta-nav">&larr;</span> ReDoS vulnerability in websocket-extensions</a></div>
  
  
    <div class="nav-next"><a href="/2020/09/28/reading-and-writing-part-1/" rel="next"><span class="meta-nav">&rarr;</span> Reading and writing, part 1: locations and locks</a></div>
  
</nav>


          </div>
        </div>

        <div id="secondary" class="widget-area" role="complementary">
  <a href="https://shop.jcoglan.com/building-git/">
    <img style="margin-top: 2em; width: 60%" src="/assets/images/bg.png"><br>
    Buy my book, <i>Building Git</i>
  </a>
</div>

      </div>

      <footer id="colophon" class="site-footer" role="contentinfo">
        <div class="site-info">
          Theme: Publish by <a href="http://kovshenin.com/" rel="designer">Konstantin Kovshenin</a>.
        </div>
      </footer>

    </div>

  </body>
</html>
