<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
                      "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en">
  <head>
    <title>Bug 1033055 &ndash; AUDIT-STALE: CVE-2018-10361: ktexteditor: new DBus service</title>

      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">


<link rel="Top" href="https://bugzilla.suse.com/">

  


  
    <link rel="Show" title="Dependency Tree"
          href="showdependencytree.cgi?id=1033055&amp;hide_resolved=1">
      <link rel="Show" title="Dependency Graph"
            href="showdependencygraph.cgi?id=1033055">

      <link rel="Show" title="Bug Activity"
            href="show_activity.cgi?id=1033055">
      <link rel="Show" title="Printer-Friendly Version"
            href="show_bug.cgi?format=multiple&amp;id=1033055">



    
    <link href="skins/standard/global.css?1411227340"
          rel="alternate stylesheet" 
          title="Classic"><link href="js/yui/assets/skins/sam/autocomplete.css?1411227331" rel="stylesheet"
            type="text/css" ><link href="js/yui/assets/skins/sam/calendar.css?1411227331" rel="stylesheet"
            type="text/css" ><link href="skins/standard/global.css?1411227340" rel="stylesheet"
            type="text/css" ><link href="skins/standard/show_bug.css?1416528352" rel="stylesheet"
            type="text/css" ><link href="extensions/Voting/web/style.css?1411227348" rel="stylesheet"
            type="text/css" ><!--[if lte IE 7]>
      


      <link href="skins/standard/IE-fixes.css?1411227340" rel="stylesheet"
            type="text/css" >
<![endif]-->

    <link href="skins/contrib/SUSE/global.css?1411227340" rel="stylesheet"
            type="text/css" 
          title="SUSE">

    

    

    
<script type="text/javascript" src="js/yui/yahoo-dom-event/yahoo-dom-event.js?1411227335"></script><script type="text/javascript" src="js/yui/cookie/cookie-min.js?1411227333"></script><script type="text/javascript" src="js/yui/datasource/datasource-min.js?1411227329"></script><script type="text/javascript" src="js/yui/connection/connection-min.js?1411227329"></script><script type="text/javascript" src="js/yui/json/json-min.js?1411227333"></script><script type="text/javascript" src="js/yui/autocomplete/autocomplete-min.js?1411227334"></script><script type="text/javascript" src="js/yui/calendar/calendar-min.js?1411227335"></script><script type="text/javascript" src="js/global.js?1411227336"></script>

    <script type="text/javascript">
    <!--
        YAHOO.namespace('bugzilla');
        YAHOO.util.Event.addListener = function (el, sType, fn, obj, overrideContext) {
               if ( ("onpagehide" in window || YAHOO.env.ua.gecko) && sType === "unload") { sType = "pagehide"; };
               var capture = ((sType == "focusin" || sType == "focusout") && !YAHOO.env.ua.ie) ? true : false;
               return this._addListener(el, this._getType(sType), fn, obj, overrideContext, capture);
         };
        if ( "onpagehide" in window || YAHOO.env.ua.gecko) {
            YAHOO.util.Event._simpleRemove(window, "unload", 
                                           YAHOO.util.Event._unload);
        }
        
        function unhide_language_selector() { 
            YAHOO.util.Dom.removeClass(
                'lang_links_container', 'bz_default_hidden'
            ); 
        } 
        YAHOO.util.Event.onDOMReady(unhide_language_selector);

        
        var BUGZILLA = {
            param: {
                cookiepath: '\/',
                maxusermatches: 1
            },
            constant: {
                COMMENT_COLS: 80
            },
            string: {
                

                attach_desc_required:
                    'You must enter a Description for this attachment.',
                component_required:
                    'You must select a Component for this bug.',
                description_required:
                    'You must enter a Description for this bug.',
                short_desc_required:
                    'You must enter a Summary for this bug.',
                version_required:
                    'You must select a Version for this bug.'
            }
        };

    if (history && history.replaceState) {
      if(!document.location.href.match(/show_bug\.cgi/)) {
        history.replaceState( null, 
                             "Bug 1033055 – AUDIT-STALE: CVE-2018-10361: ktexteditor: new DBus service",  
                             "show_bug.cgi?id=1033055" );
        document.title = "Bug 1033055 – AUDIT-STALE: CVE-2018-10361: ktexteditor: new DBus service";
      }
      if (document.location.href.match(/show_bug\.cgi\?.*list_id=/)) {
        var href = document.location.href;
        href = href.replace(/[\?&]+list_id=(\d+|cookie)/, '');
        history.replaceState(null, "Bug 1033055 – AUDIT-STALE: CVE-2018-10361: ktexteditor: new DBus service", href);
      }
    }
    YAHOO.util.Event.onDOMReady(function() {
      initDirtyFieldTracking();
    });
    // -->
    </script>
<script type="text/javascript" src="js/util.js?1411227336"></script><script type="text/javascript" src="js/field.js?1414105521"></script>

    

    
    <link rel="search" type="application/opensearchdescription+xml"
                       title="Bugzilla" href="./search_plugin.cgi">
    <link rel="shortcut icon" href="images/favicon.ico" ><link href="extensions/Testopia/css/testopia.css" rel="stylesheet" type="text/css">
    <link href="extensions/Testopia/extjs/examples/ux/css/RowEditor.css" rel="stylesheet" type="text/css"  />
    <script type="text/javascript">
        Testopia_user = {login: "", id: 0};
        DEFAULT_CASE_STATUS = 'CONFIRMED';
    </script>
  </head>



  <body onload=""
        class="bugzilla-suse-com bz_bug bz_status_REOPENED bz_product_SUSE_Security_Incidents bz_component_Audits bz_bug_1033055 yui-skin-sam">



<div id="header">
<div id="banner">
  </div>

<!--div id="tmp_warning_wnd" style="
    position:fixed; 
    color:red; 
    font-size:20px; 
    top:50px; 
    left:10%; 
    right:10%; 
    padding:1em;
    background-color:#ffffff;
    border:3px solid red;
    z-index:9999;
    text-align:center;">
  This Bugzilla is for TESTING ONLY. All new bugs and comments WILL BE LOST. Use <a href="https://bugzilla.suse.com">bugzilla.suse.com</a> instead.
  <button style="
      background:none;
      border:0;
      box-shadow:none;
      color:red;
      text-shadow:none;
      position:absolute;
      right:0;
      top:0;" onclick="document.getElementById('tmp_warning_wnd').style.display='none';">[X]</button>
</div-->

<table border="0" cellspacing="0" cellpadding="0" id="titles">
<tr>
    <td id="title">
      <p>Bugzilla &ndash; Bug&nbsp;1033055</p>
    </td>

    <td id="subtitle">
      <p class="subheader">AUDIT-STALE: CVE-2018-10361: ktexteditor: new DBus service</p>
    </td>

    <td id="information">
      <p class="header_addl_info">Last modified: 2021-06-23 10:20:29 UTC</p>
    </td>
</tr>
</table>

<table id="lang_links_container" cellpadding="0" cellspacing="0"
       class="bz_default_hidden"><tr><td>
</td></tr></table>
<ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_top" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_top");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_top" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_top"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li>
      <span class="separator">| </span>
        <a href="request.cgi">Requests</a></li>

  <li>
        <span class="separator">| </span>
        <a href="docs/en/html/bug_page.html" target="_blank">Help</a>
      </li>
    

    <li id="mini_login_container_top">
  <span class="separator">| </span>
  <!--a id="login_link_top" href="show_bug.cgi?id=1033055&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_top')">Log In</a-->
  <a id="login_link_top" href="show_bug.cgi?id=1033055&amp;GoAheadAndLogIn=1">Log In</a>


  <form action="show_bug.cgi?id=1033055" method="POST" 
        class="mini_login bz_default_hidden"
        id="mini_login_top"
        onsubmit="return check_mini_login_fields( '_top' );"
  >
    <input id="Bugzilla_login_top" 
           class="bz_login"
           name="Bugzilla_login"
           title="Login"
           onfocus="mini_login_on_focus('_top')"
    >
    <input class="bz_password" 
           id="Bugzilla_password_top" 
           name="Bugzilla_password"
           type="password"
           title="Password"
    >
    <input class="bz_password bz_default_hidden bz_mini_login_help" type="text" 
           id="Bugzilla_password_dummy_top" value="password"
           title="Password"
           onfocus="mini_login_on_focus('_top')"
    >
    <input type="submit" name="GoAheadAndLogIn" value="Log in" 
            id="log_in_top">
    <script type="text/javascript">
      mini_login_constants = {
          "login" : "login",
          "warning" : "You must set the login and password before logging in."
      };
      
      if (YAHOO.env.ua.gecko || YAHOO.env.ua.ie || YAHOO.env.ua.opera) {
          YAHOO.util.Event.onDOMReady(function() {
              init_mini_login_form('_top');
          });
      }
      else {
          YAHOO.util.Event.on(window, 'load', function () {
              window.setTimeout(function() {
                  init_mini_login_form('_top');
              }, 200);
          });
    }
    </script>
    <a href="#" onclick="return hide_mini_login_form('_top')">[x]</a>
  </form>
</li>
<li id="forgot_container_top">
  <span class="separator">| </span>
  <a id="forgot_link_top" href="https://idp-portal.suse.com/univention/self-service/#page=passwordreset">Forgot Password</a>
</li>
</ul>
</div> 

<div id="bugzilla-body">

<div class="navigation">
  
  <i><font color="#777777">First</font></i>
  <i><font color="#777777">Last</font></i>
  <i><font color="#777777">Prev</font></i>
  <i><font color="#777777">Next</font></i>
  &nbsp;&nbsp;
  <i><font color="#777777">This bug is not in your last
    search results.</font></i>
</div>
<script type="text/javascript">
<!--

//-->
</script>

<form name="changeform" id="changeform" method="post" action="process_bug.cgi">

  <input type="hidden" name="delta_ts" value="2021-06-23 10:20:29">
  <input type="hidden" name="longdesclength" value="35">
  <input type="hidden" name="id" value="1033055">
  <input type="hidden" name="token" value="1635630178-Gfxrp7yqGMBsHLs05qsUyQBZYlI3PpO-x-bcvlzgW0o">
<div class="bz_alias_short_desc_container edit_form">
     <a href="show_bug.cgi?id=1033055"><b>Bug&nbsp;1033055</b></a> -<span id="summary_alias_container" class="bz_default_hidden">
        (<span id="alias_nonedit_display">CVE-2018-10361</span>) 
      <span id="short_desc_nonedit_display">AUDIT-STALE: CVE-2018-10361: ktexteditor: new DBus service</span>
     </span>  
       
    <div id="summary_alias_input">
      <table id="summary"> 
        <tr>
            <td colspan="2">(CVE-2018-10361)
          </td>
        </tr>
        
        <tr><th class="field_label "
    id="field_label_short_desc">

    <label for="short_desc" accesskey="s">

  <a 
      title="The bug summary is a short sentence which succinctly describes what the bug is about."
      class="field_help_link"
      href="page.cgi?id=glossary.html#short_desc"
  >Summary:</a>
</label>
</th>
          <td>AUDIT-STALE: CVE-2018-10361: ktexteditor: new DBus service
          </td>
        </tr>
      </table>
    </div>
  </div>
  <script type="text/javascript">
    hideAliasAndSummary('AUDIT-STALE: CVE-2018-10361: ktexteditor: new DBus service', 'CVE-2018-10361');
  </script>
  <table class="edit_form">
    <tr>
      
      <td id="bz_show_bug_column_1" class="bz_show_bug_column">     
        <table>
          <tr>
    <th class="field_label">
      <a href="page.cgi?id=status_resolution_matrix.html">Status</a>:
    </th>
    <td id="bz_field_status">
      <span id="static_bug_status">REOPENED
      </span>
    </td>
  </tr>

          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          <tr><th class="field_label "
    id="field_label_classification">


  <a 
      title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation."
      class="field_help_link"
      href="page.cgi?id=glossary.html#classification"
  >Classification:</a>

</th>
  <td class="field_value "
      id="field_container_classification" >Novell Products</td>
      </tr>

    
    
    
    <tr><th class="field_label "
    id="field_label_product">


  <a 
      title="Bugs are categorised into Products and Components. Select a Classification to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi"
  >Product:</a>

</th>
  <td class="field_value "
      id="field_container_product" >SUSE Security Incidents</td>
    </tr>

    
    <tr class="bz_default_hidden"><th class="field_label "
    id="field_label_classification">


  <a 
      title="Bugs are categorised into Classifications, Products and Components. classifications is the top-level categorisation."
      class="field_help_link"
      href="page.cgi?id=glossary.html#classification"
  >Classification:</a>

</th>
  <td class="field_value "
      id="field_container_classification" >Novell Products</td>
    </tr>
        
    
    
    <tr><th class="field_label "
    id="field_label_component">


  <a 
      title="Components are second-level categories; each belongs to a particular Product. Select a Product to narrow down this list."
      class="field_help_link"
      href="describecomponents.cgi?product=SUSE Security Incidents"
  >Component:</a>

</th>
  <td class="field_value "
      id="field_container_component" >Audits</td>
    </tr>
    <tr><th class="field_label "
    id="field_label_version">

    <label for="version">

  <a 
      title="The version field defines the version of the software the bug was found in."
      class="field_help_link"
      href="page.cgi?id=glossary.html#version"
  >Version:</a>
</label>
</th>
        <td>unspecified
  </td>
    </tr>
        
    
        
    <tr><th class="field_label "
    id="field_label_rep_platform">

    <label for="rep_platform" accesskey="h">

  <a 
      title="The hardware platform the bug was observed on. Note: When searching, selecting the option &quot;All&quot; only finds bugs whose value for this field is literally the word &quot;All&quot;."
      class="field_help_link"
      href="page.cgi?id=glossary.html#rep_platform"
  >Hardware:</a>
</label>
</th>
      <td class="field_value">Other
       All
      </td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          
          <tr>
      <th class="field_label">
        <label for="priority">
          <a href="page.cgi?id=glossary.html#priority">Priority</a></label>:
      </th>
      <td>P4 - Low
        <label for="severity">
          <b>Severity</b></label>:
       Minor
      </td>
    </tr>

      <tr>
        <th class="field_label">
          <label for="target_milestone">
            <a href="page.cgi?id=glossary.html#target_milestone">
            Target&nbsp;Milestone</a></label>:
        </th><td>unspecified
  </td>
      </tr>            
          
          <tr>
      <th class="field_label">
        <a href="page.cgi?id=glossary.html#assigned_to">Assigned To</a>:
      </th>
      <td><span class="vcard"><span class="fn">Luca Beltrame</span>
</span>
      </td>
    </tr>

    <tr><th class="field_label "
    id="field_label_qa_contact">

    <label for="qa_contact" accesskey="q">

  <a 
      title="The person responsible for confirming this bug if it is unconfirmed, and for verifying the fix once the bug has been resolved."
      class="field_help_link"
      href="page.cgi?id=glossary.html#qa_contact"
  >QA Contact:</a>
</label>
</th>
      <td><span class="vcard"><span class="fn">Security Team bot</span>
</span>
      </td>
    </tr>
    <script type="text/javascript">
      assignToDefaultOnChange(['product', 'component'],
        'security-team\x40suse.de',
        'security-team\x40suse.de');
    </script>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
          <tr><th class="field_label "
    id="field_label_bug_file_loc">

    <label for="bug_file_loc" accesskey="u">

  <a 
      title="Bugs can have a URL associated with them - for example, a pointer to a web site where the problem is seen."
      class="field_help_link"
      href="page.cgi?id=glossary.html#bug_file_loc"
  >URL:</a>
</label>
</th>
    <td>
      <span id="bz_url_input_area">
      </span>
    </td>
  </tr>
  
    <tr><th class="field_label "
    id="field_label_status_whiteboard">

    <label for="status_whiteboard" accesskey="w">

  <a 
      title="Each bug has a free-form single line text entry box for adding tags and status information."
      class="field_help_link"
      href="page.cgi?id=glossary.html#status_whiteboard"
  >Whiteboard:</a>
</label>
</th><td colspan="2">
        <span title=" CVSSv2:NVD:CVE-2018-10361:7.2:(AV:L/AC:L/Au:N/C:C/I:C/A:C) CVSSv3:RedHat:CVE-2018-10361:6.7:(AV:L/AC:H/PR:L/UI:R/S:U/C:H/I:H/A:H)"> CVSSv2:NVD:CVE-2018-10361:7.2:(AV:L/...
        </span>  
  </td>
    </tr>
  
    <tr>
      <th class="field_label">
        <label for="keywords" accesskey="k">
          <a href="describekeywords.cgi"><u>K</u>eywords</a></label>:
      </th>
      <td class="field_value" colspan="2">
      </td>
    </tr>
          <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>

          
<tr><th class="field_label "
    id="field_label_dependson">


  <a 
      title="The bugs listed here must be resolved before this bug can be resolved."
      class="field_help_link"
      href="page.cgi?id=glossary.html#dependson"
  >Depends on:</a>

</th>

  <td>
    <span id="dependson_input_area">
    </span>
    <a class="bz_bug_link 
          bz_status_NEW "
   title="NEW - AUDIT-FIND: ktexteditor: add the path name to be written to, to the polkit authentication message"
   href="show_bug.cgi?id=1147035">1147035</a> <a class="bz_bug_link 
          bz_status_NEW "
   title="NEW - AUDIT-FIND: ktexteditor: defined and safe selection of target file mode and ownership"
   href="show_bug.cgi?id=1147038">1147038</a> <a class="bz_bug_link 
          bz_status_NEW "
   title="NEW - AUDIT-FIND: ktexteditor: reject anything except regular files"
   href="show_bug.cgi?id=1147041">1147041</a> <a class="bz_bug_link 
          bz_status_NEW "
   title="NEW - AUDIT-FIND: ktexteditor: safely handle target directories not owned by root"
   href="show_bug.cgi?id=1147043">1147043</a> <a class="bz_bug_link 
          bz_status_NEW "
   title="NEW - AUDIT-FIND: ktexteditor: introduce a file system restriction"
   href="show_bug.cgi?id=1147045">1147045</a> 
  </td>
  </tr>
  
  <tr><th class="field_label "
    id="field_label_blocked">


  <a 
      title="This bug must be resolved before the bugs listed in this field can be resolved."
      class="field_help_link"
      href="page.cgi?id=glossary.html#blocked"
  >Blocks:</a>

</th>

  <td>
    <span id="blocked_input_area">
    </span>
    
  </td>
  </tr>
  
  <tr>
    <th>&nbsp;</th>
  
    <td colspan="2" align="left" id="show_dependency_tree_or_graph">
      Show dependency <a href="showdependencytree.cgi?id=1033055&amp;hide_resolved=1">tree</a>
  
        /&nbsp;<a href="showdependencygraph.cgi?id=1033055">graph</a>
    </td>
  </tr>
          
        </table>
      </td>
      <td>
        <div class="bz_column_spacer">&nbsp;</div>
      </td>
      
      <td id="bz_show_bug_column_2" class="bz_show_bug_column">
        <table cellpadding="3" cellspacing="1">
        <tr>
    <th class="field_label">
      Reported:
    </th>
    <td>2017-04-08 09:02 UTC by <span class="vcard"><span class="fn">Luca Beltrame</span>
</span>
    </td>
  </tr>
  
  <tr>
    <th class="field_label">
      Modified:
    </th>
    <td>2021-06-23 10:20 UTC 
      (<a href="show_activity.cgi?id=1033055">History</a>)
    </td>
  
  </tr>
         <tr>
      <th class="field_label">
        <label for="newcc" accesskey="a">CC List:</label>
      </th>
      <td>11 
          users
          <span id="cc_edit_area_showhide_container" class="bz_default_hidden">
            (<a href="#" id="cc_edit_area_showhide">show</a>)
          </span>
        <div id="cc_edit_area">
          <br>
            <select id="cc" multiple="multiple" size="5">
                <option value="andrius-suse">andrius-suse</option>
                <option value="fabian">fabian</option>
                <option value="fvogt">fvogt</option>
                <option value="KOT040188">KOT040188</option>
                <option value="marius.kittler">marius.kittler</option>
                <option value="mati865">mati865</option>
                <option value="matthias.gerstner">matthias.gerstner</option>
                <option value="meissner">meissner</option>
                <option value="mustafa1024m">mustafa1024m</option>
                <option value="nate">nate</option>
                <option value="tittiatcoke">tittiatcoke</option>
            </select>
        </div>
          <script type="text/javascript">
            hideEditableField( 'cc_edit_area_showhide_container', 
                               'cc_edit_area', 
                               'cc_edit_area_showhide', 
                               '', 
                               '');  
          </script>
      </td>
    </tr>
         <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
<tr><th class="field_label "
    id="field_label_see_also">


  <a 
      title="This allows you to refer to bugs in other installations. You can enter a URL to a bug in the 'Add Bug URLs' field to note that that bug is related to this one. You can enter multiple URLs at once by separating them with a comma. You should normally use this field to refer to bugs in other installations. For bugs in this installation, it is better to use the Depends on and Blocks fields."
      class="field_help_link"
      href="page.cgi?id=glossary.html#see_also"
  >See Also:</a>

</th>
  <td class="field_value "
      id="field_container_see_also" ></td>
    </tr> 
         <tr><th class="field_label "
    id="field_label_cf_foundby">


  <a 
      title="A custom Drop Down field in this installation of Bugzilla."
      class="field_help_link"
      href="page.cgi?id=glossary.html#cf_foundby"
  >Found By:</a>

</th>
  <td class="field_value "
      id="field_container_cf_foundby"  colspan="2">---</td>
    </tr>
    <tr><th class="field_label "
    id="field_label_cf_nts_priority">


  <a 
      title="A custom Free Text field in this installation of Bugzilla."
      class="field_help_link"
      href="page.cgi?id=glossary.html#cf_nts_priority"
  >Services Priority:</a>

</th>
  <td class="field_value "
      id="field_container_cf_nts_priority"  colspan="2"></td>
    </tr>
    <tr><th class="field_label "
    id="field_label_cf_biz_priority">


  <a 
      title="A custom Free Text field in this installation of Bugzilla."
      class="field_help_link"
      href="page.cgi?id=glossary.html#cf_biz_priority"
  >Business Priority:</a>

</th>
  <td class="field_value "
      id="field_container_cf_biz_priority"  colspan="2"></td>
    </tr>
    <tr><th class="field_label "
    id="field_label_cf_blocker">


  <a 
      title="A custom Drop Down field in this installation of Bugzilla."
      class="field_help_link"
      href="page.cgi?id=glossary.html#cf_blocker"
  >Blocker:</a>

</th>
  <td class="field_value "
      id="field_container_cf_blocker"  colspan="2">---</td>
    </tr>
    <tr><th class="field_label  bz_hidden_field"
    id="field_label_cf_marketing_qa_status">


  <a 
      title="A custom Drop Down field in this installation of Bugzilla."
      class="field_help_link"
      href="page.cgi?id=glossary.html#cf_marketing_qa_status"
  >Marketing QA Status:</a>

</th>
  <td class="field_value  bz_hidden_field"
      id="field_container_cf_marketing_qa_status"  colspan="2">---</td>
    </tr>
    <tr><th class="field_label  bz_hidden_field"
    id="field_label_cf_it_deployment">


  <a 
      title="A custom Drop Down field in this installation of Bugzilla."
      class="field_help_link"
      href="page.cgi?id=glossary.html#cf_it_deployment"
  >IT Deployment:</a>

</th>
  <td class="field_value  bz_hidden_field"
      id="field_container_cf_it_deployment"  colspan="2">---</td>
    </tr>
         <tr>
    <td colspan="2" class="bz_section_spacer"></td>
  </tr>
         <ul>
    <li><a href="tr_new_case.cgi?product=SUSE%20Security%20Incidents&bug=1033055">Create test case</a></li>
</ul><ul>
  <li><a href="enter_bug.cgi?cloned_bug_id=1033055">Clone This Bug</a></li>
</ul>
                

        </table>
      </td>
    </tr>
    <tr>
      <td colspan="3">
          <hr id="bz_top_half_spacer">
      </td>
    </tr>
  </table>

  <table id="bz_big_form_parts" cellspacing="0" cellpadding="0"><tr>
  <td>

    
<script type="text/javascript">
<!--
function toggle_display(link) {
    var table = document.getElementById("attachment_table");
    var view_all = document.getElementById("view_all");
    var hide_obsolete_url_parameter = "&hide_obsolete=1";
    // Store current height for scrolling later
    var originalHeight = table.offsetHeight;
    var rows = YAHOO.util.Dom.getElementsByClassName(
        'bz_tr_obsolete', 'tr', table);

    for (var i = 0; i < rows.length; i++) {
        bz_toggleClass(rows[i], 'bz_default_hidden');
    }

    if (YAHOO.util.Dom.hasClass(rows[0], 'bz_default_hidden')) {
        link.innerHTML = "Show Obsolete";
        view_all.href = view_all.href + hide_obsolete_url_parameter 
    }
    else {
        link.innerHTML = "Hide Obsolete";
        view_all.href = view_all.href.replace(hide_obsolete_url_parameter,"");
    }

    var newHeight = table.offsetHeight;
    // This scrolling makes the window appear to not move at all.
    window.scrollBy(0, newHeight - originalHeight);

    return false;
}
//-->
</script>

<br>
<table id="attachment_table" cellspacing="0" cellpadding="4">
  <tr id="a0">
    <th colspan="2" align="left">
      Attachments
    </th>
  </tr>



  <tr class="bz_attach_footer">
    <td colspan="2">
        <a href="attachment.cgi?bugid=1033055&amp;action=enter">Add an attachment</a>
        (proposed patch, testcase, etc.)
    </td>
  </tr>
</table>
<br>
<div id="add_comment" class="bz_section_additional_comments">
      <table>
        <tr>
          <td>
            <fieldset>
              <legend>Note</legend>
              You need to
              <a href="show_bug.cgi?id=1033055&amp;GoAheadAndLogIn=1">log in</a>
              before you can comment on or make changes to this bug.
            </fieldset>
          </td>
        </tr> 
      </table>
  </div>
  </td>
  <td>
  </td>
  </tr></table>

  
  <div id="comments"><script src="js/comments.js?1411227336" type="text/javascript">
</script>

<script type="text/javascript">
<!--
  /* Adds the reply text to the `comment' textarea */
  function replyToComment(id, real_id, name) {
      var prefix = "(In reply to " + name + " from comment #" + id + ")\n";
      var replytext = "";
        /* pre id="comment_name_N" */
        var text_elem = document.getElementById('comment_text_'+id);
        var text = getText(text_elem);
        replytext = prefix + wrapReplyText(text);


      /* <textarea id="comment"> */
      var textarea = document.getElementById('comment');
      if (textarea.value != replytext) {
          textarea.value += replytext;
      }

      textarea.focus();
  } 
//-->
</script>




<!-- This auto-sizes the comments and positions the collapse/expand links 
     to the right. -->
<table class="bz_comment_table" cellpadding="0" cellspacing="0"><tr>
<td>
<div id="c0" class="bz_comment bz_first_comment">

      <div class="bz_first_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c0">Description</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Luca Beltrame</span>
</span>
        </span>

        <span class="bz_comment_time">
          2017-04-08 09:02:24 UTC
        </span>
      </div>



<pre class="bz_comment_text" >ktexteditor, part of the new KDE Frameworks 5.33 (to be submitted soon to Tumbleweed) provides a new DBus service and policy to allow prompting the user to provide authorization and elevate their privileges (if authorization is successful) to write to files that are not writable from root.

Package: <a href="https://build.opensuse.org/package/show/KDE:Unstable:Frameworks/ktexteditor">https://build.opensuse.org/package/show/KDE:Unstable:Frameworks/ktexteditor</a>

This package uses the KAuth framework. For a discussion on a similar package that has been reviewed, see <a class="bz_bug_link 
          bz_status_RESOLVED  bz_closed"
   title="RESOLVED FIXED - AUDIT-0: powerdevil: New DBus service"
   href="show_bug.cgi?id=1019748">http://bugzilla.suse.com/show_bug.cgi?id=1019748</a>

rpmlint data on the files:

unauthorized-service /usr/share/dbus-1/system-services/org.kde.ktexteditor.katetextbuffer.service
ktexteditor.x86_64: W: suse-dbus-unauthorized-service /etc/dbus-1/system.d/org.kde.ktexteditor.katetextbuffer.conf
The package installs a DBUS system service file. If the package is intended
for inclusion in any SUSE product please open a bug report to request review
of the service by the security team.

ktexteditor.x86_64: I: polkit-untracked-privilege org.kde.ktexteditor.katetextbuffer.savefile (??:no:auth_admin_keep)
The privilege is not listed in /etc/polkit-default-privs.* which makes it
harder for admins to find. If the package is intended for inclusion in any
SUSE product please open a bug report to request review of the package by the
security team

ktexteditor.x86_64: I: polkit-cant-acquire-privilege org.kde.ktexteditor.katetextbuffer.savefile (??:no:auth_admin_keep)
Usability can be improved by allowing users to acquire privileges via
authentication. Use e.g. 'auth_admin' instead of 'no' and make sure to define
'allow_any'. This is an issue only if the privilege is not listed in /etc
/polkit-default-privs.*</pre>
    </div><div id="c1" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c1">Comment 1</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Andreas Stieger</span>
</span>
        </span>

        <span class="bz_comment_time">
          2017-04-10 07:13:31 UTC
        </span>
      </div>



<pre class="bz_comment_text" ><a href="https://cgit.kde.org/ktexteditor.git/">https://cgit.kde.org/ktexteditor.git/</a>
git://anongit.kde.org/ktexteditor.git

<a href="https://github.com/KDE/ktexteditor">https://github.com/KDE/ktexteditor</a>
<a href="https://github.com/KDE/ktexteditor/releases/tag/v5.33.0">https://github.com/KDE/ktexteditor/releases/tag/v5.33.0</a></pre>
    </div><div id="c2" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c2">Comment 2</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Sebastian Krahmer</span>
</span>
        </span>

        <span class="bz_comment_time">
          2017-04-10 13:51:27 UTC
        </span>
      </div>



<pre class="bz_comment_text" >This is an abuse of the privileged DBUS functionality.

Privileged DBUS+polkit was made to offer semi-administration
tasks like setting system time or TZ to GUI users who are in possession
of their own system.
It was not made to emulate &quot;sudo mv&quot; command for text editors.

To maintain a sane and healthy state of or DBUS services, this
feature wont be white listed and thus the package cant be integrated.

The KDE project should offer ktexteditor build-flags that allow
for disabling such insane functionality.

-&gt; WONTFIX</pre>
    </div><div id="c3" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c3">Comment 3</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Luca Beltrame</span>
</span>
        </span>

        <span class="bz_comment_time">
          2017-04-10 13:54:26 UTC
        </span>
      </div>



<pre class="bz_comment_text" >Thanks for the comment: rather than preventing the integration, we'll disable that functionality so that it won't be used in the openSUSE packages.</pre>
    </div><div id="c4" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c4">Comment 4</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Mustafa Muhammad</span>
</span>
        </span>

        <span class="bz_comment_time">
          2017-07-01 18:07:06 UTC
        </span>
      </div>



<pre class="bz_comment_text" >I think this was implemented so that users can edit system files in wayland sessions (where you can't run GUI apps as root), this is probably the most sane way (without using the terminal).
I saw from discussions on Fedora bugzilla that on wayland you can't start GUI apps as root, so you open them as normal apps and when trying something that needs permission, it pops up an authentication dialog, the case was about gparted.</pre>
    </div><div id="c5" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c5">Comment 5</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Andrius Štikonas</span>
</span>
        </span>

        <span class="bz_comment_time">
          2017-11-06 18:31:10 UTC
        </span>
      </div>



<pre class="bz_comment_text" >Can we please have some proper arguments?

If you claim that it is not to emulate &quot;sudo mv&quot; than please provide sources. Then we can properly discuss and find the best solutions. Otherwise, how are we supposed to respond to &quot;abuse, insane, wontfix&quot;.

In my oppinion a good place to start for discussion is 
<a href="https://www.freedesktop.org/software/polkit/docs/latest/polkit-apps.html">https://www.freedesktop.org/software/polkit/docs/latest/polkit-apps.html</a>

Here they list DO's and DON'T with polkit. Last 3 of those DON'Ts are not relevant to this discussion. The first DON'T mostly talks about developer tools and command line applications. Clearly not relevant again. Finally, they say don't use polkit when there is no reason to decline the action. Again, that's not the case here.

So I don't see any reason how this is abuse of polkit. At least polkit developers don't seem to consider this abuse.

On the other hand running X applications as root is extremely insecure and attack surface is much larger. Huge codebases such as Qt or GTK, XCB/Xlib, xkbcommon run as root and almost surely there will be some root exploit.</pre>
    </div><div id="c6" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c6">Comment 6</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Fabian Vogt</span>
</span>
        </span>

        <span class="bz_comment_time">
          2017-12-02 11:00:25 UTC
        </span>
      </div>



<pre class="bz_comment_text" >Reopening this bug to hopefully get a proper answer.</pre>
    </div><div id="c7" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c7">Comment 7</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-03-14 16:09:07 UTC
        </span>
      </div>



<pre class="bz_comment_text" >krahmer is no longer around to discuss this.

I apologize for some of the cross language he used in <a href="show_bug.cgi?id=1033055#c2">comment 2</a>. He just was
really enraged with the sheer tought of this approach.

I think the main issue here is that such an interface is not tailored towards
a specific functionality of the program (which is the usual use case of
polkit), but opens a really large door to write files anywhere.

Any weakness in the implementation of the service or the involved frameworks
would wreak havoc, security wise.

For example, Sebastian found a general root exploit in the kauth framework:

    <a href="http://www.openwall.com/lists/oss-security/2017/05/10/3">http://www.openwall.com/lists/oss-security/2017/05/10/3</a>

Kauth is also used by ktexteditor, according to <a href="show_bug.cgi?id=1033055#c0">comment 0</a>. Therefore, would we
have whitelisted this D-Bus service and associated polkit actions by then,
there would have been a severe security issue in related openSUSE
installations. Not even &quot;auth_admin&quot; restriction would have helped to prevent
this.

So this shows that these are not just theoretical concerns.

Please accept security team's decision not to whitelist this particular
service. Closing this bug again as WONTFIX.</pre>
    </div><div id="c8" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c8">Comment 8</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Fabian Vogt</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-03-14 16:18:13 UTC
        </span>
      </div>



<pre class="bz_comment_text" >(In reply to Matthias Gerstner from <a href="show_bug.cgi?id=1033055#c7">comment #7</a>)
<span class="quote">&gt; krahmer is no longer around to discuss this.
&gt; 
&gt; I apologize for some of the cross language he used in <a href="show_bug.cgi?id=1033055#c2">comment 2</a>. He just was
&gt; really enraged with the sheer tought of this approach.
&gt; 
&gt; I think the main issue here is that such an interface is not tailored towards
&gt; a specific functionality of the program (which is the usual use case of
&gt; polkit), but opens a really large door to write files anywhere.
&gt; 
&gt; Any weakness in the implementation of the service or the involved frameworks
&gt; would wreak havoc, security wise.</span >

Of course. Break sudo and you get root. Is that a reason not to enable sudo?

<span class="quote">&gt; For example, Sebastian found a general root exploit in the kauth framework:
&gt; 
&gt;     <a href="http://www.openwall.com/lists/oss-security/2017/05/10/3">http://www.openwall.com/lists/oss-security/2017/05/10/3</a>
&gt; 
&gt; Kauth is also used by ktexteditor, according to <a href="show_bug.cgi?id=1033055#c0">comment 0</a>. Therefore, would
&gt; we
&gt; have whitelisted this D-Bus service and associated polkit actions by then,
&gt; there would have been a severe security issue in related openSUSE
&gt; installations. Not even &quot;auth_admin&quot; restriction would have helped to prevent
&gt; this.</span >

That was already the case and got fixed, which means this is not relevant anymore.

<span class="quote">&gt; So this shows that these are not just theoretical concerns.</span >

Obviously not. kauth is an abstraction over polkit, which basically means that
any bug in kauth is equal to a bug in polkit. Any bug in polkit would also have
the same issue and consequences.
Why is polkit enabled in openSUSE then, if any bug would cause security issues?

With NetworkManager, you can currently read arbitrary files as any user, by specifying a file as secret
Why is that not fixed yet? Please answer that before you play the &quot;we only whitelist known secure services&quot; card.

<span class="quote">&gt; Please accept security team's decision not to whitelist this particular
&gt; service.</span >

Sorry, no.

All we ask for is functionality equivalent to &quot;sudo install&quot; over polkit. You can already do that with sudo, so why not with polkit?</pre>
    </div><div id="c9" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c9">Comment 9</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Fabian Vogt</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-03-14 16:20:55 UTC
        </span>
      </div>



<pre class="bz_comment_text" >(In reply to Fabian Vogt from <a href="show_bug.cgi?id=1033055#c8">comment #8</a>)
<span class="quote">&gt; With NetworkManager, you can currently read arbitrary files as any user, by
&gt; specifying a file as secret</span >

Sorry, I forgot to add the reference here. It's <a class="bz_bug_link 
          bz_status_NEW "
   title="NEW - VUL-2: CVE-2012-1096: NetworkManager: Arbitrary file access/information leak"
   href="show_bug.cgi?id=738073">bug 738073</a>.</pre>
    </div><div id="c10" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c10">Comment 10</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-03-14 16:48:50 UTC
        </span>
      </div>



<pre class="bz_comment_text" >(In reply to <a href="mailto:fvogt&#64;suse.com">fvogt&#64;suse.com</a> from <a href="show_bug.cgi?id=1033055#c8">comment #8</a>)
<span class="quote">&gt; That was already the case and got fixed, which means this is not relevant
&gt; anymore.</span >

For us it is relevant, because it shows the sensibility of the involved
software. And if we would not have looked into it, we would not even know.

<span class="quote">&gt; Obviously not. kauth is an abstraction over polkit, which basically means that
&gt; any bug in kauth is equal to a bug in polkit. Any bug in polkit would also have
&gt; the same issue and consequences.</span >

I don't think so. When kauth is used for a more specialized polkit action like
activating power saving features of the CPU then the outcome is less severe
than when you can write arbitrary files.

<span class="quote">&gt; Why is polkit enabled in openSUSE then, if any bug would cause security
&gt; issues?</span >

We are not only concerned with the frameworks themselves, but with the actions
they allow. And this is what this bug is about: allowing unusually broad
actions in a complex software stack.

<span class="quote">&gt; With NetworkManager, you can currently read arbitrary files as any user, by
&gt; specifying a file as secret
&gt; Why is that not fixed yet? Please answer that before you play the &quot;we only
&gt; whitelist known secure services&quot; card.</span >

I know about this issue and as it happens I just recently opened a bug
upstream for it. We are very unhappy about the situation but as upstream
pointed out they don't have a quick solution for it. If you have a good idea
and can help out with the situation we would be happy.

The package is already in openSUSE and in widespread use. So we don't want to
ruin everybody's time by removing it. It just shows how difficult security
decisions are sometimes. Now imagine something similar would happen to
ktexteditor.

<span class="quote">&gt; All we ask for is functionality equivalent to &quot;sudo install&quot; over polkit.
&gt; You can already do that with sudo, so why not with polkit?</span >

Because with sudo, you don't need to make sure that the &quot;install&quot; program is
also securely implemented. You just have to look at sudo. With polkit it's
different. Otherwise we wouldn't be having these polkit rule audits at all.</pre>
    </div><div id="c11" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c11">Comment 11</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-03-16 14:39:52 UTC
        </span>
      </div>



<pre class="bz_comment_text" >I talked to Fabian about this and we agreed on the following:

- I will review the ktexteditor interface carefully. As of high workload this
  will take a while.
- If all looks good we will whitelist this polkit action with auth_admin (not
  with keep)</pre>
    </div><div id="c12" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c12">Comment 12</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Luca Beltrame</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-03-16 14:51:43 UTC
        </span>
      </div>



<pre class="bz_comment_text" >Thanks a lot. Currently the feature is hard-disabled in our packages, so even if the review takes time, it won't be a major problem.</pre>
    </div><div id="c13" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c13">Comment 13</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-04-24 11:44:58 UTC
        </span>
      </div>



<pre class="bz_comment_text" >Hey guys,

so I now took the time to look into the katetextbuffer service (actually a
helper called 'kauth_ktexteditor_helper'). Brace yourselves: This is gonna be
a pretty long one ;-).

The KDE approach to polkit does not make it too easy to work with it: The
D-Bus interface cannot be enumerated (no introspection possible) and the data
structures moved around are serialized Qt datatypes in this case. Still I
managed somehow to play around with it.

For better understanding here comes a quick explanation of how the interface
works:

- The katetextbuffer service only provides a single D-Bus method
  savefile(sourceFile, targetFile, checksum, ownerId, groupId).
- The client (in this case the 'kate' editor) triggers the D-Bus method
  whenever opening a target file for writing fails, to retry with elevated
  privileges. It writes the current editor content into a temporary file and
  also calculates a sha512 digest of the content. If the target file already
  exists and is stat()'able by 'kate' then it also specifies the new target
  file owner and group ID.
- The kauth_ktexteditor_helper will be triggered and first of all it will ask
  for administrator authentication (according to polkit configuration). Then
  the actual operation happens: It copies the source file provided by 'kate'
  into a temporary file in the target directory and recalculates the sha512
  digest sum. If the sum matches then this now root owned temporary file will be
  rename()'d to overwrite the actual target file. New file owner and group will
  also be applied.

Let's start with what works well with this approach:

- It uses the kauth framework and - considering there are no other security
  issues like Sebastian found back then - the administrator authentication
  should work out well. Thus only somebody who knows the root password can
  trigger the logic at all.
- The introduction of the sha512 digest makes sure that the temporary
  sourceFile provided by &quot;kate&quot; really contains the same data that &quot;kate&quot; had
  in mind when it triggered and authenticated the D-Bus call.

Now for the things that don't work so well:

- The code currently contains a local privilege escalation in some
  circumstances. I will publish more information and a PoC about this shortly.
- The polkit authentication message always is just &quot;Root privileges are needed
  to save this document&quot;. I think this is bad from usability and security
  perspective. As is documented in
      <a href="https://www.freedesktop.org/software/polkit/docs/0.105/eggdbus-interface-org.freedesktop.PolicyKit1.Authority.html#eggdbus-method-org.freedesktop.PolicyKit1.Authority.CheckAuthorization">https://www.freedesktop.org/software/polkit/docs/0.105/eggdbus-interface-org.freedesktop.PolicyKit1.Authority.html#eggdbus-method-org.freedesktop.PolicyKit1.Authority.CheckAuthorization</a>
  placeholders can be used in the authentication messages like
  &quot;$(target_file)&quot;. This would allow for a message like &quot;Root privileges are
  needed to write to $(target_file)&quot;. Then the user has more knowledge
  about what is about to happen. I don't know if this is possible from within
  the kauth infrastructure, but I sure hope so.
- I don't think the savefile() interface is well specified yet. Why can the
  client code choose the target file owner and group? The service code can
  determine the to-be-replaced file's owner and group just as well and
  this probably involves less race conditions than when the client does.

  On the other hand, if a new file is created by way of savefile(), then the
  supplied owner and group ID are ignored, and the file is always owned by
  root:root and world readable (mode 0644). So what if an executable file
  should be created? What if a user wants to create a secret file
  that should not be readable by anyone? This is not possible and the user
  may not even realise this.

  Similarly extended attributes or ACLs of target files will be discarded
  (quite exotic, but still should be thought about).
- The client side code also triggers the savefile() API when the file to be
  written is owned by the user itself but read-only. This is an unnecessary
  authentication and an unnecessary privilege escalation.
- The service code does not perform any checks on source or target file types.
  For example I can overwrite a device file like /dev/ttyS0. Kate will only
  warn that the target file exists. Afterwards I no longer have a serial
  device but some text file in /dev/ttyS0 containing my text buffer. A user
  error here could lead to a broken system (of course this can also happen
  with other root owned files like /etc/passwd and alike).

  Even worse for source files: The service can be asked to copy data from
  /dev/zero or some FIFO device causing DoS and high file system usage. This
  does not work from within kate but the D-Bus interface supports it
  basically.
- The service does always perform a chdir() to the target file directory to
  operate from within the target directory only. The CWD is never reset in the
  code. Although the service does not run for long (it shuts down after a
  couple of seconds idle time), the state of the service is permanently
  changed for the course of its lifetime. This is even more interesting,
  because:
- The service performs no path normalization on source and target file paths.
  Only the client side code does this at the moment. This allows to pass
  symlinks, relative paths and paths with relative path components. They will
  always be happily handled by the service. The relative paths will then also
  be evaluated according to the current CWD of the service.
- The service does not check the target file system type. This way it can
  operate on pseudo file systems or network file systems, which might not be a
  good idea.

I recommend the following improvements in the logic of
kauth_ktexteditor_helper:

- add the path name to be written to, to the polkit authentication message.
- either the client specifies the complete target file mode, or the service
  doesn't allow creation of new files but only overwriting of existing ones.
  In the latter case reapplying the existing mode/owner/group in a safe
  way.
- avoid triggering the savefile() API for files that are owned by the user but
  read only.
- check source and target file types and reject anything except regular files.
  symlinks should not be followed or replaced.
- chdir back to &quot;/&quot; after the work is done.
- reject relative paths.
- if the target path directory is not owned by root then eiter reject it, or
  drop privileges temporarily to the owner of the directory.
- implement at least a supported target file system blacklist, or even better
  a whitelist.

For whitelisting this service I would at least like to see the improved
authentication message, avoiding the privilege escalation for read-only files
and the bugfix for the local root vulnerability I am about to publish.

Overall I don't have a very good feeling about this feature. Operating in the
file system on behalf of another user as root is a very difficult task to get
right. The file system situation is ever getting more complicated and these
days we can also have things like the overlayfs or namespaces. Of course, a
best effort approach to improve usability is justified.

The usability needs to be delivered, though. And I think a couple of the
points I raised above show that the current service implementation does not
support the user very much in avoiding bad things or making transparent what
is happening.

Even though it sounds like a lot of work I think when somebody gives the code
some love it is not too much effort. What do you think about it?</pre>
    </div><div id="c14" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c14">Comment 14</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-04-24 11:48:07 UTC
        </span>
      </div>



<pre class="bz_comment_text" >Here is the oss-sec posting I just made about a possible local privilege
escalation in ktexteditor:

<a href="http://seclists.org/oss-sec/2018/q2/65">http://seclists.org/oss-sec/2018/q2/65</a>

Basically there is an opportunity to gain root privileges if a user writes via
Kate into a directory owned by another unprivileged user. I already contacted
upstream and sent them the patch.</pre>
    </div><div id="c15" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c15">Comment 15</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Luca Beltrame</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-04-24 12:08:23 UTC
        </span>
      </div>



<pre class="bz_comment_text" >Wow, thanks a bunch for the analysis! I will still need to digest it fully, but I agree that we should push upstream for some of these changes (including the fix for the local privilege escalation, of course).

I'll start poking people upstream about the whole matter.</pre>
    </div><div id="c16" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c16">Comment 16</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Marcus Meissner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-04-26 12:34:56 UTC
        </span>
      </div>



<pre class="bz_comment_text" >CVE-2018-10361 I think</pre>
    </div><div id="c17" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c17">Comment 17</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-05-03 09:22:06 UTC
        </span>
      </div>



<pre class="bz_comment_text" >Upstream discussion about the CVE is currently happening in
<a href="https://phabricator.kde.org/D12513#257628">https://phabricator.kde.org/D12513#257628</a>.</pre>
    </div><div id="c18" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c18">Comment 18</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-06-04 13:19:00 UTC
        </span>
      </div>



<pre class="bz_comment_text" >Hi Luca,

I am assigning back this bug to you since there is at the moment nothing left
to do from my side. As I understand upstream is implementing a privilege drop
now in case the target file is not owned by root. This is better. But there is
still some disagreement on details. I have the feeling someone is missing here
who has the skill and is willing to invest the effort to make this code more
robust and trustworthy.

As I pointed out it <a href="show_bug.cgi?id=1033055#c13">comment 13</a> there isn't too much missing to make a
whitelisting feasible. Please reassign the bug to me once there is some
progress and a new version available.

Thank you.</pre>
    </div><div id="c19" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c19">Comment 19</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Luca Beltrame</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-06-04 13:51:40 UTC
        </span>
      </div>



<pre class="bz_comment_text" >Hello Matthias,

although you didn't see much activity in the actual revision, someone is actually taking (baby) steps in also fixing some of the issues you have pointed out lower in the stack.

So yes, it's going slowly, but there is progress. 

Also, aside from the issues you already raised: would &quot;auth_admin&quot; instead of &quot;auth_admin_keep&quot; still require a review? 

I'm asking due to <a href="https://bugzilla.opensuse.org/show_bug.cgi?id=1073214">https://bugzilla.opensuse.org/show_bug.cgi?id=1073214</a>, which handled a similar case in gvfs. Sorry to add you to CC again after the assignment change, but I'd like to have your input on this.</pre>
    </div><div id="c20" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c20">Comment 20</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-06-04 16:38:06 UTC
        </span>
      </div>



<pre class="bz_comment_text" >(In reply to <a href="mailto:lbeltrame&#64;kde.org">lbeltrame&#64;kde.org</a> from <a href="show_bug.cgi?id=1033055#c19">comment #19</a>)
<span class="quote">&gt; although you didn't see much activity in the actual revision, someone is
&gt; actually taking (baby) steps in also fixing some of the issues you have
&gt; pointed out lower in the stack.</span >

That is good to hear!

<span class="quote">&gt; Also, aside from the issues you already raised: would &quot;auth_admin&quot; instead
&gt; of &quot;auth_admin_keep&quot; still require a review? 
&gt; 
&gt; I'm asking due to <a href="https://bugzilla.opensuse.org/show_bug.cgi?id=1073214">https://bugzilla.opensuse.org/show_bug.cgi?id=1073214</a>,
&gt; which handled a similar case in gvfs. Sorry to add you to CC again after the
&gt; assignment change, but I'd like to have your input on this.</span >

Unfortunately no, this wouldn't change much in the context of ktexteditor.
Even if the admin password is always required, the basic problem remains the
same, namely that the implementation of the file save operation is not robust.

The caching of the authentication is another topic. Even if a file is only
saved once, there is a time window within with arbitrary files can be written
as root without further authentication. Of course this requires an already
compromised system and other tools like sudo allow the same. So I'm not going
to argue.</pre>
    </div><div id="c21" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c21">Comment 21</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Luke Howell</span>
</span>
        </span>

        <span class="bz_comment_time">
          2018-06-07 22:45:02 UTC
        </span>
      </div>



<pre class="bz_comment_text" >Fix landed in upstream: <a href="https://phabricator.kde.org/R39:c81af5aa1d4f6e0f8c44b2e85ca007ba2a1e4590">https://phabricator.kde.org/R39:c81af5aa1d4f6e0f8c44b2e85ca007ba2a1e4590</a></pre>
    </div><div id="c22" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c22">Comment 22</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2019-02-05 11:38:07 UTC
        </span>
      </div>



<pre class="bz_comment_text" >What is the current state of ktexteditor in Factory regarding this D-Bus API?
Is there anything left to do in this bug or can we otherwise close it?

In <a class="bz_bug_link 
          bz_status_REOPENED "
   title="REOPENED - AUDIT-STALE: kio: KAuth for KIO"
   href="show_bug.cgi?id=1062040">bug 1062040</a> we have some recent activity. I have been asked to review new
code in kauth/kio that deals with a much broader &quot;let's do file system stuff
as root via D-Bus&quot; API. The current state of affairs regarding this
implementation is still not good. Still racy system calls are used and
symlinks aren't protected against.

I'm not sure whether a generalized file system service is a good idea. The
security of file system operations often depends on the application context.
So while having a single place to implement file system operations is
basically a good idea, there might be some information missing in such a
central service. In any case the D-Bus interface would need to be very well
thought out which also isn't currently the case (e.g. mkdir implicitly applies
mode 0777 minus the umask of the D-Bus service). When thinking about polkit
then I'd rather like to see specialized polkit actions for file system
operations like we have here in this bug for ktexteditor. The generalized
kauth/kio approach will probably lead to general polkit actions (unless there
isn't special care taken of). When general polkit actions are used then it
will end up with something like &quot;renaming files for locally logged in users is
always allowed&quot; independently of the application context.</pre>
    </div><div id="c23" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c23">Comment 23</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Luca Beltrame</span>
</span>
        </span>

        <span class="bz_comment_time">
          2019-02-05 11:49:24 UTC
        </span>
      </div>



<pre class="bz_comment_text" >The CVE was fixed, but currently it is still disabled. I'd rather enable it, barring any objections, of course, to prevent carrying a patch until the heat death of the universe.</pre>
    </div><div id="c24" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c24">Comment 24</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Fabian Vogt</span>
</span>
        </span>

        <span class="bz_comment_time">
          2019-02-05 14:19:01 UTC
        </span>
      </div>



<pre class="bz_comment_text" ><span class="quote">&gt; I'm not sure whether a generalized file system service is a good idea. The</span >
security of file system operations often depends on the application context.
So while having a single place to implement file system operations is
basically a good idea, there might be some information missing in such a
central service. In any case the D-Bus interface would need to be very well
thought out which also isn't currently the case (e.g. mkdir implicitly applies
mode 0777 minus the umask of the D-Bus service). When thinking about polkit
then I'd rather like to see specialized polkit actions for file system
operations like we have here in this bug for ktexteditor. The generalized
kauth/kio approach will probably lead to general polkit actions (unless there
isn't special care taken of). When general polkit actions are used then it
will end up with something like &quot;renaming files for locally logged in users is
always allowed&quot; independently of the application context.

Apparently this is fine for the GFVS admin:// backend though, which does the same and was whitelisted a while ago.</pre>
    </div><div id="c25" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c25">Comment 25</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2019-02-07 12:09:49 UTC
        </span>
      </div>



<pre class="bz_comment_text" >(In reply to <a href="mailto:lbeltrame&#64;kde.org">lbeltrame&#64;kde.org</a> from <a href="show_bug.cgi?id=1033055#c23">comment #23</a>)
<span class="quote">&gt; The CVE was fixed, but currently it is still disabled. I'd rather enable it,
&gt; barring any objections, of course, to prevent carrying a patch until the heat
&gt; death of the universe.</span >

I have looked into the current implementation and some of my recommendations
from <a href="show_bug.cgi?id=1033055#c13">comment 13</a> still seem to be missing. I will do a few tests during
runtime. Maybe I can offer some patches to upstream to improve things. Then we
can whitelist this action.</pre>
    </div><div id="c26" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c26">Comment 26</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2019-02-14 14:08:51 UTC
        </span>
      </div>



<pre class="bz_comment_text" >So I invested quite some effort over the last days to come up with
improvements to the current ktexteditor code. This all turns out to be more
difficult than expected. The involved Qt APIs are insufficient for security
oriented programming that is required in this case. The documentation is often
also lacking so a lot of digging and guessing has to be done. Also some of the
involved KDE frameworks don't offer the full spectrum of features required
e.g. from polkit. To top it off I find the workflow of the KDE upstream
Phabricator instance difficult to digest, but there's a chance I'm just too
stupid for it.

So let's again take a look at the things that need to be done here:

1) add the path name to be written to, to the polkit authentication message.
2) either the client specifies the complete target file mode, or the service
  doesn't allow creation of new files but only overwriting of existing ones.
  In the latter case reapplying the existing mode/owner/group in a safe
  way.
3) avoid triggering the savefile() API for files that are owned by the user but
  read only i.e. don't escalate privileges when there's no reason to.
4) check source and target file types and reject anything except regular files.
  symlinks should not be followed or replaced. No relative paths should be
  accepted. All of this needs to be verified on the service side.
5) chdir back to &quot;/&quot; after the work is done.
6) if the target path directory is not owned by root then eiter reject it, or
  drop privileges temporarily to the owner of the directory.
7) implement at least a supported target file system blacklist, or even better
  a whitelist.

This is the current status and my assessment of these items:

1) The stack of KDE framework components that is involved with polkit and
  kauth doesn't support specification of the so called &quot;polkit details&quot; that
  are necessary to provide runtime generated information for authentication
  messages:
    - In kauth the ActionData class has a `setDetails(const QString&amp;)`
      function, but the details member is then never used for anything. Also a
      string is not the right data type here, a map is required.
    - Kauth uses the library polkit-qt-1, a KDE C++ wrapper around the C based
      polkit library. This wrapper does not support specification of the
      details. This is where I started with a first change that is now in
      review in the upstream KDE phabricator [1]
    - For full support of polkit details, the Kauth helper binary interface
      will need to be extended, because the polkit details must only be passed
      from the trusted root owned service, never directly by an unprivileged
      client to prevent authentication message spoofing.

  Making these changes will be quite some benefit for the usability of KDE
  polkit based applications, but it will be quite some effort to pull this
  through. Help is welcome.

2) After thinking a while about this I've come to the following conclusions:

    - these file system operations as root are only ever safe when they
      require root authentication. So the parameters passed from the client
      can be considered kind of trusted. The service can't determine in a
      generic way anyways whether an operation is safe or not.

    - Since the service doesn't know the context, the client application needs
      to determine the correct file metadata. It turns out that even on the
      client side, for the case of a text editor, this cannot be generically
      determined in a safe way. Therefore the *human user* has to be asked for
      the correct settings.

      For example currently the D-Bus service creates new files always as
      root:root mode 0644, i.e. world-readable. This can result in an
      information leak. A good example would be creation of a new WiFi
      configuration in /etc/wpa_supplicant which is a world-readable directory
      containing private files that may contain WiFi credentials.

      A user creating such a file might not be aware at all about the resulting
      file permissions. Therefore the client side needs to ask the user for the
      permissions to use. Implementing such a dialog is beyond what I can
      provide with the resources I have, so somebody needs to help.

3) I started working on this item by first refactoring the existing savefile()
  function [2] and then adding some logic that causes the privilege escalation
  only to happen when there actually is a permissions problem (EPERM) and the
  target file cannot be removed (read-only file owned by the user himself).
  The second part is not yet in review, because I'm not sure how to add a
  stack of patches to Phabricator.

4) Shouldn't be too hard to achieve on the service side. First I want the
  other changes to come through, however.

5) This was seemingly already fixed by way of fixing the CVE-2018-10361. No
  more chdir() happens at all.

6) This requires well thought out code. Rejecting it would be the safest and
  simplest way. I will have a look once the other stuff is through.

7) A whitelist for file systems is difficult to maintain when new ones are
  coming up etc. But at least a blacklist for e.g. PROCFS and SYSFS should be
  put into place.

[1]: <a href="https://phabricator.kde.org/D18845">https://phabricator.kde.org/D18845</a>
[2]: <a href="https://phabricator.kde.org/D19001">https://phabricator.kde.org/D19001</a></pre>
    </div><div id="c27" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c27">Comment 27</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Luca Beltrame</span>
</span>
        </span>

        <span class="bz_comment_time">
          2019-02-14 14:25:23 UTC
        </span>
      </div>



<pre class="bz_comment_text" >Many thanks for the thorough investigation. I have created a developer task upstream (<a href="https://phabricator.kde.org/T10480">https://phabricator.kde.org/T10480</a>) to make more people aware upstream (and who could possibly bring help).</pre>
    </div><div id="c28" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c28">Comment 28</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2019-03-29 10:02:46 UTC
        </span>
      </div>



<pre class="bz_comment_text" >By now the first round of changes I submitted have been accepted. Item 3) is
fixed. For 1) I've extended the libpolkit-qt1 API. Next step will be to
improve the daemon implementation (items 2), 4) - 7)).

For item 1) the kauth framework needs to be extended which will be not that
easy. I'm willing to accept ktexteditor without 1) being in place but the
other stuff is required. We will also need to get the upstream changes into
our OBS packages (at least as patches when there are no upstream releases
available).

Security team currently has a high load so it'll be a bit before I can
continue working on this.</pre>
    </div><div id="c29" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c29">Comment 29</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Luca Beltrame</span>
</span>
        </span>

        <span class="bz_comment_time">
          2019-03-29 11:14:30 UTC
        </span>
      </div>



<pre class="bz_comment_text" >Thanks a lot for the report. Once the time comes, we will make sure to put whatever is needed in our packages (unless there will be already an upstream version with the needed changes).</pre>
    </div><div id="c30" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c30">Comment 30</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Fabian Vogt</span>
</span>
        </span>

        <span class="bz_comment_time">
          2019-08-21 14:03:27 UTC
        </span>
      </div>



<pre class="bz_comment_text" >(In reply to Luca Beltrame from <a href="show_bug.cgi?id=1033055#c29">comment #29</a>)
<span class="quote">&gt; Thanks a lot for the report. Once the time comes, we will make sure to put
&gt; whatever is needed in our packages (unless there will be already an upstream
&gt; version with the needed changes).</span >

I think everything is in Tumbleweed meanwhile, auth_admin_keep got replaced with just auth_admin. So please have another look and whitelist if ok.</pre>
    </div><div id="c31" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c31">Comment 31</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2019-08-22 11:46:49 UTC
        </span>
      </div>



<pre class="bz_comment_text" >(In reply to <a href="mailto:fvogt&#64;suse.com">fvogt&#64;suse.com</a> from <a href="show_bug.cgi?id=1033055#c30">comment #30</a>)
<span class="quote">&gt; I think everything is in Tumbleweed meanwhile, auth_admin_keep got replaced
&gt; with just auth_admin. So please have another look and whitelist if ok.</span >

I just looked into the upstream repo and regarding the text buffer client and
service side implementation nothing changed since February / a year ago.
A bit more supposedly happened regarding 1) support for displaying
formatted polkit messages in the framework components but it isn't used yet by
ktexteditor. I wanted to address 2) but didn't find the time yet and the case
is complicated wrt backwards compatibility. 6) and 7) are most probably also
still not addressed.</pre>
    </div><div id="c32" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c32">Comment 32</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Matthias Gerstner</span>
</span>
        </span>

        <span class="bz_comment_time">
          2019-08-23 09:29:40 UTC
        </span>
      </div>



<pre class="bz_comment_text" >I'm changing this bug to a tracker bug and will split off separate bugs for
the things that still need to be done according to our new audit bug lifecycle
model [1]. This should make it more clear what's still left to do and what
not.

[1]: <a href="https://en.opensuse.org/openSUSE:Package_security_guidelines#Audit_Bug_Lifecycle">https://en.opensuse.org/openSUSE:Package_security_guidelines#Audit_Bug_Lifecycle</a></pre>
    </div><div id="c33" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c33">Comment 33</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Вадим Котов</span>
</span>
        </span>

        <span class="bz_comment_time">
          2021-02-14 17:37:00 UTC
        </span>
      </div>



<pre class="bz_comment_text" >If kate had a bad implementation of saving files with elevated privileges and asking for a password, then you need to offer your own implementation. But why just remove the already working and convenient functionality ?????? This is terrible and despicable.</pre>
    </div><div id="c34" class="bz_comment">

      <div class="bz_comment_head">



        <span class="bz_comment_number">
          <a 
             href="show_bug.cgi?id=1033055#c34">Comment 34</a>
        </span>

        <span class="bz_comment_user">
          <span class="vcard"><span class="fn">Andrius Štikonas</span>
</span>
        </span>

        <span class="bz_comment_time">
          2021-02-14 17:47:56 UTC
        </span>
      </div>



<pre class="bz_comment_text" >(In reply to Вадим Котов from <a href="show_bug.cgi?id=1033055#c33">comment #33</a>)
<span class="quote">&gt; If kate had a bad implementation of saving files with elevated privileges
&gt; and asking for a password, then you need to offer your own implementation.
&gt; But why just remove the already working and convenient functionality ??????
&gt; This is terrible and despicable.</span >

I would avoid using such strong language in the bugs. Nobody is obliged to offer anything, most people work on FOSS as volunteers. But each distribution is free to have their own policies. And if you don't like that you can always either pick distro that does things your way.</pre>
    </div>


  

</td>
<td>
</td>
</tr></table>
  </div>
        

</form>

<hr>
<ul class="related_actions">
    <li><a href="show_bug.cgi?format=multiple&amp;id=1033055">Format For Printing</a></li>
    <li>&nbsp;-&nbsp;<a href="show_bug.cgi?ctype=xml&amp;id=1033055">XML</a></li>
    <li>&nbsp;-&nbsp;<a href="enter_bug.cgi?cloned_bug_id=1033055">Clone This Bug</a></li>
    
    <li>&nbsp;-&nbsp;<a href="#">Top of page </a></li>
    </ul>        


<div class="navigation">
  
  <i><font color="#777777">First</font></i>
  <i><font color="#777777">Last</font></i>
  <i><font color="#777777">Prev</font></i>
  <i><font color="#777777">Next</font></i>
  &nbsp;&nbsp;
  <i><font color="#777777">This bug is not in your last
    search results.</font></i>
</div>

<br>
</div>



<div id="footer">
  <div class="intro"></div>




<ul id="useful-links">
  <li id="links-actions"><ul class="links">
  <li><a href="./">Home</a></li>
  <li><span class="separator">| </span><a href="enter_bug.cgi">New</a></li>
  <li><span class="separator">| </span><a href="describecomponents.cgi">Browse</a></li>
  <li><span class="separator">| </span><a href="query.cgi">Search</a></li>

  <li class="form">
    <span class="separator">| </span>
    <form action="buglist.cgi" method="get"
        onsubmit="if (this.quicksearch.value == '')
                  { alert('Please enter one or more search terms first.');
                    return false; } return true;">
    <input type="hidden" id="no_redirect_bottom" name="no_redirect" value="0">
    <script type="text/javascript">
      if (history && history.replaceState) {
        var no_redirect = document.getElementById("no_redirect_bottom");
        no_redirect.value = 1;
      }
    </script>
    <input class="txt" type="text" id="quicksearch_bottom" name="quicksearch" 
           title="Quick Search" value="">
    <input class="btn" type="submit" value="Search" 
           id="find_bottom"></form>
  <a href="page.cgi?id=quicksearch.html" title="Quicksearch Help">[?]</a></li>

  <li><span class="separator">| </span><a href="report.cgi">Reports</a></li>

  <li>
      <span class="separator">| </span>
        <a href="request.cgi">Requests</a></li>

  <li>
        <span class="separator">| </span>
        <a href="docs/en/html/bug_page.html" target="_blank">Help</a>
      </li>
    

    <li id="mini_login_container_bottom">
  <span class="separator">| </span>
  <!--a id="login_link_bottom" href="show_bug.cgi?id=1033055&amp;GoAheadAndLogIn=1"
     onclick="return show_mini_login_form('_bottom')">Log In</a-->
  <a id="login_link_bottom" href="show_bug.cgi?id=1033055&amp;GoAheadAndLogIn=1">Log In</a>


  <form action="show_bug.cgi?id=1033055" method="POST" 
        class="mini_login bz_default_hidden"
        id="mini_login_bottom"
        onsubmit="return check_mini_login_fields( '_bottom' );"
  >
    <input id="Bugzilla_login_bottom" 
           class="bz_login"
           name="Bugzilla_login"
           title="Login"
           onfocus="mini_login_on_focus('_bottom')"
    >
    <input class="bz_password" 
           id="Bugzilla_password_bottom" 
           name="Bugzilla_password"
           type="password"
           title="Password"
    >
    <input class="bz_password bz_default_hidden bz_mini_login_help" type="text" 
           id="Bugzilla_password_dummy_bottom" value="password"
           title="Password"
           onfocus="mini_login_on_focus('_bottom')"
    >
    <input type="submit" name="GoAheadAndLogIn" value="Log in" 
            id="log_in_bottom">
    <script type="text/javascript">
      mini_login_constants = {
          "login" : "login",
          "warning" : "You must set the login and password before logging in."
      };
      
      if (YAHOO.env.ua.gecko || YAHOO.env.ua.ie || YAHOO.env.ua.opera) {
          YAHOO.util.Event.onDOMReady(function() {
              init_mini_login_form('_bottom');
          });
      }
      else {
          YAHOO.util.Event.on(window, 'load', function () {
              window.setTimeout(function() {
                  init_mini_login_form('_bottom');
              }, 200);
          });
    }
    </script>
    <a href="#" onclick="return hide_mini_login_form('_bottom')">[x]</a>
  </form>
</li>
<li id="forgot_container_bottom">
  <span class="separator">| </span>
  <a id="forgot_link_bottom" href="https://idp-portal.suse.com/univention/self-service/#page=passwordreset">Forgot Password</a>
</li>
</ul>
  </li>

  
    


  <form id="testopia_helper_frm"></form><ul class="links">
    <li>Legal: </li>
    <li><a href="http://en.opensuse.org/Terms_of_site">openSUSE</a></li>
    <li><a href="https://www.suse.com/company/legal/">SUSE</a></li>
  </ul>
</ul>

  <div class="outro"></div>
</div>


</body>
</html>