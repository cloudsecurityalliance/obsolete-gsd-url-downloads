<!DOCTYPE html>
















































<html class="hasSidebar hasPageActions hasBreadcrumb conceptual has-default-focus theme-light" lang="en-us" dir="ltr" data-css-variable-support="true" data-authenticated="false" data-auth-status-determined="false" data-target="docs" x-ms-format-detection="none">

<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<meta property="og:title" content="XML Denial of Service Attacks and Defenses" />
	<meta property="og:type" content="website" />
	<meta property="og:url" content="https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/november/xml-denial-of-service-attacks-and-defenses" />

	<meta name="twitter:card" content="summary" />

	<meta name="twitter:site" content="@docsmsft" />

	<meta name="color-scheme" content="light dark">


	<meta name="author" content="kexugit" />
<meta name="breadcrumb_path" content="/archive/msdn-magazine/breadcrumb/toc.json" />
<meta name="depot_name" content="MSDN.msdn-magazine-archive" />
<meta name="document_id" content="e46cdbc8-581e-536a-a0c2-dd8470208f17" />
<meta name="document_version_independent_id" content="55d95b33-a687-0e3a-eca0-507f8042cc48" />
<meta name="gitcommit" content="https://docs-archive.visualstudio.com/DefaultCollection/docs-archive-project/_git/msdn-magazine-archive-pr/commit/65cb603265929c7971672beaa81fcca59365ddea?path=/msdn-magazine-archive/2009/november/xml-denial-of-service-attacks-and-defenses.md&amp;_a=contents" />
<meta name="is_archived" content="true" />
<meta name="locale" content="en-us" />
<meta name="ms.author" content="Archiveddocs" />
<meta name="ms.date" content="08/13/2015" />
<meta name="ms.prod" content="msdn-magazine" />
<meta name="ms.topic" content="Archived" />
<meta name="ms:assetid" content="aacb4658-3dd1-4b64-a5d6-3e734e3d86ad" />
<meta name="ms:contentKeyID" content="22195422" />
<meta name="ms:mtpsurl" content="https://msdn.microsoft.com/en-us/library/Ee335713(v=MSDN.10)" />
<meta name="mtps_version" content="v=MSDN.10" />
<meta name="original_content_git_url" content="https://docs-archive.visualstudio.com/DefaultCollection/docs-archive-project/_git/msdn-magazine-archive-pr?path=/msdn-magazine-archive/2009/november/xml-denial-of-service-attacks-and-defenses.md&amp;version=GBlive&amp;_a=contents" />
<meta name="ROBOTS" content="INDEX,FOLLOW" />
<meta name="schema" content="Conceptual" />
<meta name="search.ms_docsetname" content="msdn-magazine-archive" />
<meta name="search.ms_product" content="MSDN" />
<meta name="search.ms_sitename" content="Docs" />
<meta name="site_name" content="Docs" />
<meta name="TOCTitle" content="XML Denial of Service Attacks and Defenses" />
<meta name="uhfHeaderId" content="MSDocsHeader-Archive" />
<meta name="updated_at" content="2021-07-27 02:52 AM" />
<meta name="page_type" content="conceptual" />
<meta name="toc_rel" content="toc.json" />
<meta name="word_count" content="3360" />


<link href="https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/november/xml-denial-of-service-attacks-and-defenses" rel="canonical">
	<title>XML Denial of Service Attacks and Defenses | Microsoft Docs</title>

		<link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/styles/46dad2a9.site-ltr.css ">

	

	<script id="msdocs-script">
	var msDocs = {
		data: {
			timeOrigin: Date.now(),
			contentLocale: 'en-us',
			contentDir: 'ltr',
			userLocale: 'en-us',
			userDir: 'ltr',
			pageTemplate: 'Conceptual',
			brand: '',
			context: {

			},
			hasBinaryRating: false,
			hasGithubIssues: false,
			showFeedbackReport: false,
			enableTutorialFeedback: false,
			feedbackSystem: 'None',
			feedbackGitHubRepo: '',
			feedbackProductUrl: '',
			contentGitUrl: 'https://docs-archive.visualstudio.com/DefaultCollection/docs-archive-project/_git/msdn-magazine-archive-pr?path=/msdn-magazine-archive/2009/november/xml-denial-of-service-attacks-and-defenses.md&version=GBlive&_a=contents',
			extendBreadcrumb: true,
			isEditDisplayable: false,
			hideViewSource: false,
			hasPageActions: true,
			hasBookmark: true,
			hasShare: true,
			hasRecommendations: true,
		},
		functions:{}
	};
	</script>
	<script src="https://wcpstatic.microsoft.com/mscc/lib/v2/wcp-consent.js"></script>
	<script src="https://js.monitor.azure.com/scripts/c/ms.jsll-3.min.js"></script>

	<script src="/_themes/docs.theme/master/en-us/_themes/global/5cce29c0.deprecation.js"></script>
		<script src="/_themes/docs.theme/master/en-us/_themes/scripts/bb2ae21c.index-docs.js"></script>
</head>

<body lang="en-us" dir="ltr">
	<div class="header-holder has-default-focus">
		<a href="#main" class="skip-to-main-link has-outline-color-text visually-hidden-until-focused position-fixed has-inner-focus focus-visible top-0 left-0 right-0 padding-xs has-text-centered has-body-background" tabindex="1">Skip to main content</a>

		<div hidden id="cookie-consent-holder"></div>

		<div id="unsupported-browser" style="
			background-color: white;
			color: black;
			padding: 16px;
			border-bottom: 1px solid grey;"
			hidden
		>
			<div style="max-width: 800px; margin: 0 auto;">
				<p style="font-size: 24px">This browser is no longer supported.</p>
				<p style="font-size: 16px; margin-top: 16px;">Upgrade to Microsoft Edge to take advantage of the latest features, security updates, and technical support.</p>
				<div style="margin-top: 12px;">
					<a href="https://go.microsoft.com/fwlink/p/?LinkID=2092881 "
						style="
						background-color: #0078d4;
						border: 1px solid #0078d4;
						color: white;
						padding: 6px 12px;
						border-radius: 2px;
						display: inline-block;
						">
Download Microsoft Edge					</a>
					<a href="https://docs.microsoft.com/en-US/lifecycle/faq/internet-explorer-microsoft-edge"
						style="
							background-color: white;
							padding: 6px 12px;
							border: 1px solid #505050;
							color: #171717;
							border-radius: 2px;
							display: inline-block;
							">
More info					</a>
				</div>
			</div>

		</div>
		<!-- liquid-tag banners global -->
		<div id="headerAreaHolder" data-bi-name="header">
<header role="banner" itemscope="itemscope" itemtype="http://schema.org/Organization">
	<div class="nav-bar">
		<div class="nav-bar-brand">
			<a itemprop="url" href="https://www.microsoft.com" aria-label="Microsoft" class="nav-bar-button">
				<div class="nav-bar-logo has-background-image theme-display is-light" role="presentation" aria-hidden="true" itemprop="logo" itemscope="itemscope"></div>
				<div class="nav-bar-logo has-background-image theme-display is-dark is-high-contrast" role="presentation" aria-hidden="true" itemprop="logo" itemscope="itemscope"></div>
			</a>
		</div>
	</div>
	<div class="nav-bar border-top is-hidden-mobile"></div>
</header>		</div>

						<div class="content-header uhf-container has-padding has-default-focus border-bottom-none" data-bi-name="content-header">
					<nav class="breadcrumb-holder has-padding-none has-padding-left-medium-tablet has-padding-right-medium-tablet has-padding-left-none-uhf-tablet has-padding-left-none-uhf-tablet has-padding-none-desktop flex-grow-1" data-bi-name="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList" role="navigation" aria-label="Breadcrumb">
						<ul id="page-breadcrumbs" class="breadcrumbs">
						</ul>
					</nav>
				<div class="content-header-controls">
					<button type="button" class="contents-button button" data-bi-name="contents-expand" aria-haspopup="true">
						<span class="icon"><span class="docon docon-menu" aria-hidden="true"></span></span>
						<span class="contents-expand-title">Contents</span>
					</button>
					<button type="button" class="ap-collapse-behavior ap-expanded button" data-bi-name="ap-collapse" aria-controls="action-panel">
						<span class="icon"><span class="docon docon-exit-mode" aria-hidden="true"></span></span>
						<span>Exit focus mode</span>
					</button>
				</div>
				<div class="has-padding-none-tablet padding-xs font-size-sm display-flex justify-content-space-between flex-grow-1 page-action-holder">
					<ul class="is-hidden-mobile action-list justify-content-flex-start has-flex-justify-content-end-tablet display-flex flex-wrap-wrap flex-grow-1 is-unstyled">
						<li hidden>
							<a id="lang-link" class="button button button-clear button-sm" title="Read in English" data-bi-name="language-toggle">
								<span id="lang-link-icon" class="icon docon docon-locale-globe" aria-hidden="true"></span>
								<span id="lang-link-text" class="is-visually-hidden-touch is-hidden-portrait"></span>
							</a>
						</li>
						<li>
							<button type="button" class="collection button button-clear button-sm has-inner-focus" data-list-type="collection" data-bi-name="collection" title="Add to collection">
								<span class="icon" aria-hidden="true">
									<span class="docon docon-circle-addition has-text-primary"></span>
								</span>
								<span class="collection-status is-visually-hidden-touch is-hidden-portrait">Save</span>
							</button>
						</li>
						<li>
<div class="sharing dropdown has-caret">
	<button class="dropdown-trigger button button-clear button-sm button-block justify-content-flex-start has-inner-focus" aria-controls="sharing-menu" aria-expanded="false" title="Share This Document" data-bi-name="share">
		<span class="icon" aria-hidden="true">
			<span class="docon docon-sharing"></span>
		</span>
		<span class="is-visually-hidden-touch is-hidden-portrait">Share</span>
	</button>
	<div class="dropdown-menu has-padding-small" id="sharing-menu">
		<ul data-bi-name="share-links">
			<li>
				<a class="button button-clear button-sm button-block justify-content-flex-start has-inner-focus share-twitter" data-bi-name="twitter">
					<span class="icon">
						<span class="docon docon-brand-twitter has-text-primary" aria-hidden="true"></span>
					</span>
					<span>Twitter</span>
				</a>
			</li>
			<li>
				<a class="button button-clear button-sm button-block justify-content-flex-start has-inner-focus share-linkedin" data-bi-name="linkedin">
					<span class="icon">
						<span class="docon docon-brand-linkedin has-text-primary" aria-hidden="true"></span>
					</span>
					<span>LinkedIn</span>
				</a>
			</li>
			<li>
				<a class="button button-clear button-sm button-block justify-content-flex-start has-inner-focus share-facebook" data-bi-name="facebook">
					<span class="icon">
						<span class="docon docon-brand-facebook has-text-primary" aria-hidden="true"></span>
					</span>
					<span>Facebook</span>
				</a>
			</li>
			<li>
				<a class="button button-clear button-sm button-block justify-content-flex-start has-inner-focus share-email" data-bi-name="email">
					<span class="icon">
						<span class="docon docon-mail-message-fill has-text-primary" aria-hidden="true"></span>
					</span>
					<span>Email</span>
				</a>
			</li>
		</ul>
	</div>
</div>						</li>
					</ul>
					<button type="button" class="border contents-button  button button-clear button-sm is-hidden-tablet has-inner-focus" aria-label="Contents" data-bi-name="contents-expand">
						<span class="icon">
							<span class="docon docon-editor-list-bullet" aria-hidden="true"></span>
						</span>
						<span class="contents-expand-title">Table of contents</span>
					</button>
					<div class="is-invisible"></div>
					<div class="is-hidden-tablet level-item is-flexible level-right">
						<button type="button" class="page-actions-button  button button-clear button-sm is-hidden-tablet has-inner-focus border is-full-height  has-margin-left-small" aria-label="Page Actions" data-bi-name="pageactions">
							<span class="icon">
								<span class="docon docon-more-vertical" aria-hidden="true"></span>
							</span>
						</button>
					</div>
				</div>
			</div>



		<div id="disclaimer-holder" class="has-overflow-hidden has-default-focus">
			<!-- liquid-tag banners sectional -->
		</div>
	</div>

	<div class="mainContainer  uhf-container has-top-padding  has-default-focus" data-bi-name="body">

		<div class="columns has-large-gaps is-gapless-mobile ">

			<div id="left-container" class="left-container is-hidden-mobile column is-one-third-tablet is-one-quarter-desktop">
				<nav id="affixed-left-container" class="position-fixed display-flex flex-direction-column" role="navigation" aria-label="Primary"></nav>
			</div>

			<!-- .primary-holder -->
			<section class="primary-holder column is-two-thirds-tablet is-three-quarters-desktop">
				<!--div.columns -->
				<div class="columns is-gapless-mobile has-large-gaps ">


					<div id="main-column" class="column  is-full is-8-desktop">

						<main id="main" role="main" class="content " data-bi-name="content" lang="en-us" dir="ltr">



							

								<ul class="metadata page-metadata" data-bi-name="page info" lang="en-us" dir="ltr">
									<li>
										<time class="is-invisible" data-article-date aria-label="Article review date" datetime="2015-08-13T00:00:00.000Z" data-article-date-source="ms.date">08/13/2015</time>
									</li>
											<li class="readingTime">16 minutes to read</li>
								</ul>

								<nav id="center-doc-outline" class="doc-outline is-hidden-desktop" data-bi-name="intopic toc" role="navigation" aria-label="Article Outline">
									<h3>In this article</h3>
								</nav>


							<!-- <content> -->
								<hr/>
<p>November 2009</p>
<p>Volume 24 Number 11</p>
<h1 id="security-briefs---xml-denial-of-service-attacks-and-defenses">Security Briefs - XML Denial of Service Attacks and Defenses</h1>
<p>By <a href="%5Carchive%5Cmsdn-magazine%5Cauthors%5CBryan_Sullivan" data-linktype="relative-path">Bryan Sullivan</a> | November 2009</p>
<p>Denial of service (DoS) attacks are among the oldest types of attacks against Web sites. Documented DoS attacks exist at least as far back as 1992, which predates SQL injection (discovered in 1998), cross-site scripting (JavaScript wasn’t invented until 1995), and cross-site request forgery (CSRF attacks generally require session cookies, and cookies weren’t introduced until 1994).</p>
<p>From the beginning, DoS attacks were highly popular with the hacker community, and it’s easy to understand why. A single “script kiddie” attacker with a minimal amount of skill and resources could generate a flood of TCP SYN (for synchronize) requests sufficient to knock a site out of service. For the fledgling e-commerce world, this was devastating: if users couldn’t get to a site, they couldn’t very well spend money there either. DoS attacks were the virtual equivalent of erecting a razor-wire fence around a brick-and-mortar store, except that any store could be attacked at any time, day or night.</p>
<p>Over the years, SYN flood attacks have been largely mitigated by improvements in Web server software and network hardware. However, lately there has been a resurgence of interest in DoS attacks within the security community—not for “old school” network-level DoS, but instead for application-level DoS and particularly for XML parser DoS.</p>
<p>XML DoS attacks are extremely asymmetric: to deliver the attack payload, an attacker needs to spend only a fraction of the processing power or bandwidth that the victim needs to spend to handle the payload. Worse still, DoS vulnerabilities in code that processes XML are also extremely widespread. Even if you’re using thoroughly tested parsers like those found in the Microsoft .NET Framework System.Xml classes, your code can still be vulnerable unless you take explicit steps to protect it.</p>
<p>This article describes some of the new XML DoS attacks. It also shows ways for you to detect potential DoS vulnerabilities and how to mitigate them in your code.</p>
<h2 id="xml-bombs">XML Bombs</h2>
<p>One type of especially nasty XML DoS attack is the XML bomb—a block of XML that is both well-formed and valid according to the rules of an XML schema but which crashes or hangs a program when that program attempts to parse it. The best-known example of an XML bomb is probably the Exponential Entity Expansion attack.</p>
<p>Inside an XML document type definition (DTD), you can define your own entities, which essentially act as string substitution macros. For example, you could add this line to your DTD to replace all occurrences of the string &amp;companyname; with “Contoso Inc.”:</p>
<pre><code>&lt;!ENTITY companyname &quot;Contoso Inc.&quot;&gt;
</code></pre>
<p>You can also nest entities, like this:</p>
<pre><code>&lt;!ENTITY companyname &quot;Contoso Inc.&quot;&gt;
&lt;!ENTITY divisionname &quot;&amp;companyname; Web Products Division&quot;&gt;
</code></pre>
<p>While most developers are familiar with using external DTD files, it’s also possible to include inline DTDs along with the XML data itself. You simply define the DTD directly in the &lt;!DOCTYPE &gt; declaration instead of using &lt;!DOCTYPE&gt; to refer to an external DTD file:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE employees [
  &lt;!ELEMENT employees (employee)*&gt;
  &lt;!ELEMENT employee (#PCDATA)&gt;
  &lt;!ENTITY companyname &quot;Contoso Inc.&quot;&gt;
  &lt;!ENTITY divisionname &quot;&amp;companyname; Web Products Division&quot;&gt;
]&gt;
&lt;employees&gt;
  &lt;employee&gt;Glenn P, &amp;divisionname;&lt;/employee&gt;
  &lt;employee&gt;Dave L, &amp;divisionname;&lt;/employee&gt;
&lt;/employees&gt;
</code></pre>
<p>An attacker can now take advantage of these three properties of XML (substitution entities, nested entities, and inline DTDs) to craft a malicious XML bomb. The attacker writes an XML document with nested entities just like the previous example, but instead of nesting just one level deep, he nests his entities many levels deep, as shown here:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
  &lt;!ENTITY lol &quot;lol&quot;&gt;
  &lt;!ENTITY lol2 &quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;&gt;
  &lt;!ENTITY lol3 &quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;&gt;
  &lt;!ENTITY lol4 &quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;&gt;
  &lt;!ENTITY lol5 &quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;&gt;
  &lt;!ENTITY lol6 &quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;&gt;
  &lt;!ENTITY lol7 &quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;&gt;
  &lt;!ENTITY lol8 &quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;&gt;
  &lt;!ENTITY lol9 &quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;
</code></pre>
<p>It should be noted that this XML is both well-formed and valid according to the rules of the DTD. When an XML parser loads this document, it sees that it includes one root element, “lolz”, that contains the text “&amp;lol9;”. However, “&amp;lol9;” is a defined entity that expands to a string containing ten “&amp;lol8;” strings. Each “&amp;lol8;” string is a defined entity that expands to ten “&amp;lol7;” strings, and so forth.  After all the entity expansions have been processed, this small (&lt; 1 KB) block of XML will actually contain a billion “lol”s, taking up almost 3GB of memory!  You can try this attack (sometimes called the Billion Laughs attack) for yourself using this very simple block of code—just be prepared to kill your test app process from Task Manager:</p>
<pre><code>void processXml(string xml)
{
    System.Xml.XmlDocument document = new XmlDocument();
    document.LoadXml(xml);
}
</code></pre>
<p>Some of the more devious readers may be wondering at this point whether it’s possible to create an infinitely recursing entity expansion consisting of two entities that refer to each other:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE lolz [
  &lt;!ENTITY lol1 &quot;&amp;lol2;&quot;&gt;
  &lt;!ENTITY lol2 &quot;&amp;lol1;&quot;&gt;
]&gt;
&lt;lolz&gt;&amp;lol1;&lt;/lolz&gt;
</code></pre>
<p>This would be a very effective attack, but fortunately it isn’t legal XML and will not parse. However, another variation of the Exponential Entity Expansion XML bomb that does work is the Quadratic Blowup attack, discovered by Amit Klein of Trusteer. Instead of defining multiple small, deeply nested entities, the attacker defines one very large entity and refers to it many times:</p>
<pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;!DOCTYPE kaboom [
  &lt;!ENTITY a &quot;aaaaaaaaaaaaaaaaaa...&quot;&gt;
]&gt;
&lt;kaboom&gt;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;&amp;a;...&lt;/kaboom&gt;
</code></pre>
<p>If an attacker defines the entity “&amp;a;” as 50,000 characters long, and refers to that entity 50,000 times inside the root “kaboom” element, he ends up with an XML bomb attack payload slightly over 200 KB in size that expands to 2.5 GB when parsed. This expansion ratio is not quite as impressive as with the Exponential Entity Expansion attack, but it is still enough to take down the parsing process.</p>
<p>Another of Klein’s XML bomb discoveries is the Attribute Blowup attack. Many older XML parsers, including those in the .NET Framework versions 1.0 and 1.1, parse XML attributes in an extremely inefficient quadratic O(n<sup>2</sup>) runtime. By creating an XML document with a large number of attributes (say 100,000 or more) for a single element, the XML parser will monopolize the processor for a long period of time and therefore cause a denial of service condition. However, this vulnerability has been fixed in .NET Framework versions 2.0 and later.</p>
<h2 id="external-entity-attacks">External Entity Attacks</h2>
<p>Instead of defining entity replacement strings as constants, it is also possible to define them so that their values are pulled from external URIs:</p>
<pre><code>&lt;!ENTITY stockprice SYSTEM    &quot;https://www.contoso.com/currentstockprice.ashx&quot;&gt;
</code></pre>
<p>While the exact behavior depends on the particular XML parser implementation, the intent here is that every time the XML parser encounters the entity “&amp;stockprice;” the parser will make a request to <a href="http://www.contoso.com/currentstockprice.ashx" data-linktype="external">www.contoso.com/currentstockprice.ashx</a> and then substitute the response received from that request for the stockprice entity. This is undoubtedly a cool and useful feature of XML, but it also enables some devious DoS attacks.</p>
<p>The simplest way to abuse the external entity functionality is to send the XML parser to a resource that will never return; that is, to send it into an infinite wait loop. For example, if an attacker had control of the server adatum.com, he could set up a generic HTTP handler file at <a href="https://adatum.com/dos.ashx" data-linktype="external">https://adatum.com/dos.ashx</a> as follows:</p>
<pre><code>using System;
using System.Web;
using System.Threading;

public class DoS : IHttpHandler
{
    public void ProcessRequest(HttpContext context)
    {
        Thread.Sleep(Timeout.Infinite);
    }

    public bool IsReusable { get { return false; } }
}
</code></pre>
<p>He could then craft a malicious entity that pointed to <a href="https://adatum.com/dos.ashx" data-linktype="external">https://adatum.com/dos.ashx</a>, and when the XML parser reads the XML file, the parser would hang. However, this is not an especially effective attack. The point of a DoS attack is to consume resources so that they are unavailable to legitimate users of the application. Our earlier examples of Exponential Entity Expansion and Quadratic Blowup XML bombs caused the server to use large amounts of memory and CPU time, but this example does not. All this attack really consumes is a single thread of execution. Let’s improve this attack (from the attacker’s perspective) by forcing the server to consume some resources:</p>
<pre><code>public void ProcessRequest(HttpContext context)
{
    context.Response.ContentType = &quot;text/plain&quot;;
    byte[] data = new byte[1000000];
    for (int i = 0; i &lt; data.Length; i++) { data[i] = (byte)’A’; }
    while (true)
    {
        context.Response.OutputStream.Write(data, 0, data.Length);
        context.Response.Flush();
    }
}
</code></pre>
<p>This code will write an infinite number of ‘A’ characters (one million at a time) to the response stream and chew up a huge amount of memory in a very short amount of time. If the attacker is unable or unwilling to set up a page of his own for this purpose—perhaps he doesn’t want to leave a trail of evidence that points back to him—he can instead point the external entity to a very large resource on a third-party Web site. Movie or file downloads can be especially effective for this purpose; for example, the Visual Studio 2010 Professional beta download is more than 2GB.</p>
<p>Yet another clever variation of this attack is to point an external entity at a target server’s own intranet resources. Discovery of this attack technique is credited to Steve Orrin of Intel. This technique does require the attacker to have internal knowledge of intranet sites accessible by the server, but if an intranet resource attack can be executed, it can be especially effective because the server is spending its own resources (processor time, bandwidth, and memory) to attack itself or its sibling servers on the same network.</p>
<h2 id="defending-against-xml-bombs">Defending Against XML Bombs</h2>
<p>The easiest way to defend against all types of XML entity attacks is to simply disable altogether the use of inline DTD schemas in your XML parsing objects. This is a straightforward application of the principle of attack surface reduction: if you’re not using a feature, turn it off so that attackers won’t be able to abuse it.</p>
<p>In .NET Framework versions 3.5 and earlier, DTD parsing behavior is controlled by the Boolean ProhibitDtd property found in the System.Xml.XmlTextReader and System.Xml.XmlReaderSettings classes. Set this value to true to disable inline DTDs completely:</p>
<pre><code>XmlTextReader reader = new XmlTextReader(stream);
reader.ProhibitDtd = true;
</code></pre>
<p>or</p>
<pre><code>XmlReaderSettings settings = new XmlReaderSettings();
settings.ProhibitDtd = true;
XmlReader reader = XmlReader.Create(stream, settings);
</code></pre>
<p>The default value of ProhibitDtd in XmlReaderSettings is true, but the default value of ProhibitDtd in XmlTextReader is false, which means that you have to explicitly set it to true to disable inline DTDs.</p>
<p>In .NET Framework version 4.0 (in beta at the time of this writing), DTD parsing behavior has been changed. The ProhibitDtd property has been deprecated in favor of the new DtdProcessing property. You can set this property to Prohibit (the default value) to cause the runtime to throw an exception if a &lt;!DOCTYPE&gt; element is present in the XML:</p>
<pre><code>XmlReaderSettings settings = new XmlReaderSettings();
settings.DtdProcessing = DtdProcessing.Prohibit;
XmlReader reader = XmlReader.Create(stream, settings);
</code></pre>
<p>Alternatively, you can set the DtdProcessing property to Ignore, which will not throw an exception on encountering a &lt;!DOCTYPE&gt; element but will simply skip over it and not process it. Finally, you can set DtdProcessing to Parse if you do want to allow and process inline DTDs.</p>
<p>If you really do want to parse DTDs, you should take some additional steps to protect your code. The first step is to limit the size of expanded entities. Remember that the attacks I’ve discussed work by creating entities that expand to huge strings and force the parser to consume large amounts of memory. By setting the MaxCharactersFromEntities property of the XmlReaderSettings object, you can cap the number of characters that can be created through entity expansions. Determine a reasonable maximum and set the property accordingly. Here’s an example:</p>
<pre><code>XmlReaderSettings settings = new XmlReaderSettings();
settings.ProhibitDtd = false;
settings.MaxCharactersFromEntities = 1024;
XmlReader reader = XmlReader.Create(stream, settings);
</code></pre>
<h2 id="defending-against-external-entity-attacks">Defending Against External Entity Attacks</h2>
<p>At this point, we have hardened this code so that it is much less vulnerable to XML bombs, but we haven’t yet addressed the dangers posed by malicious external entities. You can improve your resilience against these attacks if you customize the behavior of XmlReader by changing its XmlResolver. XmlResolver objects are used to resolve external references, including external entities. XmlTextReader instances, as well as XmlReader instances returned from calls to XmlReader.Create, are prepopulated with default XmlResolvers (actually XmlUrlResolvers). You can prevent XmlReader from resolving external entities while still allowing it to resolve inline entities by setting the XmlResolver property of XmlReaderSettings to null. This is attack surface reduction at work again; if you don’t need the capability, turn it off:</p>
<pre><code>XmlReaderSettings settings = new XmlReaderSettings();
settings.ProhibitDtd = false;
settings.MaxCharactersFromEntities = 1024;
settings.XmlResolver = null;
XmlReader reader = XmlReader.Create(stream, settings);
</code></pre>
<p>If this situation doesn’t apply to you—if you really, truly need to resolve external entities—all hope is not lost, but you do have a little more work to do. To make XmlResolver more resilient to denial of service attacks, you need to change its behavior in three ways. First, you need to set a request timeout to prevent infinite delay attacks. Second, you need to limit the amount of data that it will retrieve. Finally, as a defense-in-depth measure, you need to restrict the XmlResolver from retrieving resources on the local host. You can do all of this by creating a custom XmlResolver class.</p>
<p>The behavior that you want to modify is governed by the XmlResolver method GetEntity. Create a new class XmlSafeResolver derived from XmlUrlResolver and override the GetEntity method as follows:</p>
<pre><code>class XmlSafeResolver : XmlUrlResolver
{
    public override object GetEntity(Uri absoluteUri, string role, 
        Type ofObjectToReturn)
    {

    }
}
</code></pre>
<p>The default behavior of the XmlUrlResolver.GetEntity method looks something like the following code, which you can use as a starting point for your implementation:</p>
<pre><code>public override object GetEntity(Uri absoluteUri, string role, 
    Type ofObjectToReturn)
{
    System.Net.WebRequest request = WebRequest.Create(absoluteUri);
    System.Net.WebResponse response = request.GetResponse();
    return response.GetResponseStream();
}
</code></pre>
<p>The first change is to apply timeout values when making the request and when reading the response. Both the System.Net.WebRequest and the System.IO.Stream classes provide inherent support for timeouts. In the sample code shown in <strong>Figure 1</strong>, I simply hardcode the timeout value, but you could easily expose a public Timeout property on the XmlSafeResolver class if you want greater configurability.</p>
<p>Figure 1 Configuring Timeout Values</p>
<pre><code>private const int TIMEOUT = 10000;  // 10 seconds

public override object GetEntity(Uri absoluteUri, string role, 
   Type ofObjectToReturn)
{
    System.Net.WebRequest request = WebRequest.Create(absoluteUri);
    request.Timeout = TIMEOUT;

    System.Net.WebResponse response = request.GetResponse();
    if (response == null)
        throw new XmlException(&quot;Could not resolve external entity&quot;);

    Stream responseStream = response.GetResponseStream();
    if (responseStream == null)
        throw new XmlException(&quot;Could not resolve external entity&quot;);
    responseStream.ReadTimeout = TIMEOUT;
    return responseStream;
}
</code></pre>
<p>The next step is to cap the maximum amount of data that is retrieved in the response. There’s no “MaxSize” property or the equivalent for the Stream class, so you have to implement this functionality yourself. To do this, you can read data from the response stream one chunk at a time and copy it into a local stream cache. If the total number of bytes read from the response stream exceeds a predefined limit (again hardcoded for simplicity only), you stop reading from the stream and throw an exception (see <strong>Figure 2</strong>).</p>
<p>Figure 2 Capping the Maximum Amount of Data Retrieved</p>
<pre><code>private const int TIMEOUT = 10000;                   // 10 seconds
private const int BUFFER_SIZE = 1024;                // 1 KB 
private const int MAX_RESPONSE_SIZE = 1024 * 1024;   // 1 MB

public override object GetEntity(Uri absoluteUri, string role, 
   Type ofObjectToReturn)
{
    System.Net.WebRequest request = WebRequest.Create(absoluteUri);
    request.Timeout = TIMEOUT;

    System.Net.WebResponse response = request.GetResponse();
    if (response == null)
        throw new XmlException(&quot;Could not resolve external entity&quot;);

    Stream responseStream = response.GetResponseStream();
    if (responseStream == null)
        throw new XmlException(&quot;Could not resolve external entity&quot;);
    responseStream.ReadTimeout = TIMEOUT;

    MemoryStream copyStream = new MemoryStream();
    byte[] buffer = new byte[BUFFER_SIZE];
    int bytesRead = 0;
    int totalBytesRead = 0;
    do
    {
        bytesRead = responseStream.Read(buffer, 0, buffer.Length);
        totalBytesRead += bytesRead;
        if (totalBytesRead &gt; MAX_RESPONSE_SIZE)
            throw new XmlException(&quot;Could not resolve external entity&quot;);
        copyStream.Write(buffer, 0, bytesRead);
    } while (bytesRead &gt; 0);

    copyStream.Seek(0, SeekOrigin.Begin);
    return copyStream;
}
</code></pre>
<p>As an alternative, you can wrap the Stream class and implement the limit checking directly in the overridden Read method (see <strong>Figure 3</strong>). This is a more efficient implementation since you save the extra memory allocated for the cached MemoryStream in the earlier example.</p>
<p>Figure 3 Defining a Size-Limited Stream Wrapper Class</p>
<pre><code>class LimitedStream : Stream
{
    private Stream stream = null;
    private int limit = 0;
    private int totalBytesRead = 0;

    public LimitedStream(Stream stream, int limit)
    {
        this.stream = stream;
        this.limit = limit;
    }

    public override int Read(byte[] buffer, int offset, int count)
    {
        int bytesRead = this.stream.Read(buffer, offset, count);
        checked { this.totalBytesRead += bytesRead; }
        if (this.totalBytesRead &gt; this.limit)
            throw new IOException(&quot;Limit exceeded&quot;);
        return bytesRead;
    }

    ...
}
</code></pre>
<p>Now, simply wrap the stream returned from WebResponse.GetResponseStream in a LimitedStream and return the LimitedStream from the GetEntity method (see <strong>Figure 4</strong>).</p>
<p>Figure 4 Using LimitedStream in GetEntity</p>
<pre><code>private const int TIMEOUT = 10000; // 10 seconds
private const int MAX_RESPONSE_SIZE = 1024 * 1024; // 1 MB

public override object GetEntity(Uri absoluteUri, string role, Type
ofObjectToReturn)
{
    System.Net.WebRequest request = WebRequest.Create(absoluteUri);
    request.Timeout = TIMEOUT;

    System.Net.WebResponse response = request.GetResponse();
    if (response == null)
        throw new XmlException(&quot;Could not resolve external entity&quot;);

    Stream responseStream = response.GetResponseStream();
    if (responseStream == null)
        throw new XmlException(&quot;Could not resolve external entity&quot;);
    responseStream.ReadTimeout = TIMEOUT;

    return new LimitedStream(responseStream, MAX_RESPONSE_SIZE);
}
</code></pre>
<p>Finally, add one more defense-in-depth measure by blocking entity resolution of URIs that resolve to the local host (see <strong>Figure 5</strong>).This includes URIs starting with https://localhost, <a href="https://127.0.0.1" data-linktype="external">https://127.0.0.1</a>, and file:// URIs. Note that this also prevents a very nasty information disclosure vulnerability in which attackers can craft entities pointing to file://resources, the contents of which are then duly retrieved and written into the XML document by the parser.</p>
<p>Figure 5 Blocking Local Host Entity Resolution</p>
<pre><code>public override object GetEntity(Uri absoluteUri, string role,
    Type ofObjectToReturn)
{
    if (absoluteUri.IsLoopback)
        return null;
    ...
}
</code></pre>
<p>Now that you’ve defined a more secure XmlResolver, you need to apply it to XmlReader. Explicitly instantiate an XmlReaderSettings object, set the XmlResolver property to an instance of XmlSafeResolver, and then use the XmlReaderSettings when creating XmlReader, as shown here:</p>
<pre><code>XmlReaderSettings settings = new XmlReaderSettings();
settings.XmlResolver = new XmlSafeResolver();
settings.ProhibitDtd = false;   // comment out if .NET 4.0 or later
settings.DtdProcessing = DtdProcessing.Parse;  // comment out if 
                                               // .NET 3.5 or earlier
settings.MaxCharactersFromEntities = 1024;
XmlReader reader = XmlReader.Create(stream, settings);
</code></pre>
<h2 id="additional-considerations">Additional Considerations</h2>
<p>It’s important to note that in many of the System.Xml classes, if an XmlReader is not explicitly provided to an object or a method, then one is implicitly created for it in the framework code. This implicitly created XmlReader will not have any of the additional defenses specified in this article, and it will be vulnerable to attack. The very first code snippet in this article is a great example of this behavior:</p>
<pre><code>void processXml(string xml)
{
    System.Xml.XmlDocument document = new XmlDocument();
    document.LoadXml(xml);
}
</code></pre>
<p>This code is completely vulnerable to all the attacks described in this article. To improve this code, explicitly create an XmlReader with appropriate settings (either disable inline DTD parsing or specify a safer resolver class) and use the XmlDocument.Load(XmlReader) overload instead of XmlDocument.LoadXml or any of the other XmlDocument.Load overloads, as shown in <strong>Figure 6</strong>.</p>
<p>Figure 6 Applying Safer Entity Parsing Settings to XmlDocument</p>
<pre><code>void processXml(string xml)
{
    MemoryStream stream =
        new MemoryStream(Encoding.Default.GetBytes(xml));
    XmlReaderSettings settings = new XmlReaderSettings();

    // allow entity parsing but do so more safely
    settings.ProhibitDtd = false;
    settings.MaxCharactersFromEntities = 1024;
    settings.XmlResolver = new XmlSafeResolver();

    XmlReader reader = XmlReader.Create(stream, settings);
    XmlDocument doc = new XmlDocument();
    doc.Load(reader);
}
</code></pre>
<p>XLinq is somewhat safer in its default settings; the XmlReader created by default for System.Xml.Linq.XDocument does allow DTD parsing, but it automatically sets MaxCharactersFromEntities to 10,000,000 and prohibits external entity resolution. If you are explicitly providing an XmlReader to XDocument, be sure to apply the defensive settings described earlier.</p>
<h2 id="wrapping-up">Wrapping Up</h2>
<p>XML entity expansion is a powerful feature, but it can easily be abused by an attacker to deny service to your application. Be sure to follow the principle of attack surface reduction and disable entity expansion if you don’t require its use. Otherwise, apply appropriate defenses to limit the maximum amount of time and memory your application can spend on it.  </p>
<hr/>
<p><strong>Bryan Sullivan</strong> is a security program manager for the Microsoft Security Development Lifecycle team, specializing in Web application and .NET security issues. He is the author of “AJAXSecurity” (Addison-Wesley, 2007).</p>

							<!-- </content> -->

						</main>

						<!-- page rating section -->
						<!-- end page rating section -->



						<!-- recommendations section -->
							<section id="recommendations-section" data-bi-name="recommendations"></section>
						<!-- end recommendations section -->

						<!-- feedback section -->
						<!-- end feedback section -->

						<!-- feedback report section -->
						<!-- end feedback report section -->

						<div class="border-top is-visible-interactive has-default-focus has-margin-top-large ">



	<footer id="footer-interactive" data-bi-name="footer" class="footer-layout">
	<div class="display-flex is-full-height has-padding-right-extra-large-desktop">
			<a
				data-mscc-ic="false"
				class="locale-selector-link button button-clear flex-shrink-0"
				href="#"
				data-bi-name="select-locale">
					<span class="icon" aria-hidden="true">
						<span class="docon docon-world"></span>
					</span>
					<span class="local-selector-link-text"></span></a>
		<div class="margin-inline-xs flex-shrink-0">
<div class="dropdown has-caret-up">
	<button class="dropdown-trigger button button-clear button-sm has-inner-focus theme-dropdown-trigger"
		aria-controls="theme-menu-interactive" aria-expanded="false" title="Theme" data-bi-name="theme">
		<span class="icon">
			<span class="docon docon-sun" aria-hidden="true"></span>
		</span>
		<span>Theme</span>
	</button>
	<div class="dropdown-menu" id="theme-menu-interactive" role="menu">
		<ul class="theme-selector has-padding-small">
			<li class="theme is-block">
				<button class="button button-clear button-sm theme-control button-block justify-content-flex-start"
					data-theme-to="light">
					<span class="theme-light has-margin-right-small">
						<span
							class="theme-selector-icon css-variable-support border is-inline-block has-body-background"
							aria-hidden="true">
							<svg class="svg" xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 22 14">
								<rect width="22" height="14" class="has-fill-body-background" />
								<rect x="5" y="5" width="12" height="4" class="has-fill-secondary" />
								<rect x="5" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="8" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="11" y="2" width="3" height="1" class="has-fill-secondary" />
								<rect x="1" y="1" width="2" height="2" class="has-fill-secondary" />
								<rect x="5" y="10" width="7" height="2" rx="0.3" class="has-fill-primary" />
								<rect x="19" y="1" width="2" height="2" rx="1" class="has-fill-secondary" />
							</svg>
						</span>
					</span>
					<span role="menuitem">
Light					</span>
				</button>
			</li>
			<li class="theme is-block">
				<button class="button button-clear button-sm theme-control button-block justify-content-flex-start"
					data-theme-to="dark">
					<span class="theme-dark has-margin-right-small">
						<span
							class="border theme-selector-icon css-variable-support is-inline-block has-body-background"
							aria-hidden="true">
							<svg class="svg" xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 22 14">
								<rect width="22" height="14" class="has-fill-body-background" />
								<rect x="5" y="5" width="12" height="4" class="has-fill-secondary" />
								<rect x="5" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="8" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="11" y="2" width="3" height="1" class="has-fill-secondary" />
								<rect x="1" y="1" width="2" height="2" class="has-fill-secondary" />
								<rect x="5" y="10" width="7" height="2" rx="0.3" class="has-fill-primary" />
								<rect x="19" y="1" width="2" height="2" rx="1" class="has-fill-secondary" />
							</svg>
						</span>
					</span>
					<span role="menuitem">
Dark					</span>
				</button>
			</li>
			<li class="theme is-block">
				<button class="button button-clear button-sm theme-control button-block justify-content-flex-start"
					data-theme-to="high-contrast">
					<span class="theme-high-contrast has-margin-right-small">
						<span
							class="border theme-selector-icon css-variable-support is-inline-block has-body-background"
							aria-hidden="true">
							<svg class="svg" xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 22 14">
								<rect width="22" height="14" class="has-fill-body-background" />
								<rect x="5" y="5" width="12" height="4" class="has-fill-secondary" />
								<rect x="5" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="8" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="11" y="2" width="3" height="1" class="has-fill-secondary" />
								<rect x="1" y="1" width="2" height="2" class="has-fill-secondary" />
								<rect x="5" y="10" width="7" height="2" rx="0.3" class="has-fill-primary" />
								<rect x="19" y="1" width="2" height="2" rx="1" class="has-fill-secondary" />
							</svg>
						</span>
					</span>
					<span role="menuitem">
High contrast					</span>
				</button>
			</li>
		</ul>
	</div>
</div>		</div>
	</div>
	<ul class="links" data-bi-name="footerlinks">
		<li class="manage-cookies-holder" hidden></li>
				<li><a data-mscc-ic="false" href="https://docs.microsoft.com/en-us/previous-versions/" data-bi-name="archivelink">Previous Version Docs</a></li>
				<li><a data-mscc-ic="false" href="https://docs.microsoft.com/en-us/teamblog" data-bi-name="bloglink">Blog</a></li>
				<li><a data-mscc-ic="false" href="https://docs.microsoft.com/en-us/contribute" data-bi-name="contributorGuide">Contribute</a></li>
					<li><a data-mscc-ic="false" href="https://go.microsoft.com/fwlink/?LinkId=521839" data-bi-name="privacy">Privacy &amp; Cookies</a></li>
				<li><a data-mscc-ic="false" href="https://docs.microsoft.com/en-us/legal/termsofuse" data-bi-name="termsofuse">Terms of Use</a></li>
				<li><a data-mscc-ic="false" href="https://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx" data-bi-name="trademarks">Trademarks</a></li>
		<li>&copy; Microsoft 2021</li>
	</ul>
</footer>
						</div>
					</div>

						<div
							class="font-size-sm right-container column is-4-desktop display-none display-block-desktop"
							data-bi-name="pageactions"
							role="complementary"
							aria-label="Page Actions">

							<div id="affixed-right-container" class="doc-outline is-vertically-scrollable">
								<nav id="side-doc-outline" data-bi-name="intopic toc" role="navigation" aria-label="Article Outline">
									<h3>In this article</h3>
								</nav>
							</div>
						</div>

				</div>
				<!--end of div.columns -->

			</section>
			<!--end of .primary-holder -->

			<!-- interactive container -->
			<aside id="interactive-container" class="interactive-container is-visible-interactive column has-body-background-dark ">
			</aside>
			<!-- end of interactive container -->
		</div>

	</div>
	<!--end of .mainContainer -->

	<section class="border-top has-default-focus is-hidden-interactive has-margin-top-large ">



	<footer id="footer" data-bi-name="footer" class="footer-layout uhf-container has-padding" role="contentinfo">
	<div class="display-flex is-full-height has-padding-right-extra-large-desktop">
			<a
				data-mscc-ic="false"
				class="locale-selector-link button button-clear flex-shrink-0"
				href="#"
				data-bi-name="select-locale">
					<span class="icon" aria-hidden="true">
						<span class="docon docon-world"></span>
					</span>
					<span class="local-selector-link-text"></span></a>
		<div class="margin-inline-xs flex-shrink-0">
<div class="dropdown has-caret-up">
	<button class="dropdown-trigger button button-clear button-sm has-inner-focus theme-dropdown-trigger"
		aria-controls="theme-menu" aria-expanded="false" title="Theme" data-bi-name="theme">
		<span class="icon">
			<span class="docon docon-sun" aria-hidden="true"></span>
		</span>
		<span>Theme</span>
	</button>
	<div class="dropdown-menu" id="theme-menu" role="menu">
		<ul class="theme-selector has-padding-small">
			<li class="theme is-block">
				<button class="button button-clear button-sm theme-control button-block justify-content-flex-start"
					data-theme-to="light">
					<span class="theme-light has-margin-right-small">
						<span
							class="theme-selector-icon css-variable-support border is-inline-block has-body-background"
							aria-hidden="true">
							<svg class="svg" xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 22 14">
								<rect width="22" height="14" class="has-fill-body-background" />
								<rect x="5" y="5" width="12" height="4" class="has-fill-secondary" />
								<rect x="5" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="8" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="11" y="2" width="3" height="1" class="has-fill-secondary" />
								<rect x="1" y="1" width="2" height="2" class="has-fill-secondary" />
								<rect x="5" y="10" width="7" height="2" rx="0.3" class="has-fill-primary" />
								<rect x="19" y="1" width="2" height="2" rx="1" class="has-fill-secondary" />
							</svg>
						</span>
					</span>
					<span role="menuitem">
Light					</span>
				</button>
			</li>
			<li class="theme is-block">
				<button class="button button-clear button-sm theme-control button-block justify-content-flex-start"
					data-theme-to="dark">
					<span class="theme-dark has-margin-right-small">
						<span
							class="border theme-selector-icon css-variable-support is-inline-block has-body-background"
							aria-hidden="true">
							<svg class="svg" xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 22 14">
								<rect width="22" height="14" class="has-fill-body-background" />
								<rect x="5" y="5" width="12" height="4" class="has-fill-secondary" />
								<rect x="5" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="8" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="11" y="2" width="3" height="1" class="has-fill-secondary" />
								<rect x="1" y="1" width="2" height="2" class="has-fill-secondary" />
								<rect x="5" y="10" width="7" height="2" rx="0.3" class="has-fill-primary" />
								<rect x="19" y="1" width="2" height="2" rx="1" class="has-fill-secondary" />
							</svg>
						</span>
					</span>
					<span role="menuitem">
Dark					</span>
				</button>
			</li>
			<li class="theme is-block">
				<button class="button button-clear button-sm theme-control button-block justify-content-flex-start"
					data-theme-to="high-contrast">
					<span class="theme-high-contrast has-margin-right-small">
						<span
							class="border theme-selector-icon css-variable-support is-inline-block has-body-background"
							aria-hidden="true">
							<svg class="svg" xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 22 14">
								<rect width="22" height="14" class="has-fill-body-background" />
								<rect x="5" y="5" width="12" height="4" class="has-fill-secondary" />
								<rect x="5" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="8" y="2" width="2" height="1" class="has-fill-secondary" />
								<rect x="11" y="2" width="3" height="1" class="has-fill-secondary" />
								<rect x="1" y="1" width="2" height="2" class="has-fill-secondary" />
								<rect x="5" y="10" width="7" height="2" rx="0.3" class="has-fill-primary" />
								<rect x="19" y="1" width="2" height="2" rx="1" class="has-fill-secondary" />
							</svg>
						</span>
					</span>
					<span role="menuitem">
High contrast					</span>
				</button>
			</li>
		</ul>
	</div>
</div>		</div>
	</div>
	<ul class="links" data-bi-name="footerlinks">
		<li class="manage-cookies-holder" hidden></li>
				<li><a data-mscc-ic="false" href="https://docs.microsoft.com/en-us/previous-versions/" data-bi-name="archivelink">Previous Version Docs</a></li>
				<li><a data-mscc-ic="false" href="https://docs.microsoft.com/en-us/teamblog" data-bi-name="bloglink">Blog</a></li>
				<li><a data-mscc-ic="false" href="https://docs.microsoft.com/en-us/contribute" data-bi-name="contributorGuide">Contribute</a></li>
					<li><a data-mscc-ic="false" href="https://go.microsoft.com/fwlink/?LinkId=521839" data-bi-name="privacy">Privacy &amp; Cookies</a></li>
				<li><a data-mscc-ic="false" href="https://docs.microsoft.com/en-us/legal/termsofuse" data-bi-name="termsofuse">Terms of Use</a></li>
				<li><a data-mscc-ic="false" href="https://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx" data-bi-name="trademarks">Trademarks</a></li>
		<li>&copy; Microsoft 2021</li>
	</ul>
</footer>
	</section>

	<div id="action-panel" role="region" aria-label="Action Panel" class="action-panel has-default-focus" tabindex="-1"></div>
</body>
</html>
