<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />

    <title>Komodia/Superfish SSL Validation is broken</title>

    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="shortcut icon" href="/favicon.ico">

    <link rel="stylesheet" type="text/css" href="/assets/css/screen.css?v=7f0b6d17f9" />
    <link rel="stylesheet" type="text/css" href="/assets/fonts/fonts.css?v=7f0b6d17f9" />

    <link rel="canonical" href="https://blog.filippo.io/komodia-superfish-ssl-validation-is-broken/" />
    <meta name="referrer" content="no-referrer-when-downgrade" />
    
    <meta property="og:site_name" content="Filippo.io" />
    <meta property="og:type" content="article" />
    <meta property="og:title" content="Komodia/Superfish SSL Validation is broken" />
    <meta property="og:description" content="If you are on the ball already and just want the new vulnerability, scroll to the &amp;quot;client side SSL verification&amp;quot; section. tl;dr The Komodia/Superfish proxy can be made to allow self-signed certificates without warnings.  Recap Some Lenovo laptops shipped with Superfish preinstalled - an ad injecting" />
    <meta property="og:url" content="https://blog.filippo.io/komodia-superfish-ssl-validation-is-broken/" />
    <meta property="article:published_time" content="2015-02-20T21:11:13.000Z" />
    <meta property="article:modified_time" content="2016-05-13T18:11:34.000Z" />
    <meta property="article:tag" content="TLS" />
    <meta property="article:tag" content="Mainline" />
    
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content="Komodia/Superfish SSL Validation is broken" />
    <meta name="twitter:description" content="If you are on the ball already and just want the new vulnerability, scroll to the &amp;quot;client side SSL verification&amp;quot; section. tl;dr The Komodia/Superfish proxy can be made to allow self-signed certificates without warnings.  Recap Some Lenovo laptops shipped with Superfish preinstalled - an ad injecting" />
    <meta name="twitter:url" content="https://blog.filippo.io/komodia-superfish-ssl-validation-is-broken/" />
    <meta name="twitter:label1" content="Written by" />
    <meta name="twitter:data1" content="Filippo Valsorda" />
    <meta name="twitter:label2" content="Filed under" />
    <meta name="twitter:data2" content="TLS, Mainline" />
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "Filippo.io",
        "url": "https://blog.filippo.io/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.filippo.io/favicon.ico",
            "width": 48,
            "height": 48
        }
    },
    "author": {
        "@type": "Person",
        "name": "Filippo Valsorda",
        "url": "https://blog.filippo.io/author/filippo/",
        "sameAs": []
    },
    "headline": "Komodia/Superfish SSL Validation is broken",
    "url": "https://blog.filippo.io/komodia-superfish-ssl-validation-is-broken/",
    "datePublished": "2015-02-20T21:11:13.000Z",
    "dateModified": "2016-05-13T18:11:34.000Z",
    "keywords": "TLS, Mainline",
    "description": "If you are on the ball already and just want the new vulnerability, scroll to\nthe &quot;client side SSL verification&quot; section. tl;dr The Komodia/Superfish proxy\ncan be made to allow self-signed certificates without warnings.\n\nRecap\nSome Lenovo laptops shipped\n[http://arstechnica.com/security/2015/02/lenovo-pcs-ship-with-man-in-the-middle-adware-that-breaks-https-connections/] \nwith Superfish [http://www.home.superfish.com/] preinstalled - an ad injecting\nsoftware. How it performs ad injection is by u",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://blog.filippo.io/"
    }
}
    </script>

    <meta name="generator" content="Ghost 3.42" />
    <link rel="alternate" type="application/rss+xml" title="Filippo.io" href="https://blog.filippo.io/rss/" />
</head>

<body class="post-template tag-tls tag-mainline">

    

<main class="content" role="main">

    <article class="post tag-tls tag-mainline no-image">

        <header class="post-header">
            <a class="blog-logo" href="/">
                <span class="blog-title">Filippo.io</span>
            </a>
        </header>


        <span class="post-meta"><a href="/author/filippo/">Filippo Valsorda</a>, <time
                datetime="2015-02-20">20 Feb 2015</time>
            on <a href="/tag/tls/">TLS</a> | <a href="/tag/mainline/">Mainline</a></span>

        <h1 class="post-title">Komodia/Superfish SSL Validation is broken</h1>

        <section class="post-content">
            <!--kg-card-begin: markdown--><p><em>If you are on the ball already and just want the new vulnerability, scroll to the &quot;client side SSL verification&quot; section.</em> tl;dr The Komodia/Superfish proxy can be made to allow self-signed certificates without warnings.</p>
<h2 id="recap">Recap</h2>
<p>Some Lenovo laptops <a href="http://arstechnica.com/security/2015/02/lenovo-pcs-ship-with-man-in-the-middle-adware-that-breaks-https-connections/">shipped</a> with <a href="http://www.home.superfish.com/">Superfish</a> preinstalled - an ad injecting software. How it performs ad injection is by using <a href="https://archive.today/pFrkq">a SSL interception engine</a> by <a href="https://archive.today/www.komodia.com">Komodia</a>.</p>
<p>The software is spectacularly bad, and uses the same key on all computers, <a href="http://blog.erratasec.com/2015/02/extracting-superfish-certificate.html">which was extracted easily</a>, allowing hackers to intercept the secure connections of anyone who has Superfish installed. I made a <a href="https://filippo.io/Badfish/">online test, Badfish</a>.</p>
<p><strong>But Superfish <a href="http://marcrogers.org/2015/02/19/will-the-madness-never-end-komodia-ssl-certificates-are-everywhere/">is not the only one</a> using the Komodia engine.</strong> All softwares that do share the same problem, and <a href="https://gist.github.com/Wack0/17c56b77a90073be81d3">their keys can be extracted easily</a> (same password: &quot;komodia&quot;).</p>
<p>However, that's not even necessary, because Komodia is horribly broken.</p>
<h2 id="howkomodiaworks">How Komodia works</h2>
<p>A brief step back to understand how Komodia does SSL/TLS interception and what that means.</p>
<p>On installation the Komodia software will <strong>install a root CA certificate</strong> in the system trust store.</p>
<p>Then when a user tries to visit a HTTPS website, the software will intercept the connection and place itself between the browser and the server.</p>
<p>It will then connect to the server as a client, and relay data between the two. As a certificate to the client it will present <strong>a copy of the server certificate, with a different public key and signed by the root it installed</strong>.</p>
<p>In short, a Man in the Middle attack.</p>
<p>What we all realized in horror is that <strong>the root private key is the same on all machines</strong>, so anyone can take that and sign fake certificates to use in MitM attacks.</p>
<p>(For the record, this could have been a bit less bad if the proxy client rejected its own certificate, but whatever.)</p>
<p>Note that this also means that the actual HTTPS connection is handled by the Komodia proxy client - that is, <strong>it's the Komodia software that will connect to the server over the Internet</strong>. And it's not that good at it: <a href="https://twitter.com/FiloSottile/status/568598220504494080">it will use obsolete cryptography, for example</a>.</p>
<p>Anyway, we thought things couldn't get worse. But.</p>
<h2 id="komodiaclientsidesslverification">Komodia client side SSL verification</h2>
<p>At this point a legit doubt is: <strong>what will the Komodia proxy client do when it sees a invalid/untrusted/self-signed certificate?</strong> Because copying it, changing its public key and signing it would <em>turn it into a valid one without warnings</em>.</p>
<p>Turns out that if a certificate fails validation the Komodia proxy <strong>will still re-sign it</strong> (making it trusted), but <strong>change the domain name</strong> so that a warning is triggered in the browser.</p>
<p>See in the picture below how the certificate name became <code>verify_fail.events.ccc.de</code> to &quot;propagate&quot; the failure to the browser.</p>
<p><img src="https://blog.filippo.io/content/images/2015/02/B-QcLXHIAAAvawx.jpg" alt=""></p>
<p>Hm, still bad since the user/browser will receive fake information on why the certificate is invalid, but clever.</p>
<p><strong>However.</strong></p>
<p>The Komodia proxy copies the server certificate almost entirely... What will it do with <strong>alternative names</strong>?</p>
<p>Alternative names are a X509 extension that allows to specify in a special field other domains for which the certificate is valid.</p>
<p><img src="https://blog.filippo.io/content/images/2015/02/IE11---Win8-1--28Superfished-29--5BRunning-5D-2015-02-20-15-37-05.png" alt=""></p>
<p>Boom. <strong>The Komodia proxy will take a self-signed certificate, leave the alternate names untouched and sign it with their root.</strong> The browser will think it's a completely valid certificate.</p>
<p>So all you need to do to bypass verification is put the target domain in the alternate field, instead of in the main one that will be changed on failure.</p>
<p>An attacker can intercept any https connection, present a self-signed certificate to the client and browsers will show a green lock because Komodia will sign it for them.</p>
<h2 id="consequences">Consequences</h2>
<p>This means that whoever has Komodia software running on their system will accept ANY certificate that has the domain name in the alternates.</p>
<p>No need to extract root keys from each software, this allows MitM against all Komodia-using software at the same time.</p>
<p><strong>It's catastrophic.<br>
It's the only way all this mess could have been even worse.</strong></p>
<p>They can change the keys, or start doing the sane thing and generate a keypair for each device, but <em>this bug will still allow MitM attacks</em>. And with this <strong>attackers don't even need to know what software you are running</strong>, it's a catch-all against the Komodia engine itself.</p>
<p>So all the users out there with Komodia-powered Parental Control software or adware have their banking connections easily intercepted. Well, good job.</p>
<p><s>Yes, a online test is coming. Meanwhile, I serve such a cert at <a href="https://san.filippo.io">san.filippo.io</a>.</s></p>
<p>UPDATE: my <a href="https://filippo.io/Badfish/">online test</a> now checks for all Komodia-powered software with the trick above.</p>
<h2 id="conclusions">Conclusions</h2>
<p>First, don't make intercepting proxies. They are impossible to write correctly, and by their very nature lower the security of the whole Internet.</p>
<p>Second, the Komodia one is a particularly bad one, and they should feel bad.</p>
<p>Third, Komodia should be punished for jeopardizing the users, like probably all the companies that didn't do due diligence here.</p>
<p>More rants <a href="https://twitter.com/FiloSottile">on Twitter</a>.</p>
<!--kg-card-end: markdown-->
        </section>

        <footer class="post-footer">

            <section class="author">
                <h4><a href="/author/filippo/">Filippo Valsorda</a></h4>
                <p>Cryptogopher on the Go team at Google. RC F&#x27;13, F2&#x27;17. You might know me as @FiloSottile.</p>
                <div class="author-meta">
                    
                    
                </div>
                <div class="rc-scout"></div>
                <script async defer
                    src="https://www.recurse-scout.com/loader.js?t=e2e278036cc95428674cb2f247dfbc01"></script>
                <p>Sign up to my newsletter—<a
                        href="https://buttondown.email/cryptography-dispatches?tag=blog">Cryptography
                        Dispatches</a>—for more frequent, lightly edited writings on cryptography.</p>
                <iframe scrolling="no"
                    style="width:100%!important;height:220px;border:1px #ccc solid !important;margin:0"
                    src="https://buttondown.email/cryptography-dispatches?tag=blog&as_embed=true"></iframe>
            </section>

        </footer>


    </article>

</main>


    <footer class="site-footer">
        <a class="subscribe icon-feed" href="https://blog.filippo.io/rss/"><span class="tooltip">Subscribe!</span></a>
        <div class="inner">
            <section class="copyright">All content copyright <a href="https://blog.filippo.io/">Filippo.io</a> &copy;
                2021 &bull; All rights reserved.</section>
            <section class="poweredby">Proudly published with <a class="icon-ghost" href="https://ghost.org">Ghost</a>
            </section>
        </div>
    </footer>

    <!-- Piwik -->
<script type="text/javascript">
  var _paq = _paq || [];
  _paq.push(['trackPageView']);
  _paq.push(['enableLinkTracking']);
  _paq.push(['enableHeartBeatTimer', 10]);
  (function() {
    _paq.push(['setTrackerUrl',  'https://api-05bc671b63643e3999ba178bd0e968a3.filippo.sandcats.io:6080']);
    _paq.push(['setSiteId', 1]);
    _paq.push(['setApiToken', '1BcN9mly-Ur1UhNBek6k0a1qW-Y12e9X-XlwyVfVeRl']);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.defer=true; g.src='https://ls4an735rucvfa6ps6bb.filippo.sandcats.io:6080/embed.js'; s.parentNode.insertBefore(g,s);
  })();
</script>
<!-- End Piwik Code -->

</body>

</html>
