<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head> <title>curl - use of connection struct after free - CVE-2016-5421</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta content="text/html; charset=UTF-8" http-equiv="Content-Type">
<link rel="stylesheet" type="text/css" href="/curl.css">
<link rel="shortcut icon" href="/favicon.ico">
<link rel="icon" href="/logo/curl-symbol.svg" type="image/svg+xml">
<link rel="STYLESHEET" type="text/css" href="https://curl.se/manpage.css">
</head>
<body>
<div class="main">
<div class="menu">
<a href="/docs/" class="menuitem" title="Documentation Overview">Docs Overview</a>
<div class="dropdown">
  <a class="dropbtn" href="/docs/projdocs.html">Project</a>
  <div class="dropdown-content">
    <a href="/docs/bugbounty.html">Bug Bounty</a>
    <a href="/docs/bugs.html">Bug Report</a>
    <a href="/docs/code-of-conduct.html">Code of conduct</a>
    <a href="/docs/libs.html">Dependencies</a>
    <a href="/donation.html">Donate</a>
    <a href="/docs/faq.html">FAQ</a>
    <a href="/docs/features.html">Features</a>
    <a href="/docs/governance.html">Governance</a>
    <a href="/docs/history.html">History</a>
    <a href="/docs/install.html">Install</a>
    <a href="/docs/knownbugs.html">Known Bugs</a>
    <a href="/docs/todo.html">TODO</a>
    <a href="/about.html">Web Site Info</a>
  </div>
</div>
<div class="dropdown">
  <a class="dropbtn" href="/docs/protdocs.html">Protocols</a>
  <div class="dropdown-content">
    <a href="/docs/hsts.html">HSTS</a>
    <a href="/docs/http-cookies.html">HTTP cookies</a>
    <a href="/docs/http2.html">HTTP/2</a>
    <a href="/docs/http3.html">HTTP/3</a>
    <a href="/docs/mqtt.html">MQTT</a>
    <a href="/docs/sslcerts.html">SSL certs</a>
    <a href="/docs/caextract.html">CA Extract</a>
    <a href="/docs/ssl-compared.html">SSL libs compared</a>
    <a href="/docs/url-syntax.html">URL syntax</a>
  </div>
</div>
<div class="dropdown">
  <a class="dropbtn" href="/docs/reldocs.html">Releases</a>
  <div class="dropdown-content">
    <a href="/changes.html">Changelog</a>
    <a href="/docs/releases.html">Release Table</a>
    <a href="/docs/security.html">Security Problems</a>
    <a href="/docs/versions.html">Version Nums</a>
    <a href="/docs/vulnerabilities.html">Vulnerabilities</a>
  </div>
</div>
<div class="dropdown">
  <a class="dropbtn" href="/docs/tooldocs.html">Tool</a>
  <div class="dropdown-content">
    <a href="/docs/comparison-table.html">Comparison Table</a>
    <a href="/docs/manpage.html">curl man page</a>
    <a href="/docs/httpscripting.html">HTTP Scripting</a>
    <a href="/docs/mk-ca-bundle.html">mk-ca-bundle</a>
    <a href="/docs/manual.html">Tutorial</a>
  </div>
</div>
<div class="dropdown">
  <a class="dropbtn" href="/docs/whodocs.html">Who and Why</a>
  <div class="dropdown-content">
    <a href="/docs/companies.html">Companies</a>
    <a href="/docs/copyright.html">Copyright</a>
    <a href="/sponsors.html">Sponsors</a>
    <a href="/docs/thanks.html">Thanks</a>
    <a href="/docs/thename.html">The name</a>
  </div>
</div>
</div>
<div class="contents">
<div class="where"><a href="/">curl</a> / <a href="/docs/">Docs</a> / <a href="/docs/security.html">Security Problems</a> / <b>use of connection struct after free</b></div>
<div class="relatedbox">
<b>Related:</b>
<br><a href="/docs/bugbounty.html">Bug Bounty</a>
<br><a href="/changes.html">Changelog</a>
<br><a href="/donation.html">Donate</a>
<br><a href="faq.html">FAQ</a>
<br><a href="security.html">Security Problems</a>
<br><a href="/dev/secprocess.html">Security Process</a>
<br><a href="vulnerabilities.html">Vulnerabilities Table</a>
</div>
<h1 id="use-of-connection-struct-after-free">use of connection struct after free</h1>
<p>Project curl Security Advisory, August 3rd 2016 - <a href="https://curl.se/docs/CVE-2016-5421.html">Permalink</a></p>
<h2 id="vulnerability">VULNERABILITY</h2>
<p>libcurl is vulnerable to a use-after-free flaw.</p>
<p>libcurl works with easy handles using the type 'CURL *' that are objects the application creates using <code>curl_easy_init()</code>. They are the handles that are all each associated with a single transfer at a time. libcurl also has an internal struct that represents and holds most state that is related to a single connection. An easy handle can hold references to one or many such connection structs depending on the requested operations.</p>
<p>When using libcurl's multi interface, an application performs transfers by adding one or more easy handles to the multi handle and then it can drive all those transfers in parallel.</p>
<p>Due to a flaw, libcurl could leave a pointer to a freed connection struct dangling in an easy handle that was previously added to a multi handle when <code>curl_multi_cleanup()</code> is called with an easy handle still added to it. This does not seem to cause any notable harm if the handle is then closed properly.</p>
<p>However, if the easy handle would instead get used again with the easy interface and <code>curl_easy_perform()</code> to do another transfer, it would blindly use the connection struct pointer now pointing to freed memory.</p>
<p>An application could be made to allocate its own fake version of the connect struct, fill in some data and then have the <code>curl_easy_perform()</code> call do something that clearly was not intended by the original code.</p>
<p>For example, this could be an application using a component or library that uses libcurl to do something against fixed URLs or fixed host names or with a set of fixed options, but using this flaw the application can then make the component to do something completely different and unintended.</p>
<p>Pseudo code for a bad application</p>
<pre><code>easy = curl_easy_init();
curl_easy_setopt(easy, <a href="https://curl.se/libcurl/c/CURLOPT_URL.html">CURLOPT_URL</a>, &quot;http://example.com/&quot;);
// --- start of code to confuse libcurl ---
multi = curl_multi_init();
curl_multi_add_handle(multi, easy);
curl_multi_perform(multi, &amp;still_running);
curl_multi_cleanup(multi);
// --- attack code
allocate_fake_connection_struct()
fill_in_fake_connection_struct()
// ---- end of confusion code
// now this is called, it will not use example.com at all even if the
// option above asks for it...
curl_easy_perform(easy);
</code></pre>
<p>This flaw can also be exploited using libcurl bindings in other languages.</p>
<p>We are not aware of any exploit of this flaw.</p>
<h2 id="info">INFO</h2>
<p>This flaw does not affect the curl command line tool.</p>
<p>The Common Vulnerabilities and Exposures (CVE) project has assigned the name CVE-2016-5421 to this issue.</p>
<h2 id="affected-versions">AFFECTED VERSIONS</h2>
<ul>
<li>Affected versions: libcurl <a href="vuln-7.32.0.html">7.32.0</a> to and including <a href="vuln-7.50.0.html">7.50.0</a></li>
<li>Not affected versions: libcurl &gt;= <a href="vuln-7.50.1.html">7.50.1</a></li>
</ul>
<p>libcurl is used by many applications, but not always advertised as such!</p>
<h2 id="the-solution">THE SOLUTION</h2>
<p>In version <a href="vuln-7.50.1.html">7.50.1</a>, curl clears the memory pointer immediately after free thus removing this vulnerability.</p>
<p>A <a href="https://curl.se/CVE-2016-5421.patch">patch for CVE-2016-5421</a> is available.</p>
<h2 id="recommendations">RECOMMENDATIONS</h2>
<p>We suggest you take one of the following actions immediately, in order of preference:</p>
<p>A - Upgrade curl and libcurl to version <a href="vuln-7.50.1.html">7.50.1</a></p>
<p>B - Apply the patch to your version and rebuild</p>
<p>C - Do not expose easy handles from your libcurl using components</p>
<h2 id="time-line">TIME LINE</h2>
<p>Reported on July 3, 2016. We contacted distros@openwall on July 31.</p>
<p>libcurl <a href="vuln-7.50.1.html">7.50.1</a> was released on August 3 2016, coordinated with the publication of this advisory.</p>
<h2 id="credits">CREDITS</h2>
<p>Found and explained to us by Marcelo Echeverria and Fernando Mu√±oz.</p>
<p>Thanks a lot!</p>
</div>
</div>
<script defer src="https://www.fastly-insights.com/insights.js?k=8cb1247c-87c2-4af9-9229-768b1990f90b" type="text/javascript"></script>
</body> </html>
